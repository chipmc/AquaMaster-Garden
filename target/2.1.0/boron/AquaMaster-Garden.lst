
/Users/chipmc/Documents/Maker/Particle/Projects/AquaMaster-Garden/target/2.1.0/boron/AquaMaster-Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000abd0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000debf0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002e4  2003e0e8  000df3f4  0001e0e8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000428  2003e3d0  2003e3d0  0002e3d0  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000df6d8  000df6d8  0001f6d8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000df704  000df704  0001f704  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001cf747  00000000  00000000  0001f708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d91d  00000000  00000000  001eee4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00039ca2  00000000  00000000  0020c76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003428  00000000  00000000  0024640e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009e00  00000000  00000000  00249836  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f0ef  00000000  00000000  00253636  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004b757  00000000  00000000  00292725  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00117a88  00000000  00000000  002dde7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009a68  00000000  00000000  003f5904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fd9b 	bl	dbb6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fdbd 	bl	dbbbc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0e8 	.word	0x2003e0e8
   d404c:	000df3f4 	.word	0x000df3f4
   d4050:	2003e3cc 	.word	0x2003e3cc
   d4054:	2003e3d0 	.word	0x2003e3d0
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fe79 	bl	dad58 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000debb4 	.word	0x000debb4
   d4080:	000debe4 	.word	0x000debe4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b828 	b.w	d50d8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fa33 	bl	d54f4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 be23 	b.w	dacdc <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 be21 	b.w	d7cdc <malloc>

000d409a <_Znaj>:
   d409a:	f003 be1f 	b.w	d7cdc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 be25 	b.w	d7cec <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fc92 	bl	d79d4 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d76d5 	.word	0x000d76d5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z18outOfMemoryHandleryi+0x8>)
   d40d6:	601a      	str	r2, [r3, #0]
}
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003e120 	.word	0x2003e120

000d40e0 <_Z13awakeTimerISRv>:
void wateringTimerISR() {
  wateringTimerFlag = true;
}

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d40e0:	4a02      	ldr	r2, [pc, #8]	; (d40ec <_Z13awakeTimerISRv+0xc>)
   d40e2:	2301      	movs	r3, #1
   d40e4:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d40e6:	4a02      	ldr	r2, [pc, #8]	; (d40f0 <_Z13awakeTimerISRv+0x10>)
   d40e8:	7013      	strb	r3, [r2, #0]
}
   d40ea:	4770      	bx	lr
   d40ec:	2003e548 	.word	0x2003e548
   d40f0:	2003e578 	.word	0x2003e578

000d40f4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40f4:	6803      	ldr	r3, [r0, #0]
   d40f6:	4718      	bx	r3

000d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40f8:	2a01      	cmp	r2, #1
   d40fa:	d003      	beq.n	d4104 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40fc:	2a02      	cmp	r2, #2
   d40fe:	d003      	beq.n	d4108 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d4100:	2000      	movs	r0, #0
   d4102:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4104:	6001      	str	r1, [r0, #0]
	      break;
   d4106:	e7fb      	b.n	d4100 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4108:	680b      	ldr	r3, [r1, #0]
   d410a:	6003      	str	r3, [r0, #0]
	}
   d410c:	e7f8      	b.n	d4100 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d4110 <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d4110:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d4112:	4b05      	ldr	r3, [pc, #20]	; (d4128 <_Z21batteryContextMessagev+0x18>)
   d4114:	7b1a      	ldrb	r2, [r3, #12]
   d4116:	4b05      	ldr	r3, [pc, #20]	; (d412c <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d4118:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d411a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d411e:	f006 f8ca 	bl	da2b6 <_ZN6StringC1EPKc>
}
   d4122:	4620      	mov	r0, r4
   d4124:	bd10      	pop	{r4, pc}
   d4126:	bf00      	nop
   d4128:	2003e548 	.word	0x2003e548
   d412c:	2003e0e8 	.word	0x2003e0e8

000d4130 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4130:	b538      	push	{r3, r4, r5, lr}
   d4132:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4134:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4136:	b128      	cbz	r0, d4144 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4138:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d413a:	210c      	movs	r1, #12
   d413c:	f006 ff6d 	bl	db01a <_ZdlPvj>
            wakeupSource = next;
   d4140:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4142:	e7f8      	b.n	d4136 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4144:	4620      	mov	r0, r4
   d4146:	bd38      	pop	{r3, r4, r5, pc}

000d4148 <_Z7sendNow6String>:
{
   d4148:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d414a:	4904      	ldr	r1, [pc, #16]	; (d415c <_Z7sendNow6String+0x14>)
   d414c:	f006 f909 	bl	da362 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4150:	b118      	cbz	r0, d415a <_Z7sendNow6String+0x12>
    state = MEASURING_STATE;
   d4152:	4b03      	ldr	r3, [pc, #12]	; (d4160 <_Z7sendNow6String+0x18>)
   d4154:	2203      	movs	r2, #3
   d4156:	701a      	strb	r2, [r3, #0]
    return 1;
   d4158:	2001      	movs	r0, #1
}
   d415a:	bd08      	pop	{r3, pc}
   d415c:	000ddb70 	.word	0x000ddb70
   d4160:	2003e53c 	.word	0x2003e53c

000d4164 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4164:	6943      	ldr	r3, [r0, #20]
   d4166:	b113      	cbz	r3, d416e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4168:	6983      	ldr	r3, [r0, #24]
   d416a:	300c      	adds	r0, #12
   d416c:	4718      	bx	r3
            callback();
        }
    }
   d416e:	4770      	bx	lr

000d4170 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4170:	b510      	push	{r4, lr}
   d4172:	4b03      	ldr	r3, [pc, #12]	; (d4180 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4174:	6003      	str	r3, [r0, #0]
   d4176:	4604      	mov	r4, r0
   d4178:	f002 ff64 	bl	d7044 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}
   d4180:	000de098 	.word	0x000de098

000d4184 <_ZN17PublishQueueAsyncD0Ev>:
   d4184:	b510      	push	{r4, lr}
   d4186:	4604      	mov	r4, r0
   d4188:	f7ff fff2 	bl	d4170 <_ZN17PublishQueueAsyncD1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	2138      	movs	r1, #56	; 0x38
   d4190:	f006 ff43 	bl	db01a <_ZdlPvj>
   d4194:	4620      	mov	r0, r4
   d4196:	bd10      	pop	{r4, pc}

000d4198 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4198:	b510      	push	{r4, lr}
   d419a:	4b03      	ldr	r3, [pc, #12]	; (d41a8 <_ZN8MB85RC64D1Ev+0x10>)
   d419c:	6003      	str	r3, [r0, #0]
   d419e:	4604      	mov	r4, r0
   d41a0:	f002 fd5e 	bl	d6c60 <_ZN6MB85RCD1Ev>
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}
   d41a8:	000de07c 	.word	0x000de07c

000d41ac <_ZN8MB85RC64D0Ev>:
   d41ac:	b510      	push	{r4, lr}
   d41ae:	4604      	mov	r4, r0
   d41b0:	f7ff fff2 	bl	d4198 <_ZN8MB85RC64D1Ev>
   d41b4:	4620      	mov	r0, r4
   d41b6:	2110      	movs	r1, #16
   d41b8:	f006 ff2f 	bl	db01a <_ZdlPvj>
   d41bc:	4620      	mov	r0, r4
   d41be:	bd10      	pop	{r4, pc}

000d41c0 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41c0:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41c2:	2100      	movs	r1, #0
   d41c4:	4604      	mov	r4, r0
   d41c6:	4608      	mov	r0, r1
   d41c8:	f003 f9f4 	bl	d75b4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41cc:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41ce:	4620      	mov	r0, r4
   d41d0:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41d2:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41d4:	f003 fa06 	bl	d75e4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41d8:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41da:	b10c      	cbz	r4, d41e0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d41dc:	2301      	movs	r3, #1
   d41de:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41e0:	2100      	movs	r1, #0
   d41e2:	2001      	movs	r0, #1
   d41e4:	f003 f9e6 	bl	d75b4 <os_thread_scheduling>
            }
        }
        if (t) {
   d41e8:	b12c      	cbz	r4, d41f6 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d41ea:	6823      	ldr	r3, [r4, #0]
   d41ec:	4620      	mov	r0, r4
   d41ee:	689b      	ldr	r3, [r3, #8]
   d41f0:	4798      	blx	r3
            t->running = false;
   d41f2:	2300      	movs	r3, #0
   d41f4:	7123      	strb	r3, [r4, #4]
        }
    }
   d41f6:	b002      	add	sp, #8
   d41f8:	bd10      	pop	{r4, pc}
	...

000d41fc <_Z11resetCounts6String>:
{
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4908      	ldr	r1, [pc, #32]	; (d4220 <_Z11resetCounts6String+0x24>)
   d4200:	f006 f8af 	bl	da362 <_ZNK6String6equalsEPKc>
   d4204:	2300      	movs	r3, #0
  if (command == "1")
   d4206:	b150      	cbz	r0, d421e <_Z11resetCounts6String+0x22>
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d4208:	4a06      	ldr	r2, [pc, #24]	; (d4224 <_Z11resetCounts6String+0x28>)
   d420a:	6113      	str	r3, [r2, #16]
    current.alertCount = 0;                                           // Reset count variables
   d420c:	4a06      	ldr	r2, [pc, #24]	; (d4228 <_Z11resetCounts6String+0x2c>)
   d420e:	6113      	str	r3, [r2, #16]
    dataInFlight = false;
   d4210:	4a06      	ldr	r2, [pc, #24]	; (d422c <_Z11resetCounts6String+0x30>)
   d4212:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d4214:	4b06      	ldr	r3, [pc, #24]	; (d4230 <_Z11resetCounts6String+0x34>)
   d4216:	2001      	movs	r0, #1
   d4218:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d421a:	4b06      	ldr	r3, [pc, #24]	; (d4234 <_Z11resetCounts6String+0x38>)
   d421c:	7018      	strb	r0, [r3, #0]
}
   d421e:	bd08      	pop	{r3, pc}
   d4220:	000ddb70 	.word	0x000ddb70
   d4224:	2003e548 	.word	0x2003e548
   d4228:	2003e480 	.word	0x2003e480
   d422c:	2003e4ab 	.word	0x2003e4ab
   d4230:	2003e4a0 	.word	0x2003e4a0
   d4234:	2003e578 	.word	0x2003e578

000d4238 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4238:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d423a:	2000      	movs	r0, #0
   d423c:	f003 fcc6 	bl	d7bcc <spark_sync_time_pending>
   d4240:	b128      	cbz	r0, d424e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4242:	f003 fc9b 	bl	d7b7c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4246:	f080 0001 	eor.w	r0, r0, #1
   d424a:	b2c0      	uxtb	r0, r0
    }
   d424c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d424e:	2001      	movs	r0, #1
   d4250:	e7fc      	b.n	d424c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4252:	2300      	movs	r3, #0
   d4254:	2204      	movs	r2, #4
   d4256:	f003 bc71 	b.w	d7b3c <spark_variable>
	...

000d425c <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d425c:	b530      	push	{r4, r5, lr}
   d425e:	b085      	sub	sp, #20
   d4260:	4603      	mov	r3, r0
   d4262:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4264:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4266:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4268:	4798      	blx	r3
        size = str.length();
   d426a:	9802      	ldr	r0, [sp, #8]
   d426c:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d426e:	f003 fd35 	bl	d7cdc <malloc>
   d4272:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4274:	b150      	cbz	r0, d428c <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d4276:	6822      	ldr	r2, [r4, #0]
   d4278:	9900      	ldr	r1, [sp, #0]
   d427a:	f007 fc77 	bl	dbb6c <memcpy>
        return 0;
   d427e:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4280:	4668      	mov	r0, sp
   d4282:	f005 ffcd 	bl	da220 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4286:	4620      	mov	r0, r4
   d4288:	b005      	add	sp, #20
   d428a:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d428c:	4c00      	ldr	r4, [pc, #0]	; (d4290 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d428e:	e7f7      	b.n	d4280 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4290:	fffffefc 	.word	0xfffffefc

000d4294 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4294:	4b0a      	ldr	r3, [pc, #40]	; (d42c0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4296:	b510      	push	{r4, lr}
   d4298:	4604      	mov	r4, r0
   d429a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d429c:	f004 ff3e 	bl	d911c <_ZN5spark10LogManager8instanceEv>
   d42a0:	4621      	mov	r1, r4
   d42a2:	f005 f940 	bl	d9526 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d42a6:	f006 fccd 	bl	dac44 <_Z16_fetch_usbserialv>
   d42aa:	f006 fcbf 	bl	dac2c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d42ae:	4620      	mov	r0, r4
   d42b0:	4b04      	ldr	r3, [pc, #16]	; (d42c4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d42b2:	f840 3b04 	str.w	r3, [r0], #4
   d42b6:	f005 f823 	bl	d9300 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d42ba:	4620      	mov	r0, r4
   d42bc:	bd10      	pop	{r4, pc}
   d42be:	bf00      	nop
   d42c0:	000de064 	.word	0x000de064
   d42c4:	000de04c 	.word	0x000de04c

000d42c8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d42c8:	b510      	push	{r4, lr}
   d42ca:	4604      	mov	r4, r0
    }
   d42cc:	f7ff ffe2 	bl	d4294 <_ZN5spark16SerialLogHandlerD1Ev>
   d42d0:	4620      	mov	r0, r4
   d42d2:	2124      	movs	r1, #36	; 0x24
   d42d4:	f006 fea1 	bl	db01a <_ZdlPvj>
   d42d8:	4620      	mov	r0, r4
   d42da:	bd10      	pop	{r4, pc}

000d42dc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d42dc:	b510      	push	{r4, lr}
   d42de:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d42e0:	6800      	ldr	r0, [r0, #0]
   d42e2:	b108      	cbz	r0, d42e8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d42e4:	f003 fd02 	bl	d7cec <free>
class SystemClass {
   d42e8:	4620      	mov	r0, r4
   d42ea:	bd10      	pop	{r4, pc}

000d42ec <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d42ec:	2300      	movs	r3, #0
   d42ee:	6840      	ldr	r0, [r0, #4]
   d42f0:	461a      	mov	r2, r3
   d42f2:	4619      	mov	r1, r3
   d42f4:	f003 bcba 	b.w	d7c6c <network_off>

000d42f8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42f8:	b510      	push	{r4, lr}
      if (_M_manager)
   d42fa:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42fc:	4604      	mov	r4, r0
      if (_M_manager)
   d42fe:	b113      	cbz	r3, d4306 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4300:	2203      	movs	r2, #3
   d4302:	4601      	mov	r1, r0
   d4304:	4798      	blx	r3
    }
   d4306:	4620      	mov	r0, r4
   d4308:	bd10      	pop	{r4, pc}
	...

000d430c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d430c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d430e:	4b13      	ldr	r3, [pc, #76]	; (d435c <_ZN5TimerD1Ev+0x50>)
   d4310:	6003      	str	r3, [r0, #0]
   d4312:	4604      	mov	r4, r0
        if (handle) {
   d4314:	6880      	ldr	r0, [r0, #8]
   d4316:	b1c8      	cbz	r0, d434c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4318:	2500      	movs	r5, #0
   d431a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d431e:	e9cd 3500 	strd	r3, r5, [sp]
   d4322:	2102      	movs	r1, #2
   d4324:	462b      	mov	r3, r5
   d4326:	462a      	mov	r2, r5
   d4328:	f003 f964 	bl	d75f4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d432c:	68a0      	ldr	r0, [r4, #8]
   d432e:	4629      	mov	r1, r5
   d4330:	f003 f9a8 	bl	d7684 <os_timer_set_id>
            while (running) {
   d4334:	7923      	ldrb	r3, [r4, #4]
   d4336:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d433a:	b113      	cbz	r3, d4342 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d433c:	f003 f932 	bl	d75a4 <os_thread_yield>
            while (running) {
   d4340:	e7f8      	b.n	d4334 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d4342:	68a0      	ldr	r0, [r4, #8]
   d4344:	4629      	mov	r1, r5
   d4346:	f003 f945 	bl	d75d4 <os_timer_destroy>
            handle = nullptr;
   d434a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d434c:	f104 000c 	add.w	r0, r4, #12
   d4350:	f7ff ffd2 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
    }
   d4354:	4620      	mov	r0, r4
   d4356:	b003      	add	sp, #12
   d4358:	bd30      	pop	{r4, r5, pc}
   d435a:	bf00      	nop
   d435c:	000de038 	.word	0x000de038

000d4360 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4360:	b510      	push	{r4, lr}
   d4362:	4604      	mov	r4, r0
    }
   d4364:	f7ff ffd2 	bl	d430c <_ZN5TimerD1Ev>
   d4368:	4620      	mov	r0, r4
   d436a:	211c      	movs	r1, #28
   d436c:	f006 fe55 	bl	db01a <_ZdlPvj>
   d4370:	4620      	mov	r0, r4
   d4372:	bd10      	pop	{r4, pc}

000d4374 <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d4374:	b538      	push	{r3, r4, r5, lr}
   d4376:	4604      	mov	r4, r0
            : conf_{} {
   d4378:	2520      	movs	r5, #32
   d437a:	462a      	mov	r2, r5
   d437c:	2100      	movs	r1, #0
   d437e:	f007 fc1d 	bl	dbbbc <memset>
        conf_.size = sizeof(conf_);
   d4382:	7165      	strb	r5, [r4, #5]
    }
   d4384:	4620      	mov	r0, r4
   d4386:	bd38      	pop	{r3, r4, r5, pc}

000d4388 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d438a:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d438c:	4605      	mov	r5, r0
   d438e:	460f      	mov	r7, r1
   d4390:	4616      	mov	r6, r2
        if (valid_) {
   d4392:	b18b      	cbz	r3, d43b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4394:	6803      	ldr	r3, [r0, #0]
   d4396:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4398:	b183      	cbz	r3, d43bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d439a:	889a      	ldrh	r2, [r3, #4]
   d439c:	2a01      	cmp	r2, #1
   d439e:	d006      	beq.n	d43ae <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d43a0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d43a2:	e7f9      	b.n	d4398 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d43a4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d43a6:	b14b      	cbz	r3, d43bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d43a8:	889a      	ldrh	r2, [r3, #4]
   d43aa:	2a01      	cmp	r2, #1
   d43ac:	d1fa      	bne.n	d43a4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d43ae:	b12b      	cbz	r3, d43bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d43b0:	899a      	ldrh	r2, [r3, #12]
   d43b2:	42ba      	cmp	r2, r7
   d43b4:	d1f6      	bne.n	d43a4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d43b6:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d43b8:	4628      	mov	r0, r5
   d43ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d43bc:	490a      	ldr	r1, [pc, #40]	; (d43e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d43be:	2010      	movs	r0, #16
   d43c0:	f006 fe2d 	bl	db01e <_ZnwjRKSt9nothrow_t>
   d43c4:	4604      	mov	r4, r0
   d43c6:	b168      	cbz	r0, d43e4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d43c8:	2210      	movs	r2, #16
   d43ca:	2100      	movs	r1, #0
   d43cc:	f007 fbf6 	bl	dbbbc <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d43d0:	4b06      	ldr	r3, [pc, #24]	; (d43ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d43d2:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d43d4:	2301      	movs	r3, #1
   d43d6:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d43d8:	692b      	ldr	r3, [r5, #16]
   d43da:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d43dc:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d43de:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d43e0:	612c      	str	r4, [r5, #16]
   d43e2:	e7e9      	b.n	d43b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d43e4:	7528      	strb	r0, [r5, #20]
                return *this;
   d43e6:	e7e7      	b.n	d43b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d43e8:	000de8e4 	.word	0x000de8e4
   d43ec:	00030010 	.word	0x00030010

000d43f0 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d43f0:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d43f2:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d43f4:	4605      	mov	r5, r0
   d43f6:	460e      	mov	r6, r1
        if (valid_) {
   d43f8:	b1cb      	cbz	r3, d442e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d43fa:	6803      	ldr	r3, [r0, #0]
   d43fc:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d43fe:	b123      	cbz	r3, d440a <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4400:	889a      	ldrh	r2, [r3, #4]
   d4402:	2a04      	cmp	r2, #4
   d4404:	d017      	beq.n	d4436 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4406:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4408:	e7f9      	b.n	d43fe <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d440a:	490c      	ldr	r1, [pc, #48]	; (d443c <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d440c:	2010      	movs	r0, #16
   d440e:	f006 fe06 	bl	db01e <_ZnwjRKSt9nothrow_t>
   d4412:	4604      	mov	r4, r0
   d4414:	b168      	cbz	r0, d4432 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d4416:	2210      	movs	r2, #16
   d4418:	2100      	movs	r1, #0
   d441a:	f007 fbcf 	bl	dbbbc <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d441e:	4b08      	ldr	r3, [pc, #32]	; (d4440 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d4420:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4422:	2304      	movs	r3, #4
   d4424:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4426:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4428:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d442a:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d442e:	4628      	mov	r0, r5
   d4430:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d4432:	7528      	strb	r0, [r5, #20]
                return *this;
   d4434:	e7fb      	b.n	d442e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4436:	60de      	str	r6, [r3, #12]
                return *this;
   d4438:	e7f9      	b.n	d442e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d443a:	bf00      	nop
   d443c:	000de8e4 	.word	0x000de8e4
   d4440:	00030010 	.word	0x00030010

000d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4444:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4446:	4801      	ldr	r0, [pc, #4]	; (d444c <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4448:	f003 be70 	b.w	d812c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d444c:	000d8101 	.word	0x000d8101

000d4450 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4450:	b40e      	push	{r1, r2, r3}
   d4452:	b510      	push	{r4, lr}
   d4454:	b08d      	sub	sp, #52	; 0x34
   d4456:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4458:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d445a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d445e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4460:	2300      	movs	r3, #0
   d4462:	2020      	movs	r0, #32
   d4464:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4468:	e9cd 4200 	strd	r4, r2, [sp]
   d446c:	201e      	movs	r0, #30
   d446e:	aa04      	add	r2, sp, #16
   d4470:	f003 fac0 	bl	d79f4 <log_message_v>
}
   d4474:	b00d      	add	sp, #52	; 0x34
   d4476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d447a:	b003      	add	sp, #12
   d447c:	4770      	bx	lr

000d447e <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d447e:	b40e      	push	{r1, r2, r3}
   d4480:	b510      	push	{r4, lr}
   d4482:	b08d      	sub	sp, #52	; 0x34
   d4484:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d4486:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d4488:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d448c:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d448e:	2300      	movs	r3, #0
   d4490:	2020      	movs	r0, #32
   d4492:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4496:	e9cd 4200 	strd	r4, r2, [sp]
   d449a:	2032      	movs	r0, #50	; 0x32
   d449c:	aa04      	add	r2, sp, #16
   d449e:	f003 faa9 	bl	d79f4 <log_message_v>
}
   d44a2:	b00d      	add	sp, #52	; 0x34
   d44a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d44a8:	b003      	add	sp, #12
   d44aa:	4770      	bx	lr

000d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44ae:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44b0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44b4:	f88d 3000 	strb.w	r3, [sp]
   d44b8:	f88d 5004 	strb.w	r5, [sp, #4]
   d44bc:	68e4      	ldr	r4, [r4, #12]
   d44be:	233c      	movs	r3, #60	; 0x3c
   d44c0:	47a0      	blx	r4
	}
   d44c2:	b003      	add	sp, #12
   d44c4:	bd30      	pop	{r4, r5, pc}
	...

000d44c8 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d44c8:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d44ca:	780b      	ldrb	r3, [r1, #0]
   d44cc:	4d1c      	ldr	r5, [pc, #112]	; (d4540 <_Z14UbidotsHandlerPKcS0_+0x78>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d44ce:	b093      	sub	sp, #76	; 0x4c
   d44d0:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d44d2:	b993      	cbnz	r3, d44fa <_Z14UbidotsHandlerPKcS0_+0x32>
    snprintf(responseString, sizeof(responseString),"No Data");
   d44d4:	491b      	ldr	r1, [pc, #108]	; (d4544 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d44d6:	a802      	add	r0, sp, #8
   d44d8:	f007 fbbd 	bl	dbc56 <strcpy>
  if (sysStatus.verboseMode) publishQueue.publish("Ubidots Hook", responseString, PRIVATE, WITH_ACK);
   d44dc:	792b      	ldrb	r3, [r5, #4]
   d44de:	b153      	cbz	r3, d44f6 <_Z14UbidotsHandlerPKcS0_+0x2e>
inline particle::Flag<TagT, ValueT>::operator ValueT() const {
    return val_;
}

template<typename TagT, typename ValueT>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d44e0:	4b19      	ldr	r3, [pc, #100]	; (d4548 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d44e2:	491a      	ldr	r1, [pc, #104]	; (d454c <_Z14UbidotsHandlerPKcS0_+0x84>)
   d44e4:	781b      	ldrb	r3, [r3, #0]
   d44e6:	f88d 3000 	strb.w	r3, [sp]
   d44ea:	4b19      	ldr	r3, [pc, #100]	; (d4550 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d44ec:	4819      	ldr	r0, [pc, #100]	; (d4554 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d44ee:	781b      	ldrb	r3, [r3, #0]
   d44f0:	aa02      	add	r2, sp, #8
   d44f2:	f7ff ffdb 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d44f6:	b013      	add	sp, #76	; 0x4c
   d44f8:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d44fa:	4608      	mov	r0, r1
   d44fc:	f007 fb12 	bl	dbb24 <atoi>
   d4500:	28c8      	cmp	r0, #200	; 0xc8
   d4502:	d10d      	bne.n	d4520 <_Z14UbidotsHandlerPKcS0_+0x58>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4504:	4914      	ldr	r1, [pc, #80]	; (d4558 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4506:	a802      	add	r0, sp, #8
   d4508:	f007 fba5 	bl	dbc56 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d450c:	f006 fa5f 	bl	da9ce <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d4510:	4b12      	ldr	r3, [pc, #72]	; (d455c <_Z14UbidotsHandlerPKcS0_+0x94>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4512:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d4514:	2201      	movs	r2, #1
   d4516:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4518:	4b11      	ldr	r3, [pc, #68]	; (d4560 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d451a:	2200      	movs	r2, #0
   d451c:	701a      	strb	r2, [r3, #0]
   d451e:	e7dd      	b.n	d44dc <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4520:	4620      	mov	r0, r4
   d4522:	f007 faff 	bl	dbb24 <atoi>
   d4526:	28c9      	cmp	r0, #201	; 0xc9
   d4528:	d0ec      	beq.n	d4504 <_Z14UbidotsHandlerPKcS0_+0x3c>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d452a:	4620      	mov	r0, r4
   d452c:	f007 fafa 	bl	dbb24 <atoi>
   d4530:	4a0c      	ldr	r2, [pc, #48]	; (d4564 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d4532:	4603      	mov	r3, r0
   d4534:	2140      	movs	r1, #64	; 0x40
   d4536:	a802      	add	r0, sp, #8
   d4538:	f003 fbf0 	bl	d7d1c <snprintf>
   d453c:	e7ce      	b.n	d44dc <_Z14UbidotsHandlerPKcS0_+0x14>
   d453e:	bf00      	nop
   d4540:	2003e548 	.word	0x2003e548
   d4544:	000ddba5 	.word	0x000ddba5
   d4548:	2003e426 	.word	0x2003e426
   d454c:	000ddbdc 	.word	0x000ddbdc
   d4550:	2003e425 	.word	0x2003e425
   d4554:	2003e500 	.word	0x2003e500
   d4558:	000ddbad 	.word	0x000ddbad
   d455c:	2003e578 	.word	0x2003e578
   d4560:	2003e4ab 	.word	0x2003e4ab
   d4564:	000ddbbf 	.word	0x000ddbbf

000d4568 <_Z12hardResetNow6String>:
{
   d4568:	b507      	push	{r0, r1, r2, lr}
   d456a:	490b      	ldr	r1, [pc, #44]	; (d4598 <_Z12hardResetNow6String+0x30>)
   d456c:	f005 fef9 	bl	da362 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4570:	b170      	cbz	r0, d4590 <_Z12hardResetNow6String+0x28>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4572:	2300      	movs	r3, #0
   d4574:	f88d 3000 	strb.w	r3, [sp]
   d4578:	4b08      	ldr	r3, [pc, #32]	; (d459c <_Z12hardResetNow6String+0x34>)
   d457a:	4a09      	ldr	r2, [pc, #36]	; (d45a0 <_Z12hardResetNow6String+0x38>)
   d457c:	781b      	ldrb	r3, [r3, #0]
   d457e:	4909      	ldr	r1, [pc, #36]	; (d45a4 <_Z12hardResetNow6String+0x3c>)
   d4580:	4809      	ldr	r0, [pc, #36]	; (d45a8 <_Z12hardResetNow6String+0x40>)
   d4582:	f7ff ff93 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    ab1805.deepPowerDown(10);
   d4586:	4809      	ldr	r0, [pc, #36]	; (d45ac <_Z12hardResetNow6String+0x44>)
   d4588:	210a      	movs	r1, #10
   d458a:	f002 f873 	bl	d6674 <_ZN6AB180513deepPowerDownEi>
   d458e:	2001      	movs	r0, #1
}
   d4590:	b003      	add	sp, #12
   d4592:	f85d fb04 	ldr.w	pc, [sp], #4
   d4596:	bf00      	nop
   d4598:	000ddb70 	.word	0x000ddb70
   d459c:	2003e425 	.word	0x2003e425
   d45a0:	000ddbe9 	.word	0x000ddbe9
   d45a4:	000ddfe3 	.word	0x000ddfe3
   d45a8:	2003e500 	.word	0x2003e500
   d45ac:	2003e42c 	.word	0x2003e42c

000d45b0 <_Z14setVerboseMode6String>:
{
   d45b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45b2:	4919      	ldr	r1, [pc, #100]	; (d4618 <_Z14setVerboseMode6String+0x68>)
   d45b4:	4605      	mov	r5, r0
   d45b6:	f005 fed4 	bl	da362 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45ba:	4604      	mov	r4, r0
   d45bc:	b1b0      	cbz	r0, d45ec <_Z14setVerboseMode6String+0x3c>
    sysStatus.verboseMode = true;
   d45be:	4b17      	ldr	r3, [pc, #92]	; (d461c <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d45c0:	4a17      	ldr	r2, [pc, #92]	; (d4620 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = true;
   d45c2:	2401      	movs	r4, #1
   d45c4:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d45c6:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d45c8:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d45ca:	b913      	cbnz	r3, d45d2 <_Z14setVerboseMode6String+0x22>
    return 1;
   d45cc:	2001      	movs	r0, #1
}
   d45ce:	b003      	add	sp, #12
   d45d0:	bd30      	pop	{r4, r5, pc}
   d45d2:	4b14      	ldr	r3, [pc, #80]	; (d4624 <_Z14setVerboseMode6String+0x74>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d45d4:	4a14      	ldr	r2, [pc, #80]	; (d4628 <_Z14setVerboseMode6String+0x78>)
   d45d6:	781b      	ldrb	r3, [r3, #0]
   d45d8:	f88d 3000 	strb.w	r3, [sp]
   d45dc:	4b13      	ldr	r3, [pc, #76]	; (d462c <_Z14setVerboseMode6String+0x7c>)
   d45de:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d45e0:	4913      	ldr	r1, [pc, #76]	; (d4630 <_Z14setVerboseMode6String+0x80>)
   d45e2:	4814      	ldr	r0, [pc, #80]	; (d4634 <_Z14setVerboseMode6String+0x84>)
   d45e4:	f7ff ff62 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45e8:	4620      	mov	r0, r4
   d45ea:	e7f0      	b.n	d45ce <_Z14setVerboseMode6String+0x1e>
   d45ec:	4912      	ldr	r1, [pc, #72]	; (d4638 <_Z14setVerboseMode6String+0x88>)
   d45ee:	4628      	mov	r0, r5
   d45f0:	f005 feb7 	bl	da362 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d45f4:	2800      	cmp	r0, #0
   d45f6:	d0ea      	beq.n	d45ce <_Z14setVerboseMode6String+0x1e>
    sysStatus.verboseMode = false;
   d45f8:	4b08      	ldr	r3, [pc, #32]	; (d461c <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d45fa:	4a09      	ldr	r2, [pc, #36]	; (d4620 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = false;
   d45fc:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d45fe:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d4600:	2401      	movs	r4, #1
   d4602:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d4604:	2b00      	cmp	r3, #0
   d4606:	d0e1      	beq.n	d45cc <_Z14setVerboseMode6String+0x1c>
   d4608:	4b06      	ldr	r3, [pc, #24]	; (d4624 <_Z14setVerboseMode6String+0x74>)
   d460a:	4a0c      	ldr	r2, [pc, #48]	; (d463c <_Z14setVerboseMode6String+0x8c>)
   d460c:	781b      	ldrb	r3, [r3, #0]
   d460e:	f88d 3000 	strb.w	r3, [sp]
   d4612:	4b06      	ldr	r3, [pc, #24]	; (d462c <_Z14setVerboseMode6String+0x7c>)
   d4614:	781b      	ldrb	r3, [r3, #0]
   d4616:	e7e3      	b.n	d45e0 <_Z14setVerboseMode6String+0x30>
   d4618:	000ddb70 	.word	0x000ddb70
   d461c:	2003e548 	.word	0x2003e548
   d4620:	2003e578 	.word	0x2003e578
   d4624:	2003e426 	.word	0x2003e426
   d4628:	000ddc01 	.word	0x000ddc01
   d462c:	2003e425 	.word	0x2003e425
   d4630:	000ddd5c 	.word	0x000ddd5c
   d4634:	2003e500 	.word	0x2003e500
   d4638:	000ddd68 	.word	0x000ddd68
   d463c:	000ddc12 	.word	0x000ddc12

000d4640 <_Z11setOpenTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setOpenTime(String command)
   d4640:	b500      	push	{lr}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  makeUpParkHourStrings();                                                    // Create the strings for the console
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (sysStatus.connectedStatus) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4642:	4b0c      	ldr	r3, [pc, #48]	; (d4674 <_Z11setOpenTime6String.part.0+0x34>)
   d4644:	4a0c      	ldr	r2, [pc, #48]	; (d4678 <_Z11setOpenTime6String.part.0+0x38>)
   d4646:	7f1b      	ldrb	r3, [r3, #28]
int setOpenTime(String command)
   d4648:	b0c3      	sub	sp, #268	; 0x10c
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d464a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d464e:	a802      	add	r0, sp, #8
   d4650:	f003 fb64 	bl	d7d1c <snprintf>
   d4654:	4b09      	ldr	r3, [pc, #36]	; (d467c <_Z11setOpenTime6String.part.0+0x3c>)
    publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4656:	490a      	ldr	r1, [pc, #40]	; (d4680 <_Z11setOpenTime6String.part.0+0x40>)
   d4658:	781b      	ldrb	r3, [r3, #0]
   d465a:	f88d 3000 	strb.w	r3, [sp]
   d465e:	4b09      	ldr	r3, [pc, #36]	; (d4684 <_Z11setOpenTime6String.part.0+0x44>)
   d4660:	4809      	ldr	r0, [pc, #36]	; (d4688 <_Z11setOpenTime6String.part.0+0x48>)
   d4662:	781b      	ldrb	r3, [r3, #0]
   d4664:	aa02      	add	r2, sp, #8
   d4666:	f7ff ff21 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d466a:	2001      	movs	r0, #1
   d466c:	b043      	add	sp, #268	; 0x10c
   d466e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4672:	bf00      	nop
   d4674:	2003e548 	.word	0x2003e548
   d4678:	000ddc27 	.word	0x000ddc27
   d467c:	2003e426 	.word	0x2003e426
   d4680:	000dde36 	.word	0x000dde36
   d4684:	2003e425 	.word	0x2003e425
   d4688:	2003e500 	.word	0x2003e500

000d468c <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d468c:	b513      	push	{r0, r1, r4, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d468e:	4925      	ldr	r1, [pc, #148]	; (d4724 <_Z15setLowPowerMode6String+0x98>)
   d4690:	4604      	mov	r4, r0
   d4692:	f005 fe66 	bl	da362 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4696:	b320      	cbz	r0, d46e2 <_Z15setLowPowerMode6String+0x56>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4698:	4922      	ldr	r1, [pc, #136]	; (d4724 <_Z15setLowPowerMode6String+0x98>)
   d469a:	4620      	mov	r0, r4
   d469c:	f005 fe61 	bl	da362 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d46a0:	bb38      	cbnz	r0, d46f2 <_Z15setLowPowerMode6String+0x66>
   d46a2:	4921      	ldr	r1, [pc, #132]	; (d4728 <_Z15setLowPowerMode6String+0x9c>)
   d46a4:	4620      	mov	r0, r4
   d46a6:	f005 fe5c 	bl	da362 <_ZNK6String6equalsEPKc>
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
    }
    sysStatus.lowPowerMode = true;
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d46aa:	2800      	cmp	r0, #0
   d46ac:	d036      	beq.n	d471c <_Z15setLowPowerMode6String+0x90>
  {
    if (!sysStatus.connectedStatus) {                                      // In case we are not connected, we will do so now.
   d46ae:	4c1f      	ldr	r4, [pc, #124]	; (d472c <_Z15setLowPowerMode6String+0xa0>)
   d46b0:	78e2      	ldrb	r2, [r4, #3]
   d46b2:	b912      	cbnz	r2, d46ba <_Z15setLowPowerMode6String+0x2e>
      particleConnectionNeeded = true;
   d46b4:	4b1e      	ldr	r3, [pc, #120]	; (d4730 <_Z15setLowPowerMode6String+0xa4>)
   d46b6:	2201      	movs	r2, #1
   d46b8:	701a      	strb	r2, [r3, #0]
   d46ba:	4b1e      	ldr	r3, [pc, #120]	; (d4734 <_Z15setLowPowerMode6String+0xa8>)
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE, WITH_ACK);
   d46bc:	4a1e      	ldr	r2, [pc, #120]	; (d4738 <_Z15setLowPowerMode6String+0xac>)
   d46be:	781b      	ldrb	r3, [r3, #0]
   d46c0:	f88d 3000 	strb.w	r3, [sp]
   d46c4:	4b1d      	ldr	r3, [pc, #116]	; (d473c <_Z15setLowPowerMode6String+0xb0>)
   d46c6:	491e      	ldr	r1, [pc, #120]	; (d4740 <_Z15setLowPowerMode6String+0xb4>)
   d46c8:	781b      	ldrb	r3, [r3, #0]
   d46ca:	481e      	ldr	r0, [pc, #120]	; (d4744 <_Z15setLowPowerMode6String+0xb8>)
   d46cc:	f7ff feee 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d46d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d46d4:	f003 fb76 	bl	d7dc4 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d46d8:	2300      	movs	r3, #0
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d46da:	491b      	ldr	r1, [pc, #108]	; (d4748 <_Z15setLowPowerMode6String+0xbc>)
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d46dc:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d46de:	2210      	movs	r2, #16
   d46e0:	e019      	b.n	d4716 <_Z15setLowPowerMode6String+0x8a>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d46e2:	4911      	ldr	r1, [pc, #68]	; (d4728 <_Z15setLowPowerMode6String+0x9c>)
   d46e4:	4620      	mov	r0, r4
   d46e6:	f005 fe3c 	bl	da362 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d46ea:	2800      	cmp	r0, #0
   d46ec:	d1d4      	bne.n	d4698 <_Z15setLowPowerMode6String+0xc>
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d46ee:	b002      	add	sp, #8
   d46f0:	bd10      	pop	{r4, pc}
    if (sysStatus.connectedStatus) {
   d46f2:	4c0e      	ldr	r4, [pc, #56]	; (d472c <_Z15setLowPowerMode6String+0xa0>)
   d46f4:	78e2      	ldrb	r2, [r4, #3]
   d46f6:	b152      	cbz	r2, d470e <_Z15setLowPowerMode6String+0x82>
   d46f8:	4b0e      	ldr	r3, [pc, #56]	; (d4734 <_Z15setLowPowerMode6String+0xa8>)
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
   d46fa:	4a14      	ldr	r2, [pc, #80]	; (d474c <_Z15setLowPowerMode6String+0xc0>)
   d46fc:	781b      	ldrb	r3, [r3, #0]
   d46fe:	f88d 3000 	strb.w	r3, [sp]
   d4702:	4b0e      	ldr	r3, [pc, #56]	; (d473c <_Z15setLowPowerMode6String+0xb0>)
   d4704:	490e      	ldr	r1, [pc, #56]	; (d4740 <_Z15setLowPowerMode6String+0xb4>)
   d4706:	781b      	ldrb	r3, [r3, #0]
   d4708:	480e      	ldr	r0, [pc, #56]	; (d4744 <_Z15setLowPowerMode6String+0xb8>)
   d470a:	f7ff fecf 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lowPowerMode = true;
   d470e:	2301      	movs	r3, #1
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d4710:	490f      	ldr	r1, [pc, #60]	; (d4750 <_Z15setLowPowerMode6String+0xc4>)
    sysStatus.lowPowerMode = true;
   d4712:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d4714:	2210      	movs	r2, #16
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d4716:	480f      	ldr	r0, [pc, #60]	; (d4754 <_Z15setLowPowerMode6String+0xc8>)
   d4718:	f007 fadd 	bl	dbcd6 <strncpy>
  systemStatusWriteNeeded = true;
   d471c:	4b0e      	ldr	r3, [pc, #56]	; (d4758 <_Z15setLowPowerMode6String+0xcc>)
   d471e:	2001      	movs	r0, #1
   d4720:	7018      	strb	r0, [r3, #0]
  return 1;
   d4722:	e7e4      	b.n	d46ee <_Z15setLowPowerMode6String+0x62>
   d4724:	000ddb70 	.word	0x000ddb70
   d4728:	000ddd68 	.word	0x000ddd68
   d472c:	2003e548 	.word	0x2003e548
   d4730:	2003e4fd 	.word	0x2003e4fd
   d4734:	2003e426 	.word	0x2003e426
   d4738:	000ddc4a 	.word	0x000ddc4a
   d473c:	2003e425 	.word	0x2003e425
   d4740:	000ddd5c 	.word	0x000ddd5c
   d4744:	2003e500 	.word	0x2003e500
   d4748:	000ddc5c 	.word	0x000ddc5c
   d474c:	000ddc3b 	.word	0x000ddc3b
   d4750:	000ddc60 	.word	0x000ddc60
   d4754:	2003e4ec 	.word	0x2003e4ec
   d4758:	2003e578 	.word	0x2003e578

000d475c <_Z17setWaterThreshold6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d475c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d475e:	6800      	ldr	r0, [r0, #0]
   d4760:	a903      	add	r1, sp, #12
   d4762:	f008 f907 	bl	dc974 <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4766:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d476e:	d42a      	bmi.n	d47c6 <_Z17setWaterThreshold6String+0x6a>
   d4770:	eddf 7a16 	vldr	s15, [pc, #88]	; d47cc <_Z17setWaterThreshold6String+0x70>
   d4774:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d477c:	bfcc      	ite	gt
   d477e:	2601      	movgt	r6, #1
   d4780:	2600      	movle	r6, #0
   d4782:	dc20      	bgt.n	d47c6 <_Z17setWaterThreshold6String+0x6a>
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
  systemStatusWriteNeeded = true;
   d4784:	4b12      	ldr	r3, [pc, #72]	; (d47d0 <_Z17setWaterThreshold6String+0x74>)
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4786:	4d13      	ldr	r5, [pc, #76]	; (d47d4 <_Z17setWaterThreshold6String+0x78>)
  systemStatusWriteNeeded = true;
   d4788:	2401      	movs	r4, #1
   d478a:	701c      	strb	r4, [r3, #0]
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d478c:	ee10 0a10 	vmov	r0, s0
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4790:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4794:	f006 fdae 	bl	db2f4 <__aeabi_f2d>
   d4798:	4a0f      	ldr	r2, [pc, #60]	; (d47d8 <_Z17setWaterThreshold6String+0x7c>)
   d479a:	e9cd 0100 	strd	r0, r1, [sp]
   d479e:	480f      	ldr	r0, [pc, #60]	; (d47dc <_Z17setWaterThreshold6String+0x80>)
   d47a0:	2108      	movs	r1, #8
   d47a2:	f003 fabb 	bl	d7d1c <snprintf>
  if (sysStatus.verboseMode && sysStatus.connectedStatus) {                                                  // Publish result if feeling verbose
   d47a6:	792b      	ldrb	r3, [r5, #4]
   d47a8:	b153      	cbz	r3, d47c0 <_Z17setWaterThreshold6String+0x64>
   d47aa:	78eb      	ldrb	r3, [r5, #3]
   d47ac:	b143      	cbz	r3, d47c0 <_Z17setWaterThreshold6String+0x64>
    publishQueue.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d47ae:	4b0c      	ldr	r3, [pc, #48]	; (d47e0 <_Z17setWaterThreshold6String+0x84>)
   d47b0:	f88d 6000 	strb.w	r6, [sp]
   d47b4:	781b      	ldrb	r3, [r3, #0]
   d47b6:	4a09      	ldr	r2, [pc, #36]	; (d47dc <_Z17setWaterThreshold6String+0x80>)
   d47b8:	490a      	ldr	r1, [pc, #40]	; (d47e4 <_Z17setWaterThreshold6String+0x88>)
   d47ba:	480b      	ldr	r0, [pc, #44]	; (d47e8 <_Z17setWaterThreshold6String+0x8c>)
   d47bc:	f7ff fe76 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
}
   d47c0:	4620      	mov	r0, r4
   d47c2:	b004      	add	sp, #16
   d47c4:	bd70      	pop	{r4, r5, r6, pc}
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d47c6:	2400      	movs	r4, #0
   d47c8:	e7fa      	b.n	d47c0 <_Z17setWaterThreshold6String+0x64>
   d47ca:	bf00      	nop
   d47cc:	42c80000 	.word	0x42c80000
   d47d0:	2003e578 	.word	0x2003e578
   d47d4:	2003e548 	.word	0x2003e548
   d47d8:	000ddc6a 	.word	0x000ddc6a
   d47dc:	2003e579 	.word	0x2003e579
   d47e0:	2003e425 	.word	0x2003e425
   d47e4:	000ddee5 	.word	0x000ddee5
   d47e8:	2003e500 	.word	0x2003e500

000d47ec <_Z9sendEventv>:
void sendEvent() {
   d47ec:	b500      	push	{lr}
   d47ee:	b0c9      	sub	sp, #292	; 0x124
  unsigned long timeStampValue = Time.now();                                       // Going to start sending timestamps - and will modify for midnight to fix reporting issue
   d47f0:	f006 f8ed 	bl	da9ce <_ZN9TimeClass3nowEv>
  snprintf(data, sizeof(data), "{\"soilMoisture\":%i, \"watering\":%i, \"battery\":%i,\"key1\":\"%s\",\"temp\":%i, \"resets\":%i, \"alerts\":%i, \"connecttime\":%i,\"timestamp\":%lu000}",current.soilMoisture, current.solenoidState, sysStatus.stateOfCharge, batteryContext[sysStatus.batteryState], current.temperature, sysStatus.resetCount, current.alertCount, sysStatus.lastConnectionDuration, timeStampValue);
   d47f4:	4a15      	ldr	r2, [pc, #84]	; (d484c <_Z9sendEventv+0x60>)
   d47f6:	9007      	str	r0, [sp, #28]
   d47f8:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   d47fa:	4b15      	ldr	r3, [pc, #84]	; (d4850 <_Z9sendEventv+0x64>)
   d47fc:	9106      	str	r1, [sp, #24]
   d47fe:	6919      	ldr	r1, [r3, #16]
   d4800:	9105      	str	r1, [sp, #20]
   d4802:	6911      	ldr	r1, [r2, #16]
   d4804:	9104      	str	r1, [sp, #16]
   d4806:	68d9      	ldr	r1, [r3, #12]
   d4808:	9103      	str	r1, [sp, #12]
   d480a:	7b10      	ldrb	r0, [r2, #12]
   d480c:	4911      	ldr	r1, [pc, #68]	; (d4854 <_Z9sendEventv+0x68>)
   d480e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d4812:	9102      	str	r1, [sp, #8]
   d4814:	6892      	ldr	r2, [r2, #8]
   d4816:	9201      	str	r2, [sp, #4]
   d4818:	689a      	ldr	r2, [r3, #8]
   d481a:	9200      	str	r2, [sp, #0]
   d481c:	685b      	ldr	r3, [r3, #4]
   d481e:	4a0e      	ldr	r2, [pc, #56]	; (d4858 <_Z9sendEventv+0x6c>)
   d4820:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4824:	a808      	add	r0, sp, #32
   d4826:	f003 fa79 	bl	d7d1c <snprintf>
   d482a:	4b0c      	ldr	r3, [pc, #48]	; (d485c <_Z9sendEventv+0x70>)
  publishQueue.publish("Ubidots-AquaMaster-Garden-v1", data, PRIVATE, WITH_ACK);
   d482c:	490c      	ldr	r1, [pc, #48]	; (d4860 <_Z9sendEventv+0x74>)
   d482e:	781b      	ldrb	r3, [r3, #0]
   d4830:	f88d 3000 	strb.w	r3, [sp]
   d4834:	4b0b      	ldr	r3, [pc, #44]	; (d4864 <_Z9sendEventv+0x78>)
   d4836:	480c      	ldr	r0, [pc, #48]	; (d4868 <_Z9sendEventv+0x7c>)
   d4838:	781b      	ldrb	r3, [r3, #0]
   d483a:	aa08      	add	r2, sp, #32
   d483c:	f7ff fe36 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4840:	4b0a      	ldr	r3, [pc, #40]	; (d486c <_Z9sendEventv+0x80>)
   d4842:	2201      	movs	r2, #1
   d4844:	701a      	strb	r2, [r3, #0]
}
   d4846:	b049      	add	sp, #292	; 0x124
   d4848:	f85d fb04 	ldr.w	pc, [sp], #4
   d484c:	2003e548 	.word	0x2003e548
   d4850:	2003e480 	.word	0x2003e480
   d4854:	2003e0e8 	.word	0x2003e0e8
   d4858:	000ddc73 	.word	0x000ddc73
   d485c:	2003e426 	.word	0x2003e426
   d4860:	000ddcf9 	.word	0x000ddcf9
   d4864:	2003e425 	.word	0x2003e425
   d4868:	2003e500 	.word	0x2003e500
   d486c:	2003e4ab 	.word	0x2003e4ab

000d4870 <_Z16isItSafeToChargev>:
{         
   d4870:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);                                 
   d4872:	2101      	movs	r1, #1
   d4874:	a801      	add	r0, sp, #4
   d4876:	f005 fb7c 	bl	d9f72 <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d487a:	4b0b      	ldr	r3, [pc, #44]	; (d48a8 <_Z16isItSafeToChargev+0x38>)
   d487c:	68db      	ldr	r3, [r3, #12]
   d487e:	3b24      	subs	r3, #36	; 0x24
   d4880:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4882:	a801      	add	r0, sp, #4
   d4884:	f04f 0401 	mov.w	r4, #1
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4888:	d90a      	bls.n	d48a0 <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d488a:	f005 fc05 	bl	da098 <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d488e:	4b07      	ldr	r3, [pc, #28]	; (d48ac <_Z16isItSafeToChargev+0x3c>)
   d4890:	731c      	strb	r4, [r3, #12]
    return false;
   d4892:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d4894:	a801      	add	r0, sp, #4
   d4896:	f005 fb7b 	bl	d9f90 <_ZN4PMICD1Ev>
}
   d489a:	4620      	mov	r0, r4
   d489c:	b002      	add	sp, #8
   d489e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                                            // It is safe to charge the battery
   d48a0:	f005 fbe3 	bl	da06a <_ZN4PMIC14enableChargingEv>
    return true;
   d48a4:	e7f6      	b.n	d4894 <_Z16isItSafeToChargev+0x24>
   d48a6:	bf00      	nop
   d48a8:	2003e480 	.word	0x2003e480
   d48ac:	2003e548 	.word	0x2003e548

000d48b0 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d48b0:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d48b2:	4d19      	ldr	r5, [pc, #100]	; (d4918 <_Z17getSignalStrengthv+0x68>)
   d48b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d48b6:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d48b8:	ac04      	add	r4, sp, #16
   d48ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48c0:	e895 0003 	ldmia.w	r5, {r0, r1}
   d48c4:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d48c8:	4914      	ldr	r1, [pc, #80]	; (d491c <_Z17getSignalStrengthv+0x6c>)
   d48ca:	a80e      	add	r0, sp, #56	; 0x38
   d48cc:	f003 fae2 	bl	d7e94 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d48d0:	a80e      	add	r0, sp, #56	; 0x38
   d48d2:	f003 fb32 	bl	d7f3a <_ZNK14CellularSignal19getAccessTechnologyEv>
   d48d6:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d48d8:	a80e      	add	r0, sp, #56	; 0x38
   d48da:	f003 fb37 	bl	d7f4c <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d48de:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d48e0:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d48e4:	f003 fb62 	bl	d7fac <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d48e8:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d48ea:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d48ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d48f2:	f006 fcff 	bl	db2f4 <__aeabi_f2d>
   d48f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d48fa:	4628      	mov	r0, r5
   d48fc:	f006 fcfa 	bl	db2f4 <__aeabi_f2d>
   d4900:	e9cd 0100 	strd	r0, r1, [sp]
   d4904:	4a06      	ldr	r2, [pc, #24]	; (d4920 <_Z17getSignalStrengthv+0x70>)
   d4906:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d490a:	4806      	ldr	r0, [pc, #24]	; (d4924 <_Z17getSignalStrengthv+0x74>)
   d490c:	2140      	movs	r1, #64	; 0x40
   d490e:	f003 fa05 	bl	d7d1c <snprintf>
}
   d4912:	b019      	add	sp, #100	; 0x64
   d4914:	bd30      	pop	{r4, r5, pc}
   d4916:	bf00      	nop
   d4918:	000de0b8 	.word	0x000de0b8
   d491c:	2003e59c 	.word	0x2003e59c
   d4920:	000ddd16 	.word	0x000ddd16
   d4924:	2003e3d4 	.word	0x2003e3d4

000d4928 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d4928:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d492a:	200f      	movs	r0, #15
   d492c:	f006 fad9 	bl	daee2 <analogRead>
  if (reading < 400) {                                                // This ocrresponds to 0 degrees - less than this and we should take another reading to be sure
   d4930:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d4934:	da05      	bge.n	d4942 <_Z14getTemperaturev+0x1a>
    delay(50);
   d4936:	2032      	movs	r0, #50	; 0x32
   d4938:	f003 fa44 	bl	d7dc4 <delay>
    reading = analogRead(tmp36Pin);
   d493c:	200f      	movs	r0, #15
   d493e:	f006 fad0 	bl	daee2 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4942:	f006 fcc5 	bl	db2d0 <__aeabi_i2d>
   d4946:	a320      	add	r3, pc, #128	; (adr r3, d49c8 <_Z14getTemperaturev+0xa0>)
   d4948:	e9d3 2300 	ldrd	r2, r3, [r3]
   d494c:	f006 fd2a 	bl	db3a4 <__aeabi_dmul>
   d4950:	f007 f820 	bl	db994 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4954:	eddf 7a14 	vldr	s15, [pc, #80]	; d49a8 <_Z14getTemperaturev+0x80>
   d4958:	ee07 0a10 	vmov	s14, r0
   d495c:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4960:	ee17 0a90 	vmov	r0, s15
   d4964:	f006 fcc6 	bl	db2f4 <__aeabi_f2d>
   d4968:	4b10      	ldr	r3, [pc, #64]	; (d49ac <_Z14getTemperaturev+0x84>)
   d496a:	2200      	movs	r2, #0
   d496c:	f006 fb62 	bl	db034 <__aeabi_dsub>
   d4970:	4b0f      	ldr	r3, [pc, #60]	; (d49b0 <_Z14getTemperaturev+0x88>)
   d4972:	2200      	movs	r2, #0
   d4974:	f006 fd16 	bl	db3a4 <__aeabi_dmul>
   d4978:	f006 ffc4 	bl	db904 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d497c:	f006 fca8 	bl	db2d0 <__aeabi_i2d>
   d4980:	4b0c      	ldr	r3, [pc, #48]	; (d49b4 <_Z14getTemperaturev+0x8c>)
   d4982:	2200      	movs	r2, #0
   d4984:	f006 fd0e 	bl	db3a4 <__aeabi_dmul>
   d4988:	4b0b      	ldr	r3, [pc, #44]	; (d49b8 <_Z14getTemperaturev+0x90>)
   d498a:	2200      	movs	r2, #0
   d498c:	f006 fe34 	bl	db5f8 <__aeabi_ddiv>
   d4990:	4b0a      	ldr	r3, [pc, #40]	; (d49bc <_Z14getTemperaturev+0x94>)
   d4992:	2200      	movs	r2, #0
   d4994:	f006 fb50 	bl	db038 <__adddf3>
   d4998:	f006 ffb4 	bl	db904 <__aeabi_d2iz>
   d499c:	4b08      	ldr	r3, [pc, #32]	; (d49c0 <_Z14getTemperaturev+0x98>)
   d499e:	60d8      	str	r0, [r3, #12]
  currentCountsWriteNeeded=true;
   d49a0:	4b08      	ldr	r3, [pc, #32]	; (d49c4 <_Z14getTemperaturev+0x9c>)
   d49a2:	2201      	movs	r2, #1
   d49a4:	701a      	strb	r2, [r3, #0]
}
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	39800000 	.word	0x39800000
   d49ac:	3fe00000 	.word	0x3fe00000
   d49b0:	40590000 	.word	0x40590000
   d49b4:	40220000 	.word	0x40220000
   d49b8:	40140000 	.word	0x40140000
   d49bc:	40400000 	.word	0x40400000
   d49c0:	2003e480 	.word	0x2003e480
   d49c4:	2003e4a0 	.word	0x2003e4a0
   d49c8:	66666666 	.word	0x66666666
   d49cc:	400a6666 	.word	0x400a6666

000d49d0 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d49d0:	b500      	push	{lr}
   d49d2:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d49d4:	4668      	mov	r0, sp
   d49d6:	f7ff fccd 	bl	d4374 <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d49da:	a808      	add	r0, sp, #32
   d49dc:	f7ff fcca 	bl	d4374 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d49e0:	2100      	movs	r1, #0
   d49e2:	a808      	add	r0, sp, #32
   d49e4:	f003 f88c 	bl	d7b00 <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d49e8:	4b13      	ldr	r3, [pc, #76]	; (d4a38 <_Z14setPowerConfigv+0x68>)
   d49ea:	7959      	ldrb	r1, [r3, #5]
   d49ec:	b1a1      	cbz	r1, d4a18 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d49ee:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d49f2:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d49f6:	4b11      	ldr	r3, [pc, #68]	; (d4a3c <_Z14setPowerConfigv+0x6c>)
   d49f8:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d49fa:	f241 0370 	movw	r3, #4208	; 0x1070
   d49fe:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4a02:	9b00      	ldr	r3, [sp, #0]
   d4a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4a08:	9300      	str	r3, [sp, #0]
   d4a0a:	2100      	movs	r1, #0
   d4a0c:	4668      	mov	r0, sp
   d4a0e:	f003 f877 	bl	d7b00 <system_power_management_set_config>
}
   d4a12:	b011      	add	sp, #68	; 0x44
   d4a14:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d4a18:	f241 0370 	movw	r3, #4208	; 0x1070
   d4a1c:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4a20:	4b07      	ldr	r3, [pc, #28]	; (d4a40 <_Z14setPowerConfigv+0x70>)
   d4a22:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4a24:	f241 0310 	movw	r3, #4112	; 0x1010
   d4a28:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d4a2c:	9b00      	ldr	r3, [sp, #0]
   d4a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4a32:	9300      	str	r3, [sp, #0]
   d4a34:	e7ea      	b.n	d4a0c <_Z14setPowerConfigv+0x3c>
   d4a36:	bf00      	nop
   d4a38:	2003e548 	.word	0x2003e548
   d4a3c:	04000384 	.word	0x04000384
   d4a40:	03840384 	.word	0x03840384

000d4a44 <_Z12setSolarMode6String>:
{
   d4a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4a46:	491b      	ldr	r1, [pc, #108]	; (d4ab4 <_Z12setSolarMode6String+0x70>)
   d4a48:	4605      	mov	r5, r0
   d4a4a:	f005 fc8a 	bl	da362 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4a4e:	4604      	mov	r4, r0
   d4a50:	b1c0      	cbz	r0, d4a84 <_Z12setSolarMode6String+0x40>
    sysStatus.solarPowerMode = true;
   d4a52:	4d19      	ldr	r5, [pc, #100]	; (d4ab8 <_Z12setSolarMode6String+0x74>)
   d4a54:	2401      	movs	r4, #1
   d4a56:	716c      	strb	r4, [r5, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4a58:	f7ff ffba 	bl	d49d0 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4a5c:	4b17      	ldr	r3, [pc, #92]	; (d4abc <_Z12setSolarMode6String+0x78>)
   d4a5e:	701c      	strb	r4, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4a60:	78eb      	ldrb	r3, [r5, #3]
   d4a62:	b913      	cbnz	r3, d4a6a <_Z12setSolarMode6String+0x26>
    return 1;
   d4a64:	2001      	movs	r0, #1
}
   d4a66:	b003      	add	sp, #12
   d4a68:	bd30      	pop	{r4, r5, pc}
   d4a6a:	4b15      	ldr	r3, [pc, #84]	; (d4ac0 <_Z12setSolarMode6String+0x7c>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4a6c:	4a15      	ldr	r2, [pc, #84]	; (d4ac4 <_Z12setSolarMode6String+0x80>)
   d4a6e:	781b      	ldrb	r3, [r3, #0]
   d4a70:	f88d 3000 	strb.w	r3, [sp]
   d4a74:	4b14      	ldr	r3, [pc, #80]	; (d4ac8 <_Z12setSolarMode6String+0x84>)
   d4a76:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4a78:	4914      	ldr	r1, [pc, #80]	; (d4acc <_Z12setSolarMode6String+0x88>)
   d4a7a:	4815      	ldr	r0, [pc, #84]	; (d4ad0 <_Z12setSolarMode6String+0x8c>)
   d4a7c:	f7ff fd16 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4a80:	4620      	mov	r0, r4
   d4a82:	e7f0      	b.n	d4a66 <_Z12setSolarMode6String+0x22>
   d4a84:	4913      	ldr	r1, [pc, #76]	; (d4ad4 <_Z12setSolarMode6String+0x90>)
   d4a86:	4628      	mov	r0, r5
   d4a88:	f005 fc6b 	bl	da362 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4a8c:	2800      	cmp	r0, #0
   d4a8e:	d0ea      	beq.n	d4a66 <_Z12setSolarMode6String+0x22>
    sysStatus.solarPowerMode = false;
   d4a90:	4d09      	ldr	r5, [pc, #36]	; (d4ab8 <_Z12setSolarMode6String+0x74>)
    systemStatusWriteNeeded=true;
   d4a92:	4b0a      	ldr	r3, [pc, #40]	; (d4abc <_Z12setSolarMode6String+0x78>)
    sysStatus.solarPowerMode = false;
   d4a94:	716c      	strb	r4, [r5, #5]
    systemStatusWriteNeeded=true;
   d4a96:	2401      	movs	r4, #1
   d4a98:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4a9a:	f7ff ff99 	bl	d49d0 <_Z14setPowerConfigv>
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4a9e:	78eb      	ldrb	r3, [r5, #3]
   d4aa0:	2b00      	cmp	r3, #0
   d4aa2:	d0df      	beq.n	d4a64 <_Z12setSolarMode6String+0x20>
   d4aa4:	4b06      	ldr	r3, [pc, #24]	; (d4ac0 <_Z12setSolarMode6String+0x7c>)
   d4aa6:	4a0c      	ldr	r2, [pc, #48]	; (d4ad8 <_Z12setSolarMode6String+0x94>)
   d4aa8:	781b      	ldrb	r3, [r3, #0]
   d4aaa:	f88d 3000 	strb.w	r3, [sp]
   d4aae:	4b06      	ldr	r3, [pc, #24]	; (d4ac8 <_Z12setSolarMode6String+0x84>)
   d4ab0:	781b      	ldrb	r3, [r3, #0]
   d4ab2:	e7e1      	b.n	d4a78 <_Z12setSolarMode6String+0x34>
   d4ab4:	000ddb70 	.word	0x000ddb70
   d4ab8:	2003e548 	.word	0x2003e548
   d4abc:	2003e578 	.word	0x2003e578
   d4ac0:	2003e426 	.word	0x2003e426
   d4ac4:	000ddd2f 	.word	0x000ddd2f
   d4ac8:	2003e425 	.word	0x2003e425
   d4acc:	000ddd5c 	.word	0x000ddd5c
   d4ad0:	2003e500 	.word	0x2003e500
   d4ad4:	000ddd68 	.word	0x000ddd68
   d4ad8:	000ddd46 	.word	0x000ddd46

000d4adc <_Z17checkSystemValuesv>:
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4adc:	4b24      	ldr	r3, [pc, #144]	; (d4b70 <_Z17checkSystemValuesv+0x94>)
   d4ade:	691a      	ldr	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4ae0:	edd3 7a05 	vldr	s15, [r3, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4ae4:	2aff      	cmp	r2, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4ae6:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4aea:	bf88      	it	hi
   d4aec:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4aee:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4af2:	bf88      	it	hi
   d4af4:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4afa:	d406      	bmi.n	d4b0a <_Z17checkSystemValuesv+0x2e>
   d4afc:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4b00:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b08:	dd01      	ble.n	d4b0e <_Z17checkSystemValuesv+0x32>
   d4b0a:	4a1a      	ldr	r2, [pc, #104]	; (d4b74 <_Z17checkSystemValuesv+0x98>)
   d4b0c:	615a      	str	r2, [r3, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4b0e:	edd3 7a06 	vldr	s15, [r3, #24]
   d4b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b1a:	d406      	bmi.n	d4b2a <_Z17checkSystemValuesv+0x4e>
   d4b1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4b20:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b28:	dd02      	ble.n	d4b30 <_Z17checkSystemValuesv+0x54>
   d4b2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d4b2e:	619a      	str	r2, [r3, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d4b30:	7f1a      	ldrb	r2, [r3, #28]
   d4b32:	2a0c      	cmp	r2, #12
   d4b34:	bf84      	itt	hi
   d4b36:	2200      	movhi	r2, #0
   d4b38:	771a      	strbhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4b3a:	7f5a      	ldrb	r2, [r3, #29]
   d4b3c:	3a0c      	subs	r2, #12
   d4b3e:	2a0c      	cmp	r2, #12
   d4b40:	bf84      	itt	hi
   d4b42:	2218      	movhi	r2, #24
   d4b44:	775a      	strbhi	r2, [r3, #29]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4b46:	4a0c      	ldr	r2, [pc, #48]	; (d4b78 <_Z17checkSystemValuesv+0x9c>)
   d4b48:	6811      	ldr	r1, [r2, #0]
   d4b4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   d4b4c:	428a      	cmp	r2, r1
   d4b4e:	bf84      	itt	hi
   d4b50:	2200      	movhi	r2, #0
   d4b52:	851a      	strhhi	r2, [r3, #40]	; 0x28
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4b54:	2201      	movs	r2, #1
   d4b56:	715a      	strb	r2, [r3, #5]
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4b58:	4b08      	ldr	r3, [pc, #32]	; (d4b7c <_Z17checkSystemValuesv+0xa0>)
   d4b5a:	8b18      	ldrh	r0, [r3, #24]
   d4b5c:	4281      	cmp	r1, r0
    current.maxConnectTime = 0;
   d4b5e:	bf3f      	itttt	cc
   d4b60:	2100      	movcc	r1, #0
   d4b62:	8319      	strhcc	r1, [r3, #24]
    currentCountsWriteNeeded = true;
   d4b64:	4b06      	ldrcc	r3, [pc, #24]	; (d4b80 <_Z17checkSystemValuesv+0xa4>)
   d4b66:	701a      	strbcc	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   d4b68:	4b06      	ldr	r3, [pc, #24]	; (d4b84 <_Z17checkSystemValuesv+0xa8>)
   d4b6a:	2201      	movs	r2, #1
   d4b6c:	701a      	strb	r2, [r3, #0]
}
   d4b6e:	4770      	bx	lr
   d4b70:	2003e548 	.word	0x2003e548
   d4b74:	c0a00000 	.word	0xc0a00000
   d4b78:	2003e10c 	.word	0x2003e10c
   d4b7c:	2003e480 	.word	0x2003e480
   d4b80:	2003e4a0 	.word	0x2003e4a0
   d4b84:	2003e578 	.word	0x2003e578

000d4b88 <_Z21makeUpParkHourStringsv>:
void makeUpParkHourStrings() {
   d4b88:	b510      	push	{r4, lr}
  if (sysStatus.openTime == 0 && sysStatus.closeTime == 24) {
   d4b8a:	4c0e      	ldr	r4, [pc, #56]	; (d4bc4 <_Z21makeUpParkHourStringsv+0x3c>)
   d4b8c:	8ba3      	ldrh	r3, [r4, #28]
   d4b8e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4b92:	d109      	bne.n	d4ba8 <_Z21makeUpParkHourStringsv+0x20>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   d4b94:	490c      	ldr	r1, [pc, #48]	; (d4bc8 <_Z21makeUpParkHourStringsv+0x40>)
   d4b96:	480d      	ldr	r0, [pc, #52]	; (d4bcc <_Z21makeUpParkHourStringsv+0x44>)
   d4b98:	f007 f85d 	bl	dbc56 <strcpy>
}
   d4b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   d4ba0:	4909      	ldr	r1, [pc, #36]	; (d4bc8 <_Z21makeUpParkHourStringsv+0x40>)
   d4ba2:	480b      	ldr	r0, [pc, #44]	; (d4bd0 <_Z21makeUpParkHourStringsv+0x48>)
   d4ba4:	f007 b857 	b.w	dbc56 <strcpy>
  snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.openTime);
   d4ba8:	7f23      	ldrb	r3, [r4, #28]
   d4baa:	4a0a      	ldr	r2, [pc, #40]	; (d4bd4 <_Z21makeUpParkHourStringsv+0x4c>)
   d4bac:	4807      	ldr	r0, [pc, #28]	; (d4bcc <_Z21makeUpParkHourStringsv+0x44>)
   d4bae:	2108      	movs	r1, #8
   d4bb0:	f003 f8b4 	bl	d7d1c <snprintf>
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4bb4:	7f63      	ldrb	r3, [r4, #29]
   d4bb6:	4a07      	ldr	r2, [pc, #28]	; (d4bd4 <_Z21makeUpParkHourStringsv+0x4c>)
   d4bb8:	4805      	ldr	r0, [pc, #20]	; (d4bd0 <_Z21makeUpParkHourStringsv+0x48>)
}
   d4bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4bbe:	2108      	movs	r1, #8
   d4bc0:	f003 b8ac 	b.w	d7d1c <snprintf>
   d4bc4:	2003e548 	.word	0x2003e548
   d4bc8:	000ddd61 	.word	0x000ddd61
   d4bcc:	2003e116 	.word	0x2003e116
   d4bd0:	2003e104 	.word	0x2003e104
   d4bd4:	000ddd64 	.word	0x000ddd64

000d4bd8 <_Z11setOpenTime6String>:
{
   d4bd8:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4bda:	220a      	movs	r2, #10
   d4bdc:	6800      	ldr	r0, [r0, #0]
   d4bde:	a901      	add	r1, sp, #4
   d4be0:	f007 ff9c 	bl	dcb1c <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4be4:	2817      	cmp	r0, #23
   d4be6:	d80c      	bhi.n	d4c02 <_Z11setOpenTime6String+0x2a>
  sysStatus.openTime = tempTime;
   d4be8:	4c07      	ldr	r4, [pc, #28]	; (d4c08 <_Z11setOpenTime6String+0x30>)
   d4bea:	7720      	strb	r0, [r4, #28]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4bec:	f7ff ffcc 	bl	d4b88 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4bf0:	4b06      	ldr	r3, [pc, #24]	; (d4c0c <_Z11setOpenTime6String+0x34>)
   d4bf2:	2001      	movs	r0, #1
   d4bf4:	7018      	strb	r0, [r3, #0]
  if (sysStatus.connectedStatus) {
   d4bf6:	78e3      	ldrb	r3, [r4, #3]
   d4bf8:	b10b      	cbz	r3, d4bfe <_Z11setOpenTime6String+0x26>
   d4bfa:	f7ff fd21 	bl	d4640 <_Z11setOpenTime6String.part.0>
}
   d4bfe:	b002      	add	sp, #8
   d4c00:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4c02:	2000      	movs	r0, #0
   d4c04:	e7fb      	b.n	d4bfe <_Z11setOpenTime6String+0x26>
   d4c06:	bf00      	nop
   d4c08:	2003e548 	.word	0x2003e548
   d4c0c:	2003e578 	.word	0x2003e578

000d4c10 <_Z12setCloseTime6String>:
{
   d4c10:	b530      	push	{r4, r5, lr}
   d4c12:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4c14:	6800      	ldr	r0, [r0, #0]
   d4c16:	220a      	movs	r2, #10
   d4c18:	a903      	add	r1, sp, #12
   d4c1a:	f007 ff7f 	bl	dcb1c <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4c1e:	2818      	cmp	r0, #24
   d4c20:	d81c      	bhi.n	d4c5c <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
   d4c22:	4d10      	ldr	r5, [pc, #64]	; (d4c64 <_Z12setCloseTime6String+0x54>)
   d4c24:	7768      	strb	r0, [r5, #29]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4c26:	f7ff ffaf 	bl	d4b88 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4c2a:	4b0f      	ldr	r3, [pc, #60]	; (d4c68 <_Z12setCloseTime6String+0x58>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4c2c:	4a0f      	ldr	r2, [pc, #60]	; (d4c6c <_Z12setCloseTime6String+0x5c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4c2e:	2401      	movs	r4, #1
   d4c30:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4c32:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4c36:	7f6b      	ldrb	r3, [r5, #29]
   d4c38:	a804      	add	r0, sp, #16
   d4c3a:	f003 f86f 	bl	d7d1c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4c3e:	78eb      	ldrb	r3, [r5, #3]
   d4c40:	b153      	cbz	r3, d4c58 <_Z12setCloseTime6String+0x48>
   d4c42:	4b0b      	ldr	r3, [pc, #44]	; (d4c70 <_Z12setCloseTime6String+0x60>)
   d4c44:	490b      	ldr	r1, [pc, #44]	; (d4c74 <_Z12setCloseTime6String+0x64>)
   d4c46:	781b      	ldrb	r3, [r3, #0]
   d4c48:	f88d 3000 	strb.w	r3, [sp]
   d4c4c:	4b0a      	ldr	r3, [pc, #40]	; (d4c78 <_Z12setCloseTime6String+0x68>)
   d4c4e:	480b      	ldr	r0, [pc, #44]	; (d4c7c <_Z12setCloseTime6String+0x6c>)
   d4c50:	781b      	ldrb	r3, [r3, #0]
   d4c52:	aa04      	add	r2, sp, #16
   d4c54:	f7ff fc2a 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d4c58:	4620      	mov	r0, r4
   d4c5a:	e000      	b.n	d4c5e <_Z12setCloseTime6String+0x4e>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4c5c:	2000      	movs	r0, #0
}
   d4c5e:	b045      	add	sp, #276	; 0x114
   d4c60:	bd30      	pop	{r4, r5, pc}
   d4c62:	bf00      	nop
   d4c64:	2003e548 	.word	0x2003e548
   d4c68:	2003e578 	.word	0x2003e578
   d4c6c:	000ddd6a 	.word	0x000ddd6a
   d4c70:	2003e426 	.word	0x2003e426
   d4c74:	000dde36 	.word	0x000dde36
   d4c78:	2003e425 	.word	0x2003e425
   d4c7c:	2003e500 	.word	0x2003e500

000d4c80 <_Z22disconnectFromParticlev>:
{
   d4c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4c84:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d4c86:	2400      	movs	r4, #0
  Particle.disconnect();
   d4c88:	a801      	add	r0, sp, #4
   d4c8a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4c8e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4c92:	f003 fa5c 	bl	d814e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d4c96:	4620      	mov	r0, r4
   d4c98:	f002 fd34 	bl	d7704 <hal_timer_millis>
        while (_while() && !_condition()) {
   d4c9c:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d4ca0:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d4ca2:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4ca6:	2000      	movs	r0, #0
   d4ca8:	f002 fd2c 	bl	d7704 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4cac:	1b46      	subs	r6, r0, r5
   d4cae:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4cb2:	45b9      	cmp	r9, r7
   d4cb4:	bf08      	it	eq
   d4cb6:	45b0      	cmpeq	r8, r6
   d4cb8:	d305      	bcc.n	d4cc6 <_Z22disconnectFromParticlev+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4cba:	f002 ff5f 	bl	d7b7c <spark_cloud_flag_connected>
   d4cbe:	b110      	cbz	r0, d4cc6 <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d4cc0:	f002 ff4c 	bl	d7b5c <spark_process>
        while (_while() && !_condition()) {
   d4cc4:	e7ef      	b.n	d4ca6 <_Z22disconnectFromParticlev+0x26>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cc6:	4c0a      	ldr	r4, [pc, #40]	; (d4cf0 <_Z22disconnectFromParticlev+0x70>)
   d4cc8:	f002 ff58 	bl	d7b7c <spark_cloud_flag_connected>
   d4ccc:	6860      	ldr	r0, [r4, #4]
   d4cce:	2200      	movs	r2, #0
   d4cd0:	2102      	movs	r1, #2
   d4cd2:	f002 ffb3 	bl	d7c3c <network_disconnect>
  Cellular.off();                                                 // Turn off the cellular modem
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	f7ff fb08 	bl	d42ec <_ZN5spark13CellularClass3offEv>
  sysStatus.connectedStatus = false;
   d4cdc:	4b05      	ldr	r3, [pc, #20]	; (d4cf4 <_Z22disconnectFromParticlev+0x74>)
   d4cde:	2200      	movs	r2, #0
   d4ce0:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4ce2:	4b05      	ldr	r3, [pc, #20]	; (d4cf8 <_Z22disconnectFromParticlev+0x78>)
   d4ce4:	2001      	movs	r0, #1
   d4ce6:	7018      	strb	r0, [r3, #0]
}
   d4ce8:	b005      	add	sp, #20
   d4cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4cee:	bf00      	nop
   d4cf0:	2003e59c 	.word	0x2003e59c
   d4cf4:	2003e548 	.word	0x2003e548
   d4cf8:	2003e578 	.word	0x2003e578

000d4cfc <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d4cfc:	b508      	push	{r3, lr}
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d4cfe:	f005 fe66 	bl	da9ce <_ZN9TimeClass3nowEv>
   d4d02:	4b07      	ldr	r3, [pc, #28]	; (d4d20 <_Z15resetEverythingv+0x24>)
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4d04:	4907      	ldr	r1, [pc, #28]	; (d4d24 <_Z15resetEverythingv+0x28>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d4d06:	6018      	str	r0, [r3, #0]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4d08:	2200      	movs	r2, #0
   d4d0a:	611a      	str	r2, [r3, #16]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d4d0c:	831a      	strh	r2, [r3, #24]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4d0e:	610a      	str	r2, [r1, #16]
  current.minBatteryLevel = 100;
   d4d10:	2264      	movs	r2, #100	; 0x64
   d4d12:	61da      	str	r2, [r3, #28]
  currentCountsWriteNeeded = true;
   d4d14:	4a04      	ldr	r2, [pc, #16]	; (d4d28 <_Z15resetEverythingv+0x2c>)
   d4d16:	2301      	movs	r3, #1
   d4d18:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d4d1a:	4a04      	ldr	r2, [pc, #16]	; (d4d2c <_Z15resetEverythingv+0x30>)
   d4d1c:	7013      	strb	r3, [r2, #0]
}
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	2003e480 	.word	0x2003e480
   d4d24:	2003e548 	.word	0x2003e548
   d4d28:	2003e4a0 	.word	0x2003e4a0
   d4d2c:	2003e578 	.word	0x2003e578

000d4d30 <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition over serial and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d4d30:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4d32:	4c15      	ldr	r4, [pc, #84]	; (d4d88 <_Z22publishStateTransitionv+0x58>)
   d4d34:	4d15      	ldr	r5, [pc, #84]	; (d4d8c <_Z22publishStateTransitionv+0x5c>)
   d4d36:	7822      	ldrb	r2, [r4, #0]
   d4d38:	4915      	ldr	r1, [pc, #84]	; (d4d90 <_Z22publishStateTransitionv+0x60>)
   d4d3a:	eb02 1302 	add.w	r3, r2, r2, lsl #4
   d4d3e:	782a      	ldrb	r2, [r5, #0]
{
   d4d40:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4d42:	eb02 1202 	add.w	r2, r2, r2, lsl #4
   d4d46:	440a      	add	r2, r1
   d4d48:	440b      	add	r3, r1
   d4d4a:	9200      	str	r2, [sp, #0]
   d4d4c:	2128      	movs	r1, #40	; 0x28
   d4d4e:	4a11      	ldr	r2, [pc, #68]	; (d4d94 <_Z22publishStateTransitionv+0x64>)
   d4d50:	a802      	add	r0, sp, #8
   d4d52:	f002 ffe3 	bl	d7d1c <snprintf>
  oldState = state;
   d4d56:	782b      	ldrb	r3, [r5, #0]
   d4d58:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) {
   d4d5a:	4b0f      	ldr	r3, [pc, #60]	; (d4d98 <_Z22publishStateTransitionv+0x68>)
   d4d5c:	791a      	ldrb	r2, [r3, #4]
   d4d5e:	b18a      	cbz	r2, d4d84 <_Z22publishStateTransitionv+0x54>
    if (sysStatus.connectedStatus) publishQueue.publish("State Transition",stateTransitionString, PRIVATE, WITH_ACK);
   d4d60:	78db      	ldrb	r3, [r3, #3]
   d4d62:	b153      	cbz	r3, d4d7a <_Z22publishStateTransitionv+0x4a>
   d4d64:	4b0d      	ldr	r3, [pc, #52]	; (d4d9c <_Z22publishStateTransitionv+0x6c>)
   d4d66:	490e      	ldr	r1, [pc, #56]	; (d4da0 <_Z22publishStateTransitionv+0x70>)
   d4d68:	781b      	ldrb	r3, [r3, #0]
   d4d6a:	f88d 3000 	strb.w	r3, [sp]
   d4d6e:	4b0d      	ldr	r3, [pc, #52]	; (d4da4 <_Z22publishStateTransitionv+0x74>)
   d4d70:	480d      	ldr	r0, [pc, #52]	; (d4da8 <_Z22publishStateTransitionv+0x78>)
   d4d72:	781b      	ldrb	r3, [r3, #0]
   d4d74:	aa02      	add	r2, sp, #8
   d4d76:	f7ff fb99 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    Serial.println(stateTransitionString);
   d4d7a:	f005 ff63 	bl	dac44 <_Z16_fetch_usbserialv>
   d4d7e:	a902      	add	r1, sp, #8
   d4d80:	f005 f9d6 	bl	da130 <_ZN5Print7printlnEPKc>
  }
}
   d4d84:	b00d      	add	sp, #52	; 0x34
   d4d86:	bd30      	pop	{r4, r5, pc}
   d4d88:	2003e4fc 	.word	0x2003e4fc
   d4d8c:	2003e53c 	.word	0x2003e53c
   d4d90:	2003e124 	.word	0x2003e124
   d4d94:	000ddd81 	.word	0x000ddd81
   d4d98:	2003e548 	.word	0x2003e548
   d4d9c:	2003e426 	.word	0x2003e426
   d4da0:	000ddd8f 	.word	0x000ddd8f
   d4da4:	2003e425 	.word	0x2003e425
   d4da8:	2003e500 	.word	0x2003e500

000d4dac <_Z14fullModemResetv>:
 * @brief Fully resets modem.
 * 
 * @details Disconnects from the cloud, resets modem and SIM, and deep sleeps for 10 seconds.
 * Adapted form Rikkas7's https://github.com/rickkas7/electronsample.
 */
void fullModemReset() {  // 
   d4dac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        clearSession_(clearSession) {
   d4dae:	2300      	movs	r3, #0
	Particle.disconnect(); 	                                         // Disconnect from the cloud
   d4db0:	a801      	add	r0, sp, #4
   d4db2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4db6:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4dba:	f003 f9c8 	bl	d814e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4dbe:	f002 fc91 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(sysStatus.connectedStatus && millis() - startTime < 15000) {
   d4dc2:	4d0f      	ldr	r5, [pc, #60]	; (d4e00 <_Z14fullModemResetv+0x54>)
   d4dc4:	4604      	mov	r4, r0
   d4dc6:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4dca:	78eb      	ldrb	r3, [r5, #3]
   d4dcc:	b143      	cbz	r3, d4de0 <_Z14fullModemResetv+0x34>
   d4dce:	f002 fc89 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
   d4dd2:	1b00      	subs	r0, r0, r4
   d4dd4:	42b0      	cmp	r0, r6
   d4dd6:	d803      	bhi.n	d4de0 <_Z14fullModemResetv+0x34>
		delay(100);
   d4dd8:	2064      	movs	r0, #100	; 0x64
   d4dda:	f002 fff3 	bl	d7dc4 <delay>
	while(sysStatus.connectedStatus && millis() - startTime < 15000) {
   d4dde:	e7f4      	b.n	d4dca <_Z14fullModemResetv+0x1e>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.off();
   d4de0:	4808      	ldr	r0, [pc, #32]	; (d4e04 <_Z14fullModemResetv+0x58>)
   d4de2:	f7ff fa83 	bl	d42ec <_ZN5spark13CellularClass3offEv>
	delay(1000);
   d4de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4dea:	f002 ffeb 	bl	d7dc4 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4dee:	4b06      	ldr	r3, [pc, #24]	; (d4e08 <_Z14fullModemResetv+0x5c>)
   d4df0:	220a      	movs	r2, #10
   d4df2:	681b      	ldr	r3, [r3, #0]
   d4df4:	2101      	movs	r1, #1
   d4df6:	a801      	add	r0, sp, #4
   d4df8:	f005 fbd4 	bl	da5a4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4dfc:	b004      	add	sp, #16
   d4dfe:	bd70      	pop	{r4, r5, r6, pc}
   d4e00:	2003e548 	.word	0x2003e548
   d4e04:	2003e59c 	.word	0x2003e59c
   d4e08:	2003e420 	.word	0x2003e420

000d4e0c <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details Syncs time with remote service and sets low power mode. Called from Reporting State ONLY.
 * Clean house at the end of the day
 */
void dailyCleanup() {
   d4e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4e10:	4b23      	ldr	r3, [pc, #140]	; (d4ea0 <_Z12dailyCleanupv+0x94>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
  sysStatus.verboseMode = false;
   d4e12:	4c24      	ldr	r4, [pc, #144]	; (d4ea4 <_Z12dailyCleanupv+0x98>)
   d4e14:	781b      	ldrb	r3, [r3, #0]
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d4e16:	4a24      	ldr	r2, [pc, #144]	; (d4ea8 <_Z12dailyCleanupv+0x9c>)
   d4e18:	4924      	ldr	r1, [pc, #144]	; (d4eac <_Z12dailyCleanupv+0xa0>)
   d4e1a:	4825      	ldr	r0, [pc, #148]	; (d4eb0 <_Z12dailyCleanupv+0xa4>)
void dailyCleanup() {
   d4e1c:	b086      	sub	sp, #24
  sysStatus.verboseMode = false;
   d4e1e:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d4e20:	f88d 3000 	strb.w	r3, [sp]
   d4e24:	4b23      	ldr	r3, [pc, #140]	; (d4eb4 <_Z12dailyCleanupv+0xa8>)
   d4e26:	781b      	ldrb	r3, [r3, #0]
   d4e28:	f7ff fb40 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4e2c:	7125      	strb	r5, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e2e:	f002 fea5 	bl	d7b7c <spark_cloud_flag_connected>
        if (!connected()) {
   d4e32:	b110      	cbz	r0, d4e3a <_Z12dailyCleanupv+0x2e>
        return spark_sync_time(NULL);
   d4e34:	4628      	mov	r0, r5
   d4e36:	f002 fec1 	bl	d7bbc <spark_sync_time>
        return hal_timer_millis(nullptr);
   d4e3a:	2000      	movs	r0, #0
   d4e3c:	f002 fc62 	bl	d7704 <hal_timer_millis>
   d4e40:	f04f 0a00 	mov.w	sl, #0
   d4e44:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d4e46:	f247 582f 	movw	r8, #29999	; 0x752f
   d4e4a:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4e4e:	2000      	movs	r0, #0
   d4e50:	f002 fc58 	bl	d7704 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4e54:	1b46      	subs	r6, r0, r5
   d4e56:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d4e5a:	45b9      	cmp	r9, r7
   d4e5c:	bf08      	it	eq
   d4e5e:	45b0      	cmpeq	r8, r6
   d4e60:	d305      	bcc.n	d4e6e <_Z12dailyCleanupv+0x62>
  Particle.syncTime();                                                 // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                // Wait for up to 30 seconds for the SyncTime to complete
   d4e62:	f7ff f9e9 	bl	d4238 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4e66:	b910      	cbnz	r0, d4e6e <_Z12dailyCleanupv+0x62>
            spark_process();
   d4e68:	f002 fe78 	bl	d7b5c <spark_process>
        while (_while() && !_condition()) {
   d4e6c:	e7ef      	b.n	d4e4e <_Z12dailyCleanupv+0x42>
   d4e6e:	f7ff f9e3 	bl	d4238 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {     // If Solar or if the battery is being discharged
   d4e72:	7963      	ldrb	r3, [r4, #5]
   d4e74:	b913      	cbnz	r3, d4e7c <_Z12dailyCleanupv+0x70>
   d4e76:	68a3      	ldr	r3, [r4, #8]
   d4e78:	2b46      	cmp	r3, #70	; 0x46
   d4e7a:	dc09      	bgt.n	d4e90 <_Z12dailyCleanupv+0x84>
    setLowPowerMode("1");
   d4e7c:	490e      	ldr	r1, [pc, #56]	; (d4eb8 <_Z12dailyCleanupv+0xac>)
   d4e7e:	a802      	add	r0, sp, #8
   d4e80:	f005 fa19 	bl	da2b6 <_ZN6StringC1EPKc>
   d4e84:	a802      	add	r0, sp, #8
   d4e86:	f7ff fc01 	bl	d468c <_Z15setLowPowerMode6String>
   d4e8a:	a802      	add	r0, sp, #8
   d4e8c:	f005 f9c8 	bl	da220 <_ZN6StringD1Ev>
  }

  resetEverything();                                               // If so, we need to Zero the counts for the new day
   d4e90:	f7ff ff34 	bl	d4cfc <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d4e94:	4b09      	ldr	r3, [pc, #36]	; (d4ebc <_Z12dailyCleanupv+0xb0>)
   d4e96:	2201      	movs	r2, #1
   d4e98:	701a      	strb	r2, [r3, #0]
   d4e9a:	b006      	add	sp, #24
   d4e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4ea0:	2003e426 	.word	0x2003e426
   d4ea4:	2003e548 	.word	0x2003e548
   d4ea8:	000ddda0 	.word	0x000ddda0
   d4eac:	000ddda8 	.word	0x000ddda8
   d4eb0:	2003e500 	.word	0x2003e500
   d4eb4:	2003e425 	.word	0x2003e425
   d4eb8:	000ddb70 	.word	0x000ddb70
   d4ebc:	2003e578 	.word	0x2003e578

000d4ec0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4ec0:	b530      	push	{r4, r5, lr}
   d4ec2:	b085      	sub	sp, #20
   d4ec4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4ec6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4ec8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4eca:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4ecc:	f002 fdaa 	bl	d7a24 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4ed0:	b9b0      	cbnz	r0, d4f00 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4ed2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4ed4:	b10c      	cbz	r4, d4eda <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4ed6:	6923      	ldr	r3, [r4, #16]
   d4ed8:	b923      	cbnz	r3, d4ee4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4eda:	4a0a      	ldr	r2, [pc, #40]	; (d4f04 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4edc:	2100      	movs	r1, #0
   d4ede:	200a      	movs	r0, #10
   d4ee0:	f002 fd78 	bl	d79d4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4ee4:	2300      	movs	r3, #0
   d4ee6:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4eea:	230c      	movs	r3, #12
   d4eec:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4ef0:	2304      	movs	r3, #4
   d4ef2:	9303      	str	r3, [sp, #12]
   d4ef4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4ef6:	6923      	ldr	r3, [r4, #16]
   d4ef8:	aa01      	add	r2, sp, #4
   d4efa:	2101      	movs	r1, #1
   d4efc:	4620      	mov	r0, r4
   d4efe:	4798      	blx	r3
}
   d4f00:	b005      	add	sp, #20
   d4f02:	bd30      	pop	{r4, r5, pc}
   d4f04:	000d76d5 	.word	0x000d76d5

000d4f08 <_Z16takeMeasurementsv>:
{
   d4f08:	b530      	push	{r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4f0a:	4b2d      	ldr	r3, [pc, #180]	; (d4fc0 <_Z16takeMeasurementsv+0xb8>)
   d4f0c:	2200      	movs	r2, #0
   d4f0e:	b08b      	sub	sp, #44	; 0x2c
   d4f10:	6858      	ldr	r0, [r3, #4]
   d4f12:	4611      	mov	r1, r2
   d4f14:	f002 fe9a 	bl	d7c4c <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4f18:	b108      	cbz	r0, d4f1e <_Z16takeMeasurementsv+0x16>
   d4f1a:	f7ff fcc9 	bl	d48b0 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d4f1e:	f7ff fd03 	bl	d4928 <_Z14getTemperaturev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4f22:	a902      	add	r1, sp, #8
   d4f24:	2007      	movs	r0, #7
   d4f26:	f7ff ffcb 	bl	d4ec0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
  sysStatus.batteryState = System.batteryState();                     // Call before isItSafeToCharge() as it may overwrite the context
   d4f2a:	4c26      	ldr	r4, [pc, #152]	; (d4fc4 <_Z16takeMeasurementsv+0xbc>)
   d4f2c:	4d26      	ldr	r5, [pc, #152]	; (d4fc8 <_Z16takeMeasurementsv+0xc0>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4f2e:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4f30:	bfa8      	it	ge
   d4f32:	9802      	ldrge	r0, [sp, #8]
   d4f34:	7320      	strb	r0, [r4, #12]
  if (!isItSafeToCharge()) current.alertCount++;                      // Increment the alert count
   d4f36:	f7ff fc9b 	bl	d4870 <_Z16isItSafeToChargev>
   d4f3a:	b910      	cbnz	r0, d4f42 <_Z16takeMeasurementsv+0x3a>
   d4f3c:	692b      	ldr	r3, [r5, #16]
   d4f3e:	3301      	adds	r3, #1
   d4f40:	612b      	str	r3, [r5, #16]
   d4f42:	a902      	add	r1, sp, #8
   d4f44:	2003      	movs	r0, #3
   d4f46:	f7ff ffbb 	bl	d4ec0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4f4a:	2800      	cmp	r0, #0
   d4f4c:	d134      	bne.n	d4fb8 <_Z16takeMeasurementsv+0xb0>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4f4e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d4f52:	ee07 3a90 	vmov	s15, r3
   d4f56:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d4f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4f5e:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d4f62:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d4f64:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d4f68:	dc09      	bgt.n	d4f7e <_Z16takeMeasurementsv+0x76>
   d4f6a:	7b23      	ldrb	r3, [r4, #12]
   d4f6c:	2b01      	cmp	r3, #1
   d4f6e:	d106      	bne.n	d4f7e <_Z16takeMeasurementsv+0x76>
    System.setPowerConfiguration(SystemPowerConfiguration());         // Reset the PMIC
   d4f70:	a802      	add	r0, sp, #8
   d4f72:	f7ff f9ff 	bl	d4374 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d4f76:	2100      	movs	r1, #0
   d4f78:	a802      	add	r0, sp, #8
   d4f7a:	f002 fdc1 	bl	d7b00 <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) current.minBatteryLevel = sysStatus.stateOfCharge; // Keep track of lowest value for the day
   d4f7e:	68a3      	ldr	r3, [r4, #8]
   d4f80:	69ea      	ldr	r2, [r5, #28]
   d4f82:	4293      	cmp	r3, r2
   d4f84:	bfb8      	it	lt
   d4f86:	61eb      	strlt	r3, [r5, #28]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d4f88:	2b1d      	cmp	r3, #29
   d4f8a:	bfcc      	ite	gt
   d4f8c:	2300      	movgt	r3, #0
   d4f8e:	2301      	movle	r3, #1
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4f90:	2013      	movs	r0, #19
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d4f92:	71e3      	strb	r3, [r4, #7]
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4f94:	f005 ffa5 	bl	daee2 <analogRead>
   d4f98:	2364      	movs	r3, #100	; 0x64
   d4f9a:	9300      	str	r3, [sp, #0]
   d4f9c:	2300      	movs	r3, #0
   d4f9e:	4619      	mov	r1, r3
   d4fa0:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4fa4:	f002 ff02 	bl	d7dac <_Z3mapiiiii>
  systemStatusWriteNeeded = true;
   d4fa8:	4a08      	ldr	r2, [pc, #32]	; (d4fcc <_Z16takeMeasurementsv+0xc4>)
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4faa:	6068      	str	r0, [r5, #4]
  systemStatusWriteNeeded = true;
   d4fac:	2301      	movs	r3, #1
   d4fae:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d4fb0:	4a07      	ldr	r2, [pc, #28]	; (d4fd0 <_Z16takeMeasurementsv+0xc8>)
   d4fb2:	7013      	strb	r3, [r2, #0]
}
   d4fb4:	b00b      	add	sp, #44	; 0x2c
   d4fb6:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d4fb8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4fbc:	e7cd      	b.n	d4f5a <_Z16takeMeasurementsv+0x52>
   d4fbe:	bf00      	nop
   d4fc0:	2003e59c 	.word	0x2003e59c
   d4fc4:	2003e548 	.word	0x2003e548
   d4fc8:	2003e480 	.word	0x2003e480
   d4fcc:	2003e578 	.word	0x2003e578
   d4fd0:	2003e4a0 	.word	0x2003e4a0

000d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4fd4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4fd6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4fd8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4fda:	b17c      	cbz	r4, d4ffc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4fdc:	6863      	ldr	r3, [r4, #4]
   d4fde:	3b01      	subs	r3, #1
   d4fe0:	6063      	str	r3, [r4, #4]
   d4fe2:	b95b      	cbnz	r3, d4ffc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4fe4:	6823      	ldr	r3, [r4, #0]
   d4fe6:	4620      	mov	r0, r4
   d4fe8:	689b      	ldr	r3, [r3, #8]
   d4fea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4fec:	68a3      	ldr	r3, [r4, #8]
   d4fee:	3b01      	subs	r3, #1
   d4ff0:	60a3      	str	r3, [r4, #8]
   d4ff2:	b91b      	cbnz	r3, d4ffc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4ff4:	6823      	ldr	r3, [r4, #0]
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	68db      	ldr	r3, [r3, #12]
   d4ffa:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4ffc:	4628      	mov	r0, r5
   d4ffe:	bd38      	pop	{r3, r4, r5, pc}

000d5000 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5000:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5002:	e9d0 5300 	ldrd	r5, r3, [r0]
   d5006:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5008:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d500a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d500e:	42ae      	cmp	r6, r5
   d5010:	d004      	beq.n	d501c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d5012:	4628      	mov	r0, r5
   d5014:	f005 f904 	bl	da220 <_ZN6StringD1Ev>
   d5018:	3514      	adds	r5, #20
   d501a:	e7f8      	b.n	d500e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d501c:	6820      	ldr	r0, [r4, #0]
   d501e:	f002 fe65 	bl	d7cec <free>
    AllocatorT::free(data_);
}
   d5022:	4620      	mov	r0, r4
   d5024:	bd70      	pop	{r4, r5, r6, pc}

000d5026 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5026:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5028:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d502a:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d502c:	68dd      	ldr	r5, [r3, #12]
   d502e:	2330      	movs	r3, #48	; 0x30
   d5030:	47a8      	blx	r5
    }
   d5032:	4620      	mov	r0, r4
   d5034:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5038 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5038:	b570      	push	{r4, r5, r6, lr}
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d503a:	4b1b      	ldr	r3, [pc, #108]	; (d50a8 <_Z18loadSystemDefaultsv+0x70>)
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d503c:	4c1b      	ldr	r4, [pc, #108]	; (d50ac <_Z18loadSystemDefaultsv+0x74>)
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d503e:	2201      	movs	r2, #1
   d5040:	701a      	strb	r2, [r3, #0]
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d5042:	78e3      	ldrb	r3, [r4, #3]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5044:	b086      	sub	sp, #24
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d5046:	b153      	cbz	r3, d505e <_Z18loadSystemDefaultsv+0x26>
   d5048:	4b19      	ldr	r3, [pc, #100]	; (d50b0 <_Z18loadSystemDefaultsv+0x78>)
   d504a:	4a1a      	ldr	r2, [pc, #104]	; (d50b4 <_Z18loadSystemDefaultsv+0x7c>)
   d504c:	781b      	ldrb	r3, [r3, #0]
   d504e:	f88d 3000 	strb.w	r3, [sp]
   d5052:	4b19      	ldr	r3, [pc, #100]	; (d50b8 <_Z18loadSystemDefaultsv+0x80>)
   d5054:	4919      	ldr	r1, [pc, #100]	; (d50bc <_Z18loadSystemDefaultsv+0x84>)
   d5056:	781b      	ldrb	r3, [r3, #0]
   d5058:	4819      	ldr	r0, [pc, #100]	; (d50c0 <_Z18loadSystemDefaultsv+0x88>)
   d505a:	f7ff fa27 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Log.info("Loading system defaults");
   d505e:	4919      	ldr	r1, [pc, #100]	; (d50c4 <_Z18loadSystemDefaultsv+0x8c>)
   d5060:	4819      	ldr	r0, [pc, #100]	; (d50c8 <_Z18loadSystemDefaultsv+0x90>)
   d5062:	f7ff f9f5 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.verboseMode = false;
   d5066:	2500      	movs	r5, #0
  setLowPowerMode("1");
   d5068:	4918      	ldr	r1, [pc, #96]	; (d50cc <_Z18loadSystemDefaultsv+0x94>)
  sysStatus.verboseMode = false;
   d506a:	7125      	strb	r5, [r4, #4]
  sysStatus.structuresVersion = 1;
   d506c:	2601      	movs	r6, #1
  setLowPowerMode("1");
   d506e:	a802      	add	r0, sp, #8
  sysStatus.structuresVersion = 1;
   d5070:	7026      	strb	r6, [r4, #0]
  sysStatus.clockSet = false;
   d5072:	70a5      	strb	r5, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d5074:	71e5      	strb	r5, [r4, #7]
  setLowPowerMode("1");
   d5076:	f005 f91e 	bl	da2b6 <_ZN6StringC1EPKc>
   d507a:	a802      	add	r0, sp, #8
   d507c:	f7ff fb06 	bl	d468c <_Z15setLowPowerMode6String>
   d5080:	a802      	add	r0, sp, #8
   d5082:	f005 f8cd 	bl	da220 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d5086:	4b12      	ldr	r3, [pc, #72]	; (d50d0 <_Z18loadSystemDefaultsv+0x98>)
   d5088:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d508a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d508e:	61a3      	str	r3, [r4, #24]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5090:	4a06      	ldr	r2, [pc, #24]	; (d50ac <_Z18loadSystemDefaultsv+0x74>)
   d5092:	4810      	ldr	r0, [pc, #64]	; (d50d4 <_Z18loadSystemDefaultsv+0x9c>)
  sysStatus.solarPowerMode = true;  
   d5094:	7166      	strb	r6, [r4, #5]
  sysStatus.openTime = 6;
   d5096:	f241 5306 	movw	r3, #5382	; 0x1506
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d509a:	4631      	mov	r1, r6
  sysStatus.openTime = 6;
   d509c:	83a3      	strh	r3, [r4, #28]
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d509e:	8525      	strh	r5, [r4, #40]	; 0x28
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d50a0:	f7ff ffc1 	bl	d5026 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d50a4:	b006      	add	sp, #24
   d50a6:	bd70      	pop	{r4, r5, r6, pc}
   d50a8:	2003e4fd 	.word	0x2003e4fd
   d50ac:	2003e548 	.word	0x2003e548
   d50b0:	2003e426 	.word	0x2003e426
   d50b4:	000dddb6 	.word	0x000dddb6
   d50b8:	2003e425 	.word	0x2003e425
   d50bc:	000ddd5c 	.word	0x000ddd5c
   d50c0:	2003e500 	.word	0x2003e500
   d50c4:	000dddce 	.word	0x000dddce
   d50c8:	2003e5e0 	.word	0x2003e5e0
   d50cc:	000ddb70 	.word	0x000ddb70
   d50d0:	c0a00000 	.word	0xc0a00000
   d50d4:	2003e4ac 	.word	0x2003e4ac

000d50d8 <setup>:
{
   d50d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d50dc:	2100      	movs	r1, #0
{
   d50de:	b0aa      	sub	sp, #168	; 0xa8
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d50e0:	2008      	movs	r0, #8
   d50e2:	f005 fec1 	bl	dae68 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d50e6:	2100      	movs	r1, #0
   d50e8:	2004      	movs	r0, #4
   d50ea:	f005 febd 	bl	dae68 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d50ee:	2101      	movs	r1, #1
   d50f0:	2007      	movs	r0, #7
   d50f2:	f005 feb9 	bl	dae68 <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d50f6:	2101      	movs	r1, #1
   d50f8:	2007      	movs	r0, #7
   d50fa:	f005 fec6 	bl	dae8a <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d50fe:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5100:	2400      	movs	r4, #0
   d5102:	f002 fd43 	bl	d7b8c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5106:	2300      	movs	r3, #0
   d5108:	227d      	movs	r2, #125	; 0x7d
   d510a:	a90a      	add	r1, sp, #40	; 0x28
   d510c:	a806      	add	r0, sp, #24
   d510e:	f005 f93a 	bl	da386 <_ZNK6String8getBytesEPhjj>
   d5112:	49b7      	ldr	r1, [pc, #732]	; (d53f0 <setup+0x318>)
   d5114:	f8df 83d8 	ldr.w	r8, [pc, #984]	; d54f0 <setup+0x418>
   d5118:	4db6      	ldr	r5, [pc, #728]	; (d53f4 <setup+0x31c>)
   d511a:	4fb7      	ldr	r7, [pc, #732]	; (d53f8 <setup+0x320>)
   d511c:	4623      	mov	r3, r4
   d511e:	4622      	mov	r2, r4
   d5120:	e9cd 4400 	strd	r4, r4, [sp]
   d5124:	a80a      	add	r0, sp, #40	; 0x28
   d5126:	f002 fd41 	bl	d7bac <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d512a:	4623      	mov	r3, r4
   d512c:	2202      	movs	r2, #2
   d512e:	49b3      	ldr	r1, [pc, #716]	; (d53fc <setup+0x324>)
   d5130:	48b3      	ldr	r0, [pc, #716]	; (d5400 <setup+0x328>)
   d5132:	f002 fd03 	bl	d7b3c <spark_variable>
        return _variable(varKey, var, STRING);
   d5136:	49b3      	ldr	r1, [pc, #716]	; (d5404 <setup+0x32c>)
   d5138:	48b3      	ldr	r0, [pc, #716]	; (d5408 <setup+0x330>)
   d513a:	f7ff f88a 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d513e:	49b3      	ldr	r1, [pc, #716]	; (d540c <setup+0x334>)
   d5140:	48b3      	ldr	r0, [pc, #716]	; (d5410 <setup+0x338>)
   d5142:	4623      	mov	r3, r4
   d5144:	2202      	movs	r2, #2
   d5146:	f002 fcf9 	bl	d7b3c <spark_variable>
   d514a:	4623      	mov	r3, r4
   d514c:	2202      	movs	r2, #2
   d514e:	49b1      	ldr	r1, [pc, #708]	; (d5414 <setup+0x33c>)
   d5150:	48b1      	ldr	r0, [pc, #708]	; (d5418 <setup+0x340>)
   d5152:	f002 fcf3 	bl	d7b3c <spark_variable>
        return _variable(varKey, var, STRING);
   d5156:	49b1      	ldr	r1, [pc, #708]	; (d541c <setup+0x344>)
   d5158:	48b1      	ldr	r0, [pc, #708]	; (d5420 <setup+0x348>)
   d515a:	f7ff f87a 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d515e:	4623      	mov	r3, r4
   d5160:	2202      	movs	r2, #2
   d5162:	49b0      	ldr	r1, [pc, #704]	; (d5424 <setup+0x34c>)
   d5164:	48b0      	ldr	r0, [pc, #704]	; (d5428 <setup+0x350>)
   d5166:	f002 fce9 	bl	d7b3c <spark_variable>
        return _variable(varKey, var, STRING);
   d516a:	49b0      	ldr	r1, [pc, #704]	; (d542c <setup+0x354>)
   d516c:	48b0      	ldr	r0, [pc, #704]	; (d5430 <setup+0x358>)
   d516e:	f7ff f870 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5172:	49b0      	ldr	r1, [pc, #704]	; (d5434 <setup+0x35c>)
   d5174:	48b0      	ldr	r0, [pc, #704]	; (d5438 <setup+0x360>)
   d5176:	f7ff f86c 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d517a:	49b0      	ldr	r1, [pc, #704]	; (d543c <setup+0x364>)
   d517c:	48b0      	ldr	r0, [pc, #704]	; (d5440 <setup+0x368>)
   d517e:	f7ff f868 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5182:	4623      	mov	r3, r4
   d5184:	2202      	movs	r2, #2
   d5186:	49af      	ldr	r1, [pc, #700]	; (d5444 <setup+0x36c>)
   d5188:	48af      	ldr	r0, [pc, #700]	; (d5448 <setup+0x370>)
   d518a:	f002 fcd7 	bl	d7b3c <spark_variable>
        return _variable(varKey, var, STRING);
   d518e:	49af      	ldr	r1, [pc, #700]	; (d544c <setup+0x374>)
   d5190:	48af      	ldr	r0, [pc, #700]	; (d5450 <setup+0x378>)
   d5192:	f7ff f85e 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d5196:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d5198:	e9cd 4403 	strd	r4, r4, [sp, #12]
        extra.size = sizeof(extra);
   d519c:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d51a0:	4bac      	ldr	r3, [pc, #688]	; (d5454 <setup+0x37c>)
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d51a2:	49ad      	ldr	r1, [pc, #692]	; (d5458 <setup+0x380>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d51a4:	9305      	str	r3, [sp, #20]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d51a6:	2204      	movs	r2, #4
   d51a8:	ab03      	add	r3, sp, #12
   d51aa:	48ac      	ldr	r0, [pc, #688]	; (d545c <setup+0x384>)
   d51ac:	f002 fcc6 	bl	d7b3c <spark_variable>
        return _variable(varKey, var, STRING);
   d51b0:	49ab      	ldr	r1, [pc, #684]	; (d5460 <setup+0x388>)
   d51b2:	48ac      	ldr	r0, [pc, #688]	; (d5464 <setup+0x38c>)
   d51b4:	f7ff f84d 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d51b8:	49ab      	ldr	r1, [pc, #684]	; (d5468 <setup+0x390>)
   d51ba:	48ac      	ldr	r0, [pc, #688]	; (d546c <setup+0x394>)
   d51bc:	f7ff f942 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d51c0:	49ab      	ldr	r1, [pc, #684]	; (d5470 <setup+0x398>)
   d51c2:	48ac      	ldr	r0, [pc, #688]	; (d5474 <setup+0x39c>)
   d51c4:	f7ff f93e 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d51c8:	49ab      	ldr	r1, [pc, #684]	; (d5478 <setup+0x3a0>)
   d51ca:	48ac      	ldr	r0, [pc, #688]	; (d547c <setup+0x3a4>)
   d51cc:	f7ff f93a 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d51d0:	49ab      	ldr	r1, [pc, #684]	; (d5480 <setup+0x3a8>)
   d51d2:	48ac      	ldr	r0, [pc, #688]	; (d5484 <setup+0x3ac>)
   d51d4:	f7ff f936 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d51d8:	49ab      	ldr	r1, [pc, #684]	; (d5488 <setup+0x3b0>)
   d51da:	48ac      	ldr	r0, [pc, #688]	; (d548c <setup+0x3b4>)
   d51dc:	f7ff f932 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d51e0:	49ab      	ldr	r1, [pc, #684]	; (d5490 <setup+0x3b8>)
   d51e2:	48ac      	ldr	r0, [pc, #688]	; (d5494 <setup+0x3bc>)
   d51e4:	f7ff f92e 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d51e8:	49ab      	ldr	r1, [pc, #684]	; (d5498 <setup+0x3c0>)
   d51ea:	48ac      	ldr	r0, [pc, #688]	; (d549c <setup+0x3c4>)
   d51ec:	f7ff f92a 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d51f0:	49ab      	ldr	r1, [pc, #684]	; (d54a0 <setup+0x3c8>)
   d51f2:	48ac      	ldr	r0, [pc, #688]	; (d54a4 <setup+0x3cc>)
   d51f4:	f7ff f926 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d51f8:	49ab      	ldr	r1, [pc, #684]	; (d54a8 <setup+0x3d0>)
   d51fa:	48ac      	ldr	r0, [pc, #688]	; (d54ac <setup+0x3d4>)
   d51fc:	f7ff f922 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5200:	49ab      	ldr	r1, [pc, #684]	; (d54b0 <setup+0x3d8>)
   d5202:	48ac      	ldr	r0, [pc, #688]	; (d54b4 <setup+0x3dc>)
   d5204:	f7ff f91e 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5208:	49ab      	ldr	r1, [pc, #684]	; (d54b8 <setup+0x3e0>)
   d520a:	48ac      	ldr	r0, [pc, #688]	; (d54bc <setup+0x3e4>)
   d520c:	f7ff f91a 	bl	d4444 <_ZN10CloudClass9_functionEPKcPFi6StringE>
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d5210:	2601      	movs	r6, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d5212:	2203      	movs	r2, #3
   d5214:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d5218:	a803      	add	r0, sp, #12
   d521a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    graceful_ = enabled;
   d521e:	f8ad 6014 	strh.w	r6, [sp, #20]
   d5222:	f002 ffae 	bl	d8182 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  fram.begin();                                                       // Initialize the FRAM module
   d5226:	48a6      	ldr	r0, [pc, #664]	; (d54c0 <setup+0x3e8>)
   d5228:	f001 fd30 	bl	d6c8c <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d522c:	4621      	mov	r1, r4
   d522e:	48a4      	ldr	r0, [pc, #656]	; (d54c0 <setup+0x3e8>)
   d5230:	4633      	mov	r3, r6
   d5232:	f10d 020b 	add.w	r2, sp, #11
   d5236:	f001 fd6b 	bl	d6d10 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d523a:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d523e:	42b1      	cmp	r1, r6
   d5240:	f000 80b8 	beq.w	d53b4 <setup+0x2dc>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5244:	489e      	ldr	r0, [pc, #632]	; (d54c0 <setup+0x3e8>)
   d5246:	f001 fd2b 	bl	d6ca0 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d524a:	4a9e      	ldr	r2, [pc, #632]	; (d54c4 <setup+0x3ec>)
   d524c:	489c      	ldr	r0, [pc, #624]	; (d54c0 <setup+0x3e8>)
   d524e:	2304      	movs	r3, #4
   d5250:	4621      	mov	r1, r4
   d5252:	f001 fda8 	bl	d6da6 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5256:	4633      	mov	r3, r6
   d5258:	4899      	ldr	r0, [pc, #612]	; (d54c0 <setup+0x3e8>)
   d525a:	f10d 020b 	add.w	r2, sp, #11
   d525e:	4621      	mov	r1, r4
   d5260:	f001 fd56 	bl	d6d10 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d5264:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5268:	42b3      	cmp	r3, r6
   d526a:	f000 80a0 	beq.w	d53ae <setup+0x2d6>
   d526e:	703e      	strb	r6, [r7, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d5270:	4c95      	ldr	r4, [pc, #596]	; (d54c8 <setup+0x3f0>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d5272:	f7ff fc33 	bl	d4adc <_Z17checkSystemValuesv>
  makeUpParkHourStrings();                                            // Create the strings for the console
   d5276:	f7ff fc87 	bl	d4b88 <_Z21makeUpParkHourStringsv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d527a:	4a94      	ldr	r2, [pc, #592]	; (d54cc <setup+0x3f4>)
   d527c:	2300      	movs	r3, #0
   d527e:	2100      	movs	r1, #0
   d5280:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d5284:	f002 fbf8 	bl	d7a78 <system_subscribe_event>
   d5288:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();
   d528a:	2101      	movs	r1, #1
   d528c:	4620      	mov	r0, r4
   d528e:	8163      	strh	r3, [r4, #10]
   d5290:	f001 fbae 	bl	d69f0 <_ZN6AB18055setupEb>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d5294:	2301      	movs	r3, #1
   d5296:	461a      	mov	r2, r3
   d5298:	2110      	movs	r1, #16
   d529a:	4620      	mov	r0, r4
   d529c:	f001 f913 	bl	d64c6 <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d52a0:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet = ab1805.isRTCSet();
   d52a2:	70a8      	strb	r0, [r5, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d52a4:	4620      	mov	r0, r4
   d52a6:	f001 f88b 	bl	d63c0 <_ZN6AB18056setWDTEi>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d52aa:	ed95 0a06 	vldr	s0, [r5, #24]
   d52ae:	f005 fa45 	bl	da73c <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d52b2:	f000 febd 	bl	d6030 <_Z8isDSTusav>
   d52b6:	2800      	cmp	r0, #0
   d52b8:	f000 8088 	beq.w	d53cc <setup+0x2f4>
   d52bc:	f005 fa5c 	bl	da778 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d52c0:	ed95 0a05 	vldr	s0, [r5, #20]
   d52c4:	f005 fa1a 	bl	da6fc <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d52c8:	f005 fbba 	bl	daa40 <_ZN9TimeClass5localEv>
   d52cc:	4604      	mov	r4, r0
   d52ce:	f005 fb7e 	bl	da9ce <_ZN9TimeClass3nowEv>
   d52d2:	1a20      	subs	r0, r4, r0
   d52d4:	f005 fffc 	bl	db2d0 <__aeabi_i2d>
   d52d8:	a343      	add	r3, pc, #268	; (adr r3, d53e8 <setup+0x310>)
   d52da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d52de:	f006 f98b 	bl	db5f8 <__aeabi_ddiv>
   d52e2:	4a7b      	ldr	r2, [pc, #492]	; (d54d0 <setup+0x3f8>)
   d52e4:	e9cd 0100 	strd	r0, r1, [sp]
   d52e8:	210a      	movs	r1, #10
   d52ea:	4858      	ldr	r0, [pc, #352]	; (d544c <setup+0x374>)
   d52ec:	f002 fd16 	bl	d7d1c <snprintf>
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d52f0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   d52f2:	f005 ffff 	bl	db2f4 <__aeabi_f2d>
   d52f6:	4a77      	ldr	r2, [pc, #476]	; (d54d4 <setup+0x3fc>)
   d52f8:	e9cd 0100 	strd	r0, r1, [sp]
   d52fc:	4858      	ldr	r0, [pc, #352]	; (d5460 <setup+0x388>)
   d52fe:	2108      	movs	r1, #8
   d5300:	f002 fd0c 	bl	d7d1c <snprintf>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d5304:	79ab      	ldrb	r3, [r5, #6]
   d5306:	2210      	movs	r2, #16
   d5308:	2b00      	cmp	r3, #0
   d530a:	d062      	beq.n	d53d2 <setup+0x2fa>
   d530c:	4972      	ldr	r1, [pc, #456]	; (d54d8 <setup+0x400>)
   d530e:	4847      	ldr	r0, [pc, #284]	; (d542c <setup+0x354>)
   d5310:	f006 fce1 	bl	dbcd6 <strncpy>
        int reason = RESET_REASON_NONE;
   d5314:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5316:	4611      	mov	r1, r2
   d5318:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d531a:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d531c:	f002 f9c2 	bl	d76a4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5320:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5322:	2b14      	cmp	r3, #20
   d5324:	f04f 0200 	mov.w	r2, #0
   d5328:	d155      	bne.n	d53d6 <setup+0x2fe>
    sysStatus.resetCount++;
   d532a:	692b      	ldr	r3, [r5, #16]
   d532c:	3301      	adds	r3, #1
   d532e:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d5330:	4b6a      	ldr	r3, [pc, #424]	; (d54dc <setup+0x404>)
   d5332:	2201      	movs	r2, #1
   d5334:	701a      	strb	r2, [r3, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d5336:	f7ff fb4b 	bl	d49d0 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d533a:	2004      	movs	r0, #4
   d533c:	f005 fdbe 	bl	daebc <digitalRead>
   d5340:	b908      	cbnz	r0, d5346 <setup+0x26e>
   d5342:	f7ff fe79 	bl	d5038 <_Z18loadSystemDefaultsv>
  if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   d5346:	f005 fb5f 	bl	daa08 <_ZN9TimeClass3dayEv>
   d534a:	2100      	movs	r1, #0
   d534c:	4604      	mov	r4, r0
   d534e:	f8d8 0000 	ldr.w	r0, [r8]
   d5352:	f005 f9b7 	bl	da6c4 <_ZN9TimeClass3dayEx>
   d5356:	4284      	cmp	r4, r0
   d5358:	d001      	beq.n	d535e <setup+0x286>
    resetEverything();                                                 // Zero the counts for the new day
   d535a:	f7ff fccf 	bl	d4cfc <_Z15resetEverythingv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d535e:	f005 fb47 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d5362:	7f2b      	ldrb	r3, [r5, #28]
   d5364:	4298      	cmp	r0, r3
   d5366:	db12      	blt.n	d538e <setup+0x2b6>
   d5368:	f005 fb42 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d536c:	7f6b      	ldrb	r3, [r5, #29]
   d536e:	4298      	cmp	r0, r3
   d5370:	da0d      	bge.n	d538e <setup+0x2b6>
    if (sysStatus.connectedStatus && !Particle.connected()) {         // If the system thinks we are connected, let's make sure that we are
   d5372:	78eb      	ldrb	r3, [r5, #3]
   d5374:	b133      	cbz	r3, d5384 <setup+0x2ac>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5376:	f002 fc01 	bl	d7b7c <spark_cloud_flag_connected>
   d537a:	b918      	cbnz	r0, d5384 <setup+0x2ac>
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d537c:	4b58      	ldr	r3, [pc, #352]	; (d54e0 <setup+0x408>)
      sysStatus.connectedStatus = false;                              // At least for now this is the right value
   d537e:	70e8      	strb	r0, [r5, #3]
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d5380:	2201      	movs	r2, #1
   d5382:	701a      	strb	r2, [r3, #0]
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d5384:	f7ff fdc0 	bl	d4f08 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Boron awake after reboot - helps with recovery
   d5388:	4b56      	ldr	r3, [pc, #344]	; (d54e4 <setup+0x40c>)
   d538a:	4a57      	ldr	r2, [pc, #348]	; (d54e8 <setup+0x410>)
   d538c:	601a      	str	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d538e:	783b      	ldrb	r3, [r7, #0]
   d5390:	b90b      	cbnz	r3, d5396 <setup+0x2be>
   d5392:	2302      	movs	r3, #2
   d5394:	703b      	strb	r3, [r7, #0]
  digitalWrite(blueLED,LOW);                                          // Signal the end of startup
   d5396:	2100      	movs	r1, #0
   d5398:	2007      	movs	r0, #7
   d539a:	f005 fd76 	bl	dae8a <digitalWrite>
  sysStatus.verboseMode = true;
   d539e:	2301      	movs	r3, #1
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d53a0:	a806      	add	r0, sp, #24
  sysStatus.verboseMode = true;
   d53a2:	712b      	strb	r3, [r5, #4]
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d53a4:	f004 ff3c 	bl	da220 <_ZN6StringD1Ev>
}
   d53a8:	b02a      	add	sp, #168	; 0xa8
   d53aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d53ae:	f7ff fe43 	bl	d5038 <_Z18loadSystemDefaultsv>
   d53b2:	e75d      	b.n	d5270 <setup+0x198>
   d53b4:	462a      	mov	r2, r5
   d53b6:	2330      	movs	r3, #48	; 0x30
   d53b8:	4841      	ldr	r0, [pc, #260]	; (d54c0 <setup+0x3e8>)
   d53ba:	f001 fca9 	bl	d6d10 <_ZN6MB85RC8readDataEjPhj>
   d53be:	2320      	movs	r3, #32
   d53c0:	4642      	mov	r2, r8
   d53c2:	2150      	movs	r1, #80	; 0x50
   d53c4:	483e      	ldr	r0, [pc, #248]	; (d54c0 <setup+0x3e8>)
   d53c6:	f001 fca3 	bl	d6d10 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d53ca:	e751      	b.n	d5270 <setup+0x198>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d53cc:	f005 f9e0 	bl	da790 <_ZN9TimeClass6endDSTEv>
   d53d0:	e776      	b.n	d52c0 <setup+0x1e8>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d53d2:	4946      	ldr	r1, [pc, #280]	; (d54ec <setup+0x414>)
   d53d4:	e79b      	b.n	d530e <setup+0x236>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d53d6:	4611      	mov	r1, r2
   d53d8:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d53da:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d53dc:	f002 f962 	bl	d76a4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d53e0:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d53e2:	2b8c      	cmp	r3, #140	; 0x8c
   d53e4:	d1a7      	bne.n	d5336 <setup+0x25e>
   d53e6:	e7a0      	b.n	d532a <setup+0x252>
   d53e8:	00000000 	.word	0x00000000
   d53ec:	40ac2000 	.word	0x40ac2000
   d53f0:	000d44c9 	.word	0x000d44c9
   d53f4:	2003e548 	.word	0x2003e548
   d53f8:	2003e53c 	.word	0x2003e53c
   d53fc:	2003e484 	.word	0x2003e484
   d5400:	000ddde6 	.word	0x000ddde6
   d5404:	2003e3d4 	.word	0x2003e3d4
   d5408:	000dddf3 	.word	0x000dddf3
   d540c:	2003e558 	.word	0x2003e558
   d5410:	000dddfa 	.word	0x000dddfa
   d5414:	2003e48c 	.word	0x2003e48c
   d5418:	000dde05 	.word	0x000dde05
   d541c:	2003e110 	.word	0x2003e110
   d5420:	000dde11 	.word	0x000dde11
   d5424:	2003e550 	.word	0x2003e550
   d5428:	000dde19 	.word	0x000dde19
   d542c:	2003e4ec 	.word	0x2003e4ec
   d5430:	000dde24 	.word	0x000dde24
   d5434:	2003e116 	.word	0x2003e116
   d5438:	000ddeca 	.word	0x000ddeca
   d543c:	2003e104 	.word	0x2003e104
   d5440:	000dde31 	.word	0x000dde31
   d5444:	2003e490 	.word	0x2003e490
   d5448:	000dde3b 	.word	0x000dde3b
   d544c:	2003e4a1 	.word	0x2003e4a1
   d5450:	000dde42 	.word	0x000dde42
   d5454:	000d425d 	.word	0x000d425d
   d5458:	000d4111 	.word	0x000d4111
   d545c:	000dde4d 	.word	0x000dde4d
   d5460:	2003e579 	.word	0x2003e579
   d5464:	000dde5c 	.word	0x000dde5c
   d5468:	000d41fd 	.word	0x000d41fd
   d546c:	000dde68 	.word	0x000dde68
   d5470:	000d4569 	.word	0x000d4569
   d5474:	000dde74 	.word	0x000dde74
   d5478:	000d4149 	.word	0x000d4149
   d547c:	000dde7e 	.word	0x000dde7e
   d5480:	000d468d 	.word	0x000d468d
   d5484:	000dde86 	.word	0x000dde86
   d5488:	000d4a45 	.word	0x000d4a45
   d548c:	000dde93 	.word	0x000dde93
   d5490:	000d45b1 	.word	0x000d45b1
   d5494:	000dde9e 	.word	0x000dde9e
   d5498:	000d5f09 	.word	0x000d5f09
   d549c:	000ddeab 	.word	0x000ddeab
   d54a0:	000d6071 	.word	0x000d6071
   d54a4:	000ddeb8 	.word	0x000ddeb8
   d54a8:	000d4bd9 	.word	0x000d4bd9
   d54ac:	000ddec6 	.word	0x000ddec6
   d54b0:	000d4c11 	.word	0x000d4c11
   d54b4:	000dded3 	.word	0x000dded3
   d54b8:	000d475d 	.word	0x000d475d
   d54bc:	000ddedd 	.word	0x000ddedd
   d54c0:	2003e4ac 	.word	0x2003e4ac
   d54c4:	000de0e0 	.word	0x000de0e0
   d54c8:	2003e42c 	.word	0x2003e42c
   d54cc:	000d40d5 	.word	0x000d40d5
   d54d0:	000ddeef 	.word	0x000ddeef
   d54d4:	000ddc6a 	.word	0x000ddc6a
   d54d8:	000ddc60 	.word	0x000ddc60
   d54dc:	2003e578 	.word	0x2003e578
   d54e0:	2003e4fd 	.word	0x2003e4fd
   d54e4:	2003e540 	.word	0x2003e540
   d54e8:	00015f90 	.word	0x00015f90
   d54ec:	000ddc5c 	.word	0x000ddc5c
   d54f0:	2003e480 	.word	0x2003e480

000d54f4 <loop>:
{
   d54f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d54f8:	4ca1      	ldr	r4, [pc, #644]	; (d5780 <loop+0x28c>)
   d54fa:	4fa2      	ldr	r7, [pc, #648]	; (d5784 <loop+0x290>)
   d54fc:	7823      	ldrb	r3, [r4, #0]
   d54fe:	4ea2      	ldr	r6, [pc, #648]	; (d5788 <loop+0x294>)
   d5500:	3b01      	subs	r3, #1
{
   d5502:	b097      	sub	sp, #92	; 0x5c
   d5504:	2b08      	cmp	r3, #8
   d5506:	f200 80aa 	bhi.w	d565e <loop+0x16a>
   d550a:	e8df f013 	tbh	[pc, r3, lsl #1]
   d550e:	0283      	.short	0x0283
   d5510:	01c40009 	.word	0x01c40009
   d5514:	016501f6 	.word	0x016501f6
   d5518:	025c0231 	.word	0x025c0231
   d551c:	004000e1 	.word	0x004000e1
    if (state != oldState) publishStateTransition();
   d5520:	4b9a      	ldr	r3, [pc, #616]	; (d578c <loop+0x298>)
   d5522:	781b      	ldrb	r3, [r3, #0]
   d5524:	2b02      	cmp	r3, #2
   d5526:	d001      	beq.n	d552c <loop+0x38>
   d5528:	f7ff fc02 	bl	d4d30 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d552c:	4d98      	ldr	r5, [pc, #608]	; (d5790 <loop+0x29c>)
   d552e:	79ab      	ldrb	r3, [r5, #6]
   d5530:	b16b      	cbz	r3, d554e <loop+0x5a>
   d5532:	f002 f8d7 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
   d5536:	4b97      	ldr	r3, [pc, #604]	; (d5794 <loop+0x2a0>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	1ac0      	subs	r0, r0, r3
   d553c:	4b96      	ldr	r3, [pc, #600]	; (d5798 <loop+0x2a4>)
   d553e:	681b      	ldr	r3, [r3, #0]
   d5540:	4298      	cmp	r0, r3
   d5542:	d904      	bls.n	d554e <loop+0x5a>
   d5544:	4b95      	ldr	r3, [pc, #596]	; (d579c <loop+0x2a8>)
   d5546:	689b      	ldr	r3, [r3, #8]
   d5548:	b90b      	cbnz	r3, d554e <loop+0x5a>
   d554a:	2308      	movs	r3, #8
   d554c:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = MEASURING_STATE;                                                            // We want to report on the hour but not after bedtime
   d554e:	f005 fa4f 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d5552:	4b93      	ldr	r3, [pc, #588]	; (d57a0 <loop+0x2ac>)
   d5554:	4680      	mov	r8, r0
   d5556:	2100      	movs	r1, #0
   d5558:	6818      	ldr	r0, [r3, #0]
   d555a:	f005 f8ab 	bl	da6b4 <_ZN9TimeClass4hourEx>
   d555e:	4580      	cmp	r8, r0
   d5560:	bf1c      	itt	ne
   d5562:	2303      	movne	r3, #3
   d5564:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;                             // The park is closed - sleep                                                                                   // Most important - turn off water when done!
   d5566:	f005 fa43 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d556a:	7f6b      	ldrb	r3, [r5, #29]
   d556c:	4298      	cmp	r0, r3
   d556e:	db08      	blt.n	d5582 <loop+0x8e>
   d5570:	2309      	movs	r3, #9
   d5572:	7023      	strb	r3, [r4, #0]
    if (particleConnectionNeeded) state = CONNECTING_STATE;
   d5574:	4b8b      	ldr	r3, [pc, #556]	; (d57a4 <loop+0x2b0>)
   d5576:	781b      	ldrb	r3, [r3, #0]
   d5578:	2b00      	cmp	r3, #0
   d557a:	d070      	beq.n	d565e <loop+0x16a>
      state = CONNECTING_STATE;                                       // Go straight to the connecting state
   d557c:	2305      	movs	r3, #5
      state = ERROR_STATE;                                            // Response timed out
   d557e:	7023      	strb	r3, [r4, #0]
   d5580:	e06d      	b.n	d565e <loop+0x16a>
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;                             // The park is closed - sleep                                                                                   // Most important - turn off water when done!
   d5582:	f005 fa35 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d5586:	7f2b      	ldrb	r3, [r5, #28]
   d5588:	4298      	cmp	r0, r3
   d558a:	dbf1      	blt.n	d5570 <loop+0x7c>
   d558c:	e7f2      	b.n	d5574 <loop+0x80>
    if (state != oldState) publishStateTransition();
   d558e:	4b7f      	ldr	r3, [pc, #508]	; (d578c <loop+0x298>)
   d5590:	781b      	ldrb	r3, [r3, #0]
   d5592:	2b09      	cmp	r3, #9
   d5594:	d001      	beq.n	d559a <loop+0xa6>
   d5596:	f7ff fbcb 	bl	d4d30 <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d559a:	4b7d      	ldr	r3, [pc, #500]	; (d5790 <loop+0x29c>)
   d559c:	78da      	ldrb	r2, [r3, #3]
   d559e:	4698      	mov	r8, r3
   d55a0:	b10a      	cbz	r2, d55a6 <loop+0xb2>
   d55a2:	f7ff fb6d 	bl	d4c80 <_Z22disconnectFromParticlev>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d55a6:	2100      	movs	r1, #0
   d55a8:	487f      	ldr	r0, [pc, #508]	; (d57a8 <loop+0x2b4>)
   d55aa:	f000 ff09 	bl	d63c0 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d55ae:	f005 fa0e 	bl	da9ce <_ZN9TimeClass3nowEv>
   d55b2:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d55b6:	fb90 f3f5 	sdiv	r3, r0, r5
   d55ba:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d55be:	4b7b      	ldr	r3, [pc, #492]	; (d57ac <loop+0x2b8>)
   d55c0:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d55c4:	7d1a      	ldrb	r2, [r3, #20]
   d55c6:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d55ca:	bfa8      	it	ge
   d55cc:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d55d0:	b10a      	cbz	r2, d55d6 <loop+0xe2>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d55d2:	2202      	movs	r2, #2
   d55d4:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d55d6:	2200      	movs	r2, #0
   d55d8:	2104      	movs	r1, #4
   d55da:	4874      	ldr	r0, [pc, #464]	; (d57ac <loop+0x2b8>)
   d55dc:	f7fe fed4 	bl	d4388 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d55e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d55e4:	4369      	muls	r1, r5
   d55e6:	f7fe ff03 	bl	d43f0 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d55ea:	4970      	ldr	r1, [pc, #448]	; (d57ac <loop+0x2b8>)
   d55ec:	a803      	add	r0, sp, #12
   d55ee:	f004 ff75 	bl	da4dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d55f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d55f6:	486c      	ldr	r0, [pc, #432]	; (d57a8 <loop+0x2b4>)
   d55f8:	f000 fee2 	bl	d63c0 <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d55fc:	486c      	ldr	r0, [pc, #432]	; (d57b0 <loop+0x2bc>)
   d55fe:	f003 f929 	bl	d8854 <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d5602:	486b      	ldr	r0, [pc, #428]	; (d57b0 <loop+0x2bc>)
   d5604:	f003 f91d 	bl	d8842 <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5608:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d560a:	b19b      	cbz	r3, d5634 <loop+0x140>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d560c:	889a      	ldrh	r2, [r3, #4]
   d560e:	2a01      	cmp	r2, #1
   d5610:	d110      	bne.n	d5634 <loop+0x140>
    if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   d5612:	899b      	ldrh	r3, [r3, #12]
   d5614:	2b04      	cmp	r3, #4
   d5616:	d10d      	bne.n	d5634 <loop+0x140>
      setLowPowerMode("0");
   d5618:	4966      	ldr	r1, [pc, #408]	; (d57b4 <loop+0x2c0>)
   d561a:	a806      	add	r0, sp, #24
   d561c:	f004 fe4b 	bl	da2b6 <_ZN6StringC1EPKc>
   d5620:	a806      	add	r0, sp, #24
   d5622:	f7ff f833 	bl	d468c <_Z15setLowPowerMode6String>
   d5626:	a806      	add	r0, sp, #24
   d5628:	f004 fdfa 	bl	da220 <_ZN6StringD1Ev>
      sysStatus.openTime = 0;
   d562c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d5630:	f8a8 301c 	strh.w	r3, [r8, #28]
    if (Time.hour() < sysStatus.closeTime && Time.hour() >= sysStatus.openTime) { // We might wake up and find it is opening time.  Park is open let's get ready for the day
   d5634:	f005 f9dc 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d5638:	f898 301d 	ldrb.w	r3, [r8, #29]
   d563c:	4298      	cmp	r0, r3
   d563e:	da08      	bge.n	d5652 <loop+0x15e>
   d5640:	f005 f9d6 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d5644:	f898 301c 	ldrb.w	r3, [r8, #28]
   d5648:	4298      	cmp	r0, r3
   d564a:	db02      	blt.n	d5652 <loop+0x15e>
      stayAwake = stayAwakeLong;                                       // Keeps Boron awake after deep sleep - may not be needed
   d564c:	4b52      	ldr	r3, [pc, #328]	; (d5798 <loop+0x2a4>)
   d564e:	4a5a      	ldr	r2, [pc, #360]	; (d57b8 <loop+0x2c4>)
   d5650:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d5652:	2302      	movs	r3, #2
   d5654:	7023      	strb	r3, [r4, #0]
        if (wakeupSource_) {
   d5656:	9803      	ldr	r0, [sp, #12]
   d5658:	b108      	cbz	r0, d565e <loop+0x16a>
            free(wakeupSource_);
   d565a:	f002 fb47 	bl	d7cec <free>
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d565e:	4852      	ldr	r0, [pc, #328]	; (d57a8 <loop+0x2b4>)
   d5660:	f001 faa6 	bl	d6bb0 <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d5664:	783b      	ldrb	r3, [r7, #0]
   d5666:	b133      	cbz	r3, d5676 <loop+0x182>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d5668:	4a49      	ldr	r2, [pc, #292]	; (d5790 <loop+0x29c>)
   d566a:	4854      	ldr	r0, [pc, #336]	; (d57bc <loop+0x2c8>)
   d566c:	2101      	movs	r1, #1
   d566e:	f7ff fcda 	bl	d5026 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d5672:	2300      	movs	r3, #0
   d5674:	703b      	strb	r3, [r7, #0]
  if (currentCountsWriteNeeded) {
   d5676:	7833      	ldrb	r3, [r6, #0]
   d5678:	b13b      	cbz	r3, d568a <loop+0x196>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d567a:	2320      	movs	r3, #32
   d567c:	4a47      	ldr	r2, [pc, #284]	; (d579c <loop+0x2a8>)
   d567e:	484f      	ldr	r0, [pc, #316]	; (d57bc <loop+0x2c8>)
   d5680:	2150      	movs	r1, #80	; 0x50
   d5682:	f001 fb90 	bl	d6da6 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d5686:	2300      	movs	r3, #0
   d5688:	7033      	strb	r3, [r6, #0]
  if (outOfMemory >= 0) {                                             // In this function we are going to reset the system if there is an out of memory error
   d568a:	4b4d      	ldr	r3, [pc, #308]	; (d57c0 <loop+0x2cc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	2b00      	cmp	r3, #0
   d5690:	db1b      	blt.n	d56ca <loop+0x1d6>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d5692:	4a4c      	ldr	r2, [pc, #304]	; (d57c4 <loop+0x2d0>)
   d5694:	2140      	movs	r1, #64	; 0x40
   d5696:	a806      	add	r0, sp, #24
   d5698:	f002 fb40 	bl	d7d1c <snprintf>
    Log.info(message);
   d569c:	a906      	add	r1, sp, #24
   d569e:	484a      	ldr	r0, [pc, #296]	; (d57c8 <loop+0x2d4>)
   d56a0:	f7fe fed6 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d56a4:	2064      	movs	r0, #100	; 0x64
   d56a6:	f002 fb8d 	bl	d7dc4 <delay>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d56aa:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);                   // Publish to the console - this is important so we will not filter on verboseMod
   d56ac:	f88d 3000 	strb.w	r3, [sp]
   d56b0:	4b46      	ldr	r3, [pc, #280]	; (d57cc <loop+0x2d8>)
   d56b2:	4947      	ldr	r1, [pc, #284]	; (d57d0 <loop+0x2dc>)
   d56b4:	781b      	ldrb	r3, [r3, #0]
   d56b6:	4847      	ldr	r0, [pc, #284]	; (d57d4 <loop+0x2e0>)
   d56b8:	aa06      	add	r2, sp, #24
   d56ba:	f7fe fef7 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d56be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d56c2:	f002 fb7f 	bl	d7dc4 <delay>
    System.reset();                                                   // An out of memory condition occurred - reset device.
   d56c6:	f004 ff05 	bl	da4d4 <_ZN11SystemClass5resetEv>
}
   d56ca:	b017      	add	sp, #92	; 0x5c
   d56cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (state != oldState) publishStateTransition();
   d56d0:	4b2e      	ldr	r3, [pc, #184]	; (d578c <loop+0x298>)
   d56d2:	781b      	ldrb	r3, [r3, #0]
   d56d4:	2b08      	cmp	r3, #8
   d56d6:	d001      	beq.n	d56dc <loop+0x1e8>
   d56d8:	f7ff fb2a 	bl	d4d30 <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d56dc:	4b2c      	ldr	r3, [pc, #176]	; (d5790 <loop+0x29c>)
   d56de:	78db      	ldrb	r3, [r3, #3]
   d56e0:	b10b      	cbz	r3, d56e6 <loop+0x1f2>
   d56e2:	f7ff facd 	bl	d4c80 <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                 // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d56e6:	4b2c      	ldr	r3, [pc, #176]	; (d5798 <loop+0x2a4>)
    bool stopWDT() { return setWDT(0); };
   d56e8:	482f      	ldr	r0, [pc, #188]	; (d57a8 <loop+0x2b4>)
   d56ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d56ee:	2100      	movs	r1, #0
   d56f0:	601a      	str	r2, [r3, #0]
   d56f2:	f000 fe65 	bl	d63c0 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d56f6:	f005 f96a 	bl	da9ce <_ZN9TimeClass3nowEv>
   d56fa:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d56fe:	fb90 f3f5 	sdiv	r3, r0, r5
   d5702:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d5706:	4b29      	ldr	r3, [pc, #164]	; (d57ac <loop+0x2b8>)
   d5708:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d570c:	7d1a      	ldrb	r2, [r3, #20]
   d570e:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d5712:	bfa8      	it	ge
   d5714:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d5718:	b10a      	cbz	r2, d571e <loop+0x22a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d571a:	2202      	movs	r2, #2
   d571c:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d571e:	2200      	movs	r2, #0
   d5720:	2104      	movs	r1, #4
   d5722:	4822      	ldr	r0, [pc, #136]	; (d57ac <loop+0x2b8>)
   d5724:	f7fe fe30 	bl	d4388 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5728:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d572c:	4369      	muls	r1, r5
   d572e:	f7fe fe5f 	bl	d43f0 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d5732:	491e      	ldr	r1, [pc, #120]	; (d57ac <loop+0x2b8>)
   d5734:	a803      	add	r0, sp, #12
   d5736:	f004 fed1 	bl	da4dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d573a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d573e:	481a      	ldr	r0, [pc, #104]	; (d57a8 <loop+0x2b4>)
   d5740:	f000 fe3e 	bl	d63c0 <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d5744:	481a      	ldr	r0, [pc, #104]	; (d57b0 <loop+0x2bc>)
   d5746:	f003 f885 	bl	d8854 <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d574a:	4819      	ldr	r0, [pc, #100]	; (d57b0 <loop+0x2bc>)
   d574c:	f003 f879 	bl	d8842 <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5750:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5752:	2b00      	cmp	r3, #0
   d5754:	f43f af7d 	beq.w	d5652 <loop+0x15e>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5758:	889a      	ldrh	r2, [r3, #4]
   d575a:	2a01      	cmp	r2, #1
   d575c:	f47f af79 	bne.w	d5652 <loop+0x15e>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d5760:	899b      	ldrh	r3, [r3, #12]
   d5762:	2b04      	cmp	r3, #4
   d5764:	f47f af75 	bne.w	d5652 <loop+0x15e>
   d5768:	4912      	ldr	r1, [pc, #72]	; (d57b4 <loop+0x2c0>)
   d576a:	a806      	add	r0, sp, #24
   d576c:	f004 fda3 	bl	da2b6 <_ZN6StringC1EPKc>
   d5770:	a806      	add	r0, sp, #24
   d5772:	f7fe ff8b 	bl	d468c <_Z15setLowPowerMode6String>
   d5776:	a806      	add	r0, sp, #24
   d5778:	f004 fd52 	bl	da220 <_ZN6StringD1Ev>
   d577c:	e769      	b.n	d5652 <loop+0x15e>
   d577e:	bf00      	nop
   d5780:	2003e53c 	.word	0x2003e53c
   d5784:	2003e578 	.word	0x2003e578
   d5788:	2003e4a0 	.word	0x2003e4a0
   d578c:	2003e4fc 	.word	0x2003e4fc
   d5790:	2003e548 	.word	0x2003e548
   d5794:	2003e544 	.word	0x2003e544
   d5798:	2003e540 	.word	0x2003e540
   d579c:	2003e480 	.word	0x2003e480
   d57a0:	2003e4c4 	.word	0x2003e4c4
   d57a4:	2003e4fd 	.word	0x2003e4fd
   d57a8:	2003e42c 	.word	0x2003e42c
   d57ac:	2003e468 	.word	0x2003e468
   d57b0:	2003e4bc 	.word	0x2003e4bc
   d57b4:	000ddd68 	.word	0x000ddd68
   d57b8:	00015f90 	.word	0x00015f90
   d57bc:	2003e4ac 	.word	0x2003e4ac
   d57c0:	2003e120 	.word	0x2003e120
   d57c4:	000de00a 	.word	0x000de00a
   d57c8:	2003e5e0 	.word	0x2003e5e0
   d57cc:	2003e425 	.word	0x2003e425
   d57d0:	000de029 	.word	0x000de029
   d57d4:	2003e500 	.word	0x2003e500
    if (state != oldState) {
   d57d8:	4ba5      	ldr	r3, [pc, #660]	; (d5a70 <loop+0x57c>)
   d57da:	781b      	ldrb	r3, [r3, #0]
   d57dc:	2b05      	cmp	r3, #5
   d57de:	d013      	beq.n	d5808 <loop+0x314>
      if (oldState == MEASURING_STATE) returnToMeasuring = true;
   d57e0:	1eda      	subs	r2, r3, #3
   d57e2:	4253      	negs	r3, r2
   d57e4:	4153      	adcs	r3, r2
   d57e6:	4aa3      	ldr	r2, [pc, #652]	; (d5a74 <loop+0x580>)
   d57e8:	7013      	strb	r3, [r2, #0]
      publishStateTransition();
   d57ea:	f7ff faa1 	bl	d4d30 <_Z22publishStateTransitionv>
      connectionStartTime = Time.now();                               // Start the clock first time we enter the state
   d57ee:	f005 f8ee 	bl	da9ce <_ZN9TimeClass3nowEv>
   d57f2:	4ba1      	ldr	r3, [pc, #644]	; (d5a78 <loop+0x584>)
   d57f4:	6018      	str	r0, [r3, #0]
        network_on(*this, 0, 0, NULL);
   d57f6:	48a1      	ldr	r0, [pc, #644]	; (d5a7c <loop+0x588>)
   d57f8:	2300      	movs	r3, #0
   d57fa:	6840      	ldr	r0, [r0, #4]
   d57fc:	461a      	mov	r2, r3
   d57fe:	4619      	mov	r1, r3
   d5800:	f002 fa2c 	bl	d7c5c <network_on>
        spark_cloud_flag_connect();
   d5804:	f002 f9b2 	bl	d7b6c <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5808:	f002 f9b8 	bl	d7b7c <spark_cloud_flag_connected>
   d580c:	4d9c      	ldr	r5, [pc, #624]	; (d5a80 <loop+0x58c>)
   d580e:	f8df 8294 	ldr.w	r8, [pc, #660]	; d5aa4 <loop+0x5b0>
    if (Particle.connected()) {
   d5812:	4681      	mov	r9, r0
   d5814:	2800      	cmp	r0, #0
   d5816:	d045      	beq.n	d58a4 <loop+0x3b0>
      particleConnectionNeeded = false;                               // Connected so we don't need this flag
   d5818:	2300      	movs	r3, #0
   d581a:	f888 3000 	strb.w	r3, [r8]
      sysStatus.connectedStatus = true;
   d581e:	2301      	movs	r3, #1
   d5820:	70eb      	strb	r3, [r5, #3]
      sysStatus.lastConnection = Time.now();                          // This is the last time we attempted to connect
   d5822:	f005 f8d4 	bl	da9ce <_ZN9TimeClass3nowEv>
      Log.info("cloud connection successful");
   d5826:	4997      	ldr	r1, [pc, #604]	; (d5a84 <loop+0x590>)
      sysStatus.lastConnection = Time.now();                          // This is the last time we attempted to connect
   d5828:	6268      	str	r0, [r5, #36]	; 0x24
      Log.info("cloud connection unsuccessful");
   d582a:	4897      	ldr	r0, [pc, #604]	; (d5a88 <loop+0x594>)
   d582c:	f7fe fe10 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
    if (!particleConnectionNeeded) {                                  // Whether the connection was successful or not, we will collect and publish metrics
   d5830:	f898 3000 	ldrb.w	r3, [r8]
   d5834:	2b00      	cmp	r3, #0
   d5836:	d12e      	bne.n	d5896 <loop+0x3a2>
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d5838:	f005 f8c9 	bl	da9ce <_ZN9TimeClass3nowEv>
   d583c:	4b8e      	ldr	r3, [pc, #568]	; (d5a78 <loop+0x584>)
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d583e:	4a93      	ldr	r2, [pc, #588]	; (d5a8c <loop+0x598>)
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d5840:	681b      	ldr	r3, [r3, #0]
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d5842:	8b11      	ldrh	r1, [r2, #24]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d5844:	1ac0      	subs	r0, r0, r3
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d5846:	4b92      	ldr	r3, [pc, #584]	; (d5a90 <loop+0x59c>)
   d5848:	681b      	ldr	r3, [r3, #0]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d584a:	b280      	uxth	r0, r0
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d584c:	4298      	cmp	r0, r3
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d584e:	8528      	strh	r0, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d5850:	bf88      	it	hi
   d5852:	852b      	strhhi	r3, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d5854:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   d5856:	4299      	cmp	r1, r3
   d5858:	bf38      	it	cc
   d585a:	8313      	strhcc	r3, [r2, #24]
      snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d585c:	2120      	movs	r1, #32
   d585e:	4a8d      	ldr	r2, [pc, #564]	; (d5a94 <loop+0x5a0>)
   d5860:	a806      	add	r0, sp, #24
   d5862:	f002 fa5b 	bl	d7d1c <snprintf>
      Log.info(connectionStr);
   d5866:	4888      	ldr	r0, [pc, #544]	; (d5a88 <loop+0x594>)
   d5868:	a906      	add	r1, sp, #24
   d586a:	f7fe fdf1 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
      if (sysStatus.verboseMode) publishQueue.publish("Cellular",connectionStr,PRIVATE);
   d586e:	792b      	ldrb	r3, [r5, #4]
   d5870:	b14b      	cbz	r3, d5886 <loop+0x392>
   d5872:	2300      	movs	r3, #0
   d5874:	f88d 3000 	strb.w	r3, [sp]
   d5878:	4b87      	ldr	r3, [pc, #540]	; (d5a98 <loop+0x5a4>)
   d587a:	4988      	ldr	r1, [pc, #544]	; (d5a9c <loop+0x5a8>)
   d587c:	781b      	ldrb	r3, [r3, #0]
   d587e:	4888      	ldr	r0, [pc, #544]	; (d5aa0 <loop+0x5ac>)
   d5880:	aa06      	add	r2, sp, #24
   d5882:	f7fe fe13 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      systemStatusWriteNeeded = true;
   d5886:	2301      	movs	r3, #1
   d5888:	703b      	strb	r3, [r7, #0]
      currentCountsWriteNeeded = true;
   d588a:	7033      	strb	r3, [r6, #0]
      if (returnToMeasuring) state = MEASURING_STATE;    // If we came here from measuring, this will send us back
   d588c:	4b79      	ldr	r3, [pc, #484]	; (d5a74 <loop+0x580>)
   d588e:	781b      	ldrb	r3, [r3, #0]
   d5890:	b323      	cbz	r3, d58dc <loop+0x3e8>
   d5892:	2303      	movs	r3, #3
      else state = IDLE_STATE;                                             // We are connected so, we can go to the IDLE state
   d5894:	7023      	strb	r3, [r4, #0]
    if (!sysStatus.connectedStatus) {
   d5896:	4b7a      	ldr	r3, [pc, #488]	; (d5a80 <loop+0x58c>)
   d5898:	78da      	ldrb	r2, [r3, #3]
   d589a:	bb0a      	cbnz	r2, d58e0 <loop+0x3ec>
      particleConnectionNeeded = true;                                // Go to connect state to connect and will return from there
   d589c:	4b81      	ldr	r3, [pc, #516]	; (d5aa4 <loop+0x5b0>)
   d589e:	2201      	movs	r2, #1
   d58a0:	701a      	strb	r2, [r3, #0]
   d58a2:	e66b      	b.n	d557c <loop+0x88>
    else if ((Time.now() - connectionStartTime) > connectMaxTimeSec) {
   d58a4:	f005 f893 	bl	da9ce <_ZN9TimeClass3nowEv>
   d58a8:	4b73      	ldr	r3, [pc, #460]	; (d5a78 <loop+0x584>)
   d58aa:	4a79      	ldr	r2, [pc, #484]	; (d5a90 <loop+0x59c>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	6812      	ldr	r2, [r2, #0]
   d58b0:	1ac3      	subs	r3, r0, r3
   d58b2:	4293      	cmp	r3, r2
   d58b4:	d9bc      	bls.n	d5830 <loop+0x33c>
      particleConnectionNeeded = false;                               // Timed out so we will give up until the next hour
   d58b6:	f888 9000 	strb.w	r9, [r8]
      if ((Time.now() - sysStatus.lastConnection) > 7200) {             // Only sends to ERROR_STATE if it has been over 2 hours
   d58ba:	f005 f888 	bl	da9ce <_ZN9TimeClass3nowEv>
   d58be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d58c0:	1ac0      	subs	r0, r0, r3
   d58c2:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d58c6:	d905      	bls.n	d58d4 <loop+0x3e0>
        state = ERROR_STATE;     
   d58c8:	2301      	movs	r3, #1
   d58ca:	7023      	strb	r3, [r4, #0]
   d58cc:	f001 ff0a 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   d58d0:	4b75      	ldr	r3, [pc, #468]	; (d5aa8 <loop+0x5b4>)
   d58d2:	6018      	str	r0, [r3, #0]
      sysStatus.connectedStatus = false;
   d58d4:	2300      	movs	r3, #0
      Log.info("cloud connection unsuccessful");
   d58d6:	4975      	ldr	r1, [pc, #468]	; (d5aac <loop+0x5b8>)
      sysStatus.connectedStatus = false;
   d58d8:	70eb      	strb	r3, [r5, #3]
      Log.info("cloud connection unsuccessful");
   d58da:	e7a6      	b.n	d582a <loop+0x336>
      else state = IDLE_STATE;                                             // We are connected so, we can go to the IDLE state
   d58dc:	2302      	movs	r3, #2
   d58de:	e7d9      	b.n	d5894 <loop+0x3a0>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d58e0:	791b      	ldrb	r3, [r3, #4]
   d58e2:	b133      	cbz	r3, d58f2 <loop+0x3fe>
   d58e4:	4b62      	ldr	r3, [pc, #392]	; (d5a70 <loop+0x57c>)
   d58e6:	7822      	ldrb	r2, [r4, #0]
   d58e8:	781b      	ldrb	r3, [r3, #0]
   d58ea:	429a      	cmp	r2, r3
   d58ec:	d001      	beq.n	d58f2 <loop+0x3fe>
   d58ee:	f7ff fa1f 	bl	d4d30 <_Z22publishStateTransitionv>
    takeMeasurements();
   d58f2:	f7ff fb09 	bl	d4f08 <_Z16takeMeasurementsv>
    state = WATERING_STATE;
   d58f6:	2304      	movs	r3, #4
   d58f8:	e641      	b.n	d557e <loop+0x8a>
    if (state != oldState) publishStateTransition();
   d58fa:	4b5d      	ldr	r3, [pc, #372]	; (d5a70 <loop+0x57c>)
   d58fc:	781b      	ldrb	r3, [r3, #0]
   d58fe:	2b04      	cmp	r3, #4
   d5900:	d001      	beq.n	d5906 <loop+0x412>
   d5902:	f7ff fa15 	bl	d4d30 <_Z22publishStateTransitionv>
    if (Time.hour() >5 && Time.hour() < 16 && current.soilMoisture <45) {
   d5906:	f005 f873 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d590a:	2805      	cmp	r0, #5
   d590c:	dc12      	bgt.n	d5934 <loop+0x440>
      Log.info("No watering needed at this time");
   d590e:	4968      	ldr	r1, [pc, #416]	; (d5ab0 <loop+0x5bc>)
   d5910:	485d      	ldr	r0, [pc, #372]	; (d5a88 <loop+0x594>)
   d5912:	f7fe fd9d 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5916:	4b67      	ldr	r3, [pc, #412]	; (d5ab4 <loop+0x5c0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5918:	4965      	ldr	r1, [pc, #404]	; (d5ab0 <loop+0x5bc>)
   d591a:	781b      	ldrb	r3, [r3, #0]
   d591c:	f88d 3000 	strb.w	r3, [sp]
   d5920:	a806      	add	r0, sp, #24
   d5922:	233c      	movs	r3, #60	; 0x3c
   d5924:	2200      	movs	r2, #0
   d5926:	f002 fd3b 	bl	d83a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d592a:	a807      	add	r0, sp, #28
   d592c:	f7ff fb52 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    state = REPORTING_STATE;
   d5930:	2306      	movs	r3, #6
   d5932:	e624      	b.n	d557e <loop+0x8a>
    if (Time.hour() >5 && Time.hour() < 16 && current.soilMoisture <45) {
   d5934:	f005 f85c 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d5938:	280f      	cmp	r0, #15
   d593a:	dce8      	bgt.n	d590e <loop+0x41a>
   d593c:	4b53      	ldr	r3, [pc, #332]	; (d5a8c <loop+0x598>)
   d593e:	685b      	ldr	r3, [r3, #4]
   d5940:	2b2c      	cmp	r3, #44	; 0x2c
   d5942:	dce4      	bgt.n	d590e <loop+0x41a>
      Log.info("Watering");
   d5944:	495c      	ldr	r1, [pc, #368]	; (d5ab8 <loop+0x5c4>)
   d5946:	4850      	ldr	r0, [pc, #320]	; (d5a88 <loop+0x594>)
   d5948:	f7fe fd82 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
      snprintf(data, sizeof(data), "{\"duration\":%i}",wateringDurationSeconds);
   d594c:	4a5b      	ldr	r2, [pc, #364]	; (d5abc <loop+0x5c8>)
   d594e:	2378      	movs	r3, #120	; 0x78
   d5950:	2120      	movs	r1, #32
   d5952:	a806      	add	r0, sp, #24
   d5954:	f002 f9e2 	bl	d7d1c <snprintf>
   d5958:	4b4f      	ldr	r3, [pc, #316]	; (d5a98 <loop+0x5a4>)
   d595a:	4959      	ldr	r1, [pc, #356]	; (d5ac0 <loop+0x5cc>)
   d595c:	781b      	ldrb	r3, [r3, #0]
   d595e:	f88d 3000 	strb.w	r3, [sp]
   d5962:	a803      	add	r0, sp, #12
   d5964:	233c      	movs	r3, #60	; 0x3c
   d5966:	aa06      	add	r2, sp, #24
   d5968:	f002 fd1a 	bl	d83a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d596c:	a804      	add	r0, sp, #16
   d596e:	e7dd      	b.n	d592c <loop+0x438>
    if (state != oldState) publishStateTransition();
   d5970:	4b3f      	ldr	r3, [pc, #252]	; (d5a70 <loop+0x57c>)
   d5972:	781b      	ldrb	r3, [r3, #0]
   d5974:	2b06      	cmp	r3, #6
   d5976:	d001      	beq.n	d597c <loop+0x488>
   d5978:	f7ff f9da 	bl	d4d30 <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus) {
   d597c:	4d40      	ldr	r5, [pc, #256]	; (d5a80 <loop+0x58c>)
    lastReportedTime = Time.now();                                  // We are only going to try once
   d597e:	f005 f826 	bl	da9ce <_ZN9TimeClass3nowEv>
   d5982:	4b50      	ldr	r3, [pc, #320]	; (d5ac4 <loop+0x5d0>)
    if (sysStatus.connectedStatus) {
   d5984:	78ea      	ldrb	r2, [r5, #3]
    lastReportedTime = Time.now();                                  // We are only going to try once
   d5986:	6018      	str	r0, [r3, #0]
    if (sysStatus.connectedStatus) {
   d5988:	4698      	mov	r8, r3
   d598a:	2a00      	cmp	r2, #0
   d598c:	d03c      	beq.n	d5a08 <loop+0x514>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house and publish to Google Sheets
   d598e:	f005 f82f 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d5992:	7f2b      	ldrb	r3, [r5, #28]
   d5994:	4298      	cmp	r0, r3
   d5996:	d113      	bne.n	d59c0 <loop+0x4cc>
   d5998:	f7ff fa38 	bl	d4e0c <_Z12dailyCleanupv>
      if (Time.hour() == sysStatus.openTime && sysStatus.openTime==0) sendEvent();    // Need this so we can get 24 hour reporting for non-sleeping devices
   d599c:	f005 f828 	bl	da9f0 <_ZN9TimeClass4hourEv>
   d59a0:	7f2b      	ldrb	r3, [r5, #28]
   d59a2:	4298      	cmp	r0, r3
   d59a4:	d102      	bne.n	d59ac <loop+0x4b8>
   d59a6:	b908      	cbnz	r0, d59ac <loop+0x4b8>
   d59a8:	f7fe ff20 	bl	d47ec <_Z9sendEventv>
   d59ac:	f001 fe9a 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();
   d59b0:	4b45      	ldr	r3, [pc, #276]	; (d5ac8 <loop+0x5d4>)
   d59b2:	6018      	str	r0, [r3, #0]
      lastReportedTime = Time.now();
   d59b4:	f005 f80b 	bl	da9ce <_ZN9TimeClass3nowEv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d59b8:	2307      	movs	r3, #7
      lastReportedTime = Time.now();
   d59ba:	f8c8 0000 	str.w	r0, [r8]
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d59be:	e5de      	b.n	d557e <loop+0x8a>
      else sendEvent();                                               // Send data to Ubidots but not at opening time as there is nothing to publish
   d59c0:	f7fe ff14 	bl	d47ec <_Z9sendEventv>
   d59c4:	e7ea      	b.n	d599c <loop+0x4a8>
    if (state != oldState) publishStateTransition();
   d59c6:	4b2a      	ldr	r3, [pc, #168]	; (d5a70 <loop+0x57c>)
   d59c8:	781b      	ldrb	r3, [r3, #0]
   d59ca:	2b07      	cmp	r3, #7
   d59cc:	d001      	beq.n	d59d2 <loop+0x4de>
   d59ce:	f7ff f9af 	bl	d4d30 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   d59d2:	4b3e      	ldr	r3, [pc, #248]	; (d5acc <loop+0x5d8>)
   d59d4:	781d      	ldrb	r5, [r3, #0]
   d59d6:	b96d      	cbnz	r5, d59f4 <loop+0x500>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d59d8:	4b3d      	ldr	r3, [pc, #244]	; (d5ad0 <loop+0x5dc>)
   d59da:	4a3e      	ldr	r2, [pc, #248]	; (d5ad4 <loop+0x5e0>)
   d59dc:	601a      	str	r2, [r3, #0]
   d59de:	f001 fe81 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d59e2:	4b3d      	ldr	r3, [pc, #244]	; (d5ad8 <loop+0x5e4>)
   d59e4:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d59e6:	2302      	movs	r3, #2
   d59e8:	7023      	strb	r3, [r4, #0]
      current.alertCount = 0; // Zero out the counts until next reporting period
   d59ea:	4b28      	ldr	r3, [pc, #160]	; (d5a8c <loop+0x598>)
   d59ec:	611d      	str	r5, [r3, #16]
      currentCountsWriteNeeded=true;
   d59ee:	2301      	movs	r3, #1
   d59f0:	7033      	strb	r3, [r6, #0]
   d59f2:	e634      	b.n	d565e <loop+0x16a>
   d59f4:	f001 fe76 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d59f8:	4b33      	ldr	r3, [pc, #204]	; (d5ac8 <loop+0x5d4>)
   d59fa:	681b      	ldr	r3, [r3, #0]
   d59fc:	1ac0      	subs	r0, r0, r3
   d59fe:	f247 5330 	movw	r3, #30000	; 0x7530
   d5a02:	4298      	cmp	r0, r3
   d5a04:	f67f ae2b 	bls.w	d565e <loop+0x16a>
   d5a08:	f001 fe6c 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5a0c:	4b26      	ldr	r3, [pc, #152]	; (d5aa8 <loop+0x5b4>)
   d5a0e:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d5a10:	2301      	movs	r3, #1
   d5a12:	e5b4      	b.n	d557e <loop+0x8a>
    if (state != oldState) publishStateTransition();
   d5a14:	4b16      	ldr	r3, [pc, #88]	; (d5a70 <loop+0x57c>)
   d5a16:	781b      	ldrb	r3, [r3, #0]
   d5a18:	2b01      	cmp	r3, #1
   d5a1a:	d001      	beq.n	d5a20 <loop+0x52c>
   d5a1c:	f7ff f988 	bl	d4d30 <_Z22publishStateTransitionv>
   d5a20:	f001 fe60 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5a24:	4b20      	ldr	r3, [pc, #128]	; (d5aa8 <loop+0x5b4>)
   d5a26:	681b      	ldr	r3, [r3, #0]
   d5a28:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5a2c:	3330      	adds	r3, #48	; 0x30
   d5a2e:	4283      	cmp	r3, r0
   d5a30:	f4bf ae15 	bcs.w	d565e <loop+0x16a>
      if ((Time.now() - sysStatus.lastConnection) > 7200L) {           // It is been over two hours since we last connected to the cloud - time for a reset
   d5a34:	4d12      	ldr	r5, [pc, #72]	; (d5a80 <loop+0x58c>)
   d5a36:	f004 ffca 	bl	da9ce <_ZN9TimeClass3nowEv>
   d5a3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5a3c:	1ac0      	subs	r0, r0, r3
   d5a3e:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5a42:	462c      	mov	r4, r5
   d5a44:	d94e      	bls.n	d5ae4 <loop+0x5f0>
        sysStatus.lastConnection = Time.now() - 3600;                 // Wait an hour before we come back to this condition
   d5a46:	f004 ffc2 	bl	da9ce <_ZN9TimeClass3nowEv>
   d5a4a:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d5a4e:	6268      	str	r0, [r5, #36]	; 0x24
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d5a50:	462a      	mov	r2, r5
   d5a52:	2101      	movs	r1, #1
   d5a54:	4821      	ldr	r0, [pc, #132]	; (d5adc <loop+0x5e8>)
   d5a56:	f7ff fae6 	bl	d5026 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        Log.error("failed to connect to cloud, doing deep reset");
   d5a5a:	480b      	ldr	r0, [pc, #44]	; (d5a88 <loop+0x594>)
   d5a5c:	4920      	ldr	r1, [pc, #128]	; (d5ae0 <loop+0x5ec>)
   d5a5e:	f7fe fd0e 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
        delay(100);
   d5a62:	2064      	movs	r0, #100	; 0x64
   d5a64:	f002 f9ae 	bl	d7dc4 <delay>
        fullModemReset();                                             // Full Modem reset and reboot
   d5a68:	f7ff f9a0 	bl	d4dac <_Z14fullModemResetv>
   d5a6c:	e5f7      	b.n	d565e <loop+0x16a>
   d5a6e:	bf00      	nop
   d5a70:	2003e4fc 	.word	0x2003e4fc
   d5a74:	2003e427 	.word	0x2003e427
   d5a78:	2003e428 	.word	0x2003e428
   d5a7c:	2003e59c 	.word	0x2003e59c
   d5a80:	2003e548 	.word	0x2003e548
   d5a84:	000ddef9 	.word	0x000ddef9
   d5a88:	2003e5e0 	.word	0x2003e5e0
   d5a8c:	2003e480 	.word	0x2003e480
   d5a90:	2003e10c 	.word	0x2003e10c
   d5a94:	000ddf33 	.word	0x000ddf33
   d5a98:	2003e425 	.word	0x2003e425
   d5a9c:	000ddf48 	.word	0x000ddf48
   d5aa0:	2003e500 	.word	0x2003e500
   d5aa4:	2003e4fd 	.word	0x2003e4fd
   d5aa8:	2003e538 	.word	0x2003e538
   d5aac:	000ddf15 	.word	0x000ddf15
   d5ab0:	000ddf51 	.word	0x000ddf51
   d5ab4:	2003e424 	.word	0x2003e424
   d5ab8:	000ddf71 	.word	0x000ddf71
   d5abc:	000ddf7a 	.word	0x000ddf7a
   d5ac0:	000ddf8a 	.word	0x000ddf8a
   d5ac4:	2003e4c4 	.word	0x2003e4c4
   d5ac8:	2003e584 	.word	0x2003e584
   d5acc:	2003e4ab 	.word	0x2003e4ab
   d5ad0:	2003e540 	.word	0x2003e540
   d5ad4:	00015f90 	.word	0x00015f90
   d5ad8:	2003e544 	.word	0x2003e544
   d5adc:	2003e4ac 	.word	0x2003e4ac
   d5ae0:	000ddf9d 	.word	0x000ddf9d
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) {     //It has been more than two hours since a sucessful hook response
   d5ae4:	f004 ff73 	bl	da9ce <_ZN9TimeClass3nowEv>
   d5ae8:	6a2b      	ldr	r3, [r5, #32]
   d5aea:	1ac0      	subs	r0, r0, r3
   d5aec:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5af0:	78eb      	ldrb	r3, [r5, #3]
   d5af2:	d919      	bls.n	d5b28 <loop+0x634>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);  // Broadcast Reset Action
   d5af4:	b153      	cbz	r3, d5b0c <loop+0x618>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d5af6:	4b25      	ldr	r3, [pc, #148]	; (d5b8c <loop+0x698>)
   d5af8:	4a25      	ldr	r2, [pc, #148]	; (d5b90 <loop+0x69c>)
   d5afa:	781b      	ldrb	r3, [r3, #0]
   d5afc:	f88d 3000 	strb.w	r3, [sp]
   d5b00:	4b24      	ldr	r3, [pc, #144]	; (d5b94 <loop+0x6a0>)
   d5b02:	4925      	ldr	r1, [pc, #148]	; (d5b98 <loop+0x6a4>)
   d5b04:	781b      	ldrb	r3, [r3, #0]
   d5b06:	4825      	ldr	r0, [pc, #148]	; (d5b9c <loop+0x6a8>)
   d5b08:	f7fe fcd0 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);                                                  // Time to publish
   d5b0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5b10:	f002 f958 	bl	d7dc4 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5b14:	2300      	movs	r3, #0
   d5b16:	6123      	str	r3, [r4, #16]
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d5b18:	f004 ff59 	bl	da9ce <_ZN9TimeClass3nowEv>
        systemStatusWriteNeeded=true;
   d5b1c:	2301      	movs	r3, #1
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d5b1e:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d5b22:	6220      	str	r0, [r4, #32]
        systemStatusWriteNeeded=true;
   d5b24:	703b      	strb	r3, [r7, #0]
   d5b26:	e79f      	b.n	d5a68 <loop+0x574>
      else if (sysStatus.resetCount <= 3) {                                // First try simple reset
   d5b28:	692a      	ldr	r2, [r5, #16]
   d5b2a:	2a03      	cmp	r2, #3
   d5b2c:	dc12      	bgt.n	d5b54 <loop+0x660>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - System Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d5b2e:	b153      	cbz	r3, d5b46 <loop+0x652>
   d5b30:	4b16      	ldr	r3, [pc, #88]	; (d5b8c <loop+0x698>)
   d5b32:	4a1b      	ldr	r2, [pc, #108]	; (d5ba0 <loop+0x6ac>)
   d5b34:	781b      	ldrb	r3, [r3, #0]
   d5b36:	f88d 3000 	strb.w	r3, [sp]
   d5b3a:	4b16      	ldr	r3, [pc, #88]	; (d5b94 <loop+0x6a0>)
   d5b3c:	4916      	ldr	r1, [pc, #88]	; (d5b98 <loop+0x6a4>)
   d5b3e:	781b      	ldrb	r3, [r3, #0]
   d5b40:	4816      	ldr	r0, [pc, #88]	; (d5b9c <loop+0x6a8>)
   d5b42:	f7fe fcb3 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5b46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5b4a:	f002 f93b 	bl	d7dc4 <delay>
        System.reset();
   d5b4e:	f004 fcc1 	bl	da4d4 <_ZN11SystemClass5resetEv>
   d5b52:	e584      	b.n	d565e <loop+0x16a>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcase Reset Action
   d5b54:	b153      	cbz	r3, d5b6c <loop+0x678>
   d5b56:	4b0d      	ldr	r3, [pc, #52]	; (d5b8c <loop+0x698>)
   d5b58:	4a0d      	ldr	r2, [pc, #52]	; (d5b90 <loop+0x69c>)
   d5b5a:	781b      	ldrb	r3, [r3, #0]
   d5b5c:	f88d 3000 	strb.w	r3, [sp]
   d5b60:	4b0c      	ldr	r3, [pc, #48]	; (d5b94 <loop+0x6a0>)
   d5b62:	490d      	ldr	r1, [pc, #52]	; (d5b98 <loop+0x6a4>)
   d5b64:	781b      	ldrb	r3, [r3, #0]
   d5b66:	480d      	ldr	r0, [pc, #52]	; (d5b9c <loop+0x6a8>)
   d5b68:	f7fe fca0 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5b6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5b70:	f002 f928 	bl	d7dc4 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5b74:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d5b76:	4a0b      	ldr	r2, [pc, #44]	; (d5ba4 <loop+0x6b0>)
   d5b78:	480b      	ldr	r0, [pc, #44]	; (d5ba8 <loop+0x6b4>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5b7a:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d5b7c:	2101      	movs	r1, #1
   d5b7e:	f7ff fa52 	bl	d5026 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        ab1805.deepPowerDown();                                       // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d5b82:	211e      	movs	r1, #30
   d5b84:	4809      	ldr	r0, [pc, #36]	; (d5bac <loop+0x6b8>)
   d5b86:	f000 fd75 	bl	d6674 <_ZN6AB180513deepPowerDownEi>
   d5b8a:	e568      	b.n	d565e <loop+0x16a>
   d5b8c:	2003e426 	.word	0x2003e426
   d5b90:	000ddfca 	.word	0x000ddfca
   d5b94:	2003e425 	.word	0x2003e425
   d5b98:	000ddfe9 	.word	0x000ddfe9
   d5b9c:	2003e500 	.word	0x2003e500
   d5ba0:	000ddfef 	.word	0x000ddfef
   d5ba4:	2003e548 	.word	0x2003e548
   d5ba8:	2003e4ac 	.word	0x2003e4ac
   d5bac:	2003e42c 	.word	0x2003e42c

000d5bb0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5bb0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bb4:	4604      	mov	r4, r0
   d5bb6:	460d      	mov	r5, r1
   d5bb8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5bba:	d916      	bls.n	d5bea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5bbc:	4290      	cmp	r0, r2
   d5bbe:	d215      	bcs.n	d5bec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d5bc0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d5bc4:	1a75      	subs	r5, r6, r1
   d5bc6:	f1a1 0714 	sub.w	r7, r1, #20
   d5bca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5bcc:	42b7      	cmp	r7, r6
   d5bce:	d01c      	beq.n	d5c0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d5bd0:	b12c      	cbz	r4, d5bde <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d5bd2:	4631      	mov	r1, r6
   d5bd4:	4620      	mov	r0, r4
   d5bd6:	f004 fb9f 	bl	da318 <_ZN6StringC1EOS_>
   d5bda:	7c33      	ldrb	r3, [r6, #16]
   d5bdc:	7423      	strb	r3, [r4, #16]
   d5bde:	4630      	mov	r0, r6
   d5be0:	f004 fb1e 	bl	da220 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5be4:	3e14      	subs	r6, #20
   d5be6:	3c14      	subs	r4, #20
   d5be8:	e7f0      	b.n	d5bcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5bea:	d00e      	beq.n	d5c0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5bec:	42b5      	cmp	r5, r6
   d5bee:	d00c      	beq.n	d5c0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d5bf0:	b12c      	cbz	r4, d5bfe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d5bf2:	4629      	mov	r1, r5
   d5bf4:	4620      	mov	r0, r4
   d5bf6:	f004 fb8f 	bl	da318 <_ZN6StringC1EOS_>
   d5bfa:	7c2b      	ldrb	r3, [r5, #16]
   d5bfc:	7423      	strb	r3, [r4, #16]
   d5bfe:	4628      	mov	r0, r5
   d5c00:	f004 fb0e 	bl	da220 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5c04:	3514      	adds	r5, #20
   d5c06:	3414      	adds	r4, #20
   d5c08:	e7f0      	b.n	d5bec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d5c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d5c10:	2300      	movs	r3, #0
   d5c12:	e9c0 3300 	strd	r3, r3, [r0]
   d5c16:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5c18:	684f      	ldr	r7, [r1, #4]
   d5c1a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5c1c:	4604      	mov	r4, r0
   d5c1e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5c20:	dd23      	ble.n	d5c6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d5c22:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d5c26:	fb08 f007 	mul.w	r0, r8, r7
   d5c2a:	f002 f857 	bl	d7cdc <malloc>
            if (!d) {
   d5c2e:	4605      	mov	r5, r0
   d5c30:	b1d8      	cbz	r0, d5c6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d5c32:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5c36:	fb08 1202 	mla	r2, r8, r2, r1
   d5c3a:	f7ff ffb9 	bl	d5bb0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5c3e:	6820      	ldr	r0, [r4, #0]
   d5c40:	f002 f854 	bl	d7cec <free>
        data_ = d;
   d5c44:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5c46:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5c48:	e9d6 7300 	ldrd	r7, r3, [r6]
   d5c4c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d5c50:	45b8      	cmp	r8, r7
   d5c52:	d008      	beq.n	d5c66 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d5c54:	4639      	mov	r1, r7
   d5c56:	4628      	mov	r0, r5
   d5c58:	f004 fb78 	bl	da34c <_ZN6StringC1ERKS_>
   d5c5c:	7c3b      	ldrb	r3, [r7, #16]
   d5c5e:	742b      	strb	r3, [r5, #16]
   d5c60:	3714      	adds	r7, #20
   d5c62:	3514      	adds	r5, #20
   d5c64:	e7f4      	b.n	d5c50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5c66:	6873      	ldr	r3, [r6, #4]
   d5c68:	6063      	str	r3, [r4, #4]
}
   d5c6a:	4620      	mov	r0, r4
   d5c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5c70 <_GLOBAL__sub_I___appProductID>:
        val_(val) {
   d5c70:	4b79      	ldr	r3, [pc, #484]	; (d5e58 <_GLOBAL__sub_I___appProductID+0x1e8>)
   d5c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c76:	2400      	movs	r4, #0
   d5c78:	601c      	str	r4, [r3, #0]
   d5c7a:	4b78      	ldr	r3, [pc, #480]	; (d5e5c <_GLOBAL__sub_I___appProductID+0x1ec>)
              error_(SYSTEM_ERROR_NONE) {
   d5c7c:	4d78      	ldr	r5, [pc, #480]	; (d5e60 <_GLOBAL__sub_I___appProductID+0x1f0>)
   d5c7e:	701c      	strb	r4, [r3, #0]
   d5c80:	4b78      	ldr	r3, [pc, #480]	; (d5e64 <_GLOBAL__sub_I___appProductID+0x1f4>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5c82:	4e79      	ldr	r6, [pc, #484]	; (d5e68 <_GLOBAL__sub_I___appProductID+0x1f8>)
   d5c84:	f04f 0901 	mov.w	r9, #1
   d5c88:	f883 9000 	strb.w	r9, [r3]
   d5c8c:	4b77      	ldr	r3, [pc, #476]	; (d5e6c <_GLOBAL__sub_I___appProductID+0x1fc>)
   d5c8e:	2208      	movs	r2, #8
   d5c90:	b091      	sub	sp, #68	; 0x44
   d5c92:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5c94:	f005 f892 	bl	dadbc <spark_protocol_instance>
   d5c98:	4623      	mov	r3, r4
   d5c9a:	4622      	mov	r2, r4
   d5c9c:	210d      	movs	r1, #13
   d5c9e:	f005 f895 	bl	dadcc <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5ca2:	f005 f88b 	bl	dadbc <spark_protocol_instance>
   d5ca6:	4623      	mov	r3, r4
   d5ca8:	4622      	mov	r2, r4
   d5caa:	2102      	movs	r1, #2
   d5cac:	f005 f896 	bl	daddc <spark_protocol_set_product_firmware_version>
struct currentStatus_structure {                    // currently 10 bytes long
   d5cb0:	4b6f      	ldr	r3, [pc, #444]	; (d5e70 <_GLOBAL__sub_I___appProductID+0x200>)
   d5cb2:	602c      	str	r4, [r5, #0]
   d5cb4:	2264      	movs	r2, #100	; 0x64
   d5cb6:	831c      	strh	r4, [r3, #24]
   d5cb8:	61da      	str	r2, [r3, #28]
    SleepResult() {}
   d5cba:	4b6e      	ldr	r3, [pc, #440]	; (d5e74 <_GLOBAL__sub_I___appProductID+0x204>)
   d5cbc:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5cbe:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d5cc0:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d5cc2:	2002      	movs	r0, #2
   d5cc4:	f001 fec0 	bl	d7a48 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5cc8:	4632      	mov	r2, r6
   d5cca:	496b      	ldr	r1, [pc, #428]	; (d5e78 <_GLOBAL__sub_I___appProductID+0x208>)
   d5ccc:	4628      	mov	r0, r5
   d5cce:	f005 f99f 	bl	db010 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5cd2:	4621      	mov	r1, r4
   d5cd4:	4648      	mov	r0, r9
   d5cd6:	f001 fed7 	bl	d7a88 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5cda:	4649      	mov	r1, r9
   d5cdc:	2004      	movs	r0, #4
   d5cde:	f001 fcd9 	bl	d7694 <HAL_Feature_Set>
        : config_(config) {
   d5ce2:	4866      	ldr	r0, [pc, #408]	; (d5e7c <_GLOBAL__sub_I___appProductID+0x20c>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5ce4:	4966      	ldr	r1, [pc, #408]	; (d5e80 <_GLOBAL__sub_I___appProductID+0x210>)
              valid_(true) {
   d5ce6:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5cea:	4603      	mov	r3, r0
   d5cec:	1d02      	adds	r2, r0, #4
   d5cee:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5cf2:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5cf4:	4b63      	ldr	r3, [pc, #396]	; (d5e84 <_GLOBAL__sub_I___appProductID+0x214>)
   d5cf6:	6043      	str	r3, [r0, #4]
   d5cf8:	4632      	mov	r2, r6
        config_.wakeup_sources = nullptr;
   d5cfa:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d5cfe:	f880 9014 	strb.w	r9, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5d02:	7204      	strb	r4, [r0, #8]
   d5d04:	f005 f984 	bl	db010 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5d08:	f005 f932 	bl	daf70 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5d0c:	4d5e      	ldr	r5, [pc, #376]	; (d5e88 <_GLOBAL__sub_I___appProductID+0x218>)
   d5d0e:	4601      	mov	r1, r0
   d5d10:	4623      	mov	r3, r4
   d5d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5d16:	4628      	mov	r0, r5
   d5d18:	f000 ffae 	bl	d6c78 <_ZN6MB85RCC1ER7TwoWireji>
   d5d1c:	4b5b      	ldr	r3, [pc, #364]	; (d5e8c <_GLOBAL__sub_I___appProductID+0x21c>)
   d5d1e:	602b      	str	r3, [r5, #0]
   d5d20:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5d22:	4d5b      	ldr	r5, [pc, #364]	; (d5e90 <_GLOBAL__sub_I___appProductID+0x220>)
   d5d24:	495b      	ldr	r1, [pc, #364]	; (d5e94 <_GLOBAL__sub_I___appProductID+0x224>)
   d5d26:	4632      	mov	r2, r6
   d5d28:	f005 f972 	bl	db010 <__aeabi_atexit>
   d5d2c:	495a      	ldr	r1, [pc, #360]	; (d5e98 <_GLOBAL__sub_I___appProductID+0x228>)
   d5d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5d32:	4628      	mov	r0, r5
   d5d34:	f001 fa84 	bl	d7240 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5d38:	4b58      	ldr	r3, [pc, #352]	; (d5e9c <_GLOBAL__sub_I___appProductID+0x22c>)
   d5d3a:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5d3c:	4632      	mov	r2, r6
   d5d3e:	4958      	ldr	r1, [pc, #352]	; (d5ea0 <_GLOBAL__sub_I___appProductID+0x230>)
   d5d40:	4628      	mov	r0, r5
   d5d42:	f005 f965 	bl	db010 <__aeabi_atexit>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d5d46:	f005 f913 	bl	daf70 <_Z19__fetch_global_Wirev>
   d5d4a:	4d56      	ldr	r5, [pc, #344]	; (d5ea4 <_GLOBAL__sub_I___appProductID+0x234>)
   d5d4c:	4601      	mov	r1, r0
   d5d4e:	2269      	movs	r2, #105	; 0x69
   d5d50:	4628      	mov	r0, r5
   d5d52:	f000 fa37 	bl	d61c4 <_ZN6AB1805C1ER7TwoWireh>
   d5d56:	4628      	mov	r0, r5
FuelGauge fuel;                                     // Enable the fuel gauge API                        
   d5d58:	4d53      	ldr	r5, [pc, #332]	; (d5ea8 <_GLOBAL__sub_I___appProductID+0x238>)
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d5d5a:	4954      	ldr	r1, [pc, #336]	; (d5eac <_GLOBAL__sub_I___appProductID+0x23c>)
   d5d5c:	4632      	mov	r2, r6
   d5d5e:	f005 f957 	bl	db010 <__aeabi_atexit>
FuelGauge fuel;                                     // Enable the fuel gauge API                        
   d5d62:	4621      	mov	r1, r4
   d5d64:	4628      	mov	r0, r5
   d5d66:	f002 fcdb 	bl	d8720 <_ZN9FuelGaugeC1Eb>
   d5d6a:	4632      	mov	r2, r6
   d5d6c:	4950      	ldr	r1, [pc, #320]	; (d5eb0 <_GLOBAL__sub_I___appProductID+0x240>)
   d5d6e:	4628      	mov	r0, r5
   d5d70:	f005 f94e 	bl	db010 <__aeabi_atexit>
        capacity_(0) {
   d5d74:	e9cd 4403 	strd	r4, r4, [sp, #12]
   d5d78:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   d5d7a:	f004 ff63 	bl	dac44 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d5d7e:	4d4d      	ldr	r5, [pc, #308]	; (d5eb4 <_GLOBAL__sub_I___appProductID+0x244>)
        stream_(&stream) {
   d5d80:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   d5d84:	4682      	mov	sl, r0
   d5d86:	a903      	add	r1, sp, #12
   d5d88:	a806      	add	r0, sp, #24
   d5d8a:	f7ff ff3f 	bl	d5c0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5d8e:	46ab      	mov	fp, r5
        stream_(&stream) {
   d5d90:	a906      	add	r1, sp, #24
   d5d92:	4640      	mov	r0, r8
   d5d94:	f7ff ff3a 	bl	d5c0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5d98:	4b47      	ldr	r3, [pc, #284]	; (d5eb8 <_GLOBAL__sub_I___appProductID+0x248>)
   d5d9a:	f84b 3b04 	str.w	r3, [fp], #4
   d5d9e:	af0c      	add	r7, sp, #48	; 0x30
   d5da0:	4641      	mov	r1, r8
   d5da2:	4638      	mov	r0, r7
   d5da4:	f7ff ff32 	bl	d5c0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5da8:	463a      	mov	r2, r7
   d5daa:	4649      	mov	r1, r9
   d5dac:	4658      	mov	r0, fp
   d5dae:	f003 fd0d 	bl	d97cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5db2:	4638      	mov	r0, r7
   d5db4:	f7ff f924 	bl	d5000 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5db8:	4640      	mov	r0, r8
   d5dba:	f7ff f921 	bl	d5000 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5dbe:	4b3f      	ldr	r3, [pc, #252]	; (d5ebc <_GLOBAL__sub_I___appProductID+0x24c>)
   d5dc0:	602b      	str	r3, [r5, #0]
   d5dc2:	f8c5 a020 	str.w	sl, [r5, #32]
   d5dc6:	a806      	add	r0, sp, #24
   d5dc8:	f7ff f91a 	bl	d5000 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5dcc:	4b3c      	ldr	r3, [pc, #240]	; (d5ec0 <_GLOBAL__sub_I___appProductID+0x250>)
   d5dce:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d5dd0:	f004 ff38 	bl	dac44 <_Z16_fetch_usbserialv>
   d5dd4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5dd8:	f004 ff24 	bl	dac24 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5ddc:	f003 f99e 	bl	d911c <_ZN5spark10LogManager8instanceEv>
   d5de0:	4629      	mov	r1, r5
   d5de2:	f003 fc85 	bl	d96f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ALL);
   d5de6:	a803      	add	r0, sp, #12
   d5de8:	f7ff f90a 	bl	d5000 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5dec:	4632      	mov	r2, r6
   d5dee:	4935      	ldr	r1, [pc, #212]	; (d5ec4 <_GLOBAL__sub_I___appProductID+0x254>)
   d5df0:	4628      	mov	r0, r5
   d5df2:	f005 f90d 	bl	db010 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5df6:	4b34      	ldr	r3, [pc, #208]	; (d5ec8 <_GLOBAL__sub_I___appProductID+0x258>)
   d5df8:	930c      	str	r3, [sp, #48]	; 0x30
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5dfa:	4d34      	ldr	r5, [pc, #208]	; (d5ecc <_GLOBAL__sub_I___appProductID+0x25c>)
   d5dfc:	4b34      	ldr	r3, [pc, #208]	; (d5ed0 <_GLOBAL__sub_I___appProductID+0x260>)
   d5dfe:	602b      	str	r3, [r5, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e00:	e897 0003 	ldmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e04:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e08:	e888 0003 	stmia.w	r8, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e0c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e10:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5e14:	e898 0003 	ldmia.w	r8, {r0, r1}
   d5e18:	e883 0003 	stmia.w	r3, {r0, r1}
   d5e1c:	4b2d      	ldr	r3, [pc, #180]	; (d5ed4 <_GLOBAL__sub_I___appProductID+0x264>)
   d5e1e:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5e20:	69ab      	ldr	r3, [r5, #24]
   d5e22:	930f      	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5e24:	4b2c      	ldr	r3, [pc, #176]	; (d5ed8 <_GLOBAL__sub_I___appProductID+0x268>)
   d5e26:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5e28:	4a2c      	ldr	r2, [pc, #176]	; (d5edc <_GLOBAL__sub_I___appProductID+0x26c>)
   d5e2a:	492d      	ldr	r1, [pc, #180]	; (d5ee0 <_GLOBAL__sub_I___appProductID+0x270>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5e2c:	712c      	strb	r4, [r5, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5e2e:	462b      	mov	r3, r5
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5e30:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5e32:	f105 0008 	add.w	r0, r5, #8
   d5e36:	e9cd 9400 	strd	r9, r4, [sp]
      __a = _GLIBCXX_MOVE(__b);
   d5e3a:	940e      	str	r4, [sp, #56]	; 0x38
   d5e3c:	f001 fbc2 	bl	d75c4 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5e40:	4638      	mov	r0, r7
   d5e42:	f7fe fa59 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
Timer awakeTimer(1800000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d5e46:	4927      	ldr	r1, [pc, #156]	; (d5ee4 <_GLOBAL__sub_I___appProductID+0x274>)
   d5e48:	4632      	mov	r2, r6
   d5e4a:	4628      	mov	r0, r5
   d5e4c:	f005 f8e0 	bl	db010 <__aeabi_atexit>
   d5e50:	b011      	add	sp, #68	; 0x44
   d5e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5e56:	bf00      	nop
   d5e58:	2003e420 	.word	0x2003e420
   d5e5c:	2003e424 	.word	0x2003e424
   d5e60:	2003e414 	.word	0x2003e414
   d5e64:	2003e425 	.word	0x2003e425
   d5e68:	2003e3d0 	.word	0x2003e3d0
   d5e6c:	2003e426 	.word	0x2003e426
   d5e70:	2003e480 	.word	0x2003e480
   d5e74:	ffff0000 	.word	0xffff0000
   d5e78:	000d42dd 	.word	0x000d42dd
   d5e7c:	2003e468 	.word	0x2003e468
   d5e80:	000d4131 	.word	0x000d4131
   d5e84:	00030010 	.word	0x00030010
   d5e88:	2003e4ac 	.word	0x2003e4ac
   d5e8c:	000de07c 	.word	0x000de07c
   d5e90:	2003e500 	.word	0x2003e500
   d5e94:	000d4199 	.word	0x000d4199
   d5e98:	2003f400 	.word	0x2003f400
   d5e9c:	000de098 	.word	0x000de098
   d5ea0:	000d4171 	.word	0x000d4171
   d5ea4:	2003e42c 	.word	0x2003e42c
   d5ea8:	2003e4bc 	.word	0x2003e4bc
   d5eac:	000d6185 	.word	0x000d6185
   d5eb0:	000d8741 	.word	0x000d8741
   d5eb4:	2003e4c8 	.word	0x2003e4c8
   d5eb8:	000de04c 	.word	0x000de04c
   d5ebc:	000de798 	.word	0x000de798
   d5ec0:	000de064 	.word	0x000de064
   d5ec4:	000d4295 	.word	0x000d4295
   d5ec8:	000d40e1 	.word	0x000d40e1
   d5ecc:	2003e44c 	.word	0x2003e44c
   d5ed0:	000de038 	.word	0x000de038
   d5ed4:	000d40f9 	.word	0x000d40f9
   d5ed8:	000d40f5 	.word	0x000d40f5
   d5edc:	000d41c1 	.word	0x000d41c1
   d5ee0:	001b7740 	.word	0x001b7740
   d5ee4:	000d430d 	.word	0x000d430d

000d5ee8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d5ee8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5eea:	2000      	movs	r0, #0
   d5eec:	f001 fe6e 	bl	d7bcc <spark_sync_time_pending>
   d5ef0:	b128      	cbz	r0, d5efe <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5ef2:	f001 fe43 	bl	d7b7c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5ef6:	f080 0001 	eor.w	r0, r0, #1
   d5efa:	b2c0      	uxtb	r0, r0
    }
   d5efc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5efe:	2001      	movs	r0, #1
   d5f00:	e7fc      	b.n	d5efc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
   d5f02:	0000      	movs	r0, r0
   d5f04:	0000      	movs	r0, r0
	...

000d5f08 <_Z11setTimeZone6String>:
 * Values outside this range will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if successful, 0 if invalid command
 */
int setTimeZone(String command)
{
   d5f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5f0c:	b0c8      	sub	sp, #288	; 0x120
   d5f0e:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5f10:	f001 fe34 	bl	d7b7c <spark_cloud_flag_connected>
        if (!connected()) {
   d5f14:	b110      	cbz	r0, d5f1c <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d5f16:	2000      	movs	r0, #0
   d5f18:	f001 fe50 	bl	d7bbc <spark_sync_time>
        return hal_timer_millis(nullptr);
   d5f1c:	2000      	movs	r0, #0
   d5f1e:	f001 fbf1 	bl	d7704 <hal_timer_millis>
   d5f22:	f04f 0a00 	mov.w	sl, #0
   d5f26:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d5f28:	f247 562f 	movw	r6, #29999	; 0x752f
   d5f2c:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d5f2e:	2000      	movs	r0, #0
   d5f30:	f001 fbe8 	bl	d7704 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5f34:	ebb0 0409 	subs.w	r4, r0, r9
   d5f38:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d5f3c:	42af      	cmp	r7, r5
   d5f3e:	bf08      	it	eq
   d5f40:	42a6      	cmpeq	r6, r4
   d5f42:	d305      	bcc.n	d5f50 <_Z11setTimeZone6String+0x48>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d5f44:	f7ff ffd0 	bl	d5ee8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5f48:	b910      	cbnz	r0, d5f50 <_Z11setTimeZone6String+0x48>
            spark_process();
   d5f4a:	f001 fe07 	bl	d7b5c <spark_process>
        while (_while() && !_condition()) {
   d5f4e:	e7ee      	b.n	d5f2e <_Z11setTimeZone6String+0x26>
   d5f50:	f7ff ffca 	bl	d5ee8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d5f54:	f8d8 0000 	ldr.w	r0, [r8]
   d5f58:	220a      	movs	r2, #10
   d5f5a:	a903      	add	r1, sp, #12
   d5f5c:	f006 fdde 	bl	dcb1c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d5f60:	f100 030c 	add.w	r3, r0, #12
   d5f64:	b2db      	uxtb	r3, r3
   d5f66:	2b18      	cmp	r3, #24
   d5f68:	d848      	bhi.n	d5ffc <_Z11setTimeZone6String+0xf4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d5f6a:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d5f6c:	ee07 5a90 	vmov	s15, r5
   d5f70:	4b27      	ldr	r3, [pc, #156]	; (d6010 <_Z11setTimeZone6String+0x108>)
   d5f72:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d5f76:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d5f78:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d5f7c:	f004 fbbe 	bl	da6fc <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d5f80:	4b24      	ldr	r3, [pc, #144]	; (d6014 <_Z11setTimeZone6String+0x10c>)
   d5f82:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d5f84:	f004 fd5c 	bl	daa40 <_ZN9TimeClass5localEv>
   d5f88:	4606      	mov	r6, r0
   d5f8a:	f004 fd20 	bl	da9ce <_ZN9TimeClass3nowEv>
   d5f8e:	1a30      	subs	r0, r6, r0
   d5f90:	f005 f99e 	bl	db2d0 <__aeabi_i2d>
   d5f94:	a31c      	add	r3, pc, #112	; (adr r3, d6008 <_Z11setTimeZone6String+0x100>)
   d5f96:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f9a:	f005 fb2d 	bl	db5f8 <__aeabi_ddiv>
   d5f9e:	4a1e      	ldr	r2, [pc, #120]	; (d6018 <_Z11setTimeZone6String+0x110>)
   d5fa0:	e9cd 0100 	strd	r0, r1, [sp]
   d5fa4:	210a      	movs	r1, #10
   d5fa6:	481d      	ldr	r0, [pc, #116]	; (d601c <_Z11setTimeZone6String+0x114>)
   d5fa8:	f001 feb8 	bl	d7d1c <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5fac:	f001 fde6 	bl	d7b7c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d5fb0:	b310      	cbz	r0, d5ff8 <_Z11setTimeZone6String+0xf0>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d5fb2:	462b      	mov	r3, r5
   d5fb4:	4a1a      	ldr	r2, [pc, #104]	; (d6020 <_Z11setTimeZone6String+0x118>)
   d5fb6:	4d1b      	ldr	r5, [pc, #108]	; (d6024 <_Z11setTimeZone6String+0x11c>)
   d5fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
        val_(0) {
   d5fbc:	2600      	movs	r6, #0
   d5fbe:	a808      	add	r0, sp, #32
   d5fc0:	f001 feac 	bl	d7d1c <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d5fc4:	f88d 6000 	strb.w	r6, [sp]
   d5fc8:	4917      	ldr	r1, [pc, #92]	; (d6028 <_Z11setTimeZone6String+0x120>)
   d5fca:	782b      	ldrb	r3, [r5, #0]
   d5fcc:	4817      	ldr	r0, [pc, #92]	; (d602c <_Z11setTimeZone6String+0x124>)
   d5fce:	aa08      	add	r2, sp, #32
   d5fd0:	f7fe fa6c 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d5fd4:	f004 fcfb 	bl	da9ce <_ZN9TimeClass3nowEv>
   d5fd8:	4602      	mov	r2, r0
   d5fda:	17c3      	asrs	r3, r0, #31
   d5fdc:	a804      	add	r0, sp, #16
   d5fde:	f004 fbf3 	bl	da7c8 <_ZN9TimeClass7timeStrEx>
   d5fe2:	f88d 6000 	strb.w	r6, [sp]
   d5fe6:	782b      	ldrb	r3, [r5, #0]
   d5fe8:	9a04      	ldr	r2, [sp, #16]
   d5fea:	490f      	ldr	r1, [pc, #60]	; (d6028 <_Z11setTimeZone6String+0x120>)
   d5fec:	480f      	ldr	r0, [pc, #60]	; (d602c <_Z11setTimeZone6String+0x124>)
   d5fee:	f7fe fa5d 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5ff2:	a804      	add	r0, sp, #16
   d5ff4:	f004 f914 	bl	da220 <_ZN6StringD1Ev>
  }

  return 1;
   d5ff8:	4620      	mov	r0, r4
   d5ffa:	e000      	b.n	d5ffe <_Z11setTimeZone6String+0xf6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d5ffc:	2000      	movs	r0, #0
}
   d5ffe:	b048      	add	sp, #288	; 0x120
   d6000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6004:	f3af 8000 	nop.w
   d6008:	00000000 	.word	0x00000000
   d600c:	40ac2000 	.word	0x40ac2000
   d6010:	2003e548 	.word	0x2003e548
   d6014:	2003e578 	.word	0x2003e578
   d6018:	000ddeef 	.word	0x000ddeef
   d601c:	2003e4a1 	.word	0x2003e4a1
   d6020:	000de0e4 	.word	0x000de0e4
   d6024:	2003e588 	.word	0x2003e588
   d6028:	000dde36 	.word	0x000dde36
   d602c:	2003e500 	.word	0x2003e500

000d6030 <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d6030:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d6032:	f004 fce9 	bl	daa08 <_ZN9TimeClass3dayEv>
   d6036:	4605      	mov	r5, r0
  int month = Time.month();
   d6038:	f004 fcfa 	bl	daa30 <_ZN9TimeClass5monthEv>
   d603c:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d603e:	f004 fcef 	bl	daa20 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d6042:	1f23      	subs	r3, r4, #4
   d6044:	2b06      	cmp	r3, #6
   d6046:	d90e      	bls.n	d6066 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d6048:	1ee3      	subs	r3, r4, #3
   d604a:	2b08      	cmp	r3, #8
   d604c:	d80d      	bhi.n	d606a <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d604e:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d6050:	1a2d      	subs	r5, r5, r0
   d6052:	d504      	bpl.n	d605e <_Z8isDSTusav+0x2e>
   d6054:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6056:	bf14      	ite	ne
   d6058:	2000      	movne	r0, #0
   d605a:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d605c:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d605e:	2d07      	cmp	r5, #7
   d6060:	dd03      	ble.n	d606a <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6062:	2c03      	cmp	r4, #3
   d6064:	e7f7      	b.n	d6056 <_Z8isDSTusav+0x26>
    return true;
   d6066:	2001      	movs	r0, #1
   d6068:	e7f8      	b.n	d605c <_Z8isDSTusav+0x2c>
    return false;
   d606a:	2000      	movs	r0, #0
   d606c:	e7f6      	b.n	d605c <_Z8isDSTusav+0x2c>
	...

000d6070 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d6070:	b570      	push	{r4, r5, r6, lr}
   d6072:	ed2d 8b02 	vpush	{d8}
   d6076:	b0c8      	sub	sp, #288	; 0x120
   d6078:	4605      	mov	r5, r0
  time_t t = Time.now();
   d607a:	f004 fca8 	bl	da9ce <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d607e:	220a      	movs	r2, #10
  time_t t = Time.now();
   d6080:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d6082:	a903      	add	r1, sp, #12
   d6084:	6828      	ldr	r0, [r5, #0]
   d6086:	f006 fd49 	bl	dcb1c <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d608a:	b2c3      	uxtb	r3, r0
   d608c:	2b02      	cmp	r3, #2
   d608e:	d859      	bhi.n	d6144 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d6090:	b243      	sxtb	r3, r0
   d6092:	ee08 3a10 	vmov	s16, r3
   d6096:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d609a:	eeb0 0a48 	vmov.f32	s0, s16
   d609e:	f004 fb4d 	bl	da73c <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d60a2:	4b2d      	ldr	r3, [pc, #180]	; (d6158 <_Z12setDSTOffset6String+0xe8>)
   d60a4:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d60a8:	4b2c      	ldr	r3, [pc, #176]	; (d615c <_Z12setDSTOffset6String+0xec>)
   d60aa:	2201      	movs	r2, #1
   d60ac:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d60ae:	ee18 0a10 	vmov	r0, s16
   d60b2:	f005 f91f 	bl	db2f4 <__aeabi_f2d>
   d60b6:	4a2a      	ldr	r2, [pc, #168]	; (d6160 <_Z12setDSTOffset6String+0xf0>)
   d60b8:	e9cd 0100 	strd	r0, r1, [sp]
   d60bc:	f44f 7180 	mov.w	r1, #256	; 0x100
   d60c0:	a808      	add	r0, sp, #32
   d60c2:	f001 fe2b 	bl	d7d1c <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d60c6:	f004 fc65 	bl	da994 <_ZN9TimeClass7isValidEv>
   d60ca:	b128      	cbz	r0, d60d8 <_Z12setDSTOffset6String+0x68>
   d60cc:	f7ff ffb0 	bl	d6030 <_Z8isDSTusav>
   d60d0:	2800      	cmp	r0, #0
   d60d2:	d034      	beq.n	d613e <_Z12setDSTOffset6String+0xce>
   d60d4:	f004 fb50 	bl	da778 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d60d8:	f004 fcb2 	bl	daa40 <_ZN9TimeClass5localEv>
   d60dc:	4605      	mov	r5, r0
   d60de:	f004 fc76 	bl	da9ce <_ZN9TimeClass3nowEv>
   d60e2:	1a28      	subs	r0, r5, r0
   d60e4:	f005 f8f4 	bl	db2d0 <__aeabi_i2d>
   d60e8:	a319      	add	r3, pc, #100	; (adr r3, d6150 <_Z12setDSTOffset6String+0xe0>)
   d60ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60ee:	f005 fa83 	bl	db5f8 <__aeabi_ddiv>
   d60f2:	4a1c      	ldr	r2, [pc, #112]	; (d6164 <_Z12setDSTOffset6String+0xf4>)
   d60f4:	e9cd 0100 	strd	r0, r1, [sp]
   d60f8:	210a      	movs	r1, #10
   d60fa:	481b      	ldr	r0, [pc, #108]	; (d6168 <_Z12setDSTOffset6String+0xf8>)
   d60fc:	f001 fe0e 	bl	d7d1c <snprintf>
   d6100:	f001 fd3c 	bl	d7b7c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d6104:	b1c8      	cbz	r0, d613a <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d6106:	4d19      	ldr	r5, [pc, #100]	; (d616c <_Z12setDSTOffset6String+0xfc>)
   d6108:	4919      	ldr	r1, [pc, #100]	; (d6170 <_Z12setDSTOffset6String+0x100>)
   d610a:	481a      	ldr	r0, [pc, #104]	; (d6174 <_Z12setDSTOffset6String+0x104>)
   d610c:	2600      	movs	r6, #0
   d610e:	f88d 6000 	strb.w	r6, [sp]
   d6112:	782b      	ldrb	r3, [r5, #0]
   d6114:	aa08      	add	r2, sp, #32
   d6116:	f7fe f9c9 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d611a:	4622      	mov	r2, r4
   d611c:	17e3      	asrs	r3, r4, #31
   d611e:	a804      	add	r0, sp, #16
   d6120:	f004 fb52 	bl	da7c8 <_ZN9TimeClass7timeStrEx>
   d6124:	f88d 6000 	strb.w	r6, [sp]
   d6128:	782b      	ldrb	r3, [r5, #0]
   d612a:	9a04      	ldr	r2, [sp, #16]
   d612c:	4910      	ldr	r1, [pc, #64]	; (d6170 <_Z12setDSTOffset6String+0x100>)
   d612e:	4811      	ldr	r0, [pc, #68]	; (d6174 <_Z12setDSTOffset6String+0x104>)
   d6130:	f7fe f9bc 	bl	d44ac <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6134:	a804      	add	r0, sp, #16
   d6136:	f004 f873 	bl	da220 <_ZN6StringD1Ev>
  return 1;
   d613a:	2001      	movs	r0, #1
   d613c:	e003      	b.n	d6146 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d613e:	f004 fb27 	bl	da790 <_ZN9TimeClass6endDSTEv>
   d6142:	e7c9      	b.n	d60d8 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d6144:	2000      	movs	r0, #0
}
   d6146:	b048      	add	sp, #288	; 0x120
   d6148:	ecbd 8b02 	vpop	{d8}
   d614c:	bd70      	pop	{r4, r5, r6, pc}
   d614e:	bf00      	nop
   d6150:	00000000 	.word	0x00000000
   d6154:	40ac2000 	.word	0x40ac2000
   d6158:	2003e548 	.word	0x2003e548
   d615c:	2003e578 	.word	0x2003e578
   d6160:	000de0f8 	.word	0x000de0f8
   d6164:	000ddeef 	.word	0x000ddeef
   d6168:	2003e4a1 	.word	0x2003e4a1
   d616c:	2003e588 	.word	0x2003e588
   d6170:	000dde36 	.word	0x000dde36
   d6174:	2003e500 	.word	0x2003e500

000d6178 <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d6178:	4b01      	ldr	r3, [pc, #4]	; (d6180 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d617a:	2201      	movs	r2, #1
   d617c:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d617e:	4770      	bx	lr
   d6180:	2003e588 	.word	0x2003e588

000d6184 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d6184:	4770      	bx	lr

000d6186 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d6186:	b510      	push	{r4, lr}
}
   d6188:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d618a:	4604      	mov	r4, r0
}
   d618c:	f004 ff45 	bl	db01a <_ZdlPvj>
   d6190:	4620      	mov	r0, r4
   d6192:	bd10      	pop	{r4, pc}

000d6194 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d6194:	b40e      	push	{r1, r2, r3}
   d6196:	b510      	push	{r4, lr}
   d6198:	b08d      	sub	sp, #52	; 0x34
   d619a:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d619c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d619e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d61a2:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d61a4:	2300      	movs	r3, #0
   d61a6:	2020      	movs	r0, #32
   d61a8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d61ac:	e9cd 4200 	strd	r4, r2, [sp]
   d61b0:	2001      	movs	r0, #1
   d61b2:	aa04      	add	r2, sp, #16
   d61b4:	f001 fc1e 	bl	d79f4 <log_message_v>
}
   d61b8:	b00d      	add	sp, #52	; 0x34
   d61ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d61be:	b003      	add	sp, #12
   d61c0:	4770      	bx	lr
	...

000d61c4 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d61c4:	b510      	push	{r4, lr}
   d61c6:	7202      	strb	r2, [r0, #8]
   d61c8:	22ff      	movs	r2, #255	; 0xff
   d61ca:	8142      	strh	r2, [r0, #10]
   d61cc:	2200      	movs	r2, #0
   d61ce:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d61d2:	6142      	str	r2, [r0, #20]
   d61d4:	7602      	strb	r2, [r0, #24]
   d61d6:	61c2      	str	r2, [r0, #28]
    instance = this;
   d61d8:	4a02      	ldr	r2, [pc, #8]	; (d61e4 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d61da:	4c03      	ldr	r4, [pc, #12]	; (d61e8 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d61dc:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d61de:	e9c0 4100 	strd	r4, r1, [r0]
}
   d61e2:	bd10      	pop	{r4, pc}
   d61e4:	2003e590 	.word	0x2003e590
   d61e8:	000de358 	.word	0x000de358

000d61ec <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d61ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d61f0:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d61f4:	4604      	mov	r4, r0
   d61f6:	4689      	mov	r9, r1
   d61f8:	4616      	mov	r6, r2
   d61fa:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d61fc:	f1b8 0f00 	cmp.w	r8, #0
   d6200:	d002      	beq.n	d6208 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d6202:	6840      	ldr	r0, [r0, #4]
   d6204:	f002 fbda 	bl	d89bc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6208:	7a21      	ldrb	r1, [r4, #8]
   d620a:	6860      	ldr	r0, [r4, #4]
   d620c:	f002 fbb3 	bl	d8976 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6210:	6860      	ldr	r0, [r4, #4]
   d6212:	6803      	ldr	r3, [r0, #0]
   d6214:	4649      	mov	r1, r9
   d6216:	689b      	ldr	r3, [r3, #8]
   d6218:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d621a:	6860      	ldr	r0, [r4, #4]
   d621c:	2100      	movs	r1, #0
   d621e:	f002 fbc9 	bl	d89b4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6222:	4605      	mov	r5, r0
   d6224:	bb00      	cbnz	r0, d6268 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6226:	2301      	movs	r3, #1
   d6228:	7a21      	ldrb	r1, [r4, #8]
   d622a:	6860      	ldr	r0, [r4, #4]
   d622c:	463a      	mov	r2, r7
   d622e:	f002 fb90 	bl	d8952 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d6232:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6234:	4603      	mov	r3, r0
        if (count == num) {
   d6236:	d109      	bne.n	d624c <_ZN6AB180513readRegistersEhPhjb+0x60>
   d6238:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d623a:	42be      	cmp	r6, r7
   d623c:	d01c      	beq.n	d6278 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d623e:	6860      	ldr	r0, [r4, #4]
   d6240:	6803      	ldr	r3, [r0, #0]
   d6242:	695b      	ldr	r3, [r3, #20]
   d6244:	4798      	blx	r3
   d6246:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d624a:	e7f6      	b.n	d623a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d624c:	490b      	ldr	r1, [pc, #44]	; (d627c <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d624e:	480c      	ldr	r0, [pc, #48]	; (d6280 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d6250:	464a      	mov	r2, r9
   d6252:	f7fe f914 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d6256:	f1b8 0f00 	cmp.w	r8, #0
   d625a:	d002      	beq.n	d6262 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d625c:	6860      	ldr	r0, [r4, #4]
   d625e:	f002 fbb6 	bl	d89ce <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d6262:	4628      	mov	r0, r5
   d6264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d6268:	4603      	mov	r3, r0
   d626a:	4906      	ldr	r1, [pc, #24]	; (d6284 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d626c:	4804      	ldr	r0, [pc, #16]	; (d6280 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d626e:	464a      	mov	r2, r9
   d6270:	f7fe f905 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d6274:	2500      	movs	r5, #0
   d6276:	e7ee      	b.n	d6256 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d6278:	2501      	movs	r5, #1
   d627a:	e7ec      	b.n	d6256 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d627c:	000de109 	.word	0x000de109
   d6280:	2003e58c 	.word	0x2003e58c
   d6284:	000de12e 	.word	0x000de12e

000d6288 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d6288:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d628a:	9300      	str	r3, [sp, #0]
   d628c:	2301      	movs	r3, #1
   d628e:	f7ff ffad 	bl	d61ec <_ZN6AB180513readRegistersEhPhjb>
}
   d6292:	b003      	add	sp, #12
   d6294:	f85d fb04 	ldr.w	pc, [sp], #4

000d6298 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d6298:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d629a:	8943      	ldrh	r3, [r0, #10]
   d629c:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d629e:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d62a0:	d010      	beq.n	d62c4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d62a2:	4e19      	ldr	r6, [pc, #100]	; (d6308 <_ZN6AB180510detectChipEv+0x70>)
   d62a4:	4d19      	ldr	r5, [pc, #100]	; (d630c <_ZN6AB180510detectChipEv+0x74>)
   d62a6:	f001 fa1d 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d62aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d62ae:	d209      	bcs.n	d62c4 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d62b0:	8960      	ldrh	r0, [r4, #10]
   d62b2:	f004 fe03 	bl	daebc <digitalRead>
   d62b6:	2801      	cmp	r0, #1
   d62b8:	d004      	beq.n	d62c4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d62ba:	4631      	mov	r1, r6
   d62bc:	4628      	mov	r0, r5
   d62be:	f7fe f8c7 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
   d62c2:	e7f0      	b.n	d62a6 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d62c4:	2301      	movs	r3, #1
   d62c6:	f10d 0207 	add.w	r2, sp, #7
   d62ca:	2128      	movs	r1, #40	; 0x28
   d62cc:	4620      	mov	r0, r4
   d62ce:	f7ff ffdb 	bl	d6288 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d62d2:	b930      	cbnz	r0, d62e2 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d62d4:	480d      	ldr	r0, [pc, #52]	; (d630c <_ZN6AB180510detectChipEv+0x74>)
   d62d6:	490e      	ldr	r1, [pc, #56]	; (d6310 <_ZN6AB180510detectChipEv+0x78>)
   d62d8:	f7fe f8ba 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
   d62dc:	2000      	movs	r0, #0
}
   d62de:	b002      	add	sp, #8
   d62e0:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d62e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d62e6:	2b18      	cmp	r3, #24
   d62e8:	d1f4      	bne.n	d62d4 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d62ea:	2301      	movs	r3, #1
   d62ec:	f10d 0207 	add.w	r2, sp, #7
   d62f0:	2129      	movs	r1, #41	; 0x29
   d62f2:	4620      	mov	r0, r4
   d62f4:	f7ff ffc8 	bl	d6288 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d62f8:	2800      	cmp	r0, #0
   d62fa:	d0eb      	beq.n	d62d4 <_ZN6AB180510detectChipEv+0x3c>
   d62fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6300:	2b05      	cmp	r3, #5
   d6302:	d1e7      	bne.n	d62d4 <_ZN6AB180510detectChipEv+0x3c>
   d6304:	e7eb      	b.n	d62de <_ZN6AB180510detectChipEv+0x46>
   d6306:	bf00      	nop
   d6308:	000de152 	.word	0x000de152
   d630c:	2003e58c 	.word	0x2003e58c
   d6310:	000de167 	.word	0x000de167

000d6314 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d6314:	b507      	push	{r0, r1, r2, lr}
   d6316:	4613      	mov	r3, r2
    uint8_t value = 0;
   d6318:	2200      	movs	r2, #0
   d631a:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d631e:	f10d 0207 	add.w	r2, sp, #7
   d6322:	f7ff ffb1 	bl	d6288 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d6326:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d632a:	b003      	add	sp, #12
   d632c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6330 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d6330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6334:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d6338:	4604      	mov	r4, r0
   d633a:	460f      	mov	r7, r1
   d633c:	4615      	mov	r5, r2
   d633e:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d6340:	f1b8 0f00 	cmp.w	r8, #0
   d6344:	d002      	beq.n	d634c <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d6346:	6840      	ldr	r0, [r0, #4]
   d6348:	f002 fb38 	bl	d89bc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d634c:	7a21      	ldrb	r1, [r4, #8]
   d634e:	6860      	ldr	r0, [r4, #4]
   d6350:	f002 fb11 	bl	d8976 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6354:	6860      	ldr	r0, [r4, #4]
   d6356:	6803      	ldr	r3, [r0, #0]
   d6358:	4639      	mov	r1, r7
   d635a:	689b      	ldr	r3, [r3, #8]
   d635c:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d635e:	442e      	add	r6, r5
   d6360:	42b5      	cmp	r5, r6
   d6362:	6860      	ldr	r0, [r4, #4]
   d6364:	d005      	beq.n	d6372 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d6366:	6803      	ldr	r3, [r0, #0]
   d6368:	f815 1b01 	ldrb.w	r1, [r5], #1
   d636c:	689b      	ldr	r3, [r3, #8]
   d636e:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d6370:	e7f6      	b.n	d6360 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d6372:	2101      	movs	r1, #1
   d6374:	f002 fb1e 	bl	d89b4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6378:	4603      	mov	r3, r0
   d637a:	b170      	cbz	r0, d639a <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d637c:	4908      	ldr	r1, [pc, #32]	; (d63a0 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d637e:	4809      	ldr	r0, [pc, #36]	; (d63a4 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d6380:	463a      	mov	r2, r7
   d6382:	f7fe f87c 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d6386:	2500      	movs	r5, #0
    }

    if (lock) {
   d6388:	f1b8 0f00 	cmp.w	r8, #0
   d638c:	d002      	beq.n	d6394 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d638e:	6860      	ldr	r0, [r4, #4]
   d6390:	f002 fb1d 	bl	d89ce <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d6394:	4628      	mov	r0, r5
   d6396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d639a:	2501      	movs	r5, #1
   d639c:	e7f4      	b.n	d6388 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d639e:	bf00      	nop
   d63a0:	000de174 	.word	0x000de174
   d63a4:	2003e58c 	.word	0x2003e58c

000d63a8 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d63a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d63aa:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d63ae:	9300      	str	r3, [sp, #0]
   d63b0:	f10d 020f 	add.w	r2, sp, #15
   d63b4:	2301      	movs	r3, #1
   d63b6:	f7ff ffbb 	bl	d6330 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d63ba:	b005      	add	sp, #20
   d63bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d63c0 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d63c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d63c2:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d63c4:	460c      	mov	r4, r1
   d63c6:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d63c8:	491a      	ldr	r1, [pc, #104]	; (d6434 <_ZN6AB18056setWDTEi+0x74>)
   d63ca:	481b      	ldr	r0, [pc, #108]	; (d6438 <_ZN6AB18056setWDTEi+0x78>)
   d63cc:	f7fe f840 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d63d0:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d63d2:	bfb8      	it	lt
   d63d4:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d63d6:	b97c      	cbnz	r4, d63f8 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d63d8:	2301      	movs	r3, #1
   d63da:	4622      	mov	r2, r4
   d63dc:	211b      	movs	r1, #27
   d63de:	4628      	mov	r0, r5
   d63e0:	f7ff ffe2 	bl	d63a8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d63e4:	4915      	ldr	r1, [pc, #84]	; (d643c <_ZN6AB18056setWDTEi+0x7c>)
   d63e6:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d63e8:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d63ea:	4813      	ldr	r0, [pc, #76]	; (d6438 <_ZN6AB18056setWDTEi+0x78>)
   d63ec:	f7ff fed2 	bl	d6194 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d63f0:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d63f2:	616c      	str	r4, [r5, #20]
}
   d63f4:	4630      	mov	r0, r6
   d63f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d63f8:	2c03      	cmp	r4, #3
   d63fa:	dd19      	ble.n	d6430 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d63fc:	10a7      	asrs	r7, r4, #2
   d63fe:	2f1f      	cmp	r7, #31
   d6400:	bfa8      	it	ge
   d6402:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6404:	00ba      	lsls	r2, r7, #2
   d6406:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d640a:	2301      	movs	r3, #1
   d640c:	b2d2      	uxtb	r2, r2
   d640e:	211b      	movs	r1, #27
   d6410:	4628      	mov	r0, r5
   d6412:	f7ff ffc9 	bl	d63a8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d6416:	463a      	mov	r2, r7
   d6418:	4603      	mov	r3, r0
   d641a:	4909      	ldr	r1, [pc, #36]	; (d6440 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d641c:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d641e:	4806      	ldr	r0, [pc, #24]	; (d6438 <_ZN6AB18056setWDTEi+0x78>)
   d6420:	f7ff feb8 	bl	d6194 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6424:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d6428:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d642a:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d642c:	616f      	str	r7, [r5, #20]
   d642e:	e7e1      	b.n	d63f4 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d6430:	2701      	movs	r7, #1
   d6432:	e7e7      	b.n	d6404 <_ZN6AB18056setWDTEi+0x44>
   d6434:	000de199 	.word	0x000de199
   d6438:	2003e58c 	.word	0x2003e58c
   d643c:	000de1a3 	.word	0x000de1a3
   d6440:	000de1bf 	.word	0x000de1bf

000d6444 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6444:	460b      	mov	r3, r1
    if (instance) {
   d6446:	4907      	ldr	r1, [pc, #28]	; (d6464 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6448:	4602      	mov	r2, r0
    if (instance) {
   d644a:	6808      	ldr	r0, [r1, #0]
   d644c:	b148      	cbz	r0, d6462 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d644e:	2b00      	cmp	r3, #0
   d6450:	bf08      	it	eq
   d6452:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d6456:	d104      	bne.n	d6462 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d6458:	68c3      	ldr	r3, [r0, #12]
   d645a:	b113      	cbz	r3, d6462 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d645c:	2100      	movs	r1, #0
   d645e:	f7ff bfaf 	b.w	d63c0 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d6462:	4770      	bx	lr
   d6464:	2003e590 	.word	0x2003e590

000d6468 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d6468:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d646c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d6470:	4605      	mov	r5, r0
   d6472:	4616      	mov	r6, r2
   d6474:	461f      	mov	r7, r3
    if (lock) {
   d6476:	f1b8 0f00 	cmp.w	r8, #0
   d647a:	d004      	beq.n	d6486 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d647c:	6840      	ldr	r0, [r0, #4]
   d647e:	9101      	str	r1, [sp, #4]
   d6480:	f002 fa9c 	bl	d89bc <_ZN7TwoWire4lockEv>
   d6484:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d6486:	9101      	str	r1, [sp, #4]
   d6488:	2300      	movs	r3, #0
   d648a:	f10d 020f 	add.w	r2, sp, #15
   d648e:	4628      	mov	r0, r5
   d6490:	f7ff fefa 	bl	d6288 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d6494:	4604      	mov	r4, r0
   d6496:	b160      	cbz	r0, d64b2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d6498:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d649c:	ea03 0206 	and.w	r2, r3, r6
   d64a0:	433a      	orrs	r2, r7
        if (newValue != value) {
   d64a2:	4293      	cmp	r3, r2
   d64a4:	d005      	beq.n	d64b2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d64a6:	9901      	ldr	r1, [sp, #4]
   d64a8:	2300      	movs	r3, #0
   d64aa:	4628      	mov	r0, r5
   d64ac:	f7ff ff7c 	bl	d63a8 <_ZN6AB180513writeRegisterEhhb>
   d64b0:	4604      	mov	r4, r0
    if (lock) {
   d64b2:	f1b8 0f00 	cmp.w	r8, #0
   d64b6:	d002      	beq.n	d64be <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d64b8:	6868      	ldr	r0, [r5, #4]
   d64ba:	f002 fa88 	bl	d89ce <_ZN7TwoWire6unlockEv>
}
   d64be:	4620      	mov	r0, r4
   d64c0:	b004      	add	sp, #16
   d64c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d64c6 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d64c6:	b513      	push	{r0, r1, r4, lr}
   d64c8:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d64ca:	f10d 0207 	add.w	r2, sp, #7
   d64ce:	f7ff fedb 	bl	d6288 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d64d2:	b128      	cbz	r0, d64e0 <_ZN6AB180510isBitClearEhhb+0x1a>
   d64d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d64d8:	421c      	tst	r4, r3
   d64da:	bf0c      	ite	eq
   d64dc:	2001      	moveq	r0, #1
   d64de:	2000      	movne	r0, #0
}
   d64e0:	b002      	add	sp, #8
   d64e2:	bd10      	pop	{r4, pc}

000d64e4 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d64e4:	b513      	push	{r0, r1, r4, lr}
   d64e6:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d64e8:	f10d 0207 	add.w	r2, sp, #7
   d64ec:	f7ff fecc 	bl	d6288 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d64f0:	b128      	cbz	r0, d64fe <_ZN6AB18058isBitSetEhhb+0x1a>
   d64f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d64f6:	421c      	tst	r4, r3
   d64f8:	bf14      	ite	ne
   d64fa:	2001      	movne	r0, #1
   d64fc:	2000      	moveq	r0, #0
}
   d64fe:	b002      	add	sp, #8
   d6500:	bd10      	pop	{r4, pc}

000d6502 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6502:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d6504:	43d2      	mvns	r2, r2
   d6506:	9300      	str	r3, [sp, #0]
   d6508:	b2d2      	uxtb	r2, r2
   d650a:	2300      	movs	r3, #0
   d650c:	f7ff ffac 	bl	d6468 <_ZN6AB180512maskRegisterEhhhb>
}
   d6510:	b003      	add	sp, #12
   d6512:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6518 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d6518:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d651a:	2301      	movs	r3, #1
   d651c:	f10d 0207 	add.w	r2, sp, #7
   d6520:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d6522:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d6524:	f7ff feb0 	bl	d6288 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d6528:	4605      	mov	r5, r0
   d652a:	b938      	cbnz	r0, d653c <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d652c:	491e      	ldr	r1, [pc, #120]	; (d65a8 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d652e:	481f      	ldr	r0, [pc, #124]	; (d65ac <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6530:	22ad      	movs	r2, #173	; 0xad
   d6532:	f7fd ffa4 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
}
   d6536:	4628      	mov	r0, r5
   d6538:	b003      	add	sp, #12
   d653a:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d653c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6540:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d6544:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d6548:	d00b      	beq.n	d6562 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d654a:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d654c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d654e:	210f      	movs	r1, #15
   d6550:	4620      	mov	r0, r4
   d6552:	f7ff ffd6 	bl	d6502 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d6556:	4a16      	ldr	r2, [pc, #88]	; (d65b0 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d6558:	4916      	ldr	r1, [pc, #88]	; (d65b4 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d655a:	4814      	ldr	r0, [pc, #80]	; (d65ac <_ZN6AB180516updateWakeReasonEv+0x94>)
   d655c:	f7fd ff78 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
   d6560:	e7e9      	b.n	d6536 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d6562:	2208      	movs	r2, #8
   d6564:	2117      	movs	r1, #23
   d6566:	4620      	mov	r0, r4
   d6568:	f7ff ffbc 	bl	d64e4 <_ZN6AB18058isBitSetEhhb>
   d656c:	b118      	cbz	r0, d6576 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d656e:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d6570:	4a11      	ldr	r2, [pc, #68]	; (d65b8 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6572:	61e3      	str	r3, [r4, #28]
   d6574:	e7f0      	b.n	d6558 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d6576:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d657a:	071a      	lsls	r2, r3, #28
   d657c:	d509      	bpl.n	d6592 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d657e:	2303      	movs	r3, #3
   d6580:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d6582:	2208      	movs	r2, #8
   d6584:	2301      	movs	r3, #1
   d6586:	210f      	movs	r1, #15
   d6588:	4620      	mov	r0, r4
   d658a:	f7ff ffba 	bl	d6502 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d658e:	4a0b      	ldr	r2, [pc, #44]	; (d65bc <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d6590:	e7e2      	b.n	d6558 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d6592:	075b      	lsls	r3, r3, #29
   d6594:	d5cf      	bpl.n	d6536 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d6596:	2204      	movs	r2, #4
   d6598:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d659a:	2301      	movs	r3, #1
   d659c:	210f      	movs	r1, #15
   d659e:	4620      	mov	r0, r4
   d65a0:	f7ff ffaf 	bl	d6502 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d65a4:	4a06      	ldr	r2, [pc, #24]	; (d65c0 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d65a6:	e7d7      	b.n	d6558 <_ZN6AB180516updateWakeReasonEv+0x40>
   d65a8:	000de212 	.word	0x000de212
   d65ac:	2003e58c 	.word	0x2003e58c
   d65b0:	000de1e3 	.word	0x000de1e3
   d65b4:	000de231 	.word	0x000de231
   d65b8:	000de1ec 	.word	0x000de1ec
   d65bc:	000de1fc 	.word	0x000de1fc
   d65c0:	000de20c 	.word	0x000de20c

000d65c4 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d65c4:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d65c6:	9300      	str	r3, [sp, #0]
   d65c8:	4613      	mov	r3, r2
   d65ca:	22ff      	movs	r2, #255	; 0xff
   d65cc:	f7ff ff4c 	bl	d6468 <_ZN6AB180512maskRegisterEhhhb>
}
   d65d0:	b003      	add	sp, #12
   d65d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d65d8 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d65d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65da:	460f      	mov	r7, r1
   d65dc:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d65de:	2301      	movs	r3, #1
   d65e0:	2200      	movs	r2, #0
   d65e2:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d65e4:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d65e6:	f7ff fedf 	bl	d63a8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d65ea:	4604      	mov	r4, r0
   d65ec:	b938      	cbnz	r0, d65fe <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d65ee:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d65f2:	491e      	ldr	r1, [pc, #120]	; (d666c <_ZN6AB180517setCountdownTimerEib+0x94>)
   d65f4:	481e      	ldr	r0, [pc, #120]	; (d6670 <_ZN6AB180517setCountdownTimerEib+0x98>)
   d65f6:	f7fd ff42 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
}
   d65fa:	4620      	mov	r0, r4
   d65fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d65fe:	2301      	movs	r3, #1
   d6600:	2223      	movs	r2, #35	; 0x23
   d6602:	2118      	movs	r1, #24
   d6604:	4628      	mov	r0, r5
   d6606:	f7ff fecf 	bl	d63a8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d660a:	4604      	mov	r4, r0
   d660c:	b910      	cbnz	r0, d6614 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d660e:	f240 229b 	movw	r2, #667	; 0x29b
   d6612:	e7ee      	b.n	d65f2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d6614:	2fff      	cmp	r7, #255	; 0xff
   d6616:	bfa8      	it	ge
   d6618:	27ff      	movge	r7, #255	; 0xff
   d661a:	2f01      	cmp	r7, #1
   d661c:	bfb8      	it	lt
   d661e:	2701      	movlt	r7, #1
   d6620:	2301      	movs	r3, #1
   d6622:	b2fa      	uxtb	r2, r7
   d6624:	2119      	movs	r1, #25
   d6626:	4628      	mov	r0, r5
   d6628:	f7ff febe 	bl	d63a8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d662c:	4604      	mov	r4, r0
   d662e:	b910      	cbnz	r0, d6636 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d6630:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d6634:	e7dd      	b.n	d65f2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d6636:	2301      	movs	r3, #1
   d6638:	2208      	movs	r2, #8
   d663a:	2112      	movs	r1, #18
   d663c:	4628      	mov	r0, r5
   d663e:	f7ff ffc1 	bl	d65c4 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6642:	4604      	mov	r4, r0
   d6644:	b910      	cbnz	r0, d664c <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d6646:	f240 22af 	movw	r2, #687	; 0x2af
   d664a:	e7d2      	b.n	d65f2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d664c:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d664e:	f04f 0301 	mov.w	r3, #1
   d6652:	bf14      	ite	ne
   d6654:	2283      	movne	r2, #131	; 0x83
   d6656:	2282      	moveq	r2, #130	; 0x82
   d6658:	2118      	movs	r1, #24
   d665a:	4628      	mov	r0, r5
   d665c:	f7ff fea4 	bl	d63a8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6660:	4604      	mov	r4, r0
   d6662:	2800      	cmp	r0, #0
   d6664:	d1c9      	bne.n	d65fa <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d6666:	f240 22b9 	movw	r2, #697	; 0x2b9
   d666a:	e7c2      	b.n	d65f2 <_ZN6AB180517setCountdownTimerEib+0x1a>
   d666c:	000de242 	.word	0x000de242
   d6670:	2003e58c 	.word	0x2003e58c

000d6674 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d6674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d6678:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d667a:	4605      	mov	r5, r0
   d667c:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d667e:	484f      	ldr	r0, [pc, #316]	; (d67bc <_ZN6AB180513deepPowerDownEi+0x148>)
   d6680:	494f      	ldr	r1, [pc, #316]	; (d67c0 <_ZN6AB180513deepPowerDownEi+0x14c>)
   d6682:	f7fd fee5 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d6686:	2100      	movs	r1, #0
   d6688:	4628      	mov	r0, r5
   d668a:	f7ff fe99 	bl	d63c0 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d668e:	4604      	mov	r4, r0
   d6690:	b948      	cbnz	r0, d66a6 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d6692:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d6696:	494b      	ldr	r1, [pc, #300]	; (d67c4 <_ZN6AB180513deepPowerDownEi+0x150>)
   d6698:	4848      	ldr	r0, [pc, #288]	; (d67bc <_ZN6AB180513deepPowerDownEi+0x148>)
   d669a:	f7fd fef0 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
}
   d669e:	4620      	mov	r0, r4
   d66a0:	b003      	add	sp, #12
   d66a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d66a6:	2301      	movs	r3, #1
   d66a8:	461a      	mov	r2, r3
   d66aa:	2130      	movs	r1, #48	; 0x30
   d66ac:	4628      	mov	r0, r5
   d66ae:	f7ff ff89 	bl	d65c4 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d66b2:	4604      	mov	r4, r0
   d66b4:	b910      	cbnz	r0, d66bc <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d66b6:	f240 2205 	movw	r2, #517	; 0x205
   d66ba:	e7ec      	b.n	d6696 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d66bc:	2210      	movs	r2, #16
   d66be:	2301      	movs	r3, #1
   d66c0:	4611      	mov	r1, r2
   d66c2:	4628      	mov	r0, r5
   d66c4:	f7ff ff1d 	bl	d6502 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d66c8:	4604      	mov	r4, r0
   d66ca:	b910      	cbnz	r0, d66d2 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d66cc:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d66d0:	e7e1      	b.n	d6696 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d66d2:	2301      	movs	r3, #1
   d66d4:	2226      	movs	r2, #38	; 0x26
   d66d6:	2113      	movs	r1, #19
   d66d8:	4628      	mov	r0, r5
   d66da:	f7ff fe65 	bl	d63a8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d66de:	4604      	mov	r4, r0
   d66e0:	b910      	cbnz	r0, d66e8 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d66e2:	f240 2213 	movw	r2, #531	; 0x213
   d66e6:	e7d6      	b.n	d6696 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d66e8:	2601      	movs	r6, #1
   d66ea:	9600      	str	r6, [sp, #0]
   d66ec:	4633      	mov	r3, r6
   d66ee:	22fc      	movs	r2, #252	; 0xfc
   d66f0:	2111      	movs	r1, #17
   d66f2:	4628      	mov	r0, r5
   d66f4:	f7ff feb8 	bl	d6468 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d66f8:	4604      	mov	r4, r0
   d66fa:	b910      	cbnz	r0, d6702 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d66fc:	f240 221b 	movw	r2, #539	; 0x21b
   d6700:	e7c9      	b.n	d6696 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d6702:	2200      	movs	r2, #0
   d6704:	4639      	mov	r1, r7
   d6706:	4628      	mov	r0, r5
   d6708:	f7ff ff66 	bl	d65d8 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d670c:	4604      	mov	r4, r0
   d670e:	b910      	cbnz	r0, d6716 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d6710:	f240 2222 	movw	r2, #546	; 0x222
   d6714:	e7bf      	b.n	d6696 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d6716:	9600      	str	r6, [sp, #0]
   d6718:	2302      	movs	r3, #2
   d671a:	2277      	movs	r2, #119	; 0x77
   d671c:	2110      	movs	r1, #16
   d671e:	4628      	mov	r0, r5
   d6720:	f7ff fea2 	bl	d6468 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6724:	4604      	mov	r4, r0
   d6726:	b910      	cbnz	r0, d672e <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d6728:	f240 222b 	movw	r2, #555	; 0x22b
   d672c:	e7b3      	b.n	d6696 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d672e:	4633      	mov	r3, r6
   d6730:	2204      	movs	r2, #4
   d6732:	211c      	movs	r1, #28
   d6734:	4628      	mov	r0, r5
   d6736:	f7ff ff45 	bl	d65c4 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d673a:	4604      	mov	r4, r0
   d673c:	b910      	cbnz	r0, d6744 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d673e:	f240 2232 	movw	r2, #562	; 0x232
   d6742:	e7a8      	b.n	d6696 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d6744:	9600      	str	r6, [sp, #0]
   d6746:	2318      	movs	r3, #24
   d6748:	22e3      	movs	r2, #227	; 0xe3
   d674a:	2111      	movs	r1, #17
   d674c:	4628      	mov	r0, r5
   d674e:	f7ff fe8b 	bl	d6468 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6752:	4604      	mov	r4, r0
   d6754:	b910      	cbnz	r0, d675c <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d6756:	f240 2239 	movw	r2, #569	; 0x239
   d675a:	e79c      	b.n	d6696 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d675c:	4633      	mov	r3, r6
   d675e:	22c0      	movs	r2, #192	; 0xc0
   d6760:	2117      	movs	r1, #23
   d6762:	4628      	mov	r0, r5
   d6764:	f7ff fe20 	bl	d63a8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6768:	4604      	mov	r4, r0
   d676a:	b910      	cbnz	r0, d6772 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d676c:	f44f 7210 	mov.w	r2, #576	; 0x240
   d6770:	e791      	b.n	d6696 <_ZN6AB180513deepPowerDownEi+0x22>
   d6772:	f000 ffb7 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6776:	f8df 9054 	ldr.w	r9, [pc, #84]	; d67cc <_ZN6AB180513deepPowerDownEi+0x158>
   d677a:	f8df 8040 	ldr.w	r8, [pc, #64]	; d67bc <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d677e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6782:	4606      	mov	r6, r0
   d6784:	434f      	muls	r7, r1
   d6786:	f000 ffad 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
   d678a:	1b80      	subs	r0, r0, r6
   d678c:	42b8      	cmp	r0, r7
   d678e:	d20e      	bcs.n	d67ae <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6790:	2201      	movs	r2, #1
   d6792:	2117      	movs	r1, #23
   d6794:	4628      	mov	r0, r5
   d6796:	f7ff fdbd 	bl	d6314 <_ZN6AB180512readRegisterEhb>
   d679a:	4649      	mov	r1, r9
   d679c:	4602      	mov	r2, r0
   d679e:	4640      	mov	r0, r8
   d67a0:	f7fd fe56 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d67a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d67a8:	f001 fb0c 	bl	d7dc4 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d67ac:	e7eb      	b.n	d6786 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d67ae:	4906      	ldr	r1, [pc, #24]	; (d67c8 <_ZN6AB180513deepPowerDownEi+0x154>)
   d67b0:	4802      	ldr	r0, [pc, #8]	; (d67bc <_ZN6AB180513deepPowerDownEi+0x148>)
   d67b2:	f7fd fe64 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d67b6:	f003 fe8d 	bl	da4d4 <_ZN11SystemClass5resetEv>
    return true;
   d67ba:	e770      	b.n	d669e <_ZN6AB180513deepPowerDownEi+0x2a>
   d67bc:	2003e58c 	.word	0x2003e58c
   d67c0:	000de26d 	.word	0x000de26d
   d67c4:	000de262 	.word	0x000de262
   d67c8:	000de293 	.word	0x000de293
   d67cc:	000de27e 	.word	0x000de27e

000d67d0 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d67d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d67d4:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d67d8:	4605      	mov	r5, r0
   d67da:	460c      	mov	r4, r1
   d67dc:	4691      	mov	r9, r2
   d67de:	461f      	mov	r7, r3
    if (lock) {
   d67e0:	f1ba 0f00 	cmp.w	sl, #0
   d67e4:	d002      	beq.n	d67ec <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d67e6:	6840      	ldr	r0, [r0, #4]
   d67e8:	f002 f8e8 	bl	d89bc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d67ec:	b307      	cbz	r7, d6830 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d67ee:	2f20      	cmp	r7, #32
   d67f0:	463e      	mov	r6, r7
   d67f2:	bf28      	it	cs
   d67f4:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d67f6:	2c7f      	cmp	r4, #127	; 0x7f
   d67f8:	d826      	bhi.n	d6848 <_ZN6AB18057readRamEjPhjb+0x78>
   d67fa:	1933      	adds	r3, r6, r4
   d67fc:	2b80      	cmp	r3, #128	; 0x80
   d67fe:	d901      	bls.n	d6804 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d6800:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6804:	2301      	movs	r3, #1
   d6806:	2204      	movs	r2, #4
   d6808:	213f      	movs	r1, #63	; 0x3f
   d680a:	4628      	mov	r0, r5
   d680c:	f7ff fe79 	bl	d6502 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6810:	2300      	movs	r3, #0
   d6812:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6816:	9300      	str	r3, [sp, #0]
   d6818:	464a      	mov	r2, r9
   d681a:	4633      	mov	r3, r6
   d681c:	b2c9      	uxtb	r1, r1
   d681e:	4628      	mov	r0, r5
   d6820:	f7ff fce4 	bl	d61ec <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6824:	4680      	mov	r8, r0
   d6826:	b128      	cbz	r0, d6834 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6828:	4434      	add	r4, r6
        dataLen -= count;
   d682a:	1bbf      	subs	r7, r7, r6
        data += count;
   d682c:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d682e:	e7dd      	b.n	d67ec <_ZN6AB18057readRamEjPhjb+0x1c>
   d6830:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6834:	f1ba 0f00 	cmp.w	sl, #0
   d6838:	d002      	beq.n	d6840 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d683a:	6868      	ldr	r0, [r5, #4]
   d683c:	f002 f8c7 	bl	d89ce <_ZN7TwoWire6unlockEv>
}
   d6840:	4640      	mov	r0, r8
   d6842:	b002      	add	sp, #8
   d6844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6848:	2301      	movs	r3, #1
   d684a:	2204      	movs	r2, #4
   d684c:	213f      	movs	r1, #63	; 0x3f
   d684e:	4628      	mov	r0, r5
   d6850:	f7ff feb8 	bl	d65c4 <_ZN6AB180514setRegisterBitEhhb>
   d6854:	e7dc      	b.n	d6810 <_ZN6AB18057readRamEjPhjb+0x40>

000d6856 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6856:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d685a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d685e:	4605      	mov	r5, r0
   d6860:	460c      	mov	r4, r1
   d6862:	4691      	mov	r9, r2
   d6864:	461f      	mov	r7, r3
    if (lock) {
   d6866:	f1ba 0f00 	cmp.w	sl, #0
   d686a:	d002      	beq.n	d6872 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d686c:	6840      	ldr	r0, [r0, #4]
   d686e:	f002 f8a5 	bl	d89bc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6872:	b307      	cbz	r7, d68b6 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6874:	2f1f      	cmp	r7, #31
   d6876:	463e      	mov	r6, r7
   d6878:	bf28      	it	cs
   d687a:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d687c:	2c7f      	cmp	r4, #127	; 0x7f
   d687e:	d826      	bhi.n	d68ce <_ZN6AB18058writeRamEjPKhjb+0x78>
   d6880:	1933      	adds	r3, r6, r4
   d6882:	2b80      	cmp	r3, #128	; 0x80
   d6884:	d901      	bls.n	d688a <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6886:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d688a:	2301      	movs	r3, #1
   d688c:	2204      	movs	r2, #4
   d688e:	213f      	movs	r1, #63	; 0x3f
   d6890:	4628      	mov	r0, r5
   d6892:	f7ff fe36 	bl	d6502 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6896:	2300      	movs	r3, #0
   d6898:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d689c:	9300      	str	r3, [sp, #0]
   d689e:	464a      	mov	r2, r9
   d68a0:	4633      	mov	r3, r6
   d68a2:	b2c9      	uxtb	r1, r1
   d68a4:	4628      	mov	r0, r5
   d68a6:	f7ff fd43 	bl	d6330 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d68aa:	4680      	mov	r8, r0
   d68ac:	b128      	cbz	r0, d68ba <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d68ae:	4434      	add	r4, r6
        dataLen -= count;
   d68b0:	1bbf      	subs	r7, r7, r6
        data += count;
   d68b2:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d68b4:	e7dd      	b.n	d6872 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d68b6:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d68ba:	f1ba 0f00 	cmp.w	sl, #0
   d68be:	d002      	beq.n	d68c6 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d68c0:	6868      	ldr	r0, [r5, #4]
   d68c2:	f002 f884 	bl	d89ce <_ZN7TwoWire6unlockEv>
}
   d68c6:	4640      	mov	r0, r8
   d68c8:	b002      	add	sp, #8
   d68ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d68ce:	2301      	movs	r3, #1
   d68d0:	2204      	movs	r2, #4
   d68d2:	213f      	movs	r1, #63	; 0x3f
   d68d4:	4628      	mov	r0, r5
   d68d6:	f7ff fe75 	bl	d65c4 <_ZN6AB180514setRegisterBitEhhb>
   d68da:	e7dc      	b.n	d6896 <_ZN6AB18058writeRamEjPKhjb+0x40>

000d68dc <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d68dc:	b530      	push	{r4, r5, lr}
   d68de:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d68e0:	680d      	ldr	r5, [r1, #0]
   d68e2:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d68e6:	9503      	str	r5, [sp, #12]
   d68e8:	684d      	ldr	r5, [r1, #4]
   d68ea:	9502      	str	r5, [sp, #8]
   d68ec:	688d      	ldr	r5, [r1, #8]
   d68ee:	9501      	str	r5, [sp, #4]
   d68f0:	68c9      	ldr	r1, [r1, #12]
   d68f2:	9100      	str	r1, [sp, #0]
   d68f4:	3301      	adds	r3, #1
   d68f6:	4904      	ldr	r1, [pc, #16]	; (d6908 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d68f8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d68fc:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d68fe:	f003 fd5b 	bl	da3b8 <_ZN6String6formatEPKcz>
}
   d6902:	4620      	mov	r0, r4
   d6904:	b005      	add	sp, #20
   d6906:	bd30      	pop	{r4, r5, pc}
   d6908:	000de2a5 	.word	0x000de2a5

000d690c <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d690c:	1103      	asrs	r3, r0, #4
}
   d690e:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6910:	f000 000f 	and.w	r0, r0, #15
}
   d6914:	fb02 0003 	mla	r0, r2, r3, r0
   d6918:	4770      	bx	lr

000d691a <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d691a:	b538      	push	{r3, r4, r5, lr}
   d691c:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d691e:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6920:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d6922:	f7ff fff3 	bl	d690c <_ZN6AB180510bcdToValueEh>
   d6926:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6928:	7860      	ldrb	r0, [r4, #1]
   d692a:	f7ff ffef 	bl	d690c <_ZN6AB180510bcdToValueEh>
   d692e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6930:	78a0      	ldrb	r0, [r4, #2]
   d6932:	f7ff ffeb 	bl	d690c <_ZN6AB180510bcdToValueEh>
   d6936:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6938:	78e0      	ldrb	r0, [r4, #3]
   d693a:	f7ff ffe7 	bl	d690c <_ZN6AB180510bcdToValueEh>
   d693e:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6940:	7920      	ldrb	r0, [r4, #4]
   d6942:	f7ff ffe3 	bl	d690c <_ZN6AB180510bcdToValueEh>
   d6946:	3801      	subs	r0, #1
   d6948:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d694a:	b92d      	cbnz	r5, d6958 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d694c:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d694e:	7828      	ldrb	r0, [r5, #0]
   d6950:	f7ff ffdc 	bl	d690c <_ZN6AB180510bcdToValueEh>
   d6954:	6188      	str	r0, [r1, #24]
}
   d6956:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6958:	7960      	ldrb	r0, [r4, #5]
   d695a:	f7ff ffd7 	bl	d690c <_ZN6AB180510bcdToValueEh>
   d695e:	3064      	adds	r0, #100	; 0x64
   d6960:	1da5      	adds	r5, r4, #6
   d6962:	6148      	str	r0, [r1, #20]
   d6964:	e7f3      	b.n	d694e <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6968 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6968:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d696a:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d696c:	b088      	sub	sp, #32
   d696e:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6970:	461a      	mov	r2, r3
   d6972:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6974:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6976:	f7ff fda6 	bl	d64c6 <_ZN6AB180510isBitClearEhhb>
   d697a:	b1f0      	cbz	r0, d69ba <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d697c:	2308      	movs	r3, #8
   d697e:	2601      	movs	r6, #1
   d6980:	4620      	mov	r0, r4
   d6982:	9600      	str	r6, [sp, #0]
   d6984:	eb0d 0203 	add.w	r2, sp, r3
   d6988:	2100      	movs	r1, #0
   d698a:	f7ff fc2f 	bl	d61ec <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d698e:	4604      	mov	r4, r0
   d6990:	b198      	cbz	r0, d69ba <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d6992:	4632      	mov	r2, r6
   d6994:	4629      	mov	r1, r5
   d6996:	f10d 0009 	add.w	r0, sp, #9
   d699a:	f7ff ffbe 	bl	d691a <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d699e:	a804      	add	r0, sp, #16
   d69a0:	f7ff ff9c 	bl	d68dc <_ZN6AB180510tmToStringEPK2tm>
   d69a4:	4808      	ldr	r0, [pc, #32]	; (d69c8 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d69a6:	9a04      	ldr	r2, [sp, #16]
   d69a8:	4908      	ldr	r1, [pc, #32]	; (d69cc <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d69aa:	f7fd fd51 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
   d69ae:	a804      	add	r0, sp, #16
   d69b0:	f003 fc36 	bl	da220 <_ZN6StringD1Ev>
}
   d69b4:	4620      	mov	r0, r4
   d69b6:	b008      	add	sp, #32
   d69b8:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d69ba:	2224      	movs	r2, #36	; 0x24
   d69bc:	2100      	movs	r1, #0
   d69be:	4628      	mov	r0, r5
   d69c0:	f005 f8fc 	bl	dbbbc <memset>
   d69c4:	2400      	movs	r4, #0
   d69c6:	e7f5      	b.n	d69b4 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d69c8:	2003e58c 	.word	0x2003e58c
   d69cc:	000de2c3 	.word	0x000de2c3

000d69d0 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d69d0:	b530      	push	{r4, r5, lr}
   d69d2:	b08b      	sub	sp, #44	; 0x2c
   d69d4:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d69d6:	a901      	add	r1, sp, #4
   d69d8:	f7ff ffc6 	bl	d6968 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d69dc:	4604      	mov	r4, r0
   d69de:	b120      	cbz	r0, d69ea <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d69e0:	a801      	add	r0, sp, #4
   d69e2:	f001 f9db 	bl	d7d9c <mktime>
   d69e6:	e9c5 0100 	strd	r0, r1, [r5]
}
   d69ea:	4620      	mov	r0, r4
   d69ec:	b00b      	add	sp, #44	; 0x2c
   d69ee:	bd30      	pop	{r4, r5, pc}

000d69f0 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d69f0:	b510      	push	{r4, lr}
   d69f2:	4604      	mov	r4, r0
   d69f4:	b088      	sub	sp, #32
    if (callBegin) {
   d69f6:	b111      	cbz	r1, d69fe <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d69f8:	6840      	ldr	r0, [r0, #4]
   d69fa:	f001 ff8d 	bl	d8918 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d69fe:	4620      	mov	r0, r4
   d6a00:	f7ff fc4a 	bl	d6298 <_ZN6AB180510detectChipEv>
   d6a04:	b370      	cbz	r0, d6a64 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6a06:	4620      	mov	r0, r4
   d6a08:	f7ff fd86 	bl	d6518 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6a0c:	2301      	movs	r3, #1
   d6a0e:	461a      	mov	r2, r3
   d6a10:	2110      	movs	r1, #16
   d6a12:	4620      	mov	r0, r4
   d6a14:	f7ff fd57 	bl	d64c6 <_ZN6AB180510isBitClearEhhb>
   d6a18:	b1d8      	cbz	r0, d6a52 <_ZN6AB18055setupEb+0x62>
   d6a1a:	f003 ffbb 	bl	da994 <_ZN9TimeClass7isValidEv>
   d6a1e:	b9c0      	cbnz	r0, d6a52 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6a20:	a902      	add	r1, sp, #8
   d6a22:	4620      	mov	r0, r4
   d6a24:	f7ff ffd4 	bl	d69d0 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6a2c:	f003 feb8 	bl	da7a0 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6a30:	4b0f      	ldr	r3, [pc, #60]	; (d6a70 <_ZN6AB18055setupEb+0x80>)
   d6a32:	4910      	ldr	r1, [pc, #64]	; (d6a74 <_ZN6AB18055setupEb+0x84>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	9300      	str	r3, [sp, #0]
   d6a38:	a804      	add	r0, sp, #16
   d6a3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6a3e:	f003 ff67 	bl	da910 <_ZN9TimeClass6formatExPKc>
   d6a42:	480d      	ldr	r0, [pc, #52]	; (d6a78 <_ZN6AB18055setupEb+0x88>)
   d6a44:	9a04      	ldr	r2, [sp, #16]
   d6a46:	490d      	ldr	r1, [pc, #52]	; (d6a7c <_ZN6AB18055setupEb+0x8c>)
   d6a48:	f7fd fd02 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
   d6a4c:	a804      	add	r0, sp, #16
   d6a4e:	f003 fbe7 	bl	da220 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6a52:	4a0b      	ldr	r2, [pc, #44]	; (d6a80 <_ZN6AB18055setupEb+0x90>)
   d6a54:	2300      	movs	r3, #0
   d6a56:	2100      	movs	r1, #0
   d6a58:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6a5c:	f001 f80c 	bl	d7a78 <system_subscribe_event>
}
   d6a60:	b008      	add	sp, #32
   d6a62:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6a64:	4907      	ldr	r1, [pc, #28]	; (d6a84 <_ZN6AB18055setupEb+0x94>)
   d6a66:	4804      	ldr	r0, [pc, #16]	; (d6a78 <_ZN6AB18055setupEb+0x88>)
   d6a68:	f7fd fd09 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
   d6a6c:	e7f1      	b.n	d6a52 <_ZN6AB18055setupEb+0x62>
   d6a6e:	bf00      	nop
   d6a70:	2003e1e8 	.word	0x2003e1e8
   d6a74:	2003e634 	.word	0x2003e634
   d6a78:	2003e58c 	.word	0x2003e58c
   d6a7c:	000de2d1 	.word	0x000de2d1
   d6a80:	000d6445 	.word	0x000d6445
   d6a84:	000de2ee 	.word	0x000de2ee

000d6a88 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6a88:	220a      	movs	r2, #10
   d6a8a:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d6a8e:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d6a92:	fb93 f1f2 	sdiv	r1, r3, r2
   d6a96:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6a9a:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d6a9e:	b2c0      	uxtb	r0, r0
   d6aa0:	4770      	bx	lr

000d6aa2 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6aa2:	b570      	push	{r4, r5, r6, lr}
   d6aa4:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6aa6:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6aa8:	460c      	mov	r4, r1
   d6aaa:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6aac:	f7ff ffec 	bl	d6a88 <_ZN6AB180510valueToBcdEi>
   d6ab0:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d6ab2:	6868      	ldr	r0, [r5, #4]
   d6ab4:	f7ff ffe8 	bl	d6a88 <_ZN6AB180510valueToBcdEi>
   d6ab8:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d6aba:	68a8      	ldr	r0, [r5, #8]
   d6abc:	f7ff ffe4 	bl	d6a88 <_ZN6AB180510valueToBcdEi>
   d6ac0:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d6ac2:	68e8      	ldr	r0, [r5, #12]
   d6ac4:	f7ff ffe0 	bl	d6a88 <_ZN6AB180510valueToBcdEi>
   d6ac8:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6aca:	6928      	ldr	r0, [r5, #16]
   d6acc:	3001      	adds	r0, #1
   d6ace:	f7ff ffdb 	bl	d6a88 <_ZN6AB180510valueToBcdEi>
   d6ad2:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d6ad4:	b92e      	cbnz	r6, d6ae2 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6ad6:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d6ad8:	69a8      	ldr	r0, [r5, #24]
   d6ada:	f7ff ffd5 	bl	d6a88 <_ZN6AB180510valueToBcdEi>
   d6ade:	7030      	strb	r0, [r6, #0]
}
   d6ae0:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d6ae2:	696a      	ldr	r2, [r5, #20]
   d6ae4:	2364      	movs	r3, #100	; 0x64
   d6ae6:	fb92 f0f3 	sdiv	r0, r2, r3
   d6aea:	fb03 2010 	mls	r0, r3, r0, r2
   d6aee:	f7ff ffcb 	bl	d6a88 <_ZN6AB180510valueToBcdEi>
   d6af2:	1da6      	adds	r6, r4, #6
   d6af4:	7160      	strb	r0, [r4, #5]
   d6af6:	e7ef      	b.n	d6ad8 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d6af8 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6afa:	b087      	sub	sp, #28
   d6afc:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6afe:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6b00:	4616      	mov	r6, r2
   d6b02:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6b04:	f7ff feea 	bl	d68dc <_ZN6AB180510tmToStringEPK2tm>
   d6b08:	481e      	ldr	r0, [pc, #120]	; (d6b84 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6b0a:	9a02      	ldr	r2, [sp, #8]
   d6b0c:	491e      	ldr	r1, [pc, #120]	; (d6b88 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d6b0e:	f7fd fc9f 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
   d6b12:	a802      	add	r0, sp, #8
   d6b14:	f003 fb84 	bl	da220 <_ZN6StringD1Ev>
    if (lock) {
   d6b18:	b116      	cbz	r6, d6b20 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d6b1a:	6868      	ldr	r0, [r5, #4]
   d6b1c:	f001 ff4e 	bl	d89bc <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d6b20:	4620      	mov	r0, r4
   d6b22:	2201      	movs	r2, #1
   d6b24:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6b28:	2700      	movs	r7, #0
   d6b2a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d6b2e:	f7ff ffb8 	bl	d6aa2 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6b32:	2301      	movs	r3, #1
   d6b34:	461a      	mov	r2, r3
   d6b36:	2110      	movs	r1, #16
   d6b38:	4628      	mov	r0, r5
   d6b3a:	f7ff fd43 	bl	d65c4 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d6b3e:	4604      	mov	r4, r0
   d6b40:	b1e8      	cbz	r0, d6b7e <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d6b42:	2308      	movs	r3, #8
   d6b44:	9700      	str	r7, [sp, #0]
   d6b46:	eb0d 0203 	add.w	r2, sp, r3
   d6b4a:	4639      	mov	r1, r7
   d6b4c:	4628      	mov	r0, r5
   d6b4e:	f7ff fbef 	bl	d6330 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d6b52:	4604      	mov	r4, r0
   d6b54:	b160      	cbz	r0, d6b70 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6b56:	2301      	movs	r3, #1
   d6b58:	461a      	mov	r2, r3
   d6b5a:	2110      	movs	r1, #16
   d6b5c:	4628      	mov	r0, r5
   d6b5e:	f7ff fcd0 	bl	d6502 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d6b62:	b116      	cbz	r6, d6b6a <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d6b64:	6868      	ldr	r0, [r5, #4]
   d6b66:	f001 ff32 	bl	d89ce <_ZN7TwoWire6unlockEv>
}
   d6b6a:	4620      	mov	r0, r4
   d6b6c:	b007      	add	sp, #28
   d6b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d6b70:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d6b74:	4905      	ldr	r1, [pc, #20]	; (d6b8c <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d6b76:	4803      	ldr	r0, [pc, #12]	; (d6b84 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6b78:	f7fd fc81 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>
   d6b7c:	e7f1      	b.n	d6b62 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d6b7e:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d6b82:	e7f7      	b.n	d6b74 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d6b84:	2003e58c 	.word	0x2003e58c
   d6b88:	000de306 	.word	0x000de306
   d6b8c:	000de314 	.word	0x000de314

000d6b90 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6b90:	b513      	push	{r0, r1, r4, lr}
   d6b92:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d6b94:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6b96:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d6b9a:	f004 ffd5 	bl	dbb48 <gmtime>
    return setRtcFromTm(tm, lock);
   d6b9e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d6ba2:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	f7ff ffa7 	bl	d6af8 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d6baa:	b002      	add	sp, #8
   d6bac:	bd10      	pop	{r4, pc}
	...

000d6bb0 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d6bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6bb2:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d6bb4:	b089      	sub	sp, #36	; 0x24
   d6bb6:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6bb8:	bb75      	cbnz	r5, d6c18 <_ZN6AB18054loopEv+0x68>
   d6bba:	f003 feeb 	bl	da994 <_ZN9TimeClass7isValidEv>
   d6bbe:	b358      	cbz	r0, d6c18 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d6bc0:	2600      	movs	r6, #0
   d6bc2:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d6bc4:	a904      	add	r1, sp, #16
   d6bc6:	4628      	mov	r0, r5
        tm = 0;
   d6bc8:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d6bcc:	f001 f806 	bl	d7bdc <spark_sync_time_last>
   d6bd0:	b310      	cbz	r0, d6c18 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d6bd2:	2501      	movs	r5, #1
   d6bd4:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d6bd6:	f003 fefa 	bl	da9ce <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d6bda:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d6bdc:	4602      	mov	r2, r0
   d6bde:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d6be0:	4620      	mov	r0, r4
        time_t time = Time.now();
   d6be2:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d6be6:	f7ff ffd3 	bl	d6b90 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d6bea:	a902      	add	r1, sp, #8
   d6bec:	4620      	mov	r0, r4
        time = 0;
   d6bee:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d6bf2:	f7ff feed 	bl	d69d0 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6bf6:	4b12      	ldr	r3, [pc, #72]	; (d6c40 <_ZN6AB18054loopEv+0x90>)
   d6bf8:	4912      	ldr	r1, [pc, #72]	; (d6c44 <_ZN6AB18054loopEv+0x94>)
   d6bfa:	681b      	ldr	r3, [r3, #0]
   d6bfc:	9300      	str	r3, [sp, #0]
   d6bfe:	a804      	add	r0, sp, #16
   d6c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6c04:	f003 fe84 	bl	da910 <_ZN9TimeClass6formatExPKc>
   d6c08:	480f      	ldr	r0, [pc, #60]	; (d6c48 <_ZN6AB18054loopEv+0x98>)
   d6c0a:	9a04      	ldr	r2, [sp, #16]
   d6c0c:	490f      	ldr	r1, [pc, #60]	; (d6c4c <_ZN6AB18054loopEv+0x9c>)
   d6c0e:	f7fd fc1f 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
   d6c12:	a804      	add	r0, sp, #16
   d6c14:	f003 fb04 	bl	da220 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6c18:	6963      	ldr	r3, [r4, #20]
   d6c1a:	b173      	cbz	r3, d6c3a <_ZN6AB18054loopEv+0x8a>
   d6c1c:	f000 fd62 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d6c20:	6923      	ldr	r3, [r4, #16]
   d6c22:	1ac0      	subs	r0, r0, r3
   d6c24:	6963      	ldr	r3, [r4, #20]
   d6c26:	4298      	cmp	r0, r3
   d6c28:	d307      	bcc.n	d6c3a <_ZN6AB18054loopEv+0x8a>
   d6c2a:	f000 fd5b 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d6c2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d6c32:	6120      	str	r0, [r4, #16]
            setWDT();
   d6c34:	4620      	mov	r0, r4
   d6c36:	f7ff fbc3 	bl	d63c0 <_ZN6AB18056setWDTEi>
}
   d6c3a:	b009      	add	sp, #36	; 0x24
   d6c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6c3e:	bf00      	nop
   d6c40:	2003e1e8 	.word	0x2003e1e8
   d6c44:	2003e634 	.word	0x2003e634
   d6c48:	2003e58c 	.word	0x2003e58c
   d6c4c:	000de32f 	.word	0x000de32f

000d6c50 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d6c50:	4b01      	ldr	r3, [pc, #4]	; (d6c58 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d6c52:	4a02      	ldr	r2, [pc, #8]	; (d6c5c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6c54:	601a      	str	r2, [r3, #0]
}
   d6c56:	4770      	bx	lr
   d6c58:	2003e58c 	.word	0x2003e58c
   d6c5c:	000de345 	.word	0x000de345

000d6c60 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d6c60:	4770      	bx	lr

000d6c62 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d6c62:	b510      	push	{r4, lr}
}
   d6c64:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d6c66:	4604      	mov	r4, r0
}
   d6c68:	f004 f9d7 	bl	db01a <_ZdlPvj>
   d6c6c:	4620      	mov	r0, r4
   d6c6e:	bd10      	pop	{r4, pc}

000d6c70 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d6c70:	6803      	ldr	r3, [r0, #0]
   d6c72:	b2c9      	uxtb	r1, r1
   d6c74:	689b      	ldr	r3, [r3, #8]
   d6c76:	4718      	bx	r3

000d6c78 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d6c78:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d6c7a:	4d03      	ldr	r5, [pc, #12]	; (d6c88 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d6c7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d6c80:	e9c0 5100 	strd	r5, r1, [r0]
}
   d6c84:	bd30      	pop	{r4, r5, pc}
   d6c86:	bf00      	nop
   d6c88:	000de39c 	.word	0x000de39c

000d6c8c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d6c8c:	6840      	ldr	r0, [r0, #4]
   d6c8e:	f001 be43 	b.w	d8918 <_ZN7TwoWire5beginEv>

000d6c92 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6c92:	b510      	push	{r4, lr}
   d6c94:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6c96:	6800      	ldr	r0, [r0, #0]
   d6c98:	f001 fe99 	bl	d89ce <_ZN7TwoWire6unlockEv>
   d6c9c:	4620      	mov	r0, r4
   d6c9e:	bd10      	pop	{r4, pc}

000d6ca0 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d6ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ca4:	b08a      	sub	sp, #40	; 0x28
   d6ca6:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d6ca8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6caa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6cac:	f001 fe86 	bl	d89bc <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d6cb0:	221e      	movs	r2, #30
   d6cb2:	2100      	movs	r1, #0
   d6cb4:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d6cb6:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d6cb8:	f004 ff80 	bl	dbbbc <memset>
		size_t framAddr = 0;
   d6cbc:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d6cbe:	b1ef      	cbz	r7, d6cfc <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d6cc0:	6823      	ldr	r3, [r4, #0]
   d6cc2:	2f1e      	cmp	r7, #30
   d6cc4:	46b8      	mov	r8, r7
   d6cc6:	bf28      	it	cs
   d6cc8:	f04f 081e 	movcs.w	r8, #30
   d6ccc:	68dd      	ldr	r5, [r3, #12]
   d6cce:	aa02      	add	r2, sp, #8
   d6cd0:	4643      	mov	r3, r8
   d6cd2:	4631      	mov	r1, r6
   d6cd4:	4620      	mov	r0, r4
   d6cd6:	47a8      	blx	r5
			if (!result) {
   d6cd8:	4605      	mov	r5, r0
   d6cda:	b958      	cbnz	r0, d6cf4 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d6cdc:	480a      	ldr	r0, [pc, #40]	; (d6d08 <_ZN6MB85RC5eraseEv+0x68>)
   d6cde:	490b      	ldr	r1, [pc, #44]	; (d6d0c <_ZN6MB85RC5eraseEv+0x6c>)
   d6ce0:	4632      	mov	r2, r6
   d6ce2:	f7fd fbb5 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d6ce6:	a801      	add	r0, sp, #4
   d6ce8:	f7ff ffd3 	bl	d6c92 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d6cec:	4628      	mov	r0, r5
   d6cee:	b00a      	add	sp, #40	; 0x28
   d6cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d6cf4:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d6cf8:	4446      	add	r6, r8
		while(totalLen > 0) {
   d6cfa:	e7e0      	b.n	d6cbe <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d6cfc:	a801      	add	r0, sp, #4
   d6cfe:	f7ff ffc8 	bl	d6c92 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d6d02:	2501      	movs	r5, #1
   d6d04:	e7f2      	b.n	d6cec <_ZN6MB85RC5eraseEv+0x4c>
   d6d06:	bf00      	nop
   d6d08:	2003e5e0 	.word	0x2003e5e0
   d6d0c:	000de368 	.word	0x000de368

000d6d10 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6d14:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6d16:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d18:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6d1a:	460d      	mov	r5, r1
   d6d1c:	4616      	mov	r6, r2
   d6d1e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d6d20:	f001 fe4c 	bl	d89bc <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d6d24:	b1a7      	cbz	r7, d6d50 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6d26:	68e1      	ldr	r1, [r4, #12]
   d6d28:	6860      	ldr	r0, [r4, #4]
   d6d2a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6d2e:	f001 fe26 	bl	d897e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6d32:	0a29      	lsrs	r1, r5, #8
   d6d34:	6860      	ldr	r0, [r4, #4]
   d6d36:	f7ff ff9b 	bl	d6c70 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6d3a:	4629      	mov	r1, r5
   d6d3c:	6860      	ldr	r0, [r4, #4]
   d6d3e:	f7ff ff97 	bl	d6c70 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d6d42:	6860      	ldr	r0, [r4, #4]
   d6d44:	2100      	movs	r1, #0
   d6d46:	f001 fe35 	bl	d89b4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6d4a:	b148      	cbz	r0, d6d60 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d6d4c:	2400      	movs	r4, #0
   d6d4e:	e000      	b.n	d6d52 <_ZN6MB85RC8readDataEjPhj+0x42>
   d6d50:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6d52:	a801      	add	r0, sp, #4
   d6d54:	f7ff ff9d 	bl	d6c92 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d6d58:	4620      	mov	r0, r4
   d6d5a:	b003      	add	sp, #12
   d6d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d6d60:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d6d62:	7b21      	ldrb	r1, [r4, #12]
   d6d64:	6860      	ldr	r0, [r4, #4]
   d6d66:	46b8      	mov	r8, r7
   d6d68:	bf28      	it	cs
   d6d6a:	f04f 0820 	movcs.w	r8, #32
   d6d6e:	2301      	movs	r3, #1
   d6d70:	4642      	mov	r2, r8
   d6d72:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6d76:	f001 fdec 	bl	d8952 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d6d7a:	f004 f8f9 	bl	daf70 <_Z19__fetch_global_Wirev>
   d6d7e:	6803      	ldr	r3, [r0, #0]
   d6d80:	691b      	ldr	r3, [r3, #16]
   d6d82:	4798      	blx	r3
   d6d84:	4540      	cmp	r0, r8
   d6d86:	dbe1      	blt.n	d6d4c <_ZN6MB85RC8readDataEjPhj+0x3c>
   d6d88:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d6d8c:	f004 f8f0 	bl	daf70 <_Z19__fetch_global_Wirev>
   d6d90:	6803      	ldr	r3, [r0, #0]
   d6d92:	695b      	ldr	r3, [r3, #20]
   d6d94:	4798      	blx	r3
   d6d96:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d6d9a:	454e      	cmp	r6, r9
   d6d9c:	d1f6      	bne.n	d6d8c <_ZN6MB85RC8readDataEjPhj+0x7c>
   d6d9e:	4445      	add	r5, r8
   d6da0:	eba7 0708 	sub.w	r7, r7, r8
   d6da4:	e7be      	b.n	d6d24 <_ZN6MB85RC8readDataEjPhj+0x14>

000d6da6 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6da6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6daa:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6dac:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6dae:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6db0:	460e      	mov	r6, r1
   d6db2:	4690      	mov	r8, r2
   d6db4:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d6db6:	f001 fe01 	bl	d89bc <_ZN7TwoWire4lockEv>
   d6dba:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d6dbe:	f1b9 0f00 	cmp.w	r9, #0
   d6dc2:	d02a      	beq.n	d6e1a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d6dc4:	b34d      	cbz	r5, d6e1a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6dc6:	68e1      	ldr	r1, [r4, #12]
   d6dc8:	6860      	ldr	r0, [r4, #4]
   d6dca:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6dce:	f001 fdd6 	bl	d897e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6dd2:	0a31      	lsrs	r1, r6, #8
   d6dd4:	6860      	ldr	r0, [r4, #4]
   d6dd6:	f7ff ff4b 	bl	d6c70 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6dda:	6860      	ldr	r0, [r4, #4]
   d6ddc:	4631      	mov	r1, r6
   d6dde:	f7ff ff47 	bl	d6c70 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6de2:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d6de6:	4647      	mov	r7, r8
   d6de8:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d6dec:	6860      	ldr	r0, [r4, #4]
   d6dee:	f817 1b01 	ldrb.w	r1, [r7], #1
   d6df2:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d6df4:	3d01      	subs	r5, #1
				wire.write(*data);
   d6df6:	689b      	ldr	r3, [r3, #8]
   d6df8:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6dfa:	4555      	cmp	r5, sl
   d6dfc:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d6e00:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6e02:	d001      	beq.n	d6e08 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d6e04:	2d00      	cmp	r5, #0
   d6e06:	d1f1      	bne.n	d6dec <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d6e08:	6860      	ldr	r0, [r4, #4]
   d6e0a:	2101      	movs	r1, #1
   d6e0c:	f001 fdd2 	bl	d89b4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6e10:	2800      	cmp	r0, #0
   d6e12:	d0d7      	beq.n	d6dc4 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d6e14:	f04f 0900 	mov.w	r9, #0
   d6e18:	e7d1      	b.n	d6dbe <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d6e1a:	a801      	add	r0, sp, #4
   d6e1c:	f7ff ff39 	bl	d6c92 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d6e20:	4648      	mov	r0, r9
   d6e22:	b003      	add	sp, #12
   d6e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6e28 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e2c:	b08b      	sub	sp, #44	; 0x2c
   d6e2e:	460e      	mov	r6, r1
   d6e30:	4615      	mov	r5, r2
   d6e32:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d6e34:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6e36:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6e38:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d6e3a:	f001 fdbf 	bl	d89bc <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d6e3e:	42ae      	cmp	r6, r5
   d6e40:	d229      	bcs.n	d6e96 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d6e42:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d6e44:	4425      	add	r5, r4
			while(numBytes > 0) {
   d6e46:	b18c      	cbz	r4, d6e6c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d6e48:	2c1e      	cmp	r4, #30
   d6e4a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6e4c:	f8d8 3000 	ldr.w	r3, [r8]
   d6e50:	bf28      	it	cs
   d6e52:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d6e54:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d6e56:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6e5a:	aa02      	add	r2, sp, #8
   d6e5c:	463b      	mov	r3, r7
   d6e5e:	4631      	mov	r1, r6
   d6e60:	4640      	mov	r0, r8
				framAddrTo -= count;
   d6e62:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d6e64:	47c8      	blx	r9
				if (!result) {
   d6e66:	b948      	cbnz	r0, d6e7c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6e68:	2400      	movs	r4, #0
   d6e6a:	e000      	b.n	d6e6e <_ZN6MB85RC8moveDataEjjj+0x46>
   d6e6c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6e6e:	a801      	add	r0, sp, #4
   d6e70:	f7ff ff0f 	bl	d6c92 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d6e74:	4620      	mov	r0, r4
   d6e76:	b00b      	add	sp, #44	; 0x2c
   d6e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d6e7c:	f8d8 3000 	ldr.w	r3, [r8]
   d6e80:	aa02      	add	r2, sp, #8
   d6e82:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6e86:	4629      	mov	r1, r5
   d6e88:	463b      	mov	r3, r7
   d6e8a:	4640      	mov	r0, r8
   d6e8c:	47c8      	blx	r9
				if (!result) {
   d6e8e:	2800      	cmp	r0, #0
   d6e90:	d0ea      	beq.n	d6e68 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d6e92:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6e94:	e7d7      	b.n	d6e46 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d6e96:	d9e9      	bls.n	d6e6c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d6e98:	2c00      	cmp	r4, #0
   d6e9a:	d0e7      	beq.n	d6e6c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d6e9c:	f8d8 3000 	ldr.w	r3, [r8]
   d6ea0:	2c1e      	cmp	r4, #30
   d6ea2:	4627      	mov	r7, r4
   d6ea4:	bf28      	it	cs
   d6ea6:	271e      	movcs	r7, #30
   d6ea8:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6eac:	aa02      	add	r2, sp, #8
   d6eae:	463b      	mov	r3, r7
   d6eb0:	4631      	mov	r1, r6
   d6eb2:	4640      	mov	r0, r8
   d6eb4:	47c8      	blx	r9
				if (!result) {
   d6eb6:	2800      	cmp	r0, #0
   d6eb8:	d0d6      	beq.n	d6e68 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d6eba:	f8d8 3000 	ldr.w	r3, [r8]
   d6ebe:	aa02      	add	r2, sp, #8
   d6ec0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6ec4:	4629      	mov	r1, r5
   d6ec6:	463b      	mov	r3, r7
   d6ec8:	4640      	mov	r0, r8
   d6eca:	47c8      	blx	r9
				if (!result) {
   d6ecc:	2800      	cmp	r0, #0
   d6ece:	d0cb      	beq.n	d6e68 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d6ed0:	443e      	add	r6, r7
				framAddrTo += count;
   d6ed2:	443d      	add	r5, r7
				numBytes -= count;
   d6ed4:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6ed6:	e7df      	b.n	d6e98 <_ZN6MB85RC8moveDataEjjj+0x70>

000d6ed8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6ed8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6eda:	4603      	mov	r3, r0
	switch (__op)
   d6edc:	d102      	bne.n	d6ee4 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6ede:	6001      	str	r1, [r0, #0]
      }
   d6ee0:	2000      	movs	r0, #0
   d6ee2:	4770      	bx	lr
	  switch (__op)
   d6ee4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6ee6:	bf04      	itt	eq
   d6ee8:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6eec:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d6ef0:	e7f6      	b.n	d6ee0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d6ef2 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6ef2:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6ef4:	2301      	movs	r3, #1
   d6ef6:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6ef8:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d6efa:	4604      	mov	r4, r0
        if (th->func) {
   d6efc:	b143      	cbz	r3, d6f10 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d6efe:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6f00:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d6f02:	2301      	movs	r3, #1
   d6f04:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6f06:	2000      	movs	r0, #0
    }
   d6f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6f0c:	f000 bbb2 	b.w	d7674 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6f10:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6f12:	2800      	cmp	r0, #0
   d6f14:	d0f5      	beq.n	d6f02 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d6f16:	6883      	ldr	r3, [r0, #8]
   d6f18:	b90b      	cbnz	r3, d6f1e <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d6f1a:	f004 f884 	bl	db026 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6f1e:	68c3      	ldr	r3, [r0, #12]
   d6f20:	e7ee      	b.n	d6f00 <_ZN6Thread3runEPv+0xe>

000d6f22 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6f22:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6f24:	6842      	ldr	r2, [r0, #4]
   d6f26:	4603      	mov	r3, r0
   d6f28:	1054      	asrs	r4, r2, #1
   d6f2a:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6f2e:	07d2      	lsls	r2, r2, #31
   d6f30:	bf48      	it	mi
   d6f32:	590a      	ldrmi	r2, [r1, r4]
   d6f34:	681b      	ldr	r3, [r3, #0]
      }
   d6f36:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6f3a:	bf48      	it	mi
   d6f3c:	58d3      	ldrmi	r3, [r2, r3]
   d6f3e:	4718      	bx	r3

000d6f40 <_ZN21PublishQueueAsyncBase5setupEv>:

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d6f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6f42:	4606      	mov	r6, r0

	if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d6f44:	2000      	movs	r0, #0
   d6f46:	f000 fdb7 	bl	d7ab8 <system_thread_get_state>
   d6f4a:	2801      	cmp	r0, #1
   d6f4c:	d005      	beq.n	d6f5a <_ZN21PublishQueueAsyncBase5setupEv+0x1a>
		pubqLogger.error("SYSTEM_THREAD(ENABLED) is required");
   d6f4e:	4923      	ldr	r1, [pc, #140]	; (d6fdc <_ZN21PublishQueueAsyncBase5setupEv+0x9c>)
   d6f50:	4823      	ldr	r0, [pc, #140]	; (d6fe0 <_ZN21PublishQueueAsyncBase5setupEv+0xa0>)
   d6f52:	f7fd fa94 	bl	d447e <_ZNK5spark6Logger5errorEPKcz>

	os_mutex_create(&mutex);

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);

}
   d6f56:	b003      	add	sp, #12
   d6f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	haveSetup = true;
   d6f5a:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
	os_mutex_create(&mutex);
   d6f5e:	f106 0008 	add.w	r0, r6, #8
   d6f62:	f000 fb4f 	bl	d7604 <os_mutex_create>
	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6f66:	2004      	movs	r0, #4
   d6f68:	f7fd f895 	bl	d4096 <_Znwj>
   d6f6c:	4605      	mov	r5, r0
   d6f6e:	b398      	cbz	r0, d6fd8 <_ZN21PublishQueueAsyncBase5setupEv+0x98>
        : d_(new(std::nothrow) Data)
   d6f70:	491c      	ldr	r1, [pc, #112]	; (d6fe4 <_ZN21PublishQueueAsyncBase5setupEv+0xa4>)
   d6f72:	2014      	movs	r0, #20
   d6f74:	f004 f853 	bl	db01e <_ZnwjRKSt9nothrow_t>
   d6f78:	b130      	cbz	r0, d6f88 <_ZN21PublishQueueAsyncBase5setupEv+0x48>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6f7a:	2300      	movs	r3, #0
            exited(false) {
   d6f7c:	e9c0 3300 	strd	r3, r3, [r0]
   d6f80:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6f84:	7403      	strb	r3, [r0, #16]
   d6f86:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6f88:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6f8a:	b1a0      	cbz	r0, d6fb6 <_ZN21PublishQueueAsyncBase5setupEv+0x76>
        d_->func = function;
   d6f8c:	4b16      	ldr	r3, [pc, #88]	; (d6fe8 <_ZN21PublishQueueAsyncBase5setupEv+0xa8>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6f8e:	4917      	ldr	r1, [pc, #92]	; (d6fec <_ZN21PublishQueueAsyncBase5setupEv+0xac>)
        d_->func_param = function_param;
   d6f90:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6f94:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6f98:	e9cd 0300 	strd	r0, r3, [sp]
   d6f9c:	2202      	movs	r2, #2
   d6f9e:	4b14      	ldr	r3, [pc, #80]	; (d6ff0 <_ZN21PublishQueueAsyncBase5setupEv+0xb0>)
   d6fa0:	3004      	adds	r0, #4
   d6fa2:	f000 faf7 	bl	d7594 <os_thread_create>
   d6fa6:	b930      	cbnz	r0, d6fb6 <_ZN21PublishQueueAsyncBase5setupEv+0x76>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6fa8:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d6faa:	7c1b      	ldrb	r3, [r3, #16]
   d6fac:	b9a3      	cbnz	r3, d6fd8 <_ZN21PublishQueueAsyncBase5setupEv+0x98>
            HAL_Delay_Milliseconds(1);
   d6fae:	2001      	movs	r0, #1
   d6fb0:	f000 fb88 	bl	d76c4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d6fb4:	e7f8      	b.n	d6fa8 <_ZN21PublishQueueAsyncBase5setupEv+0x68>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fb6:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6fb8:	2300      	movs	r3, #0
   d6fba:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d6fbc:	b164      	cbz	r4, d6fd8 <_ZN21PublishQueueAsyncBase5setupEv+0x98>
	if (__ptr != nullptr)
   d6fbe:	6827      	ldr	r7, [r4, #0]
   d6fc0:	b137      	cbz	r7, d6fd0 <_ZN21PublishQueueAsyncBase5setupEv+0x90>
    class function<_Res(_ArgTypes...)>
   d6fc2:	4638      	mov	r0, r7
   d6fc4:	f7fd f998 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6fc8:	2110      	movs	r1, #16
   d6fca:	4638      	mov	r0, r7
   d6fcc:	f004 f825 	bl	db01a <_ZdlPvj>
   d6fd0:	2114      	movs	r1, #20
   d6fd2:	4620      	mov	r0, r4
   d6fd4:	f004 f821 	bl	db01a <_ZdlPvj>
   d6fd8:	6075      	str	r5, [r6, #4]
   d6fda:	e7bc      	b.n	d6f56 <_ZN21PublishQueueAsyncBase5setupEv+0x16>
   d6fdc:	000de3b0 	.word	0x000de3b0
   d6fe0:	2003e594 	.word	0x2003e594
   d6fe4:	000de8e4 	.word	0x000de8e4
   d6fe8:	000d723b 	.word	0x000d723b
   d6fec:	000de3d3 	.word	0x000de3d3
   d6ff0:	000d6ef3 	.word	0x000d6ef3

000d6ff4 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d6ff4:	f247 5130 	movw	r1, #30000	; 0x7530
   d6ff8:	4a08      	ldr	r2, [pc, #32]	; (d701c <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d6ffa:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6ffc:	4908      	ldr	r1, [pc, #32]	; (d7020 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d6ffe:	6002      	str	r2, [r0, #0]
   d7000:	2200      	movs	r2, #0
   d7002:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7006:	4907      	ldr	r1, [pc, #28]	; (d7024 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7008:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d700a:	4907      	ldr	r1, [pc, #28]	; (d7028 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d700c:	6042      	str	r2, [r0, #4]
   d700e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7012:	6181      	str	r1, [r0, #24]
   d7014:	8502      	strh	r2, [r0, #40]	; 0x28
   d7016:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d701a:	4770      	bx	lr
   d701c:	000de5b8 	.word	0x000de5b8
   d7020:	000d7425 	.word	0x000d7425
   d7024:	000d6f23 	.word	0x000d6f23
   d7028:	000d6ed9 	.word	0x000d6ed9

000d702c <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d702c:	b510      	push	{r4, lr}
   d702e:	4b04      	ldr	r3, [pc, #16]	; (d7040 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7030:	4604      	mov	r4, r0
   d7032:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7036:	f7fd f95f 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
}
   d703a:	4620      	mov	r0, r4
   d703c:	bd10      	pop	{r4, pc}
   d703e:	bf00      	nop
   d7040:	000de5b8 	.word	0x000de5b8

000d7044 <_ZN25PublishQueueAsyncRetainedD1Ev>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {

}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7044:	b510      	push	{r4, lr}
   d7046:	4b03      	ldr	r3, [pc, #12]	; (d7054 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7048:	6003      	str	r3, [r0, #0]
   d704a:	4604      	mov	r4, r0
   d704c:	f7ff ffee 	bl	d702c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7050:	4620      	mov	r0, r4
   d7052:	bd10      	pop	{r4, pc}
   d7054:	000de5e0 	.word	0x000de5e0

000d7058 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7058:	b510      	push	{r4, lr}
   d705a:	4604      	mov	r4, r0
}
   d705c:	f7ff fff2 	bl	d7044 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7060:	4620      	mov	r0, r4
   d7062:	2138      	movs	r1, #56	; 0x38
   d7064:	f003 ffd9 	bl	db01a <_ZdlPvj>
   d7068:	4620      	mov	r0, r4
   d706a:	bd10      	pop	{r4, pc}

000d706c <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d706c:	6880      	ldr	r0, [r0, #8]
   d706e:	f000 bad1 	b.w	d7614 <os_mutex_lock>

000d7072 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7072:	6880      	ldr	r0, [r0, #8]
   d7074:	f000 bad6 	b.w	d7624 <os_mutex_unlock>

000d7078 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d7078:	b510      	push	{r4, lr}
   d707a:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d707c:	6800      	ldr	r0, [r0, #0]
   d707e:	f7ff fff8 	bl	d7072 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7082:	4620      	mov	r0, r4
   d7084:	bd10      	pop	{r4, pc}

000d7086 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d7086:	b513      	push	{r0, r1, r4, lr}
   d7088:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d708a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d708c:	f7ff ffee 	bl	d706c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7092:	88dc      	ldrh	r4, [r3, #6]
   d7094:	b2a4      	uxth	r4, r4
   d7096:	b10c      	cbz	r4, d709c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d7098:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d709c:	a801      	add	r0, sp, #4
   d709e:	f7ff ffeb 	bl	d7078 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d70a2:	4620      	mov	r0, r4
   d70a4:	b002      	add	sp, #8
   d70a6:	bd10      	pop	{r4, pc}

000d70a8 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d70a8:	b513      	push	{r0, r1, r4, lr}
   d70aa:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d70ac:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d70ae:	f7ff ffdd 	bl	d706c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d70b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	hdr->numEvents = 0;
	nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	isSending = false;
	lastPublish = 0;

    pubqLogger.trace("clearEvents numEvents=%d size=%d", (int)hdr->numEvents, (int)hdr->size);
   d70b4:	4809      	ldr	r0, [pc, #36]	; (d70dc <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x34>)
	hdr->numEvents = 0;
   d70b6:	2300      	movs	r3, #0
   d70b8:	80d3      	strh	r3, [r2, #6]
	nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d70ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	isSending = false;
   d70bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d70c0:	3108      	adds	r1, #8
   d70c2:	6361      	str	r1, [r4, #52]	; 0x34
	lastPublish = 0;
   d70c4:	6263      	str	r3, [r4, #36]	; 0x24
    pubqLogger.trace("clearEvents numEvents=%d size=%d", (int)hdr->numEvents, (int)hdr->size);
   d70c6:	8893      	ldrh	r3, [r2, #4]
   d70c8:	4905      	ldr	r1, [pc, #20]	; (d70e0 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x38>)
   d70ca:	88d2      	ldrh	r2, [r2, #6]
   d70cc:	f7ff f862 	bl	d6194 <_ZNK5spark6Logger5traceEPKcz>
	StMutexLock lock(this);
   d70d0:	a801      	add	r0, sp, #4
   d70d2:	f7ff ffd1 	bl	d7078 <_ZN11StMutexLockD1Ev>

	return true;
}
   d70d6:	2001      	movs	r0, #1
   d70d8:	b002      	add	sp, #8
   d70da:	bd10      	pop	{r4, pc}
   d70dc:	2003e594 	.word	0x2003e594
   d70e0:	000de3e5 	.word	0x000de3e5

000d70e4 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d70e4:	b513      	push	{r0, r1, r4, lr}
   d70e6:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d70e8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d70ea:	f7ff ffbf 	bl	d706c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d70ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d70f0:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d70f2:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d70f4:	f7ff ffc0 	bl	d7078 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d70f8:	4620      	mov	r0, r4
   d70fa:	b002      	add	sp, #8
   d70fc:	bd10      	pop	{r4, pc}
	...

000d7100 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7104:	4699      	mov	r9, r3
   d7106:	b086      	sub	sp, #24
	if (!haveSetup) {
   d7108:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d710c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7110:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7114:	4604      	mov	r4, r0
   d7116:	460f      	mov	r7, r1
   d7118:	4616      	mov	r6, r2
	if (!haveSetup) {
   d711a:	b913      	cbnz	r3, d7122 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d711c:	6803      	ldr	r3, [r0, #0]
   d711e:	689b      	ldr	r3, [r3, #8]
   d7120:	4798      	blx	r3
		data = "";
   d7122:	4b39      	ldr	r3, [pc, #228]	; (d7208 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x108>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7124:	4638      	mov	r0, r7
		data = "";
   d7126:	2e00      	cmp	r6, #0
   d7128:	bf08      	it	eq
   d712a:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d712c:	f004 fdb9 	bl	dbca2 <strlen>
   d7130:	4605      	mov	r5, r0
   d7132:	4630      	mov	r0, r6
   d7134:	f004 fdb5 	bl	dbca2 <strlen>
   d7138:	4428      	add	r0, r5
   d713a:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d713e:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d7140:	bf1c      	itt	ne
   d7142:	f025 0503 	bicne.w	r5, r5, #3
   d7146:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7148:	4633      	mov	r3, r6
   d714a:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d714e:	e9cd 9a00 	strd	r9, sl, [sp]
   d7152:	492e      	ldr	r1, [pc, #184]	; (d720c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x10c>)
   d7154:	482e      	ldr	r0, [pc, #184]	; (d7210 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>)
   d7156:	463a      	mov	r2, r7
   d7158:	f7fd f97a 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d715c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d715e:	3b08      	subs	r3, #8
   d7160:	42ab      	cmp	r3, r5
   d7162:	d212      	bcs.n	d718a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d7164:	2400      	movs	r4, #0
}
   d7166:	4620      	mov	r0, r4
   d7168:	b006      	add	sp, #24
   d716a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d716e:	88db      	ldrh	r3, [r3, #6]
   d7170:	2b01      	cmp	r3, #1
   d7172:	d047      	beq.n	d7204 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x104>
			StMutexLock lock(this);
   d7174:	a805      	add	r0, sp, #20
   d7176:	f7ff ff7f 	bl	d7078 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d717a:	6823      	ldr	r3, [r4, #0]
   d717c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d7180:	699b      	ldr	r3, [r3, #24]
   d7182:	4620      	mov	r0, r4
   d7184:	4798      	blx	r3
   d7186:	2800      	cmp	r0, #0
   d7188:	d0ec      	beq.n	d7164 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d718a:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d718c:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d718e:	f7ff ff6d 	bl	d706c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7192:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d7194:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d7196:	6b62      	ldr	r2, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7198:	4419      	add	r1, r3
			if ((size_t)(end - nextFree) >= size) {
   d719a:	1a89      	subs	r1, r1, r2
   d719c:	42a9      	cmp	r1, r5
   d719e:	d3e6      	bcc.n	d716e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				pubqLogger.trace("saving event at nextFree=%d", (int)(nextFree - retainedBuffer));
   d71a0:	1ad2      	subs	r2, r2, r3
   d71a2:	491c      	ldr	r1, [pc, #112]	; (d7214 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x114>)
   d71a4:	481a      	ldr	r0, [pc, #104]	; (d7210 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>)
   d71a6:	f7fe fff5 	bl	d6194 <_ZNK5spark6Logger5traceEPKcz>
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
   d71aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
				eventData->flags = flags1.value() | flags2.value();
   d71ac:	ea48 080a 	orr.w	r8, r8, sl
   d71b0:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->size = size;
   d71b4:	80dd      	strh	r5, [r3, #6]
				eventData->ttl = ttl;
   d71b6:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d71ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d71bc:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d71c0:	4639      	mov	r1, r7
   d71c2:	4640      	mov	r0, r8
   d71c4:	f004 fd47 	bl	dbc56 <strcpy>
				cp += strlen(cp) + 1;
   d71c8:	4640      	mov	r0, r8
   d71ca:	f004 fd6a 	bl	dbca2 <strlen>
   d71ce:	3001      	adds	r0, #1
				strcpy(cp, data);
   d71d0:	4631      	mov	r1, r6
   d71d2:	4440      	add	r0, r8
   d71d4:	f004 fd3f 	bl	dbc56 <strcpy>
				nextFree += size;
   d71d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d71da:	441d      	add	r5, r3
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d71dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
				nextFree += size;
   d71de:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d71e0:	88da      	ldrh	r2, [r3, #6]
   d71e2:	3201      	adds	r2, #1
   d71e4:	b292      	uxth	r2, r2
   d71e6:	80da      	strh	r2, [r3, #6]
				pubqLogger.trace("after saving numEvents=%d nextFree=%d end=%d", (int)hdr->numEvents, (int)(nextFree - retainedBuffer), retainedBufferSize);
   d71e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d71ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d71ec:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   d71ee:	9000      	str	r0, [sp, #0]
   d71f0:	1acb      	subs	r3, r1, r3
   d71f2:	4807      	ldr	r0, [pc, #28]	; (d7210 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>)
   d71f4:	4908      	ldr	r1, [pc, #32]	; (d7218 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x118>)
   d71f6:	f7fe ffcd 	bl	d6194 <_ZNK5spark6Logger5traceEPKcz>
				return true;
   d71fa:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d71fc:	a805      	add	r0, sp, #20
   d71fe:	f7ff ff3b 	bl	d7078 <_ZN11StMutexLockD1Ev>
   d7202:	e7b0      	b.n	d7166 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d7204:	2400      	movs	r4, #0
   d7206:	e7f9      	b.n	d71fc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
   d7208:	000de761 	.word	0x000de761
   d720c:	000de406 	.word	0x000de406
   d7210:	2003e594 	.word	0x2003e594
   d7214:	000de447 	.word	0x000de447
   d7218:	000de463 	.word	0x000de463

000d721c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d721c:	b508      	push	{r3, lr}
   d721e:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7220:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7224:	69a3      	ldr	r3, [r4, #24]
   d7226:	b90b      	cbnz	r3, d722c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d7228:	f003 fefd 	bl	db026 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d722c:	69e3      	ldr	r3, [r4, #28]
   d722e:	4621      	mov	r1, r4
   d7230:	4628      	mov	r0, r5
   d7232:	4798      	blx	r3
		os_thread_yield();
   d7234:	f000 f9b6 	bl	d75a4 <os_thread_yield>
	while(true) {
   d7238:	e7f4      	b.n	d7224 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d723a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d723a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d723c:	f7ff ffee 	bl	d721c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7240 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7240:	b538      	push	{r3, r4, r5, lr}
   d7242:	4603      	mov	r3, r0
   d7244:	4614      	mov	r4, r2
   d7246:	460d      	mov	r5, r1
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7248:	f7ff fed4 	bl	d6ff4 <_ZN21PublishQueueAsyncBaseC1Ev>
   d724c:	4a03      	ldr	r2, [pc, #12]	; (d725c <_ZN25PublishQueueAsyncRetainedC1EPht+0x1c>)
   d724e:	601a      	str	r2, [r3, #0]
   d7250:	2200      	movs	r2, #0
   d7252:	62dd      	str	r5, [r3, #44]	; 0x2c
   d7254:	861c      	strh	r4, [r3, #48]	; 0x30
   d7256:	635a      	str	r2, [r3, #52]	; 0x34
}
   d7258:	4618      	mov	r0, r3
   d725a:	bd38      	pop	{r3, r4, r5, pc}
   d725c:	000de5e0 	.word	0x000de5e0

000d7260 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7260:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7262:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7266:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7268:	4628      	mov	r0, r5
   d726a:	f004 fd1a 	bl	dbca2 <strlen>
   d726e:	3001      	adds	r0, #1
   d7270:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7272:	4628      	mov	r0, r5
   d7274:	f004 fd15 	bl	dbca2 <strlen>
	size_t offset = start - retainedBuffer;
   d7278:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d727a:	3001      	adds	r0, #1
   d727c:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d727e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7280:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7284:	bf1c      	itt	ne
   d7286:	f1c3 0304 	rsbne	r3, r3, #4
   d728a:	18c0      	addne	r0, r0, r3
}
   d728c:	bd68      	pop	{r3, r5, r6, pc}
	...

000d7290 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d7290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d7294:	4604      	mov	r4, r0
   d7296:	460f      	mov	r7, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7298:	9003      	str	r0, [sp, #12]
		publishQueue->mutexLock();
   d729a:	f7ff fee7 	bl	d706c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d729e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d72a0:	88eb      	ldrh	r3, [r5, #6]
   d72a2:	f105 0608 	add.w	r6, r5, #8
	if (secondEvent) {
   d72a6:	2f00      	cmp	r7, #0
   d72a8:	d034      	beq.n	d7314 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x84>
		if (hdr->numEvents < 2) {
   d72aa:	2b01      	cmp	r3, #1
   d72ac:	d93b      	bls.n	d7326 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x96>
		start = skipEvent(start);
   d72ae:	4631      	mov	r1, r6
   d72b0:	4620      	mov	r0, r4
   d72b2:	f7ff ffd5 	bl	d7260 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d72b6:	4606      	mov	r6, r0
	uint8_t *next = skipEvent(start);
   d72b8:	4631      	mov	r1, r6
   d72ba:	4620      	mov	r0, r4
   d72bc:	f7ff ffd0 	bl	d7260 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	pubqLogger.trace("discardOldestEvent secondEvent=%d start=%d next=%d nextFree=%d", (int)secondEvent, (int)(start - retainedBuffer), (int)(next - retainedBuffer), (int)(nextFree - retainedBuffer));
   d72c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d72c2:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
	pubqLogger.trace("discardOldestEvent secondEvent=%d start=%d next=%d nextFree=%d", (int)secondEvent, (int)(start - retainedBuffer), (int)(next - retainedBuffer), (int)(nextFree - retainedBuffer));
   d72c6:	4919      	ldr	r1, [pc, #100]	; (d732c <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x9c>)
   d72c8:	1b5b      	subs	r3, r3, r5
   d72ca:	9301      	str	r3, [sp, #4]
   d72cc:	1b43      	subs	r3, r0, r5
	uint8_t *next = skipEvent(start);
   d72ce:	4680      	mov	r8, r0
	pubqLogger.trace("discardOldestEvent secondEvent=%d start=%d next=%d nextFree=%d", (int)secondEvent, (int)(start - retainedBuffer), (int)(next - retainedBuffer), (int)(nextFree - retainedBuffer));
   d72d0:	9300      	str	r3, [sp, #0]
   d72d2:	463a      	mov	r2, r7
	size_t len = next - start;
   d72d4:	eba0 0a06 	sub.w	sl, r0, r6
	pubqLogger.trace("discardOldestEvent secondEvent=%d start=%d next=%d nextFree=%d", (int)secondEvent, (int)(start - retainedBuffer), (int)(next - retainedBuffer), (int)(nextFree - retainedBuffer));
   d72d8:	1b73      	subs	r3, r6, r5
   d72da:	4815      	ldr	r0, [pc, #84]	; (d7330 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0xa0>)
   d72dc:	f7fe ff5a 	bl	d6194 <_ZNK5spark6Logger5traceEPKcz>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d72e0:	eb05 0209 	add.w	r2, r5, r9
	if (after > 0) {
   d72e4:	ebb2 0208 	subs.w	r2, r2, r8
   d72e8:	d003      	beq.n	d72f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x62>
		memmove(start, next, after);
   d72ea:	4641      	mov	r1, r8
   d72ec:	4630      	mov	r0, r6
   d72ee:	f004 fc4b 	bl	dbb88 <memmove>
	nextFree -= len;
   d72f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
	pubqLogger.trace("after discardOldestEvent numEvents=%d nextFree=%d", hdr->numEvents, (int)(nextFree - retainedBuffer));
   d72f4:	480e      	ldr	r0, [pc, #56]	; (d7330 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0xa0>)
	nextFree -= len;
   d72f6:	eba3 030a 	sub.w	r3, r3, sl
   d72fa:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d72fc:	88ea      	ldrh	r2, [r5, #6]
   d72fe:	3a01      	subs	r2, #1
   d7300:	b292      	uxth	r2, r2
   d7302:	80ea      	strh	r2, [r5, #6]
	pubqLogger.trace("after discardOldestEvent numEvents=%d nextFree=%d", hdr->numEvents, (int)(nextFree - retainedBuffer));
   d7304:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d7306:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d7308:	1acb      	subs	r3, r1, r3
   d730a:	490a      	ldr	r1, [pc, #40]	; (d7334 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0xa4>)
   d730c:	f7fe ff42 	bl	d6194 <_ZNK5spark6Logger5traceEPKcz>
	return true;
   d7310:	2701      	movs	r7, #1
   d7312:	e001      	b.n	d7318 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x88>
		if (hdr->numEvents < 1) {
   d7314:	2b00      	cmp	r3, #0
   d7316:	d1cf      	bne.n	d72b8 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x28>
	StMutexLock lock(this);
   d7318:	a803      	add	r0, sp, #12
   d731a:	f7ff fead 	bl	d7078 <_ZN11StMutexLockD1Ev>
}
   d731e:	4638      	mov	r0, r7
   d7320:	b004      	add	sp, #16
   d7322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return false;
   d7326:	2700      	movs	r7, #0
   d7328:	e7f6      	b.n	d7318 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x88>
   d732a:	bf00      	nop
   d732c:	000de490 	.word	0x000de490
   d7330:	2003e594 	.word	0x2003e594
   d7334:	000de4cf 	.word	0x000de4cf

000d7338 <_ZN25PublishQueueAsyncRetained5setupEv>:
void PublishQueueAsyncRetained::setup() {
   d7338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d733c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d733e:	4f1d      	ldr	r7, [pc, #116]	; (d73b4 <_ZN25PublishQueueAsyncRetained5setupEv+0x7c>)
   d7340:	682b      	ldr	r3, [r5, #0]
   d7342:	42bb      	cmp	r3, r7
void PublishQueueAsyncRetained::setup() {
   d7344:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7346:	d11f      	bne.n	d7388 <_ZN25PublishQueueAsyncRetained5setupEv+0x50>
   d7348:	88ab      	ldrh	r3, [r5, #4]
   d734a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   d734c:	b29b      	uxth	r3, r3
   d734e:	4293      	cmp	r3, r2
   d7350:	d11a      	bne.n	d7388 <_ZN25PublishQueueAsyncRetained5setupEv+0x50>
		pubqLogger.trace("retained numEvents=%d", (int)hdr->numEvents);
   d7352:	88ea      	ldrh	r2, [r5, #6]
   d7354:	4918      	ldr	r1, [pc, #96]	; (d73b8 <_ZN25PublishQueueAsyncRetained5setupEv+0x80>)
   d7356:	4819      	ldr	r0, [pc, #100]	; (d73bc <_ZN25PublishQueueAsyncRetained5setupEv+0x84>)
   d7358:	b292      	uxth	r2, r2
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d735a:	18ee      	adds	r6, r5, r3
		pubqLogger.trace("retained numEvents=%d", (int)hdr->numEvents);
   d735c:	f7fe ff1a 	bl	d6194 <_ZNK5spark6Logger5traceEPKcz>
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7360:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d7362:	3308      	adds	r3, #8
   d7364:	6363      	str	r3, [r4, #52]	; 0x34
   d7366:	f04f 0800 	mov.w	r8, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d736a:	88eb      	ldrh	r3, [r5, #6]
   d736c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d736e:	b29b      	uxth	r3, r3
   d7370:	fa1f f288 	uxth.w	r2, r8
   d7374:	4293      	cmp	r3, r2
   d7376:	d90f      	bls.n	d7398 <_ZN25PublishQueueAsyncRetained5setupEv+0x60>
			nextFree = skipEvent(nextFree);
   d7378:	4620      	mov	r0, r4
   d737a:	f7ff ff71 	bl	d7260 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d737e:	42b0      	cmp	r0, r6
			nextFree = skipEvent(nextFree);
   d7380:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7382:	f108 0801 	add.w	r8, r8, #1
   d7386:	d9f0      	bls.n	d736a <_ZN25PublishQueueAsyncRetained5setupEv+0x32>
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d7388:	602f      	str	r7, [r5, #0]
		hdr->size = retainedBufferSize;
   d738a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d738c:	80ab      	strh	r3, [r5, #4]
		hdr->numEvents = 0;
   d738e:	2300      	movs	r3, #0
   d7390:	80eb      	strh	r3, [r5, #6]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d7394:	3308      	adds	r3, #8
   d7396:	6363      	str	r3, [r4, #52]	; 0x34
	pubqLogger.trace("at init numEvents=%d nextFree=%d", (int)hdr->numEvents, (int)(nextFree - retainedBuffer));
   d7398:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d739a:	88ea      	ldrh	r2, [r5, #6]
   d739c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d739e:	4807      	ldr	r0, [pc, #28]	; (d73bc <_ZN25PublishQueueAsyncRetained5setupEv+0x84>)
   d73a0:	1acb      	subs	r3, r1, r3
   d73a2:	b292      	uxth	r2, r2
   d73a4:	4906      	ldr	r1, [pc, #24]	; (d73c0 <_ZN25PublishQueueAsyncRetained5setupEv+0x88>)
   d73a6:	f7fe fef5 	bl	d6194 <_ZNK5spark6Logger5traceEPKcz>
	PublishQueueAsyncBase::setup();
   d73aa:	4620      	mov	r0, r4
}
   d73ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	PublishQueueAsyncBase::setup();
   d73b0:	f7ff bdc6 	b.w	d6f40 <_ZN21PublishQueueAsyncBase5setupEv>
   d73b4:	d19cab61 	.word	0xd19cab61
   d73b8:	000de501 	.word	0x000de501
   d73bc:	2003e594 	.word	0x2003e594
   d73c0:	000de517 	.word	0x000de517

000d73c4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d73c4:	b510      	push	{r4, lr}
   d73c6:	e9d1 2300 	ldrd	r2, r3, [r1]
   d73ca:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d73cc:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d73ce:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d73d0:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d73d2:	b90a      	cbnz	r2, d73d8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d73d4:	07d9      	lsls	r1, r3, #31
   d73d6:	d505      	bpl.n	d73e4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d73d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d73dc:	4b0f      	ldr	r3, [pc, #60]	; (d741c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d73de:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d73e0:	4b0f      	ldr	r3, [pc, #60]	; (d7420 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d73e2:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73e4:	ab02      	add	r3, sp, #8
   d73e6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d73ea:	466a      	mov	r2, sp
   d73ec:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d73f0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d73f4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d73f8:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73fc:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d73fe:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7402:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7404:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7406:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7408:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d740a:	4618      	mov	r0, r3
   d740c:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d740e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7410:	9105      	str	r1, [sp, #20]
   d7412:	f7fc ff71 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
	}
   d7416:	4620      	mov	r0, r4
   d7418:	b006      	add	sp, #24
   d741a:	bd10      	pop	{r4, pc}
   d741c:	000d6f23 	.word	0x000d6f23
   d7420:	000d6ed9 	.word	0x000d6ed9

000d7424 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7424:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7426:	4b05      	ldr	r3, [pc, #20]	; (d743c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7428:	9300      	str	r3, [sp, #0]
   d742a:	4669      	mov	r1, sp
   d742c:	2300      	movs	r3, #0
   d742e:	3010      	adds	r0, #16
   d7430:	9301      	str	r3, [sp, #4]
   d7432:	f7ff ffc7 	bl	d73c4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7436:	b003      	add	sp, #12
   d7438:	f85d fb04 	ldr.w	pc, [sp], #4
   d743c:	000d746d 	.word	0x000d746d

000d7440 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7440:	b513      	push	{r0, r1, r4, lr}
   d7442:	4604      	mov	r4, r0
   d7444:	f000 f94e 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7448:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d744a:	1ac0      	subs	r0, r0, r3
   d744c:	68e3      	ldr	r3, [r4, #12]
   d744e:	4298      	cmp	r0, r3
   d7450:	d308      	bcc.n	d7464 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7452:	4b05      	ldr	r3, [pc, #20]	; (d7468 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7454:	9300      	str	r3, [sp, #0]
   d7456:	4669      	mov	r1, sp
   d7458:	2300      	movs	r3, #0
   d745a:	f104 0010 	add.w	r0, r4, #16
   d745e:	9301      	str	r3, [sp, #4]
   d7460:	f7ff ffb0 	bl	d73c4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7464:	b002      	add	sp, #8
   d7466:	bd10      	pop	{r4, pc}
   d7468:	000d746d 	.word	0x000d746d

000d746c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7470:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7474:	b086      	sub	sp, #24
   d7476:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7478:	2b00      	cmp	r3, #0
   d747a:	d140      	bne.n	d74fe <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d747c:	f000 fb7e 	bl	d7b7c <spark_cloud_flag_connected>
   d7480:	2800      	cmp	r0, #0
   d7482:	d03c      	beq.n	d74fe <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7484:	f000 f92e 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
   d7488:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d748a:	1ac0      	subs	r0, r0, r3
   d748c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7490:	4298      	cmp	r0, r3
   d7492:	d934      	bls.n	d74fe <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
		PublishQueueEventData *data = getOldestEvent();
   d7494:	6823      	ldr	r3, [r4, #0]
   d7496:	4620      	mov	r0, r4
   d7498:	695b      	ldr	r3, [r3, #20]
   d749a:	4798      	blx	r3
		if (data) {
   d749c:	4605      	mov	r5, r0
   d749e:	b370      	cbz	r0, d74fe <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d74a0:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d74a4:	2301      	movs	r3, #1
   d74a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d74aa:	4638      	mov	r0, r7
   d74ac:	f004 fbf9 	bl	dbca2 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d74b0:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d74b4:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d74b8:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d74ba:	682b      	ldr	r3, [r5, #0]
   d74bc:	4927      	ldr	r1, [pc, #156]	; (d755c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf0>)
   d74be:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d74c0:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d74c2:	4633      	mov	r3, r6
   d74c4:	4826      	ldr	r0, [pc, #152]	; (d7560 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf4>)
   d74c6:	463a      	mov	r2, r7
   d74c8:	f7fc ffc2 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d74cc:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d74ce:	f88d 8000 	strb.w	r8, [sp]
   d74d2:	4632      	mov	r2, r6
   d74d4:	4639      	mov	r1, r7
   d74d6:	a802      	add	r0, sp, #8
   d74d8:	f000 ff62 	bl	d83a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d74dc:	9d02      	ldr	r5, [sp, #8]
   d74de:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d74e0:	b983      	cbnz	r3, d7504 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x98>
				delay(1);
   d74e2:	2001      	movs	r0, #1
   d74e4:	f000 fc6e 	bl	d7dc4 <delay>
				if (!isSending) {
   d74e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d74ec:	2b00      	cmp	r3, #0
   d74ee:	d1f5      	bne.n	d74dc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x70>
					pubqLogger.info("publish canceled");
   d74f0:	491c      	ldr	r1, [pc, #112]	; (d7564 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>)
   d74f2:	481b      	ldr	r0, [pc, #108]	; (d7560 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf4>)
   d74f4:	f7fc ffac 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
   d74f8:	a803      	add	r0, sp, #12
   d74fa:	f7fd fd6b 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d74fe:	b006      	add	sp, #24
   d7500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7504:	2000      	movs	r0, #0
   d7506:	f000 fac7 	bl	d7a98 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d750a:	b120      	cbz	r0, d7516 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d750c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d750e:	b913      	cbnz	r3, d7516 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
        spark_process();
   d7510:	f000 fb24 	bl	d7b5c <spark_process>
    }
   d7514:	e7fa      	b.n	d750c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xa0>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7516:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7518:	2b01      	cmp	r3, #1
   d751a:	d10f      	bne.n	d753c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xd0>
				pubqLogger.info("published successfully");
   d751c:	4912      	ldr	r1, [pc, #72]	; (d7568 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xfc>)
   d751e:	4810      	ldr	r0, [pc, #64]	; (d7560 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf4>)
   d7520:	f7fc ff96 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d7524:	6823      	ldr	r3, [r4, #0]
   d7526:	2100      	movs	r1, #0
   d7528:	699b      	ldr	r3, [r3, #24]
   d752a:	4620      	mov	r0, r4
   d752c:	4798      	blx	r3
			isSending = false;
   d752e:	2300      	movs	r3, #0
   d7530:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d7534:	f000 f8d6 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7538:	6260      	str	r0, [r4, #36]	; 0x24
   d753a:	e7dd      	b.n	d74f8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x8c>
				pubqLogger.info("publish failed, will retry in %lu ms", failureRetryMs);
   d753c:	68e2      	ldr	r2, [r4, #12]
   d753e:	490b      	ldr	r1, [pc, #44]	; (d756c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7540:	4807      	ldr	r0, [pc, #28]	; (d7560 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf4>)
   d7542:	f7fc ff85 	bl	d4450 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7546:	4b0a      	ldr	r3, [pc, #40]	; (d7570 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7548:	9304      	str	r3, [sp, #16]
   d754a:	a904      	add	r1, sp, #16
   d754c:	2300      	movs	r3, #0
   d754e:	f104 0010 	add.w	r0, r4, #16
   d7552:	9305      	str	r3, [sp, #20]
   d7554:	f7ff ff36 	bl	d73c4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7558:	e7e9      	b.n	d752e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xc2>
   d755a:	bf00      	nop
   d755c:	000de538 	.word	0x000de538
   d7560:	2003e594 	.word	0x2003e594
   d7564:	000de559 	.word	0x000de559
   d7568:	000de56a 	.word	0x000de56a
   d756c:	000de581 	.word	0x000de581
   d7570:	000d7441 	.word	0x000d7441

000d7574 <_GLOBAL__sub_I_pubqLogger>:
   d7574:	4b01      	ldr	r3, [pc, #4]	; (d757c <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7576:	4a02      	ldr	r2, [pc, #8]	; (d7580 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7578:	601a      	str	r2, [r3, #0]
}
   d757a:	4770      	bx	lr
   d757c:	2003e594 	.word	0x2003e594
   d7580:	000de5a6 	.word	0x000de5a6

000d7584 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7584:	b508      	push	{r3, lr}
   d7586:	4b02      	ldr	r3, [pc, #8]	; (d7590 <cellular_signal+0xc>)
   d7588:	681b      	ldr	r3, [r3, #0]
   d758a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d758c:	9301      	str	r3, [sp, #4]
   d758e:	bd08      	pop	{r3, pc}
   d7590:	00030274 	.word	0x00030274

000d7594 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7594:	b508      	push	{r3, lr}
   d7596:	4b02      	ldr	r3, [pc, #8]	; (d75a0 <os_thread_create+0xc>)
   d7598:	681b      	ldr	r3, [r3, #0]
   d759a:	685b      	ldr	r3, [r3, #4]
   d759c:	9301      	str	r3, [sp, #4]
   d759e:	bd08      	pop	{r3, pc}
   d75a0:	00030248 	.word	0x00030248

000d75a4 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d75a4:	b508      	push	{r3, lr}
   d75a6:	4b02      	ldr	r3, [pc, #8]	; (d75b0 <os_thread_yield+0xc>)
   d75a8:	681b      	ldr	r3, [r3, #0]
   d75aa:	68db      	ldr	r3, [r3, #12]
   d75ac:	9301      	str	r3, [sp, #4]
   d75ae:	bd08      	pop	{r3, pc}
   d75b0:	00030248 	.word	0x00030248

000d75b4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d75b4:	b508      	push	{r3, lr}
   d75b6:	4b02      	ldr	r3, [pc, #8]	; (d75c0 <os_thread_scheduling+0xc>)
   d75b8:	681b      	ldr	r3, [r3, #0]
   d75ba:	69db      	ldr	r3, [r3, #28]
   d75bc:	9301      	str	r3, [sp, #4]
   d75be:	bd08      	pop	{r3, pc}
   d75c0:	00030248 	.word	0x00030248

000d75c4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d75c4:	b508      	push	{r3, lr}
   d75c6:	4b02      	ldr	r3, [pc, #8]	; (d75d0 <os_timer_create+0xc>)
   d75c8:	681b      	ldr	r3, [r3, #0]
   d75ca:	6a1b      	ldr	r3, [r3, #32]
   d75cc:	9301      	str	r3, [sp, #4]
   d75ce:	bd08      	pop	{r3, pc}
   d75d0:	00030248 	.word	0x00030248

000d75d4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d75d4:	b508      	push	{r3, lr}
   d75d6:	4b02      	ldr	r3, [pc, #8]	; (d75e0 <os_timer_destroy+0xc>)
   d75d8:	681b      	ldr	r3, [r3, #0]
   d75da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d75dc:	9301      	str	r3, [sp, #4]
   d75de:	bd08      	pop	{r3, pc}
   d75e0:	00030248 	.word	0x00030248

000d75e4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d75e4:	b508      	push	{r3, lr}
   d75e6:	4b02      	ldr	r3, [pc, #8]	; (d75f0 <os_timer_get_id+0xc>)
   d75e8:	681b      	ldr	r3, [r3, #0]
   d75ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d75ec:	9301      	str	r3, [sp, #4]
   d75ee:	bd08      	pop	{r3, pc}
   d75f0:	00030248 	.word	0x00030248

000d75f4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d75f4:	b508      	push	{r3, lr}
   d75f6:	4b02      	ldr	r3, [pc, #8]	; (d7600 <os_timer_change+0xc>)
   d75f8:	681b      	ldr	r3, [r3, #0]
   d75fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d75fc:	9301      	str	r3, [sp, #4]
   d75fe:	bd08      	pop	{r3, pc}
   d7600:	00030248 	.word	0x00030248

000d7604 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7604:	b508      	push	{r3, lr}
   d7606:	4b02      	ldr	r3, [pc, #8]	; (d7610 <os_mutex_create+0xc>)
   d7608:	681b      	ldr	r3, [r3, #0]
   d760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d760c:	9301      	str	r3, [sp, #4]
   d760e:	bd08      	pop	{r3, pc}
   d7610:	00030248 	.word	0x00030248

000d7614 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7614:	b508      	push	{r3, lr}
   d7616:	4b02      	ldr	r3, [pc, #8]	; (d7620 <os_mutex_lock+0xc>)
   d7618:	681b      	ldr	r3, [r3, #0]
   d761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d761c:	9301      	str	r3, [sp, #4]
   d761e:	bd08      	pop	{r3, pc}
   d7620:	00030248 	.word	0x00030248

000d7624 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7624:	b508      	push	{r3, lr}
   d7626:	4b02      	ldr	r3, [pc, #8]	; (d7630 <os_mutex_unlock+0xc>)
   d7628:	681b      	ldr	r3, [r3, #0]
   d762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d762c:	9301      	str	r3, [sp, #4]
   d762e:	bd08      	pop	{r3, pc}
   d7630:	00030248 	.word	0x00030248

000d7634 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7634:	b508      	push	{r3, lr}
   d7636:	4b02      	ldr	r3, [pc, #8]	; (d7640 <os_mutex_recursive_create+0xc>)
   d7638:	681b      	ldr	r3, [r3, #0]
   d763a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d763c:	9301      	str	r3, [sp, #4]
   d763e:	bd08      	pop	{r3, pc}
   d7640:	00030248 	.word	0x00030248

000d7644 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7644:	b508      	push	{r3, lr}
   d7646:	4b02      	ldr	r3, [pc, #8]	; (d7650 <os_mutex_recursive_destroy+0xc>)
   d7648:	681b      	ldr	r3, [r3, #0]
   d764a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d764c:	9301      	str	r3, [sp, #4]
   d764e:	bd08      	pop	{r3, pc}
   d7650:	00030248 	.word	0x00030248

000d7654 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7654:	b508      	push	{r3, lr}
   d7656:	4b02      	ldr	r3, [pc, #8]	; (d7660 <os_mutex_recursive_lock+0xc>)
   d7658:	681b      	ldr	r3, [r3, #0]
   d765a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d765c:	9301      	str	r3, [sp, #4]
   d765e:	bd08      	pop	{r3, pc}
   d7660:	00030248 	.word	0x00030248

000d7664 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7664:	b508      	push	{r3, lr}
   d7666:	4b02      	ldr	r3, [pc, #8]	; (d7670 <os_mutex_recursive_unlock+0xc>)
   d7668:	681b      	ldr	r3, [r3, #0]
   d766a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d766c:	9301      	str	r3, [sp, #4]
   d766e:	bd08      	pop	{r3, pc}
   d7670:	00030248 	.word	0x00030248

000d7674 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7674:	b508      	push	{r3, lr}
   d7676:	4b02      	ldr	r3, [pc, #8]	; (d7680 <os_thread_exit+0xc>)
   d7678:	681b      	ldr	r3, [r3, #0]
   d767a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d767c:	9301      	str	r3, [sp, #4]
   d767e:	bd08      	pop	{r3, pc}
   d7680:	00030248 	.word	0x00030248

000d7684 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7684:	b508      	push	{r3, lr}
   d7686:	4b02      	ldr	r3, [pc, #8]	; (d7690 <os_timer_set_id+0xc>)
   d7688:	681b      	ldr	r3, [r3, #0]
   d768a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d768c:	9301      	str	r3, [sp, #4]
   d768e:	bd08      	pop	{r3, pc}
   d7690:	00030248 	.word	0x00030248

000d7694 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7694:	b508      	push	{r3, lr}
   d7696:	4b02      	ldr	r3, [pc, #8]	; (d76a0 <HAL_Feature_Set+0xc>)
   d7698:	681b      	ldr	r3, [r3, #0]
   d769a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d769c:	9301      	str	r3, [sp, #4]
   d769e:	bd08      	pop	{r3, pc}
   d76a0:	00030234 	.word	0x00030234

000d76a4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d76a4:	b508      	push	{r3, lr}
   d76a6:	4b02      	ldr	r3, [pc, #8]	; (d76b0 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d76a8:	681b      	ldr	r3, [r3, #0]
   d76aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d76ac:	9301      	str	r3, [sp, #4]
   d76ae:	bd08      	pop	{r3, pc}
   d76b0:	00030234 	.word	0x00030234

000d76b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d76b4:	b508      	push	{r3, lr}
   d76b6:	4b02      	ldr	r3, [pc, #8]	; (d76c0 <HAL_RNG_GetRandomNumber+0xc>)
   d76b8:	681b      	ldr	r3, [r3, #0]
   d76ba:	685b      	ldr	r3, [r3, #4]
   d76bc:	9301      	str	r3, [sp, #4]
   d76be:	bd08      	pop	{r3, pc}
   d76c0:	00030218 	.word	0x00030218

000d76c4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d76c4:	b508      	push	{r3, lr}
   d76c6:	4b02      	ldr	r3, [pc, #8]	; (d76d0 <HAL_Delay_Milliseconds+0xc>)
   d76c8:	681b      	ldr	r3, [r3, #0]
   d76ca:	689b      	ldr	r3, [r3, #8]
   d76cc:	9301      	str	r3, [sp, #4]
   d76ce:	bd08      	pop	{r3, pc}
   d76d0:	00030218 	.word	0x00030218

000d76d4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d76d4:	b508      	push	{r3, lr}
   d76d6:	4b02      	ldr	r3, [pc, #8]	; (d76e0 <HAL_Delay_Microseconds+0xc>)
   d76d8:	681b      	ldr	r3, [r3, #0]
   d76da:	68db      	ldr	r3, [r3, #12]
   d76dc:	9301      	str	r3, [sp, #4]
   d76de:	bd08      	pop	{r3, pc}
   d76e0:	00030218 	.word	0x00030218

000d76e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d76e4:	b508      	push	{r3, lr}
   d76e6:	4b02      	ldr	r3, [pc, #8]	; (d76f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d76e8:	681b      	ldr	r3, [r3, #0]
   d76ea:	695b      	ldr	r3, [r3, #20]
   d76ec:	9301      	str	r3, [sp, #4]
   d76ee:	bd08      	pop	{r3, pc}
   d76f0:	00030218 	.word	0x00030218

000d76f4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d76f4:	b508      	push	{r3, lr}
   d76f6:	4b02      	ldr	r3, [pc, #8]	; (d7700 <hal_rtc_time_is_valid+0xc>)
   d76f8:	681b      	ldr	r3, [r3, #0]
   d76fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d76fc:	9301      	str	r3, [sp, #4]
   d76fe:	bd08      	pop	{r3, pc}
   d7700:	00030218 	.word	0x00030218

000d7704 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7704:	b508      	push	{r3, lr}
   d7706:	4b02      	ldr	r3, [pc, #8]	; (d7710 <hal_timer_millis+0xc>)
   d7708:	681b      	ldr	r3, [r3, #0]
   d770a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d770c:	9301      	str	r3, [sp, #4]
   d770e:	bd08      	pop	{r3, pc}
   d7710:	00030218 	.word	0x00030218

000d7714 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7714:	b508      	push	{r3, lr}
   d7716:	4b02      	ldr	r3, [pc, #8]	; (d7720 <hal_rtc_get_time+0xc>)
   d7718:	681b      	ldr	r3, [r3, #0]
   d771a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d771c:	9301      	str	r3, [sp, #4]
   d771e:	bd08      	pop	{r3, pc}
   d7720:	00030218 	.word	0x00030218

000d7724 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7724:	b508      	push	{r3, lr}
   d7726:	4b02      	ldr	r3, [pc, #8]	; (d7730 <hal_rtc_set_time+0xc>)
   d7728:	681b      	ldr	r3, [r3, #0]
   d772a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d772c:	9301      	str	r3, [sp, #4]
   d772e:	bd08      	pop	{r3, pc}
   d7730:	00030218 	.word	0x00030218

000d7734 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7734:	b508      	push	{r3, lr}
   d7736:	4b02      	ldr	r3, [pc, #8]	; (d7740 <HAL_Validate_Pin_Function+0xc>)
   d7738:	681b      	ldr	r3, [r3, #0]
   d773a:	685b      	ldr	r3, [r3, #4]
   d773c:	9301      	str	r3, [sp, #4]
   d773e:	bd08      	pop	{r3, pc}
   d7740:	0003022c 	.word	0x0003022c

000d7744 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7744:	b508      	push	{r3, lr}
   d7746:	4b02      	ldr	r3, [pc, #8]	; (d7750 <HAL_Pin_Mode+0xc>)
   d7748:	681b      	ldr	r3, [r3, #0]
   d774a:	689b      	ldr	r3, [r3, #8]
   d774c:	9301      	str	r3, [sp, #4]
   d774e:	bd08      	pop	{r3, pc}
   d7750:	0003022c 	.word	0x0003022c

000d7754 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7754:	b508      	push	{r3, lr}
   d7756:	4b02      	ldr	r3, [pc, #8]	; (d7760 <HAL_Get_Pin_Mode+0xc>)
   d7758:	681b      	ldr	r3, [r3, #0]
   d775a:	68db      	ldr	r3, [r3, #12]
   d775c:	9301      	str	r3, [sp, #4]
   d775e:	bd08      	pop	{r3, pc}
   d7760:	0003022c 	.word	0x0003022c

000d7764 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7764:	b508      	push	{r3, lr}
   d7766:	4b02      	ldr	r3, [pc, #8]	; (d7770 <HAL_GPIO_Write+0xc>)
   d7768:	681b      	ldr	r3, [r3, #0]
   d776a:	691b      	ldr	r3, [r3, #16]
   d776c:	9301      	str	r3, [sp, #4]
   d776e:	bd08      	pop	{r3, pc}
   d7770:	0003022c 	.word	0x0003022c

000d7774 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7774:	b508      	push	{r3, lr}
   d7776:	4b02      	ldr	r3, [pc, #8]	; (d7780 <HAL_GPIO_Read+0xc>)
   d7778:	681b      	ldr	r3, [r3, #0]
   d777a:	695b      	ldr	r3, [r3, #20]
   d777c:	9301      	str	r3, [sp, #4]
   d777e:	bd08      	pop	{r3, pc}
   d7780:	0003022c 	.word	0x0003022c

000d7784 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7784:	b508      	push	{r3, lr}
   d7786:	4b02      	ldr	r3, [pc, #8]	; (d7790 <hal_adc_read+0xc>)
   d7788:	681b      	ldr	r3, [r3, #0]
   d778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d778c:	9301      	str	r3, [sp, #4]
   d778e:	bd08      	pop	{r3, pc}
   d7790:	0003022c 	.word	0x0003022c

000d7794 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7794:	b508      	push	{r3, lr}
   d7796:	4b02      	ldr	r3, [pc, #8]	; (d77a0 <hal_i2c_begin+0xc>)
   d7798:	681b      	ldr	r3, [r3, #0]
   d779a:	68db      	ldr	r3, [r3, #12]
   d779c:	9301      	str	r3, [sp, #4]
   d779e:	bd08      	pop	{r3, pc}
   d77a0:	00030228 	.word	0x00030228

000d77a4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d77a4:	b508      	push	{r3, lr}
   d77a6:	4b02      	ldr	r3, [pc, #8]	; (d77b0 <hal_i2c_begin_transmission+0xc>)
   d77a8:	681b      	ldr	r3, [r3, #0]
   d77aa:	699b      	ldr	r3, [r3, #24]
   d77ac:	9301      	str	r3, [sp, #4]
   d77ae:	bd08      	pop	{r3, pc}
   d77b0:	00030228 	.word	0x00030228

000d77b4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d77b4:	b508      	push	{r3, lr}
   d77b6:	4b02      	ldr	r3, [pc, #8]	; (d77c0 <hal_i2c_end_transmission+0xc>)
   d77b8:	681b      	ldr	r3, [r3, #0]
   d77ba:	69db      	ldr	r3, [r3, #28]
   d77bc:	9301      	str	r3, [sp, #4]
   d77be:	bd08      	pop	{r3, pc}
   d77c0:	00030228 	.word	0x00030228

000d77c4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d77c4:	b508      	push	{r3, lr}
   d77c6:	4b02      	ldr	r3, [pc, #8]	; (d77d0 <hal_i2c_write+0xc>)
   d77c8:	681b      	ldr	r3, [r3, #0]
   d77ca:	6a1b      	ldr	r3, [r3, #32]
   d77cc:	9301      	str	r3, [sp, #4]
   d77ce:	bd08      	pop	{r3, pc}
   d77d0:	00030228 	.word	0x00030228

000d77d4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d77d4:	b508      	push	{r3, lr}
   d77d6:	4b02      	ldr	r3, [pc, #8]	; (d77e0 <hal_i2c_available+0xc>)
   d77d8:	681b      	ldr	r3, [r3, #0]
   d77da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d77dc:	9301      	str	r3, [sp, #4]
   d77de:	bd08      	pop	{r3, pc}
   d77e0:	00030228 	.word	0x00030228

000d77e4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d77e4:	b508      	push	{r3, lr}
   d77e6:	4b02      	ldr	r3, [pc, #8]	; (d77f0 <hal_i2c_read+0xc>)
   d77e8:	681b      	ldr	r3, [r3, #0]
   d77ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d77ec:	9301      	str	r3, [sp, #4]
   d77ee:	bd08      	pop	{r3, pc}
   d77f0:	00030228 	.word	0x00030228

000d77f4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d77f4:	b508      	push	{r3, lr}
   d77f6:	4b02      	ldr	r3, [pc, #8]	; (d7800 <hal_i2c_peek+0xc>)
   d77f8:	681b      	ldr	r3, [r3, #0]
   d77fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d77fc:	9301      	str	r3, [sp, #4]
   d77fe:	bd08      	pop	{r3, pc}
   d7800:	00030228 	.word	0x00030228

000d7804 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7804:	b508      	push	{r3, lr}
   d7806:	4b02      	ldr	r3, [pc, #8]	; (d7810 <hal_i2c_flush+0xc>)
   d7808:	681b      	ldr	r3, [r3, #0]
   d780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d780c:	9301      	str	r3, [sp, #4]
   d780e:	bd08      	pop	{r3, pc}
   d7810:	00030228 	.word	0x00030228

000d7814 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7814:	b508      	push	{r3, lr}
   d7816:	4b02      	ldr	r3, [pc, #8]	; (d7820 <hal_i2c_is_enabled+0xc>)
   d7818:	681b      	ldr	r3, [r3, #0]
   d781a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d781c:	9301      	str	r3, [sp, #4]
   d781e:	bd08      	pop	{r3, pc}
   d7820:	00030228 	.word	0x00030228

000d7824 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7824:	b508      	push	{r3, lr}
   d7826:	4b02      	ldr	r3, [pc, #8]	; (d7830 <hal_i2c_init+0xc>)
   d7828:	681b      	ldr	r3, [r3, #0]
   d782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d782c:	9301      	str	r3, [sp, #4]
   d782e:	bd08      	pop	{r3, pc}
   d7830:	00030228 	.word	0x00030228

000d7834 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7834:	b508      	push	{r3, lr}
   d7836:	4b02      	ldr	r3, [pc, #8]	; (d7840 <hal_i2c_lock+0xc>)
   d7838:	681b      	ldr	r3, [r3, #0]
   d783a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d783c:	9301      	str	r3, [sp, #4]
   d783e:	bd08      	pop	{r3, pc}
   d7840:	00030228 	.word	0x00030228

000d7844 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7844:	b508      	push	{r3, lr}
   d7846:	4b02      	ldr	r3, [pc, #8]	; (d7850 <hal_i2c_unlock+0xc>)
   d7848:	681b      	ldr	r3, [r3, #0]
   d784a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d784c:	9301      	str	r3, [sp, #4]
   d784e:	bd08      	pop	{r3, pc}
   d7850:	00030228 	.word	0x00030228

000d7854 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7854:	b508      	push	{r3, lr}
   d7856:	4b02      	ldr	r3, [pc, #8]	; (d7860 <hal_i2c_request_ex+0xc>)
   d7858:	681b      	ldr	r3, [r3, #0]
   d785a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d785c:	9301      	str	r3, [sp, #4]
   d785e:	bd08      	pop	{r3, pc}
   d7860:	00030228 	.word	0x00030228

000d7864 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7864:	b508      	push	{r3, lr}
   d7866:	4b02      	ldr	r3, [pc, #8]	; (d7870 <inet_inet_ntop+0xc>)
   d7868:	681b      	ldr	r3, [r3, #0]
   d786a:	695b      	ldr	r3, [r3, #20]
   d786c:	9301      	str	r3, [sp, #4]
   d786e:	bd08      	pop	{r3, pc}
   d7870:	00030264 	.word	0x00030264

000d7874 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7874:	b508      	push	{r3, lr}
   d7876:	4b02      	ldr	r3, [pc, #8]	; (d7880 <netdb_freeaddrinfo+0xc>)
   d7878:	681b      	ldr	r3, [r3, #0]
   d787a:	689b      	ldr	r3, [r3, #8]
   d787c:	9301      	str	r3, [sp, #4]
   d787e:	bd08      	pop	{r3, pc}
   d7880:	00030268 	.word	0x00030268

000d7884 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7884:	b508      	push	{r3, lr}
   d7886:	4b02      	ldr	r3, [pc, #8]	; (d7890 <netdb_getaddrinfo+0xc>)
   d7888:	681b      	ldr	r3, [r3, #0]
   d788a:	68db      	ldr	r3, [r3, #12]
   d788c:	9301      	str	r3, [sp, #4]
   d788e:	bd08      	pop	{r3, pc}
   d7890:	00030268 	.word	0x00030268

000d7894 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7894:	b508      	push	{r3, lr}
   d7896:	4b02      	ldr	r3, [pc, #8]	; (d78a0 <hal_spi_init+0xc>)
   d7898:	681b      	ldr	r3, [r3, #0]
   d789a:	69db      	ldr	r3, [r3, #28]
   d789c:	9301      	str	r3, [sp, #4]
   d789e:	bd08      	pop	{r3, pc}
   d78a0:	00030230 	.word	0x00030230

000d78a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d78a4:	b508      	push	{r3, lr}
   d78a6:	4b02      	ldr	r3, [pc, #8]	; (d78b0 <hal_spi_is_enabled+0xc>)
   d78a8:	681b      	ldr	r3, [r3, #0]
   d78aa:	6a1b      	ldr	r3, [r3, #32]
   d78ac:	9301      	str	r3, [sp, #4]
   d78ae:	bd08      	pop	{r3, pc}
   d78b0:	00030230 	.word	0x00030230

000d78b4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d78b4:	b508      	push	{r3, lr}
   d78b6:	4b02      	ldr	r3, [pc, #8]	; (d78c0 <hal_usart_init+0xc>)
   d78b8:	681b      	ldr	r3, [r3, #0]
   d78ba:	681b      	ldr	r3, [r3, #0]
   d78bc:	9301      	str	r3, [sp, #4]
   d78be:	bd08      	pop	{r3, pc}
   d78c0:	0003023c 	.word	0x0003023c

000d78c4 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d78c4:	b508      	push	{r3, lr}
   d78c6:	4b02      	ldr	r3, [pc, #8]	; (d78d0 <hal_usart_end+0xc>)
   d78c8:	681b      	ldr	r3, [r3, #0]
   d78ca:	689b      	ldr	r3, [r3, #8]
   d78cc:	9301      	str	r3, [sp, #4]
   d78ce:	bd08      	pop	{r3, pc}
   d78d0:	0003023c 	.word	0x0003023c

000d78d4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d78d4:	b508      	push	{r3, lr}
   d78d6:	4b02      	ldr	r3, [pc, #8]	; (d78e0 <hal_usart_write+0xc>)
   d78d8:	681b      	ldr	r3, [r3, #0]
   d78da:	68db      	ldr	r3, [r3, #12]
   d78dc:	9301      	str	r3, [sp, #4]
   d78de:	bd08      	pop	{r3, pc}
   d78e0:	0003023c 	.word	0x0003023c

000d78e4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d78e4:	b508      	push	{r3, lr}
   d78e6:	4b02      	ldr	r3, [pc, #8]	; (d78f0 <hal_usart_available+0xc>)
   d78e8:	681b      	ldr	r3, [r3, #0]
   d78ea:	691b      	ldr	r3, [r3, #16]
   d78ec:	9301      	str	r3, [sp, #4]
   d78ee:	bd08      	pop	{r3, pc}
   d78f0:	0003023c 	.word	0x0003023c

000d78f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d78f4:	b508      	push	{r3, lr}
   d78f6:	4b02      	ldr	r3, [pc, #8]	; (d7900 <hal_usart_read+0xc>)
   d78f8:	681b      	ldr	r3, [r3, #0]
   d78fa:	695b      	ldr	r3, [r3, #20]
   d78fc:	9301      	str	r3, [sp, #4]
   d78fe:	bd08      	pop	{r3, pc}
   d7900:	0003023c 	.word	0x0003023c

000d7904 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7904:	b508      	push	{r3, lr}
   d7906:	4b02      	ldr	r3, [pc, #8]	; (d7910 <hal_usart_peek+0xc>)
   d7908:	681b      	ldr	r3, [r3, #0]
   d790a:	699b      	ldr	r3, [r3, #24]
   d790c:	9301      	str	r3, [sp, #4]
   d790e:	bd08      	pop	{r3, pc}
   d7910:	0003023c 	.word	0x0003023c

000d7914 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7914:	b508      	push	{r3, lr}
   d7916:	4b02      	ldr	r3, [pc, #8]	; (d7920 <hal_usart_flush+0xc>)
   d7918:	681b      	ldr	r3, [r3, #0]
   d791a:	69db      	ldr	r3, [r3, #28]
   d791c:	9301      	str	r3, [sp, #4]
   d791e:	bd08      	pop	{r3, pc}
   d7920:	0003023c 	.word	0x0003023c

000d7924 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7924:	b508      	push	{r3, lr}
   d7926:	4b02      	ldr	r3, [pc, #8]	; (d7930 <hal_usart_is_enabled+0xc>)
   d7928:	681b      	ldr	r3, [r3, #0]
   d792a:	6a1b      	ldr	r3, [r3, #32]
   d792c:	9301      	str	r3, [sp, #4]
   d792e:	bd08      	pop	{r3, pc}
   d7930:	0003023c 	.word	0x0003023c

000d7934 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7934:	b508      	push	{r3, lr}
   d7936:	4b02      	ldr	r3, [pc, #8]	; (d7940 <hal_usart_available_data_for_write+0xc>)
   d7938:	681b      	ldr	r3, [r3, #0]
   d793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d793c:	9301      	str	r3, [sp, #4]
   d793e:	bd08      	pop	{r3, pc}
   d7940:	0003023c 	.word	0x0003023c

000d7944 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d7944:	b508      	push	{r3, lr}
   d7946:	4b02      	ldr	r3, [pc, #8]	; (d7950 <hal_usart_begin_config+0xc>)
   d7948:	681b      	ldr	r3, [r3, #0]
   d794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d794c:	9301      	str	r3, [sp, #4]
   d794e:	bd08      	pop	{r3, pc}
   d7950:	0003023c 	.word	0x0003023c

000d7954 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7954:	b508      	push	{r3, lr}
   d7956:	4b02      	ldr	r3, [pc, #8]	; (d7960 <HAL_USB_USART_Init+0xc>)
   d7958:	681b      	ldr	r3, [r3, #0]
   d795a:	681b      	ldr	r3, [r3, #0]
   d795c:	9301      	str	r3, [sp, #4]
   d795e:	bd08      	pop	{r3, pc}
   d7960:	0003024c 	.word	0x0003024c

000d7964 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7964:	b508      	push	{r3, lr}
   d7966:	4b02      	ldr	r3, [pc, #8]	; (d7970 <HAL_USB_USART_Begin+0xc>)
   d7968:	681b      	ldr	r3, [r3, #0]
   d796a:	685b      	ldr	r3, [r3, #4]
   d796c:	9301      	str	r3, [sp, #4]
   d796e:	bd08      	pop	{r3, pc}
   d7970:	0003024c 	.word	0x0003024c

000d7974 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d7974:	b508      	push	{r3, lr}
   d7976:	4b02      	ldr	r3, [pc, #8]	; (d7980 <HAL_USB_USART_End+0xc>)
   d7978:	681b      	ldr	r3, [r3, #0]
   d797a:	689b      	ldr	r3, [r3, #8]
   d797c:	9301      	str	r3, [sp, #4]
   d797e:	bd08      	pop	{r3, pc}
   d7980:	0003024c 	.word	0x0003024c

000d7984 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7984:	b508      	push	{r3, lr}
   d7986:	4b02      	ldr	r3, [pc, #8]	; (d7990 <HAL_USB_USART_Available_Data+0xc>)
   d7988:	681b      	ldr	r3, [r3, #0]
   d798a:	691b      	ldr	r3, [r3, #16]
   d798c:	9301      	str	r3, [sp, #4]
   d798e:	bd08      	pop	{r3, pc}
   d7990:	0003024c 	.word	0x0003024c

000d7994 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7994:	b508      	push	{r3, lr}
   d7996:	4b02      	ldr	r3, [pc, #8]	; (d79a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7998:	681b      	ldr	r3, [r3, #0]
   d799a:	695b      	ldr	r3, [r3, #20]
   d799c:	9301      	str	r3, [sp, #4]
   d799e:	bd08      	pop	{r3, pc}
   d79a0:	0003024c 	.word	0x0003024c

000d79a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d79a4:	b508      	push	{r3, lr}
   d79a6:	4b02      	ldr	r3, [pc, #8]	; (d79b0 <HAL_USB_USART_Receive_Data+0xc>)
   d79a8:	681b      	ldr	r3, [r3, #0]
   d79aa:	699b      	ldr	r3, [r3, #24]
   d79ac:	9301      	str	r3, [sp, #4]
   d79ae:	bd08      	pop	{r3, pc}
   d79b0:	0003024c 	.word	0x0003024c

000d79b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d79b4:	b508      	push	{r3, lr}
   d79b6:	4b02      	ldr	r3, [pc, #8]	; (d79c0 <HAL_USB_USART_Send_Data+0xc>)
   d79b8:	681b      	ldr	r3, [r3, #0]
   d79ba:	69db      	ldr	r3, [r3, #28]
   d79bc:	9301      	str	r3, [sp, #4]
   d79be:	bd08      	pop	{r3, pc}
   d79c0:	0003024c 	.word	0x0003024c

000d79c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d79c4:	b508      	push	{r3, lr}
   d79c6:	4b02      	ldr	r3, [pc, #8]	; (d79d0 <HAL_USB_USART_Flush_Data+0xc>)
   d79c8:	681b      	ldr	r3, [r3, #0]
   d79ca:	6a1b      	ldr	r3, [r3, #32]
   d79cc:	9301      	str	r3, [sp, #4]
   d79ce:	bd08      	pop	{r3, pc}
   d79d0:	0003024c 	.word	0x0003024c

000d79d4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d79d4:	b508      	push	{r3, lr}
   d79d6:	4b02      	ldr	r3, [pc, #8]	; (d79e0 <panic_+0xc>)
   d79d8:	681b      	ldr	r3, [r3, #0]
   d79da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d79dc:	9301      	str	r3, [sp, #4]
   d79de:	bd08      	pop	{r3, pc}
   d79e0:	00030260 	.word	0x00030260

000d79e4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d79e4:	b508      	push	{r3, lr}
   d79e6:	4b02      	ldr	r3, [pc, #8]	; (d79f0 <log_message+0xc>)
   d79e8:	681b      	ldr	r3, [r3, #0]
   d79ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d79ec:	9301      	str	r3, [sp, #4]
   d79ee:	bd08      	pop	{r3, pc}
   d79f0:	00030260 	.word	0x00030260

000d79f4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d79f4:	b508      	push	{r3, lr}
   d79f6:	4b02      	ldr	r3, [pc, #8]	; (d7a00 <log_message_v+0xc>)
   d79f8:	681b      	ldr	r3, [r3, #0]
   d79fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d79fc:	9301      	str	r3, [sp, #4]
   d79fe:	bd08      	pop	{r3, pc}
   d7a00:	00030260 	.word	0x00030260

000d7a04 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d7a04:	b508      	push	{r3, lr}
   d7a06:	4b02      	ldr	r3, [pc, #8]	; (d7a10 <log_level_name+0xc>)
   d7a08:	681b      	ldr	r3, [r3, #0]
   d7a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7a0c:	9301      	str	r3, [sp, #4]
   d7a0e:	bd08      	pop	{r3, pc}
   d7a10:	00030260 	.word	0x00030260

000d7a14 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d7a14:	b508      	push	{r3, lr}
   d7a16:	4b02      	ldr	r3, [pc, #8]	; (d7a20 <log_set_callbacks+0xc>)
   d7a18:	681b      	ldr	r3, [r3, #0]
   d7a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7a1c:	9301      	str	r3, [sp, #4]
   d7a1e:	bd08      	pop	{r3, pc}
   d7a20:	00030260 	.word	0x00030260

000d7a24 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d7a24:	b508      	push	{r3, lr}
   d7a26:	4b03      	ldr	r3, [pc, #12]	; (d7a34 <diag_get_source+0x10>)
   d7a28:	681b      	ldr	r3, [r3, #0]
   d7a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7a2e:	9301      	str	r3, [sp, #4]
   d7a30:	bd08      	pop	{r3, pc}
   d7a32:	0000      	.short	0x0000
   d7a34:	00030260 	.word	0x00030260

000d7a38 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7a38:	b508      	push	{r3, lr}
   d7a3a:	4b02      	ldr	r3, [pc, #8]	; (d7a44 <system_mode+0xc>)
   d7a3c:	681b      	ldr	r3, [r3, #0]
   d7a3e:	681b      	ldr	r3, [r3, #0]
   d7a40:	9301      	str	r3, [sp, #4]
   d7a42:	bd08      	pop	{r3, pc}
   d7a44:	00030220 	.word	0x00030220

000d7a48 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7a48:	b508      	push	{r3, lr}
   d7a4a:	4b02      	ldr	r3, [pc, #8]	; (d7a54 <set_system_mode+0xc>)
   d7a4c:	681b      	ldr	r3, [r3, #0]
   d7a4e:	685b      	ldr	r3, [r3, #4]
   d7a50:	9301      	str	r3, [sp, #4]
   d7a52:	bd08      	pop	{r3, pc}
   d7a54:	00030220 	.word	0x00030220

000d7a58 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7a58:	b508      	push	{r3, lr}
   d7a5a:	4b02      	ldr	r3, [pc, #8]	; (d7a64 <system_delay_ms+0xc>)
   d7a5c:	681b      	ldr	r3, [r3, #0]
   d7a5e:	695b      	ldr	r3, [r3, #20]
   d7a60:	9301      	str	r3, [sp, #4]
   d7a62:	bd08      	pop	{r3, pc}
   d7a64:	00030220 	.word	0x00030220

000d7a68 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d7a68:	b508      	push	{r3, lr}
   d7a6a:	4b02      	ldr	r3, [pc, #8]	; (d7a74 <system_sleep+0xc>)
   d7a6c:	681b      	ldr	r3, [r3, #0]
   d7a6e:	699b      	ldr	r3, [r3, #24]
   d7a70:	9301      	str	r3, [sp, #4]
   d7a72:	bd08      	pop	{r3, pc}
   d7a74:	00030220 	.word	0x00030220

000d7a78 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d7a78:	b508      	push	{r3, lr}
   d7a7a:	4b02      	ldr	r3, [pc, #8]	; (d7a84 <system_subscribe_event+0xc>)
   d7a7c:	681b      	ldr	r3, [r3, #0]
   d7a7e:	6a1b      	ldr	r3, [r3, #32]
   d7a80:	9301      	str	r3, [sp, #4]
   d7a82:	bd08      	pop	{r3, pc}
   d7a84:	00030220 	.word	0x00030220

000d7a88 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7a88:	b508      	push	{r3, lr}
   d7a8a:	4b02      	ldr	r3, [pc, #8]	; (d7a94 <system_thread_set_state+0xc>)
   d7a8c:	681b      	ldr	r3, [r3, #0]
   d7a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7a90:	9301      	str	r3, [sp, #4]
   d7a92:	bd08      	pop	{r3, pc}
   d7a94:	00030220 	.word	0x00030220

000d7a98 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7a98:	b508      	push	{r3, lr}
   d7a9a:	4b02      	ldr	r3, [pc, #8]	; (d7aa4 <application_thread_current+0xc>)
   d7a9c:	681b      	ldr	r3, [r3, #0]
   d7a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7aa0:	9301      	str	r3, [sp, #4]
   d7aa2:	bd08      	pop	{r3, pc}
   d7aa4:	00030220 	.word	0x00030220

000d7aa8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7aa8:	b508      	push	{r3, lr}
   d7aaa:	4b02      	ldr	r3, [pc, #8]	; (d7ab4 <application_thread_invoke+0xc>)
   d7aac:	681b      	ldr	r3, [r3, #0]
   d7aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7ab0:	9301      	str	r3, [sp, #4]
   d7ab2:	bd08      	pop	{r3, pc}
   d7ab4:	00030220 	.word	0x00030220

000d7ab8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7ab8:	b508      	push	{r3, lr}
   d7aba:	4b02      	ldr	r3, [pc, #8]	; (d7ac4 <system_thread_get_state+0xc>)
   d7abc:	681b      	ldr	r3, [r3, #0]
   d7abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7ac0:	9301      	str	r3, [sp, #4]
   d7ac2:	bd08      	pop	{r3, pc}
   d7ac4:	00030220 	.word	0x00030220

000d7ac8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d7ac8:	b508      	push	{r3, lr}
   d7aca:	4b02      	ldr	r3, [pc, #8]	; (d7ad4 <system_notify_time_changed+0xc>)
   d7acc:	681b      	ldr	r3, [r3, #0]
   d7ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7ad0:	9301      	str	r3, [sp, #4]
   d7ad2:	bd08      	pop	{r3, pc}
   d7ad4:	00030220 	.word	0x00030220

000d7ad8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7ad8:	b508      	push	{r3, lr}
   d7ada:	4b03      	ldr	r3, [pc, #12]	; (d7ae8 <system_ctrl_set_app_request_handler+0x10>)
   d7adc:	681b      	ldr	r3, [r3, #0]
   d7ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7ae2:	9301      	str	r3, [sp, #4]
   d7ae4:	bd08      	pop	{r3, pc}
   d7ae6:	0000      	.short	0x0000
   d7ae8:	00030220 	.word	0x00030220

000d7aec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7aec:	b508      	push	{r3, lr}
   d7aee:	4b03      	ldr	r3, [pc, #12]	; (d7afc <system_ctrl_set_result+0x10>)
   d7af0:	681b      	ldr	r3, [r3, #0]
   d7af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7af6:	9301      	str	r3, [sp, #4]
   d7af8:	bd08      	pop	{r3, pc}
   d7afa:	0000      	.short	0x0000
   d7afc:	00030220 	.word	0x00030220

000d7b00 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d7b00:	b508      	push	{r3, lr}
   d7b02:	4b03      	ldr	r3, [pc, #12]	; (d7b10 <system_power_management_set_config+0x10>)
   d7b04:	681b      	ldr	r3, [r3, #0]
   d7b06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7b0a:	9301      	str	r3, [sp, #4]
   d7b0c:	bd08      	pop	{r3, pc}
   d7b0e:	0000      	.short	0x0000
   d7b10:	00030220 	.word	0x00030220

000d7b14 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d7b14:	b508      	push	{r3, lr}
   d7b16:	4b03      	ldr	r3, [pc, #12]	; (d7b24 <system_sleep_ext+0x10>)
   d7b18:	681b      	ldr	r3, [r3, #0]
   d7b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d7b1e:	9301      	str	r3, [sp, #4]
   d7b20:	bd08      	pop	{r3, pc}
   d7b22:	0000      	.short	0x0000
   d7b24:	00030220 	.word	0x00030220

000d7b28 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d7b28:	b508      	push	{r3, lr}
   d7b2a:	4b03      	ldr	r3, [pc, #12]	; (d7b38 <system_reset+0x10>)
   d7b2c:	681b      	ldr	r3, [r3, #0]
   d7b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d7b32:	9301      	str	r3, [sp, #4]
   d7b34:	bd08      	pop	{r3, pc}
   d7b36:	0000      	.short	0x0000
   d7b38:	00030220 	.word	0x00030220

000d7b3c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7b3c:	b508      	push	{r3, lr}
   d7b3e:	4b02      	ldr	r3, [pc, #8]	; (d7b48 <spark_variable+0xc>)
   d7b40:	681b      	ldr	r3, [r3, #0]
   d7b42:	681b      	ldr	r3, [r3, #0]
   d7b44:	9301      	str	r3, [sp, #4]
   d7b46:	bd08      	pop	{r3, pc}
   d7b48:	00030244 	.word	0x00030244

000d7b4c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d7b4c:	b508      	push	{r3, lr}
   d7b4e:	4b02      	ldr	r3, [pc, #8]	; (d7b58 <spark_function+0xc>)
   d7b50:	681b      	ldr	r3, [r3, #0]
   d7b52:	685b      	ldr	r3, [r3, #4]
   d7b54:	9301      	str	r3, [sp, #4]
   d7b56:	bd08      	pop	{r3, pc}
   d7b58:	00030244 	.word	0x00030244

000d7b5c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7b5c:	b508      	push	{r3, lr}
   d7b5e:	4b02      	ldr	r3, [pc, #8]	; (d7b68 <spark_process+0xc>)
   d7b60:	681b      	ldr	r3, [r3, #0]
   d7b62:	689b      	ldr	r3, [r3, #8]
   d7b64:	9301      	str	r3, [sp, #4]
   d7b66:	bd08      	pop	{r3, pc}
   d7b68:	00030244 	.word	0x00030244

000d7b6c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d7b6c:	b508      	push	{r3, lr}
   d7b6e:	4b02      	ldr	r3, [pc, #8]	; (d7b78 <spark_cloud_flag_connect+0xc>)
   d7b70:	681b      	ldr	r3, [r3, #0]
   d7b72:	68db      	ldr	r3, [r3, #12]
   d7b74:	9301      	str	r3, [sp, #4]
   d7b76:	bd08      	pop	{r3, pc}
   d7b78:	00030244 	.word	0x00030244

000d7b7c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7b7c:	b508      	push	{r3, lr}
   d7b7e:	4b02      	ldr	r3, [pc, #8]	; (d7b88 <spark_cloud_flag_connected+0xc>)
   d7b80:	681b      	ldr	r3, [r3, #0]
   d7b82:	695b      	ldr	r3, [r3, #20]
   d7b84:	9301      	str	r3, [sp, #4]
   d7b86:	bd08      	pop	{r3, pc}
   d7b88:	00030244 	.word	0x00030244

000d7b8c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7b8c:	b508      	push	{r3, lr}
   d7b8e:	4b02      	ldr	r3, [pc, #8]	; (d7b98 <spark_deviceID+0xc>)
   d7b90:	681b      	ldr	r3, [r3, #0]
   d7b92:	69db      	ldr	r3, [r3, #28]
   d7b94:	9301      	str	r3, [sp, #4]
   d7b96:	bd08      	pop	{r3, pc}
   d7b98:	00030244 	.word	0x00030244

000d7b9c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7b9c:	b508      	push	{r3, lr}
   d7b9e:	4b02      	ldr	r3, [pc, #8]	; (d7ba8 <spark_send_event+0xc>)
   d7ba0:	681b      	ldr	r3, [r3, #0]
   d7ba2:	6a1b      	ldr	r3, [r3, #32]
   d7ba4:	9301      	str	r3, [sp, #4]
   d7ba6:	bd08      	pop	{r3, pc}
   d7ba8:	00030244 	.word	0x00030244

000d7bac <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7bac:	b508      	push	{r3, lr}
   d7bae:	4b02      	ldr	r3, [pc, #8]	; (d7bb8 <spark_subscribe+0xc>)
   d7bb0:	681b      	ldr	r3, [r3, #0]
   d7bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7bb4:	9301      	str	r3, [sp, #4]
   d7bb6:	bd08      	pop	{r3, pc}
   d7bb8:	00030244 	.word	0x00030244

000d7bbc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d7bbc:	b508      	push	{r3, lr}
   d7bbe:	4b02      	ldr	r3, [pc, #8]	; (d7bc8 <spark_sync_time+0xc>)
   d7bc0:	681b      	ldr	r3, [r3, #0]
   d7bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7bc4:	9301      	str	r3, [sp, #4]
   d7bc6:	bd08      	pop	{r3, pc}
   d7bc8:	00030244 	.word	0x00030244

000d7bcc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7bcc:	b508      	push	{r3, lr}
   d7bce:	4b02      	ldr	r3, [pc, #8]	; (d7bd8 <spark_sync_time_pending+0xc>)
   d7bd0:	681b      	ldr	r3, [r3, #0]
   d7bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7bd4:	9301      	str	r3, [sp, #4]
   d7bd6:	bd08      	pop	{r3, pc}
   d7bd8:	00030244 	.word	0x00030244

000d7bdc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d7bdc:	b508      	push	{r3, lr}
   d7bde:	4b02      	ldr	r3, [pc, #8]	; (d7be8 <spark_sync_time_last+0xc>)
   d7be0:	681b      	ldr	r3, [r3, #0]
   d7be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7be4:	9301      	str	r3, [sp, #4]
   d7be6:	bd08      	pop	{r3, pc}
   d7be8:	00030244 	.word	0x00030244

000d7bec <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d7bec:	b508      	push	{r3, lr}
   d7bee:	4b02      	ldr	r3, [pc, #8]	; (d7bf8 <spark_set_connection_property+0xc>)
   d7bf0:	681b      	ldr	r3, [r3, #0]
   d7bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7bf4:	9301      	str	r3, [sp, #4]
   d7bf6:	bd08      	pop	{r3, pc}
   d7bf8:	00030244 	.word	0x00030244

000d7bfc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7bfc:	b508      	push	{r3, lr}
   d7bfe:	4b02      	ldr	r3, [pc, #8]	; (d7c08 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7c00:	681b      	ldr	r3, [r3, #0]
   d7c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7c04:	9301      	str	r3, [sp, #4]
   d7c06:	bd08      	pop	{r3, pc}
   d7c08:	00030244 	.word	0x00030244

000d7c0c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d7c0c:	b508      	push	{r3, lr}
   d7c0e:	4b02      	ldr	r3, [pc, #8]	; (d7c18 <spark_cloud_disconnect+0xc>)
   d7c10:	681b      	ldr	r3, [r3, #0]
   d7c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c14:	9301      	str	r3, [sp, #4]
   d7c16:	bd08      	pop	{r3, pc}
   d7c18:	00030244 	.word	0x00030244

000d7c1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7c1c:	b508      	push	{r3, lr}
   d7c1e:	4b02      	ldr	r3, [pc, #8]	; (d7c28 <network_connect+0xc>)
   d7c20:	681b      	ldr	r3, [r3, #0]
   d7c22:	685b      	ldr	r3, [r3, #4]
   d7c24:	9301      	str	r3, [sp, #4]
   d7c26:	bd08      	pop	{r3, pc}
   d7c28:	00030240 	.word	0x00030240

000d7c2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7c2c:	b508      	push	{r3, lr}
   d7c2e:	4b02      	ldr	r3, [pc, #8]	; (d7c38 <network_connecting+0xc>)
   d7c30:	681b      	ldr	r3, [r3, #0]
   d7c32:	689b      	ldr	r3, [r3, #8]
   d7c34:	9301      	str	r3, [sp, #4]
   d7c36:	bd08      	pop	{r3, pc}
   d7c38:	00030240 	.word	0x00030240

000d7c3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7c3c:	b508      	push	{r3, lr}
   d7c3e:	4b02      	ldr	r3, [pc, #8]	; (d7c48 <network_disconnect+0xc>)
   d7c40:	681b      	ldr	r3, [r3, #0]
   d7c42:	68db      	ldr	r3, [r3, #12]
   d7c44:	9301      	str	r3, [sp, #4]
   d7c46:	bd08      	pop	{r3, pc}
   d7c48:	00030240 	.word	0x00030240

000d7c4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7c4c:	b508      	push	{r3, lr}
   d7c4e:	4b02      	ldr	r3, [pc, #8]	; (d7c58 <network_ready+0xc>)
   d7c50:	681b      	ldr	r3, [r3, #0]
   d7c52:	691b      	ldr	r3, [r3, #16]
   d7c54:	9301      	str	r3, [sp, #4]
   d7c56:	bd08      	pop	{r3, pc}
   d7c58:	00030240 	.word	0x00030240

000d7c5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7c5c:	b508      	push	{r3, lr}
   d7c5e:	4b02      	ldr	r3, [pc, #8]	; (d7c68 <network_on+0xc>)
   d7c60:	681b      	ldr	r3, [r3, #0]
   d7c62:	695b      	ldr	r3, [r3, #20]
   d7c64:	9301      	str	r3, [sp, #4]
   d7c66:	bd08      	pop	{r3, pc}
   d7c68:	00030240 	.word	0x00030240

000d7c6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7c6c:	b508      	push	{r3, lr}
   d7c6e:	4b02      	ldr	r3, [pc, #8]	; (d7c78 <network_off+0xc>)
   d7c70:	681b      	ldr	r3, [r3, #0]
   d7c72:	699b      	ldr	r3, [r3, #24]
   d7c74:	9301      	str	r3, [sp, #4]
   d7c76:	bd08      	pop	{r3, pc}
   d7c78:	00030240 	.word	0x00030240

000d7c7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7c7c:	b508      	push	{r3, lr}
   d7c7e:	4b02      	ldr	r3, [pc, #8]	; (d7c88 <network_listen+0xc>)
   d7c80:	681b      	ldr	r3, [r3, #0]
   d7c82:	69db      	ldr	r3, [r3, #28]
   d7c84:	9301      	str	r3, [sp, #4]
   d7c86:	bd08      	pop	{r3, pc}
   d7c88:	00030240 	.word	0x00030240

000d7c8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7c8c:	b508      	push	{r3, lr}
   d7c8e:	4b02      	ldr	r3, [pc, #8]	; (d7c98 <network_listening+0xc>)
   d7c90:	681b      	ldr	r3, [r3, #0]
   d7c92:	6a1b      	ldr	r3, [r3, #32]
   d7c94:	9301      	str	r3, [sp, #4]
   d7c96:	bd08      	pop	{r3, pc}
   d7c98:	00030240 	.word	0x00030240

000d7c9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7c9c:	b508      	push	{r3, lr}
   d7c9e:	4b02      	ldr	r3, [pc, #8]	; (d7ca8 <network_set_listen_timeout+0xc>)
   d7ca0:	681b      	ldr	r3, [r3, #0]
   d7ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7ca4:	9301      	str	r3, [sp, #4]
   d7ca6:	bd08      	pop	{r3, pc}
   d7ca8:	00030240 	.word	0x00030240

000d7cac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7cac:	b508      	push	{r3, lr}
   d7cae:	4b02      	ldr	r3, [pc, #8]	; (d7cb8 <network_get_listen_timeout+0xc>)
   d7cb0:	681b      	ldr	r3, [r3, #0]
   d7cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7cb4:	9301      	str	r3, [sp, #4]
   d7cb6:	bd08      	pop	{r3, pc}
   d7cb8:	00030240 	.word	0x00030240

000d7cbc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7cbc:	b508      	push	{r3, lr}
   d7cbe:	4b02      	ldr	r3, [pc, #8]	; (d7cc8 <network_is_on+0xc>)
   d7cc0:	681b      	ldr	r3, [r3, #0]
   d7cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7cc4:	9301      	str	r3, [sp, #4]
   d7cc6:	bd08      	pop	{r3, pc}
   d7cc8:	00030240 	.word	0x00030240

000d7ccc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7ccc:	b508      	push	{r3, lr}
   d7cce:	4b02      	ldr	r3, [pc, #8]	; (d7cd8 <network_is_off+0xc>)
   d7cd0:	681b      	ldr	r3, [r3, #0]
   d7cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7cd4:	9301      	str	r3, [sp, #4]
   d7cd6:	bd08      	pop	{r3, pc}
   d7cd8:	00030240 	.word	0x00030240

000d7cdc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7cdc:	b508      	push	{r3, lr}
   d7cde:	4b02      	ldr	r3, [pc, #8]	; (d7ce8 <malloc+0xc>)
   d7ce0:	681b      	ldr	r3, [r3, #0]
   d7ce2:	681b      	ldr	r3, [r3, #0]
   d7ce4:	9301      	str	r3, [sp, #4]
   d7ce6:	bd08      	pop	{r3, pc}
   d7ce8:	0003021c 	.word	0x0003021c

000d7cec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7cec:	b508      	push	{r3, lr}
   d7cee:	4b02      	ldr	r3, [pc, #8]	; (d7cf8 <free+0xc>)
   d7cf0:	681b      	ldr	r3, [r3, #0]
   d7cf2:	685b      	ldr	r3, [r3, #4]
   d7cf4:	9301      	str	r3, [sp, #4]
   d7cf6:	bd08      	pop	{r3, pc}
   d7cf8:	0003021c 	.word	0x0003021c

000d7cfc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7cfc:	b508      	push	{r3, lr}
   d7cfe:	4b02      	ldr	r3, [pc, #8]	; (d7d08 <realloc+0xc>)
   d7d00:	681b      	ldr	r3, [r3, #0]
   d7d02:	689b      	ldr	r3, [r3, #8]
   d7d04:	9301      	str	r3, [sp, #4]
   d7d06:	bd08      	pop	{r3, pc}
   d7d08:	0003021c 	.word	0x0003021c

000d7d0c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7d0c:	b508      	push	{r3, lr}
   d7d0e:	4b02      	ldr	r3, [pc, #8]	; (d7d18 <siprintf+0xc>)
   d7d10:	681b      	ldr	r3, [r3, #0]
   d7d12:	691b      	ldr	r3, [r3, #16]
   d7d14:	9301      	str	r3, [sp, #4]
   d7d16:	bd08      	pop	{r3, pc}
   d7d18:	0003021c 	.word	0x0003021c

000d7d1c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7d1c:	b508      	push	{r3, lr}
   d7d1e:	4b02      	ldr	r3, [pc, #8]	; (d7d28 <snprintf+0xc>)
   d7d20:	681b      	ldr	r3, [r3, #0]
   d7d22:	69db      	ldr	r3, [r3, #28]
   d7d24:	9301      	str	r3, [sp, #4]
   d7d26:	bd08      	pop	{r3, pc}
   d7d28:	0003021c 	.word	0x0003021c

000d7d2c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7d2c:	b508      	push	{r3, lr}
   d7d2e:	4b02      	ldr	r3, [pc, #8]	; (d7d38 <vsnprintf+0xc>)
   d7d30:	681b      	ldr	r3, [r3, #0]
   d7d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7d34:	9301      	str	r3, [sp, #4]
   d7d36:	bd08      	pop	{r3, pc}
   d7d38:	0003021c 	.word	0x0003021c

000d7d3c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7d3c:	b508      	push	{r3, lr}
   d7d3e:	4b02      	ldr	r3, [pc, #8]	; (d7d48 <abort+0xc>)
   d7d40:	681b      	ldr	r3, [r3, #0]
   d7d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7d44:	9301      	str	r3, [sp, #4]
   d7d46:	bd08      	pop	{r3, pc}
   d7d48:	0003021c 	.word	0x0003021c

000d7d4c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7d4c:	b508      	push	{r3, lr}
   d7d4e:	4b02      	ldr	r3, [pc, #8]	; (d7d58 <_malloc_r+0xc>)
   d7d50:	681b      	ldr	r3, [r3, #0]
   d7d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7d54:	9301      	str	r3, [sp, #4]
   d7d56:	bd08      	pop	{r3, pc}
   d7d58:	0003021c 	.word	0x0003021c

000d7d5c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7d5c:	b508      	push	{r3, lr}
   d7d5e:	4b02      	ldr	r3, [pc, #8]	; (d7d68 <newlib_impure_ptr_callback+0xc>)
   d7d60:	681b      	ldr	r3, [r3, #0]
   d7d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d64:	9301      	str	r3, [sp, #4]
   d7d66:	bd08      	pop	{r3, pc}
   d7d68:	0003021c 	.word	0x0003021c

000d7d6c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d7d6c:	b508      	push	{r3, lr}
   d7d6e:	4b02      	ldr	r3, [pc, #8]	; (d7d78 <strftime+0xc>)
   d7d70:	681b      	ldr	r3, [r3, #0]
   d7d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7d74:	9301      	str	r3, [sp, #4]
   d7d76:	bd08      	pop	{r3, pc}
   d7d78:	0003021c 	.word	0x0003021c

000d7d7c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7d7c:	b508      	push	{r3, lr}
   d7d7e:	4b02      	ldr	r3, [pc, #8]	; (d7d88 <localtime_r+0xc>)
   d7d80:	681b      	ldr	r3, [r3, #0]
   d7d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7d84:	9301      	str	r3, [sp, #4]
   d7d86:	bd08      	pop	{r3, pc}
   d7d88:	0003021c 	.word	0x0003021c

000d7d8c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7d8c:	b508      	push	{r3, lr}
   d7d8e:	4b02      	ldr	r3, [pc, #8]	; (d7d98 <gmtime_r+0xc>)
   d7d90:	681b      	ldr	r3, [r3, #0]
   d7d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7d94:	9301      	str	r3, [sp, #4]
   d7d96:	bd08      	pop	{r3, pc}
   d7d98:	0003021c 	.word	0x0003021c

000d7d9c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d7d9c:	b508      	push	{r3, lr}
   d7d9e:	4b02      	ldr	r3, [pc, #8]	; (d7da8 <mktime+0xc>)
   d7da0:	681b      	ldr	r3, [r3, #0]
   d7da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7da4:	9301      	str	r3, [sp, #4]
   d7da6:	bd08      	pop	{r3, pc}
   d7da8:	0003021c 	.word	0x0003021c

000d7dac <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d7dac:	428a      	cmp	r2, r1
{
   d7dae:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d7db0:	d007      	beq.n	d7dc2 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d7db2:	9c02      	ldr	r4, [sp, #8]
   d7db4:	1a40      	subs	r0, r0, r1
   d7db6:	1ae4      	subs	r4, r4, r3
   d7db8:	4360      	muls	r0, r4
   d7dba:	1a52      	subs	r2, r2, r1
   d7dbc:	fb90 f0f2 	sdiv	r0, r0, r2
   d7dc0:	4418      	add	r0, r3
}
   d7dc2:	bd10      	pop	{r4, pc}

000d7dc4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7dc4:	2100      	movs	r1, #0
   d7dc6:	f7ff be47 	b.w	d7a58 <system_delay_ms>

000d7dca <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7dca:	b510      	push	{r4, lr}
      if (_M_empty())
   d7dcc:	6883      	ldr	r3, [r0, #8]
   d7dce:	4604      	mov	r4, r0
   d7dd0:	b90b      	cbnz	r3, d7dd6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7dd2:	f003 f928 	bl	db026 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7dd6:	68c3      	ldr	r3, [r0, #12]
   d7dd8:	4798      	blx	r3
      if (_M_manager)
   d7dda:	68a3      	ldr	r3, [r4, #8]
   d7ddc:	b11b      	cbz	r3, d7de6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7dde:	2203      	movs	r2, #3
   d7de0:	4621      	mov	r1, r4
   d7de2:	4620      	mov	r0, r4
   d7de4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7de6:	4620      	mov	r0, r4
   d7de8:	2110      	movs	r1, #16
}
   d7dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7dee:	f003 b914 	b.w	db01a <_ZdlPvj>

000d7df2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7df2:	b510      	push	{r4, lr}
   d7df4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7df6:	6800      	ldr	r0, [r0, #0]
   d7df8:	b108      	cbz	r0, d7dfe <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7dfa:	f7ff fc23 	bl	d7644 <os_mutex_recursive_destroy>
    }
   d7dfe:	4620      	mov	r0, r4
   d7e00:	bd10      	pop	{r4, pc}

000d7e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d7e02:	680b      	ldr	r3, [r1, #0]
   d7e04:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d7e06:	b113      	cbz	r3, d7e0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7e08:	685a      	ldr	r2, [r3, #4]
   d7e0a:	3201      	adds	r2, #1
   d7e0c:	605a      	str	r2, [r3, #4]
      }
   d7e0e:	4770      	bx	lr

000d7e10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7e10:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7e12:	4c06      	ldr	r4, [pc, #24]	; (d7e2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7e14:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7e16:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7e18:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7e1a:	f7ff fc0b 	bl	d7634 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7e1e:	4620      	mov	r0, r4
   d7e20:	4a03      	ldr	r2, [pc, #12]	; (d7e30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7e22:	4904      	ldr	r1, [pc, #16]	; (d7e34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7e28:	f003 b8f2 	b.w	db010 <__aeabi_atexit>
   d7e2c:	2003e598 	.word	0x2003e598
   d7e30:	2003e3d0 	.word	0x2003e3d0
   d7e34:	000d7df3 	.word	0x000d7df3

000d7e38 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7e38:	2200      	movs	r2, #0
   d7e3a:	6840      	ldr	r0, [r0, #4]
   d7e3c:	4611      	mov	r1, r2
   d7e3e:	f7ff bf05 	b.w	d7c4c <network_ready>

000d7e42 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7e42:	2200      	movs	r2, #0
   d7e44:	6840      	ldr	r0, [r0, #4]
   d7e46:	4611      	mov	r1, r2
   d7e48:	f7ff bf20 	b.w	d7c8c <network_listening>

000d7e4c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7e4c:	2200      	movs	r2, #0
   d7e4e:	6840      	ldr	r0, [r0, #4]
   d7e50:	4611      	mov	r1, r2
   d7e52:	f7ff bf2b 	b.w	d7cac <network_get_listen_timeout>

000d7e56 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7e56:	6840      	ldr	r0, [r0, #4]
   d7e58:	2200      	movs	r2, #0
   d7e5a:	f7ff bf1f 	b.w	d7c9c <network_set_listen_timeout>

000d7e5e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7e5e:	6840      	ldr	r0, [r0, #4]
   d7e60:	2200      	movs	r2, #0
   d7e62:	f081 0101 	eor.w	r1, r1, #1
   d7e66:	f7ff bf09 	b.w	d7c7c <network_listen>

000d7e6a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7e6a:	2300      	movs	r3, #0
   d7e6c:	6840      	ldr	r0, [r0, #4]
   d7e6e:	461a      	mov	r2, r3
   d7e70:	4619      	mov	r1, r3
   d7e72:	f7ff bef3 	b.w	d7c5c <network_on>

000d7e76 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7e76:	2200      	movs	r2, #0
   d7e78:	6840      	ldr	r0, [r0, #4]
   d7e7a:	4611      	mov	r1, r2
   d7e7c:	f7ff bed6 	b.w	d7c2c <network_connecting>

000d7e80 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7e80:	6840      	ldr	r0, [r0, #4]
   d7e82:	2200      	movs	r2, #0
   d7e84:	2102      	movs	r1, #2
   d7e86:	f7ff bed9 	b.w	d7c3c <network_disconnect>

000d7e8a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7e8a:	2300      	movs	r3, #0
   d7e8c:	6840      	ldr	r0, [r0, #4]
   d7e8e:	461a      	mov	r2, r3
   d7e90:	f7ff bec4 	b.w	d7c1c <network_connect>

000d7e94 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d7e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d7e96:	4b1b      	ldr	r3, [pc, #108]	; (d7f04 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d7e98:	6003      	str	r3, [r0, #0]
   d7e9a:	2500      	movs	r5, #0
   d7e9c:	460f      	mov	r7, r1
   d7e9e:	3328      	adds	r3, #40	; 0x28
   d7ea0:	2618      	movs	r6, #24
   d7ea2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7ea6:	b089      	sub	sp, #36	; 0x24
   d7ea8:	6043      	str	r3, [r0, #4]
   d7eaa:	4632      	mov	r2, r6
   d7eac:	4629      	mov	r1, r5
   d7eae:	4604      	mov	r4, r0
   d7eb0:	3010      	adds	r0, #16
   d7eb2:	f003 fe83 	bl	dbbbc <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7eb6:	6878      	ldr	r0, [r7, #4]
   d7eb8:	462a      	mov	r2, r5
   d7eba:	4629      	mov	r1, r5
   d7ebc:	f7ff fec6 	bl	d7c4c <network_ready>
   d7ec0:	b918      	cbnz	r0, d7eca <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d7ec2:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d7ec4:	4620      	mov	r0, r4
   d7ec6:	b009      	add	sp, #36	; 0x24
   d7ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d7eca:	4629      	mov	r1, r5
   d7ecc:	4632      	mov	r2, r6
   d7ece:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d7ed0:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d7ed4:	f003 fe72 	bl	dbbbc <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7ed8:	a902      	add	r1, sp, #8
   d7eda:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d7edc:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7ee0:	f7ff fb50 	bl	d7584 <cellular_signal>
   d7ee4:	b110      	cbz	r0, d7eec <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d7ee6:	2301      	movs	r3, #1
   d7ee8:	60a3      	str	r3, [r4, #8]
            return sig;
   d7eea:	e7eb      	b.n	d7ec4 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d7eec:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d7eee:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d7ef0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d7ef2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d7ef4:	b90b      	cbnz	r3, d7efa <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d7ef6:	2302      	movs	r3, #2
   d7ef8:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d7efa:	a902      	add	r1, sp, #8
   d7efc:	4620      	mov	r0, r4
   d7efe:	f000 f8ae 	bl	d805e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d7f02:	e7df      	b.n	d7ec4 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d7f04:	000de644 	.word	0x000de644

000d7f08 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7f08:	4b08      	ldr	r3, [pc, #32]	; (d7f2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7f0a:	b510      	push	{r4, lr}
   d7f0c:	2428      	movs	r4, #40	; 0x28
   d7f0e:	4622      	mov	r2, r4
   d7f10:	4618      	mov	r0, r3
   d7f12:	2100      	movs	r1, #0
   d7f14:	f003 fe52 	bl	dbbbc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7f18:	4b05      	ldr	r3, [pc, #20]	; (d7f30 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7f1a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7f20:	6042      	str	r2, [r0, #4]
   d7f22:	2204      	movs	r2, #4
   d7f24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7f26:	4a03      	ldr	r2, [pc, #12]	; (d7f34 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7f28:	601a      	str	r2, [r3, #0]
   d7f2a:	bd10      	pop	{r4, pc}
   d7f2c:	2003e5a4 	.word	0x2003e5a4
   d7f30:	2003e59c 	.word	0x2003e59c
   d7f34:	000de608 	.word	0x000de608

000d7f38 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d7f38:	4770      	bx	lr

000d7f3a <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7f3a:	7d00      	ldrb	r0, [r0, #20]
   d7f3c:	4770      	bx	lr

000d7f3e <_ZN14CellularSignalD0Ev>:
   d7f3e:	b510      	push	{r4, lr}
   d7f40:	2128      	movs	r1, #40	; 0x28
   d7f42:	4604      	mov	r4, r0
   d7f44:	f003 f869 	bl	db01a <_ZdlPvj>
   d7f48:	4620      	mov	r0, r4
   d7f4a:	bd10      	pop	{r4, pc}

000d7f4c <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d7f4c:	7d03      	ldrb	r3, [r0, #20]
   d7f4e:	b17b      	cbz	r3, d7f70 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d7f50:	69c3      	ldr	r3, [r0, #28]
   d7f52:	2b00      	cmp	r3, #0
   d7f54:	db0c      	blt.n	d7f70 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d7f56:	ee07 3a90 	vmov	s15, r3
   d7f5a:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7f78 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d7f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7f62:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7f66:	eddf 7a05 	vldr	s15, [pc, #20]	; d7f7c <_ZNK14CellularSignal11getStrengthEv+0x30>
   d7f6a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7f6e:	4770      	bx	lr
    }

    return -1.0f;
   d7f70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7f74:	4770      	bx	lr
   d7f76:	bf00      	nop
   d7f78:	477fff00 	.word	0x477fff00
   d7f7c:	42c80000 	.word	0x42c80000

000d7f80 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d7f80:	7d03      	ldrb	r3, [r0, #20]
   d7f82:	b163      	cbz	r3, d7f9e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d7f84:	6983      	ldr	r3, [r0, #24]
   d7f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7f8a:	d008      	beq.n	d7f9e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d7f8c:	ee07 3a90 	vmov	s15, r3
   d7f90:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7fa4 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7f98:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7f9c:	4770      	bx	lr
    }

    return 0.0f;
   d7f9e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7fa8 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d7fa2:	4770      	bx	lr
   d7fa4:	42c80000 	.word	0x42c80000
   d7fa8:	00000000 	.word	0x00000000

000d7fac <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7fac:	7d03      	ldrb	r3, [r0, #20]
   d7fae:	b17b      	cbz	r3, d7fd0 <_ZNK14CellularSignal10getQualityEv+0x24>
   d7fb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d7fb2:	2b00      	cmp	r3, #0
   d7fb4:	db0c      	blt.n	d7fd0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d7fb6:	ee07 3a90 	vmov	s15, r3
   d7fba:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7fd8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d7fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7fc2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7fc6:	eddf 7a05 	vldr	s15, [pc, #20]	; d7fdc <_ZNK14CellularSignal10getQualityEv+0x30>
   d7fca:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7fce:	4770      	bx	lr
    }

    return -1.0f;
   d7fd0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7fd4:	4770      	bx	lr
   d7fd6:	bf00      	nop
   d7fd8:	477fff00 	.word	0x477fff00
   d7fdc:	42c80000 	.word	0x42c80000

000d7fe0 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7fe0:	7d03      	ldrb	r3, [r0, #20]
   d7fe2:	b163      	cbz	r3, d7ffe <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d7fe4:	6a03      	ldr	r3, [r0, #32]
   d7fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7fea:	d008      	beq.n	d7ffe <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d7fec:	ee07 3a90 	vmov	s15, r3
   d7ff0:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8004 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7ff8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7ffc:	4770      	bx	lr
    }

    return 0.0f;
   d7ffe:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8008 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d8002:	4770      	bx	lr
   d8004:	42c80000 	.word	0x42c80000
   d8008:	00000000 	.word	0x00000000

000d800c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d800c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d800e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8010:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d8012:	da0a      	bge.n	d802a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d8014:	212d      	movs	r1, #45	; 0x2d
   d8016:	f002 f87c 	bl	da112 <_ZN5Print5printEc>
            val = -n;
   d801a:	4261      	negs	r1, r4
            t = print('-');
   d801c:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d801e:	220a      	movs	r2, #10
   d8020:	4630      	mov	r0, r6
   d8022:	f002 f88f 	bl	da144 <_ZN5Print11printNumberEmh>
    }
}
   d8026:	4428      	add	r0, r5
   d8028:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d802a:	4621      	mov	r1, r4
        size_t t = 0;
   d802c:	2500      	movs	r5, #0
   d802e:	e7f6      	b.n	d801e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8030 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d8030:	b570      	push	{r4, r5, r6, lr}
   d8032:	460c      	mov	r4, r1
   d8034:	4605      	mov	r5, r0
   d8036:	6881      	ldr	r1, [r0, #8]
   d8038:	4620      	mov	r0, r4
   d803a:	f7ff ffe7 	bl	d800c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d803e:	212c      	movs	r1, #44	; 0x2c
   d8040:	4606      	mov	r6, r0
   d8042:	4620      	mov	r0, r4
   d8044:	f002 f865 	bl	da112 <_ZN5Print5printEc>
   d8048:	68e9      	ldr	r1, [r5, #12]
   d804a:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d804c:	4620      	mov	r0, r4
   d804e:	f7ff ffdd 	bl	d800c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d8052:	4430      	add	r0, r6
   d8054:	bd70      	pop	{r4, r5, r6, pc}

000d8056 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8056:	f1a0 0004 	sub.w	r0, r0, #4
   d805a:	f7ff bfe9 	b.w	d8030 <_ZNK14CellularSignal7printToER5Print>

000d805e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d805e:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8060:	460d      	mov	r5, r1
   d8062:	f100 0410 	add.w	r4, r0, #16
   d8066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d806a:	e895 0003 	ldmia.w	r5, {r0, r1}
   d806e:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d8072:	2001      	movs	r0, #1
   d8074:	bd30      	pop	{r4, r5, pc}

000d8076 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8076:	4770      	bx	lr

000d8078 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8078:	2000      	movs	r0, #0
   d807a:	4770      	bx	lr

000d807c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d807c:	b510      	push	{r4, lr}
   d807e:	2110      	movs	r1, #16
   d8080:	4604      	mov	r4, r0
   d8082:	f002 ffca 	bl	db01a <_ZdlPvj>
   d8086:	4620      	mov	r0, r4
   d8088:	bd10      	pop	{r4, pc}

000d808a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d808a:	b508      	push	{r3, lr}
      { delete this; }
   d808c:	f7ff fff6 	bl	d807c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8090:	bd08      	pop	{r3, pc}

000d8092 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8092:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8094:	2200      	movs	r2, #0
   d8096:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d809a:	6002      	str	r2, [r0, #0]
   d809c:	8084      	strh	r4, [r0, #4]
   d809e:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d80a0:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d80a2:	680c      	ldr	r4, [r1, #0]
   d80a4:	8085      	strh	r5, [r0, #4]
   d80a6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d80a8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d80aa:	bd30      	pop	{r4, r5, pc}

000d80ac <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d80ac:	b510      	push	{r4, lr}
   d80ae:	4604      	mov	r4, r0
    free((void*)msg_);
   d80b0:	6800      	ldr	r0, [r0, #0]
   d80b2:	f7ff fe1b 	bl	d7cec <free>
}
   d80b6:	4620      	mov	r0, r4
   d80b8:	bd10      	pop	{r4, pc}

000d80ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d80ba:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d80bc:	68c4      	ldr	r4, [r0, #12]
   d80be:	b1f4      	cbz	r4, d80fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d80c0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d80c2:	2b02      	cmp	r3, #2
   d80c4:	d103      	bne.n	d80ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d80c6:	f104 000c 	add.w	r0, r4, #12
   d80ca:	f7ff ffef 	bl	d80ac <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d80ce:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d80d0:	b135      	cbz	r5, d80e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d80d2:	4628      	mov	r0, r5
   d80d4:	f7fc f910 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
   d80d8:	2110      	movs	r1, #16
   d80da:	4628      	mov	r0, r5
   d80dc:	f002 ff9d 	bl	db01a <_ZdlPvj>
   d80e0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d80e2:	b135      	cbz	r5, d80f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d80e4:	4628      	mov	r0, r5
   d80e6:	f7fc f907 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
   d80ea:	2110      	movs	r1, #16
   d80ec:	4628      	mov	r0, r5
   d80ee:	f002 ff94 	bl	db01a <_ZdlPvj>
   d80f2:	4620      	mov	r0, r4
   d80f4:	2114      	movs	r1, #20
   d80f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d80fa:	f002 bf8e 	b.w	db01a <_ZdlPvj>
   d80fe:	bd38      	pop	{r3, r4, r5, pc}

000d8100 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8100:	b510      	push	{r4, lr}
   d8102:	b088      	sub	sp, #32
   d8104:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8106:	4668      	mov	r0, sp
   d8108:	f002 f8d5 	bl	da2b6 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d810c:	4669      	mov	r1, sp
   d810e:	a804      	add	r0, sp, #16
   d8110:	f002 f91c 	bl	da34c <_ZN6StringC1ERKS_>
   d8114:	a804      	add	r0, sp, #16
   d8116:	47a0      	blx	r4
   d8118:	4604      	mov	r4, r0
   d811a:	a804      	add	r0, sp, #16
   d811c:	f002 f880 	bl	da220 <_ZN6StringD1Ev>
    String p(param);
   d8120:	4668      	mov	r0, sp
   d8122:	f002 f87d 	bl	da220 <_ZN6StringD1Ev>
}
   d8126:	4620      	mov	r0, r4
   d8128:	b008      	add	sp, #32
   d812a:	bd10      	pop	{r4, pc}

000d812c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d812c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d812e:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8130:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8134:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d8136:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8138:	461a      	mov	r2, r3
   d813a:	4669      	mov	r1, sp
   d813c:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d813e:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d8142:	f8ad 4000 	strh.w	r4, [sp]
   d8146:	f7ff fd01 	bl	d7b4c <spark_function>
}
   d814a:	b004      	add	sp, #16
   d814c:	bd10      	pop	{r4, pc}

000d814e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d814e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d8150:	230c      	movs	r3, #12
   d8152:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d8156:	6803      	ldr	r3, [r0, #0]
   d8158:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d815c:	7a03      	ldrb	r3, [r0, #8]
   d815e:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d8162:	6843      	ldr	r3, [r0, #4]
   d8164:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d8166:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d8168:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d816a:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d816e:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d8170:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d8174:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8178:	f7ff fd48 	bl	d7c0c <spark_cloud_disconnect>
}
   d817c:	b005      	add	sp, #20
   d817e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8182 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d8182:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d8184:	220c      	movs	r2, #12
   d8186:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   d818a:	6802      	ldr	r2, [r0, #0]
   d818c:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   d8190:	7a02      	ldrb	r2, [r0, #8]
   d8192:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   d8196:	6842      	ldr	r2, [r0, #4]
   d8198:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d819a:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   d819c:	7a42      	ldrb	r2, [r0, #9]
   d819e:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d81a2:	4619      	mov	r1, r3
   d81a4:	aa01      	add	r2, sp, #4
   d81a6:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   d81a8:	f8ad 300d 	strh.w	r3, [sp, #13]
   d81ac:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d81b0:	f7ff fd1c 	bl	d7bec <spark_set_connection_property>
}
   d81b4:	b005      	add	sp, #20
   d81b6:	f85d fb04 	ldr.w	pc, [sp], #4

000d81ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d81ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d81bc:	460e      	mov	r6, r1
   d81be:	4604      	mov	r4, r0
   d81c0:	f856 3b04 	ldr.w	r3, [r6], #4
   d81c4:	9300      	str	r3, [sp, #0]
   d81c6:	460d      	mov	r5, r1
   d81c8:	a801      	add	r0, sp, #4
   d81ca:	4631      	mov	r1, r6
   d81cc:	f7ff fe19 	bl	d7e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d81d0:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d81d2:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d81d4:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d81d6:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d81d8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d81da:	2300      	movs	r3, #0
   d81dc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d81de:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d81e0:	f7fc fef8 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d81e4:	4630      	mov	r0, r6
   d81e6:	f7fc fef5 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d81ea:	4628      	mov	r0, r5
   d81ec:	2108      	movs	r1, #8
   d81ee:	f002 ff14 	bl	db01a <_ZdlPvj>
        return p;
    }
   d81f2:	4620      	mov	r0, r4
   d81f4:	b002      	add	sp, #8
   d81f6:	bd70      	pop	{r4, r5, r6, pc}

000d81f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d81f8:	b513      	push	{r0, r1, r4, lr}
   d81fa:	460b      	mov	r3, r1
   d81fc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81fe:	e9d0 0100 	ldrd	r0, r1, [r0]
   d8202:	466c      	mov	r4, sp
   d8204:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8208:	e893 0003 	ldmia.w	r3, {r0, r1}
   d820c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8210:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8214:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8218:	b002      	add	sp, #8
   d821a:	bd10      	pop	{r4, pc}

000d821c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d821c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d821e:	b510      	push	{r4, lr}
      if (_M_empty())
   d8220:	b90a      	cbnz	r2, d8226 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8222:	f002 ff00 	bl	db026 <_ZSt25__throw_bad_function_callv>
    }
   d8226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d822a:	68c3      	ldr	r3, [r0, #12]
   d822c:	4718      	bx	r3

000d822e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d822e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8230:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8232:	f100 0110 	add.w	r1, r0, #16
   d8236:	f7ff fff1 	bl	d821c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d823a:	bd08      	pop	{r3, pc}

000d823c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d823c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d823e:	b510      	push	{r4, lr}
      if (_M_empty())
   d8240:	b90a      	cbnz	r2, d8246 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8242:	f002 fef0 	bl	db026 <_ZSt25__throw_bad_function_callv>
    }
   d8246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d824a:	68c3      	ldr	r3, [r0, #12]
   d824c:	4718      	bx	r3

000d824e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d824e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8250:	6800      	ldr	r0, [r0, #0]
   d8252:	f100 0110 	add.w	r1, r0, #16
   d8256:	f7ff fff1 	bl	d823c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d825a:	bd08      	pop	{r3, pc}

000d825c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d825c:	b538      	push	{r3, r4, r5, lr}
   d825e:	2300      	movs	r3, #0
   d8260:	4604      	mov	r4, r0
   d8262:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8264:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8266:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8268:	f7fb ff15 	bl	d4096 <_Znwj>
   d826c:	b128      	cbz	r0, d827a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d826e:	2301      	movs	r3, #1
   d8270:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8274:	4b02      	ldr	r3, [pc, #8]	; (d8280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8276:	6003      	str	r3, [r0, #0]
   d8278:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d827a:	6020      	str	r0, [r4, #0]
	}
   d827c:	4620      	mov	r0, r4
   d827e:	bd38      	pop	{r3, r4, r5, pc}
   d8280:	000de678 	.word	0x000de678

000d8284 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8284:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8286:	2300      	movs	r3, #0
   d8288:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d828a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d828c:	4604      	mov	r4, r0
   d828e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8290:	b12b      	cbz	r3, d829e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8292:	2202      	movs	r2, #2
   d8294:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8296:	68eb      	ldr	r3, [r5, #12]
   d8298:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d829a:	68ab      	ldr	r3, [r5, #8]
   d829c:	60a3      	str	r3, [r4, #8]
    }
   d829e:	4620      	mov	r0, r4
   d82a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d82a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d82a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d82a6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d82a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d82aa:	4668      	mov	r0, sp
   d82ac:	f7ff fef1 	bl	d8092 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d82b0:	f04f 0302 	mov.w	r3, #2
   d82b4:	e8d4 2f4f 	ldrexb	r2, [r4]
   d82b8:	2a00      	cmp	r2, #0
   d82ba:	d103      	bne.n	d82c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d82bc:	e8c4 3f41 	strexb	r1, r3, [r4]
   d82c0:	2900      	cmp	r1, #0
   d82c2:	d1f7      	bne.n	d82b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d82c4:	d125      	bne.n	d8312 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d82c6:	f104 050c 	add.w	r5, r4, #12
   d82ca:	4669      	mov	r1, sp
   d82cc:	4628      	mov	r0, r5
   d82ce:	f7ff fee0 	bl	d8092 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d82d2:	f3bf 8f5b 	dmb	ish
   d82d6:	2301      	movs	r3, #1
   d82d8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d82da:	2000      	movs	r0, #0
   d82dc:	f104 0308 	add.w	r3, r4, #8
   d82e0:	f3bf 8f5b 	dmb	ish
   d82e4:	e853 6f00 	ldrex	r6, [r3]
   d82e8:	e843 0200 	strex	r2, r0, [r3]
   d82ec:	2a00      	cmp	r2, #0
   d82ee:	d1f9      	bne.n	d82e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d82f0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d82f4:	b16e      	cbz	r6, d8312 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d82f6:	f7ff fbcf 	bl	d7a98 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d82fa:	b178      	cbz	r0, d831c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d82fc:	4629      	mov	r1, r5
   d82fe:	4630      	mov	r0, r6
   d8300:	f7ff ff8c 	bl	d821c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8304:	4630      	mov	r0, r6
   d8306:	f7fb fff7 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d830a:	2110      	movs	r1, #16
   d830c:	4630      	mov	r0, r6
   d830e:	f002 fe84 	bl	db01a <_ZdlPvj>
        p_->setError(std::move(error));
   d8312:	4668      	mov	r0, sp
   d8314:	f7ff feca 	bl	d80ac <_ZN8particle5ErrorD1Ev>
    }
   d8318:	b009      	add	sp, #36	; 0x24
   d831a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d831c:	4631      	mov	r1, r6
   d831e:	a802      	add	r0, sp, #8
   d8320:	f7ff ffb0 	bl	d8284 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8324:	68e0      	ldr	r0, [r4, #12]
   d8326:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d832a:	b108      	cbz	r0, d8330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d832c:	f003 fc9c 	bl	dbc68 <strdup>
        type_(type) {
   d8330:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8332:	2010      	movs	r0, #16
   d8334:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8338:	f7fb fead 	bl	d4096 <_Znwj>
   d833c:	4605      	mov	r5, r0
   d833e:	b1e8      	cbz	r0, d837c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8340:	2700      	movs	r7, #0
   d8342:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8344:	2018      	movs	r0, #24
   d8346:	f7fb fea6 	bl	d4096 <_Znwj>
   d834a:	4604      	mov	r4, r0
   d834c:	b188      	cbz	r0, d8372 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d834e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8350:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8352:	a802      	add	r0, sp, #8
   d8354:	f7ff ff50 	bl	d81f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8358:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d835a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d835c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d835e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8360:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8362:	a906      	add	r1, sp, #24
   d8364:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8366:	60e3      	str	r3, [r4, #12]
   d8368:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d836c:	9205      	str	r2, [sp, #20]
   d836e:	f7ff fe90 	bl	d8092 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8372:	4b08      	ldr	r3, [pc, #32]	; (d8394 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8374:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8376:	4b08      	ldr	r3, [pc, #32]	; (d8398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8378:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d837a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d837c:	a806      	add	r0, sp, #24
   d837e:	f7ff fe95 	bl	d80ac <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8382:	a802      	add	r0, sp, #8
   d8384:	f7fb ffb8 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8388:	2200      	movs	r2, #0
   d838a:	4629      	mov	r1, r5
   d838c:	4803      	ldr	r0, [pc, #12]	; (d839c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d838e:	f7ff fb8b 	bl	d7aa8 <application_thread_invoke>
   d8392:	e7b7      	b.n	d8304 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8394:	000d822f 	.word	0x000d822f
   d8398:	000d84c5 	.word	0x000d84c5
   d839c:	000d7dcb 	.word	0x000d7dcb

000d83a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d83a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d83a4:	b08a      	sub	sp, #40	; 0x28
   d83a6:	4605      	mov	r5, r0
   d83a8:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d83ac:	460c      	mov	r4, r1
   d83ae:	4617      	mov	r7, r2
   d83b0:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d83b2:	f7ff fbe3 	bl	d7b7c <spark_cloud_flag_connected>
   d83b6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d83b8:	4682      	mov	sl, r0
   d83ba:	bb38      	cbnz	r0, d840c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d83bc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d83c0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d83c2:	a905      	add	r1, sp, #20
   d83c4:	4630      	mov	r0, r6
   d83c6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d83ca:	f7ff fe62 	bl	d8092 <_ZN8particle5ErrorC1EOS0_>
   d83ce:	2014      	movs	r0, #20
   d83d0:	f7fb fe61 	bl	d4096 <_Znwj>
   d83d4:	4604      	mov	r4, r0
   d83d6:	b148      	cbz	r0, d83ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d83d8:	2302      	movs	r3, #2
   d83da:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d83dc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d83de:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d83e2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d83e4:	4631      	mov	r1, r6
   d83e6:	300c      	adds	r0, #12
   d83e8:	f7ff fe53 	bl	d8092 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d83ec:	4628      	mov	r0, r5
	: __shared_count(__p)
   d83ee:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d83f0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d83f4:	f7ff ff32 	bl	d825c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d83f8:	4630      	mov	r0, r6
   d83fa:	f7ff fe57 	bl	d80ac <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d83fe:	a805      	add	r0, sp, #20
   d8400:	f7ff fe54 	bl	d80ac <_ZN8particle5ErrorD1Ev>
}
   d8404:	4628      	mov	r0, r5
   d8406:	b00a      	add	sp, #40	; 0x28
   d8408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d840c:	230c      	movs	r3, #12
   d840e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8412:	2014      	movs	r0, #20
   d8414:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8418:	9307      	str	r3, [sp, #28]
   d841a:	f7fb fe3c 	bl	d4096 <_Znwj>
   d841e:	4601      	mov	r1, r0
   d8420:	b128      	cbz	r0, d842e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8422:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8426:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d842a:	f880 a001 	strb.w	sl, [r0, #1]
   d842e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8430:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8432:	f7ff ff13 	bl	d825c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8436:	4b22      	ldr	r3, [pc, #136]	; (d84c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8438:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d843a:	2008      	movs	r0, #8
   d843c:	f7fb fe2b 	bl	d4096 <_Znwj>
   d8440:	4682      	mov	sl, r0
   d8442:	b128      	cbz	r0, d8450 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8444:	9b03      	ldr	r3, [sp, #12]
   d8446:	f840 3b04 	str.w	r3, [r0], #4
   d844a:	a904      	add	r1, sp, #16
   d844c:	f7ff fcd9 	bl	d7e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8450:	9600      	str	r6, [sp, #0]
   d8452:	fa5f f389 	uxtb.w	r3, r9
   d8456:	4642      	mov	r2, r8
   d8458:	4639      	mov	r1, r7
   d845a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d845c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8460:	f7ff fb9c 	bl	d7b9c <spark_send_event>
   d8464:	b9b8      	cbnz	r0, d8496 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8466:	9b03      	ldr	r3, [sp, #12]
   d8468:	785b      	ldrb	r3, [r3, #1]
   d846a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d846e:	b993      	cbnz	r3, d8496 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8470:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8474:	a905      	add	r1, sp, #20
   d8476:	a803      	add	r0, sp, #12
   d8478:	9205      	str	r2, [sp, #20]
   d847a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d847e:	f7ff ff11 	bl	d82a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8482:	a805      	add	r0, sp, #20
   d8484:	f7ff fe12 	bl	d80ac <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8488:	a805      	add	r0, sp, #20
   d848a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d848c:	f7ff fe95 	bl	d81ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8490:	a806      	add	r0, sp, #24
   d8492:	f7fc fd9f 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8496:	9b03      	ldr	r3, [sp, #12]
   d8498:	9305      	str	r3, [sp, #20]
   d849a:	a904      	add	r1, sp, #16
   d849c:	a806      	add	r0, sp, #24
   d849e:	f7ff fcb0 	bl	d7e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d84a2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d84a4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d84a6:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d84a8:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d84aa:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d84ac:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d84ae:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d84b0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d84b2:	f7fc fd8f 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d84b6:	a804      	add	r0, sp, #16
   d84b8:	f7fc fd8c 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d84bc:	e7a2      	b.n	d8404 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d84be:	bf00      	nop
   d84c0:	000d8589 	.word	0x000d8589

000d84c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d84c4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d84c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d84c8:	4605      	mov	r5, r0
	  switch (__op)
   d84ca:	d007      	beq.n	d84dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d84cc:	2a03      	cmp	r2, #3
   d84ce:	d018      	beq.n	d8502 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d84d0:	2a01      	cmp	r2, #1
   d84d2:	d101      	bne.n	d84d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d84d4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d84d6:	6003      	str	r3, [r0, #0]
	}
   d84d8:	2000      	movs	r0, #0
   d84da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d84dc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d84de:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d84e0:	f7fb fdd9 	bl	d4096 <_Znwj>
   d84e4:	4604      	mov	r4, r0
   d84e6:	b150      	cbz	r0, d84fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d84e8:	4631      	mov	r1, r6
   d84ea:	f7ff fecb 	bl	d8284 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d84ee:	6930      	ldr	r0, [r6, #16]
   d84f0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d84f4:	b108      	cbz	r0, d84fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d84f6:	f003 fbb7 	bl	dbc68 <strdup>
        type_(type) {
   d84fa:	6120      	str	r0, [r4, #16]
   d84fc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d84fe:	602c      	str	r4, [r5, #0]
	}
   d8500:	e7ea      	b.n	d84d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8502:	6804      	ldr	r4, [r0, #0]
   d8504:	2c00      	cmp	r4, #0
   d8506:	d0e7      	beq.n	d84d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8508:	f104 0010 	add.w	r0, r4, #16
   d850c:	f7ff fdce 	bl	d80ac <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8510:	4620      	mov	r0, r4
   d8512:	f7fb fef1 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8516:	2118      	movs	r1, #24
   d8518:	4620      	mov	r0, r4
   d851a:	f002 fd7e 	bl	db01a <_ZdlPvj>
   d851e:	e7db      	b.n	d84d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8520 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8520:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8522:	2300      	movs	r3, #0
   d8524:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8526:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8528:	4604      	mov	r4, r0
   d852a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d852c:	b12b      	cbz	r3, d853a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d852e:	2202      	movs	r2, #2
   d8530:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8532:	68eb      	ldr	r3, [r5, #12]
   d8534:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8536:	68ab      	ldr	r3, [r5, #8]
   d8538:	60a3      	str	r3, [r4, #8]
    }
   d853a:	4620      	mov	r0, r4
   d853c:	bd38      	pop	{r3, r4, r5, pc}

000d853e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d853e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8540:	b570      	push	{r4, r5, r6, lr}
   d8542:	4604      	mov	r4, r0
	  switch (__op)
   d8544:	d007      	beq.n	d8556 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8546:	2a03      	cmp	r2, #3
   d8548:	d012      	beq.n	d8570 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d854a:	2a01      	cmp	r2, #1
   d854c:	d101      	bne.n	d8552 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d854e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8550:	6003      	str	r3, [r0, #0]
	}
   d8552:	2000      	movs	r0, #0
   d8554:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8556:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8558:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d855a:	f7fb fd9c 	bl	d4096 <_Znwj>
   d855e:	4605      	mov	r5, r0
   d8560:	b120      	cbz	r0, d856c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8562:	4631      	mov	r1, r6
   d8564:	f7ff ffdc 	bl	d8520 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8568:	7c33      	ldrb	r3, [r6, #16]
   d856a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d856c:	6025      	str	r5, [r4, #0]
	}
   d856e:	e7f0      	b.n	d8552 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8570:	6804      	ldr	r4, [r0, #0]
   d8572:	2c00      	cmp	r4, #0
   d8574:	d0ed      	beq.n	d8552 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8576:	4620      	mov	r0, r4
   d8578:	f7fb febe 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d857c:	2114      	movs	r1, #20
   d857e:	4620      	mov	r0, r4
   d8580:	f002 fd4b 	bl	db01a <_ZdlPvj>
   d8584:	e7e5      	b.n	d8552 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8588 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8588:	b5f0      	push	{r4, r5, r6, r7, lr}
   d858a:	b089      	sub	sp, #36	; 0x24
   d858c:	4604      	mov	r4, r0
   d858e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8590:	a801      	add	r0, sp, #4
   d8592:	4611      	mov	r1, r2
   d8594:	f7ff fe11 	bl	d81ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8598:	b1a4      	cbz	r4, d85c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d859a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d859c:	b11d      	cbz	r5, d85a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d859e:	4628      	mov	r0, r5
   d85a0:	f003 fb62 	bl	dbc68 <strdup>
   d85a4:	4605      	mov	r5, r0
   d85a6:	a801      	add	r0, sp, #4
   d85a8:	a903      	add	r1, sp, #12
        type_(type) {
   d85aa:	9503      	str	r5, [sp, #12]
   d85ac:	f8ad 4010 	strh.w	r4, [sp, #16]
   d85b0:	f7ff fe78 	bl	d82a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d85b4:	a803      	add	r0, sp, #12
   d85b6:	f7ff fd79 	bl	d80ac <_ZN8particle5ErrorD1Ev>
   d85ba:	a802      	add	r0, sp, #8
   d85bc:	f7fc fd0a 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d85c0:	b009      	add	sp, #36	; 0x24
   d85c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d85c4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d85c6:	2301      	movs	r3, #1
   d85c8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d85cc:	2a00      	cmp	r2, #0
   d85ce:	d103      	bne.n	d85d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d85d0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d85d4:	2900      	cmp	r1, #0
   d85d6:	d1f7      	bne.n	d85c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d85d8:	d1ef      	bne.n	d85ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d85da:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d85dc:	f3bf 8f5b 	dmb	ish
   d85e0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d85e2:	1d2b      	adds	r3, r5, #4
   d85e4:	f3bf 8f5b 	dmb	ish
   d85e8:	e853 6f00 	ldrex	r6, [r3]
   d85ec:	e843 4200 	strex	r2, r4, [r3]
   d85f0:	2a00      	cmp	r2, #0
   d85f2:	d1f9      	bne.n	d85e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d85f4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d85f8:	2e00      	cmp	r6, #0
   d85fa:	d0de      	beq.n	d85ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d85fc:	4620      	mov	r0, r4
   d85fe:	f7ff fa4b 	bl	d7a98 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8602:	4607      	mov	r7, r0
   d8604:	b160      	cbz	r0, d8620 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8606:	f105 010c 	add.w	r1, r5, #12
   d860a:	4630      	mov	r0, r6
   d860c:	f7ff fe16 	bl	d823c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8610:	4630      	mov	r0, r6
   d8612:	f7fb fe71 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8616:	2110      	movs	r1, #16
   d8618:	4630      	mov	r0, r6
   d861a:	f002 fcfe 	bl	db01a <_ZdlPvj>
   d861e:	e7cc      	b.n	d85ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8620:	4631      	mov	r1, r6
   d8622:	a803      	add	r0, sp, #12
   d8624:	f7ff ff7c 	bl	d8520 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8628:	7b2b      	ldrb	r3, [r5, #12]
   d862a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d862e:	2010      	movs	r0, #16
   d8630:	f7fb fd31 	bl	d4096 <_Znwj>
   d8634:	4605      	mov	r5, r0
   d8636:	b1d0      	cbz	r0, d866e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8638:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d863a:	2014      	movs	r0, #20
   d863c:	f7fb fd2b 	bl	d4096 <_Znwj>
   d8640:	4604      	mov	r4, r0
   d8642:	b178      	cbz	r0, d8664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8644:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8646:	4601      	mov	r1, r0
   d8648:	a803      	add	r0, sp, #12
   d864a:	f7ff fdd5 	bl	d81f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d864e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8650:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8652:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8654:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8656:	9205      	str	r2, [sp, #20]
   d8658:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d865a:	60e3      	str	r3, [r4, #12]
   d865c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8660:	9206      	str	r2, [sp, #24]
   d8662:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8664:	4b06      	ldr	r3, [pc, #24]	; (d8680 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8666:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8668:	4b06      	ldr	r3, [pc, #24]	; (d8684 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d866a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d866c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d866e:	a803      	add	r0, sp, #12
   d8670:	f7fb fe42 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8674:	2200      	movs	r2, #0
   d8676:	4629      	mov	r1, r5
   d8678:	4803      	ldr	r0, [pc, #12]	; (d8688 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d867a:	f7ff fa15 	bl	d7aa8 <application_thread_invoke>
   d867e:	e7c7      	b.n	d8610 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8680:	000d824f 	.word	0x000d824f
   d8684:	000d853f 	.word	0x000d853f
   d8688:	000d7dcb 	.word	0x000d7dcb

000d868c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d868c:	2200      	movs	r2, #0
   d868e:	6840      	ldr	r0, [r0, #4]
   d8690:	4611      	mov	r1, r2
   d8692:	f7ff bafb 	b.w	d7c8c <network_listening>

000d8696 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8696:	2200      	movs	r2, #0
   d8698:	6840      	ldr	r0, [r0, #4]
   d869a:	4611      	mov	r1, r2
   d869c:	f7ff bb06 	b.w	d7cac <network_get_listen_timeout>

000d86a0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d86a0:	6840      	ldr	r0, [r0, #4]
   d86a2:	2200      	movs	r2, #0
   d86a4:	f7ff bafa 	b.w	d7c9c <network_set_listen_timeout>

000d86a8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d86a8:	6840      	ldr	r0, [r0, #4]
   d86aa:	2200      	movs	r2, #0
   d86ac:	f081 0101 	eor.w	r1, r1, #1
   d86b0:	f7ff bae4 	b.w	d7c7c <network_listen>

000d86b4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d86b4:	2300      	movs	r3, #0
   d86b6:	6840      	ldr	r0, [r0, #4]
   d86b8:	461a      	mov	r2, r3
   d86ba:	4619      	mov	r1, r3
   d86bc:	f7ff bad6 	b.w	d7c6c <network_off>

000d86c0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d86c0:	2300      	movs	r3, #0
   d86c2:	6840      	ldr	r0, [r0, #4]
   d86c4:	461a      	mov	r2, r3
   d86c6:	4619      	mov	r1, r3
   d86c8:	f7ff bac8 	b.w	d7c5c <network_on>

000d86cc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d86cc:	2200      	movs	r2, #0
   d86ce:	6840      	ldr	r0, [r0, #4]
   d86d0:	4611      	mov	r1, r2
   d86d2:	f7ff babb 	b.w	d7c4c <network_ready>

000d86d6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d86d6:	2200      	movs	r2, #0
   d86d8:	6840      	ldr	r0, [r0, #4]
   d86da:	4611      	mov	r1, r2
   d86dc:	f7ff baa6 	b.w	d7c2c <network_connecting>

000d86e0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d86e0:	6840      	ldr	r0, [r0, #4]
   d86e2:	2200      	movs	r2, #0
   d86e4:	2102      	movs	r1, #2
   d86e6:	f7ff baa9 	b.w	d7c3c <network_disconnect>

000d86ea <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d86ea:	2300      	movs	r3, #0
   d86ec:	6840      	ldr	r0, [r0, #4]
   d86ee:	461a      	mov	r2, r3
   d86f0:	f7ff ba94 	b.w	d7c1c <network_connect>

000d86f4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d86f4:	4b02      	ldr	r3, [pc, #8]	; (d8700 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d86f6:	2203      	movs	r2, #3
   d86f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d86fa:	4a02      	ldr	r2, [pc, #8]	; (d8704 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d86fc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d86fe:	4770      	bx	lr
   d8700:	2003e5cc 	.word	0x2003e5cc
   d8704:	000de694 	.word	0x000de694

000d8708 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8708:	6800      	ldr	r0, [r0, #0]
   d870a:	f000 b957 	b.w	d89bc <_ZN7TwoWire4lockEv>

000d870e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d870e:	b510      	push	{r4, lr}
   d8710:	4604      	mov	r4, r0
      lock_(_lock) {
   d8712:	6001      	str	r1, [r0, #0]
   d8714:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d8716:	b10a      	cbz	r2, d871c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8718:	f7ff fff6 	bl	d8708 <_ZN9FuelGauge4lockEv>
}
   d871c:	4620      	mov	r0, r4
   d871e:	bd10      	pop	{r4, pc}

000d8720 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d8720:	b513      	push	{r0, r1, r4, lr}
   d8722:	4604      	mov	r4, r0
   d8724:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d8726:	f002 fc4b 	bl	dafc0 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d872a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d872c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d872e:	4620      	mov	r0, r4
   d8730:	f7ff ffed 	bl	d870e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d8734:	4620      	mov	r0, r4
   d8736:	b002      	add	sp, #8
   d8738:	bd10      	pop	{r4, pc}

000d873a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d873a:	6800      	ldr	r0, [r0, #0]
   d873c:	f000 b947 	b.w	d89ce <_ZN7TwoWire6unlockEv>

000d8740 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d8740:	b510      	push	{r4, lr}
    if (lock_) {
   d8742:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d8744:	4604      	mov	r4, r0
    if (lock_) {
   d8746:	b10b      	cbz	r3, d874c <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d8748:	f7ff fff7 	bl	d873a <_ZN9FuelGauge6unlockEv>
}
   d874c:	4620      	mov	r0, r4
   d874e:	bd10      	pop	{r4, pc}

000d8750 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d8750:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8754:	4604      	mov	r4, r0
   d8756:	460d      	mov	r5, r1
   d8758:	4617      	mov	r7, r2
   d875a:	461e      	mov	r6, r3
   d875c:	f7ff ffd4 	bl	d8708 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8760:	2336      	movs	r3, #54	; 0x36
   d8762:	f88d 3000 	strb.w	r3, [sp]
   d8766:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8768:	6820      	ldr	r0, [r4, #0]
   d876a:	9301      	str	r3, [sp, #4]
   d876c:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d8770:	230a      	movs	r3, #10
   d8772:	4669      	mov	r1, sp
   d8774:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8776:	f88d 8008 	strb.w	r8, [sp, #8]
   d877a:	f000 f903 	bl	d8984 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d877e:	6820      	ldr	r0, [r4, #0]
   d8780:	6803      	ldr	r3, [r0, #0]
   d8782:	4629      	mov	r1, r5
   d8784:	689b      	ldr	r3, [r3, #8]
   d8786:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8788:	6820      	ldr	r0, [r4, #0]
   d878a:	4641      	mov	r1, r8
   d878c:	f000 f912 	bl	d89b4 <_ZN7TwoWire15endTransmissionEh>
   d8790:	4605      	mov	r5, r0
   d8792:	b140      	cbz	r0, d87a6 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d8794:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d8798:	4620      	mov	r0, r4
   d879a:	f7ff ffce 	bl	d873a <_ZN9FuelGauge6unlockEv>
}
   d879e:	4628      	mov	r0, r5
   d87a0:	b004      	add	sp, #16
   d87a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d87a6:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d87a8:	6820      	ldr	r0, [r4, #0]
   d87aa:	9301      	str	r3, [sp, #4]
   d87ac:	4669      	mov	r1, sp
   d87ae:	f000 f8b9 	bl	d8924 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d87b2:	2802      	cmp	r0, #2
   d87b4:	d1ee      	bne.n	d8794 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d87b6:	6820      	ldr	r0, [r4, #0]
   d87b8:	6803      	ldr	r3, [r0, #0]
   d87ba:	695b      	ldr	r3, [r3, #20]
   d87bc:	4798      	blx	r3
   d87be:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d87c0:	6820      	ldr	r0, [r4, #0]
   d87c2:	6803      	ldr	r3, [r0, #0]
   d87c4:	695b      	ldr	r3, [r3, #20]
   d87c6:	4798      	blx	r3
   d87c8:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d87ca:	e7e5      	b.n	d8798 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d87cc <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   d87cc:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   d87ce:	460a      	mov	r2, r1
   d87d0:	210c      	movs	r1, #12
   d87d2:	f7ff bfbd 	b.w	d8750 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d87d6 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d87d6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d87da:	4616      	mov	r6, r2
   d87dc:	4604      	mov	r4, r0
   d87de:	461d      	mov	r5, r3
   d87e0:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d87e2:	f7ff ff91 	bl	d8708 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d87e6:	2336      	movs	r3, #54	; 0x36
   d87e8:	f88d 3000 	strb.w	r3, [sp]
   d87ec:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d87ee:	6820      	ldr	r0, [r4, #0]
   d87f0:	9301      	str	r3, [sp, #4]
   d87f2:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d87f6:	230a      	movs	r3, #10
   d87f8:	4669      	mov	r1, sp
   d87fa:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d87fc:	f88d 8008 	strb.w	r8, [sp, #8]
   d8800:	f000 f8c0 	bl	d8984 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d8804:	6820      	ldr	r0, [r4, #0]
   d8806:	6803      	ldr	r3, [r0, #0]
   d8808:	4639      	mov	r1, r7
   d880a:	689b      	ldr	r3, [r3, #8]
   d880c:	4798      	blx	r3
    i2c_.write(MSB);
   d880e:	6820      	ldr	r0, [r4, #0]
   d8810:	6803      	ldr	r3, [r0, #0]
   d8812:	4631      	mov	r1, r6
   d8814:	689b      	ldr	r3, [r3, #8]
   d8816:	4798      	blx	r3
    i2c_.write(LSB);
   d8818:	6820      	ldr	r0, [r4, #0]
   d881a:	6803      	ldr	r3, [r0, #0]
   d881c:	4629      	mov	r1, r5
   d881e:	689b      	ldr	r3, [r3, #8]
   d8820:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8822:	4641      	mov	r1, r8
   d8824:	6820      	ldr	r0, [r4, #0]
   d8826:	f000 f8c5 	bl	d89b4 <_ZN7TwoWire15endTransmissionEh>
   d882a:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d882c:	4620      	mov	r0, r4
   d882e:	bf0c      	ite	eq
   d8830:	2500      	moveq	r5, #0
   d8832:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d8836:	f7ff ff80 	bl	d873a <_ZN9FuelGauge6unlockEv>
}
   d883a:	4628      	mov	r0, r5
   d883c:	b004      	add	sp, #16
   d883e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8842 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d8842:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d8844:	2240      	movs	r2, #64	; 0x40
   d8846:	2300      	movs	r3, #0
   d8848:	2106      	movs	r1, #6
   d884a:	f7ff ffc4 	bl	d87d6 <_ZN9FuelGauge13writeRegisterEhhh>
}
   d884e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d8852:	bd08      	pop	{r3, pc}

000d8854 <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   d8854:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8856:	4605      	mov	r5, r0
      { _M_device.lock(); }
   d8858:	f7ff ff56 	bl	d8708 <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   d885c:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   d885e:	f10d 0207 	add.w	r2, sp, #7
   d8862:	f10d 0106 	add.w	r1, sp, #6
   d8866:	4628      	mov	r0, r5
    byte MSB = 0;
   d8868:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d886c:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   d8870:	f7ff ffac 	bl	d87cc <_ZN9FuelGauge18readConfigRegisterERhS0_>
   d8874:	1e04      	subs	r4, r0, #0
   d8876:	db0b      	blt.n	d8890 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   d8878:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d887c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d8880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d8884:	210c      	movs	r1, #12
   d8886:	4628      	mov	r0, r5
   d8888:	f7ff ffa5 	bl	d87d6 <_ZN9FuelGauge13writeRegisterEhhh>
   d888c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   d8890:	4628      	mov	r0, r5
   d8892:	f7ff ff52 	bl	d873a <_ZN9FuelGauge6unlockEv>
}
   d8896:	4620      	mov	r0, r4
   d8898:	b003      	add	sp, #12
   d889a:	bd30      	pop	{r4, r5, pc}

000d889c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d889c:	4770      	bx	lr

000d889e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d889e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d88a0:	4606      	mov	r6, r0
   d88a2:	4615      	mov	r5, r2
   d88a4:	460c      	mov	r4, r1
   d88a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d88a8:	42bc      	cmp	r4, r7
   d88aa:	d006      	beq.n	d88ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d88ac:	6833      	ldr	r3, [r6, #0]
   d88ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   d88b2:	689b      	ldr	r3, [r3, #8]
   d88b4:	4630      	mov	r0, r6
   d88b6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d88b8:	e7f6      	b.n	d88a8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d88ba:	4628      	mov	r0, r5
   d88bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d88be <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d88be:	7c00      	ldrb	r0, [r0, #16]
   d88c0:	2200      	movs	r2, #0
   d88c2:	f7fe bf7f 	b.w	d77c4 <hal_i2c_write>

000d88c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d88c6:	7c00      	ldrb	r0, [r0, #16]
   d88c8:	2100      	movs	r1, #0
   d88ca:	f7fe bf83 	b.w	d77d4 <hal_i2c_available>

000d88ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d88ce:	7c00      	ldrb	r0, [r0, #16]
   d88d0:	2100      	movs	r1, #0
   d88d2:	f7fe bf87 	b.w	d77e4 <hal_i2c_read>

000d88d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d88d6:	7c00      	ldrb	r0, [r0, #16]
   d88d8:	2100      	movs	r1, #0
   d88da:	f7fe bf8b 	b.w	d77f4 <hal_i2c_peek>

000d88de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d88de:	7c00      	ldrb	r0, [r0, #16]
   d88e0:	2100      	movs	r1, #0
   d88e2:	f7fe bf8f 	b.w	d7804 <hal_i2c_flush>

000d88e6 <_ZN7TwoWireD0Ev>:
   d88e6:	b510      	push	{r4, lr}
   d88e8:	2114      	movs	r1, #20
   d88ea:	4604      	mov	r4, r0
   d88ec:	f002 fb95 	bl	db01a <_ZdlPvj>
   d88f0:	4620      	mov	r0, r4
   d88f2:	bd10      	pop	{r4, pc}

000d88f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d88f4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d88f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d88fa:	4604      	mov	r4, r0
   d88fc:	4608      	mov	r0, r1
   d88fe:	2100      	movs	r1, #0
   d8900:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8904:	4b03      	ldr	r3, [pc, #12]	; (d8914 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8906:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8908:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d890a:	4611      	mov	r1, r2
   d890c:	f7fe ff8a 	bl	d7824 <hal_i2c_init>
}
   d8910:	4620      	mov	r0, r4
   d8912:	bd10      	pop	{r4, pc}
   d8914:	000de6d0 	.word	0x000de6d0

000d8918 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8918:	2300      	movs	r3, #0
   d891a:	7c00      	ldrb	r0, [r0, #16]
   d891c:	461a      	mov	r2, r3
   d891e:	4619      	mov	r1, r3
   d8920:	f7fe bf38 	b.w	d7794 <hal_i2c_begin>

000d8924 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8924:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8926:	2200      	movs	r2, #0
   d8928:	2314      	movs	r3, #20
   d892a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d892e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8932:	780b      	ldrb	r3, [r1, #0]
   d8934:	f88d 3008 	strb.w	r3, [sp, #8]
   d8938:	684b      	ldr	r3, [r1, #4]
   d893a:	9303      	str	r3, [sp, #12]
   d893c:	68cb      	ldr	r3, [r1, #12]
   d893e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8940:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8942:	7a0b      	ldrb	r3, [r1, #8]
   d8944:	9305      	str	r3, [sp, #20]
   d8946:	a901      	add	r1, sp, #4
   d8948:	f7fe ff84 	bl	d7854 <hal_i2c_request_ex>
}
   d894c:	b007      	add	sp, #28
   d894e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8952 <_ZN7TwoWire11requestFromEhjh>:
{
   d8952:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8954:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8956:	f88d 1000 	strb.w	r1, [sp]
   d895a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d895e:	9103      	str	r1, [sp, #12]
   d8960:	bf18      	it	ne
   d8962:	2301      	movne	r3, #1
   d8964:	4669      	mov	r1, sp
    size_ = size;
   d8966:	9201      	str	r2, [sp, #4]
   d8968:	f88d 3008 	strb.w	r3, [sp, #8]
   d896c:	f7ff ffda 	bl	d8924 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8970:	b005      	add	sp, #20
   d8972:	f85d fb04 	ldr.w	pc, [sp], #4

000d8976 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8976:	7c00      	ldrb	r0, [r0, #16]
   d8978:	2200      	movs	r2, #0
   d897a:	f7fe bf13 	b.w	d77a4 <hal_i2c_begin_transmission>

000d897e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d897e:	b2c9      	uxtb	r1, r1
   d8980:	f7ff bff9 	b.w	d8976 <_ZN7TwoWire17beginTransmissionEh>

000d8984 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d8984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8986:	2300      	movs	r3, #0
   d8988:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d898c:	684a      	ldr	r2, [r1, #4]
   d898e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d8990:	2314      	movs	r3, #20
    };
   d8992:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8994:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d8998:	780b      	ldrb	r3, [r1, #0]
    };
   d899a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d899c:	7a0a      	ldrb	r2, [r1, #8]
   d899e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d89a0:	7c00      	ldrb	r0, [r0, #16]
    };
   d89a2:	f88d 3008 	strb.w	r3, [sp, #8]
   d89a6:	aa01      	add	r2, sp, #4
   d89a8:	4619      	mov	r1, r3
   d89aa:	f7fe fefb 	bl	d77a4 <hal_i2c_begin_transmission>
}
   d89ae:	b007      	add	sp, #28
   d89b0:	f85d fb04 	ldr.w	pc, [sp], #4

000d89b4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d89b4:	7c00      	ldrb	r0, [r0, #16]
   d89b6:	2200      	movs	r2, #0
   d89b8:	f7fe befc 	b.w	d77b4 <hal_i2c_end_transmission>

000d89bc <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d89bc:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d89be:	2100      	movs	r1, #0
   d89c0:	7c00      	ldrb	r0, [r0, #16]
   d89c2:	f7fe ff37 	bl	d7834 <hal_i2c_lock>
}
   d89c6:	fab0 f080 	clz	r0, r0
   d89ca:	0940      	lsrs	r0, r0, #5
   d89cc:	bd08      	pop	{r3, pc}

000d89ce <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d89ce:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d89d0:	2100      	movs	r1, #0
   d89d2:	7c00      	ldrb	r0, [r0, #16]
   d89d4:	f7fe ff36 	bl	d7844 <hal_i2c_unlock>
}
   d89d8:	fab0 f080 	clz	r0, r0
   d89dc:	0940      	lsrs	r0, r0, #5
   d89de:	bd08      	pop	{r3, pc}

000d89e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d89e0:	4770      	bx	lr

000d89e2 <_ZN9IPAddressD0Ev>:
   d89e2:	b510      	push	{r4, lr}
   d89e4:	2118      	movs	r1, #24
   d89e6:	4604      	mov	r4, r0
   d89e8:	f002 fb17 	bl	db01a <_ZdlPvj>
   d89ec:	4620      	mov	r0, r4
   d89ee:	bd10      	pop	{r4, pc}

000d89f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d89f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d89f2:	7d03      	ldrb	r3, [r0, #20]
   d89f4:	2b06      	cmp	r3, #6
{
   d89f6:	b08d      	sub	sp, #52	; 0x34
   d89f8:	460e      	mov	r6, r1
   d89fa:	f100 0704 	add.w	r7, r0, #4
   d89fe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8a02:	d012      	beq.n	d8a2a <_ZNK9IPAddress7printToER5Print+0x3a>
   d8a04:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8a08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8a0c:	220a      	movs	r2, #10
   d8a0e:	4630      	mov	r0, r6
   d8a10:	f001 fb98 	bl	da144 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8a14:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8a16:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8a18:	d019      	beq.n	d8a4e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8a1a:	2c00      	cmp	r4, #0
   d8a1c:	d0f4      	beq.n	d8a08 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8a1e:	212e      	movs	r1, #46	; 0x2e
   d8a20:	4630      	mov	r0, r6
   d8a22:	f001 fb76 	bl	da112 <_ZN5Print5printEc>
   d8a26:	4404      	add	r4, r0
   d8a28:	e7ee      	b.n	d8a08 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8a2a:	232f      	movs	r3, #47	; 0x2f
   d8a2c:	466a      	mov	r2, sp
   d8a2e:	4639      	mov	r1, r7
   d8a30:	200a      	movs	r0, #10
		buf[0] = 0;
   d8a32:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8a36:	f7fe ff15 	bl	d7864 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8a3a:	4668      	mov	r0, sp
   d8a3c:	f003 f931 	bl	dbca2 <strlen>
   d8a40:	6833      	ldr	r3, [r6, #0]
   d8a42:	4602      	mov	r2, r0
   d8a44:	68db      	ldr	r3, [r3, #12]
   d8a46:	4669      	mov	r1, sp
   d8a48:	4630      	mov	r0, r6
   d8a4a:	4798      	blx	r3
   d8a4c:	4604      	mov	r4, r0
    }
    return n;
}
   d8a4e:	4620      	mov	r0, r4
   d8a50:	b00d      	add	sp, #52	; 0x34
   d8a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8a54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8a54:	b510      	push	{r4, lr}
   d8a56:	4b05      	ldr	r3, [pc, #20]	; (d8a6c <_ZN9IPAddressC1Ev+0x18>)
   d8a58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8a5a:	2211      	movs	r2, #17
   d8a5c:	f840 3b04 	str.w	r3, [r0], #4
   d8a60:	2100      	movs	r1, #0
   d8a62:	f003 f8ab 	bl	dbbbc <memset>
}
   d8a66:	4620      	mov	r0, r4
   d8a68:	bd10      	pop	{r4, pc}
   d8a6a:	bf00      	nop
   d8a6c:	000de6f8 	.word	0x000de6f8

000d8a70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8a70:	4603      	mov	r3, r0
   d8a72:	4a07      	ldr	r2, [pc, #28]	; (d8a90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8a74:	b510      	push	{r4, lr}
   d8a76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8a7a:	f101 0210 	add.w	r2, r1, #16
   d8a7e:	f851 4b04 	ldr.w	r4, [r1], #4
   d8a82:	f843 4b04 	str.w	r4, [r3], #4
   d8a86:	4291      	cmp	r1, r2
   d8a88:	d1f9      	bne.n	d8a7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8a8a:	780a      	ldrb	r2, [r1, #0]
   d8a8c:	701a      	strb	r2, [r3, #0]
}
   d8a8e:	bd10      	pop	{r4, pc}
   d8a90:	000de6f8 	.word	0x000de6f8

000d8a94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8a94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8a96:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8a9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8a9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8aa2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8aa6:	2304      	movs	r3, #4
   d8aa8:	6041      	str	r1, [r0, #4]
   d8aaa:	7503      	strb	r3, [r0, #20]
}
   d8aac:	bd10      	pop	{r4, pc}

000d8aae <_ZN9IPAddressaSEPKh>:
{
   d8aae:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8ab0:	78cb      	ldrb	r3, [r1, #3]
   d8ab2:	9300      	str	r3, [sp, #0]
   d8ab4:	788b      	ldrb	r3, [r1, #2]
   d8ab6:	784a      	ldrb	r2, [r1, #1]
   d8ab8:	7809      	ldrb	r1, [r1, #0]
   d8aba:	f7ff ffeb 	bl	d8a94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8abe:	b002      	add	sp, #8
   d8ac0:	bd10      	pop	{r4, pc}

000d8ac2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d8ac2:	f100 0310 	add.w	r3, r0, #16
   d8ac6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8ac8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d8acc:	2901      	cmp	r1, #1
   d8ace:	4618      	mov	r0, r3
   d8ad0:	d108      	bne.n	d8ae4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d8ad2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d8ad6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d8ada:	3a01      	subs	r2, #1
   d8adc:	f103 0310 	add.w	r3, r3, #16
   d8ae0:	d1f2      	bne.n	d8ac8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d8ae2:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d8ae4:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8ae6:	bf04      	itt	eq
   d8ae8:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d8aec:	1852      	addeq	r2, r2, r1
   d8aee:	e7f4      	b.n	d8ada <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d8af0 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d8af0:	b40e      	push	{r1, r2, r3}
   d8af2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8af4:	b088      	sub	sp, #32
   d8af6:	af00      	add	r7, sp, #0
   d8af8:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8afc:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8afe:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8b02:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8b04:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8b06:	462b      	mov	r3, r5
   d8b08:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d8b0a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8b0c:	f7ff f90e 	bl	d7d2c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d8b10:	280f      	cmp	r0, #15
   d8b12:	687a      	ldr	r2, [r7, #4]
   d8b14:	d91a      	bls.n	d8b4c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d8b16:	f100 0308 	add.w	r3, r0, #8
   d8b1a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d8b1e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d8b20:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8b24:	1c41      	adds	r1, r0, #1
   d8b26:	462b      	mov	r3, r5
   d8b28:	4668      	mov	r0, sp
        va_start(args, fmt);
   d8b2a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8b2c:	f7ff f8fe 	bl	d7d2c <vsnprintf>
        if (n > 0) {
   d8b30:	1e02      	subs	r2, r0, #0
   d8b32:	dd04      	ble.n	d8b3e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d8b34:	6823      	ldr	r3, [r4, #0]
   d8b36:	4669      	mov	r1, sp
   d8b38:	689b      	ldr	r3, [r3, #8]
   d8b3a:	4620      	mov	r0, r4
   d8b3c:	4798      	blx	r3
   d8b3e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d8b40:	3720      	adds	r7, #32
   d8b42:	46bd      	mov	sp, r7
   d8b44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8b48:	b003      	add	sp, #12
   d8b4a:	4770      	bx	lr
    } else if (n > 0) {
   d8b4c:	2800      	cmp	r0, #0
   d8b4e:	d0f7      	beq.n	d8b40 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d8b50:	6823      	ldr	r3, [r4, #0]
   d8b52:	4602      	mov	r2, r0
   d8b54:	689b      	ldr	r3, [r3, #8]
   d8b56:	f107 0110 	add.w	r1, r7, #16
   d8b5a:	4620      	mov	r0, r4
   d8b5c:	4798      	blx	r3
}
   d8b5e:	e7ef      	b.n	d8b40 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d8b60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8b60:	b510      	push	{r4, lr}
          _M_dispose();
   d8b62:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8b64:	4604      	mov	r4, r0
          _M_dispose();
   d8b66:	689b      	ldr	r3, [r3, #8]
   d8b68:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8b6a:	68a3      	ldr	r3, [r4, #8]
   d8b6c:	3b01      	subs	r3, #1
   d8b6e:	60a3      	str	r3, [r4, #8]
   d8b70:	b92b      	cbnz	r3, d8b7e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8b72:	6823      	ldr	r3, [r4, #0]
   d8b74:	4620      	mov	r0, r4
   d8b76:	68db      	ldr	r3, [r3, #12]
    }
   d8b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d8b7c:	4718      	bx	r3
    }
   d8b7e:	bd10      	pop	{r4, pc}

000d8b80 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8b80:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8b82:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d8b84:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8b88:	689b      	ldr	r3, [r3, #8]
   d8b8a:	2201      	movs	r2, #1
   d8b8c:	f10d 0107 	add.w	r1, sp, #7
   d8b90:	4798      	blx	r3
}
   d8b92:	b003      	add	sp, #12
   d8b94:	f85d fb04 	ldr.w	pc, [sp], #4

000d8b98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d8b98:	b538      	push	{r3, r4, r5, lr}
   d8b9a:	680b      	ldr	r3, [r1, #0]
   d8b9c:	6003      	str	r3, [r0, #0]
   d8b9e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d8ba0:	6843      	ldr	r3, [r0, #4]
   d8ba2:	429d      	cmp	r5, r3
    class __shared_ptr
   d8ba4:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d8ba6:	d00c      	beq.n	d8bc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d8ba8:	b115      	cbz	r5, d8bb0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d8baa:	686b      	ldr	r3, [r5, #4]
   d8bac:	3301      	adds	r3, #1
   d8bae:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d8bb0:	6860      	ldr	r0, [r4, #4]
   d8bb2:	b128      	cbz	r0, d8bc0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d8bb4:	6843      	ldr	r3, [r0, #4]
   d8bb6:	3b01      	subs	r3, #1
   d8bb8:	6043      	str	r3, [r0, #4]
   d8bba:	b90b      	cbnz	r3, d8bc0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d8bbc:	f7ff ffd0 	bl	d8b60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d8bc0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d8bc2:	4620      	mov	r0, r4
   d8bc4:	bd38      	pop	{r3, r4, r5, pc}

000d8bc6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8bc6:	460b      	mov	r3, r1
   d8bc8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d8bca:	2200      	movs	r2, #0
   d8bcc:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d8bce:	e9c0 2200 	strd	r2, r2, [r0]
   d8bd2:	4604      	mov	r4, r0
        t_ = t;
   d8bd4:	6083      	str	r3, [r0, #8]
    if (t) {
   d8bd6:	b90b      	cbnz	r3, d8bdc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d8bd8:	4620      	mov	r0, r4
   d8bda:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d8bdc:	f7ff ffdc 	bl	d8b98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d8be0:	e7fa      	b.n	d8bd8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d8be2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d8be2:	6883      	ldr	r3, [r0, #8]
   d8be4:	b1eb      	cbz	r3, d8c22 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d8be6:	781a      	ldrb	r2, [r3, #0]
   d8be8:	2a03      	cmp	r2, #3
   d8bea:	d81a      	bhi.n	d8c22 <_ZNK5spark9JSONValue4typeEv+0x40>
   d8bec:	e8df f002 	tbb	[pc, r2]
   d8bf0:	1b021704 	.word	0x1b021704
   d8bf4:	2005      	movs	r0, #5
   d8bf6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d8bf8:	6802      	ldr	r2, [r0, #0]
   d8bfa:	685b      	ldr	r3, [r3, #4]
   d8bfc:	6852      	ldr	r2, [r2, #4]
   d8bfe:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8c00:	282d      	cmp	r0, #45	; 0x2d
   d8c02:	d012      	beq.n	d8c2a <_ZNK5spark9JSONValue4typeEv+0x48>
   d8c04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8c08:	2b09      	cmp	r3, #9
   d8c0a:	d90e      	bls.n	d8c2a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8c0c:	2874      	cmp	r0, #116	; 0x74
   d8c0e:	d00e      	beq.n	d8c2e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8c10:	2866      	cmp	r0, #102	; 0x66
   d8c12:	d00c      	beq.n	d8c2e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d8c14:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8c18:	4258      	negs	r0, r3
   d8c1a:	4158      	adcs	r0, r3
   d8c1c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d8c1e:	2006      	movs	r0, #6
   d8c20:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d8c22:	2000      	movs	r0, #0
   d8c24:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d8c26:	2004      	movs	r0, #4
   d8c28:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d8c2a:	2003      	movs	r0, #3
   d8c2c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d8c2e:	2002      	movs	r0, #2
}
   d8c30:	4770      	bx	lr

000d8c32 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d8c32:	b510      	push	{r4, lr}
   d8c34:	4604      	mov	r4, r0
    switch (type()) {
   d8c36:	f7ff ffd4 	bl	d8be2 <_ZNK5spark9JSONValue4typeEv>
   d8c3a:	2802      	cmp	r0, #2
   d8c3c:	d00e      	beq.n	d8c5c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d8c3e:	1ec3      	subs	r3, r0, #3
   d8c40:	b2db      	uxtb	r3, r3
   d8c42:	2b01      	cmp	r3, #1
   d8c44:	d814      	bhi.n	d8c70 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d8c46:	6822      	ldr	r2, [r4, #0]
   d8c48:	68a3      	ldr	r3, [r4, #8]
   d8c4a:	6850      	ldr	r0, [r2, #4]
   d8c4c:	685b      	ldr	r3, [r3, #4]
}
   d8c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d8c52:	220a      	movs	r2, #10
   d8c54:	2100      	movs	r1, #0
   d8c56:	4418      	add	r0, r3
   d8c58:	f003 bf60 	b.w	dcb1c <strtol>
        const char* const s = d_->json + t_->start;
   d8c5c:	6822      	ldr	r2, [r4, #0]
   d8c5e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8c60:	6852      	ldr	r2, [r2, #4]
   d8c62:	685b      	ldr	r3, [r3, #4]
   d8c64:	5cd0      	ldrb	r0, [r2, r3]
   d8c66:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d8c6a:	4258      	negs	r0, r3
   d8c6c:	4158      	adcs	r0, r3
}
   d8c6e:	bd10      	pop	{r4, pc}
    switch (type()) {
   d8c70:	2000      	movs	r0, #0
   d8c72:	e7fc      	b.n	d8c6e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d8c74 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8c74:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d8c76:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d8c78:	e9c0 3300 	strd	r3, r3, [r0]
   d8c7c:	4604      	mov	r4, r0
        n_(0) {
   d8c7e:	480e      	ldr	r0, [pc, #56]	; (d8cb8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d8c80:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8c84:	b1a9      	cbz	r1, d8cb2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d8c86:	780b      	ldrb	r3, [r1, #0]
   d8c88:	2b03      	cmp	r3, #3
   d8c8a:	d006      	beq.n	d8c9a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8c8c:	b98b      	cbnz	r3, d8cb2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d8c8e:	6813      	ldr	r3, [r2, #0]
   d8c90:	6858      	ldr	r0, [r3, #4]
   d8c92:	684b      	ldr	r3, [r1, #4]
   d8c94:	5cc3      	ldrb	r3, [r0, r3]
   d8c96:	2b6e      	cmp	r3, #110	; 0x6e
   d8c98:	d007      	beq.n	d8caa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d8c9a:	6813      	ldr	r3, [r2, #0]
   d8c9c:	684d      	ldr	r5, [r1, #4]
   d8c9e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d8ca0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d8ca2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d8ca4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d8ca6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d8ca8:	60e3      	str	r3, [r4, #12]
   d8caa:	4611      	mov	r1, r2
   d8cac:	4620      	mov	r0, r4
   d8cae:	f7ff ff73 	bl	d8b98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d8cb2:	4620      	mov	r0, r4
   d8cb4:	bd38      	pop	{r3, r4, r5, pc}
   d8cb6:	bf00      	nop
   d8cb8:	000de761 	.word	0x000de761

000d8cbc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8cbc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d8cbe:	2500      	movs	r5, #0
   d8cc0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d8cc2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d8cc6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d8cca:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8cce:	4604      	mov	r4, r0
   d8cd0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d8cd2:	b14b      	cbz	r3, d8ce8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d8cd4:	781a      	ldrb	r2, [r3, #0]
   d8cd6:	2a01      	cmp	r2, #1
   d8cd8:	d106      	bne.n	d8ce8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d8cda:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d8cde:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d8ce0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d8ce2:	6143      	str	r3, [r0, #20]
   d8ce4:	f7ff ff58 	bl	d8b98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d8ce8:	4620      	mov	r0, r4
   d8cea:	bd38      	pop	{r3, r4, r5, pc}

000d8cec <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d8cec:	b510      	push	{r4, lr}
    if (!n_) {
   d8cee:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d8cf0:	4604      	mov	r4, r0
    if (!n_) {
   d8cf2:	b163      	cbz	r3, d8d0e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d8cf4:	6880      	ldr	r0, [r0, #8]
   d8cf6:	60e0      	str	r0, [r4, #12]
    --n_;
   d8cf8:	3b01      	subs	r3, #1
    ++t_;
   d8cfa:	3010      	adds	r0, #16
   d8cfc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d8cfe:	6120      	str	r0, [r4, #16]
    --n_;
   d8d00:	6163      	str	r3, [r4, #20]
    if (n_) {
   d8d02:	b113      	cbz	r3, d8d0a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d8d04:	f7ff fedd 	bl	d8ac2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8d08:	60a0      	str	r0, [r4, #8]
    return true;
   d8d0a:	2001      	movs	r0, #1
   d8d0c:	e000      	b.n	d8d10 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d8d0e:	4618      	mov	r0, r3
}
   d8d10:	bd10      	pop	{r4, pc}

000d8d12 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d8d12:	b510      	push	{r4, lr}
    write('}');
   d8d14:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d8d16:	4604      	mov	r4, r0
    write('}');
   d8d18:	f7ff ff32 	bl	d8b80 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d8d1c:	2301      	movs	r3, #1
   d8d1e:	7123      	strb	r3, [r4, #4]
}
   d8d20:	4620      	mov	r0, r4
   d8d22:	bd10      	pop	{r4, pc}

000d8d24 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d8d24:	b508      	push	{r3, lr}
    switch (state_) {
   d8d26:	7903      	ldrb	r3, [r0, #4]
   d8d28:	2b01      	cmp	r3, #1
   d8d2a:	d002      	beq.n	d8d32 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d8d2c:	2b02      	cmp	r3, #2
   d8d2e:	d004      	beq.n	d8d3a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d8d30:	bd08      	pop	{r3, pc}
        write(',');
   d8d32:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d8d34:	f7ff ff24 	bl	d8b80 <_ZN5spark10JSONWriter5writeEc>
}
   d8d38:	e7fa      	b.n	d8d30 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d8d3a:	213a      	movs	r1, #58	; 0x3a
   d8d3c:	e7fa      	b.n	d8d34 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d8d3e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d8d3e:	b510      	push	{r4, lr}
   d8d40:	4604      	mov	r4, r0
    writeSeparator();
   d8d42:	f7ff ffef 	bl	d8d24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8d46:	4620      	mov	r0, r4
   d8d48:	217b      	movs	r1, #123	; 0x7b
   d8d4a:	f7ff ff19 	bl	d8b80 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d8d4e:	2300      	movs	r3, #0
   d8d50:	7123      	strb	r3, [r4, #4]
}
   d8d52:	4620      	mov	r0, r4
   d8d54:	bd10      	pop	{r4, pc}
	...

000d8d58 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8d58:	b513      	push	{r0, r1, r4, lr}
   d8d5a:	4604      	mov	r4, r0
   d8d5c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d8d5e:	f7ff ffe1 	bl	d8d24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d8d62:	6823      	ldr	r3, [r4, #0]
   d8d64:	9a01      	ldr	r2, [sp, #4]
   d8d66:	68db      	ldr	r3, [r3, #12]
   d8d68:	4903      	ldr	r1, [pc, #12]	; (d8d78 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8d6a:	4620      	mov	r0, r4
   d8d6c:	4798      	blx	r3
    state_ = NEXT;
   d8d6e:	2301      	movs	r3, #1
}
   d8d70:	4620      	mov	r0, r4
    state_ = NEXT;
   d8d72:	7123      	strb	r3, [r4, #4]
}
   d8d74:	b002      	add	sp, #8
   d8d76:	bd10      	pop	{r4, pc}
   d8d78:	000de1a0 	.word	0x000de1a0

000d8d7c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8d7c:	b513      	push	{r0, r1, r4, lr}
   d8d7e:	4604      	mov	r4, r0
   d8d80:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d8d82:	f7ff ffcf 	bl	d8d24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8d86:	6823      	ldr	r3, [r4, #0]
   d8d88:	9a01      	ldr	r2, [sp, #4]
   d8d8a:	68db      	ldr	r3, [r3, #12]
   d8d8c:	4903      	ldr	r1, [pc, #12]	; (d8d9c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8d8e:	4620      	mov	r0, r4
   d8d90:	4798      	blx	r3
    state_ = NEXT;
   d8d92:	2301      	movs	r3, #1
}
   d8d94:	4620      	mov	r0, r4
    state_ = NEXT;
   d8d96:	7123      	strb	r3, [r4, #4]
}
   d8d98:	b002      	add	sp, #8
   d8d9a:	bd10      	pop	{r4, pc}
   d8d9c:	000de38f 	.word	0x000de38f

000d8da0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8da4:	460d      	mov	r5, r1
   d8da6:	4617      	mov	r7, r2
    write('"');
   d8da8:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d8daa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d8e4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8dae:	4604      	mov	r4, r0
    const char* const end = str + size;
   d8db0:	442f      	add	r7, r5
    write('"');
   d8db2:	f7ff fee5 	bl	d8b80 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d8db6:	4629      	mov	r1, r5
    while (s != end) {
   d8db8:	42bd      	cmp	r5, r7
   d8dba:	462a      	mov	r2, r5
   d8dbc:	d038      	beq.n	d8e30 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d8dbe:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d8dc2:	2e22      	cmp	r6, #34	; 0x22
   d8dc4:	d003      	beq.n	d8dce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8dc6:	2e5c      	cmp	r6, #92	; 0x5c
   d8dc8:	d001      	beq.n	d8dce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8dca:	2e1f      	cmp	r6, #31
   d8dcc:	d8f4      	bhi.n	d8db8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d8dce:	6823      	ldr	r3, [r4, #0]
   d8dd0:	1a52      	subs	r2, r2, r1
   d8dd2:	689b      	ldr	r3, [r3, #8]
   d8dd4:	4620      	mov	r0, r4
   d8dd6:	4798      	blx	r3
            write('\\');
   d8dd8:	215c      	movs	r1, #92	; 0x5c
   d8dda:	4620      	mov	r0, r4
   d8ddc:	f7ff fed0 	bl	d8b80 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8de0:	2e0d      	cmp	r6, #13
   d8de2:	d80a      	bhi.n	d8dfa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d8de4:	2e07      	cmp	r6, #7
   d8de6:	d91c      	bls.n	d8e22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8de8:	f1a6 0308 	sub.w	r3, r6, #8
   d8dec:	2b05      	cmp	r3, #5
   d8dee:	d818      	bhi.n	d8e22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8df0:	e8df f003 	tbb	[pc, r3]
   d8df4:	17110f0d 	.word	0x17110f0d
   d8df8:	1513      	.short	0x1513
   d8dfa:	2e22      	cmp	r6, #34	; 0x22
   d8dfc:	d001      	beq.n	d8e02 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8dfe:	2e5c      	cmp	r6, #92	; 0x5c
   d8e00:	d10f      	bne.n	d8e22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d8e02:	4631      	mov	r1, r6
                write('b');
   d8e04:	4620      	mov	r0, r4
   d8e06:	f7ff febb 	bl	d8b80 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d8e0a:	4629      	mov	r1, r5
    while (s != end) {
   d8e0c:	e7d4      	b.n	d8db8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d8e0e:	2162      	movs	r1, #98	; 0x62
   d8e10:	e7f8      	b.n	d8e04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d8e12:	2174      	movs	r1, #116	; 0x74
   d8e14:	e7f6      	b.n	d8e04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d8e16:	216e      	movs	r1, #110	; 0x6e
   d8e18:	e7f4      	b.n	d8e04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d8e1a:	2166      	movs	r1, #102	; 0x66
   d8e1c:	e7f2      	b.n	d8e04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d8e1e:	2172      	movs	r1, #114	; 0x72
   d8e20:	e7f0      	b.n	d8e04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d8e22:	6823      	ldr	r3, [r4, #0]
   d8e24:	4632      	mov	r2, r6
   d8e26:	68db      	ldr	r3, [r3, #12]
   d8e28:	4641      	mov	r1, r8
   d8e2a:	4620      	mov	r0, r4
   d8e2c:	4798      	blx	r3
                break;
   d8e2e:	e7ec      	b.n	d8e0a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d8e30:	428d      	cmp	r5, r1
   d8e32:	d004      	beq.n	d8e3e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d8e34:	6823      	ldr	r3, [r4, #0]
   d8e36:	1a6a      	subs	r2, r5, r1
   d8e38:	689b      	ldr	r3, [r3, #8]
   d8e3a:	4620      	mov	r0, r4
   d8e3c:	4798      	blx	r3
    }
    write('"');
   d8e3e:	2122      	movs	r1, #34	; 0x22
   d8e40:	4620      	mov	r0, r4
   d8e42:	f7ff fe9d 	bl	d8b80 <_ZN5spark10JSONWriter5writeEc>
}
   d8e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8e4a:	bf00      	nop
   d8e4c:	000de704 	.word	0x000de704

000d8e50 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d8e50:	b513      	push	{r0, r1, r4, lr}
   d8e52:	4604      	mov	r4, r0
   d8e54:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8e58:	f7ff ff64 	bl	d8d24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8e5c:	4620      	mov	r0, r4
   d8e5e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8e62:	f7ff ff9d 	bl	d8da0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d8e66:	2302      	movs	r3, #2
}
   d8e68:	4620      	mov	r0, r4
    state_ = VALUE;
   d8e6a:	7123      	strb	r3, [r4, #4]
}
   d8e6c:	b002      	add	sp, #8
   d8e6e:	bd10      	pop	{r4, pc}

000d8e70 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8e70:	b513      	push	{r0, r1, r4, lr}
   d8e72:	4604      	mov	r4, r0
   d8e74:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8e78:	f7ff ff54 	bl	d8d24 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8e7c:	4620      	mov	r0, r4
   d8e7e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8e82:	f7ff ff8d 	bl	d8da0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d8e86:	2301      	movs	r3, #1
}
   d8e88:	4620      	mov	r0, r4
    state_ = NEXT;
   d8e8a:	7123      	strb	r3, [r4, #4]
}
   d8e8c:	b002      	add	sp, #8
   d8e8e:	bd10      	pop	{r4, pc}

000d8e90 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d8e90:	6880      	ldr	r0, [r0, #8]
   d8e92:	6803      	ldr	r3, [r0, #0]
   d8e94:	68db      	ldr	r3, [r3, #12]
   d8e96:	4718      	bx	r3

000d8e98 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d8e98:	4770      	bx	lr

000d8e9a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d8e9a:	4608      	mov	r0, r1
   d8e9c:	b111      	cbz	r1, d8ea4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8e9e:	680b      	ldr	r3, [r1, #0]
   d8ea0:	685b      	ldr	r3, [r3, #4]
   d8ea2:	4718      	bx	r3
}
   d8ea4:	4770      	bx	lr

000d8ea6 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8ea6:	4770      	bx	lr

000d8ea8 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d8ea8:	4770      	bx	lr

000d8eaa <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d8eaa:	4770      	bx	lr

000d8eac <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d8eac:	b538      	push	{r3, r4, r5, lr}
   d8eae:	4604      	mov	r4, r0
   d8eb0:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8eb2:	6800      	ldr	r0, [r0, #0]
   d8eb4:	212e      	movs	r1, #46	; 0x2e
   d8eb6:	f002 feba 	bl	dbc2e <strchrnul>
    size = s - category;
   d8eba:	6823      	ldr	r3, [r4, #0]
   d8ebc:	1ac3      	subs	r3, r0, r3
   d8ebe:	602b      	str	r3, [r5, #0]
    if (size) {
   d8ec0:	b123      	cbz	r3, d8ecc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8ec2:	7803      	ldrb	r3, [r0, #0]
   d8ec4:	b103      	cbz	r3, d8ec8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d8ec6:	3001      	adds	r0, #1
   d8ec8:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8eca:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d8ecc:	4618      	mov	r0, r3
   d8ece:	bd38      	pop	{r3, r4, r5, pc}

000d8ed0 <_ZN5spark16JSONStreamWriterD0Ev>:
   d8ed0:	b510      	push	{r4, lr}
   d8ed2:	210c      	movs	r1, #12
   d8ed4:	4604      	mov	r4, r0
   d8ed6:	f002 f8a0 	bl	db01a <_ZdlPvj>
   d8eda:	4620      	mov	r0, r4
   d8edc:	bd10      	pop	{r4, pc}

000d8ede <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d8ede:	b510      	push	{r4, lr}
   d8ee0:	2104      	movs	r1, #4
   d8ee2:	4604      	mov	r4, r0
   d8ee4:	f002 f899 	bl	db01a <_ZdlPvj>
   d8ee8:	4620      	mov	r0, r4
   d8eea:	bd10      	pop	{r4, pc}

000d8eec <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8eec:	b510      	push	{r4, lr}
   d8eee:	2104      	movs	r1, #4
   d8ef0:	4604      	mov	r4, r0
   d8ef2:	f002 f892 	bl	db01a <_ZdlPvj>
   d8ef6:	4620      	mov	r0, r4
   d8ef8:	bd10      	pop	{r4, pc}

000d8efa <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d8efa:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d8efc:	f002 fea1 	bl	dbc42 <strcmp>
}
   d8f00:	fab0 f080 	clz	r0, r0
   d8f04:	0940      	lsrs	r0, r0, #5
   d8f06:	bd08      	pop	{r3, pc}

000d8f08 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d8f08:	b510      	push	{r4, lr}
   d8f0a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d8f0c:	f001 fe9a 	bl	dac44 <_Z16_fetch_usbserialv>
   d8f10:	4284      	cmp	r4, r0
   d8f12:	d010      	beq.n	d8f36 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d8f14:	f001 fe0a 	bl	dab2c <_Z22__fetch_global_Serial1v>
   d8f18:	4284      	cmp	r4, r0
   d8f1a:	d105      	bne.n	d8f28 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d8f1c:	f001 fe06 	bl	dab2c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d8f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d8f24:	f001 bdff 	b.w	dab26 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d8f28:	b12c      	cbz	r4, d8f36 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d8f2a:	6823      	ldr	r3, [r4, #0]
   d8f2c:	4620      	mov	r0, r4
   d8f2e:	685b      	ldr	r3, [r3, #4]
}
   d8f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8f34:	4718      	bx	r3
   d8f36:	bd10      	pop	{r4, pc}

000d8f38 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d8f38:	b513      	push	{r0, r1, r4, lr}
   d8f3a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d8f3c:	4608      	mov	r0, r1
   d8f3e:	9101      	str	r1, [sp, #4]
   d8f40:	f002 feaf 	bl	dbca2 <strlen>
   d8f44:	9901      	ldr	r1, [sp, #4]
   d8f46:	4602      	mov	r2, r0
   d8f48:	4620      	mov	r0, r4
}
   d8f4a:	b002      	add	sp, #8
   d8f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d8f50:	f7ff bf8e 	b.w	d8e70 <_ZN5spark10JSONWriter5valueEPKcj>

000d8f54 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d8f54:	b513      	push	{r0, r1, r4, lr}
   d8f56:	4604      	mov	r4, r0
    write(str, strlen(str));
   d8f58:	4608      	mov	r0, r1
   d8f5a:	9101      	str	r1, [sp, #4]
   d8f5c:	f002 fea1 	bl	dbca2 <strlen>
   d8f60:	6823      	ldr	r3, [r4, #0]
   d8f62:	9901      	ldr	r1, [sp, #4]
   d8f64:	68db      	ldr	r3, [r3, #12]
   d8f66:	4602      	mov	r2, r0
   d8f68:	4620      	mov	r0, r4
}
   d8f6a:	b002      	add	sp, #8
   d8f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d8f70:	4718      	bx	r3

000d8f72 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d8f72:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8f74:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d8f76:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8f7a:	68db      	ldr	r3, [r3, #12]
   d8f7c:	2201      	movs	r2, #1
   d8f7e:	f10d 0107 	add.w	r1, sp, #7
   d8f82:	4798      	blx	r3
}
   d8f84:	b003      	add	sp, #12
   d8f86:	f85d fb04 	ldr.w	pc, [sp], #4

000d8f8a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8f8a:	b40e      	push	{r1, r2, r3}
   d8f8c:	b503      	push	{r0, r1, lr}
   d8f8e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d8f90:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8f92:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d8f96:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d8f98:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d8f9a:	f001 f8f1 	bl	da180 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d8f9e:	b002      	add	sp, #8
   d8fa0:	f85d eb04 	ldr.w	lr, [sp], #4
   d8fa4:	b003      	add	sp, #12
   d8fa6:	4770      	bx	lr

000d8fa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d8fac:	e9d0 9500 	ldrd	r9, r5, [r0]
   d8fb0:	f04f 0814 	mov.w	r8, #20
   d8fb4:	fb08 f505 	mul.w	r5, r8, r5
   d8fb8:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8fba:	10ab      	asrs	r3, r5, #2
   d8fbc:	4d18      	ldr	r5, [pc, #96]	; (d9020 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8fbe:	4617      	mov	r7, r2
   d8fc0:	435d      	muls	r5, r3
   d8fc2:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8fc4:	2d00      	cmp	r5, #0
   d8fc6:	dd23      	ble.n	d9010 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d8fc8:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d8fca:	fb08 f006 	mul.w	r0, r8, r6
   d8fce:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d8fd2:	463a      	mov	r2, r7
   d8fd4:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d8fd8:	5820      	ldr	r0, [r4, r0]
   d8fda:	9101      	str	r1, [sp, #4]
   d8fdc:	455f      	cmp	r7, fp
   d8fde:	bf28      	it	cs
   d8fe0:	465a      	movcs	r2, fp
   d8fe2:	f002 fe66 	bl	dbcb2 <strncmp>
                if (cmp == 0) {
   d8fe6:	9901      	ldr	r1, [sp, #4]
   d8fe8:	2301      	movs	r3, #1
   d8fea:	b978      	cbnz	r0, d900c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d8fec:	455f      	cmp	r7, fp
   d8fee:	d103      	bne.n	d8ff8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8ff0:	9a00      	ldr	r2, [sp, #0]
   d8ff2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8ff4:	4635      	mov	r5, r6
   d8ff6:	e7e5      	b.n	d8fc4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d8ff8:	bf8c      	ite	hi
   d8ffa:	2001      	movhi	r0, #1
   d8ffc:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d8ffe:	2800      	cmp	r0, #0
   d9000:	d0f8      	beq.n	d8ff4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d9002:	1bae      	subs	r6, r5, r6
	      ++__first;
   d9004:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d9008:	3e01      	subs	r6, #1
   d900a:	e7f3      	b.n	d8ff4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d900c:	0fc0      	lsrs	r0, r0, #31
   d900e:	e7f6      	b.n	d8ffe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d9010:	eba4 0409 	sub.w	r4, r4, r9
}
   d9014:	4802      	ldr	r0, [pc, #8]	; (d9020 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d9016:	10a4      	asrs	r4, r4, #2
   d9018:	4360      	muls	r0, r4
   d901a:	b003      	add	sp, #12
   d901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9020:	cccccccd 	.word	0xcccccccd

000d9024 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d9024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d9026:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d9028:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d902a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d902c:	b30b      	cbz	r3, d9072 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d902e:	b301      	cbz	r1, d9072 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d9030:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d9032:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d9036:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d9038:	a903      	add	r1, sp, #12
   d903a:	a801      	add	r0, sp, #4
   d903c:	f7ff ff36 	bl	d8eac <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9040:	4601      	mov	r1, r0
   d9042:	b1b0      	cbz	r0, d9072 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9044:	f10d 030b 	add.w	r3, sp, #11
   d9048:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d904a:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d904e:	4620      	mov	r0, r4
   d9050:	f7ff ffaa 	bl	d8fa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d9054:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d9058:	b15b      	cbz	r3, d9072 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d905a:	6824      	ldr	r4, [r4, #0]
   d905c:	2314      	movs	r3, #20
   d905e:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d9062:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d9066:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d906a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d906c:	bfa8      	it	ge
   d906e:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d9070:	e7e2      	b.n	d9038 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d9072:	4630      	mov	r0, r6
   d9074:	b004      	add	sp, #16
   d9076:	bd70      	pop	{r4, r5, r6, pc}

000d9078 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d9078:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d907a:	4c0a      	ldr	r4, [pc, #40]	; (d90a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d907c:	7823      	ldrb	r3, [r4, #0]
   d907e:	f3bf 8f5b 	dmb	ish
   d9082:	07db      	lsls	r3, r3, #31
   d9084:	d40b      	bmi.n	d909e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d9086:	4620      	mov	r0, r4
   d9088:	f7fb f816 	bl	d40b8 <__cxa_guard_acquire>
   d908c:	b138      	cbz	r0, d909e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d908e:	4620      	mov	r0, r4
   d9090:	f7fb f817 	bl	d40c2 <__cxa_guard_release>
   d9094:	4a04      	ldr	r2, [pc, #16]	; (d90a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d9096:	4905      	ldr	r1, [pc, #20]	; (d90ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d9098:	4805      	ldr	r0, [pc, #20]	; (d90b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d909a:	f001 ffb9 	bl	db010 <__aeabi_atexit>
}
   d909e:	4804      	ldr	r0, [pc, #16]	; (d90b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d90a0:	bd10      	pop	{r4, pc}
   d90a2:	bf00      	nop
   d90a4:	2003e5d8 	.word	0x2003e5d8
   d90a8:	2003e3d0 	.word	0x2003e3d0
   d90ac:	000d8ea9 	.word	0x000d8ea9
   d90b0:	2003e1e0 	.word	0x2003e1e0

000d90b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d90b4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d90b6:	4c0a      	ldr	r4, [pc, #40]	; (d90e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d90b8:	7823      	ldrb	r3, [r4, #0]
   d90ba:	f3bf 8f5b 	dmb	ish
   d90be:	07db      	lsls	r3, r3, #31
   d90c0:	d40b      	bmi.n	d90da <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d90c2:	4620      	mov	r0, r4
   d90c4:	f7fa fff8 	bl	d40b8 <__cxa_guard_acquire>
   d90c8:	b138      	cbz	r0, d90da <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d90ca:	4620      	mov	r0, r4
   d90cc:	f7fa fff9 	bl	d40c2 <__cxa_guard_release>
   d90d0:	4a04      	ldr	r2, [pc, #16]	; (d90e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d90d2:	4905      	ldr	r1, [pc, #20]	; (d90e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d90d4:	4805      	ldr	r0, [pc, #20]	; (d90ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d90d6:	f001 ff9b 	bl	db010 <__aeabi_atexit>
    return &factory;
}
   d90da:	4804      	ldr	r0, [pc, #16]	; (d90ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d90dc:	bd10      	pop	{r4, pc}
   d90de:	bf00      	nop
   d90e0:	2003e5dc 	.word	0x2003e5dc
   d90e4:	2003e3d0 	.word	0x2003e3d0
   d90e8:	000d8ea7 	.word	0x000d8ea7
   d90ec:	2003e1e4 	.word	0x2003e1e4

000d90f0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d90f0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d90f2:	2500      	movs	r5, #0
   d90f4:	4604      	mov	r4, r0
   d90f6:	e9c0 5500 	strd	r5, r5, [r0]
   d90fa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d90fe:	6085      	str	r5, [r0, #8]
   d9100:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d9102:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d9106:	f7fe fa95 	bl	d7634 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d910a:	f7ff ffb5 	bl	d9078 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d910e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9110:	f7ff ffd0 	bl	d90b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d9114:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9116:	6220      	str	r0, [r4, #32]
}
   d9118:	4620      	mov	r0, r4
   d911a:	bd38      	pop	{r3, r4, r5, pc}

000d911c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d911c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d911e:	4c0b      	ldr	r4, [pc, #44]	; (d914c <_ZN5spark10LogManager8instanceEv+0x30>)
   d9120:	7823      	ldrb	r3, [r4, #0]
   d9122:	f3bf 8f5b 	dmb	ish
   d9126:	07db      	lsls	r3, r3, #31
   d9128:	d40e      	bmi.n	d9148 <_ZN5spark10LogManager8instanceEv+0x2c>
   d912a:	4620      	mov	r0, r4
   d912c:	f7fa ffc4 	bl	d40b8 <__cxa_guard_acquire>
   d9130:	b150      	cbz	r0, d9148 <_ZN5spark10LogManager8instanceEv+0x2c>
   d9132:	4807      	ldr	r0, [pc, #28]	; (d9150 <_ZN5spark10LogManager8instanceEv+0x34>)
   d9134:	f7ff ffdc 	bl	d90f0 <_ZN5spark10LogManagerC1Ev>
   d9138:	4620      	mov	r0, r4
   d913a:	f7fa ffc2 	bl	d40c2 <__cxa_guard_release>
   d913e:	4a05      	ldr	r2, [pc, #20]	; (d9154 <_ZN5spark10LogManager8instanceEv+0x38>)
   d9140:	4905      	ldr	r1, [pc, #20]	; (d9158 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d9142:	4803      	ldr	r0, [pc, #12]	; (d9150 <_ZN5spark10LogManager8instanceEv+0x34>)
   d9144:	f001 ff64 	bl	db010 <__aeabi_atexit>
    return &mgr;
}
   d9148:	4801      	ldr	r0, [pc, #4]	; (d9150 <_ZN5spark10LogManager8instanceEv+0x34>)
   d914a:	bd10      	pop	{r4, pc}
   d914c:	2003e5d4 	.word	0x2003e5d4
   d9150:	2003e5e4 	.word	0x2003e5e4
   d9154:	2003e3d0 	.word	0x2003e3d0
   d9158:	000d95b1 	.word	0x000d95b1

000d915c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d915c:	4a02      	ldr	r2, [pc, #8]	; (d9168 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d915e:	4903      	ldr	r1, [pc, #12]	; (d916c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d9160:	4803      	ldr	r0, [pc, #12]	; (d9170 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d9162:	2300      	movs	r3, #0
   d9164:	f7fe bc56 	b.w	d7a14 <log_set_callbacks>
   d9168:	000d948d 	.word	0x000d948d
   d916c:	000d9419 	.word	0x000d9419
   d9170:	000d9399 	.word	0x000d9399

000d9174 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d9174:	2300      	movs	r3, #0
   d9176:	461a      	mov	r2, r3
   d9178:	4619      	mov	r1, r3
   d917a:	4618      	mov	r0, r3
   d917c:	f7fe bc4a 	b.w	d7a14 <log_set_callbacks>

000d9180 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9180:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d9182:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9184:	f851 3b04 	ldr.w	r3, [r1], #4
   d9188:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d918a:	4604      	mov	r4, r0
   d918c:	a801      	add	r0, sp, #4
   d918e:	f7fe fe38 	bl	d7e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d9192:	466a      	mov	r2, sp
   d9194:	4629      	mov	r1, r5
   d9196:	4620      	mov	r0, r4
   d9198:	f7ff fd15 	bl	d8bc6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d919c:	a801      	add	r0, sp, #4
   d919e:	f7fb ff19 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d91a2:	4620      	mov	r0, r4
   d91a4:	b003      	add	sp, #12
   d91a6:	bd30      	pop	{r4, r5, pc}

000d91a8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d91a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d91aa:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d91ac:	f851 3b04 	ldr.w	r3, [r1], #4
   d91b0:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d91b2:	4604      	mov	r4, r0
   d91b4:	a801      	add	r0, sp, #4
   d91b6:	f7fe fe24 	bl	d7e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d91ba:	466a      	mov	r2, sp
   d91bc:	4629      	mov	r1, r5
   d91be:	4620      	mov	r0, r4
   d91c0:	f7ff fd7c 	bl	d8cbc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d91c4:	a801      	add	r0, sp, #4
   d91c6:	f7fb ff05 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d91ca:	4620      	mov	r0, r4
   d91cc:	b003      	add	sp, #12
   d91ce:	bd30      	pop	{r4, r5, pc}

000d91d0 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d91d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d91d2:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d91d4:	f851 3b04 	ldr.w	r3, [r1], #4
   d91d8:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d91da:	4604      	mov	r4, r0
   d91dc:	a801      	add	r0, sp, #4
   d91de:	f7fe fe10 	bl	d7e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d91e2:	466a      	mov	r2, sp
   d91e4:	4629      	mov	r1, r5
   d91e6:	4620      	mov	r0, r4
   d91e8:	f7ff fd44 	bl	d8c74 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d91ec:	a801      	add	r0, sp, #4
   d91ee:	f7fb fef1 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d91f2:	4620      	mov	r0, r4
   d91f4:	b003      	add	sp, #12
   d91f6:	bd30      	pop	{r4, r5, pc}

000d91f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d91f8:	b570      	push	{r4, r5, r6, lr}
   d91fa:	b08a      	sub	sp, #40	; 0x28
   d91fc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d91fe:	4601      	mov	r1, r0
   d9200:	a804      	add	r0, sp, #16
   d9202:	f7ff ffd1 	bl	d91a8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d9206:	4e14      	ldr	r6, [pc, #80]	; (d9258 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d9208:	a804      	add	r0, sp, #16
   d920a:	f7ff fd6f 	bl	d8cec <_ZN5spark18JSONObjectIterator4nextEv>
   d920e:	b1e8      	cbz	r0, d924c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d9210:	a904      	add	r1, sp, #16
   d9212:	4668      	mov	r0, sp
   d9214:	f7ff ffdc 	bl	d91d0 <_ZNK5spark18JSONObjectIterator4nameEv>
   d9218:	9802      	ldr	r0, [sp, #8]
   d921a:	4631      	mov	r1, r6
   d921c:	f7ff fe6d 	bl	d8efa <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d9220:	4604      	mov	r4, r0
   d9222:	b110      	cbz	r0, d922a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d9224:	1e2c      	subs	r4, r5, #0
   d9226:	bf18      	it	ne
   d9228:	2401      	movne	r4, #1
   d922a:	a801      	add	r0, sp, #4
   d922c:	f7fb fed2 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9230:	2c00      	cmp	r4, #0
   d9232:	d0e9      	beq.n	d9208 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d9234:	a904      	add	r1, sp, #16
   d9236:	4668      	mov	r0, sp
   d9238:	f7ff ffa2 	bl	d9180 <_ZNK5spark18JSONObjectIterator5valueEv>
   d923c:	4668      	mov	r0, sp
   d923e:	f7ff fcf8 	bl	d8c32 <_ZNK5spark9JSONValue5toIntEv>
   d9242:	6028      	str	r0, [r5, #0]
   d9244:	a801      	add	r0, sp, #4
   d9246:	f7fb fec5 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d924a:	e7dd      	b.n	d9208 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d924c:	a805      	add	r0, sp, #20
   d924e:	f7fb fec1 	bl	d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9252:	b00a      	add	sp, #40	; 0x28
   d9254:	bd70      	pop	{r4, r5, r6, pc}
   d9256:	bf00      	nop
   d9258:	000de70a 	.word	0x000de70a

000d925c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d925c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d925e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d9260:	4620      	mov	r0, r4
   d9262:	4912      	ldr	r1, [pc, #72]	; (d92ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9264:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d9266:	f002 fcec 	bl	dbc42 <strcmp>
   d926a:	b948      	cbnz	r0, d9280 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d926c:	f001 fcea 	bl	dac44 <_Z16_fetch_usbserialv>
   d9270:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d9274:	f001 fcd6 	bl	dac24 <_ZN9USBSerial5beginEl>
        return &Serial;
   d9278:	f001 fce4 	bl	dac44 <_Z16_fetch_usbserialv>
}
   d927c:	b003      	add	sp, #12
   d927e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d9280:	490b      	ldr	r1, [pc, #44]	; (d92b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d9282:	4620      	mov	r0, r4
   d9284:	f002 fcdd 	bl	dbc42 <strcmp>
   d9288:	b970      	cbnz	r0, d92a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d928a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d928e:	a901      	add	r1, sp, #4
   d9290:	4628      	mov	r0, r5
        int baud = 9600;
   d9292:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d9294:	f7ff ffb0 	bl	d91f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d9298:	f001 fc48 	bl	dab2c <_Z22__fetch_global_Serial1v>
   d929c:	9901      	ldr	r1, [sp, #4]
   d929e:	f001 fc3f 	bl	dab20 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d92a2:	f001 fc43 	bl	dab2c <_Z22__fetch_global_Serial1v>
   d92a6:	e7e9      	b.n	d927c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d92a8:	2000      	movs	r0, #0
   d92aa:	e7e7      	b.n	d927c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d92ac:	000de70f 	.word	0x000de70f
   d92b0:	000de716 	.word	0x000de716

000d92b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d92b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d92b6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d92ba:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d92bc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d92be:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d92c2:	42ae      	cmp	r6, r5
   d92c4:	d005      	beq.n	d92d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d92c6:	f105 0008 	add.w	r0, r5, #8
   d92ca:	f7ff fff3 	bl	d92b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d92ce:	3514      	adds	r5, #20
   d92d0:	e7f7      	b.n	d92c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d92d2:	6820      	ldr	r0, [r4, #0]
   d92d4:	f7fe fd0a 	bl	d7cec <free>
}
   d92d8:	4620      	mov	r0, r4
   d92da:	bd70      	pop	{r4, r5, r6, pc}

000d92dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d92dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d92de:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d92e2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d92e4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d92e8:	42ae      	cmp	r6, r5
   d92ea:	d004      	beq.n	d92f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d92ec:	4628      	mov	r0, r5
   d92ee:	f000 ff97 	bl	da220 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d92f2:	3510      	adds	r5, #16
   d92f4:	e7f8      	b.n	d92e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d92f6:	6820      	ldr	r0, [r4, #0]
   d92f8:	f7fe fcf8 	bl	d7cec <free>
}
   d92fc:	4620      	mov	r0, r4
   d92fe:	bd70      	pop	{r4, r5, r6, pc}

000d9300 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d9300:	b510      	push	{r4, lr}
   d9302:	4604      	mov	r4, r0
   d9304:	300c      	adds	r0, #12
   d9306:	f7ff ffd5 	bl	d92b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d930a:	4620      	mov	r0, r4
   d930c:	f7ff ffe6 	bl	d92dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9310:	4620      	mov	r0, r4
   d9312:	bd10      	pop	{r4, pc}

000d9314 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d9314:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d9316:	4b04      	ldr	r3, [pc, #16]	; (d9328 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d9318:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d931a:	f840 3b04 	str.w	r3, [r0], #4
   d931e:	f7ff ffef 	bl	d9300 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d9322:	4620      	mov	r0, r4
   d9324:	bd10      	pop	{r4, pc}
   d9326:	bf00      	nop
   d9328:	000de04c 	.word	0x000de04c

000d932c <_ZN5spark16StreamLogHandlerD0Ev>:
   d932c:	b510      	push	{r4, lr}
   d932e:	4604      	mov	r4, r0
   d9330:	f7ff fff0 	bl	d9314 <_ZN5spark16StreamLogHandlerD1Ev>
   d9334:	4620      	mov	r0, r4
   d9336:	2124      	movs	r1, #36	; 0x24
   d9338:	f001 fe6f 	bl	db01a <_ZdlPvj>
   d933c:	4620      	mov	r0, r4
   d933e:	bd10      	pop	{r4, pc}

000d9340 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d9340:	b510      	push	{r4, lr}
   d9342:	4b03      	ldr	r3, [pc, #12]	; (d9350 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d9344:	6003      	str	r3, [r0, #0]
   d9346:	4604      	mov	r4, r0
   d9348:	f7ff ffe4 	bl	d9314 <_ZN5spark16StreamLogHandlerD1Ev>
   d934c:	4620      	mov	r0, r4
   d934e:	bd10      	pop	{r4, pc}
   d9350:	000de7b0 	.word	0x000de7b0

000d9354 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d9354:	b510      	push	{r4, lr}
   d9356:	4604      	mov	r4, r0
   d9358:	f7ff fff2 	bl	d9340 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d935c:	4620      	mov	r0, r4
   d935e:	2124      	movs	r1, #36	; 0x24
   d9360:	f001 fe5b 	bl	db01a <_ZdlPvj>
   d9364:	4620      	mov	r0, r4
   d9366:	bd10      	pop	{r4, pc}

000d9368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d9368:	2200      	movs	r2, #0
   d936a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d936e:	b510      	push	{r4, lr}
        capacity_(0) {
   d9370:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9372:	680c      	ldr	r4, [r1, #0]
   d9374:	6004      	str	r4, [r0, #0]
   d9376:	684c      	ldr	r4, [r1, #4]
   d9378:	6044      	str	r4, [r0, #4]
   d937a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d937c:	600a      	str	r2, [r1, #0]
   d937e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9380:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9382:	608a      	str	r2, [r1, #8]
}
   d9384:	bd10      	pop	{r4, pc}

000d9386 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d9386:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d9388:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d938a:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d938c:	6818      	ldr	r0, [r3, #0]
   d938e:	f7fe f969 	bl	d7664 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d9392:	4620      	mov	r0, r4
   d9394:	bd10      	pop	{r4, pc}
	...

000d9398 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d939c:	b087      	sub	sp, #28
   d939e:	4680      	mov	r8, r0
   d93a0:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d93a2:	4b1c      	ldr	r3, [pc, #112]	; (d9414 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d93a4:	685b      	ldr	r3, [r3, #4]
   d93a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d93aa:	4689      	mov	r9, r1
   d93ac:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d93ae:	b96b      	cbnz	r3, d93cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d93b0:	f7ff feb4 	bl	d911c <_ZN5spark10LogManager8instanceEv>
   d93b4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d93b6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d93ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d93bc:	9305      	str	r3, [sp, #20]
   d93be:	f7fe f949 	bl	d7654 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d93c2:	7b23      	ldrb	r3, [r4, #12]
   d93c4:	b12b      	cbz	r3, d93d2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d93c6:	a805      	add	r0, sp, #20
   d93c8:	f7ff ffdd 	bl	d9386 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d93cc:	b007      	add	sp, #28
   d93ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d93d2:	2301      	movs	r3, #1
   d93d4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d93d6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d93da:	fa5f f989 	uxtb.w	r9, r9
   d93de:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d93e2:	45aa      	cmp	sl, r5
   d93e4:	d012      	beq.n	d940c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d93e6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d93ea:	4631      	mov	r1, r6
   d93ec:	1d38      	adds	r0, r7, #4
   d93ee:	f7ff fe19 	bl	d9024 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d93f2:	4581      	cmp	r9, r0
   d93f4:	d3f5      	bcc.n	d93e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d93f6:	683b      	ldr	r3, [r7, #0]
   d93f8:	9a03      	ldr	r2, [sp, #12]
   d93fa:	9200      	str	r2, [sp, #0]
   d93fc:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d9400:	464a      	mov	r2, r9
   d9402:	4633      	mov	r3, r6
   d9404:	4641      	mov	r1, r8
   d9406:	4638      	mov	r0, r7
   d9408:	47d8      	blx	fp
   d940a:	e7ea      	b.n	d93e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d940c:	2300      	movs	r3, #0
   d940e:	7323      	strb	r3, [r4, #12]
   d9410:	e7d9      	b.n	d93c6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d9412:	bf00      	nop
   d9414:	e000ed00 	.word	0xe000ed00

000d9418 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d941c:	469b      	mov	fp, r3
   d941e:	4b1a      	ldr	r3, [pc, #104]	; (d9488 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d9420:	685b      	ldr	r3, [r3, #4]
   d9422:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9426:	4680      	mov	r8, r0
   d9428:	4689      	mov	r9, r1
   d942a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d942c:	b96b      	cbnz	r3, d944a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d942e:	f7ff fe75 	bl	d911c <_ZN5spark10LogManager8instanceEv>
   d9432:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9434:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d9438:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d943a:	9301      	str	r3, [sp, #4]
   d943c:	f7fe f90a 	bl	d7654 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d9440:	7b23      	ldrb	r3, [r4, #12]
   d9442:	b12b      	cbz	r3, d9450 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d9444:	a801      	add	r0, sp, #4
   d9446:	f7ff ff9e 	bl	d9386 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d944a:	b003      	add	sp, #12
   d944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d9450:	2301      	movs	r3, #1
   d9452:	7323      	strb	r3, [r4, #12]
   d9454:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d9458:	b2f6      	uxtb	r6, r6
   d945a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d945e:	4555      	cmp	r5, sl
   d9460:	d00e      	beq.n	d9480 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d9462:	f855 7b04 	ldr.w	r7, [r5], #4
   d9466:	4659      	mov	r1, fp
   d9468:	1d38      	adds	r0, r7, #4
   d946a:	f7ff fddb 	bl	d9024 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d946e:	4286      	cmp	r6, r0
   d9470:	d3f5      	bcc.n	d945e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d9472:	683b      	ldr	r3, [r7, #0]
   d9474:	464a      	mov	r2, r9
   d9476:	68db      	ldr	r3, [r3, #12]
   d9478:	4641      	mov	r1, r8
   d947a:	4638      	mov	r0, r7
   d947c:	4798      	blx	r3
   d947e:	e7ee      	b.n	d945e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d9480:	2300      	movs	r3, #0
   d9482:	7323      	strb	r3, [r4, #12]
   d9484:	e7de      	b.n	d9444 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d9486:	bf00      	nop
   d9488:	e000ed00 	.word	0xe000ed00

000d948c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d948c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9490:	4b16      	ldr	r3, [pc, #88]	; (d94ec <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d9492:	685b      	ldr	r3, [r3, #4]
   d9494:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9498:	4605      	mov	r5, r0
   d949a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d949c:	bb1b      	cbnz	r3, d94e6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d949e:	f7ff fe3d 	bl	d911c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d94a2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d94a6:	4604      	mov	r4, r0
   d94a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d94aa:	9301      	str	r3, [sp, #4]
   d94ac:	f7fe f8d2 	bl	d7654 <os_mutex_recursive_lock>
   d94b0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d94b4:	2446      	movs	r4, #70	; 0x46
   d94b6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d94ba:	45b0      	cmp	r8, r6
   d94bc:	d109      	bne.n	d94d2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d94be:	a801      	add	r0, sp, #4
   d94c0:	f7ff ff61 	bl	d9386 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d94c4:	42a5      	cmp	r5, r4
   d94c6:	bfb4      	ite	lt
   d94c8:	2000      	movlt	r0, #0
   d94ca:	2001      	movge	r0, #1
}
   d94cc:	b002      	add	sp, #8
   d94ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d94d2:	f856 0b04 	ldr.w	r0, [r6], #4
   d94d6:	4639      	mov	r1, r7
   d94d8:	3004      	adds	r0, #4
   d94da:	f7ff fda3 	bl	d9024 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d94de:	4284      	cmp	r4, r0
   d94e0:	bfa8      	it	ge
   d94e2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d94e4:	e7e9      	b.n	d94ba <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d94e6:	2000      	movs	r0, #0
   d94e8:	e7f0      	b.n	d94cc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d94ea:	bf00      	nop
   d94ec:	e000ed00 	.word	0xe000ed00

000d94f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d94f0:	b570      	push	{r4, r5, r6, lr}
   d94f2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d94f4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d94f8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d94fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d94fe:	4282      	cmp	r2, r0
   d9500:	d007      	beq.n	d9512 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d9502:	4601      	mov	r1, r0
            if (*p == value) {
   d9504:	681d      	ldr	r5, [r3, #0]
   d9506:	f851 6b04 	ldr.w	r6, [r1], #4
   d950a:	42ae      	cmp	r6, r5
   d950c:	d003      	beq.n	d9516 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d950e:	4608      	mov	r0, r1
   d9510:	e7f5      	b.n	d94fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d9512:	2000      	movs	r0, #0
}
   d9514:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9516:	1a52      	subs	r2, r2, r1
   d9518:	f002 fb36 	bl	dbb88 <memmove>
    --size_;
   d951c:	6863      	ldr	r3, [r4, #4]
   d951e:	3b01      	subs	r3, #1
   d9520:	6063      	str	r3, [r4, #4]
    return true;
   d9522:	2001      	movs	r0, #1
   d9524:	e7f6      	b.n	d9514 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d9526 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9526:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9528:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d952c:	4604      	mov	r4, r0
   d952e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9530:	9101      	str	r1, [sp, #4]
   d9532:	9303      	str	r3, [sp, #12]
   d9534:	f7fe f88e 	bl	d7654 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9538:	a901      	add	r1, sp, #4
   d953a:	4620      	mov	r0, r4
   d953c:	f7ff ffd8 	bl	d94f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d9540:	b118      	cbz	r0, d954a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d9542:	6863      	ldr	r3, [r4, #4]
   d9544:	b90b      	cbnz	r3, d954a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d9546:	f7ff fe15 	bl	d9174 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d954a:	a803      	add	r0, sp, #12
   d954c:	f7ff ff1b 	bl	d9386 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9550:	b004      	add	sp, #16
   d9552:	bd10      	pop	{r4, pc}

000d9554 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d9554:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d9556:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d955a:	2318      	movs	r3, #24
   d955c:	4604      	mov	r4, r0
   d955e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9562:	42ae      	cmp	r6, r5
   d9564:	d015      	beq.n	d9592 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9566:	f105 0110 	add.w	r1, r5, #16
   d956a:	4620      	mov	r0, r4
   d956c:	f7ff ffc0 	bl	d94f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9570:	6863      	ldr	r3, [r4, #4]
   d9572:	b90b      	cbnz	r3, d9578 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9574:	f7ff fdfe 	bl	d9174 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d9578:	69e0      	ldr	r0, [r4, #28]
   d957a:	6929      	ldr	r1, [r5, #16]
   d957c:	6803      	ldr	r3, [r0, #0]
   d957e:	68db      	ldr	r3, [r3, #12]
   d9580:	4798      	blx	r3
        if (h.stream) {
   d9582:	6969      	ldr	r1, [r5, #20]
   d9584:	b119      	cbz	r1, d958e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d9586:	6a20      	ldr	r0, [r4, #32]
   d9588:	6803      	ldr	r3, [r0, #0]
   d958a:	68db      	ldr	r3, [r3, #12]
   d958c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d958e:	3518      	adds	r5, #24
   d9590:	e7e7      	b.n	d9562 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d9592:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9596:	2618      	movs	r6, #24
   d9598:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d959c:	42ae      	cmp	r6, r5
   d959e:	d004      	beq.n	d95aa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d95a0:	4628      	mov	r0, r5
   d95a2:	f000 fe3d 	bl	da220 <_ZN6StringD1Ev>
   d95a6:	3518      	adds	r5, #24
   d95a8:	e7f8      	b.n	d959c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d95aa:	2300      	movs	r3, #0
   d95ac:	6163      	str	r3, [r4, #20]
}
   d95ae:	bd70      	pop	{r4, r5, r6, pc}

000d95b0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d95b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d95b2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d95b4:	f7ff fdde 	bl	d9174 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d95b8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d95bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d95be:	9301      	str	r3, [sp, #4]
   d95c0:	f7fe f848 	bl	d7654 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d95c4:	4620      	mov	r0, r4
   d95c6:	f7ff ffc5 	bl	d9554 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d95ca:	a801      	add	r0, sp, #4
   d95cc:	f7ff fedb 	bl	d9386 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d95d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d95d2:	b108      	cbz	r0, d95d8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d95d4:	f7fe f836 	bl	d7644 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d95d8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d95dc:	2618      	movs	r6, #24
   d95de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d95e2:	42ae      	cmp	r6, r5
   d95e4:	d004      	beq.n	d95f0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d95e6:	4628      	mov	r0, r5
   d95e8:	f000 fe1a 	bl	da220 <_ZN6StringD1Ev>
   d95ec:	3518      	adds	r5, #24
   d95ee:	e7f8      	b.n	d95e2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d95f0:	6920      	ldr	r0, [r4, #16]
   d95f2:	f7fe fb7b 	bl	d7cec <free>
   d95f6:	6820      	ldr	r0, [r4, #0]
   d95f8:	f7fe fb78 	bl	d7cec <free>
}
   d95fc:	4620      	mov	r0, r4
   d95fe:	b002      	add	sp, #8
   d9600:	bd70      	pop	{r4, r5, r6, pc}

000d9602 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9602:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9606:	4606      	mov	r6, r0
   d9608:	460c      	mov	r4, r1
   d960a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d960c:	d927      	bls.n	d965e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d960e:	4290      	cmp	r0, r2
   d9610:	d226      	bcs.n	d9660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9612:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9616:	1a6c      	subs	r4, r5, r1
   d9618:	f1a1 0714 	sub.w	r7, r1, #20
   d961c:	4404      	add	r4, r0
        capacity_(0) {
   d961e:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d9620:	42af      	cmp	r7, r5
   d9622:	d03d      	beq.n	d96a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d9624:	b1a4      	cbz	r4, d9650 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9626:	682b      	ldr	r3, [r5, #0]
   d9628:	6023      	str	r3, [r4, #0]
   d962a:	88ab      	ldrh	r3, [r5, #4]
   d962c:	80a3      	strh	r3, [r4, #4]
   d962e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d9632:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d9634:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9638:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d963a:	68ab      	ldr	r3, [r5, #8]
   d963c:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d963e:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9640:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9642:	68ea      	ldr	r2, [r5, #12]
   d9644:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9646:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9648:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d964a:	692a      	ldr	r2, [r5, #16]
   d964c:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d964e:	612b      	str	r3, [r5, #16]
   d9650:	f105 0008 	add.w	r0, r5, #8
   d9654:	f7ff fe2e 	bl	d92b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d9658:	3d14      	subs	r5, #20
   d965a:	3c14      	subs	r4, #20
   d965c:	e7e0      	b.n	d9620 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d965e:	d01f      	beq.n	d96a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d9660:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d9662:	42ac      	cmp	r4, r5
   d9664:	d01c      	beq.n	d96a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d9666:	b1a6      	cbz	r6, d9692 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d9668:	6823      	ldr	r3, [r4, #0]
   d966a:	6033      	str	r3, [r6, #0]
   d966c:	88a3      	ldrh	r3, [r4, #4]
   d966e:	80b3      	strh	r3, [r6, #4]
   d9670:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d9674:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d9676:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d967a:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d967c:	68a3      	ldr	r3, [r4, #8]
   d967e:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9680:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9682:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9684:	68e2      	ldr	r2, [r4, #12]
   d9686:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9688:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d968a:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d968c:	6922      	ldr	r2, [r4, #16]
   d968e:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9690:	6123      	str	r3, [r4, #16]
   d9692:	f104 0008 	add.w	r0, r4, #8
   d9696:	f7ff fe0d 	bl	d92b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d969a:	3414      	adds	r4, #20
   d969c:	3614      	adds	r6, #20
   d969e:	e7e0      	b.n	d9662 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d96a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d96a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d96a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d96a4:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d96a8:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d96aa:	4604      	mov	r4, r0
   d96ac:	460e      	mov	r6, r1
   d96ae:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d96b0:	db0d      	blt.n	d96ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d96b2:	3501      	adds	r5, #1
        if (n > 0) {
   d96b4:	2d00      	cmp	r5, #0
   d96b6:	6800      	ldr	r0, [r0, #0]
   d96b8:	dd04      	ble.n	d96c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d96ba:	00a9      	lsls	r1, r5, #2
   d96bc:	f7fe fb1e 	bl	d7cfc <realloc>
            if (!d) {
   d96c0:	b918      	cbnz	r0, d96ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d96c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d96c4:	f7fe fb12 	bl	d7cec <free>
        T* d = nullptr;
   d96c8:	2000      	movs	r0, #0
        data_ = d;
   d96ca:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d96cc:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d96ce:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d96d0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d96d2:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d96d6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d96d8:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d96dc:	1d08      	adds	r0, r1, #4
   d96de:	f002 fa53 	bl	dbb88 <memmove>
    new(p) T(std::move(value));
   d96e2:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d96e6:	6863      	ldr	r3, [r4, #4]
   d96e8:	3301      	adds	r3, #1
   d96ea:	6063      	str	r3, [r4, #4]
    return true;
   d96ec:	2001      	movs	r0, #1
   d96ee:	e7e8      	b.n	d96c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d96f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d96f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d96f2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d96f6:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d96f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d96fa:	9301      	str	r3, [sp, #4]
   d96fc:	460d      	mov	r5, r1
   d96fe:	f7fd ffa9 	bl	d7654 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9702:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9706:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d970a:	4283      	cmp	r3, r0
   d970c:	461a      	mov	r2, r3
   d970e:	d00b      	beq.n	d9728 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d9710:	6812      	ldr	r2, [r2, #0]
   d9712:	42aa      	cmp	r2, r5
   d9714:	f103 0304 	add.w	r3, r3, #4
   d9718:	d1f7      	bne.n	d970a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d971a:	a801      	add	r0, sp, #4
   d971c:	f7ff fe33 	bl	d9386 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d9720:	2500      	movs	r5, #0
}
   d9722:	4628      	mov	r0, r5
   d9724:	b003      	add	sp, #12
   d9726:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d9728:	462a      	mov	r2, r5
   d972a:	4620      	mov	r0, r4
   d972c:	f7ff ffb9 	bl	d96a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d9730:	4605      	mov	r5, r0
   d9732:	2800      	cmp	r0, #0
   d9734:	d0f1      	beq.n	d971a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d9736:	6863      	ldr	r3, [r4, #4]
   d9738:	2b01      	cmp	r3, #1
   d973a:	d101      	bne.n	d9740 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d973c:	f7ff fd0e 	bl	d915c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9740:	a801      	add	r0, sp, #4
   d9742:	f7ff fe20 	bl	d9386 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d9746:	e7ec      	b.n	d9722 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d9748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d9748:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d974a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d974c:	4604      	mov	r4, r0
   d974e:	460d      	mov	r5, r1
   d9750:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d9752:	d914      	bls.n	d977e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d9754:	4290      	cmp	r0, r2
   d9756:	d213      	bcs.n	d9780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d9758:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d975c:	1a75      	subs	r5, r6, r1
   d975e:	f1a1 0710 	sub.w	r7, r1, #16
   d9762:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d9764:	42b7      	cmp	r7, r6
   d9766:	d018      	beq.n	d979a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d9768:	b11c      	cbz	r4, d9772 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d976a:	4631      	mov	r1, r6
   d976c:	4620      	mov	r0, r4
   d976e:	f000 fdd3 	bl	da318 <_ZN6StringC1EOS_>
                end->~T();
   d9772:	4630      	mov	r0, r6
   d9774:	f000 fd54 	bl	da220 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d9778:	3e10      	subs	r6, #16
   d977a:	3c10      	subs	r4, #16
   d977c:	e7f2      	b.n	d9764 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d977e:	d00c      	beq.n	d979a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d9780:	42b5      	cmp	r5, r6
   d9782:	d00a      	beq.n	d979a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d9784:	b11c      	cbz	r4, d978e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d9786:	4629      	mov	r1, r5
   d9788:	4620      	mov	r0, r4
   d978a:	f000 fdc5 	bl	da318 <_ZN6StringC1EOS_>
                p->~T();
   d978e:	4628      	mov	r0, r5
   d9790:	f000 fd46 	bl	da220 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d9794:	3510      	adds	r5, #16
   d9796:	3410      	adds	r4, #16
   d9798:	e7f2      	b.n	d9780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d979a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d979c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d979c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d979e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d97a0:	4605      	mov	r5, r0
        if (n > 0) {
   d97a2:	dd11      	ble.n	d97c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d97a4:	0130      	lsls	r0, r6, #4
   d97a6:	f7fe fa99 	bl	d7cdc <malloc>
            if (!d) {
   d97aa:	4604      	mov	r4, r0
   d97ac:	b158      	cbz	r0, d97c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d97ae:	e9d5 1200 	ldrd	r1, r2, [r5]
   d97b2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d97b6:	f7ff ffc7 	bl	d9748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d97ba:	6828      	ldr	r0, [r5, #0]
   d97bc:	f7fe fa96 	bl	d7cec <free>
        data_ = d;
   d97c0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d97c2:	60ae      	str	r6, [r5, #8]
        return true;
   d97c4:	2001      	movs	r0, #1
    }
   d97c6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d97c8:	2400      	movs	r4, #0
   d97ca:	e7f6      	b.n	d97ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d97cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d97cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d97d0:	4691      	mov	r9, r2
   d97d2:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d97d4:	2300      	movs	r3, #0
   d97d6:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d97d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d97dc:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d97de:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d97e0:	4299      	cmp	r1, r3
        capacity_(0) {
   d97e2:	e9c0 3300 	strd	r3, r3, [r0]
   d97e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d97ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d97ee:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d97f2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d97f4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d97f6:	dc23      	bgt.n	d9840 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d97f8:	e9d9 5700 	ldrd	r5, r7, [r9]
   d97fc:	2314      	movs	r3, #20
   d97fe:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d9802:	42af      	cmp	r7, r5
   d9804:	d03b      	beq.n	d987e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9806:	4629      	mov	r1, r5
   d9808:	a80d      	add	r0, sp, #52	; 0x34
   d980a:	f000 fd85 	bl	da318 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d980e:	a90d      	add	r1, sp, #52	; 0x34
   d9810:	a811      	add	r0, sp, #68	; 0x44
   d9812:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d9814:	f000 fd80 	bl	da318 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9818:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d981c:	4299      	cmp	r1, r3
   d981e:	da1b      	bge.n	d9858 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d9820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d9822:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d9824:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9828:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d982c:	4631      	mov	r1, r6
   d982e:	f106 0010 	add.w	r0, r6, #16
   d9832:	f7ff ff89 	bl	d9748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9836:	b9ee      	cbnz	r6, d9874 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d9838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d983a:	3301      	adds	r3, #1
   d983c:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d983e:	e011      	b.n	d9864 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d9840:	a80a      	add	r0, sp, #40	; 0x28
   d9842:	f7ff ffab 	bl	d979c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9846:	2800      	cmp	r0, #0
   d9848:	d1d6      	bne.n	d97f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d984a:	a80a      	add	r0, sp, #40	; 0x28
   d984c:	f7ff fd46 	bl	d92dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9850:	4620      	mov	r0, r4
   d9852:	b017      	add	sp, #92	; 0x5c
   d9854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9858:	3101      	adds	r1, #1
   d985a:	a80a      	add	r0, sp, #40	; 0x28
   d985c:	f7ff ff9e 	bl	d979c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9860:	2800      	cmp	r0, #0
   d9862:	d1dd      	bne.n	d9820 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d9864:	a811      	add	r0, sp, #68	; 0x44
   d9866:	f000 fcdb 	bl	da220 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d986a:	a80d      	add	r0, sp, #52	; 0x34
   d986c:	f000 fcd8 	bl	da220 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d9870:	3514      	adds	r5, #20
   d9872:	e7c6      	b.n	d9802 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d9874:	a911      	add	r1, sp, #68	; 0x44
   d9876:	4630      	mov	r0, r6
   d9878:	f000 fd4e 	bl	da318 <_ZN6StringC1EOS_>
   d987c:	e7dc      	b.n	d9838 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d987e:	2600      	movs	r6, #0
   d9880:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d9884:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d9886:	4637      	mov	r7, r6
   d9888:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d988c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9890:	429e      	cmp	r6, r3
   d9892:	f280 8097 	bge.w	d99c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d9896:	0133      	lsls	r3, r6, #4
   d9898:	58d3      	ldr	r3, [r2, r3]
   d989a:	9308      	str	r3, [sp, #32]
        if (!category) {
   d989c:	b90b      	cbnz	r3, d98a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d989e:	3601      	adds	r6, #1
   d98a0:	e7f4      	b.n	d988c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d98a2:	fb0a f306 	mul.w	r3, sl, r6
   d98a6:	9709      	str	r7, [sp, #36]	; 0x24
   d98a8:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d98aa:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d98ac:	a909      	add	r1, sp, #36	; 0x24
   d98ae:	a808      	add	r0, sp, #32
   d98b0:	f7ff fafc 	bl	d8eac <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d98b4:	4683      	mov	fp, r0
   d98b6:	2800      	cmp	r0, #0
   d98b8:	d0f1      	beq.n	d989e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d98ba:	4601      	mov	r1, r0
   d98bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d98be:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d98c2:	f10d 031f 	add.w	r3, sp, #31
   d98c6:	4628      	mov	r0, r5
   d98c8:	f7ff fb6e 	bl	d8fa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d98cc:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d98d0:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d98d2:	f1b8 0f00 	cmp.w	r8, #0
   d98d6:	d166      	bne.n	d99a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d98d8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d98dc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d98e0:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d98e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d98e8:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d98ec:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d98f0:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d98f4:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d98f8:	4293      	cmp	r3, r2
   d98fa:	db1a      	blt.n	d9932 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d98fc:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d9900:	f1bb 0f00 	cmp.w	fp, #0
   d9904:	dd4a      	ble.n	d999c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d9906:	fb0a f00b 	mul.w	r0, sl, fp
   d990a:	f7fe f9e7 	bl	d7cdc <malloc>
            if (!d) {
   d990e:	9004      	str	r0, [sp, #16]
   d9910:	2800      	cmp	r0, #0
   d9912:	d045      	beq.n	d99a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d9914:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9918:	fb0a 1202 	mla	r2, sl, r2, r1
   d991c:	f7ff fe71 	bl	d9602 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d9920:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d9922:	6828      	ldr	r0, [r5, #0]
   d9924:	9304      	str	r3, [sp, #16]
   d9926:	f7fe f9e1 	bl	d7cec <free>
        data_ = d;
   d992a:	9b04      	ldr	r3, [sp, #16]
   d992c:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d992e:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d9932:	9b01      	ldr	r3, [sp, #4]
   d9934:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d9938:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d993a:	fb0a f303 	mul.w	r3, sl, r3
   d993e:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d9942:	f101 0014 	add.w	r0, r1, #20
   d9946:	fb0a b202 	mla	r2, sl, r2, fp
   d994a:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d994c:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d994e:	f7ff fe58 	bl	d9602 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d9952:	9904      	ldr	r1, [sp, #16]
   d9954:	b1a9      	cbz	r1, d9982 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d9956:	9b05      	ldr	r3, [sp, #20]
   d9958:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d995a:	f84b 2003 	str.w	r2, [fp, r3]
   d995e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d9962:	808b      	strh	r3, [r1, #4]
   d9964:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d9968:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d996a:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d996e:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9972:	608b      	str	r3, [r1, #8]
   d9974:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d9976:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d9978:	60cb      	str	r3, [r1, #12]
   d997a:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d997c:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d997e:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9980:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d9982:	686b      	ldr	r3, [r5, #4]
   d9984:	3301      	adds	r3, #1
   d9986:	606b      	str	r3, [r5, #4]
   d9988:	a813      	add	r0, sp, #76	; 0x4c
   d998a:	f7ff fc93 	bl	d92b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d998e:	f1b8 0f00 	cmp.w	r8, #0
   d9992:	d008      	beq.n	d99a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d9994:	a80d      	add	r0, sp, #52	; 0x34
   d9996:	f7ff fc8d 	bl	d92b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d999a:	e756      	b.n	d984a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d999c:	4643      	mov	r3, r8
   d999e:	e7c0      	b.n	d9922 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d99a0:	f04f 0801 	mov.w	r8, #1
   d99a4:	e7f0      	b.n	d9988 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d99a6:	9b01      	ldr	r3, [sp, #4]
   d99a8:	682d      	ldr	r5, [r5, #0]
   d99aa:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d99ae:	9b08      	ldr	r3, [sp, #32]
   d99b0:	781b      	ldrb	r3, [r3, #0]
   d99b2:	b92b      	cbnz	r3, d99c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d99b4:	f8d9 3000 	ldr.w	r3, [r9]
   d99b8:	9a02      	ldr	r2, [sp, #8]
   d99ba:	4413      	add	r3, r2
   d99bc:	7c1b      	ldrb	r3, [r3, #16]
   d99be:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d99c0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d99c2:	e773      	b.n	d98ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d99c4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d99c6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d99c8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d99ca:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d99cc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d99ce:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d99d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d99d2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d99d4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d99d6:	60a2      	str	r2, [r4, #8]
   d99d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d99da:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d99dc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d99de:	60e2      	str	r2, [r4, #12]
   d99e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d99e2:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d99e4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d99e6:	6122      	str	r2, [r4, #16]
   d99e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d99ea:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d99ec:	9b03      	ldr	r3, [sp, #12]
   d99ee:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d99f0:	6162      	str	r2, [r4, #20]
   d99f2:	7623      	strb	r3, [r4, #24]
   d99f4:	e7ce      	b.n	d9994 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d99f8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d99f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d99fa:	4605      	mov	r5, r0
   d99fc:	4b09      	ldr	r3, [pc, #36]	; (d9a24 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d99fe:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9a02:	4604      	mov	r4, r0
   d9a04:	460e      	mov	r6, r1
        filter_(level, filters) {
   d9a06:	a801      	add	r0, sp, #4
   d9a08:	4611      	mov	r1, r2
   d9a0a:	f7fc f8ff 	bl	d5c0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9a0e:	aa01      	add	r2, sp, #4
   d9a10:	4631      	mov	r1, r6
   d9a12:	4628      	mov	r0, r5
   d9a14:	f7ff feda 	bl	d97cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9a18:	a801      	add	r0, sp, #4
   d9a1a:	f7fb faf1 	bl	d5000 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d9a1e:	4620      	mov	r0, r4
   d9a20:	b004      	add	sp, #16
   d9a22:	bd70      	pop	{r4, r5, r6, pc}
   d9a24:	000de04c 	.word	0x000de04c

000d9a28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d9a28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a2a:	460f      	mov	r7, r1
   d9a2c:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9a2e:	4926      	ldr	r1, [pc, #152]	; (d9ac8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d9a30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9a32:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d9a34:	4616      	mov	r6, r2
   d9a36:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9a38:	f002 f903 	bl	dbc42 <strcmp>
   d9a3c:	bb00      	cbnz	r0, d9a80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d9a3e:	b1e4      	cbz	r4, d9a7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d9a40:	4629      	mov	r1, r5
   d9a42:	4668      	mov	r0, sp
   d9a44:	f7ff fc90 	bl	d9368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d9a48:	4920      	ldr	r1, [pc, #128]	; (d9acc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d9a4a:	2024      	movs	r0, #36	; 0x24
   d9a4c:	f001 fae7 	bl	db01e <_ZnwjRKSt9nothrow_t>
   d9a50:	4605      	mov	r5, r0
   d9a52:	b170      	cbz	r0, d9a72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d9a54:	4669      	mov	r1, sp
   d9a56:	a803      	add	r0, sp, #12
   d9a58:	f7fc f8d8 	bl	d5c0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9a5c:	aa03      	add	r2, sp, #12
   d9a5e:	4631      	mov	r1, r6
   d9a60:	4628      	mov	r0, r5
   d9a62:	f7ff ffc9 	bl	d99f8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9a66:	a803      	add	r0, sp, #12
   d9a68:	f7fb faca 	bl	d5000 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d9a6c:	4b18      	ldr	r3, [pc, #96]	; (d9ad0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d9a6e:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d9a70:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d9a72:	4668      	mov	r0, sp
   d9a74:	f7fb fac4 	bl	d5000 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9a78:	462c      	mov	r4, r5
}
   d9a7a:	4620      	mov	r0, r4
   d9a7c:	b007      	add	sp, #28
   d9a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d9a80:	4914      	ldr	r1, [pc, #80]	; (d9ad4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d9a82:	4638      	mov	r0, r7
   d9a84:	f002 f8dd 	bl	dbc42 <strcmp>
   d9a88:	b9e0      	cbnz	r0, d9ac4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d9a8a:	2c00      	cmp	r4, #0
   d9a8c:	d0f5      	beq.n	d9a7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d9a8e:	4629      	mov	r1, r5
   d9a90:	4668      	mov	r0, sp
   d9a92:	f7ff fc69 	bl	d9368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d9a96:	490d      	ldr	r1, [pc, #52]	; (d9acc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d9a98:	2024      	movs	r0, #36	; 0x24
   d9a9a:	f001 fac0 	bl	db01e <_ZnwjRKSt9nothrow_t>
   d9a9e:	4605      	mov	r5, r0
   d9aa0:	2800      	cmp	r0, #0
   d9aa2:	d0e6      	beq.n	d9a72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d9aa4:	4669      	mov	r1, sp
   d9aa6:	a803      	add	r0, sp, #12
   d9aa8:	f7fc f8b0 	bl	d5c0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9aac:	aa03      	add	r2, sp, #12
   d9aae:	4631      	mov	r1, r6
   d9ab0:	4628      	mov	r0, r5
   d9ab2:	f7ff ffa1 	bl	d99f8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9ab6:	a803      	add	r0, sp, #12
   d9ab8:	f7fb faa2 	bl	d5000 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9abc:	4b06      	ldr	r3, [pc, #24]	; (d9ad8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d9abe:	602b      	str	r3, [r5, #0]
   d9ac0:	622c      	str	r4, [r5, #32]
}
   d9ac2:	e7d6      	b.n	d9a72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d9ac4:	2400      	movs	r4, #0
   d9ac6:	e7d8      	b.n	d9a7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d9ac8:	000de71e 	.word	0x000de71e
   d9acc:	000de8e4 	.word	0x000de8e4
   d9ad0:	000de7b0 	.word	0x000de7b0
   d9ad4:	000de722 	.word	0x000de722
   d9ad8:	000de798 	.word	0x000de798

000d9adc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d9adc:	4b01      	ldr	r3, [pc, #4]	; (d9ae4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9ade:	4a02      	ldr	r2, [pc, #8]	; (d9ae8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9ae0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d9ae2:	4770      	bx	lr
   d9ae4:	2003e5e0 	.word	0x2003e5e0
   d9ae8:	000de733 	.word	0x000de733

000d9aec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9af0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d9af2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9af6:	4604      	mov	r4, r0
   d9af8:	460e      	mov	r6, r1
   d9afa:	4617      	mov	r7, r2
   d9afc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d9afe:	f001 f8a1 	bl	dac44 <_Z16_fetch_usbserialv>
   d9b02:	4581      	cmp	r9, r0
   d9b04:	d04c      	beq.n	d9ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d9b06:	792b      	ldrb	r3, [r5, #4]
   d9b08:	0719      	lsls	r1, r3, #28
   d9b0a:	d504      	bpl.n	d9b16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d9b0c:	696a      	ldr	r2, [r5, #20]
   d9b0e:	4954      	ldr	r1, [pc, #336]	; (d9c60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d9b10:	4620      	mov	r0, r4
   d9b12:	f7ff fa3a 	bl	d8f8a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d9b16:	f1b8 0f00 	cmp.w	r8, #0
   d9b1a:	d00d      	beq.n	d9b38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d9b1c:	215b      	movs	r1, #91	; 0x5b
   d9b1e:	4620      	mov	r0, r4
   d9b20:	f7ff fa27 	bl	d8f72 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d9b24:	4641      	mov	r1, r8
   d9b26:	4620      	mov	r0, r4
   d9b28:	f7ff fa14 	bl	d8f54 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d9b2c:	6823      	ldr	r3, [r4, #0]
   d9b2e:	494d      	ldr	r1, [pc, #308]	; (d9c64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d9b30:	68db      	ldr	r3, [r3, #12]
   d9b32:	2202      	movs	r2, #2
   d9b34:	4620      	mov	r0, r4
   d9b36:	4798      	blx	r3
    if (attr.has_file) {
   d9b38:	792b      	ldrb	r3, [r5, #4]
   d9b3a:	07da      	lsls	r2, r3, #31
   d9b3c:	d523      	bpl.n	d9b86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d9b3e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d9b42:	212f      	movs	r1, #47	; 0x2f
   d9b44:	4640      	mov	r0, r8
   d9b46:	f002 f8d9 	bl	dbcfc <strrchr>
    if (s1) {
   d9b4a:	b108      	cbz	r0, d9b50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d9b4c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d9b50:	4641      	mov	r1, r8
   d9b52:	4620      	mov	r0, r4
   d9b54:	f7ff f9fe 	bl	d8f54 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d9b58:	792b      	ldrb	r3, [r5, #4]
   d9b5a:	079b      	lsls	r3, r3, #30
   d9b5c:	d508      	bpl.n	d9b70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d9b5e:	213a      	movs	r1, #58	; 0x3a
   d9b60:	4620      	mov	r0, r4
   d9b62:	f7ff fa06 	bl	d8f72 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d9b66:	68ea      	ldr	r2, [r5, #12]
   d9b68:	493f      	ldr	r1, [pc, #252]	; (d9c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d9b6a:	4620      	mov	r0, r4
   d9b6c:	f7ff fa0d 	bl	d8f8a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d9b70:	792a      	ldrb	r2, [r5, #4]
   d9b72:	6823      	ldr	r3, [r4, #0]
   d9b74:	f012 0f04 	tst.w	r2, #4
   d9b78:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d9b7a:	bf14      	ite	ne
   d9b7c:	493b      	ldrne	r1, [pc, #236]	; (d9c6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d9b7e:	493c      	ldreq	r1, [pc, #240]	; (d9c70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d9b80:	2202      	movs	r2, #2
            write(": ", 2);
   d9b82:	4620      	mov	r0, r4
   d9b84:	4798      	blx	r3
    if (attr.has_function) {
   d9b86:	792b      	ldrb	r3, [r5, #4]
   d9b88:	0758      	lsls	r0, r3, #29
   d9b8a:	d51d      	bpl.n	d9bc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9b8c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d9b8e:	460b      	mov	r3, r1
   d9b90:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d9b92:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9b96:	b160      	cbz	r0, d9bb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d9b98:	2820      	cmp	r0, #32
   d9b9a:	d108      	bne.n	d9bae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d9b9c:	4619      	mov	r1, r3
   d9b9e:	e7f7      	b.n	d9b90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d9ba0:	4834      	ldr	r0, [pc, #208]	; (d9c74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d9ba2:	f000 f966 	bl	d9e72 <_ZN5spark12NetworkClass9listeningEv>
   d9ba6:	2800      	cmp	r0, #0
   d9ba8:	d0ad      	beq.n	d9b06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d9baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d9bae:	2828      	cmp	r0, #40	; 0x28
   d9bb0:	d1ee      	bne.n	d9b90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d9bb2:	6823      	ldr	r3, [r4, #0]
   d9bb4:	1a52      	subs	r2, r2, r1
   d9bb6:	68db      	ldr	r3, [r3, #12]
   d9bb8:	4620      	mov	r0, r4
   d9bba:	4798      	blx	r3
        write("(): ", 4);
   d9bbc:	6823      	ldr	r3, [r4, #0]
   d9bbe:	492e      	ldr	r1, [pc, #184]	; (d9c78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d9bc0:	68db      	ldr	r3, [r3, #12]
   d9bc2:	2204      	movs	r2, #4
   d9bc4:	4620      	mov	r0, r4
   d9bc6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d9bc8:	2100      	movs	r1, #0
   d9bca:	4638      	mov	r0, r7
   d9bcc:	f7fd ff1a 	bl	d7a04 <log_level_name>
   d9bd0:	4601      	mov	r1, r0
    write(s);
   d9bd2:	4620      	mov	r0, r4
   d9bd4:	f7ff f9be 	bl	d8f54 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d9bd8:	6823      	ldr	r3, [r4, #0]
   d9bda:	4925      	ldr	r1, [pc, #148]	; (d9c70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d9bdc:	68db      	ldr	r3, [r3, #12]
   d9bde:	2202      	movs	r2, #2
   d9be0:	4620      	mov	r0, r4
   d9be2:	4798      	blx	r3
    if (msg) {
   d9be4:	b11e      	cbz	r6, d9bee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d9be6:	4631      	mov	r1, r6
   d9be8:	4620      	mov	r0, r4
   d9bea:	f7ff f9b3 	bl	d8f54 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d9bee:	792b      	ldrb	r3, [r5, #4]
   d9bf0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d9bf4:	d02c      	beq.n	d9c50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d9bf6:	6823      	ldr	r3, [r4, #0]
   d9bf8:	4920      	ldr	r1, [pc, #128]	; (d9c7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d9bfa:	68db      	ldr	r3, [r3, #12]
   d9bfc:	2202      	movs	r2, #2
   d9bfe:	4620      	mov	r0, r4
   d9c00:	4798      	blx	r3
        if (attr.has_code) {
   d9c02:	792b      	ldrb	r3, [r5, #4]
   d9c04:	06d9      	lsls	r1, r3, #27
   d9c06:	d50a      	bpl.n	d9c1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d9c08:	6823      	ldr	r3, [r4, #0]
   d9c0a:	491d      	ldr	r1, [pc, #116]	; (d9c80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9c0c:	68db      	ldr	r3, [r3, #12]
   d9c0e:	2207      	movs	r2, #7
   d9c10:	4620      	mov	r0, r4
   d9c12:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d9c14:	69aa      	ldr	r2, [r5, #24]
   d9c16:	491b      	ldr	r1, [pc, #108]	; (d9c84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d9c18:	4620      	mov	r0, r4
   d9c1a:	f7ff f9b6 	bl	d8f8a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d9c1e:	792b      	ldrb	r3, [r5, #4]
   d9c20:	069a      	lsls	r2, r3, #26
   d9c22:	d511      	bpl.n	d9c48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d9c24:	06db      	lsls	r3, r3, #27
   d9c26:	d505      	bpl.n	d9c34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d9c28:	6823      	ldr	r3, [r4, #0]
   d9c2a:	4910      	ldr	r1, [pc, #64]	; (d9c6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d9c2c:	68db      	ldr	r3, [r3, #12]
   d9c2e:	2202      	movs	r2, #2
   d9c30:	4620      	mov	r0, r4
   d9c32:	4798      	blx	r3
            write("details = ", 10);
   d9c34:	6823      	ldr	r3, [r4, #0]
   d9c36:	4914      	ldr	r1, [pc, #80]	; (d9c88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d9c38:	68db      	ldr	r3, [r3, #12]
   d9c3a:	4620      	mov	r0, r4
   d9c3c:	220a      	movs	r2, #10
   d9c3e:	4798      	blx	r3
            write(attr.details);
   d9c40:	69e9      	ldr	r1, [r5, #28]
   d9c42:	4620      	mov	r0, r4
   d9c44:	f7ff f986 	bl	d8f54 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d9c48:	215d      	movs	r1, #93	; 0x5d
   d9c4a:	4620      	mov	r0, r4
   d9c4c:	f7ff f991 	bl	d8f72 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d9c50:	6823      	ldr	r3, [r4, #0]
   d9c52:	490e      	ldr	r1, [pc, #56]	; (d9c8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d9c54:	68db      	ldr	r3, [r3, #12]
   d9c56:	4620      	mov	r0, r4
   d9c58:	2202      	movs	r2, #2
}
   d9c5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d9c5e:	4718      	bx	r3
   d9c60:	000de737 	.word	0x000de737
   d9c64:	000de73e 	.word	0x000de73e
   d9c68:	000de1a0 	.word	0x000de1a0
   d9c6c:	000de741 	.word	0x000de741
   d9c70:	000de746 	.word	0x000de746
   d9c74:	2003e60c 	.word	0x2003e60c
   d9c78:	000de744 	.word	0x000de744
   d9c7c:	000de749 	.word	0x000de749
   d9c80:	000de74c 	.word	0x000de74c
   d9c84:	000ddbd9 	.word	0x000ddbd9
   d9c88:	000de754 	.word	0x000de754
   d9c8c:	000de75f 	.word	0x000de75f

000d9c90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9c94:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d9c96:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9c9a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d9c9c:	4605      	mov	r5, r0
   d9c9e:	460f      	mov	r7, r1
   d9ca0:	4690      	mov	r8, r2
   d9ca2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d9ca4:	f000 ffce 	bl	dac44 <_Z16_fetch_usbserialv>
   d9ca8:	4581      	cmp	r9, r0
   d9caa:	d105      	bne.n	d9cb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d9cac:	4849      	ldr	r0, [pc, #292]	; (d9dd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d9cae:	f000 f8e0 	bl	d9e72 <_ZN5spark12NetworkClass9listeningEv>
   d9cb2:	2800      	cmp	r0, #0
   d9cb4:	f040 808a 	bne.w	d9dcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d9cb8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d9cba:	4a47      	ldr	r2, [pc, #284]	; (d9dd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d9cbc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d9cbe:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d9cc2:	a801      	add	r0, sp, #4
        strm_(stream) {
   d9cc4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d9cc6:	f88d 9008 	strb.w	r9, [sp, #8]
   d9cca:	f7ff f838 	bl	d8d3e <_ZN5spark10JSONWriter11beginObjectEv>
   d9cce:	4649      	mov	r1, r9
   d9cd0:	4640      	mov	r0, r8
   d9cd2:	f7fd fe97 	bl	d7a04 <log_level_name>
    json.name("l", 1).value(s);
   d9cd6:	4941      	ldr	r1, [pc, #260]	; (d9ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d9cd8:	4680      	mov	r8, r0
   d9cda:	2201      	movs	r2, #1
   d9cdc:	a801      	add	r0, sp, #4
   d9cde:	f7ff f8b7 	bl	d8e50 <_ZN5spark10JSONWriter4nameEPKcj>
   d9ce2:	4641      	mov	r1, r8
   d9ce4:	f7ff f928 	bl	d8f38 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d9ce8:	b13f      	cbz	r7, d9cfa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d9cea:	493d      	ldr	r1, [pc, #244]	; (d9de0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d9cec:	2201      	movs	r2, #1
   d9cee:	a801      	add	r0, sp, #4
   d9cf0:	f7ff f8ae 	bl	d8e50 <_ZN5spark10JSONWriter4nameEPKcj>
   d9cf4:	4639      	mov	r1, r7
   d9cf6:	f7ff f91f 	bl	d8f38 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d9cfa:	b13e      	cbz	r6, d9d0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d9cfc:	4939      	ldr	r1, [pc, #228]	; (d9de4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d9cfe:	2201      	movs	r2, #1
   d9d00:	a801      	add	r0, sp, #4
   d9d02:	f7ff f8a5 	bl	d8e50 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d06:	4631      	mov	r1, r6
   d9d08:	f7ff f916 	bl	d8f38 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d9d0c:	7923      	ldrb	r3, [r4, #4]
   d9d0e:	07df      	lsls	r7, r3, #31
   d9d10:	d50e      	bpl.n	d9d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d9d12:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d9d14:	212f      	movs	r1, #47	; 0x2f
   d9d16:	4630      	mov	r0, r6
   d9d18:	f001 fff0 	bl	dbcfc <strrchr>
    if (s1) {
   d9d1c:	b100      	cbz	r0, d9d20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d9d1e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d9d20:	4931      	ldr	r1, [pc, #196]	; (d9de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d9d22:	2201      	movs	r2, #1
   d9d24:	a801      	add	r0, sp, #4
   d9d26:	f7ff f893 	bl	d8e50 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d2a:	4631      	mov	r1, r6
   d9d2c:	f7ff f904 	bl	d8f38 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d9d30:	7923      	ldrb	r3, [r4, #4]
   d9d32:	079e      	lsls	r6, r3, #30
   d9d34:	d507      	bpl.n	d9d46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d9d36:	492d      	ldr	r1, [pc, #180]	; (d9dec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d9d38:	2202      	movs	r2, #2
   d9d3a:	a801      	add	r0, sp, #4
   d9d3c:	f7ff f888 	bl	d8e50 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d40:	68e1      	ldr	r1, [r4, #12]
   d9d42:	f7ff f809 	bl	d8d58 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d9d46:	7923      	ldrb	r3, [r4, #4]
   d9d48:	0758      	lsls	r0, r3, #29
   d9d4a:	d514      	bpl.n	d9d76 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9d4c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d9d4e:	4633      	mov	r3, r6
   d9d50:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d9d52:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9d56:	b12a      	cbz	r2, d9d64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d9d58:	2a20      	cmp	r2, #32
   d9d5a:	d101      	bne.n	d9d60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d9d5c:	461e      	mov	r6, r3
   d9d5e:	e7f7      	b.n	d9d50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d9d60:	2a28      	cmp	r2, #40	; 0x28
   d9d62:	d1f5      	bne.n	d9d50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d9d64:	4922      	ldr	r1, [pc, #136]	; (d9df0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d9d66:	2202      	movs	r2, #2
   d9d68:	a801      	add	r0, sp, #4
   d9d6a:	f7ff f871 	bl	d8e50 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d6e:	1bba      	subs	r2, r7, r6
   d9d70:	4631      	mov	r1, r6
   d9d72:	f7ff f87d 	bl	d8e70 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d9d76:	7923      	ldrb	r3, [r4, #4]
   d9d78:	0719      	lsls	r1, r3, #28
   d9d7a:	d507      	bpl.n	d9d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d9d7c:	491d      	ldr	r1, [pc, #116]	; (d9df4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d9d7e:	2201      	movs	r2, #1
   d9d80:	a801      	add	r0, sp, #4
   d9d82:	f7ff f865 	bl	d8e50 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d86:	6961      	ldr	r1, [r4, #20]
   d9d88:	f7fe fff8 	bl	d8d7c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d9d8c:	7923      	ldrb	r3, [r4, #4]
   d9d8e:	06da      	lsls	r2, r3, #27
   d9d90:	d508      	bpl.n	d9da4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d9d92:	2204      	movs	r2, #4
   d9d94:	4918      	ldr	r1, [pc, #96]	; (d9df8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d9d96:	eb0d 0002 	add.w	r0, sp, r2
   d9d9a:	f7ff f859 	bl	d8e50 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d9e:	69a1      	ldr	r1, [r4, #24]
   d9da0:	f7fe ffda 	bl	d8d58 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d9da4:	7923      	ldrb	r3, [r4, #4]
   d9da6:	069b      	lsls	r3, r3, #26
   d9da8:	d507      	bpl.n	d9dba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d9daa:	4914      	ldr	r1, [pc, #80]	; (d9dfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d9dac:	2206      	movs	r2, #6
   d9dae:	a801      	add	r0, sp, #4
   d9db0:	f7ff f84e 	bl	d8e50 <_ZN5spark10JSONWriter4nameEPKcj>
   d9db4:	69e1      	ldr	r1, [r4, #28]
   d9db6:	f7ff f8bf 	bl	d8f38 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d9dba:	a801      	add	r0, sp, #4
   d9dbc:	f7fe ffa9 	bl	d8d12 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d9dc0:	6a28      	ldr	r0, [r5, #32]
   d9dc2:	490f      	ldr	r1, [pc, #60]	; (d9e00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d9dc4:	6803      	ldr	r3, [r0, #0]
   d9dc6:	2202      	movs	r2, #2
   d9dc8:	68db      	ldr	r3, [r3, #12]
   d9dca:	4798      	blx	r3
}
   d9dcc:	b005      	add	sp, #20
   d9dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9dd2:	bf00      	nop
   d9dd4:	2003e60c 	.word	0x2003e60c
   d9dd8:	000de780 	.word	0x000de780
   d9ddc:	000de714 	.word	0x000de714
   d9de0:	000de762 	.word	0x000de762
   d9de4:	000de3e3 	.word	0x000de3e3
   d9de8:	000de107 	.word	0x000de107
   d9dec:	000de764 	.word	0x000de764
   d9df0:	000de767 	.word	0x000de767
   d9df4:	000dde66 	.word	0x000dde66
   d9df8:	000de76a 	.word	0x000de76a
   d9dfc:	000de76f 	.word	0x000de76f
   d9e00:	000de75f 	.word	0x000de75f

000d9e04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9e04:	2300      	movs	r3, #0
   d9e06:	6840      	ldr	r0, [r0, #4]
   d9e08:	461a      	mov	r2, r3
   d9e0a:	f7fd bf07 	b.w	d7c1c <network_connect>

000d9e0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9e0e:	6840      	ldr	r0, [r0, #4]
   d9e10:	2200      	movs	r2, #0
   d9e12:	2102      	movs	r1, #2
   d9e14:	f7fd bf12 	b.w	d7c3c <network_disconnect>

000d9e18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9e18:	2200      	movs	r2, #0
   d9e1a:	6840      	ldr	r0, [r0, #4]
   d9e1c:	4611      	mov	r1, r2
   d9e1e:	f7fd bf05 	b.w	d7c2c <network_connecting>

000d9e22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9e22:	2200      	movs	r2, #0
   d9e24:	6840      	ldr	r0, [r0, #4]
   d9e26:	4611      	mov	r1, r2
   d9e28:	f7fd bf10 	b.w	d7c4c <network_ready>

000d9e2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9e2c:	2300      	movs	r3, #0
   d9e2e:	6840      	ldr	r0, [r0, #4]
   d9e30:	461a      	mov	r2, r3
   d9e32:	4619      	mov	r1, r3
   d9e34:	f7fd bf12 	b.w	d7c5c <network_on>

000d9e38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9e38:	2300      	movs	r3, #0
   d9e3a:	6840      	ldr	r0, [r0, #4]
   d9e3c:	461a      	mov	r2, r3
   d9e3e:	4619      	mov	r1, r3
   d9e40:	f7fd bf14 	b.w	d7c6c <network_off>

000d9e44 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9e44:	6840      	ldr	r0, [r0, #4]
   d9e46:	2100      	movs	r1, #0
   d9e48:	f7fd bf38 	b.w	d7cbc <network_is_on>

000d9e4c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9e4c:	6840      	ldr	r0, [r0, #4]
   d9e4e:	2100      	movs	r1, #0
   d9e50:	f7fd bf3c 	b.w	d7ccc <network_is_off>

000d9e54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9e54:	6840      	ldr	r0, [r0, #4]
   d9e56:	2200      	movs	r2, #0
   d9e58:	f081 0101 	eor.w	r1, r1, #1
   d9e5c:	f7fd bf0e 	b.w	d7c7c <network_listen>

000d9e60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9e60:	6840      	ldr	r0, [r0, #4]
   d9e62:	2200      	movs	r2, #0
   d9e64:	f7fd bf1a 	b.w	d7c9c <network_set_listen_timeout>

000d9e68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9e68:	2200      	movs	r2, #0
   d9e6a:	6840      	ldr	r0, [r0, #4]
   d9e6c:	4611      	mov	r1, r2
   d9e6e:	f7fd bf1d 	b.w	d7cac <network_get_listen_timeout>

000d9e72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9e72:	2200      	movs	r2, #0
   d9e74:	6840      	ldr	r0, [r0, #4]
   d9e76:	4611      	mov	r1, r2
   d9e78:	f7fd bf08 	b.w	d7c8c <network_listening>

000d9e7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9e80:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9e82:	b095      	sub	sp, #84	; 0x54
   d9e84:	4616      	mov	r6, r2
   d9e86:	460d      	mov	r5, r1
   d9e88:	4607      	mov	r7, r0
    IPAddress addr;
   d9e8a:	f7fe fde3 	bl	d8a54 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9e8e:	4621      	mov	r1, r4
   d9e90:	2218      	movs	r2, #24
   d9e92:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9e94:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9e96:	f001 fe91 	bl	dbbbc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9e9a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9e9c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9ea0:	4621      	mov	r1, r4
   d9ea2:	466b      	mov	r3, sp
   d9ea4:	aa0c      	add	r2, sp, #48	; 0x30
   d9ea6:	4630      	mov	r0, r6
   d9ea8:	f7fd fcec 	bl	d7884 <netdb_getaddrinfo>
    if (!r) {
   d9eac:	4604      	mov	r4, r0
   d9eae:	2800      	cmp	r0, #0
   d9eb0:	d146      	bne.n	d9f40 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9eb2:	4602      	mov	r2, r0
   d9eb4:	2101      	movs	r1, #1
   d9eb6:	6868      	ldr	r0, [r5, #4]
   d9eb8:	f7fd fec8 	bl	d7c4c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9ebc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9ebe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9ec0:	4622      	mov	r2, r4
   d9ec2:	6868      	ldr	r0, [r5, #4]
   d9ec4:	f7fd fec2 	bl	d7c4c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9ec8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9eca:	4681      	mov	r9, r0
        bool ok = false;
   d9ecc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9ece:	2e00      	cmp	r6, #0
   d9ed0:	d036      	beq.n	d9f40 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9ed2:	2900      	cmp	r1, #0
   d9ed4:	d134      	bne.n	d9f40 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9ed6:	6873      	ldr	r3, [r6, #4]
   d9ed8:	2b02      	cmp	r3, #2
   d9eda:	d003      	beq.n	d9ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9edc:	2b0a      	cmp	r3, #10
   d9ede:	d00b      	beq.n	d9ef8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9ee0:	69f6      	ldr	r6, [r6, #28]
   d9ee2:	e7f4      	b.n	d9ece <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9ee4:	f1b8 0f00 	cmp.w	r8, #0
   d9ee8:	d004      	beq.n	d9ef4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9eea:	6971      	ldr	r1, [r6, #20]
   d9eec:	4638      	mov	r0, r7
   d9eee:	3104      	adds	r1, #4
   d9ef0:	f7fe fddd 	bl	d8aae <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9ef4:	4641      	mov	r1, r8
   d9ef6:	e7f3      	b.n	d9ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9ef8:	f1b9 0f00 	cmp.w	r9, #0
   d9efc:	d101      	bne.n	d9f02 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9efe:	4649      	mov	r1, r9
   d9f00:	e7ee      	b.n	d9ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9f02:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9f04:	2210      	movs	r2, #16
   d9f06:	a801      	add	r0, sp, #4
   d9f08:	f001 fe58 	bl	dbbbc <memset>
                    a.v = 6;
   d9f0c:	2306      	movs	r3, #6
   d9f0e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9f12:	ad01      	add	r5, sp, #4
   d9f14:	f104 0308 	add.w	r3, r4, #8
   d9f18:	3418      	adds	r4, #24
   d9f1a:	6818      	ldr	r0, [r3, #0]
   d9f1c:	6859      	ldr	r1, [r3, #4]
   d9f1e:	462a      	mov	r2, r5
   d9f20:	c203      	stmia	r2!, {r0, r1}
   d9f22:	3308      	adds	r3, #8
   d9f24:	42a3      	cmp	r3, r4
   d9f26:	4615      	mov	r5, r2
   d9f28:	d1f7      	bne.n	d9f1a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9f2a:	a901      	add	r1, sp, #4
   d9f2c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9f2e:	ad07      	add	r5, sp, #28
   d9f30:	f7fe fd9e 	bl	d8a70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9f36:	1d3c      	adds	r4, r7, #4
   d9f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9f3a:	682b      	ldr	r3, [r5, #0]
   d9f3c:	7023      	strb	r3, [r4, #0]
   d9f3e:	e7de      	b.n	d9efe <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9f40:	9800      	ldr	r0, [sp, #0]
   d9f42:	f7fd fc97 	bl	d7874 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9f46:	4638      	mov	r0, r7
   d9f48:	b015      	add	sp, #84	; 0x54
   d9f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9f50 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9f50:	4b02      	ldr	r3, [pc, #8]	; (d9f5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9f52:	4a03      	ldr	r2, [pc, #12]	; (d9f60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9f54:	601a      	str	r2, [r3, #0]
   d9f56:	2200      	movs	r2, #0
   d9f58:	605a      	str	r2, [r3, #4]

} // spark
   d9f5a:	4770      	bx	lr
   d9f5c:	2003e60c 	.word	0x2003e60c
   d9f60:	000de7f8 	.word	0x000de7f8

000d9f64 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d9f64:	b508      	push	{r3, lr}
            return &Wire1;
   d9f66:	f001 f82b 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d9f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d9f6e:	f7fe bd25 	b.w	d89bc <_ZN7TwoWire4lockEv>

000d9f72 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d9f72:	b510      	push	{r4, lr}
   d9f74:	4604      	mov	r4, r0
    lock_(_lock)
   d9f76:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d9f78:	b109      	cbz	r1, d9f7e <_ZN4PMICC1Eb+0xc>
        lock();
   d9f7a:	f7ff fff3 	bl	d9f64 <_ZN4PMIC4lockEv.constprop.0>
}
   d9f7e:	4620      	mov	r0, r4
   d9f80:	bd10      	pop	{r4, pc}

000d9f82 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d9f82:	b508      	push	{r3, lr}
            return &Wire1;
   d9f84:	f001 f81c 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d9f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d9f8c:	f7fe bd1f 	b.w	d89ce <_ZN7TwoWire6unlockEv>

000d9f90 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d9f90:	b510      	push	{r4, lr}
    if (lock_) {
   d9f92:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d9f94:	4604      	mov	r4, r0
    if (lock_) {
   d9f96:	b10b      	cbz	r3, d9f9c <_ZN4PMICD1Ev+0xc>
        unlock();
   d9f98:	f7ff fff3 	bl	d9f82 <_ZN4PMIC6unlockEv>
}
   d9f9c:	4620      	mov	r0, r4
   d9f9e:	bd10      	pop	{r4, pc}

000d9fa0 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d9fa0:	b510      	push	{r4, lr}
   d9fa2:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d9fa4:	6800      	ldr	r0, [r0, #0]
   d9fa6:	f7ff ffec 	bl	d9f82 <_ZN4PMIC6unlockEv>
   d9faa:	4620      	mov	r0, r4
   d9fac:	bd10      	pop	{r4, pc}

000d9fae <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d9fae:	b530      	push	{r4, r5, lr}
   d9fb0:	b087      	sub	sp, #28
   d9fb2:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9fb4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9fb6:	f7ff ffd5 	bl	d9f64 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9fba:	236b      	movs	r3, #107	; 0x6b
   d9fbc:	f88d 3008 	strb.w	r3, [sp, #8]
   d9fc0:	2300      	movs	r3, #0
   d9fc2:	2401      	movs	r4, #1
   d9fc4:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d9fc6:	230a      	movs	r3, #10
   d9fc8:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9fca:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d9fce:	f000 fff7 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9fd2:	a902      	add	r1, sp, #8
   d9fd4:	f7fe fcd6 	bl	d8984 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9fd8:	f000 fff2 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d9fdc:	6803      	ldr	r3, [r0, #0]
   d9fde:	4629      	mov	r1, r5
   d9fe0:	689b      	ldr	r3, [r3, #8]
   d9fe2:	4798      	blx	r3
            return &Wire1;
   d9fe4:	f000 ffec 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9fe8:	4621      	mov	r1, r4
   d9fea:	f7fe fce3 	bl	d89b4 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d9fee:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d9ff0:	f000 ffe6 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d9ff4:	a902      	add	r1, sp, #8
   d9ff6:	f7fe fc95 	bl	d8924 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d9ffa:	f000 ffe1 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d9ffe:	6803      	ldr	r3, [r0, #0]
   da000:	695b      	ldr	r3, [r3, #20]
   da002:	4798      	blx	r3
   da004:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   da006:	a801      	add	r0, sp, #4
   da008:	f7ff ffca 	bl	d9fa0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da00c:	b2e0      	uxtb	r0, r4
   da00e:	b007      	add	sp, #28
   da010:	bd30      	pop	{r4, r5, pc}

000da012 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   da012:	b570      	push	{r4, r5, r6, lr}
   da014:	b086      	sub	sp, #24
   da016:	4614      	mov	r4, r2
   da018:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da01a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da01c:	f7ff ffa2 	bl	d9f64 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da020:	236b      	movs	r3, #107	; 0x6b
   da022:	f88d 3008 	strb.w	r3, [sp, #8]
   da026:	2300      	movs	r3, #0
   da028:	9303      	str	r3, [sp, #12]
   da02a:	2601      	movs	r6, #1
    timeout_ = ms;
   da02c:	230a      	movs	r3, #10
   da02e:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da030:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   da034:	f000 ffc4 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da038:	a902      	add	r1, sp, #8
   da03a:	f7fe fca3 	bl	d8984 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da03e:	f000 ffbf 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   da042:	6803      	ldr	r3, [r0, #0]
   da044:	4629      	mov	r1, r5
   da046:	689b      	ldr	r3, [r3, #8]
   da048:	4798      	blx	r3
            return &Wire1;
   da04a:	f000 ffb9 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   da04e:	6803      	ldr	r3, [r0, #0]
   da050:	4621      	mov	r1, r4
   da052:	689b      	ldr	r3, [r3, #8]
   da054:	4798      	blx	r3
            return &Wire1;
   da056:	f000 ffb3 	bl	dafc0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da05a:	4631      	mov	r1, r6
   da05c:	f7fe fcaa 	bl	d89b4 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   da060:	a801      	add	r0, sp, #4
   da062:	f7ff ff9d 	bl	d9fa0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da066:	b006      	add	sp, #24
   da068:	bd70      	pop	{r4, r5, r6, pc}

000da06a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   da06a:	b513      	push	{r0, r1, r4, lr}
   da06c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da06e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da070:	f7ff ff78 	bl	d9f64 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da074:	2101      	movs	r1, #1
   da076:	4620      	mov	r0, r4
   da078:	f7ff ff99 	bl	d9fae <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   da07c:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   da080:	f040 0210 	orr.w	r2, r0, #16
   da084:	2101      	movs	r1, #1
   da086:	4620      	mov	r0, r4
   da088:	f7ff ffc3 	bl	da012 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da08c:	a801      	add	r0, sp, #4
   da08e:	f7ff ff87 	bl	d9fa0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da092:	2001      	movs	r0, #1
   da094:	b002      	add	sp, #8
   da096:	bd10      	pop	{r4, pc}

000da098 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   da098:	b513      	push	{r0, r1, r4, lr}
   da09a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da09c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da09e:	f7ff ff61 	bl	d9f64 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da0a2:	2101      	movs	r1, #1
   da0a4:	4620      	mov	r0, r4
   da0a6:	f7ff ff82 	bl	d9fae <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   da0aa:	2101      	movs	r1, #1
   da0ac:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   da0b0:	4620      	mov	r0, r4
   da0b2:	f7ff ffae 	bl	da012 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da0b6:	a801      	add	r0, sp, #4
   da0b8:	f7ff ff72 	bl	d9fa0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da0bc:	2001      	movs	r0, #1
   da0be:	b002      	add	sp, #8
   da0c0:	bd10      	pop	{r4, pc}

000da0c2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da0c4:	4606      	mov	r6, r0
   da0c6:	460d      	mov	r5, r1
  size_t n = 0;
   da0c8:	188f      	adds	r7, r1, r2
   da0ca:	2400      	movs	r4, #0
  while (size--) {
   da0cc:	42bd      	cmp	r5, r7
   da0ce:	d00c      	beq.n	da0ea <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da0d0:	6833      	ldr	r3, [r6, #0]
   da0d2:	f815 1b01 	ldrb.w	r1, [r5], #1
   da0d6:	689b      	ldr	r3, [r3, #8]
   da0d8:	4630      	mov	r0, r6
   da0da:	4798      	blx	r3
     if (chunk>=0)
   da0dc:	1e03      	subs	r3, r0, #0
   da0de:	db01      	blt.n	da0e4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da0e0:	441c      	add	r4, r3
  while (size--) {
   da0e2:	e7f3      	b.n	da0cc <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da0e4:	2c00      	cmp	r4, #0
   da0e6:	bf08      	it	eq
   da0e8:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   da0ea:	4620      	mov	r0, r4
   da0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da0ee <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   da0ee:	b513      	push	{r0, r1, r4, lr}
   da0f0:	4604      	mov	r4, r0
    }
   da0f2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   da0f4:	b159      	cbz	r1, da10e <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   da0f6:	9101      	str	r1, [sp, #4]
   da0f8:	f001 fdd3 	bl	dbca2 <strlen>
   da0fc:	6823      	ldr	r3, [r4, #0]
   da0fe:	9901      	ldr	r1, [sp, #4]
   da100:	68db      	ldr	r3, [r3, #12]
   da102:	4602      	mov	r2, r0
   da104:	4620      	mov	r0, r4
    }
   da106:	b002      	add	sp, #8
   da108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   da10c:	4718      	bx	r3
    }
   da10e:	b002      	add	sp, #8
   da110:	bd10      	pop	{r4, pc}

000da112 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da112:	6803      	ldr	r3, [r0, #0]
   da114:	689b      	ldr	r3, [r3, #8]
   da116:	4718      	bx	r3

000da118 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da118:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da11a:	210d      	movs	r1, #13
{
   da11c:	4605      	mov	r5, r0
  size_t n = print('\r');
   da11e:	f7ff fff8 	bl	da112 <_ZN5Print5printEc>
  n += print('\n');
   da122:	210a      	movs	r1, #10
  size_t n = print('\r');
   da124:	4604      	mov	r4, r0
  n += print('\n');
   da126:	4628      	mov	r0, r5
   da128:	f7ff fff3 	bl	da112 <_ZN5Print5printEc>
  return n;
}
   da12c:	4420      	add	r0, r4
   da12e:	bd38      	pop	{r3, r4, r5, pc}

000da130 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   da130:	b538      	push	{r3, r4, r5, lr}
   da132:	4605      	mov	r5, r0
  return write(str);
   da134:	f7ff ffdb 	bl	da0ee <_ZN5Print5writeEPKc>
   da138:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   da13a:	4628      	mov	r0, r5
   da13c:	f7ff ffec 	bl	da118 <_ZN5Print7printlnEv>
  return n;
}
   da140:	4420      	add	r0, r4
   da142:	bd38      	pop	{r3, r4, r5, pc}

000da144 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da144:	b530      	push	{r4, r5, lr}
   da146:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da148:	2300      	movs	r3, #0
   da14a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da14e:	2a01      	cmp	r2, #1
   da150:	bf98      	it	ls
   da152:	220a      	movls	r2, #10
   da154:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   da156:	460d      	mov	r5, r1
   da158:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   da15c:	fb01 5312 	mls	r3, r1, r2, r5
   da160:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da164:	2b09      	cmp	r3, #9
   da166:	bf94      	ite	ls
   da168:	3330      	addls	r3, #48	; 0x30
   da16a:	3337      	addhi	r3, #55	; 0x37
   da16c:	b2db      	uxtb	r3, r3
  } while(n);
   da16e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da170:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   da174:	d9ef      	bls.n	da156 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   da176:	4621      	mov	r1, r4
   da178:	f7ff ffb9 	bl	da0ee <_ZN5Print5writeEPKc>
}
   da17c:	b00b      	add	sp, #44	; 0x2c
   da17e:	bd30      	pop	{r4, r5, pc}

000da180 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   da180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da184:	b086      	sub	sp, #24
   da186:	af00      	add	r7, sp, #0
   da188:	4605      	mov	r5, r0
   da18a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   da18c:	1d38      	adds	r0, r7, #4
   da18e:	2114      	movs	r1, #20
{
   da190:	4614      	mov	r4, r2
    va_copy(args2, args);
   da192:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   da194:	f7fd fdca 	bl	d7d2c <vsnprintf>

    if (n<bufsize)
   da198:	2813      	cmp	r0, #19
   da19a:	d80e      	bhi.n	da1ba <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   da19c:	1d39      	adds	r1, r7, #4
   da19e:	4628      	mov	r0, r5
   da1a0:	f7ff ffa5 	bl	da0ee <_ZN5Print5writeEPKc>
   da1a4:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   da1a6:	b11e      	cbz	r6, da1b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   da1a8:	4628      	mov	r0, r5
   da1aa:	f7ff ffb5 	bl	da118 <_ZN5Print7printlnEv>
   da1ae:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   da1b0:	4620      	mov	r0, r4
   da1b2:	3718      	adds	r7, #24
   da1b4:	46bd      	mov	sp, r7
   da1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   da1ba:	f100 0308 	add.w	r3, r0, #8
   da1be:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   da1c2:	46e8      	mov	r8, sp
        char bigger[n+1];
   da1c4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   da1c8:	4622      	mov	r2, r4
   da1ca:	1c41      	adds	r1, r0, #1
   da1cc:	683b      	ldr	r3, [r7, #0]
   da1ce:	4668      	mov	r0, sp
   da1d0:	f7fd fdac 	bl	d7d2c <vsnprintf>
  return write(str);
   da1d4:	4669      	mov	r1, sp
   da1d6:	4628      	mov	r0, r5
   da1d8:	f7ff ff89 	bl	da0ee <_ZN5Print5writeEPKc>
   da1dc:	4604      	mov	r4, r0
   da1de:	46c5      	mov	sp, r8
   da1e0:	e7e1      	b.n	da1a6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000da1e2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da1e2:	b510      	push	{r4, lr}
   da1e4:	4604      	mov	r4, r0
   da1e6:	f7fa f887 	bl	d42f8 <_ZNSt14_Function_baseD1Ev>
   da1ea:	4620      	mov	r0, r4
   da1ec:	bd10      	pop	{r4, pc}
	...

000da1f0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   da1f0:	4803      	ldr	r0, [pc, #12]	; (da200 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da1f2:	4a04      	ldr	r2, [pc, #16]	; (da204 <_GLOBAL__sub_I_RGB+0x14>)
   da1f4:	4904      	ldr	r1, [pc, #16]	; (da208 <_GLOBAL__sub_I_RGB+0x18>)
   da1f6:	2300      	movs	r3, #0
   da1f8:	6083      	str	r3, [r0, #8]
   da1fa:	f000 bf09 	b.w	db010 <__aeabi_atexit>
   da1fe:	bf00      	nop
   da200:	2003e614 	.word	0x2003e614
   da204:	2003e3d0 	.word	0x2003e3d0
   da208:	000da1e3 	.word	0x000da1e3

000da20c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   da20c:	b510      	push	{r4, lr}
   da20e:	4604      	mov	r4, r0
   da210:	4608      	mov	r0, r1
{
    _spi = spi;
   da212:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   da214:	f7fd fb3e 	bl	d7894 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   da218:	2300      	movs	r3, #0
   da21a:	6063      	str	r3, [r4, #4]
}
   da21c:	4620      	mov	r0, r4
   da21e:	bd10      	pop	{r4, pc}

000da220 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   da220:	b510      	push	{r4, lr}
   da222:	4604      	mov	r4, r0
{
	free(buffer);
   da224:	6800      	ldr	r0, [r0, #0]
   da226:	f7fd fd61 	bl	d7cec <free>
}
   da22a:	4620      	mov	r0, r4
   da22c:	bd10      	pop	{r4, pc}

000da22e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   da22e:	b510      	push	{r4, lr}
   da230:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   da232:	6800      	ldr	r0, [r0, #0]
   da234:	b108      	cbz	r0, da23a <_ZN6String10invalidateEv+0xc>
   da236:	f7fd fd59 	bl	d7cec <free>
	buffer = NULL;
   da23a:	2300      	movs	r3, #0
	capacity = len = 0;
   da23c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   da240:	6023      	str	r3, [r4, #0]
}
   da242:	bd10      	pop	{r4, pc}

000da244 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   da244:	b538      	push	{r3, r4, r5, lr}
   da246:	4604      	mov	r4, r0
   da248:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   da24a:	6800      	ldr	r0, [r0, #0]
   da24c:	3101      	adds	r1, #1
   da24e:	f7fd fd55 	bl	d7cfc <realloc>
	if (newbuffer) {
   da252:	b110      	cbz	r0, da25a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   da254:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   da258:	2001      	movs	r0, #1
	}
	return 0;
}
   da25a:	bd38      	pop	{r3, r4, r5, pc}

000da25c <_ZN6String7reserveEj>:
{
   da25c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da25e:	6803      	ldr	r3, [r0, #0]
{
   da260:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da262:	b123      	cbz	r3, da26e <_ZN6String7reserveEj+0x12>
   da264:	6843      	ldr	r3, [r0, #4]
   da266:	428b      	cmp	r3, r1
   da268:	d301      	bcc.n	da26e <_ZN6String7reserveEj+0x12>
   da26a:	2001      	movs	r0, #1
}
   da26c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   da26e:	4620      	mov	r0, r4
   da270:	f7ff ffe8 	bl	da244 <_ZN6String12changeBufferEj>
   da274:	2800      	cmp	r0, #0
   da276:	d0f9      	beq.n	da26c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   da278:	68a3      	ldr	r3, [r4, #8]
   da27a:	2b00      	cmp	r3, #0
   da27c:	d1f5      	bne.n	da26a <_ZN6String7reserveEj+0xe>
   da27e:	6822      	ldr	r2, [r4, #0]
   da280:	7013      	strb	r3, [r2, #0]
   da282:	e7f2      	b.n	da26a <_ZN6String7reserveEj+0xe>

000da284 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da284:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da286:	460d      	mov	r5, r1
	if (!reserve(length)) {
   da288:	4611      	mov	r1, r2
   da28a:	9201      	str	r2, [sp, #4]
{
   da28c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   da28e:	f7ff ffe5 	bl	da25c <_ZN6String7reserveEj>
   da292:	9a01      	ldr	r2, [sp, #4]
   da294:	b928      	cbnz	r0, da2a2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   da296:	4620      	mov	r0, r4
   da298:	f7ff ffc9 	bl	da22e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   da29c:	4620      	mov	r0, r4
   da29e:	b003      	add	sp, #12
   da2a0:	bd30      	pop	{r4, r5, pc}
	len = length;
   da2a2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   da2a4:	4629      	mov	r1, r5
   da2a6:	6820      	ldr	r0, [r4, #0]
   da2a8:	f001 fc60 	bl	dbb6c <memcpy>
	buffer[len] = 0;
   da2ac:	6822      	ldr	r2, [r4, #0]
   da2ae:	68a3      	ldr	r3, [r4, #8]
   da2b0:	2100      	movs	r1, #0
   da2b2:	54d1      	strb	r1, [r2, r3]
	return *this;
   da2b4:	e7f2      	b.n	da29c <_ZN6String4copyEPKcj+0x18>

000da2b6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   da2b6:	2300      	movs	r3, #0
String::String(const char *cstr)
   da2b8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   da2ba:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   da2be:	4604      	mov	r4, r0
	len = 0;
   da2c0:	6083      	str	r3, [r0, #8]
	flags = 0;
   da2c2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   da2c4:	b141      	cbz	r1, da2d8 <_ZN6StringC1EPKc+0x22>
   da2c6:	4608      	mov	r0, r1
   da2c8:	9101      	str	r1, [sp, #4]
   da2ca:	f001 fcea 	bl	dbca2 <strlen>
   da2ce:	9901      	ldr	r1, [sp, #4]
   da2d0:	4602      	mov	r2, r0
   da2d2:	4620      	mov	r0, r4
   da2d4:	f7ff ffd6 	bl	da284 <_ZN6String4copyEPKcj>
}
   da2d8:	4620      	mov	r0, r4
   da2da:	b002      	add	sp, #8
   da2dc:	bd10      	pop	{r4, pc}

000da2de <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da2de:	b538      	push	{r3, r4, r5, lr}
   da2e0:	4605      	mov	r5, r0
	if (buffer) {
   da2e2:	6800      	ldr	r0, [r0, #0]
{
   da2e4:	460c      	mov	r4, r1
	if (buffer) {
   da2e6:	b168      	cbz	r0, da304 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   da2e8:	686a      	ldr	r2, [r5, #4]
   da2ea:	688b      	ldr	r3, [r1, #8]
   da2ec:	429a      	cmp	r2, r3
   da2ee:	d307      	bcc.n	da300 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   da2f0:	6809      	ldr	r1, [r1, #0]
   da2f2:	f001 fcb0 	bl	dbc56 <strcpy>
			len = rhs.len;
   da2f6:	68a3      	ldr	r3, [r4, #8]
   da2f8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   da2fa:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   da2fc:	60a3      	str	r3, [r4, #8]
}
   da2fe:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   da300:	f7fd fcf4 	bl	d7cec <free>
	buffer = rhs.buffer;
   da304:	6823      	ldr	r3, [r4, #0]
   da306:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   da308:	6863      	ldr	r3, [r4, #4]
   da30a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   da30c:	68a3      	ldr	r3, [r4, #8]
   da30e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   da310:	2300      	movs	r3, #0
	rhs.capacity = 0;
   da312:	e9c4 3300 	strd	r3, r3, [r4]
   da316:	e7f1      	b.n	da2fc <_ZN6String4moveERS_+0x1e>

000da318 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   da318:	b510      	push	{r4, lr}
	buffer = NULL;
   da31a:	2300      	movs	r3, #0
	capacity = 0;
   da31c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   da320:	4604      	mov	r4, r0
	len = 0;
   da322:	6083      	str	r3, [r0, #8]
	flags = 0;
   da324:	7303      	strb	r3, [r0, #12]
	move(rval);
   da326:	f7ff ffda 	bl	da2de <_ZN6String4moveERS_>
}
   da32a:	4620      	mov	r0, r4
   da32c:	bd10      	pop	{r4, pc}

000da32e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da32e:	4288      	cmp	r0, r1
{
   da330:	b510      	push	{r4, lr}
   da332:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da334:	d005      	beq.n	da342 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da336:	680b      	ldr	r3, [r1, #0]
   da338:	b12b      	cbz	r3, da346 <_ZN6StringaSERKS_+0x18>
   da33a:	688a      	ldr	r2, [r1, #8]
   da33c:	4619      	mov	r1, r3
   da33e:	f7ff ffa1 	bl	da284 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da342:	4620      	mov	r0, r4
   da344:	bd10      	pop	{r4, pc}
	else invalidate();
   da346:	f7ff ff72 	bl	da22e <_ZN6String10invalidateEv>
   da34a:	e7fa      	b.n	da342 <_ZN6StringaSERKS_+0x14>

000da34c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   da34c:	b510      	push	{r4, lr}
	buffer = NULL;
   da34e:	2300      	movs	r3, #0
String::String(const String &value)
   da350:	4604      	mov	r4, r0
	capacity = 0;
   da352:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   da356:	6083      	str	r3, [r0, #8]
	flags = 0;
   da358:	7303      	strb	r3, [r0, #12]
	*this = value;
   da35a:	f7ff ffe8 	bl	da32e <_ZN6StringaSERKS_>
}
   da35e:	4620      	mov	r0, r4
   da360:	bd10      	pop	{r4, pc}

000da362 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da362:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da364:	6882      	ldr	r2, [r0, #8]
   da366:	b93a      	cbnz	r2, da378 <_ZNK6String6equalsEPKc+0x16>
   da368:	b121      	cbz	r1, da374 <_ZNK6String6equalsEPKc+0x12>
   da36a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   da36c:	fab0 f080 	clz	r0, r0
   da370:	0940      	lsrs	r0, r0, #5
   da372:	e000      	b.n	da376 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da374:	2001      	movs	r0, #1
}
   da376:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   da378:	6800      	ldr	r0, [r0, #0]
   da37a:	b909      	cbnz	r1, da380 <_ZNK6String6equalsEPKc+0x1e>
   da37c:	7800      	ldrb	r0, [r0, #0]
   da37e:	e7f5      	b.n	da36c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   da380:	f001 fc5f 	bl	dbc42 <strcmp>
   da384:	e7f2      	b.n	da36c <_ZNK6String6equalsEPKc+0xa>

000da386 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   da386:	b558      	push	{r3, r4, r6, lr}
   da388:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   da38a:	b12a      	cbz	r2, da398 <_ZNK6String8getBytesEPhjj+0x12>
   da38c:	b121      	cbz	r1, da398 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   da38e:	6884      	ldr	r4, [r0, #8]
   da390:	42a3      	cmp	r3, r4
   da392:	d302      	bcc.n	da39a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   da394:	2300      	movs	r3, #0
   da396:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   da398:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   da39a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   da39c:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   da39e:	6801      	ldr	r1, [r0, #0]
   da3a0:	4294      	cmp	r4, r2
   da3a2:	bf28      	it	cs
   da3a4:	4614      	movcs	r4, r2
   da3a6:	4419      	add	r1, r3
   da3a8:	4622      	mov	r2, r4
   da3aa:	4630      	mov	r0, r6
   da3ac:	f001 fc93 	bl	dbcd6 <strncpy>
	buf[n] = 0;
   da3b0:	2300      	movs	r3, #0
   da3b2:	5533      	strb	r3, [r6, r4]
   da3b4:	e7f0      	b.n	da398 <_ZNK6String8getBytesEPhjj+0x12>
	...

000da3b8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   da3b8:	b40e      	push	{r1, r2, r3}
   da3ba:	b570      	push	{r4, r5, r6, lr}
   da3bc:	b087      	sub	sp, #28
   da3be:	ad0b      	add	r5, sp, #44	; 0x2c
   da3c0:	4604      	mov	r4, r0
   da3c2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da3c6:	9201      	str	r2, [sp, #4]
   da3c8:	462b      	mov	r3, r5
   da3ca:	2105      	movs	r1, #5
   da3cc:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   da3ce:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da3d0:	f7fd fcac 	bl	d7d2c <vsnprintf>
    va_end(marker);

    String result;
   da3d4:	490b      	ldr	r1, [pc, #44]	; (da404 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da3d6:	4606      	mov	r6, r0
    String result;
   da3d8:	4620      	mov	r0, r4
   da3da:	f7ff ff6c 	bl	da2b6 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   da3de:	4631      	mov	r1, r6
   da3e0:	4620      	mov	r0, r4
   da3e2:	f7ff ff3b 	bl	da25c <_ZN6String7reserveEj>
    if (result.buffer) {
   da3e6:	6820      	ldr	r0, [r4, #0]
   da3e8:	b130      	cbz	r0, da3f8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da3ea:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   da3ec:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da3ee:	462b      	mov	r3, r5
   da3f0:	1c71      	adds	r1, r6, #1
   da3f2:	f7fd fc9b 	bl	d7d2c <vsnprintf>
        va_end(marker);
        result.len = n;
   da3f6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   da3f8:	4620      	mov	r0, r4
   da3fa:	b007      	add	sp, #28
   da3fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da400:	b003      	add	sp, #12
   da402:	4770      	bx	lr
   da404:	000de761 	.word	0x000de761

000da408 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   da408:	b510      	push	{r4, lr}
   da40a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   da40c:	6800      	ldr	r0, [r0, #0]
   da40e:	b118      	cbz	r0, da418 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   da410:	f7fd fc6c 	bl	d7cec <free>
            wakeupSource_ = nullptr;
   da414:	2300      	movs	r3, #0
   da416:	6023      	str	r3, [r4, #0]
        }
    }
   da418:	bd10      	pop	{r4, pc}

000da41a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da41a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   da41c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   da420:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   da422:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da424:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   da426:	f853 2f06 	ldr.w	r2, [r3, #6]!
   da42a:	f8c0 2006 	str.w	r2, [r0, #6]
   da42e:	889b      	ldrh	r3, [r3, #4]
   da430:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da432:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   da434:	f7ff ffe8 	bl	da408 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   da438:	682b      	ldr	r3, [r5, #0]
   da43a:	b113      	cbz	r3, da442 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   da43c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   da43e:	2300      	movs	r3, #0
   da440:	602b      	str	r3, [r5, #0]
    }
   da442:	4620      	mov	r0, r4
   da444:	bd38      	pop	{r3, r4, r5, pc}

000da446 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   da446:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   da44a:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   da44c:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   da44e:	b933      	cbnz	r3, da45e <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   da450:	b932      	cbnz	r2, da460 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   da452:	f851 3f06 	ldr.w	r3, [r1, #6]!
   da456:	6003      	str	r3, [r0, #0]
   da458:	888b      	ldrh	r3, [r1, #4]
   da45a:	8083      	strh	r3, [r0, #4]
    }
   da45c:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   da45e:	b122      	cbz	r2, da46a <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   da460:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   da462:	2c01      	cmp	r4, #1
   da464:	d003      	beq.n	da46e <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   da466:	2c04      	cmp	r4, #4
   da468:	d006      	beq.n	da478 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   da46a:	2204      	movs	r2, #4
   da46c:	e005      	b.n	da47a <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   da46e:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   da470:	814a      	strh	r2, [r1, #10]
   da472:	718c      	strb	r4, [r1, #6]
   da474:	810b      	strh	r3, [r1, #8]
                    break;
   da476:	e7ec      	b.n	da452 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   da478:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   da47a:	810b      	strh	r3, [r1, #8]
   da47c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da480:	718a      	strb	r2, [r1, #6]
   da482:	814b      	strh	r3, [r1, #10]
                    break;
   da484:	e7e5      	b.n	da452 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
	...

000da488 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   da488:	b538      	push	{r3, r4, r5, lr}
   da48a:	460c      	mov	r4, r1
   da48c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   da48e:	f7ff ffbb 	bl	da408 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   da492:	b144      	cbz	r4, da4a6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   da494:	8820      	ldrh	r0, [r4, #0]
   da496:	f7fd fc21 	bl	d7cdc <malloc>
   da49a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   da49c:	b128      	cbz	r0, da4aa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   da49e:	8822      	ldrh	r2, [r4, #0]
   da4a0:	4621      	mov	r1, r4
   da4a2:	f001 fb63 	bl	dbb6c <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   da4a6:	2000      	movs	r0, #0
    }
   da4a8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   da4aa:	4801      	ldr	r0, [pc, #4]	; (da4b0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   da4ac:	e7fc      	b.n	da4a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   da4ae:	bf00      	nop
   da4b0:	fffffefc 	.word	0xfffffefc

000da4b4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   da4b4:	b507      	push	{r0, r1, r2, lr}
   da4b6:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   da4b8:	2100      	movs	r1, #0
{
   da4ba:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   da4bc:	9100      	str	r1, [sp, #0]
   da4be:	2001      	movs	r0, #1
   da4c0:	218c      	movs	r1, #140	; 0x8c
   da4c2:	f7fd fb31 	bl	d7b28 <system_reset>
}
   da4c6:	b003      	add	sp, #12
   da4c8:	f85d fb04 	ldr.w	pc, [sp], #4

000da4cc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   da4cc:	4601      	mov	r1, r0
    reset(0, flags);
   da4ce:	2000      	movs	r0, #0
   da4d0:	f7ff bff0 	b.w	da4b4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000da4d4 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   da4d4:	2000      	movs	r0, #0
   da4d6:	f7ff bff9 	b.w	da4cc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000da4dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   da4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   da4de:	4d2d      	ldr	r5, [pc, #180]	; (da594 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   da4e0:	7d0b      	ldrb	r3, [r1, #20]
   da4e2:	4604      	mov	r4, r0
   da4e4:	b08b      	sub	sp, #44	; 0x2c
   da4e6:	4608      	mov	r0, r1
   da4e8:	1daf      	adds	r7, r5, #6
   da4ea:	2b00      	cmp	r3, #0
   da4ec:	d038      	beq.n	da560 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   da4ee:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   da4f0:	791b      	ldrb	r3, [r3, #4]
   da4f2:	2b00      	cmp	r3, #0
   da4f4:	d034      	beq.n	da560 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   da4f6:	2200      	movs	r2, #0
    SleepResult() {}
   da4f8:	4b27      	ldr	r3, [pc, #156]	; (da598 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da4fa:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   da4fc:	a902      	add	r1, sp, #8
   da4fe:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   da500:	9202      	str	r2, [sp, #8]
   da502:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   da506:	f88d 200e 	strb.w	r2, [sp, #14]
   da50a:	f7fd fb03 	bl	d7b14 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   da50e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   da512:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   da516:	b200      	sxth	r0, r0
   da518:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   da51c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   da520:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   da522:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   da524:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da526:	4628      	mov	r0, r5
   da528:	f7ff ffae 	bl	da488 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   da52c:	a802      	add	r0, sp, #8
   da52e:	f7ff ff6b 	bl	da408 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   da532:	2300      	movs	r3, #0
   da534:	6023      	str	r3, [r4, #0]
   da536:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   da538:	71a3      	strb	r3, [r4, #6]
   da53a:	8123      	strh	r3, [r4, #8]
   da53c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da540:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   da542:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   da546:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   da548:	683b      	ldr	r3, [r7, #0]
   da54a:	f8c4 3006 	str.w	r3, [r4, #6]
   da54e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da550:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   da552:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   da554:	4620      	mov	r0, r4
   da556:	f7ff ff97 	bl	da488 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   da55a:	4620      	mov	r0, r4
   da55c:	b00b      	add	sp, #44	; 0x2c
   da55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   da560:	2600      	movs	r6, #0
   da562:	2320      	movs	r3, #32
   da564:	e9cd 3602 	strd	r3, r6, [sp, #8]
   da568:	4b0c      	ldr	r3, [pc, #48]	; (da59c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   da56a:	9300      	str	r3, [sp, #0]
   da56c:	490c      	ldr	r1, [pc, #48]	; (da5a0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   da56e:	4633      	mov	r3, r6
   da570:	aa02      	add	r2, sp, #8
   da572:	2032      	movs	r0, #50	; 0x32
   da574:	f7fd fa36 	bl	d79e4 <log_message>
    SleepResult() {}
   da578:	4b07      	ldr	r3, [pc, #28]	; (da598 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da57a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   da57c:	a902      	add	r1, sp, #8
        error_ = error;
   da57e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   da582:	4804      	ldr	r0, [pc, #16]	; (da594 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   da584:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   da586:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   da58a:	f8ad 300c 	strh.w	r3, [sp, #12]
   da58e:	f7ff ff44 	bl	da41a <_ZN17SystemSleepResultaSEOS_>
   da592:	e7cb      	b.n	da52c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   da594:	2003e624 	.word	0x2003e624
   da598:	ffff0000 	.word	0xffff0000
   da59c:	000de833 	.word	0x000de833
   da5a0:	000de82c 	.word	0x000de82c

000da5a4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   da5a4:	b530      	push	{r4, r5, lr}
   da5a6:	4604      	mov	r4, r0
   da5a8:	b085      	sub	sp, #20
   da5aa:	4608      	mov	r0, r1
   da5ac:	4611      	mov	r1, r2
   da5ae:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   da5b0:	2300      	movs	r3, #0
   da5b2:	f7fd fa59 	bl	d7a68 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   da5b6:	4d0d      	ldr	r5, [pc, #52]	; (da5ec <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   da5b8:	f8ad 000c 	strh.w	r0, [sp, #12]
              compatResult_(r) {
   da5bc:	2300      	movs	r3, #0
   da5be:	a901      	add	r1, sp, #4
   da5c0:	9301      	str	r3, [sp, #4]
   da5c2:	f8ad 3008 	strh.w	r3, [sp, #8]
   da5c6:	f88d 300a 	strb.w	r3, [sp, #10]
   da5ca:	4628      	mov	r0, r5
   da5cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da5d0:	f8ad 300e 	strh.w	r3, [sp, #14]
   da5d4:	f7ff ff21 	bl	da41a <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   da5d8:	a801      	add	r0, sp, #4
   da5da:	f7ff ff15 	bl	da408 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   da5de:	4620      	mov	r0, r4
   da5e0:	4629      	mov	r1, r5
   da5e2:	f7ff ff30 	bl	da446 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   da5e6:	4620      	mov	r0, r4
   da5e8:	b005      	add	sp, #20
   da5ea:	bd30      	pop	{r4, r5, pc}
   da5ec:	2003e624 	.word	0x2003e624

000da5f0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   da5f0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   da5f2:	4b09      	ldr	r3, [pc, #36]	; (da618 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   da5f4:	4c09      	ldr	r4, [pc, #36]	; (da61c <_GLOBAL__sub_I_System+0x2c>)
   da5f6:	2202      	movs	r2, #2
   da5f8:	2000      	movs	r0, #0
   da5fa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   da5fc:	4b08      	ldr	r3, [pc, #32]	; (da620 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   da5fe:	6020      	str	r0, [r4, #0]
   da600:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   da602:	71a0      	strb	r0, [r4, #6]
   da604:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   da606:	f7fd fa1f 	bl	d7a48 <set_system_mode>
SystemClass System;
   da60a:	4620      	mov	r0, r4
   da60c:	4a05      	ldr	r2, [pc, #20]	; (da624 <_GLOBAL__sub_I_System+0x34>)
   da60e:	4906      	ldr	r1, [pc, #24]	; (da628 <_GLOBAL__sub_I_System+0x38>)
   da610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   da614:	f000 bcfc 	b.w	db010 <__aeabi_atexit>
   da618:	2003e630 	.word	0x2003e630
   da61c:	2003e624 	.word	0x2003e624
   da620:	ffff0000 	.word	0xffff0000
   da624:	2003e3d0 	.word	0x2003e3d0
   da628:	000d42dd 	.word	0x000d42dd

000da62c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   da630:	4a15      	ldr	r2, [pc, #84]	; (da688 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da632:	f8df 8060 	ldr.w	r8, [pc, #96]	; da694 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   da636:	e9d2 3200 	ldrd	r3, r2, [r2]
   da63a:	18c0      	adds	r0, r0, r3
   da63c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   da640:	4a12      	ldr	r2, [pc, #72]	; (da68c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   da642:	e9d2 3200 	ldrd	r3, r2, [r2]
   da646:	18c6      	adds	r6, r0, r3
   da648:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   da64c:	e9d8 2300 	ldrd	r2, r3, [r8]
   da650:	42bb      	cmp	r3, r7
   da652:	bf08      	it	eq
   da654:	42b2      	cmpeq	r2, r6
{
   da656:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   da658:	d013      	beq.n	da682 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   da65a:	a903      	add	r1, sp, #12
   da65c:	4668      	mov	r0, sp
   da65e:	e9cd 6700 	strd	r6, r7, [sp]
   da662:	f7fd fb8b 	bl	d7d7c <localtime_r>
	calendar_time.tm_year += 1900;
   da666:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da668:	4d09      	ldr	r5, [pc, #36]	; (da690 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   da66a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da66e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   da670:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da67a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da67e:	6823      	ldr	r3, [r4, #0]
   da680:	602b      	str	r3, [r5, #0]
    }
}
   da682:	b00c      	add	sp, #48	; 0x30
   da684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da688:	2003e668 	.word	0x2003e668
   da68c:	2003e660 	.word	0x2003e660
   da690:	2003e63c 	.word	0x2003e63c
   da694:	2003e670 	.word	0x2003e670

000da698 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   da698:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da69a:	2000      	movs	r0, #0
   da69c:	f7fd fa96 	bl	d7bcc <spark_sync_time_pending>
   da6a0:	b128      	cbz	r0, da6ae <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   da6a2:	f7fd fa6b 	bl	d7b7c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da6a6:	f080 0001 	eor.w	r0, r0, #1
   da6aa:	b2c0      	uxtb	r0, r0
    }
   da6ac:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da6ae:	2001      	movs	r0, #1
   da6b0:	e7fc      	b.n	da6ac <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000da6b4 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   da6b4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da6b6:	f7ff ffb9 	bl	da62c <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   da6ba:	4b01      	ldr	r3, [pc, #4]	; (da6c0 <_ZN9TimeClass4hourEx+0xc>)
   da6bc:	6898      	ldr	r0, [r3, #8]
   da6be:	bd08      	pop	{r3, pc}
   da6c0:	2003e63c 	.word	0x2003e63c

000da6c4 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   da6c4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da6c6:	f7ff ffb1 	bl	da62c <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   da6ca:	4b01      	ldr	r3, [pc, #4]	; (da6d0 <_ZN9TimeClass3dayEx+0xc>)
   da6cc:	68d8      	ldr	r0, [r3, #12]
   da6ce:	bd08      	pop	{r3, pc}
   da6d0:	2003e63c 	.word	0x2003e63c

000da6d4 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   da6d4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da6d6:	f7ff ffa9 	bl	da62c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   da6da:	4b02      	ldr	r3, [pc, #8]	; (da6e4 <_ZN9TimeClass7weekdayEx+0x10>)
   da6dc:	6998      	ldr	r0, [r3, #24]
}
   da6de:	3001      	adds	r0, #1
   da6e0:	bd08      	pop	{r3, pc}
   da6e2:	bf00      	nop
   da6e4:	2003e63c 	.word	0x2003e63c

000da6e8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   da6e8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da6ea:	f7ff ff9f 	bl	da62c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   da6ee:	4b02      	ldr	r3, [pc, #8]	; (da6f8 <_ZN9TimeClass5monthEx+0x10>)
   da6f0:	6918      	ldr	r0, [r3, #16]
}
   da6f2:	3001      	adds	r0, #1
   da6f4:	bd08      	pop	{r3, pc}
   da6f6:	bf00      	nop
   da6f8:	2003e63c 	.word	0x2003e63c

000da6fc <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da6fc:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   da700:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   da708:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da70a:	d411      	bmi.n	da730 <_ZN9TimeClass4zoneEf+0x34>
   da70c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   da710:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da718:	dc0a      	bgt.n	da730 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   da71a:	eddf 7a06 	vldr	s15, [pc, #24]	; da734 <_ZN9TimeClass4zoneEf+0x38>
   da71e:	ee60 7a27 	vmul.f32	s15, s0, s15
   da722:	ee17 0a90 	vmov	r0, s15
   da726:	f001 f985 	bl	dba34 <__aeabi_f2lz>
   da72a:	4b03      	ldr	r3, [pc, #12]	; (da738 <_ZN9TimeClass4zoneEf+0x3c>)
   da72c:	e9c3 0100 	strd	r0, r1, [r3]
}
   da730:	bd08      	pop	{r3, pc}
   da732:	bf00      	nop
   da734:	45610000 	.word	0x45610000
   da738:	2003e668 	.word	0x2003e668

000da73c <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   da73c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   da740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   da744:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   da746:	d411      	bmi.n	da76c <_ZN9TimeClass12setDSTOffsetEf+0x30>
   da748:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   da74c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da754:	dc0a      	bgt.n	da76c <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   da756:	eddf 7a06 	vldr	s15, [pc, #24]	; da770 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   da75a:	ee60 7a27 	vmul.f32	s15, s0, s15
   da75e:	ee17 0a90 	vmov	r0, s15
   da762:	f001 f967 	bl	dba34 <__aeabi_f2lz>
   da766:	4b03      	ldr	r3, [pc, #12]	; (da774 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   da768:	e9c3 0100 	strd	r0, r1, [r3]
}
   da76c:	bd08      	pop	{r3, pc}
   da76e:	bf00      	nop
   da770:	45610000 	.word	0x45610000
   da774:	2003e1f0 	.word	0x2003e1f0

000da778 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   da778:	4b03      	ldr	r3, [pc, #12]	; (da788 <_ZN9TimeClass8beginDSTEv+0x10>)
   da77a:	e9d3 0100 	ldrd	r0, r1, [r3]
   da77e:	4b03      	ldr	r3, [pc, #12]	; (da78c <_ZN9TimeClass8beginDSTEv+0x14>)
   da780:	e9c3 0100 	strd	r0, r1, [r3]
}
   da784:	4770      	bx	lr
   da786:	bf00      	nop
   da788:	2003e1f0 	.word	0x2003e1f0
   da78c:	2003e660 	.word	0x2003e660

000da790 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   da790:	4b02      	ldr	r3, [pc, #8]	; (da79c <_ZN9TimeClass6endDSTEv+0xc>)
   da792:	2000      	movs	r0, #0
   da794:	2100      	movs	r1, #0
   da796:	e9c3 0100 	strd	r0, r1, [r3]
}
   da79a:	4770      	bx	lr
   da79c:	2003e660 	.word	0x2003e660

000da7a0 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   da7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da7a2:	4602      	mov	r2, r0
   da7a4:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da7a6:	4668      	mov	r0, sp
    struct timeval tv = {
   da7a8:	2100      	movs	r1, #0
    };
   da7aa:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   da7ae:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da7b2:	f7fc ffb7 	bl	d7724 <hal_rtc_set_time>
   da7b6:	4602      	mov	r2, r0
   da7b8:	b910      	cbnz	r0, da7c0 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   da7ba:	4601      	mov	r1, r0
   da7bc:	f7fd f984 	bl	d7ac8 <system_notify_time_changed>
    }
}
   da7c0:	b005      	add	sp, #20
   da7c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da7c8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da7c8:	b530      	push	{r4, r5, lr}
   da7ca:	4604      	mov	r4, r0
    t += time_zone_cache;
   da7cc:	4818      	ldr	r0, [pc, #96]	; (da830 <_ZN9TimeClass7timeStrEx+0x68>)
   da7ce:	e9d0 1000 	ldrd	r1, r0, [r0]
   da7d2:	1852      	adds	r2, r2, r1
   da7d4:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da7d8:	4816      	ldr	r0, [pc, #88]	; (da834 <_ZN9TimeClass7timeStrEx+0x6c>)
   da7da:	e9d0 1000 	ldrd	r1, r0, [r0]
   da7de:	1852      	adds	r2, r2, r1
{
   da7e0:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da7e2:	eb40 0303 	adc.w	r3, r0, r3
   da7e6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da7ea:	2224      	movs	r2, #36	; 0x24
   da7ec:	eb0d 0002 	add.w	r0, sp, r2
   da7f0:	2100      	movs	r1, #0
   da7f2:	f001 f9e3 	bl	dbbbc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da7f6:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da7f8:	a909      	add	r1, sp, #36	; 0x24
   da7fa:	4668      	mov	r0, sp
   da7fc:	f7fd fabe 	bl	d7d7c <localtime_r>
    char ascstr[26] = {};
   da800:	2216      	movs	r2, #22
   da802:	4629      	mov	r1, r5
   da804:	a803      	add	r0, sp, #12
   da806:	9502      	str	r5, [sp, #8]
   da808:	f001 f9d8 	bl	dbbbc <memset>
    asctime_r(&calendar_time, ascstr);
   da80c:	a902      	add	r1, sp, #8
   da80e:	a809      	add	r0, sp, #36	; 0x24
   da810:	f001 f962 	bl	dbad8 <asctime_r>
    int len = strlen(ascstr);
   da814:	a802      	add	r0, sp, #8
   da816:	f001 fa44 	bl	dbca2 <strlen>
    ascstr[len-1] = 0; // remove final newline
   da81a:	ab12      	add	r3, sp, #72	; 0x48
   da81c:	4418      	add	r0, r3
    return String(ascstr);
   da81e:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da820:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da824:	4620      	mov	r0, r4
   da826:	f7ff fd46 	bl	da2b6 <_ZN6StringC1EPKc>
}
   da82a:	4620      	mov	r0, r4
   da82c:	b013      	add	sp, #76	; 0x4c
   da82e:	bd30      	pop	{r4, r5, pc}
   da830:	2003e668 	.word	0x2003e668
   da834:	2003e660 	.word	0x2003e660

000da838 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da83c:	b0a5      	sub	sp, #148	; 0x94
   da83e:	4607      	mov	r7, r0
   da840:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da842:	a814      	add	r0, sp, #80	; 0x50
{
   da844:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da846:	223f      	movs	r2, #63	; 0x3f
{
   da848:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da84a:	f001 fa44 	bl	dbcd6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da84e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da850:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da852:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da856:	f001 fa24 	bl	dbca2 <strlen>
   da85a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da85c:	bb5d      	cbnz	r5, da8b6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da85e:	492a      	ldr	r1, [pc, #168]	; (da908 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da860:	a803      	add	r0, sp, #12
   da862:	f001 f9f8 	bl	dbc56 <strcpy>
   da866:	ae14      	add	r6, sp, #80	; 0x50
{
   da868:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da86a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da86e:	45ab      	cmp	fp, r5
   da870:	d936      	bls.n	da8e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da872:	46b1      	mov	r9, r6
   da874:	f105 0a01 	add.w	sl, r5, #1
   da878:	f819 3b01 	ldrb.w	r3, [r9], #1
   da87c:	2b25      	cmp	r3, #37	; 0x25
   da87e:	d117      	bne.n	da8b0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da880:	7873      	ldrb	r3, [r6, #1]
   da882:	2b7a      	cmp	r3, #122	; 0x7a
   da884:	d114      	bne.n	da8b0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da886:	a803      	add	r0, sp, #12
   da888:	f001 fa0b 	bl	dbca2 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da88c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da88e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da890:	1828      	adds	r0, r5, r0
   da892:	4418      	add	r0, r3
   da894:	ebab 0205 	sub.w	r2, fp, r5
   da898:	1cb1      	adds	r1, r6, #2
   da89a:	f001 f967 	bl	dbb6c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da89e:	4622      	mov	r2, r4
   da8a0:	a903      	add	r1, sp, #12
   da8a2:	4630      	mov	r0, r6
   da8a4:	f001 f962 	bl	dbb6c <memcpy>
            len = strlen(format_str);
   da8a8:	a814      	add	r0, sp, #80	; 0x50
   da8aa:	f001 f9fa 	bl	dbca2 <strlen>
   da8ae:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da8b0:	464e      	mov	r6, r9
   da8b2:	4655      	mov	r5, sl
   da8b4:	e7d9      	b.n	da86a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da8b6:	213c      	movs	r1, #60	; 0x3c
   da8b8:	fb95 f3f1 	sdiv	r3, r5, r1
   da8bc:	2b00      	cmp	r3, #0
   da8be:	bfb8      	it	lt
   da8c0:	425b      	neglt	r3, r3
   da8c2:	fbb3 f2f1 	udiv	r2, r3, r1
   da8c6:	fb01 3312 	mls	r3, r1, r2, r3
   da8ca:	9300      	str	r3, [sp, #0]
   da8cc:	4a0f      	ldr	r2, [pc, #60]	; (da90c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da8ce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da8d2:	2110      	movs	r1, #16
   da8d4:	a803      	add	r0, sp, #12
   da8d6:	fb95 f3f3 	sdiv	r3, r5, r3
   da8da:	f7fd fa1f 	bl	d7d1c <snprintf>
   da8de:	e7c2      	b.n	da866 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da8e0:	2100      	movs	r1, #0
   da8e2:	222e      	movs	r2, #46	; 0x2e
   da8e4:	a808      	add	r0, sp, #32
   da8e6:	9107      	str	r1, [sp, #28]
   da8e8:	f001 f968 	bl	dbbbc <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da8ec:	4643      	mov	r3, r8
   da8ee:	aa14      	add	r2, sp, #80	; 0x50
   da8f0:	2132      	movs	r1, #50	; 0x32
   da8f2:	a807      	add	r0, sp, #28
   da8f4:	f7fd fa3a 	bl	d7d6c <strftime>
    return String(buf);
   da8f8:	a907      	add	r1, sp, #28
   da8fa:	4638      	mov	r0, r7
   da8fc:	f7ff fcdb 	bl	da2b6 <_ZN6StringC1EPKc>
}
   da900:	4638      	mov	r0, r7
   da902:	b025      	add	sp, #148	; 0x94
   da904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da908:	000de85a 	.word	0x000de85a
   da90c:	000de85c 	.word	0x000de85c

000da910 <_ZN9TimeClass6formatExPKc>:
{
   da910:	b5f0      	push	{r4, r5, r6, r7, lr}
   da912:	b08d      	sub	sp, #52	; 0x34
   da914:	e9cd 2300 	strd	r2, r3, [sp]
   da918:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da91a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da91c:	b915      	cbnz	r5, da924 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da91e:	4b19      	ldr	r3, [pc, #100]	; (da984 <_ZN9TimeClass6formatExPKc+0x74>)
   da920:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da922:	b12d      	cbz	r5, da930 <_ZN9TimeClass6formatExPKc+0x20>
   da924:	4b18      	ldr	r3, [pc, #96]	; (da988 <_ZN9TimeClass6formatExPKc+0x78>)
   da926:	4628      	mov	r0, r5
   da928:	6819      	ldr	r1, [r3, #0]
   da92a:	f001 f98a 	bl	dbc42 <strcmp>
   da92e:	b938      	cbnz	r0, da940 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da930:	e9dd 2300 	ldrd	r2, r3, [sp]
   da934:	4620      	mov	r0, r4
   da936:	f7ff ff47 	bl	da7c8 <_ZN9TimeClass7timeStrEx>
}
   da93a:	4620      	mov	r0, r4
   da93c:	b00d      	add	sp, #52	; 0x34
   da93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da940:	4e12      	ldr	r6, [pc, #72]	; (da98c <_ZN9TimeClass6formatExPKc+0x7c>)
   da942:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da944:	4f12      	ldr	r7, [pc, #72]	; (da990 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da946:	e9d6 3200 	ldrd	r3, r2, [r6]
   da94a:	185b      	adds	r3, r3, r1
   da94c:	9901      	ldr	r1, [sp, #4]
   da94e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da952:	e9d7 0100 	ldrd	r0, r1, [r7]
   da956:	181b      	adds	r3, r3, r0
   da958:	eb41 0202 	adc.w	r2, r1, r2
   da95c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da960:	2100      	movs	r1, #0
   da962:	2224      	movs	r2, #36	; 0x24
   da964:	a803      	add	r0, sp, #12
   da966:	f001 f929 	bl	dbbbc <memset>
    localtime_r(&t, &calendar_time);
   da96a:	a903      	add	r1, sp, #12
   da96c:	4668      	mov	r0, sp
   da96e:	f7fd fa05 	bl	d7d7c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da972:	6832      	ldr	r2, [r6, #0]
   da974:	683b      	ldr	r3, [r7, #0]
   da976:	a903      	add	r1, sp, #12
   da978:	4413      	add	r3, r2
   da97a:	4620      	mov	r0, r4
   da97c:	462a      	mov	r2, r5
   da97e:	f7ff ff5b 	bl	da838 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da982:	e7da      	b.n	da93a <_ZN9TimeClass6formatExPKc+0x2a>
   da984:	2003e638 	.word	0x2003e638
   da988:	2003e1e8 	.word	0x2003e1e8
   da98c:	2003e668 	.word	0x2003e668
   da990:	2003e660 	.word	0x2003e660

000da994 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da994:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da996:	2000      	movs	r0, #0
   da998:	f7fc feac 	bl	d76f4 <hal_rtc_time_is_valid>
    if (rtcstate)
   da99c:	4604      	mov	r4, r0
   da99e:	b9a0      	cbnz	r0, da9ca <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da9a0:	f7fd f84a 	bl	d7a38 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da9a4:	2801      	cmp	r0, #1
   da9a6:	d110      	bne.n	da9ca <_ZN9TimeClass7isValidEv+0x36>
   da9a8:	4620      	mov	r0, r4
   da9aa:	f7fd f885 	bl	d7ab8 <system_thread_get_state>
   da9ae:	b960      	cbnz	r0, da9ca <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da9b0:	f7ff fe72 	bl	da698 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da9b4:	b910      	cbnz	r0, da9bc <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da9b6:	f7fd f8d1 	bl	d7b5c <spark_process>
        while (_while() && !_condition()) {
   da9ba:	e7f9      	b.n	da9b0 <_ZN9TimeClass7isValidEv+0x1c>
   da9bc:	f7ff fe6c 	bl	da698 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da9c4:	2000      	movs	r0, #0
   da9c6:	f7fc be95 	b.w	d76f4 <hal_rtc_time_is_valid>
}
   da9ca:	4620      	mov	r0, r4
   da9cc:	bd10      	pop	{r4, pc}

000da9ce <_ZN9TimeClass3nowEv>:
{
   da9ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da9d0:	f7ff ffe0 	bl	da994 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da9d4:	2210      	movs	r2, #16
   da9d6:	2100      	movs	r1, #0
   da9d8:	4668      	mov	r0, sp
   da9da:	f001 f8ef 	bl	dbbbc <memset>
    hal_rtc_get_time(&tv, nullptr);
   da9de:	2100      	movs	r1, #0
   da9e0:	4668      	mov	r0, sp
   da9e2:	f7fc fe97 	bl	d7714 <hal_rtc_get_time>
}
   da9e6:	9800      	ldr	r0, [sp, #0]
   da9e8:	b005      	add	sp, #20
   da9ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da9f0 <_ZN9TimeClass4hourEv>:
{
   da9f0:	b508      	push	{r3, lr}
	return hour(now());
   da9f2:	f7ff ffec 	bl	da9ce <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da9f6:	17c1      	asrs	r1, r0, #31
   da9f8:	f7ff fe18 	bl	da62c <_ZL22Refresh_UnixTime_Cachex>
}
   da9fc:	4b01      	ldr	r3, [pc, #4]	; (daa04 <_ZN9TimeClass4hourEv+0x14>)
   da9fe:	6898      	ldr	r0, [r3, #8]
   daa00:	bd08      	pop	{r3, pc}
   daa02:	bf00      	nop
   daa04:	2003e63c 	.word	0x2003e63c

000daa08 <_ZN9TimeClass3dayEv>:
{
   daa08:	b508      	push	{r3, lr}
	return day(now());
   daa0a:	f7ff ffe0 	bl	da9ce <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   daa0e:	17c1      	asrs	r1, r0, #31
   daa10:	f7ff fe0c 	bl	da62c <_ZL22Refresh_UnixTime_Cachex>
}
   daa14:	4b01      	ldr	r3, [pc, #4]	; (daa1c <_ZN9TimeClass3dayEv+0x14>)
   daa16:	68d8      	ldr	r0, [r3, #12]
   daa18:	bd08      	pop	{r3, pc}
   daa1a:	bf00      	nop
   daa1c:	2003e63c 	.word	0x2003e63c

000daa20 <_ZN9TimeClass7weekdayEv>:
{
   daa20:	b508      	push	{r3, lr}
	return weekday(now());
   daa22:	f7ff ffd4 	bl	da9ce <_ZN9TimeClass3nowEv>
}
   daa26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   daa2a:	17c1      	asrs	r1, r0, #31
   daa2c:	f7ff be52 	b.w	da6d4 <_ZN9TimeClass7weekdayEx>

000daa30 <_ZN9TimeClass5monthEv>:
{
   daa30:	b508      	push	{r3, lr}
	return month(now());
   daa32:	f7ff ffcc 	bl	da9ce <_ZN9TimeClass3nowEv>
}
   daa36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   daa3a:	17c1      	asrs	r1, r0, #31
   daa3c:	f7ff be54 	b.w	da6e8 <_ZN9TimeClass5monthEx>

000daa40 <_ZN9TimeClass5localEv>:
{
   daa40:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   daa42:	f7ff ffc4 	bl	da9ce <_ZN9TimeClass3nowEv>
   daa46:	4b03      	ldr	r3, [pc, #12]	; (daa54 <_ZN9TimeClass5localEv+0x14>)
   daa48:	4a03      	ldr	r2, [pc, #12]	; (daa58 <_ZN9TimeClass5localEv+0x18>)
   daa4a:	681b      	ldr	r3, [r3, #0]
   daa4c:	6812      	ldr	r2, [r2, #0]
   daa4e:	4413      	add	r3, r2
}
   daa50:	4418      	add	r0, r3
   daa52:	bd08      	pop	{r3, pc}
   daa54:	2003e668 	.word	0x2003e668
   daa58:	2003e660 	.word	0x2003e660

000daa5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   daa5c:	4b02      	ldr	r3, [pc, #8]	; (daa68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   daa5e:	681a      	ldr	r2, [r3, #0]
   daa60:	4b02      	ldr	r3, [pc, #8]	; (daa6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   daa62:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   daa64:	4770      	bx	lr
   daa66:	bf00      	nop
   daa68:	2003e1e8 	.word	0x2003e1e8
   daa6c:	2003e638 	.word	0x2003e638

000daa70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   daa70:	4770      	bx	lr

000daa72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   daa72:	7441      	strb	r1, [r0, #17]
}
   daa74:	4770      	bx	lr

000daa76 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   daa76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   daa78:	7c00      	ldrb	r0, [r0, #16]
   daa7a:	f7fc ff5b 	bl	d7934 <hal_usart_available_data_for_write>
}
   daa7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daa82:	bd08      	pop	{r3, pc}

000daa84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   daa84:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   daa86:	7c00      	ldrb	r0, [r0, #16]
   daa88:	f7fc ff2c 	bl	d78e4 <hal_usart_available>
}
   daa8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daa90:	bd08      	pop	{r3, pc}

000daa92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   daa92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   daa94:	7c00      	ldrb	r0, [r0, #16]
   daa96:	f7fc ff35 	bl	d7904 <hal_usart_peek>
}
   daa9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   daa9e:	bd08      	pop	{r3, pc}

000daaa0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   daaa0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   daaa2:	7c00      	ldrb	r0, [r0, #16]
   daaa4:	f7fc ff26 	bl	d78f4 <hal_usart_read>
}
   daaa8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   daaac:	bd08      	pop	{r3, pc}

000daaae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   daaae:	7c00      	ldrb	r0, [r0, #16]
   daab0:	f7fc bf30 	b.w	d7914 <hal_usart_flush>

000daab4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   daab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daab6:	7c45      	ldrb	r5, [r0, #17]
{
   daab8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daaba:	b12d      	cbz	r5, daac8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   daabc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   daabe:	b003      	add	sp, #12
   daac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   daac4:	f7fc bf06 	b.w	d78d4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daac8:	7c00      	ldrb	r0, [r0, #16]
   daaca:	9101      	str	r1, [sp, #4]
   daacc:	f7fc ff32 	bl	d7934 <hal_usart_available_data_for_write>
   daad0:	2800      	cmp	r0, #0
   daad2:	9901      	ldr	r1, [sp, #4]
   daad4:	dcf2      	bgt.n	daabc <_ZN11USARTSerial5writeEh+0x8>
}
   daad6:	4628      	mov	r0, r5
   daad8:	b003      	add	sp, #12
   daada:	bd30      	pop	{r4, r5, pc}

000daadc <_ZN11USARTSerialD0Ev>:
   daadc:	b510      	push	{r4, lr}
   daade:	2114      	movs	r1, #20
   daae0:	4604      	mov	r4, r0
   daae2:	f000 fa9a 	bl	db01a <_ZdlPvj>
   daae6:	4620      	mov	r0, r4
   daae8:	bd10      	pop	{r4, pc}
	...

000daaec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   daaec:	b510      	push	{r4, lr}
   daaee:	f04f 0c00 	mov.w	ip, #0
   daaf2:	4604      	mov	r4, r0
   daaf4:	4608      	mov	r0, r1
   daaf6:	4611      	mov	r1, r2
   daaf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   daafc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   dab00:	4a04      	ldr	r2, [pc, #16]	; (dab14 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   dab02:	6022      	str	r2, [r4, #0]
  _blocking = true;
   dab04:	2201      	movs	r2, #1
  _serial = serial;
   dab06:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dab08:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   dab0a:	461a      	mov	r2, r3
   dab0c:	f7fc fed2 	bl	d78b4 <hal_usart_init>
}
   dab10:	4620      	mov	r0, r4
   dab12:	bd10      	pop	{r4, pc}
   dab14:	000de88c 	.word	0x000de88c

000dab18 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   dab18:	7c00      	ldrb	r0, [r0, #16]
   dab1a:	2300      	movs	r3, #0
   dab1c:	f7fc bf12 	b.w	d7944 <hal_usart_begin_config>

000dab20 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   dab20:	2200      	movs	r2, #0
   dab22:	f7ff bff9 	b.w	dab18 <_ZN11USARTSerial5beginEmm>

000dab26 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   dab26:	7c00      	ldrb	r0, [r0, #16]
   dab28:	f7fc becc 	b.w	d78c4 <hal_usart_end>

000dab2c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   dab2c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dab2e:	4c0e      	ldr	r4, [pc, #56]	; (dab68 <_Z22__fetch_global_Serial1v+0x3c>)
   dab30:	7821      	ldrb	r1, [r4, #0]
   dab32:	f3bf 8f5b 	dmb	ish
   dab36:	f011 0101 	ands.w	r1, r1, #1
   dab3a:	d112      	bne.n	dab62 <_Z22__fetch_global_Serial1v+0x36>
   dab3c:	4620      	mov	r0, r4
   dab3e:	9101      	str	r1, [sp, #4]
   dab40:	f7f9 faba 	bl	d40b8 <__cxa_guard_acquire>
   dab44:	9901      	ldr	r1, [sp, #4]
   dab46:	b160      	cbz	r0, dab62 <_Z22__fetch_global_Serial1v+0x36>
   dab48:	4a08      	ldr	r2, [pc, #32]	; (dab6c <_Z22__fetch_global_Serial1v+0x40>)
   dab4a:	4b09      	ldr	r3, [pc, #36]	; (dab70 <_Z22__fetch_global_Serial1v+0x44>)
   dab4c:	4809      	ldr	r0, [pc, #36]	; (dab74 <_Z22__fetch_global_Serial1v+0x48>)
   dab4e:	f7ff ffcd 	bl	daaec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   dab52:	4620      	mov	r0, r4
   dab54:	f7f9 fab5 	bl	d40c2 <__cxa_guard_release>
   dab58:	4a07      	ldr	r2, [pc, #28]	; (dab78 <_Z22__fetch_global_Serial1v+0x4c>)
   dab5a:	4908      	ldr	r1, [pc, #32]	; (dab7c <_Z22__fetch_global_Serial1v+0x50>)
   dab5c:	4805      	ldr	r0, [pc, #20]	; (dab74 <_Z22__fetch_global_Serial1v+0x48>)
   dab5e:	f000 fa57 	bl	db010 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dab62:	4804      	ldr	r0, [pc, #16]	; (dab74 <_Z22__fetch_global_Serial1v+0x48>)
   dab64:	b002      	add	sp, #8
   dab66:	bd10      	pop	{r4, pc}
   dab68:	2003e678 	.word	0x2003e678
   dab6c:	2003e67c 	.word	0x2003e67c
   dab70:	2003e700 	.word	0x2003e700
   dab74:	2003e784 	.word	0x2003e784
   dab78:	2003e3d0 	.word	0x2003e3d0
   dab7c:	000daa71 	.word	0x000daa71

000dab80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dab80:	7441      	strb	r1, [r0, #17]
}
   dab82:	4770      	bx	lr

000dab84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dab84:	4770      	bx	lr

000dab86 <_ZN9USBSerial4readEv>:
{
   dab86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dab88:	2100      	movs	r1, #0
   dab8a:	7c00      	ldrb	r0, [r0, #16]
   dab8c:	f7fc ff0a 	bl	d79a4 <HAL_USB_USART_Receive_Data>
}
   dab90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dab94:	bd08      	pop	{r3, pc}

000dab96 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   dab96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dab98:	2101      	movs	r1, #1
   dab9a:	7c00      	ldrb	r0, [r0, #16]
   dab9c:	f7fc ff02 	bl	d79a4 <HAL_USB_USART_Receive_Data>
}
   daba0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   daba4:	bd08      	pop	{r3, pc}

000daba6 <_ZN9USBSerial17availableForWriteEv>:
{
   daba6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   daba8:	7c00      	ldrb	r0, [r0, #16]
   dabaa:	f7fc fef3 	bl	d7994 <HAL_USB_USART_Available_Data_For_Write>
}
   dabae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dabb2:	bd08      	pop	{r3, pc}

000dabb4 <_ZN9USBSerial9availableEv>:
{
   dabb4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dabb6:	7c00      	ldrb	r0, [r0, #16]
   dabb8:	f7fc fee4 	bl	d7984 <HAL_USB_USART_Available_Data>
}
   dabbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dabc0:	bd08      	pop	{r3, pc}

000dabc2 <_ZN9USBSerial5writeEh>:
{
   dabc2:	b513      	push	{r0, r1, r4, lr}
   dabc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dabc6:	7c00      	ldrb	r0, [r0, #16]
{
   dabc8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dabca:	f7fc fee3 	bl	d7994 <HAL_USB_USART_Available_Data_For_Write>
   dabce:	2800      	cmp	r0, #0
   dabd0:	9901      	ldr	r1, [sp, #4]
   dabd2:	dc01      	bgt.n	dabd8 <_ZN9USBSerial5writeEh+0x16>
   dabd4:	7c60      	ldrb	r0, [r4, #17]
   dabd6:	b120      	cbz	r0, dabe2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dabd8:	7c20      	ldrb	r0, [r4, #16]
   dabda:	f7fc feeb 	bl	d79b4 <HAL_USB_USART_Send_Data>
   dabde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   dabe2:	b002      	add	sp, #8
   dabe4:	bd10      	pop	{r4, pc}

000dabe6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   dabe6:	7c00      	ldrb	r0, [r0, #16]
   dabe8:	f7fc beec 	b.w	d79c4 <HAL_USB_USART_Flush_Data>

000dabec <_ZN9USBSerialD0Ev>:
   dabec:	b510      	push	{r4, lr}
   dabee:	2114      	movs	r1, #20
   dabf0:	4604      	mov	r4, r0
   dabf2:	f000 fa12 	bl	db01a <_ZdlPvj>
   dabf6:	4620      	mov	r0, r4
   dabf8:	bd10      	pop	{r4, pc}
	...

000dabfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dabfc:	b510      	push	{r4, lr}
   dabfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dac02:	4604      	mov	r4, r0
   dac04:	4608      	mov	r0, r1
   dac06:	2100      	movs	r1, #0
   dac08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dac0c:	4b04      	ldr	r3, [pc, #16]	; (dac20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dac0e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   dac10:	2301      	movs	r3, #1
  _serial = serial;
   dac12:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dac14:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   dac16:	4611      	mov	r1, r2
   dac18:	f7fc fe9c 	bl	d7954 <HAL_USB_USART_Init>
}
   dac1c:	4620      	mov	r0, r4
   dac1e:	bd10      	pop	{r4, pc}
   dac20:	000de8bc 	.word	0x000de8bc

000dac24 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dac24:	7c00      	ldrb	r0, [r0, #16]
   dac26:	2200      	movs	r2, #0
   dac28:	f7fc be9c 	b.w	d7964 <HAL_USB_USART_Begin>

000dac2c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   dac2c:	7c00      	ldrb	r0, [r0, #16]
   dac2e:	f7fc bea1 	b.w	d7974 <HAL_USB_USART_End>

000dac32 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dac32:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dac34:	2214      	movs	r2, #20
{
   dac36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dac38:	2100      	movs	r1, #0
   dac3a:	f000 ffbf 	bl	dbbbc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dac3e:	4620      	mov	r0, r4
   dac40:	bd10      	pop	{r4, pc}
	...

000dac44 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dac44:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dac46:	4c10      	ldr	r4, [pc, #64]	; (dac88 <_Z16_fetch_usbserialv+0x44>)
{
   dac48:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dac4a:	a803      	add	r0, sp, #12
   dac4c:	f7ff fff1 	bl	dac32 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dac50:	7821      	ldrb	r1, [r4, #0]
   dac52:	f3bf 8f5b 	dmb	ish
   dac56:	f011 0101 	ands.w	r1, r1, #1
   dac5a:	d111      	bne.n	dac80 <_Z16_fetch_usbserialv+0x3c>
   dac5c:	4620      	mov	r0, r4
   dac5e:	9101      	str	r1, [sp, #4]
   dac60:	f7f9 fa2a 	bl	d40b8 <__cxa_guard_acquire>
   dac64:	9901      	ldr	r1, [sp, #4]
   dac66:	b158      	cbz	r0, dac80 <_Z16_fetch_usbserialv+0x3c>
   dac68:	aa03      	add	r2, sp, #12
   dac6a:	4808      	ldr	r0, [pc, #32]	; (dac8c <_Z16_fetch_usbserialv+0x48>)
   dac6c:	f7ff ffc6 	bl	dabfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dac70:	4620      	mov	r0, r4
   dac72:	f7f9 fa26 	bl	d40c2 <__cxa_guard_release>
   dac76:	4a06      	ldr	r2, [pc, #24]	; (dac90 <_Z16_fetch_usbserialv+0x4c>)
   dac78:	4906      	ldr	r1, [pc, #24]	; (dac94 <_Z16_fetch_usbserialv+0x50>)
   dac7a:	4804      	ldr	r0, [pc, #16]	; (dac8c <_Z16_fetch_usbserialv+0x48>)
   dac7c:	f000 f9c8 	bl	db010 <__aeabi_atexit>
	return _usbserial;
}
   dac80:	4802      	ldr	r0, [pc, #8]	; (dac8c <_Z16_fetch_usbserialv+0x48>)
   dac82:	b008      	add	sp, #32
   dac84:	bd10      	pop	{r4, pc}
   dac86:	bf00      	nop
   dac88:	2003e798 	.word	0x2003e798
   dac8c:	2003e79c 	.word	0x2003e79c
   dac90:	2003e3d0 	.word	0x2003e3d0
   dac94:	000dab85 	.word	0x000dab85

000dac98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   dac98:	4b01      	ldr	r3, [pc, #4]	; (daca0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   dac9a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   dac9c:	4770      	bx	lr
   dac9e:	bf00      	nop
   daca0:	2003e1f8 	.word	0x2003e1f8

000daca4 <serialEventRun>:
{
   daca4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   daca6:	4b0b      	ldr	r3, [pc, #44]	; (dacd4 <serialEventRun+0x30>)
   daca8:	b143      	cbz	r3, dacbc <serialEventRun+0x18>
   dacaa:	f7ff ffcb 	bl	dac44 <_Z16_fetch_usbserialv>
   dacae:	6803      	ldr	r3, [r0, #0]
   dacb0:	691b      	ldr	r3, [r3, #16]
   dacb2:	4798      	blx	r3
   dacb4:	2800      	cmp	r0, #0
   dacb6:	dd01      	ble.n	dacbc <serialEventRun+0x18>
        serialEvent();
   dacb8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   dacbc:	4b06      	ldr	r3, [pc, #24]	; (dacd8 <serialEventRun+0x34>)
   dacbe:	b143      	cbz	r3, dacd2 <serialEventRun+0x2e>
   dacc0:	f7ff ff34 	bl	dab2c <_Z22__fetch_global_Serial1v>
   dacc4:	6803      	ldr	r3, [r0, #0]
   dacc6:	691b      	ldr	r3, [r3, #16]
   dacc8:	4798      	blx	r3
   dacca:	2800      	cmp	r0, #0
   daccc:	dd01      	ble.n	dacd2 <serialEventRun+0x2e>
        serialEvent1();
   dacce:	f3af 8000 	nop.w
}
   dacd2:	bd08      	pop	{r3, pc}
	...

000dacdc <_post_loop>:
{
   dacdc:	b508      	push	{r3, lr}
	serialEventRun();
   dacde:	f7ff ffe1 	bl	daca4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dace2:	f7fc fcff 	bl	d76e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dace6:	4b01      	ldr	r3, [pc, #4]	; (dacec <_post_loop+0x10>)
   dace8:	6018      	str	r0, [r3, #0]
}
   dacea:	bd08      	pop	{r3, pc}
   dacec:	2003e7c4 	.word	0x2003e7c4

000dacf0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dacf0:	4802      	ldr	r0, [pc, #8]	; (dacfc <_Z33system_initialize_user_backup_ramv+0xc>)
   dacf2:	4a03      	ldr	r2, [pc, #12]	; (dad00 <_Z33system_initialize_user_backup_ramv+0x10>)
   dacf4:	4903      	ldr	r1, [pc, #12]	; (dad04 <_Z33system_initialize_user_backup_ramv+0x14>)
   dacf6:	1a12      	subs	r2, r2, r0
   dacf8:	f000 bf38 	b.w	dbb6c <memcpy>
   dacfc:	2003f400 	.word	0x2003f400
   dad00:	2003fc04 	.word	0x2003fc04
   dad04:	000debf0 	.word	0x000debf0

000dad08 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dad08:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dad0a:	2300      	movs	r3, #0
   dad0c:	9300      	str	r3, [sp, #0]
   dad0e:	461a      	mov	r2, r3
   dad10:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dad14:	f7fc feea 	bl	d7aec <system_ctrl_set_result>
}
   dad18:	b003      	add	sp, #12
   dad1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dad20 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   dad20:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dad22:	8843      	ldrh	r3, [r0, #2]
   dad24:	2b0a      	cmp	r3, #10
   dad26:	d008      	beq.n	dad3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dad28:	2b50      	cmp	r3, #80	; 0x50
   dad2a:	d10b      	bne.n	dad44 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   dad2c:	4b09      	ldr	r3, [pc, #36]	; (dad54 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dad2e:	681b      	ldr	r3, [r3, #0]
   dad30:	b14b      	cbz	r3, dad46 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   dad32:	b003      	add	sp, #12
   dad34:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   dad38:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   dad3a:	f7ff ffe5 	bl	dad08 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   dad3e:	b003      	add	sp, #12
   dad40:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dad44:	2300      	movs	r3, #0
   dad46:	9300      	str	r3, [sp, #0]
   dad48:	461a      	mov	r2, r3
   dad4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dad4e:	f7fc fecd 	bl	d7aec <system_ctrl_set_result>
}
   dad52:	e7f4      	b.n	dad3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   dad54:	2003e7b4 	.word	0x2003e7b4

000dad58 <module_user_init_hook>:
{
   dad58:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dad5a:	4c12      	ldr	r4, [pc, #72]	; (dada4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dad5c:	4812      	ldr	r0, [pc, #72]	; (dada8 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dad5e:	4d13      	ldr	r5, [pc, #76]	; (dadac <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dad60:	2100      	movs	r1, #0
   dad62:	f7fc fffb 	bl	d7d5c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dad66:	6823      	ldr	r3, [r4, #0]
   dad68:	42ab      	cmp	r3, r5
   dad6a:	4b11      	ldr	r3, [pc, #68]	; (dadb0 <module_user_init_hook+0x58>)
   dad6c:	bf0c      	ite	eq
   dad6e:	2201      	moveq	r2, #1
   dad70:	2200      	movne	r2, #0
   dad72:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dad74:	d002      	beq.n	dad7c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   dad76:	f7ff ffbb 	bl	dacf0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   dad7a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dad7c:	f7fc fc9a 	bl	d76b4 <HAL_RNG_GetRandomNumber>
   dad80:	4604      	mov	r4, r0
    srand(seed);
   dad82:	f000 ff23 	bl	dbbcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dad86:	4b0b      	ldr	r3, [pc, #44]	; (dadb4 <module_user_init_hook+0x5c>)
   dad88:	b113      	cbz	r3, dad90 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   dad8a:	4620      	mov	r0, r4
   dad8c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dad90:	2100      	movs	r1, #0
   dad92:	4808      	ldr	r0, [pc, #32]	; (dadb4 <module_user_init_hook+0x5c>)
   dad94:	f7fc ff32 	bl	d7bfc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   dad98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dad9c:	4806      	ldr	r0, [pc, #24]	; (dadb8 <module_user_init_hook+0x60>)
   dad9e:	2100      	movs	r1, #0
   dada0:	f7fc be9a 	b.w	d7ad8 <system_ctrl_set_app_request_handler>
   dada4:	2003fc00 	.word	0x2003fc00
   dada8:	000dac99 	.word	0x000dac99
   dadac:	9a271c1e 	.word	0x9a271c1e
   dadb0:	2003e7b0 	.word	0x2003e7b0
   dadb4:	00000000 	.word	0x00000000
   dadb8:	000dad21 	.word	0x000dad21

000dadbc <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   dadbc:	b508      	push	{r3, lr}
   dadbe:	4b02      	ldr	r3, [pc, #8]	; (dadc8 <spark_protocol_instance+0xc>)
   dadc0:	681b      	ldr	r3, [r3, #0]
   dadc2:	681b      	ldr	r3, [r3, #0]
   dadc4:	9301      	str	r3, [sp, #4]
   dadc6:	bd08      	pop	{r3, pc}
   dadc8:	0003025c 	.word	0x0003025c

000dadcc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   dadcc:	b508      	push	{r3, lr}
   dadce:	4b02      	ldr	r3, [pc, #8]	; (dadd8 <spark_protocol_set_product_id+0xc>)
   dadd0:	681b      	ldr	r3, [r3, #0]
   dadd2:	685b      	ldr	r3, [r3, #4]
   dadd4:	9301      	str	r3, [sp, #4]
   dadd6:	bd08      	pop	{r3, pc}
   dadd8:	0003025c 	.word	0x0003025c

000daddc <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   daddc:	b508      	push	{r3, lr}
   dadde:	4b02      	ldr	r3, [pc, #8]	; (dade8 <spark_protocol_set_product_firmware_version+0xc>)
   dade0:	681b      	ldr	r3, [r3, #0]
   dade2:	689b      	ldr	r3, [r3, #8]
   dade4:	9301      	str	r3, [sp, #4]
   dade6:	bd08      	pop	{r3, pc}
   dade8:	0003025c 	.word	0x0003025c

000dadec <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   dadec:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   dadee:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   dadf0:	d902      	bls.n	dadf8 <pinAvailable+0xc>
    return false;
   dadf2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   dadf4:	b002      	add	sp, #8
   dadf6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   dadf8:	f1a0 030b 	sub.w	r3, r0, #11
   dadfc:	2b02      	cmp	r3, #2
   dadfe:	d81a      	bhi.n	dae36 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dae00:	4c17      	ldr	r4, [pc, #92]	; (dae60 <pinAvailable+0x74>)
   dae02:	7821      	ldrb	r1, [r4, #0]
   dae04:	f3bf 8f5b 	dmb	ish
   dae08:	f011 0101 	ands.w	r1, r1, #1
   dae0c:	d10b      	bne.n	dae26 <pinAvailable+0x3a>
   dae0e:	4620      	mov	r0, r4
   dae10:	9101      	str	r1, [sp, #4]
   dae12:	f7f9 f951 	bl	d40b8 <__cxa_guard_acquire>
   dae16:	9901      	ldr	r1, [sp, #4]
   dae18:	b128      	cbz	r0, dae26 <pinAvailable+0x3a>
   dae1a:	4812      	ldr	r0, [pc, #72]	; (dae64 <pinAvailable+0x78>)
   dae1c:	f7ff f9f6 	bl	da20c <_ZN8SPIClassC1E19hal_spi_interface_t>
   dae20:	4620      	mov	r0, r4
   dae22:	f7f9 f94e 	bl	d40c2 <__cxa_guard_release>
   dae26:	4b0f      	ldr	r3, [pc, #60]	; (dae64 <pinAvailable+0x78>)
   dae28:	7818      	ldrb	r0, [r3, #0]
   dae2a:	f7fc fd3b 	bl	d78a4 <hal_spi_is_enabled>
   dae2e:	2800      	cmp	r0, #0
   dae30:	d1df      	bne.n	dadf2 <pinAvailable+0x6>
  return true; // 'pin' is available
   dae32:	2001      	movs	r0, #1
   dae34:	e7de      	b.n	dadf4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   dae36:	2801      	cmp	r0, #1
   dae38:	d809      	bhi.n	dae4e <pinAvailable+0x62>
   dae3a:	f000 f899 	bl	daf70 <_Z19__fetch_global_Wirev>
   dae3e:	2100      	movs	r1, #0
   dae40:	7c00      	ldrb	r0, [r0, #16]
   dae42:	f7fc fce7 	bl	d7814 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   dae46:	f080 0001 	eor.w	r0, r0, #1
   dae4a:	b2c0      	uxtb	r0, r0
   dae4c:	e7d2      	b.n	dadf4 <pinAvailable+0x8>
   dae4e:	3809      	subs	r0, #9
   dae50:	2801      	cmp	r0, #1
   dae52:	d8ee      	bhi.n	dae32 <pinAvailable+0x46>
   dae54:	f7ff fe6a 	bl	dab2c <_Z22__fetch_global_Serial1v>
   dae58:	7c00      	ldrb	r0, [r0, #16]
   dae5a:	f7fc fd63 	bl	d7924 <hal_usart_is_enabled>
   dae5e:	e7f2      	b.n	dae46 <pinAvailable+0x5a>
   dae60:	2003e7b8 	.word	0x2003e7b8
   dae64:	2003e7bc 	.word	0x2003e7bc

000dae68 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dae68:	2823      	cmp	r0, #35	; 0x23
{
   dae6a:	b538      	push	{r3, r4, r5, lr}
   dae6c:	4604      	mov	r4, r0
   dae6e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dae70:	d80a      	bhi.n	dae88 <pinMode+0x20>
   dae72:	29ff      	cmp	r1, #255	; 0xff
   dae74:	d008      	beq.n	dae88 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   dae76:	f7ff ffb9 	bl	dadec <pinAvailable>
   dae7a:	b128      	cbz	r0, dae88 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   dae7c:	4629      	mov	r1, r5
   dae7e:	4620      	mov	r0, r4
}
   dae80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   dae84:	f7fc bc5e 	b.w	d7744 <HAL_Pin_Mode>
}
   dae88:	bd38      	pop	{r3, r4, r5, pc}

000dae8a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dae8a:	b538      	push	{r3, r4, r5, lr}
   dae8c:	4604      	mov	r4, r0
   dae8e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dae90:	f7fc fc60 	bl	d7754 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dae94:	28ff      	cmp	r0, #255	; 0xff
   dae96:	d010      	beq.n	daeba <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   dae98:	2806      	cmp	r0, #6
   dae9a:	d804      	bhi.n	daea6 <digitalWrite+0x1c>
   dae9c:	234d      	movs	r3, #77	; 0x4d
   dae9e:	fa23 f000 	lsr.w	r0, r3, r0
   daea2:	07c3      	lsls	r3, r0, #31
   daea4:	d409      	bmi.n	daeba <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   daea6:	4620      	mov	r0, r4
   daea8:	f7ff ffa0 	bl	dadec <pinAvailable>
   daeac:	b128      	cbz	r0, daeba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   daeae:	4629      	mov	r1, r5
   daeb0:	4620      	mov	r0, r4
}
   daeb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   daeb6:	f7fc bc55 	b.w	d7764 <HAL_GPIO_Write>
}
   daeba:	bd38      	pop	{r3, r4, r5, pc}

000daebc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   daebc:	b510      	push	{r4, lr}
   daebe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   daec0:	f7fc fc48 	bl	d7754 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   daec4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   daec6:	b2db      	uxtb	r3, r3
   daec8:	2b01      	cmp	r3, #1
   daeca:	d908      	bls.n	daede <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   daecc:	4620      	mov	r0, r4
   daece:	f7ff ff8d 	bl	dadec <pinAvailable>
   daed2:	b120      	cbz	r0, daede <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   daed4:	4620      	mov	r0, r4
}
   daed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   daeda:	f7fc bc4b 	b.w	d7774 <HAL_GPIO_Read>
}
   daede:	2000      	movs	r0, #0
   daee0:	bd10      	pop	{r4, pc}

000daee2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   daee2:	280d      	cmp	r0, #13
{
   daee4:	b510      	push	{r4, lr}
   daee6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   daee8:	bf9c      	itt	ls
   daeea:	340e      	addls	r4, #14
   daeec:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   daeee:	4620      	mov	r0, r4
   daef0:	f7ff ff7c 	bl	dadec <pinAvailable>
   daef4:	b150      	cbz	r0, daf0c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   daef6:	2103      	movs	r1, #3
   daef8:	4620      	mov	r0, r4
   daefa:	f7fc fc1b 	bl	d7734 <HAL_Validate_Pin_Function>
   daefe:	2803      	cmp	r0, #3
   daf00:	d104      	bne.n	daf0c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   daf02:	4620      	mov	r0, r4
}
   daf04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   daf08:	f7fc bc3c 	b.w	d7784 <hal_adc_read>
}
   daf0c:	2000      	movs	r0, #0
   daf0e:	bd10      	pop	{r4, pc}

000daf10 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   daf10:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   daf12:	2300      	movs	r3, #0
   daf14:	2520      	movs	r5, #32
   daf16:	8043      	strh	r3, [r0, #2]
   daf18:	2314      	movs	r3, #20
{
   daf1a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   daf1c:	8003      	strh	r3, [r0, #0]
   daf1e:	6085      	str	r5, [r0, #8]
   daf20:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daf22:	4906      	ldr	r1, [pc, #24]	; (daf3c <_Z17acquireWireBufferv+0x2c>)
   daf24:	4628      	mov	r0, r5
   daf26:	f000 f87c 	bl	db022 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daf2a:	4904      	ldr	r1, [pc, #16]	; (daf3c <_Z17acquireWireBufferv+0x2c>)
	};
   daf2c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daf2e:	4628      	mov	r0, r5
   daf30:	f000 f877 	bl	db022 <_ZnajRKSt9nothrow_t>
	};
   daf34:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   daf36:	4620      	mov	r0, r4
   daf38:	bd38      	pop	{r3, r4, r5, pc}
   daf3a:	bf00      	nop
   daf3c:	000de8e4 	.word	0x000de8e4

000daf40 <_Z18acquireWire1Bufferv>:
   daf40:	b538      	push	{r3, r4, r5, lr}
   daf42:	2300      	movs	r3, #0
   daf44:	2520      	movs	r5, #32
   daf46:	8043      	strh	r3, [r0, #2]
   daf48:	2314      	movs	r3, #20
   daf4a:	4604      	mov	r4, r0
   daf4c:	8003      	strh	r3, [r0, #0]
   daf4e:	6085      	str	r5, [r0, #8]
   daf50:	6105      	str	r5, [r0, #16]
   daf52:	4906      	ldr	r1, [pc, #24]	; (daf6c <_Z18acquireWire1Bufferv+0x2c>)
   daf54:	4628      	mov	r0, r5
   daf56:	f000 f864 	bl	db022 <_ZnajRKSt9nothrow_t>
   daf5a:	4904      	ldr	r1, [pc, #16]	; (daf6c <_Z18acquireWire1Bufferv+0x2c>)
   daf5c:	6060      	str	r0, [r4, #4]
   daf5e:	4628      	mov	r0, r5
   daf60:	f000 f85f 	bl	db022 <_ZnajRKSt9nothrow_t>
   daf64:	60e0      	str	r0, [r4, #12]
   daf66:	4620      	mov	r0, r4
   daf68:	bd38      	pop	{r3, r4, r5, pc}
   daf6a:	bf00      	nop
   daf6c:	000de8e4 	.word	0x000de8e4

000daf70 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   daf70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daf72:	4d0f      	ldr	r5, [pc, #60]	; (dafb0 <_Z19__fetch_global_Wirev+0x40>)
   daf74:	7829      	ldrb	r1, [r5, #0]
   daf76:	f3bf 8f5b 	dmb	ish
   daf7a:	f011 0401 	ands.w	r4, r1, #1
{
   daf7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daf80:	d113      	bne.n	dafaa <_Z19__fetch_global_Wirev+0x3a>
   daf82:	4628      	mov	r0, r5
   daf84:	f7f9 f898 	bl	d40b8 <__cxa_guard_acquire>
   daf88:	b178      	cbz	r0, dafaa <_Z19__fetch_global_Wirev+0x3a>
   daf8a:	a801      	add	r0, sp, #4
   daf8c:	f7ff ffc0 	bl	daf10 <_Z17acquireWireBufferv>
   daf90:	aa01      	add	r2, sp, #4
   daf92:	4621      	mov	r1, r4
   daf94:	4807      	ldr	r0, [pc, #28]	; (dafb4 <_Z19__fetch_global_Wirev+0x44>)
   daf96:	f7fd fcad 	bl	d88f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   daf9a:	4628      	mov	r0, r5
   daf9c:	f7f9 f891 	bl	d40c2 <__cxa_guard_release>
   dafa0:	4a05      	ldr	r2, [pc, #20]	; (dafb8 <_Z19__fetch_global_Wirev+0x48>)
   dafa2:	4906      	ldr	r1, [pc, #24]	; (dafbc <_Z19__fetch_global_Wirev+0x4c>)
   dafa4:	4803      	ldr	r0, [pc, #12]	; (dafb4 <_Z19__fetch_global_Wirev+0x44>)
   dafa6:	f000 f833 	bl	db010 <__aeabi_atexit>
	return wire;
}
   dafaa:	4802      	ldr	r0, [pc, #8]	; (dafb4 <_Z19__fetch_global_Wirev+0x44>)
   dafac:	b007      	add	sp, #28
   dafae:	bd30      	pop	{r4, r5, pc}
   dafb0:	2003e7c8 	.word	0x2003e7c8
   dafb4:	2003e7d0 	.word	0x2003e7d0
   dafb8:	2003e3d0 	.word	0x2003e3d0
   dafbc:	000d889d 	.word	0x000d889d

000dafc0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dafc0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dafc2:	4c0f      	ldr	r4, [pc, #60]	; (db000 <_Z20__fetch_global_Wire1v+0x40>)
   dafc4:	7823      	ldrb	r3, [r4, #0]
   dafc6:	f3bf 8f5b 	dmb	ish
   dafca:	07db      	lsls	r3, r3, #31
{
   dafcc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dafce:	d413      	bmi.n	daff8 <_Z20__fetch_global_Wire1v+0x38>
   dafd0:	4620      	mov	r0, r4
   dafd2:	f7f9 f871 	bl	d40b8 <__cxa_guard_acquire>
   dafd6:	b178      	cbz	r0, daff8 <_Z20__fetch_global_Wire1v+0x38>
   dafd8:	a801      	add	r0, sp, #4
   dafda:	f7ff ffb1 	bl	daf40 <_Z18acquireWire1Bufferv>
   dafde:	aa01      	add	r2, sp, #4
   dafe0:	2101      	movs	r1, #1
   dafe2:	4808      	ldr	r0, [pc, #32]	; (db004 <_Z20__fetch_global_Wire1v+0x44>)
   dafe4:	f7fd fc86 	bl	d88f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dafe8:	4620      	mov	r0, r4
   dafea:	f7f9 f86a 	bl	d40c2 <__cxa_guard_release>
   dafee:	4a06      	ldr	r2, [pc, #24]	; (db008 <_Z20__fetch_global_Wire1v+0x48>)
   daff0:	4906      	ldr	r1, [pc, #24]	; (db00c <_Z20__fetch_global_Wire1v+0x4c>)
   daff2:	4804      	ldr	r0, [pc, #16]	; (db004 <_Z20__fetch_global_Wire1v+0x44>)
   daff4:	f000 f80c 	bl	db010 <__aeabi_atexit>
	return wire;
}
   daff8:	4802      	ldr	r0, [pc, #8]	; (db004 <_Z20__fetch_global_Wire1v+0x44>)
   daffa:	b006      	add	sp, #24
   daffc:	bd10      	pop	{r4, pc}
   daffe:	bf00      	nop
   db000:	2003e7cc 	.word	0x2003e7cc
   db004:	2003e7e4 	.word	0x2003e7e4
   db008:	2003e3d0 	.word	0x2003e3d0
   db00c:	000d889d 	.word	0x000d889d

000db010 <__aeabi_atexit>:
   db010:	460b      	mov	r3, r1
   db012:	4601      	mov	r1, r0
   db014:	4618      	mov	r0, r3
   db016:	f000 bd89 	b.w	dbb2c <__cxa_atexit>

000db01a <_ZdlPvj>:
   db01a:	f7f9 b840 	b.w	d409e <_ZdlPv>

000db01e <_ZnwjRKSt9nothrow_t>:
   db01e:	f7f9 b83a 	b.w	d4096 <_Znwj>

000db022 <_ZnajRKSt9nothrow_t>:
   db022:	f7f9 b83a 	b.w	d409a <_Znaj>

000db026 <_ZSt25__throw_bad_function_callv>:
   db026:	b508      	push	{r3, lr}
   db028:	f7fc fe88 	bl	d7d3c <abort>

000db02c <__aeabi_drsub>:
   db02c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db030:	e002      	b.n	db038 <__adddf3>
   db032:	bf00      	nop

000db034 <__aeabi_dsub>:
   db034:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db038 <__adddf3>:
   db038:	b530      	push	{r4, r5, lr}
   db03a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db03e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db042:	ea94 0f05 	teq	r4, r5
   db046:	bf08      	it	eq
   db048:	ea90 0f02 	teqeq	r0, r2
   db04c:	bf1f      	itttt	ne
   db04e:	ea54 0c00 	orrsne.w	ip, r4, r0
   db052:	ea55 0c02 	orrsne.w	ip, r5, r2
   db056:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db05a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db05e:	f000 80e2 	beq.w	db226 <__adddf3+0x1ee>
   db062:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db066:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db06a:	bfb8      	it	lt
   db06c:	426d      	neglt	r5, r5
   db06e:	dd0c      	ble.n	db08a <__adddf3+0x52>
   db070:	442c      	add	r4, r5
   db072:	ea80 0202 	eor.w	r2, r0, r2
   db076:	ea81 0303 	eor.w	r3, r1, r3
   db07a:	ea82 0000 	eor.w	r0, r2, r0
   db07e:	ea83 0101 	eor.w	r1, r3, r1
   db082:	ea80 0202 	eor.w	r2, r0, r2
   db086:	ea81 0303 	eor.w	r3, r1, r3
   db08a:	2d36      	cmp	r5, #54	; 0x36
   db08c:	bf88      	it	hi
   db08e:	bd30      	pophi	{r4, r5, pc}
   db090:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db094:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db098:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db09c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db0a0:	d002      	beq.n	db0a8 <__adddf3+0x70>
   db0a2:	4240      	negs	r0, r0
   db0a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db0a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db0ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db0b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db0b4:	d002      	beq.n	db0bc <__adddf3+0x84>
   db0b6:	4252      	negs	r2, r2
   db0b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db0bc:	ea94 0f05 	teq	r4, r5
   db0c0:	f000 80a7 	beq.w	db212 <__adddf3+0x1da>
   db0c4:	f1a4 0401 	sub.w	r4, r4, #1
   db0c8:	f1d5 0e20 	rsbs	lr, r5, #32
   db0cc:	db0d      	blt.n	db0ea <__adddf3+0xb2>
   db0ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   db0d2:	fa22 f205 	lsr.w	r2, r2, r5
   db0d6:	1880      	adds	r0, r0, r2
   db0d8:	f141 0100 	adc.w	r1, r1, #0
   db0dc:	fa03 f20e 	lsl.w	r2, r3, lr
   db0e0:	1880      	adds	r0, r0, r2
   db0e2:	fa43 f305 	asr.w	r3, r3, r5
   db0e6:	4159      	adcs	r1, r3
   db0e8:	e00e      	b.n	db108 <__adddf3+0xd0>
   db0ea:	f1a5 0520 	sub.w	r5, r5, #32
   db0ee:	f10e 0e20 	add.w	lr, lr, #32
   db0f2:	2a01      	cmp	r2, #1
   db0f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   db0f8:	bf28      	it	cs
   db0fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   db0fe:	fa43 f305 	asr.w	r3, r3, r5
   db102:	18c0      	adds	r0, r0, r3
   db104:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db108:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db10c:	d507      	bpl.n	db11e <__adddf3+0xe6>
   db10e:	f04f 0e00 	mov.w	lr, #0
   db112:	f1dc 0c00 	rsbs	ip, ip, #0
   db116:	eb7e 0000 	sbcs.w	r0, lr, r0
   db11a:	eb6e 0101 	sbc.w	r1, lr, r1
   db11e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db122:	d31b      	bcc.n	db15c <__adddf3+0x124>
   db124:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db128:	d30c      	bcc.n	db144 <__adddf3+0x10c>
   db12a:	0849      	lsrs	r1, r1, #1
   db12c:	ea5f 0030 	movs.w	r0, r0, rrx
   db130:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db134:	f104 0401 	add.w	r4, r4, #1
   db138:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db13c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db140:	f080 809a 	bcs.w	db278 <__adddf3+0x240>
   db144:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db148:	bf08      	it	eq
   db14a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db14e:	f150 0000 	adcs.w	r0, r0, #0
   db152:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db156:	ea41 0105 	orr.w	r1, r1, r5
   db15a:	bd30      	pop	{r4, r5, pc}
   db15c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db160:	4140      	adcs	r0, r0
   db162:	eb41 0101 	adc.w	r1, r1, r1
   db166:	3c01      	subs	r4, #1
   db168:	bf28      	it	cs
   db16a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db16e:	d2e9      	bcs.n	db144 <__adddf3+0x10c>
   db170:	f091 0f00 	teq	r1, #0
   db174:	bf04      	itt	eq
   db176:	4601      	moveq	r1, r0
   db178:	2000      	moveq	r0, #0
   db17a:	fab1 f381 	clz	r3, r1
   db17e:	bf08      	it	eq
   db180:	3320      	addeq	r3, #32
   db182:	f1a3 030b 	sub.w	r3, r3, #11
   db186:	f1b3 0220 	subs.w	r2, r3, #32
   db18a:	da0c      	bge.n	db1a6 <__adddf3+0x16e>
   db18c:	320c      	adds	r2, #12
   db18e:	dd08      	ble.n	db1a2 <__adddf3+0x16a>
   db190:	f102 0c14 	add.w	ip, r2, #20
   db194:	f1c2 020c 	rsb	r2, r2, #12
   db198:	fa01 f00c 	lsl.w	r0, r1, ip
   db19c:	fa21 f102 	lsr.w	r1, r1, r2
   db1a0:	e00c      	b.n	db1bc <__adddf3+0x184>
   db1a2:	f102 0214 	add.w	r2, r2, #20
   db1a6:	bfd8      	it	le
   db1a8:	f1c2 0c20 	rsble	ip, r2, #32
   db1ac:	fa01 f102 	lsl.w	r1, r1, r2
   db1b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   db1b4:	bfdc      	itt	le
   db1b6:	ea41 010c 	orrle.w	r1, r1, ip
   db1ba:	4090      	lslle	r0, r2
   db1bc:	1ae4      	subs	r4, r4, r3
   db1be:	bfa2      	ittt	ge
   db1c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db1c4:	4329      	orrge	r1, r5
   db1c6:	bd30      	popge	{r4, r5, pc}
   db1c8:	ea6f 0404 	mvn.w	r4, r4
   db1cc:	3c1f      	subs	r4, #31
   db1ce:	da1c      	bge.n	db20a <__adddf3+0x1d2>
   db1d0:	340c      	adds	r4, #12
   db1d2:	dc0e      	bgt.n	db1f2 <__adddf3+0x1ba>
   db1d4:	f104 0414 	add.w	r4, r4, #20
   db1d8:	f1c4 0220 	rsb	r2, r4, #32
   db1dc:	fa20 f004 	lsr.w	r0, r0, r4
   db1e0:	fa01 f302 	lsl.w	r3, r1, r2
   db1e4:	ea40 0003 	orr.w	r0, r0, r3
   db1e8:	fa21 f304 	lsr.w	r3, r1, r4
   db1ec:	ea45 0103 	orr.w	r1, r5, r3
   db1f0:	bd30      	pop	{r4, r5, pc}
   db1f2:	f1c4 040c 	rsb	r4, r4, #12
   db1f6:	f1c4 0220 	rsb	r2, r4, #32
   db1fa:	fa20 f002 	lsr.w	r0, r0, r2
   db1fe:	fa01 f304 	lsl.w	r3, r1, r4
   db202:	ea40 0003 	orr.w	r0, r0, r3
   db206:	4629      	mov	r1, r5
   db208:	bd30      	pop	{r4, r5, pc}
   db20a:	fa21 f004 	lsr.w	r0, r1, r4
   db20e:	4629      	mov	r1, r5
   db210:	bd30      	pop	{r4, r5, pc}
   db212:	f094 0f00 	teq	r4, #0
   db216:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db21a:	bf06      	itte	eq
   db21c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db220:	3401      	addeq	r4, #1
   db222:	3d01      	subne	r5, #1
   db224:	e74e      	b.n	db0c4 <__adddf3+0x8c>
   db226:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db22a:	bf18      	it	ne
   db22c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db230:	d029      	beq.n	db286 <__adddf3+0x24e>
   db232:	ea94 0f05 	teq	r4, r5
   db236:	bf08      	it	eq
   db238:	ea90 0f02 	teqeq	r0, r2
   db23c:	d005      	beq.n	db24a <__adddf3+0x212>
   db23e:	ea54 0c00 	orrs.w	ip, r4, r0
   db242:	bf04      	itt	eq
   db244:	4619      	moveq	r1, r3
   db246:	4610      	moveq	r0, r2
   db248:	bd30      	pop	{r4, r5, pc}
   db24a:	ea91 0f03 	teq	r1, r3
   db24e:	bf1e      	ittt	ne
   db250:	2100      	movne	r1, #0
   db252:	2000      	movne	r0, #0
   db254:	bd30      	popne	{r4, r5, pc}
   db256:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db25a:	d105      	bne.n	db268 <__adddf3+0x230>
   db25c:	0040      	lsls	r0, r0, #1
   db25e:	4149      	adcs	r1, r1
   db260:	bf28      	it	cs
   db262:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db266:	bd30      	pop	{r4, r5, pc}
   db268:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db26c:	bf3c      	itt	cc
   db26e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db272:	bd30      	popcc	{r4, r5, pc}
   db274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db278:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db27c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db280:	f04f 0000 	mov.w	r0, #0
   db284:	bd30      	pop	{r4, r5, pc}
   db286:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db28a:	bf1a      	itte	ne
   db28c:	4619      	movne	r1, r3
   db28e:	4610      	movne	r0, r2
   db290:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db294:	bf1c      	itt	ne
   db296:	460b      	movne	r3, r1
   db298:	4602      	movne	r2, r0
   db29a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db29e:	bf06      	itte	eq
   db2a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db2a4:	ea91 0f03 	teqeq	r1, r3
   db2a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db2ac:	bd30      	pop	{r4, r5, pc}
   db2ae:	bf00      	nop

000db2b0 <__aeabi_ui2d>:
   db2b0:	f090 0f00 	teq	r0, #0
   db2b4:	bf04      	itt	eq
   db2b6:	2100      	moveq	r1, #0
   db2b8:	4770      	bxeq	lr
   db2ba:	b530      	push	{r4, r5, lr}
   db2bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db2c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db2c4:	f04f 0500 	mov.w	r5, #0
   db2c8:	f04f 0100 	mov.w	r1, #0
   db2cc:	e750      	b.n	db170 <__adddf3+0x138>
   db2ce:	bf00      	nop

000db2d0 <__aeabi_i2d>:
   db2d0:	f090 0f00 	teq	r0, #0
   db2d4:	bf04      	itt	eq
   db2d6:	2100      	moveq	r1, #0
   db2d8:	4770      	bxeq	lr
   db2da:	b530      	push	{r4, r5, lr}
   db2dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db2e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db2e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db2e8:	bf48      	it	mi
   db2ea:	4240      	negmi	r0, r0
   db2ec:	f04f 0100 	mov.w	r1, #0
   db2f0:	e73e      	b.n	db170 <__adddf3+0x138>
   db2f2:	bf00      	nop

000db2f4 <__aeabi_f2d>:
   db2f4:	0042      	lsls	r2, r0, #1
   db2f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db2fa:	ea4f 0131 	mov.w	r1, r1, rrx
   db2fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db302:	bf1f      	itttt	ne
   db304:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db308:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db30c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db310:	4770      	bxne	lr
   db312:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db316:	bf08      	it	eq
   db318:	4770      	bxeq	lr
   db31a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db31e:	bf04      	itt	eq
   db320:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db324:	4770      	bxeq	lr
   db326:	b530      	push	{r4, r5, lr}
   db328:	f44f 7460 	mov.w	r4, #896	; 0x380
   db32c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db334:	e71c      	b.n	db170 <__adddf3+0x138>
   db336:	bf00      	nop

000db338 <__aeabi_ul2d>:
   db338:	ea50 0201 	orrs.w	r2, r0, r1
   db33c:	bf08      	it	eq
   db33e:	4770      	bxeq	lr
   db340:	b530      	push	{r4, r5, lr}
   db342:	f04f 0500 	mov.w	r5, #0
   db346:	e00a      	b.n	db35e <__aeabi_l2d+0x16>

000db348 <__aeabi_l2d>:
   db348:	ea50 0201 	orrs.w	r2, r0, r1
   db34c:	bf08      	it	eq
   db34e:	4770      	bxeq	lr
   db350:	b530      	push	{r4, r5, lr}
   db352:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db356:	d502      	bpl.n	db35e <__aeabi_l2d+0x16>
   db358:	4240      	negs	r0, r0
   db35a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db35e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db362:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db366:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db36a:	f43f aed8 	beq.w	db11e <__adddf3+0xe6>
   db36e:	f04f 0203 	mov.w	r2, #3
   db372:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db376:	bf18      	it	ne
   db378:	3203      	addne	r2, #3
   db37a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db37e:	bf18      	it	ne
   db380:	3203      	addne	r2, #3
   db382:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db386:	f1c2 0320 	rsb	r3, r2, #32
   db38a:	fa00 fc03 	lsl.w	ip, r0, r3
   db38e:	fa20 f002 	lsr.w	r0, r0, r2
   db392:	fa01 fe03 	lsl.w	lr, r1, r3
   db396:	ea40 000e 	orr.w	r0, r0, lr
   db39a:	fa21 f102 	lsr.w	r1, r1, r2
   db39e:	4414      	add	r4, r2
   db3a0:	e6bd      	b.n	db11e <__adddf3+0xe6>
   db3a2:	bf00      	nop

000db3a4 <__aeabi_dmul>:
   db3a4:	b570      	push	{r4, r5, r6, lr}
   db3a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db3aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db3ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db3b2:	bf1d      	ittte	ne
   db3b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db3b8:	ea94 0f0c 	teqne	r4, ip
   db3bc:	ea95 0f0c 	teqne	r5, ip
   db3c0:	f000 f8de 	bleq	db580 <__aeabi_dmul+0x1dc>
   db3c4:	442c      	add	r4, r5
   db3c6:	ea81 0603 	eor.w	r6, r1, r3
   db3ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db3ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db3d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db3d6:	bf18      	it	ne
   db3d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db3dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db3e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db3e4:	d038      	beq.n	db458 <__aeabi_dmul+0xb4>
   db3e6:	fba0 ce02 	umull	ip, lr, r0, r2
   db3ea:	f04f 0500 	mov.w	r5, #0
   db3ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   db3f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db3f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   db3fa:	f04f 0600 	mov.w	r6, #0
   db3fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   db402:	f09c 0f00 	teq	ip, #0
   db406:	bf18      	it	ne
   db408:	f04e 0e01 	orrne.w	lr, lr, #1
   db40c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db410:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db414:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db418:	d204      	bcs.n	db424 <__aeabi_dmul+0x80>
   db41a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db41e:	416d      	adcs	r5, r5
   db420:	eb46 0606 	adc.w	r6, r6, r6
   db424:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db428:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db42c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db430:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db434:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db438:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db43c:	bf88      	it	hi
   db43e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db442:	d81e      	bhi.n	db482 <__aeabi_dmul+0xde>
   db444:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db448:	bf08      	it	eq
   db44a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db44e:	f150 0000 	adcs.w	r0, r0, #0
   db452:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db456:	bd70      	pop	{r4, r5, r6, pc}
   db458:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db45c:	ea46 0101 	orr.w	r1, r6, r1
   db460:	ea40 0002 	orr.w	r0, r0, r2
   db464:	ea81 0103 	eor.w	r1, r1, r3
   db468:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db46c:	bfc2      	ittt	gt
   db46e:	ebd4 050c 	rsbsgt	r5, r4, ip
   db472:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db476:	bd70      	popgt	{r4, r5, r6, pc}
   db478:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db47c:	f04f 0e00 	mov.w	lr, #0
   db480:	3c01      	subs	r4, #1
   db482:	f300 80ab 	bgt.w	db5dc <__aeabi_dmul+0x238>
   db486:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db48a:	bfde      	ittt	le
   db48c:	2000      	movle	r0, #0
   db48e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db492:	bd70      	pople	{r4, r5, r6, pc}
   db494:	f1c4 0400 	rsb	r4, r4, #0
   db498:	3c20      	subs	r4, #32
   db49a:	da35      	bge.n	db508 <__aeabi_dmul+0x164>
   db49c:	340c      	adds	r4, #12
   db49e:	dc1b      	bgt.n	db4d8 <__aeabi_dmul+0x134>
   db4a0:	f104 0414 	add.w	r4, r4, #20
   db4a4:	f1c4 0520 	rsb	r5, r4, #32
   db4a8:	fa00 f305 	lsl.w	r3, r0, r5
   db4ac:	fa20 f004 	lsr.w	r0, r0, r4
   db4b0:	fa01 f205 	lsl.w	r2, r1, r5
   db4b4:	ea40 0002 	orr.w	r0, r0, r2
   db4b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db4bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db4c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db4c4:	fa21 f604 	lsr.w	r6, r1, r4
   db4c8:	eb42 0106 	adc.w	r1, r2, r6
   db4cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db4d0:	bf08      	it	eq
   db4d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db4d6:	bd70      	pop	{r4, r5, r6, pc}
   db4d8:	f1c4 040c 	rsb	r4, r4, #12
   db4dc:	f1c4 0520 	rsb	r5, r4, #32
   db4e0:	fa00 f304 	lsl.w	r3, r0, r4
   db4e4:	fa20 f005 	lsr.w	r0, r0, r5
   db4e8:	fa01 f204 	lsl.w	r2, r1, r4
   db4ec:	ea40 0002 	orr.w	r0, r0, r2
   db4f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db4f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db4f8:	f141 0100 	adc.w	r1, r1, #0
   db4fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db500:	bf08      	it	eq
   db502:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db506:	bd70      	pop	{r4, r5, r6, pc}
   db508:	f1c4 0520 	rsb	r5, r4, #32
   db50c:	fa00 f205 	lsl.w	r2, r0, r5
   db510:	ea4e 0e02 	orr.w	lr, lr, r2
   db514:	fa20 f304 	lsr.w	r3, r0, r4
   db518:	fa01 f205 	lsl.w	r2, r1, r5
   db51c:	ea43 0302 	orr.w	r3, r3, r2
   db520:	fa21 f004 	lsr.w	r0, r1, r4
   db524:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db528:	fa21 f204 	lsr.w	r2, r1, r4
   db52c:	ea20 0002 	bic.w	r0, r0, r2
   db530:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db534:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db538:	bf08      	it	eq
   db53a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db53e:	bd70      	pop	{r4, r5, r6, pc}
   db540:	f094 0f00 	teq	r4, #0
   db544:	d10f      	bne.n	db566 <__aeabi_dmul+0x1c2>
   db546:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db54a:	0040      	lsls	r0, r0, #1
   db54c:	eb41 0101 	adc.w	r1, r1, r1
   db550:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db554:	bf08      	it	eq
   db556:	3c01      	subeq	r4, #1
   db558:	d0f7      	beq.n	db54a <__aeabi_dmul+0x1a6>
   db55a:	ea41 0106 	orr.w	r1, r1, r6
   db55e:	f095 0f00 	teq	r5, #0
   db562:	bf18      	it	ne
   db564:	4770      	bxne	lr
   db566:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db56a:	0052      	lsls	r2, r2, #1
   db56c:	eb43 0303 	adc.w	r3, r3, r3
   db570:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db574:	bf08      	it	eq
   db576:	3d01      	subeq	r5, #1
   db578:	d0f7      	beq.n	db56a <__aeabi_dmul+0x1c6>
   db57a:	ea43 0306 	orr.w	r3, r3, r6
   db57e:	4770      	bx	lr
   db580:	ea94 0f0c 	teq	r4, ip
   db584:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db588:	bf18      	it	ne
   db58a:	ea95 0f0c 	teqne	r5, ip
   db58e:	d00c      	beq.n	db5aa <__aeabi_dmul+0x206>
   db590:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db594:	bf18      	it	ne
   db596:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db59a:	d1d1      	bne.n	db540 <__aeabi_dmul+0x19c>
   db59c:	ea81 0103 	eor.w	r1, r1, r3
   db5a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db5a4:	f04f 0000 	mov.w	r0, #0
   db5a8:	bd70      	pop	{r4, r5, r6, pc}
   db5aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db5ae:	bf06      	itte	eq
   db5b0:	4610      	moveq	r0, r2
   db5b2:	4619      	moveq	r1, r3
   db5b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db5b8:	d019      	beq.n	db5ee <__aeabi_dmul+0x24a>
   db5ba:	ea94 0f0c 	teq	r4, ip
   db5be:	d102      	bne.n	db5c6 <__aeabi_dmul+0x222>
   db5c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db5c4:	d113      	bne.n	db5ee <__aeabi_dmul+0x24a>
   db5c6:	ea95 0f0c 	teq	r5, ip
   db5ca:	d105      	bne.n	db5d8 <__aeabi_dmul+0x234>
   db5cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db5d0:	bf1c      	itt	ne
   db5d2:	4610      	movne	r0, r2
   db5d4:	4619      	movne	r1, r3
   db5d6:	d10a      	bne.n	db5ee <__aeabi_dmul+0x24a>
   db5d8:	ea81 0103 	eor.w	r1, r1, r3
   db5dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db5e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db5e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db5e8:	f04f 0000 	mov.w	r0, #0
   db5ec:	bd70      	pop	{r4, r5, r6, pc}
   db5ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db5f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db5f6:	bd70      	pop	{r4, r5, r6, pc}

000db5f8 <__aeabi_ddiv>:
   db5f8:	b570      	push	{r4, r5, r6, lr}
   db5fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db5fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db606:	bf1d      	ittte	ne
   db608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db60c:	ea94 0f0c 	teqne	r4, ip
   db610:	ea95 0f0c 	teqne	r5, ip
   db614:	f000 f8a7 	bleq	db766 <__aeabi_ddiv+0x16e>
   db618:	eba4 0405 	sub.w	r4, r4, r5
   db61c:	ea81 0e03 	eor.w	lr, r1, r3
   db620:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db624:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db628:	f000 8088 	beq.w	db73c <__aeabi_ddiv+0x144>
   db62c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db630:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db634:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db638:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db63c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db640:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db644:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db648:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db64c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db650:	429d      	cmp	r5, r3
   db652:	bf08      	it	eq
   db654:	4296      	cmpeq	r6, r2
   db656:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db65a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db65e:	d202      	bcs.n	db666 <__aeabi_ddiv+0x6e>
   db660:	085b      	lsrs	r3, r3, #1
   db662:	ea4f 0232 	mov.w	r2, r2, rrx
   db666:	1ab6      	subs	r6, r6, r2
   db668:	eb65 0503 	sbc.w	r5, r5, r3
   db66c:	085b      	lsrs	r3, r3, #1
   db66e:	ea4f 0232 	mov.w	r2, r2, rrx
   db672:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db676:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db67a:	ebb6 0e02 	subs.w	lr, r6, r2
   db67e:	eb75 0e03 	sbcs.w	lr, r5, r3
   db682:	bf22      	ittt	cs
   db684:	1ab6      	subcs	r6, r6, r2
   db686:	4675      	movcs	r5, lr
   db688:	ea40 000c 	orrcs.w	r0, r0, ip
   db68c:	085b      	lsrs	r3, r3, #1
   db68e:	ea4f 0232 	mov.w	r2, r2, rrx
   db692:	ebb6 0e02 	subs.w	lr, r6, r2
   db696:	eb75 0e03 	sbcs.w	lr, r5, r3
   db69a:	bf22      	ittt	cs
   db69c:	1ab6      	subcs	r6, r6, r2
   db69e:	4675      	movcs	r5, lr
   db6a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db6a4:	085b      	lsrs	r3, r3, #1
   db6a6:	ea4f 0232 	mov.w	r2, r2, rrx
   db6aa:	ebb6 0e02 	subs.w	lr, r6, r2
   db6ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   db6b2:	bf22      	ittt	cs
   db6b4:	1ab6      	subcs	r6, r6, r2
   db6b6:	4675      	movcs	r5, lr
   db6b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db6bc:	085b      	lsrs	r3, r3, #1
   db6be:	ea4f 0232 	mov.w	r2, r2, rrx
   db6c2:	ebb6 0e02 	subs.w	lr, r6, r2
   db6c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   db6ca:	bf22      	ittt	cs
   db6cc:	1ab6      	subcs	r6, r6, r2
   db6ce:	4675      	movcs	r5, lr
   db6d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db6d4:	ea55 0e06 	orrs.w	lr, r5, r6
   db6d8:	d018      	beq.n	db70c <__aeabi_ddiv+0x114>
   db6da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db6de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db6e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db6e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db6ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db6ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db6f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db6f6:	d1c0      	bne.n	db67a <__aeabi_ddiv+0x82>
   db6f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db6fc:	d10b      	bne.n	db716 <__aeabi_ddiv+0x11e>
   db6fe:	ea41 0100 	orr.w	r1, r1, r0
   db702:	f04f 0000 	mov.w	r0, #0
   db706:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db70a:	e7b6      	b.n	db67a <__aeabi_ddiv+0x82>
   db70c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db710:	bf04      	itt	eq
   db712:	4301      	orreq	r1, r0
   db714:	2000      	moveq	r0, #0
   db716:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db71a:	bf88      	it	hi
   db71c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db720:	f63f aeaf 	bhi.w	db482 <__aeabi_dmul+0xde>
   db724:	ebb5 0c03 	subs.w	ip, r5, r3
   db728:	bf04      	itt	eq
   db72a:	ebb6 0c02 	subseq.w	ip, r6, r2
   db72e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db732:	f150 0000 	adcs.w	r0, r0, #0
   db736:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db73a:	bd70      	pop	{r4, r5, r6, pc}
   db73c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db740:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db744:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db748:	bfc2      	ittt	gt
   db74a:	ebd4 050c 	rsbsgt	r5, r4, ip
   db74e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db752:	bd70      	popgt	{r4, r5, r6, pc}
   db754:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db758:	f04f 0e00 	mov.w	lr, #0
   db75c:	3c01      	subs	r4, #1
   db75e:	e690      	b.n	db482 <__aeabi_dmul+0xde>
   db760:	ea45 0e06 	orr.w	lr, r5, r6
   db764:	e68d      	b.n	db482 <__aeabi_dmul+0xde>
   db766:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db76a:	ea94 0f0c 	teq	r4, ip
   db76e:	bf08      	it	eq
   db770:	ea95 0f0c 	teqeq	r5, ip
   db774:	f43f af3b 	beq.w	db5ee <__aeabi_dmul+0x24a>
   db778:	ea94 0f0c 	teq	r4, ip
   db77c:	d10a      	bne.n	db794 <__aeabi_ddiv+0x19c>
   db77e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db782:	f47f af34 	bne.w	db5ee <__aeabi_dmul+0x24a>
   db786:	ea95 0f0c 	teq	r5, ip
   db78a:	f47f af25 	bne.w	db5d8 <__aeabi_dmul+0x234>
   db78e:	4610      	mov	r0, r2
   db790:	4619      	mov	r1, r3
   db792:	e72c      	b.n	db5ee <__aeabi_dmul+0x24a>
   db794:	ea95 0f0c 	teq	r5, ip
   db798:	d106      	bne.n	db7a8 <__aeabi_ddiv+0x1b0>
   db79a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db79e:	f43f aefd 	beq.w	db59c <__aeabi_dmul+0x1f8>
   db7a2:	4610      	mov	r0, r2
   db7a4:	4619      	mov	r1, r3
   db7a6:	e722      	b.n	db5ee <__aeabi_dmul+0x24a>
   db7a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db7ac:	bf18      	it	ne
   db7ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db7b2:	f47f aec5 	bne.w	db540 <__aeabi_dmul+0x19c>
   db7b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db7ba:	f47f af0d 	bne.w	db5d8 <__aeabi_dmul+0x234>
   db7be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db7c2:	f47f aeeb 	bne.w	db59c <__aeabi_dmul+0x1f8>
   db7c6:	e712      	b.n	db5ee <__aeabi_dmul+0x24a>

000db7c8 <__gedf2>:
   db7c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   db7cc:	e006      	b.n	db7dc <__cmpdf2+0x4>
   db7ce:	bf00      	nop

000db7d0 <__ledf2>:
   db7d0:	f04f 0c01 	mov.w	ip, #1
   db7d4:	e002      	b.n	db7dc <__cmpdf2+0x4>
   db7d6:	bf00      	nop

000db7d8 <__cmpdf2>:
   db7d8:	f04f 0c01 	mov.w	ip, #1
   db7dc:	f84d cd04 	str.w	ip, [sp, #-4]!
   db7e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db7e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db7e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db7ec:	bf18      	it	ne
   db7ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   db7f2:	d01b      	beq.n	db82c <__cmpdf2+0x54>
   db7f4:	b001      	add	sp, #4
   db7f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   db7fa:	bf0c      	ite	eq
   db7fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   db800:	ea91 0f03 	teqne	r1, r3
   db804:	bf02      	ittt	eq
   db806:	ea90 0f02 	teqeq	r0, r2
   db80a:	2000      	moveq	r0, #0
   db80c:	4770      	bxeq	lr
   db80e:	f110 0f00 	cmn.w	r0, #0
   db812:	ea91 0f03 	teq	r1, r3
   db816:	bf58      	it	pl
   db818:	4299      	cmppl	r1, r3
   db81a:	bf08      	it	eq
   db81c:	4290      	cmpeq	r0, r2
   db81e:	bf2c      	ite	cs
   db820:	17d8      	asrcs	r0, r3, #31
   db822:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db826:	f040 0001 	orr.w	r0, r0, #1
   db82a:	4770      	bx	lr
   db82c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db834:	d102      	bne.n	db83c <__cmpdf2+0x64>
   db836:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db83a:	d107      	bne.n	db84c <__cmpdf2+0x74>
   db83c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db840:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db844:	d1d6      	bne.n	db7f4 <__cmpdf2+0x1c>
   db846:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db84a:	d0d3      	beq.n	db7f4 <__cmpdf2+0x1c>
   db84c:	f85d 0b04 	ldr.w	r0, [sp], #4
   db850:	4770      	bx	lr
   db852:	bf00      	nop

000db854 <__aeabi_cdrcmple>:
   db854:	4684      	mov	ip, r0
   db856:	4610      	mov	r0, r2
   db858:	4662      	mov	r2, ip
   db85a:	468c      	mov	ip, r1
   db85c:	4619      	mov	r1, r3
   db85e:	4663      	mov	r3, ip
   db860:	e000      	b.n	db864 <__aeabi_cdcmpeq>
   db862:	bf00      	nop

000db864 <__aeabi_cdcmpeq>:
   db864:	b501      	push	{r0, lr}
   db866:	f7ff ffb7 	bl	db7d8 <__cmpdf2>
   db86a:	2800      	cmp	r0, #0
   db86c:	bf48      	it	mi
   db86e:	f110 0f00 	cmnmi.w	r0, #0
   db872:	bd01      	pop	{r0, pc}

000db874 <__aeabi_dcmpeq>:
   db874:	f84d ed08 	str.w	lr, [sp, #-8]!
   db878:	f7ff fff4 	bl	db864 <__aeabi_cdcmpeq>
   db87c:	bf0c      	ite	eq
   db87e:	2001      	moveq	r0, #1
   db880:	2000      	movne	r0, #0
   db882:	f85d fb08 	ldr.w	pc, [sp], #8
   db886:	bf00      	nop

000db888 <__aeabi_dcmplt>:
   db888:	f84d ed08 	str.w	lr, [sp, #-8]!
   db88c:	f7ff ffea 	bl	db864 <__aeabi_cdcmpeq>
   db890:	bf34      	ite	cc
   db892:	2001      	movcc	r0, #1
   db894:	2000      	movcs	r0, #0
   db896:	f85d fb08 	ldr.w	pc, [sp], #8
   db89a:	bf00      	nop

000db89c <__aeabi_dcmple>:
   db89c:	f84d ed08 	str.w	lr, [sp, #-8]!
   db8a0:	f7ff ffe0 	bl	db864 <__aeabi_cdcmpeq>
   db8a4:	bf94      	ite	ls
   db8a6:	2001      	movls	r0, #1
   db8a8:	2000      	movhi	r0, #0
   db8aa:	f85d fb08 	ldr.w	pc, [sp], #8
   db8ae:	bf00      	nop

000db8b0 <__aeabi_dcmpge>:
   db8b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   db8b4:	f7ff ffce 	bl	db854 <__aeabi_cdrcmple>
   db8b8:	bf94      	ite	ls
   db8ba:	2001      	movls	r0, #1
   db8bc:	2000      	movhi	r0, #0
   db8be:	f85d fb08 	ldr.w	pc, [sp], #8
   db8c2:	bf00      	nop

000db8c4 <__aeabi_dcmpgt>:
   db8c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   db8c8:	f7ff ffc4 	bl	db854 <__aeabi_cdrcmple>
   db8cc:	bf34      	ite	cc
   db8ce:	2001      	movcc	r0, #1
   db8d0:	2000      	movcs	r0, #0
   db8d2:	f85d fb08 	ldr.w	pc, [sp], #8
   db8d6:	bf00      	nop

000db8d8 <__aeabi_dcmpun>:
   db8d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db8dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db8e0:	d102      	bne.n	db8e8 <__aeabi_dcmpun+0x10>
   db8e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db8e6:	d10a      	bne.n	db8fe <__aeabi_dcmpun+0x26>
   db8e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db8ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db8f0:	d102      	bne.n	db8f8 <__aeabi_dcmpun+0x20>
   db8f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db8f6:	d102      	bne.n	db8fe <__aeabi_dcmpun+0x26>
   db8f8:	f04f 0000 	mov.w	r0, #0
   db8fc:	4770      	bx	lr
   db8fe:	f04f 0001 	mov.w	r0, #1
   db902:	4770      	bx	lr

000db904 <__aeabi_d2iz>:
   db904:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db908:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db90c:	d215      	bcs.n	db93a <__aeabi_d2iz+0x36>
   db90e:	d511      	bpl.n	db934 <__aeabi_d2iz+0x30>
   db910:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db914:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db918:	d912      	bls.n	db940 <__aeabi_d2iz+0x3c>
   db91a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db91e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db922:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db926:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db92a:	fa23 f002 	lsr.w	r0, r3, r2
   db92e:	bf18      	it	ne
   db930:	4240      	negne	r0, r0
   db932:	4770      	bx	lr
   db934:	f04f 0000 	mov.w	r0, #0
   db938:	4770      	bx	lr
   db93a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db93e:	d105      	bne.n	db94c <__aeabi_d2iz+0x48>
   db940:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   db944:	bf08      	it	eq
   db946:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db94a:	4770      	bx	lr
   db94c:	f04f 0000 	mov.w	r0, #0
   db950:	4770      	bx	lr
   db952:	bf00      	nop

000db954 <__aeabi_d2uiz>:
   db954:	004a      	lsls	r2, r1, #1
   db956:	d211      	bcs.n	db97c <__aeabi_d2uiz+0x28>
   db958:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db95c:	d211      	bcs.n	db982 <__aeabi_d2uiz+0x2e>
   db95e:	d50d      	bpl.n	db97c <__aeabi_d2uiz+0x28>
   db960:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db964:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db968:	d40e      	bmi.n	db988 <__aeabi_d2uiz+0x34>
   db96a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db96e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db972:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db976:	fa23 f002 	lsr.w	r0, r3, r2
   db97a:	4770      	bx	lr
   db97c:	f04f 0000 	mov.w	r0, #0
   db980:	4770      	bx	lr
   db982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db986:	d102      	bne.n	db98e <__aeabi_d2uiz+0x3a>
   db988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db98c:	4770      	bx	lr
   db98e:	f04f 0000 	mov.w	r0, #0
   db992:	4770      	bx	lr

000db994 <__aeabi_d2f>:
   db994:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db998:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db99c:	bf24      	itt	cs
   db99e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db9a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db9a6:	d90d      	bls.n	db9c4 <__aeabi_d2f+0x30>
   db9a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db9ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db9b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db9b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db9b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db9bc:	bf08      	it	eq
   db9be:	f020 0001 	biceq.w	r0, r0, #1
   db9c2:	4770      	bx	lr
   db9c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db9c8:	d121      	bne.n	dba0e <__aeabi_d2f+0x7a>
   db9ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db9ce:	bfbc      	itt	lt
   db9d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db9d4:	4770      	bxlt	lr
   db9d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db9da:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db9de:	f1c2 0218 	rsb	r2, r2, #24
   db9e2:	f1c2 0c20 	rsb	ip, r2, #32
   db9e6:	fa10 f30c 	lsls.w	r3, r0, ip
   db9ea:	fa20 f002 	lsr.w	r0, r0, r2
   db9ee:	bf18      	it	ne
   db9f0:	f040 0001 	orrne.w	r0, r0, #1
   db9f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db9f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db9fc:	fa03 fc0c 	lsl.w	ip, r3, ip
   dba00:	ea40 000c 	orr.w	r0, r0, ip
   dba04:	fa23 f302 	lsr.w	r3, r3, r2
   dba08:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dba0c:	e7cc      	b.n	db9a8 <__aeabi_d2f+0x14>
   dba0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dba12:	d107      	bne.n	dba24 <__aeabi_d2f+0x90>
   dba14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dba18:	bf1e      	ittt	ne
   dba1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dba1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dba22:	4770      	bxne	lr
   dba24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dba28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dba2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dba30:	4770      	bx	lr
   dba32:	bf00      	nop

000dba34 <__aeabi_f2lz>:
   dba34:	ee07 0a90 	vmov	s15, r0
   dba38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dba3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dba40:	d401      	bmi.n	dba46 <__aeabi_f2lz+0x12>
   dba42:	f000 b80b 	b.w	dba5c <__aeabi_f2ulz>
   dba46:	eef1 7a67 	vneg.f32	s15, s15
   dba4a:	b508      	push	{r3, lr}
   dba4c:	ee17 0a90 	vmov	r0, s15
   dba50:	f000 f804 	bl	dba5c <__aeabi_f2ulz>
   dba54:	4240      	negs	r0, r0
   dba56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dba5a:	bd08      	pop	{r3, pc}

000dba5c <__aeabi_f2ulz>:
   dba5c:	b5d0      	push	{r4, r6, r7, lr}
   dba5e:	f7ff fc49 	bl	db2f4 <__aeabi_f2d>
   dba62:	4b0c      	ldr	r3, [pc, #48]	; (dba94 <__aeabi_f2ulz+0x38>)
   dba64:	2200      	movs	r2, #0
   dba66:	4606      	mov	r6, r0
   dba68:	460f      	mov	r7, r1
   dba6a:	f7ff fc9b 	bl	db3a4 <__aeabi_dmul>
   dba6e:	f7ff ff71 	bl	db954 <__aeabi_d2uiz>
   dba72:	4604      	mov	r4, r0
   dba74:	f7ff fc1c 	bl	db2b0 <__aeabi_ui2d>
   dba78:	4b07      	ldr	r3, [pc, #28]	; (dba98 <__aeabi_f2ulz+0x3c>)
   dba7a:	2200      	movs	r2, #0
   dba7c:	f7ff fc92 	bl	db3a4 <__aeabi_dmul>
   dba80:	4602      	mov	r2, r0
   dba82:	460b      	mov	r3, r1
   dba84:	4630      	mov	r0, r6
   dba86:	4639      	mov	r1, r7
   dba88:	f7ff fad4 	bl	db034 <__aeabi_dsub>
   dba8c:	f7ff ff62 	bl	db954 <__aeabi_d2uiz>
   dba90:	4621      	mov	r1, r4
   dba92:	bdd0      	pop	{r4, r6, r7, pc}
   dba94:	3df00000 	.word	0x3df00000
   dba98:	41f00000 	.word	0x41f00000

000dba9c <__aeabi_d2ulz>:
   dba9c:	b5d0      	push	{r4, r6, r7, lr}
   dba9e:	4b0c      	ldr	r3, [pc, #48]	; (dbad0 <__aeabi_d2ulz+0x34>)
   dbaa0:	2200      	movs	r2, #0
   dbaa2:	4606      	mov	r6, r0
   dbaa4:	460f      	mov	r7, r1
   dbaa6:	f7ff fc7d 	bl	db3a4 <__aeabi_dmul>
   dbaaa:	f7ff ff53 	bl	db954 <__aeabi_d2uiz>
   dbaae:	4604      	mov	r4, r0
   dbab0:	f7ff fbfe 	bl	db2b0 <__aeabi_ui2d>
   dbab4:	4b07      	ldr	r3, [pc, #28]	; (dbad4 <__aeabi_d2ulz+0x38>)
   dbab6:	2200      	movs	r2, #0
   dbab8:	f7ff fc74 	bl	db3a4 <__aeabi_dmul>
   dbabc:	4602      	mov	r2, r0
   dbabe:	460b      	mov	r3, r1
   dbac0:	4630      	mov	r0, r6
   dbac2:	4639      	mov	r1, r7
   dbac4:	f7ff fab6 	bl	db034 <__aeabi_dsub>
   dbac8:	f7ff ff44 	bl	db954 <__aeabi_d2uiz>
   dbacc:	4621      	mov	r1, r4
   dbace:	bdd0      	pop	{r4, r6, r7, pc}
   dbad0:	3df00000 	.word	0x3df00000
   dbad4:	41f00000 	.word	0x41f00000

000dbad8 <asctime_r>:
   dbad8:	b510      	push	{r4, lr}
   dbada:	460c      	mov	r4, r1
   dbadc:	6941      	ldr	r1, [r0, #20]
   dbade:	6903      	ldr	r3, [r0, #16]
   dbae0:	6982      	ldr	r2, [r0, #24]
   dbae2:	b086      	sub	sp, #24
   dbae4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dbae8:	9104      	str	r1, [sp, #16]
   dbaea:	6801      	ldr	r1, [r0, #0]
   dbaec:	9103      	str	r1, [sp, #12]
   dbaee:	6841      	ldr	r1, [r0, #4]
   dbaf0:	9102      	str	r1, [sp, #8]
   dbaf2:	6881      	ldr	r1, [r0, #8]
   dbaf4:	9101      	str	r1, [sp, #4]
   dbaf6:	68c1      	ldr	r1, [r0, #12]
   dbaf8:	9100      	str	r1, [sp, #0]
   dbafa:	4907      	ldr	r1, [pc, #28]	; (dbb18 <asctime_r+0x40>)
   dbafc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dbb00:	440b      	add	r3, r1
   dbb02:	4906      	ldr	r1, [pc, #24]	; (dbb1c <asctime_r+0x44>)
   dbb04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dbb08:	440a      	add	r2, r1
   dbb0a:	4620      	mov	r0, r4
   dbb0c:	4904      	ldr	r1, [pc, #16]	; (dbb20 <asctime_r+0x48>)
   dbb0e:	f7fc f8fd 	bl	d7d0c <siprintf>
   dbb12:	4620      	mov	r0, r4
   dbb14:	b006      	add	sp, #24
   dbb16:	bd10      	pop	{r4, pc}
   dbb18:	000de91a 	.word	0x000de91a
   dbb1c:	000de905 	.word	0x000de905
   dbb20:	000de8e5 	.word	0x000de8e5

000dbb24 <atoi>:
   dbb24:	220a      	movs	r2, #10
   dbb26:	2100      	movs	r1, #0
   dbb28:	f000 bff8 	b.w	dcb1c <strtol>

000dbb2c <__cxa_atexit>:
   dbb2c:	b510      	push	{r4, lr}
   dbb2e:	4c05      	ldr	r4, [pc, #20]	; (dbb44 <__cxa_atexit+0x18>)
   dbb30:	4613      	mov	r3, r2
   dbb32:	b12c      	cbz	r4, dbb40 <__cxa_atexit+0x14>
   dbb34:	460a      	mov	r2, r1
   dbb36:	4601      	mov	r1, r0
   dbb38:	2002      	movs	r0, #2
   dbb3a:	f3af 8000 	nop.w
   dbb3e:	bd10      	pop	{r4, pc}
   dbb40:	4620      	mov	r0, r4
   dbb42:	e7fc      	b.n	dbb3e <__cxa_atexit+0x12>
   dbb44:	00000000 	.word	0x00000000

000dbb48 <gmtime>:
   dbb48:	b538      	push	{r3, r4, r5, lr}
   dbb4a:	4b07      	ldr	r3, [pc, #28]	; (dbb68 <gmtime+0x20>)
   dbb4c:	681d      	ldr	r5, [r3, #0]
   dbb4e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dbb50:	4604      	mov	r4, r0
   dbb52:	b91b      	cbnz	r3, dbb5c <gmtime+0x14>
   dbb54:	2024      	movs	r0, #36	; 0x24
   dbb56:	f7fc f8c1 	bl	d7cdc <malloc>
   dbb5a:	63e8      	str	r0, [r5, #60]	; 0x3c
   dbb5c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dbb5e:	4620      	mov	r0, r4
   dbb60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbb64:	f7fc b912 	b.w	d7d8c <gmtime_r>
   dbb68:	2003e1f8 	.word	0x2003e1f8

000dbb6c <memcpy>:
   dbb6c:	440a      	add	r2, r1
   dbb6e:	4291      	cmp	r1, r2
   dbb70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dbb74:	d100      	bne.n	dbb78 <memcpy+0xc>
   dbb76:	4770      	bx	lr
   dbb78:	b510      	push	{r4, lr}
   dbb7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbb7e:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbb82:	4291      	cmp	r1, r2
   dbb84:	d1f9      	bne.n	dbb7a <memcpy+0xe>
   dbb86:	bd10      	pop	{r4, pc}

000dbb88 <memmove>:
   dbb88:	4288      	cmp	r0, r1
   dbb8a:	b510      	push	{r4, lr}
   dbb8c:	eb01 0402 	add.w	r4, r1, r2
   dbb90:	d902      	bls.n	dbb98 <memmove+0x10>
   dbb92:	4284      	cmp	r4, r0
   dbb94:	4623      	mov	r3, r4
   dbb96:	d807      	bhi.n	dbba8 <memmove+0x20>
   dbb98:	1e43      	subs	r3, r0, #1
   dbb9a:	42a1      	cmp	r1, r4
   dbb9c:	d008      	beq.n	dbbb0 <memmove+0x28>
   dbb9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbba2:	f803 2f01 	strb.w	r2, [r3, #1]!
   dbba6:	e7f8      	b.n	dbb9a <memmove+0x12>
   dbba8:	4402      	add	r2, r0
   dbbaa:	4601      	mov	r1, r0
   dbbac:	428a      	cmp	r2, r1
   dbbae:	d100      	bne.n	dbbb2 <memmove+0x2a>
   dbbb0:	bd10      	pop	{r4, pc}
   dbbb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dbbb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dbbba:	e7f7      	b.n	dbbac <memmove+0x24>

000dbbbc <memset>:
   dbbbc:	4402      	add	r2, r0
   dbbbe:	4603      	mov	r3, r0
   dbbc0:	4293      	cmp	r3, r2
   dbbc2:	d100      	bne.n	dbbc6 <memset+0xa>
   dbbc4:	4770      	bx	lr
   dbbc6:	f803 1b01 	strb.w	r1, [r3], #1
   dbbca:	e7f9      	b.n	dbbc0 <memset+0x4>

000dbbcc <srand>:
   dbbcc:	b538      	push	{r3, r4, r5, lr}
   dbbce:	4b0d      	ldr	r3, [pc, #52]	; (dbc04 <srand+0x38>)
   dbbd0:	681d      	ldr	r5, [r3, #0]
   dbbd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbbd4:	4604      	mov	r4, r0
   dbbd6:	b97b      	cbnz	r3, dbbf8 <srand+0x2c>
   dbbd8:	2018      	movs	r0, #24
   dbbda:	f7fc f87f 	bl	d7cdc <malloc>
   dbbde:	4a0a      	ldr	r2, [pc, #40]	; (dbc08 <srand+0x3c>)
   dbbe0:	4b0a      	ldr	r3, [pc, #40]	; (dbc0c <srand+0x40>)
   dbbe2:	63a8      	str	r0, [r5, #56]	; 0x38
   dbbe4:	e9c0 2300 	strd	r2, r3, [r0]
   dbbe8:	4b09      	ldr	r3, [pc, #36]	; (dbc10 <srand+0x44>)
   dbbea:	6083      	str	r3, [r0, #8]
   dbbec:	230b      	movs	r3, #11
   dbbee:	8183      	strh	r3, [r0, #12]
   dbbf0:	2201      	movs	r2, #1
   dbbf2:	2300      	movs	r3, #0
   dbbf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbbf8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbbfa:	2200      	movs	r2, #0
   dbbfc:	611c      	str	r4, [r3, #16]
   dbbfe:	615a      	str	r2, [r3, #20]
   dbc00:	bd38      	pop	{r3, r4, r5, pc}
   dbc02:	bf00      	nop
   dbc04:	2003e1f8 	.word	0x2003e1f8
   dbc08:	abcd330e 	.word	0xabcd330e
   dbc0c:	e66d1234 	.word	0xe66d1234
   dbc10:	0005deec 	.word	0x0005deec

000dbc14 <strchr>:
   dbc14:	b2c9      	uxtb	r1, r1
   dbc16:	4603      	mov	r3, r0
   dbc18:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbc1c:	b11a      	cbz	r2, dbc26 <strchr+0x12>
   dbc1e:	428a      	cmp	r2, r1
   dbc20:	d1f9      	bne.n	dbc16 <strchr+0x2>
   dbc22:	4618      	mov	r0, r3
   dbc24:	4770      	bx	lr
   dbc26:	2900      	cmp	r1, #0
   dbc28:	bf18      	it	ne
   dbc2a:	2300      	movne	r3, #0
   dbc2c:	e7f9      	b.n	dbc22 <strchr+0xe>

000dbc2e <strchrnul>:
   dbc2e:	b510      	push	{r4, lr}
   dbc30:	4604      	mov	r4, r0
   dbc32:	f7ff ffef 	bl	dbc14 <strchr>
   dbc36:	b918      	cbnz	r0, dbc40 <strchrnul+0x12>
   dbc38:	4620      	mov	r0, r4
   dbc3a:	f000 f832 	bl	dbca2 <strlen>
   dbc3e:	4420      	add	r0, r4
   dbc40:	bd10      	pop	{r4, pc}

000dbc42 <strcmp>:
   dbc42:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbc46:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbc4a:	2a01      	cmp	r2, #1
   dbc4c:	bf28      	it	cs
   dbc4e:	429a      	cmpcs	r2, r3
   dbc50:	d0f7      	beq.n	dbc42 <strcmp>
   dbc52:	1ad0      	subs	r0, r2, r3
   dbc54:	4770      	bx	lr

000dbc56 <strcpy>:
   dbc56:	4603      	mov	r3, r0
   dbc58:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbc5c:	f803 2b01 	strb.w	r2, [r3], #1
   dbc60:	2a00      	cmp	r2, #0
   dbc62:	d1f9      	bne.n	dbc58 <strcpy+0x2>
   dbc64:	4770      	bx	lr
	...

000dbc68 <strdup>:
   dbc68:	4b02      	ldr	r3, [pc, #8]	; (dbc74 <strdup+0xc>)
   dbc6a:	4601      	mov	r1, r0
   dbc6c:	6818      	ldr	r0, [r3, #0]
   dbc6e:	f000 b803 	b.w	dbc78 <_strdup_r>
   dbc72:	bf00      	nop
   dbc74:	2003e1f8 	.word	0x2003e1f8

000dbc78 <_strdup_r>:
   dbc78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dbc7a:	4604      	mov	r4, r0
   dbc7c:	4608      	mov	r0, r1
   dbc7e:	460d      	mov	r5, r1
   dbc80:	f000 f80f 	bl	dbca2 <strlen>
   dbc84:	1c42      	adds	r2, r0, #1
   dbc86:	4611      	mov	r1, r2
   dbc88:	4620      	mov	r0, r4
   dbc8a:	9201      	str	r2, [sp, #4]
   dbc8c:	f7fc f85e 	bl	d7d4c <_malloc_r>
   dbc90:	4604      	mov	r4, r0
   dbc92:	b118      	cbz	r0, dbc9c <_strdup_r+0x24>
   dbc94:	9a01      	ldr	r2, [sp, #4]
   dbc96:	4629      	mov	r1, r5
   dbc98:	f7ff ff68 	bl	dbb6c <memcpy>
   dbc9c:	4620      	mov	r0, r4
   dbc9e:	b003      	add	sp, #12
   dbca0:	bd30      	pop	{r4, r5, pc}

000dbca2 <strlen>:
   dbca2:	4603      	mov	r3, r0
   dbca4:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbca8:	2a00      	cmp	r2, #0
   dbcaa:	d1fb      	bne.n	dbca4 <strlen+0x2>
   dbcac:	1a18      	subs	r0, r3, r0
   dbcae:	3801      	subs	r0, #1
   dbcb0:	4770      	bx	lr

000dbcb2 <strncmp>:
   dbcb2:	b510      	push	{r4, lr}
   dbcb4:	b16a      	cbz	r2, dbcd2 <strncmp+0x20>
   dbcb6:	3901      	subs	r1, #1
   dbcb8:	1884      	adds	r4, r0, r2
   dbcba:	f810 3b01 	ldrb.w	r3, [r0], #1
   dbcbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dbcc2:	4293      	cmp	r3, r2
   dbcc4:	d103      	bne.n	dbcce <strncmp+0x1c>
   dbcc6:	42a0      	cmp	r0, r4
   dbcc8:	d001      	beq.n	dbcce <strncmp+0x1c>
   dbcca:	2b00      	cmp	r3, #0
   dbccc:	d1f5      	bne.n	dbcba <strncmp+0x8>
   dbcce:	1a98      	subs	r0, r3, r2
   dbcd0:	bd10      	pop	{r4, pc}
   dbcd2:	4610      	mov	r0, r2
   dbcd4:	e7fc      	b.n	dbcd0 <strncmp+0x1e>

000dbcd6 <strncpy>:
   dbcd6:	b510      	push	{r4, lr}
   dbcd8:	3901      	subs	r1, #1
   dbcda:	4603      	mov	r3, r0
   dbcdc:	b132      	cbz	r2, dbcec <strncpy+0x16>
   dbcde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbce2:	f803 4b01 	strb.w	r4, [r3], #1
   dbce6:	3a01      	subs	r2, #1
   dbce8:	2c00      	cmp	r4, #0
   dbcea:	d1f7      	bne.n	dbcdc <strncpy+0x6>
   dbcec:	441a      	add	r2, r3
   dbcee:	2100      	movs	r1, #0
   dbcf0:	4293      	cmp	r3, r2
   dbcf2:	d100      	bne.n	dbcf6 <strncpy+0x20>
   dbcf4:	bd10      	pop	{r4, pc}
   dbcf6:	f803 1b01 	strb.w	r1, [r3], #1
   dbcfa:	e7f9      	b.n	dbcf0 <strncpy+0x1a>

000dbcfc <strrchr>:
   dbcfc:	b538      	push	{r3, r4, r5, lr}
   dbcfe:	4603      	mov	r3, r0
   dbd00:	460c      	mov	r4, r1
   dbd02:	b969      	cbnz	r1, dbd20 <strrchr+0x24>
   dbd04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbd08:	f7ff bf84 	b.w	dbc14 <strchr>
   dbd0c:	1c43      	adds	r3, r0, #1
   dbd0e:	4605      	mov	r5, r0
   dbd10:	4621      	mov	r1, r4
   dbd12:	4618      	mov	r0, r3
   dbd14:	f7ff ff7e 	bl	dbc14 <strchr>
   dbd18:	2800      	cmp	r0, #0
   dbd1a:	d1f7      	bne.n	dbd0c <strrchr+0x10>
   dbd1c:	4628      	mov	r0, r5
   dbd1e:	bd38      	pop	{r3, r4, r5, pc}
   dbd20:	2500      	movs	r5, #0
   dbd22:	e7f5      	b.n	dbd10 <strrchr+0x14>

000dbd24 <sulp>:
   dbd24:	b570      	push	{r4, r5, r6, lr}
   dbd26:	4604      	mov	r4, r0
   dbd28:	460d      	mov	r5, r1
   dbd2a:	ec45 4b10 	vmov	d0, r4, r5
   dbd2e:	4616      	mov	r6, r2
   dbd30:	f001 fd6a 	bl	dd808 <__ulp>
   dbd34:	ec51 0b10 	vmov	r0, r1, d0
   dbd38:	b17e      	cbz	r6, dbd5a <sulp+0x36>
   dbd3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dbd3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dbd42:	2b00      	cmp	r3, #0
   dbd44:	dd09      	ble.n	dbd5a <sulp+0x36>
   dbd46:	051b      	lsls	r3, r3, #20
   dbd48:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dbd4c:	2400      	movs	r4, #0
   dbd4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dbd52:	4622      	mov	r2, r4
   dbd54:	462b      	mov	r3, r5
   dbd56:	f7ff fb25 	bl	db3a4 <__aeabi_dmul>
   dbd5a:	bd70      	pop	{r4, r5, r6, pc}
   dbd5c:	0000      	movs	r0, r0
	...

000dbd60 <_strtod_l>:
   dbd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbd64:	b0a3      	sub	sp, #140	; 0x8c
   dbd66:	461f      	mov	r7, r3
   dbd68:	2300      	movs	r3, #0
   dbd6a:	931e      	str	r3, [sp, #120]	; 0x78
   dbd6c:	4ba4      	ldr	r3, [pc, #656]	; (dc000 <_strtod_l+0x2a0>)
   dbd6e:	9219      	str	r2, [sp, #100]	; 0x64
   dbd70:	681b      	ldr	r3, [r3, #0]
   dbd72:	9307      	str	r3, [sp, #28]
   dbd74:	4604      	mov	r4, r0
   dbd76:	4618      	mov	r0, r3
   dbd78:	4688      	mov	r8, r1
   dbd7a:	f7ff ff92 	bl	dbca2 <strlen>
   dbd7e:	f04f 0a00 	mov.w	sl, #0
   dbd82:	4605      	mov	r5, r0
   dbd84:	f04f 0b00 	mov.w	fp, #0
   dbd88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbd8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbd8e:	781a      	ldrb	r2, [r3, #0]
   dbd90:	2a2b      	cmp	r2, #43	; 0x2b
   dbd92:	d04c      	beq.n	dbe2e <_strtod_l+0xce>
   dbd94:	d839      	bhi.n	dbe0a <_strtod_l+0xaa>
   dbd96:	2a0d      	cmp	r2, #13
   dbd98:	d832      	bhi.n	dbe00 <_strtod_l+0xa0>
   dbd9a:	2a08      	cmp	r2, #8
   dbd9c:	d832      	bhi.n	dbe04 <_strtod_l+0xa4>
   dbd9e:	2a00      	cmp	r2, #0
   dbda0:	d03c      	beq.n	dbe1c <_strtod_l+0xbc>
   dbda2:	2300      	movs	r3, #0
   dbda4:	930e      	str	r3, [sp, #56]	; 0x38
   dbda6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dbda8:	7833      	ldrb	r3, [r6, #0]
   dbdaa:	2b30      	cmp	r3, #48	; 0x30
   dbdac:	f040 80b4 	bne.w	dbf18 <_strtod_l+0x1b8>
   dbdb0:	7873      	ldrb	r3, [r6, #1]
   dbdb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dbdb6:	2b58      	cmp	r3, #88	; 0x58
   dbdb8:	d16c      	bne.n	dbe94 <_strtod_l+0x134>
   dbdba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dbdbc:	9301      	str	r3, [sp, #4]
   dbdbe:	ab1e      	add	r3, sp, #120	; 0x78
   dbdc0:	9702      	str	r7, [sp, #8]
   dbdc2:	9300      	str	r3, [sp, #0]
   dbdc4:	4a8f      	ldr	r2, [pc, #572]	; (dc004 <_strtod_l+0x2a4>)
   dbdc6:	ab1f      	add	r3, sp, #124	; 0x7c
   dbdc8:	a91d      	add	r1, sp, #116	; 0x74
   dbdca:	4620      	mov	r0, r4
   dbdcc:	f000 ff18 	bl	dcc00 <__gethex>
   dbdd0:	f010 0707 	ands.w	r7, r0, #7
   dbdd4:	4605      	mov	r5, r0
   dbdd6:	d005      	beq.n	dbde4 <_strtod_l+0x84>
   dbdd8:	2f06      	cmp	r7, #6
   dbdda:	d12a      	bne.n	dbe32 <_strtod_l+0xd2>
   dbddc:	3601      	adds	r6, #1
   dbdde:	2300      	movs	r3, #0
   dbde0:	961d      	str	r6, [sp, #116]	; 0x74
   dbde2:	930e      	str	r3, [sp, #56]	; 0x38
   dbde4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dbde6:	2b00      	cmp	r3, #0
   dbde8:	f040 8596 	bne.w	dc918 <_strtod_l+0xbb8>
   dbdec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dbdee:	b1db      	cbz	r3, dbe28 <_strtod_l+0xc8>
   dbdf0:	4652      	mov	r2, sl
   dbdf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dbdf6:	ec43 2b10 	vmov	d0, r2, r3
   dbdfa:	b023      	add	sp, #140	; 0x8c
   dbdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbe00:	2a20      	cmp	r2, #32
   dbe02:	d1ce      	bne.n	dbda2 <_strtod_l+0x42>
   dbe04:	3301      	adds	r3, #1
   dbe06:	931d      	str	r3, [sp, #116]	; 0x74
   dbe08:	e7c0      	b.n	dbd8c <_strtod_l+0x2c>
   dbe0a:	2a2d      	cmp	r2, #45	; 0x2d
   dbe0c:	d1c9      	bne.n	dbda2 <_strtod_l+0x42>
   dbe0e:	2201      	movs	r2, #1
   dbe10:	920e      	str	r2, [sp, #56]	; 0x38
   dbe12:	1c5a      	adds	r2, r3, #1
   dbe14:	921d      	str	r2, [sp, #116]	; 0x74
   dbe16:	785b      	ldrb	r3, [r3, #1]
   dbe18:	2b00      	cmp	r3, #0
   dbe1a:	d1c4      	bne.n	dbda6 <_strtod_l+0x46>
   dbe1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dbe1e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbe22:	2b00      	cmp	r3, #0
   dbe24:	f040 8576 	bne.w	dc914 <_strtod_l+0xbb4>
   dbe28:	4652      	mov	r2, sl
   dbe2a:	465b      	mov	r3, fp
   dbe2c:	e7e3      	b.n	dbdf6 <_strtod_l+0x96>
   dbe2e:	2200      	movs	r2, #0
   dbe30:	e7ee      	b.n	dbe10 <_strtod_l+0xb0>
   dbe32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dbe34:	b13a      	cbz	r2, dbe46 <_strtod_l+0xe6>
   dbe36:	2135      	movs	r1, #53	; 0x35
   dbe38:	a820      	add	r0, sp, #128	; 0x80
   dbe3a:	f001 fde4 	bl	dda06 <__copybits>
   dbe3e:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbe40:	4620      	mov	r0, r4
   dbe42:	f001 fa19 	bl	dd278 <_Bfree>
   dbe46:	3f01      	subs	r7, #1
   dbe48:	2f05      	cmp	r7, #5
   dbe4a:	d807      	bhi.n	dbe5c <_strtod_l+0xfc>
   dbe4c:	e8df f007 	tbb	[pc, r7]
   dbe50:	1d180b0e 	.word	0x1d180b0e
   dbe54:	030e      	.short	0x030e
   dbe56:	f04f 0b00 	mov.w	fp, #0
   dbe5a:	46da      	mov	sl, fp
   dbe5c:	0728      	lsls	r0, r5, #28
   dbe5e:	d5c1      	bpl.n	dbde4 <_strtod_l+0x84>
   dbe60:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dbe64:	e7be      	b.n	dbde4 <_strtod_l+0x84>
   dbe66:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dbe6a:	e7f7      	b.n	dbe5c <_strtod_l+0xfc>
   dbe6c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dbe70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dbe72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dbe76:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dbe7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dbe7e:	e7ed      	b.n	dbe5c <_strtod_l+0xfc>
   dbe80:	f8df b184 	ldr.w	fp, [pc, #388]	; dc008 <_strtod_l+0x2a8>
   dbe84:	f04f 0a00 	mov.w	sl, #0
   dbe88:	e7e8      	b.n	dbe5c <_strtod_l+0xfc>
   dbe8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dbe8e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbe92:	e7e3      	b.n	dbe5c <_strtod_l+0xfc>
   dbe94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbe96:	1c5a      	adds	r2, r3, #1
   dbe98:	921d      	str	r2, [sp, #116]	; 0x74
   dbe9a:	785b      	ldrb	r3, [r3, #1]
   dbe9c:	2b30      	cmp	r3, #48	; 0x30
   dbe9e:	d0f9      	beq.n	dbe94 <_strtod_l+0x134>
   dbea0:	2b00      	cmp	r3, #0
   dbea2:	d09f      	beq.n	dbde4 <_strtod_l+0x84>
   dbea4:	2301      	movs	r3, #1
   dbea6:	f04f 0900 	mov.w	r9, #0
   dbeaa:	9304      	str	r3, [sp, #16]
   dbeac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbeae:	930a      	str	r3, [sp, #40]	; 0x28
   dbeb0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dbeb4:	464f      	mov	r7, r9
   dbeb6:	220a      	movs	r2, #10
   dbeb8:	981d      	ldr	r0, [sp, #116]	; 0x74
   dbeba:	7806      	ldrb	r6, [r0, #0]
   dbebc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dbec0:	b2d9      	uxtb	r1, r3
   dbec2:	2909      	cmp	r1, #9
   dbec4:	d92a      	bls.n	dbf1c <_strtod_l+0x1bc>
   dbec6:	9907      	ldr	r1, [sp, #28]
   dbec8:	462a      	mov	r2, r5
   dbeca:	f7ff fef2 	bl	dbcb2 <strncmp>
   dbece:	b398      	cbz	r0, dbf38 <_strtod_l+0x1d8>
   dbed0:	2000      	movs	r0, #0
   dbed2:	4633      	mov	r3, r6
   dbed4:	463d      	mov	r5, r7
   dbed6:	9007      	str	r0, [sp, #28]
   dbed8:	4602      	mov	r2, r0
   dbeda:	2b65      	cmp	r3, #101	; 0x65
   dbedc:	d001      	beq.n	dbee2 <_strtod_l+0x182>
   dbede:	2b45      	cmp	r3, #69	; 0x45
   dbee0:	d118      	bne.n	dbf14 <_strtod_l+0x1b4>
   dbee2:	b91d      	cbnz	r5, dbeec <_strtod_l+0x18c>
   dbee4:	9b04      	ldr	r3, [sp, #16]
   dbee6:	4303      	orrs	r3, r0
   dbee8:	d098      	beq.n	dbe1c <_strtod_l+0xbc>
   dbeea:	2500      	movs	r5, #0
   dbeec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dbef0:	f108 0301 	add.w	r3, r8, #1
   dbef4:	931d      	str	r3, [sp, #116]	; 0x74
   dbef6:	f898 3001 	ldrb.w	r3, [r8, #1]
   dbefa:	2b2b      	cmp	r3, #43	; 0x2b
   dbefc:	d075      	beq.n	dbfea <_strtod_l+0x28a>
   dbefe:	2b2d      	cmp	r3, #45	; 0x2d
   dbf00:	d07b      	beq.n	dbffa <_strtod_l+0x29a>
   dbf02:	f04f 0c00 	mov.w	ip, #0
   dbf06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dbf0a:	2909      	cmp	r1, #9
   dbf0c:	f240 8082 	bls.w	dc014 <_strtod_l+0x2b4>
   dbf10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbf14:	2600      	movs	r6, #0
   dbf16:	e09d      	b.n	dc054 <_strtod_l+0x2f4>
   dbf18:	2300      	movs	r3, #0
   dbf1a:	e7c4      	b.n	dbea6 <_strtod_l+0x146>
   dbf1c:	2f08      	cmp	r7, #8
   dbf1e:	bfd8      	it	le
   dbf20:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dbf22:	f100 0001 	add.w	r0, r0, #1
   dbf26:	bfda      	itte	le
   dbf28:	fb02 3301 	mlale	r3, r2, r1, r3
   dbf2c:	9309      	strle	r3, [sp, #36]	; 0x24
   dbf2e:	fb02 3909 	mlagt	r9, r2, r9, r3
   dbf32:	3701      	adds	r7, #1
   dbf34:	901d      	str	r0, [sp, #116]	; 0x74
   dbf36:	e7bf      	b.n	dbeb8 <_strtod_l+0x158>
   dbf38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbf3a:	195a      	adds	r2, r3, r5
   dbf3c:	921d      	str	r2, [sp, #116]	; 0x74
   dbf3e:	5d5b      	ldrb	r3, [r3, r5]
   dbf40:	2f00      	cmp	r7, #0
   dbf42:	d037      	beq.n	dbfb4 <_strtod_l+0x254>
   dbf44:	9007      	str	r0, [sp, #28]
   dbf46:	463d      	mov	r5, r7
   dbf48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dbf4c:	2a09      	cmp	r2, #9
   dbf4e:	d912      	bls.n	dbf76 <_strtod_l+0x216>
   dbf50:	2201      	movs	r2, #1
   dbf52:	e7c2      	b.n	dbeda <_strtod_l+0x17a>
   dbf54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbf56:	1c5a      	adds	r2, r3, #1
   dbf58:	921d      	str	r2, [sp, #116]	; 0x74
   dbf5a:	785b      	ldrb	r3, [r3, #1]
   dbf5c:	3001      	adds	r0, #1
   dbf5e:	2b30      	cmp	r3, #48	; 0x30
   dbf60:	d0f8      	beq.n	dbf54 <_strtod_l+0x1f4>
   dbf62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dbf66:	2a08      	cmp	r2, #8
   dbf68:	f200 84db 	bhi.w	dc922 <_strtod_l+0xbc2>
   dbf6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dbf6e:	9007      	str	r0, [sp, #28]
   dbf70:	2000      	movs	r0, #0
   dbf72:	920a      	str	r2, [sp, #40]	; 0x28
   dbf74:	4605      	mov	r5, r0
   dbf76:	3b30      	subs	r3, #48	; 0x30
   dbf78:	f100 0201 	add.w	r2, r0, #1
   dbf7c:	d014      	beq.n	dbfa8 <_strtod_l+0x248>
   dbf7e:	9907      	ldr	r1, [sp, #28]
   dbf80:	4411      	add	r1, r2
   dbf82:	9107      	str	r1, [sp, #28]
   dbf84:	462a      	mov	r2, r5
   dbf86:	eb00 0e05 	add.w	lr, r0, r5
   dbf8a:	210a      	movs	r1, #10
   dbf8c:	4572      	cmp	r2, lr
   dbf8e:	d113      	bne.n	dbfb8 <_strtod_l+0x258>
   dbf90:	182a      	adds	r2, r5, r0
   dbf92:	2a08      	cmp	r2, #8
   dbf94:	f105 0501 	add.w	r5, r5, #1
   dbf98:	4405      	add	r5, r0
   dbf9a:	dc1c      	bgt.n	dbfd6 <_strtod_l+0x276>
   dbf9c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbf9e:	220a      	movs	r2, #10
   dbfa0:	fb02 3301 	mla	r3, r2, r1, r3
   dbfa4:	9309      	str	r3, [sp, #36]	; 0x24
   dbfa6:	2200      	movs	r2, #0
   dbfa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbfaa:	1c59      	adds	r1, r3, #1
   dbfac:	911d      	str	r1, [sp, #116]	; 0x74
   dbfae:	785b      	ldrb	r3, [r3, #1]
   dbfb0:	4610      	mov	r0, r2
   dbfb2:	e7c9      	b.n	dbf48 <_strtod_l+0x1e8>
   dbfb4:	4638      	mov	r0, r7
   dbfb6:	e7d2      	b.n	dbf5e <_strtod_l+0x1fe>
   dbfb8:	2a08      	cmp	r2, #8
   dbfba:	dc04      	bgt.n	dbfc6 <_strtod_l+0x266>
   dbfbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dbfbe:	434e      	muls	r6, r1
   dbfc0:	9609      	str	r6, [sp, #36]	; 0x24
   dbfc2:	3201      	adds	r2, #1
   dbfc4:	e7e2      	b.n	dbf8c <_strtod_l+0x22c>
   dbfc6:	f102 0c01 	add.w	ip, r2, #1
   dbfca:	f1bc 0f10 	cmp.w	ip, #16
   dbfce:	bfd8      	it	le
   dbfd0:	fb01 f909 	mulle.w	r9, r1, r9
   dbfd4:	e7f5      	b.n	dbfc2 <_strtod_l+0x262>
   dbfd6:	2d10      	cmp	r5, #16
   dbfd8:	bfdc      	itt	le
   dbfda:	220a      	movle	r2, #10
   dbfdc:	fb02 3909 	mlale	r9, r2, r9, r3
   dbfe0:	e7e1      	b.n	dbfa6 <_strtod_l+0x246>
   dbfe2:	2300      	movs	r3, #0
   dbfe4:	9307      	str	r3, [sp, #28]
   dbfe6:	2201      	movs	r2, #1
   dbfe8:	e77c      	b.n	dbee4 <_strtod_l+0x184>
   dbfea:	f04f 0c00 	mov.w	ip, #0
   dbfee:	f108 0302 	add.w	r3, r8, #2
   dbff2:	931d      	str	r3, [sp, #116]	; 0x74
   dbff4:	f898 3002 	ldrb.w	r3, [r8, #2]
   dbff8:	e785      	b.n	dbf06 <_strtod_l+0x1a6>
   dbffa:	f04f 0c01 	mov.w	ip, #1
   dbffe:	e7f6      	b.n	dbfee <_strtod_l+0x28e>
   dc000:	000deaa4 	.word	0x000deaa4
   dc004:	000de94c 	.word	0x000de94c
   dc008:	7ff00000 	.word	0x7ff00000
   dc00c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc00e:	1c59      	adds	r1, r3, #1
   dc010:	911d      	str	r1, [sp, #116]	; 0x74
   dc012:	785b      	ldrb	r3, [r3, #1]
   dc014:	2b30      	cmp	r3, #48	; 0x30
   dc016:	d0f9      	beq.n	dc00c <_strtod_l+0x2ac>
   dc018:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dc01c:	2908      	cmp	r1, #8
   dc01e:	f63f af79 	bhi.w	dbf14 <_strtod_l+0x1b4>
   dc022:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dc026:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc028:	9308      	str	r3, [sp, #32]
   dc02a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc02c:	1c59      	adds	r1, r3, #1
   dc02e:	911d      	str	r1, [sp, #116]	; 0x74
   dc030:	785b      	ldrb	r3, [r3, #1]
   dc032:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dc036:	2e09      	cmp	r6, #9
   dc038:	d937      	bls.n	dc0aa <_strtod_l+0x34a>
   dc03a:	9e08      	ldr	r6, [sp, #32]
   dc03c:	1b89      	subs	r1, r1, r6
   dc03e:	2908      	cmp	r1, #8
   dc040:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dc044:	dc02      	bgt.n	dc04c <_strtod_l+0x2ec>
   dc046:	4576      	cmp	r6, lr
   dc048:	bfa8      	it	ge
   dc04a:	4676      	movge	r6, lr
   dc04c:	f1bc 0f00 	cmp.w	ip, #0
   dc050:	d000      	beq.n	dc054 <_strtod_l+0x2f4>
   dc052:	4276      	negs	r6, r6
   dc054:	2d00      	cmp	r5, #0
   dc056:	d14f      	bne.n	dc0f8 <_strtod_l+0x398>
   dc058:	9904      	ldr	r1, [sp, #16]
   dc05a:	4301      	orrs	r1, r0
   dc05c:	f47f aec2 	bne.w	dbde4 <_strtod_l+0x84>
   dc060:	2a00      	cmp	r2, #0
   dc062:	f47f aedb 	bne.w	dbe1c <_strtod_l+0xbc>
   dc066:	2b69      	cmp	r3, #105	; 0x69
   dc068:	d027      	beq.n	dc0ba <_strtod_l+0x35a>
   dc06a:	dc24      	bgt.n	dc0b6 <_strtod_l+0x356>
   dc06c:	2b49      	cmp	r3, #73	; 0x49
   dc06e:	d024      	beq.n	dc0ba <_strtod_l+0x35a>
   dc070:	2b4e      	cmp	r3, #78	; 0x4e
   dc072:	f47f aed3 	bne.w	dbe1c <_strtod_l+0xbc>
   dc076:	499e      	ldr	r1, [pc, #632]	; (dc2f0 <_strtod_l+0x590>)
   dc078:	a81d      	add	r0, sp, #116	; 0x74
   dc07a:	f001 f807 	bl	dd08c <__match>
   dc07e:	2800      	cmp	r0, #0
   dc080:	f43f aecc 	beq.w	dbe1c <_strtod_l+0xbc>
   dc084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc086:	781b      	ldrb	r3, [r3, #0]
   dc088:	2b28      	cmp	r3, #40	; 0x28
   dc08a:	d12d      	bne.n	dc0e8 <_strtod_l+0x388>
   dc08c:	4999      	ldr	r1, [pc, #612]	; (dc2f4 <_strtod_l+0x594>)
   dc08e:	aa20      	add	r2, sp, #128	; 0x80
   dc090:	a81d      	add	r0, sp, #116	; 0x74
   dc092:	f001 f80f 	bl	dd0b4 <__hexnan>
   dc096:	2805      	cmp	r0, #5
   dc098:	d126      	bne.n	dc0e8 <_strtod_l+0x388>
   dc09a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dc09c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dc0a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dc0a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dc0a8:	e69c      	b.n	dbde4 <_strtod_l+0x84>
   dc0aa:	210a      	movs	r1, #10
   dc0ac:	fb01 3e0e 	mla	lr, r1, lr, r3
   dc0b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dc0b4:	e7b9      	b.n	dc02a <_strtod_l+0x2ca>
   dc0b6:	2b6e      	cmp	r3, #110	; 0x6e
   dc0b8:	e7db      	b.n	dc072 <_strtod_l+0x312>
   dc0ba:	498f      	ldr	r1, [pc, #572]	; (dc2f8 <_strtod_l+0x598>)
   dc0bc:	a81d      	add	r0, sp, #116	; 0x74
   dc0be:	f000 ffe5 	bl	dd08c <__match>
   dc0c2:	2800      	cmp	r0, #0
   dc0c4:	f43f aeaa 	beq.w	dbe1c <_strtod_l+0xbc>
   dc0c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc0ca:	498c      	ldr	r1, [pc, #560]	; (dc2fc <_strtod_l+0x59c>)
   dc0cc:	3b01      	subs	r3, #1
   dc0ce:	a81d      	add	r0, sp, #116	; 0x74
   dc0d0:	931d      	str	r3, [sp, #116]	; 0x74
   dc0d2:	f000 ffdb 	bl	dd08c <__match>
   dc0d6:	b910      	cbnz	r0, dc0de <_strtod_l+0x37e>
   dc0d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc0da:	3301      	adds	r3, #1
   dc0dc:	931d      	str	r3, [sp, #116]	; 0x74
   dc0de:	f8df b22c 	ldr.w	fp, [pc, #556]	; dc30c <_strtod_l+0x5ac>
   dc0e2:	f04f 0a00 	mov.w	sl, #0
   dc0e6:	e67d      	b.n	dbde4 <_strtod_l+0x84>
   dc0e8:	4885      	ldr	r0, [pc, #532]	; (dc300 <_strtod_l+0x5a0>)
   dc0ea:	f001 fce1 	bl	ddab0 <nan>
   dc0ee:	ed8d 0b04 	vstr	d0, [sp, #16]
   dc0f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dc0f6:	e675      	b.n	dbde4 <_strtod_l+0x84>
   dc0f8:	9b07      	ldr	r3, [sp, #28]
   dc0fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   dc0fc:	1af3      	subs	r3, r6, r3
   dc0fe:	2f00      	cmp	r7, #0
   dc100:	bf08      	it	eq
   dc102:	462f      	moveq	r7, r5
   dc104:	2d10      	cmp	r5, #16
   dc106:	9308      	str	r3, [sp, #32]
   dc108:	46a8      	mov	r8, r5
   dc10a:	bfa8      	it	ge
   dc10c:	f04f 0810 	movge.w	r8, #16
   dc110:	f7ff f8ce 	bl	db2b0 <__aeabi_ui2d>
   dc114:	2d09      	cmp	r5, #9
   dc116:	4682      	mov	sl, r0
   dc118:	468b      	mov	fp, r1
   dc11a:	dd13      	ble.n	dc144 <_strtod_l+0x3e4>
   dc11c:	4b79      	ldr	r3, [pc, #484]	; (dc304 <_strtod_l+0x5a4>)
   dc11e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dc122:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dc126:	f7ff f93d 	bl	db3a4 <__aeabi_dmul>
   dc12a:	4682      	mov	sl, r0
   dc12c:	4648      	mov	r0, r9
   dc12e:	468b      	mov	fp, r1
   dc130:	f7ff f8be 	bl	db2b0 <__aeabi_ui2d>
   dc134:	4602      	mov	r2, r0
   dc136:	460b      	mov	r3, r1
   dc138:	4650      	mov	r0, sl
   dc13a:	4659      	mov	r1, fp
   dc13c:	f7fe ff7c 	bl	db038 <__adddf3>
   dc140:	4682      	mov	sl, r0
   dc142:	468b      	mov	fp, r1
   dc144:	2d0f      	cmp	r5, #15
   dc146:	dc38      	bgt.n	dc1ba <_strtod_l+0x45a>
   dc148:	9b08      	ldr	r3, [sp, #32]
   dc14a:	2b00      	cmp	r3, #0
   dc14c:	f43f ae4a 	beq.w	dbde4 <_strtod_l+0x84>
   dc150:	dd24      	ble.n	dc19c <_strtod_l+0x43c>
   dc152:	2b16      	cmp	r3, #22
   dc154:	dc0b      	bgt.n	dc16e <_strtod_l+0x40e>
   dc156:	4d6b      	ldr	r5, [pc, #428]	; (dc304 <_strtod_l+0x5a4>)
   dc158:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dc15c:	e9d5 0100 	ldrd	r0, r1, [r5]
   dc160:	4652      	mov	r2, sl
   dc162:	465b      	mov	r3, fp
   dc164:	f7ff f91e 	bl	db3a4 <__aeabi_dmul>
   dc168:	4682      	mov	sl, r0
   dc16a:	468b      	mov	fp, r1
   dc16c:	e63a      	b.n	dbde4 <_strtod_l+0x84>
   dc16e:	9a08      	ldr	r2, [sp, #32]
   dc170:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dc174:	4293      	cmp	r3, r2
   dc176:	db20      	blt.n	dc1ba <_strtod_l+0x45a>
   dc178:	4c62      	ldr	r4, [pc, #392]	; (dc304 <_strtod_l+0x5a4>)
   dc17a:	f1c5 050f 	rsb	r5, r5, #15
   dc17e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dc182:	4652      	mov	r2, sl
   dc184:	465b      	mov	r3, fp
   dc186:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc18a:	f7ff f90b 	bl	db3a4 <__aeabi_dmul>
   dc18e:	9b08      	ldr	r3, [sp, #32]
   dc190:	1b5d      	subs	r5, r3, r5
   dc192:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dc196:	e9d4 2300 	ldrd	r2, r3, [r4]
   dc19a:	e7e3      	b.n	dc164 <_strtod_l+0x404>
   dc19c:	9b08      	ldr	r3, [sp, #32]
   dc19e:	3316      	adds	r3, #22
   dc1a0:	db0b      	blt.n	dc1ba <_strtod_l+0x45a>
   dc1a2:	9b07      	ldr	r3, [sp, #28]
   dc1a4:	4a57      	ldr	r2, [pc, #348]	; (dc304 <_strtod_l+0x5a4>)
   dc1a6:	1b9e      	subs	r6, r3, r6
   dc1a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dc1ac:	e9d6 2300 	ldrd	r2, r3, [r6]
   dc1b0:	4650      	mov	r0, sl
   dc1b2:	4659      	mov	r1, fp
   dc1b4:	f7ff fa20 	bl	db5f8 <__aeabi_ddiv>
   dc1b8:	e7d6      	b.n	dc168 <_strtod_l+0x408>
   dc1ba:	9b08      	ldr	r3, [sp, #32]
   dc1bc:	eba5 0808 	sub.w	r8, r5, r8
   dc1c0:	4498      	add	r8, r3
   dc1c2:	f1b8 0f00 	cmp.w	r8, #0
   dc1c6:	dd71      	ble.n	dc2ac <_strtod_l+0x54c>
   dc1c8:	f018 030f 	ands.w	r3, r8, #15
   dc1cc:	d00a      	beq.n	dc1e4 <_strtod_l+0x484>
   dc1ce:	494d      	ldr	r1, [pc, #308]	; (dc304 <_strtod_l+0x5a4>)
   dc1d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dc1d4:	4652      	mov	r2, sl
   dc1d6:	465b      	mov	r3, fp
   dc1d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc1dc:	f7ff f8e2 	bl	db3a4 <__aeabi_dmul>
   dc1e0:	4682      	mov	sl, r0
   dc1e2:	468b      	mov	fp, r1
   dc1e4:	f038 080f 	bics.w	r8, r8, #15
   dc1e8:	d04d      	beq.n	dc286 <_strtod_l+0x526>
   dc1ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dc1ee:	dd22      	ble.n	dc236 <_strtod_l+0x4d6>
   dc1f0:	2500      	movs	r5, #0
   dc1f2:	462e      	mov	r6, r5
   dc1f4:	9509      	str	r5, [sp, #36]	; 0x24
   dc1f6:	9507      	str	r5, [sp, #28]
   dc1f8:	2322      	movs	r3, #34	; 0x22
   dc1fa:	f8df b110 	ldr.w	fp, [pc, #272]	; dc30c <_strtod_l+0x5ac>
   dc1fe:	6023      	str	r3, [r4, #0]
   dc200:	f04f 0a00 	mov.w	sl, #0
   dc204:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc206:	2b00      	cmp	r3, #0
   dc208:	f43f adec 	beq.w	dbde4 <_strtod_l+0x84>
   dc20c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc20e:	4620      	mov	r0, r4
   dc210:	f001 f832 	bl	dd278 <_Bfree>
   dc214:	9907      	ldr	r1, [sp, #28]
   dc216:	4620      	mov	r0, r4
   dc218:	f001 f82e 	bl	dd278 <_Bfree>
   dc21c:	4631      	mov	r1, r6
   dc21e:	4620      	mov	r0, r4
   dc220:	f001 f82a 	bl	dd278 <_Bfree>
   dc224:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc226:	4620      	mov	r0, r4
   dc228:	f001 f826 	bl	dd278 <_Bfree>
   dc22c:	4629      	mov	r1, r5
   dc22e:	4620      	mov	r0, r4
   dc230:	f001 f822 	bl	dd278 <_Bfree>
   dc234:	e5d6      	b.n	dbde4 <_strtod_l+0x84>
   dc236:	2300      	movs	r3, #0
   dc238:	ea4f 1828 	mov.w	r8, r8, asr #4
   dc23c:	4650      	mov	r0, sl
   dc23e:	4659      	mov	r1, fp
   dc240:	4699      	mov	r9, r3
   dc242:	f1b8 0f01 	cmp.w	r8, #1
   dc246:	dc21      	bgt.n	dc28c <_strtod_l+0x52c>
   dc248:	b10b      	cbz	r3, dc24e <_strtod_l+0x4ee>
   dc24a:	4682      	mov	sl, r0
   dc24c:	468b      	mov	fp, r1
   dc24e:	4b2e      	ldr	r3, [pc, #184]	; (dc308 <_strtod_l+0x5a8>)
   dc250:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dc254:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dc258:	4652      	mov	r2, sl
   dc25a:	465b      	mov	r3, fp
   dc25c:	e9d9 0100 	ldrd	r0, r1, [r9]
   dc260:	f7ff f8a0 	bl	db3a4 <__aeabi_dmul>
   dc264:	4b29      	ldr	r3, [pc, #164]	; (dc30c <_strtod_l+0x5ac>)
   dc266:	460a      	mov	r2, r1
   dc268:	400b      	ands	r3, r1
   dc26a:	4929      	ldr	r1, [pc, #164]	; (dc310 <_strtod_l+0x5b0>)
   dc26c:	428b      	cmp	r3, r1
   dc26e:	4682      	mov	sl, r0
   dc270:	d8be      	bhi.n	dc1f0 <_strtod_l+0x490>
   dc272:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dc276:	428b      	cmp	r3, r1
   dc278:	bf86      	itte	hi
   dc27a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dc314 <_strtod_l+0x5b4>
   dc27e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dc282:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dc286:	2300      	movs	r3, #0
   dc288:	9304      	str	r3, [sp, #16]
   dc28a:	e081      	b.n	dc390 <_strtod_l+0x630>
   dc28c:	f018 0f01 	tst.w	r8, #1
   dc290:	d007      	beq.n	dc2a2 <_strtod_l+0x542>
   dc292:	4b1d      	ldr	r3, [pc, #116]	; (dc308 <_strtod_l+0x5a8>)
   dc294:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dc298:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc29c:	f7ff f882 	bl	db3a4 <__aeabi_dmul>
   dc2a0:	2301      	movs	r3, #1
   dc2a2:	f109 0901 	add.w	r9, r9, #1
   dc2a6:	ea4f 0868 	mov.w	r8, r8, asr #1
   dc2aa:	e7ca      	b.n	dc242 <_strtod_l+0x4e2>
   dc2ac:	d0eb      	beq.n	dc286 <_strtod_l+0x526>
   dc2ae:	f1c8 0800 	rsb	r8, r8, #0
   dc2b2:	f018 020f 	ands.w	r2, r8, #15
   dc2b6:	d00a      	beq.n	dc2ce <_strtod_l+0x56e>
   dc2b8:	4b12      	ldr	r3, [pc, #72]	; (dc304 <_strtod_l+0x5a4>)
   dc2ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dc2be:	4650      	mov	r0, sl
   dc2c0:	4659      	mov	r1, fp
   dc2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc2c6:	f7ff f997 	bl	db5f8 <__aeabi_ddiv>
   dc2ca:	4682      	mov	sl, r0
   dc2cc:	468b      	mov	fp, r1
   dc2ce:	ea5f 1828 	movs.w	r8, r8, asr #4
   dc2d2:	d0d8      	beq.n	dc286 <_strtod_l+0x526>
   dc2d4:	f1b8 0f1f 	cmp.w	r8, #31
   dc2d8:	dd1e      	ble.n	dc318 <_strtod_l+0x5b8>
   dc2da:	2500      	movs	r5, #0
   dc2dc:	462e      	mov	r6, r5
   dc2de:	9509      	str	r5, [sp, #36]	; 0x24
   dc2e0:	9507      	str	r5, [sp, #28]
   dc2e2:	2322      	movs	r3, #34	; 0x22
   dc2e4:	f04f 0a00 	mov.w	sl, #0
   dc2e8:	f04f 0b00 	mov.w	fp, #0
   dc2ec:	6023      	str	r3, [r4, #0]
   dc2ee:	e789      	b.n	dc204 <_strtod_l+0x4a4>
   dc2f0:	000de947 	.word	0x000de947
   dc2f4:	000de960 	.word	0x000de960
   dc2f8:	000de93e 	.word	0x000de93e
   dc2fc:	000de941 	.word	0x000de941
   dc300:	000de761 	.word	0x000de761
   dc304:	000deae0 	.word	0x000deae0
   dc308:	000deab8 	.word	0x000deab8
   dc30c:	7ff00000 	.word	0x7ff00000
   dc310:	7ca00000 	.word	0x7ca00000
   dc314:	7fefffff 	.word	0x7fefffff
   dc318:	f018 0310 	ands.w	r3, r8, #16
   dc31c:	bf18      	it	ne
   dc31e:	236a      	movne	r3, #106	; 0x6a
   dc320:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dc6d8 <_strtod_l+0x978>
   dc324:	9304      	str	r3, [sp, #16]
   dc326:	4650      	mov	r0, sl
   dc328:	4659      	mov	r1, fp
   dc32a:	2300      	movs	r3, #0
   dc32c:	f018 0f01 	tst.w	r8, #1
   dc330:	d004      	beq.n	dc33c <_strtod_l+0x5dc>
   dc332:	e9d9 2300 	ldrd	r2, r3, [r9]
   dc336:	f7ff f835 	bl	db3a4 <__aeabi_dmul>
   dc33a:	2301      	movs	r3, #1
   dc33c:	ea5f 0868 	movs.w	r8, r8, asr #1
   dc340:	f109 0908 	add.w	r9, r9, #8
   dc344:	d1f2      	bne.n	dc32c <_strtod_l+0x5cc>
   dc346:	b10b      	cbz	r3, dc34c <_strtod_l+0x5ec>
   dc348:	4682      	mov	sl, r0
   dc34a:	468b      	mov	fp, r1
   dc34c:	9b04      	ldr	r3, [sp, #16]
   dc34e:	b1bb      	cbz	r3, dc380 <_strtod_l+0x620>
   dc350:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dc354:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dc358:	2b00      	cmp	r3, #0
   dc35a:	4659      	mov	r1, fp
   dc35c:	dd10      	ble.n	dc380 <_strtod_l+0x620>
   dc35e:	2b1f      	cmp	r3, #31
   dc360:	f340 8128 	ble.w	dc5b4 <_strtod_l+0x854>
   dc364:	2b34      	cmp	r3, #52	; 0x34
   dc366:	bfde      	ittt	le
   dc368:	3b20      	suble	r3, #32
   dc36a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dc36e:	fa02 f303 	lslle.w	r3, r2, r3
   dc372:	f04f 0a00 	mov.w	sl, #0
   dc376:	bfcc      	ite	gt
   dc378:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dc37c:	ea03 0b01 	andle.w	fp, r3, r1
   dc380:	2200      	movs	r2, #0
   dc382:	2300      	movs	r3, #0
   dc384:	4650      	mov	r0, sl
   dc386:	4659      	mov	r1, fp
   dc388:	f7ff fa74 	bl	db874 <__aeabi_dcmpeq>
   dc38c:	2800      	cmp	r0, #0
   dc38e:	d1a4      	bne.n	dc2da <_strtod_l+0x57a>
   dc390:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc392:	9300      	str	r3, [sp, #0]
   dc394:	990a      	ldr	r1, [sp, #40]	; 0x28
   dc396:	462b      	mov	r3, r5
   dc398:	463a      	mov	r2, r7
   dc39a:	4620      	mov	r0, r4
   dc39c:	f000 ffc1 	bl	dd322 <__s2b>
   dc3a0:	9009      	str	r0, [sp, #36]	; 0x24
   dc3a2:	2800      	cmp	r0, #0
   dc3a4:	f43f af24 	beq.w	dc1f0 <_strtod_l+0x490>
   dc3a8:	9b07      	ldr	r3, [sp, #28]
   dc3aa:	1b9e      	subs	r6, r3, r6
   dc3ac:	9b08      	ldr	r3, [sp, #32]
   dc3ae:	2b00      	cmp	r3, #0
   dc3b0:	bfb4      	ite	lt
   dc3b2:	4633      	movlt	r3, r6
   dc3b4:	2300      	movge	r3, #0
   dc3b6:	9310      	str	r3, [sp, #64]	; 0x40
   dc3b8:	9b08      	ldr	r3, [sp, #32]
   dc3ba:	2500      	movs	r5, #0
   dc3bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dc3c0:	9318      	str	r3, [sp, #96]	; 0x60
   dc3c2:	462e      	mov	r6, r5
   dc3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc3c6:	4620      	mov	r0, r4
   dc3c8:	6859      	ldr	r1, [r3, #4]
   dc3ca:	f000 ff21 	bl	dd210 <_Balloc>
   dc3ce:	9007      	str	r0, [sp, #28]
   dc3d0:	2800      	cmp	r0, #0
   dc3d2:	f43f af11 	beq.w	dc1f8 <_strtod_l+0x498>
   dc3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc3d8:	691a      	ldr	r2, [r3, #16]
   dc3da:	3202      	adds	r2, #2
   dc3dc:	f103 010c 	add.w	r1, r3, #12
   dc3e0:	0092      	lsls	r2, r2, #2
   dc3e2:	300c      	adds	r0, #12
   dc3e4:	f7ff fbc2 	bl	dbb6c <memcpy>
   dc3e8:	ec4b ab10 	vmov	d0, sl, fp
   dc3ec:	aa20      	add	r2, sp, #128	; 0x80
   dc3ee:	a91f      	add	r1, sp, #124	; 0x7c
   dc3f0:	4620      	mov	r0, r4
   dc3f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dc3f6:	f001 fa83 	bl	dd900 <__d2b>
   dc3fa:	901e      	str	r0, [sp, #120]	; 0x78
   dc3fc:	2800      	cmp	r0, #0
   dc3fe:	f43f aefb 	beq.w	dc1f8 <_strtod_l+0x498>
   dc402:	2101      	movs	r1, #1
   dc404:	4620      	mov	r0, r4
   dc406:	f001 f81a 	bl	dd43e <__i2b>
   dc40a:	4606      	mov	r6, r0
   dc40c:	2800      	cmp	r0, #0
   dc40e:	f43f aef3 	beq.w	dc1f8 <_strtod_l+0x498>
   dc412:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dc414:	9904      	ldr	r1, [sp, #16]
   dc416:	2b00      	cmp	r3, #0
   dc418:	bfab      	itete	ge
   dc41a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dc41c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dc41e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dc420:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dc424:	bfac      	ite	ge
   dc426:	eb03 0902 	addge.w	r9, r3, r2
   dc42a:	1ad7      	sublt	r7, r2, r3
   dc42c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dc42e:	eba3 0801 	sub.w	r8, r3, r1
   dc432:	4490      	add	r8, r2
   dc434:	4ba3      	ldr	r3, [pc, #652]	; (dc6c4 <_strtod_l+0x964>)
   dc436:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc43a:	4598      	cmp	r8, r3
   dc43c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dc440:	f280 80cc 	bge.w	dc5dc <_strtod_l+0x87c>
   dc444:	eba3 0308 	sub.w	r3, r3, r8
   dc448:	2b1f      	cmp	r3, #31
   dc44a:	eba2 0203 	sub.w	r2, r2, r3
   dc44e:	f04f 0101 	mov.w	r1, #1
   dc452:	f300 80b6 	bgt.w	dc5c2 <_strtod_l+0x862>
   dc456:	fa01 f303 	lsl.w	r3, r1, r3
   dc45a:	9311      	str	r3, [sp, #68]	; 0x44
   dc45c:	2300      	movs	r3, #0
   dc45e:	930c      	str	r3, [sp, #48]	; 0x30
   dc460:	eb09 0802 	add.w	r8, r9, r2
   dc464:	9b04      	ldr	r3, [sp, #16]
   dc466:	45c1      	cmp	r9, r8
   dc468:	4417      	add	r7, r2
   dc46a:	441f      	add	r7, r3
   dc46c:	464b      	mov	r3, r9
   dc46e:	bfa8      	it	ge
   dc470:	4643      	movge	r3, r8
   dc472:	42bb      	cmp	r3, r7
   dc474:	bfa8      	it	ge
   dc476:	463b      	movge	r3, r7
   dc478:	2b00      	cmp	r3, #0
   dc47a:	bfc2      	ittt	gt
   dc47c:	eba8 0803 	subgt.w	r8, r8, r3
   dc480:	1aff      	subgt	r7, r7, r3
   dc482:	eba9 0903 	subgt.w	r9, r9, r3
   dc486:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dc488:	2b00      	cmp	r3, #0
   dc48a:	dd17      	ble.n	dc4bc <_strtod_l+0x75c>
   dc48c:	4631      	mov	r1, r6
   dc48e:	461a      	mov	r2, r3
   dc490:	4620      	mov	r0, r4
   dc492:	f001 f879 	bl	dd588 <__pow5mult>
   dc496:	4606      	mov	r6, r0
   dc498:	2800      	cmp	r0, #0
   dc49a:	f43f aead 	beq.w	dc1f8 <_strtod_l+0x498>
   dc49e:	4601      	mov	r1, r0
   dc4a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dc4a2:	4620      	mov	r0, r4
   dc4a4:	f000 ffd4 	bl	dd450 <__multiply>
   dc4a8:	900f      	str	r0, [sp, #60]	; 0x3c
   dc4aa:	2800      	cmp	r0, #0
   dc4ac:	f43f aea4 	beq.w	dc1f8 <_strtod_l+0x498>
   dc4b0:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc4b2:	4620      	mov	r0, r4
   dc4b4:	f000 fee0 	bl	dd278 <_Bfree>
   dc4b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc4ba:	931e      	str	r3, [sp, #120]	; 0x78
   dc4bc:	f1b8 0f00 	cmp.w	r8, #0
   dc4c0:	f300 8091 	bgt.w	dc5e6 <_strtod_l+0x886>
   dc4c4:	9b08      	ldr	r3, [sp, #32]
   dc4c6:	2b00      	cmp	r3, #0
   dc4c8:	dd08      	ble.n	dc4dc <_strtod_l+0x77c>
   dc4ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dc4cc:	9907      	ldr	r1, [sp, #28]
   dc4ce:	4620      	mov	r0, r4
   dc4d0:	f001 f85a 	bl	dd588 <__pow5mult>
   dc4d4:	9007      	str	r0, [sp, #28]
   dc4d6:	2800      	cmp	r0, #0
   dc4d8:	f43f ae8e 	beq.w	dc1f8 <_strtod_l+0x498>
   dc4dc:	2f00      	cmp	r7, #0
   dc4de:	dd08      	ble.n	dc4f2 <_strtod_l+0x792>
   dc4e0:	9907      	ldr	r1, [sp, #28]
   dc4e2:	463a      	mov	r2, r7
   dc4e4:	4620      	mov	r0, r4
   dc4e6:	f001 f89d 	bl	dd624 <__lshift>
   dc4ea:	9007      	str	r0, [sp, #28]
   dc4ec:	2800      	cmp	r0, #0
   dc4ee:	f43f ae83 	beq.w	dc1f8 <_strtod_l+0x498>
   dc4f2:	f1b9 0f00 	cmp.w	r9, #0
   dc4f6:	dd08      	ble.n	dc50a <_strtod_l+0x7aa>
   dc4f8:	4631      	mov	r1, r6
   dc4fa:	464a      	mov	r2, r9
   dc4fc:	4620      	mov	r0, r4
   dc4fe:	f001 f891 	bl	dd624 <__lshift>
   dc502:	4606      	mov	r6, r0
   dc504:	2800      	cmp	r0, #0
   dc506:	f43f ae77 	beq.w	dc1f8 <_strtod_l+0x498>
   dc50a:	9a07      	ldr	r2, [sp, #28]
   dc50c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc50e:	4620      	mov	r0, r4
   dc510:	f001 f903 	bl	dd71a <__mdiff>
   dc514:	4605      	mov	r5, r0
   dc516:	2800      	cmp	r0, #0
   dc518:	f43f ae6e 	beq.w	dc1f8 <_strtod_l+0x498>
   dc51c:	68c3      	ldr	r3, [r0, #12]
   dc51e:	930f      	str	r3, [sp, #60]	; 0x3c
   dc520:	2300      	movs	r3, #0
   dc522:	60c3      	str	r3, [r0, #12]
   dc524:	4631      	mov	r1, r6
   dc526:	f001 f8dc 	bl	dd6e2 <__mcmp>
   dc52a:	2800      	cmp	r0, #0
   dc52c:	da65      	bge.n	dc5fa <_strtod_l+0x89a>
   dc52e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc530:	ea53 030a 	orrs.w	r3, r3, sl
   dc534:	f040 8087 	bne.w	dc646 <_strtod_l+0x8e6>
   dc538:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc53c:	2b00      	cmp	r3, #0
   dc53e:	f040 8082 	bne.w	dc646 <_strtod_l+0x8e6>
   dc542:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc546:	0d1b      	lsrs	r3, r3, #20
   dc548:	051b      	lsls	r3, r3, #20
   dc54a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dc54e:	d97a      	bls.n	dc646 <_strtod_l+0x8e6>
   dc550:	696b      	ldr	r3, [r5, #20]
   dc552:	b913      	cbnz	r3, dc55a <_strtod_l+0x7fa>
   dc554:	692b      	ldr	r3, [r5, #16]
   dc556:	2b01      	cmp	r3, #1
   dc558:	dd75      	ble.n	dc646 <_strtod_l+0x8e6>
   dc55a:	4629      	mov	r1, r5
   dc55c:	2201      	movs	r2, #1
   dc55e:	4620      	mov	r0, r4
   dc560:	f001 f860 	bl	dd624 <__lshift>
   dc564:	4631      	mov	r1, r6
   dc566:	4605      	mov	r5, r0
   dc568:	f001 f8bb 	bl	dd6e2 <__mcmp>
   dc56c:	2800      	cmp	r0, #0
   dc56e:	dd6a      	ble.n	dc646 <_strtod_l+0x8e6>
   dc570:	9904      	ldr	r1, [sp, #16]
   dc572:	4a55      	ldr	r2, [pc, #340]	; (dc6c8 <_strtod_l+0x968>)
   dc574:	465b      	mov	r3, fp
   dc576:	2900      	cmp	r1, #0
   dc578:	f000 8085 	beq.w	dc686 <_strtod_l+0x926>
   dc57c:	ea02 010b 	and.w	r1, r2, fp
   dc580:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dc584:	dc7f      	bgt.n	dc686 <_strtod_l+0x926>
   dc586:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dc58a:	f77f aeaa 	ble.w	dc2e2 <_strtod_l+0x582>
   dc58e:	4a4f      	ldr	r2, [pc, #316]	; (dc6cc <_strtod_l+0x96c>)
   dc590:	2300      	movs	r3, #0
   dc592:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dc596:	4650      	mov	r0, sl
   dc598:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dc59c:	4659      	mov	r1, fp
   dc59e:	f7fe ff01 	bl	db3a4 <__aeabi_dmul>
   dc5a2:	460b      	mov	r3, r1
   dc5a4:	4303      	orrs	r3, r0
   dc5a6:	bf08      	it	eq
   dc5a8:	2322      	moveq	r3, #34	; 0x22
   dc5aa:	4682      	mov	sl, r0
   dc5ac:	468b      	mov	fp, r1
   dc5ae:	bf08      	it	eq
   dc5b0:	6023      	streq	r3, [r4, #0]
   dc5b2:	e62b      	b.n	dc20c <_strtod_l+0x4ac>
   dc5b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc5b8:	fa02 f303 	lsl.w	r3, r2, r3
   dc5bc:	ea03 0a0a 	and.w	sl, r3, sl
   dc5c0:	e6de      	b.n	dc380 <_strtod_l+0x620>
   dc5c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dc5c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dc5ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dc5ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dc5d2:	fa01 f308 	lsl.w	r3, r1, r8
   dc5d6:	930c      	str	r3, [sp, #48]	; 0x30
   dc5d8:	9111      	str	r1, [sp, #68]	; 0x44
   dc5da:	e741      	b.n	dc460 <_strtod_l+0x700>
   dc5dc:	2300      	movs	r3, #0
   dc5de:	930c      	str	r3, [sp, #48]	; 0x30
   dc5e0:	2301      	movs	r3, #1
   dc5e2:	9311      	str	r3, [sp, #68]	; 0x44
   dc5e4:	e73c      	b.n	dc460 <_strtod_l+0x700>
   dc5e6:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc5e8:	4642      	mov	r2, r8
   dc5ea:	4620      	mov	r0, r4
   dc5ec:	f001 f81a 	bl	dd624 <__lshift>
   dc5f0:	901e      	str	r0, [sp, #120]	; 0x78
   dc5f2:	2800      	cmp	r0, #0
   dc5f4:	f47f af66 	bne.w	dc4c4 <_strtod_l+0x764>
   dc5f8:	e5fe      	b.n	dc1f8 <_strtod_l+0x498>
   dc5fa:	465f      	mov	r7, fp
   dc5fc:	d16e      	bne.n	dc6dc <_strtod_l+0x97c>
   dc5fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc600:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc604:	b342      	cbz	r2, dc658 <_strtod_l+0x8f8>
   dc606:	4a32      	ldr	r2, [pc, #200]	; (dc6d0 <_strtod_l+0x970>)
   dc608:	4293      	cmp	r3, r2
   dc60a:	d128      	bne.n	dc65e <_strtod_l+0x8fe>
   dc60c:	9b04      	ldr	r3, [sp, #16]
   dc60e:	4650      	mov	r0, sl
   dc610:	b1eb      	cbz	r3, dc64e <_strtod_l+0x8ee>
   dc612:	4a2d      	ldr	r2, [pc, #180]	; (dc6c8 <_strtod_l+0x968>)
   dc614:	403a      	ands	r2, r7
   dc616:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dc61a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dc61e:	d819      	bhi.n	dc654 <_strtod_l+0x8f4>
   dc620:	0d12      	lsrs	r2, r2, #20
   dc622:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dc626:	fa01 f303 	lsl.w	r3, r1, r3
   dc62a:	4298      	cmp	r0, r3
   dc62c:	d117      	bne.n	dc65e <_strtod_l+0x8fe>
   dc62e:	4b29      	ldr	r3, [pc, #164]	; (dc6d4 <_strtod_l+0x974>)
   dc630:	429f      	cmp	r7, r3
   dc632:	d102      	bne.n	dc63a <_strtod_l+0x8da>
   dc634:	3001      	adds	r0, #1
   dc636:	f43f addf 	beq.w	dc1f8 <_strtod_l+0x498>
   dc63a:	4b23      	ldr	r3, [pc, #140]	; (dc6c8 <_strtod_l+0x968>)
   dc63c:	403b      	ands	r3, r7
   dc63e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dc642:	f04f 0a00 	mov.w	sl, #0
   dc646:	9b04      	ldr	r3, [sp, #16]
   dc648:	2b00      	cmp	r3, #0
   dc64a:	d1a0      	bne.n	dc58e <_strtod_l+0x82e>
   dc64c:	e5de      	b.n	dc20c <_strtod_l+0x4ac>
   dc64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc652:	e7ea      	b.n	dc62a <_strtod_l+0x8ca>
   dc654:	460b      	mov	r3, r1
   dc656:	e7e8      	b.n	dc62a <_strtod_l+0x8ca>
   dc658:	ea53 030a 	orrs.w	r3, r3, sl
   dc65c:	d088      	beq.n	dc570 <_strtod_l+0x810>
   dc65e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dc660:	b1db      	cbz	r3, dc69a <_strtod_l+0x93a>
   dc662:	423b      	tst	r3, r7
   dc664:	d0ef      	beq.n	dc646 <_strtod_l+0x8e6>
   dc666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc668:	9a04      	ldr	r2, [sp, #16]
   dc66a:	4650      	mov	r0, sl
   dc66c:	4659      	mov	r1, fp
   dc66e:	b1c3      	cbz	r3, dc6a2 <_strtod_l+0x942>
   dc670:	f7ff fb58 	bl	dbd24 <sulp>
   dc674:	4602      	mov	r2, r0
   dc676:	460b      	mov	r3, r1
   dc678:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc67c:	f7fe fcdc 	bl	db038 <__adddf3>
   dc680:	4682      	mov	sl, r0
   dc682:	468b      	mov	fp, r1
   dc684:	e7df      	b.n	dc646 <_strtod_l+0x8e6>
   dc686:	4013      	ands	r3, r2
   dc688:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dc68c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dc690:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dc694:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc698:	e7d5      	b.n	dc646 <_strtod_l+0x8e6>
   dc69a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc69c:	ea13 0f0a 	tst.w	r3, sl
   dc6a0:	e7e0      	b.n	dc664 <_strtod_l+0x904>
   dc6a2:	f7ff fb3f 	bl	dbd24 <sulp>
   dc6a6:	4602      	mov	r2, r0
   dc6a8:	460b      	mov	r3, r1
   dc6aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc6ae:	f7fe fcc1 	bl	db034 <__aeabi_dsub>
   dc6b2:	2200      	movs	r2, #0
   dc6b4:	2300      	movs	r3, #0
   dc6b6:	4682      	mov	sl, r0
   dc6b8:	468b      	mov	fp, r1
   dc6ba:	f7ff f8db 	bl	db874 <__aeabi_dcmpeq>
   dc6be:	2800      	cmp	r0, #0
   dc6c0:	d0c1      	beq.n	dc646 <_strtod_l+0x8e6>
   dc6c2:	e60e      	b.n	dc2e2 <_strtod_l+0x582>
   dc6c4:	fffffc02 	.word	0xfffffc02
   dc6c8:	7ff00000 	.word	0x7ff00000
   dc6cc:	39500000 	.word	0x39500000
   dc6d0:	000fffff 	.word	0x000fffff
   dc6d4:	7fefffff 	.word	0x7fefffff
   dc6d8:	000de978 	.word	0x000de978
   dc6dc:	4631      	mov	r1, r6
   dc6de:	4628      	mov	r0, r5
   dc6e0:	f001 f95e 	bl	dd9a0 <__ratio>
   dc6e4:	ec59 8b10 	vmov	r8, r9, d0
   dc6e8:	ee10 0a10 	vmov	r0, s0
   dc6ec:	2200      	movs	r2, #0
   dc6ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc6f2:	4649      	mov	r1, r9
   dc6f4:	f7ff f8d2 	bl	db89c <__aeabi_dcmple>
   dc6f8:	2800      	cmp	r0, #0
   dc6fa:	d07c      	beq.n	dc7f6 <_strtod_l+0xa96>
   dc6fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc6fe:	2b00      	cmp	r3, #0
   dc700:	d04c      	beq.n	dc79c <_strtod_l+0xa3c>
   dc702:	4b95      	ldr	r3, [pc, #596]	; (dc958 <_strtod_l+0xbf8>)
   dc704:	2200      	movs	r2, #0
   dc706:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc70a:	f8df 924c 	ldr.w	r9, [pc, #588]	; dc958 <_strtod_l+0xbf8>
   dc70e:	f04f 0800 	mov.w	r8, #0
   dc712:	4b92      	ldr	r3, [pc, #584]	; (dc95c <_strtod_l+0xbfc>)
   dc714:	403b      	ands	r3, r7
   dc716:	9311      	str	r3, [sp, #68]	; 0x44
   dc718:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc71a:	4b91      	ldr	r3, [pc, #580]	; (dc960 <_strtod_l+0xc00>)
   dc71c:	429a      	cmp	r2, r3
   dc71e:	f040 80b2 	bne.w	dc886 <_strtod_l+0xb26>
   dc722:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc72a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dc72e:	ec4b ab10 	vmov	d0, sl, fp
   dc732:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dc736:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc73a:	f001 f865 	bl	dd808 <__ulp>
   dc73e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc742:	ec53 2b10 	vmov	r2, r3, d0
   dc746:	f7fe fe2d 	bl	db3a4 <__aeabi_dmul>
   dc74a:	4652      	mov	r2, sl
   dc74c:	465b      	mov	r3, fp
   dc74e:	f7fe fc73 	bl	db038 <__adddf3>
   dc752:	460b      	mov	r3, r1
   dc754:	4981      	ldr	r1, [pc, #516]	; (dc95c <_strtod_l+0xbfc>)
   dc756:	4a83      	ldr	r2, [pc, #524]	; (dc964 <_strtod_l+0xc04>)
   dc758:	4019      	ands	r1, r3
   dc75a:	4291      	cmp	r1, r2
   dc75c:	4682      	mov	sl, r0
   dc75e:	d95e      	bls.n	dc81e <_strtod_l+0xabe>
   dc760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc762:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dc766:	4293      	cmp	r3, r2
   dc768:	d103      	bne.n	dc772 <_strtod_l+0xa12>
   dc76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc76c:	3301      	adds	r3, #1
   dc76e:	f43f ad43 	beq.w	dc1f8 <_strtod_l+0x498>
   dc772:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dc970 <_strtod_l+0xc10>
   dc776:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc77a:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc77c:	4620      	mov	r0, r4
   dc77e:	f000 fd7b 	bl	dd278 <_Bfree>
   dc782:	9907      	ldr	r1, [sp, #28]
   dc784:	4620      	mov	r0, r4
   dc786:	f000 fd77 	bl	dd278 <_Bfree>
   dc78a:	4631      	mov	r1, r6
   dc78c:	4620      	mov	r0, r4
   dc78e:	f000 fd73 	bl	dd278 <_Bfree>
   dc792:	4629      	mov	r1, r5
   dc794:	4620      	mov	r0, r4
   dc796:	f000 fd6f 	bl	dd278 <_Bfree>
   dc79a:	e613      	b.n	dc3c4 <_strtod_l+0x664>
   dc79c:	f1ba 0f00 	cmp.w	sl, #0
   dc7a0:	d11b      	bne.n	dc7da <_strtod_l+0xa7a>
   dc7a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc7a6:	b9f3      	cbnz	r3, dc7e6 <_strtod_l+0xa86>
   dc7a8:	4b6b      	ldr	r3, [pc, #428]	; (dc958 <_strtod_l+0xbf8>)
   dc7aa:	2200      	movs	r2, #0
   dc7ac:	4640      	mov	r0, r8
   dc7ae:	4649      	mov	r1, r9
   dc7b0:	f7ff f86a 	bl	db888 <__aeabi_dcmplt>
   dc7b4:	b9d0      	cbnz	r0, dc7ec <_strtod_l+0xa8c>
   dc7b6:	4640      	mov	r0, r8
   dc7b8:	4649      	mov	r1, r9
   dc7ba:	4b6b      	ldr	r3, [pc, #428]	; (dc968 <_strtod_l+0xc08>)
   dc7bc:	2200      	movs	r2, #0
   dc7be:	f7fe fdf1 	bl	db3a4 <__aeabi_dmul>
   dc7c2:	4680      	mov	r8, r0
   dc7c4:	4689      	mov	r9, r1
   dc7c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dc7ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dc7ce:	931b      	str	r3, [sp, #108]	; 0x6c
   dc7d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dc7d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc7d8:	e79b      	b.n	dc712 <_strtod_l+0x9b2>
   dc7da:	f1ba 0f01 	cmp.w	sl, #1
   dc7de:	d102      	bne.n	dc7e6 <_strtod_l+0xa86>
   dc7e0:	2f00      	cmp	r7, #0
   dc7e2:	f43f ad7e 	beq.w	dc2e2 <_strtod_l+0x582>
   dc7e6:	4b61      	ldr	r3, [pc, #388]	; (dc96c <_strtod_l+0xc0c>)
   dc7e8:	2200      	movs	r2, #0
   dc7ea:	e78c      	b.n	dc706 <_strtod_l+0x9a6>
   dc7ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; dc968 <_strtod_l+0xc08>
   dc7f0:	f04f 0800 	mov.w	r8, #0
   dc7f4:	e7e7      	b.n	dc7c6 <_strtod_l+0xa66>
   dc7f6:	4b5c      	ldr	r3, [pc, #368]	; (dc968 <_strtod_l+0xc08>)
   dc7f8:	4640      	mov	r0, r8
   dc7fa:	4649      	mov	r1, r9
   dc7fc:	2200      	movs	r2, #0
   dc7fe:	f7fe fdd1 	bl	db3a4 <__aeabi_dmul>
   dc802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc804:	4680      	mov	r8, r0
   dc806:	4689      	mov	r9, r1
   dc808:	b933      	cbnz	r3, dc818 <_strtod_l+0xab8>
   dc80a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc80e:	9012      	str	r0, [sp, #72]	; 0x48
   dc810:	9313      	str	r3, [sp, #76]	; 0x4c
   dc812:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dc816:	e7dd      	b.n	dc7d4 <_strtod_l+0xa74>
   dc818:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dc81c:	e7f9      	b.n	dc812 <_strtod_l+0xab2>
   dc81e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dc822:	9b04      	ldr	r3, [sp, #16]
   dc824:	2b00      	cmp	r3, #0
   dc826:	d1a8      	bne.n	dc77a <_strtod_l+0xa1a>
   dc828:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc82c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc82e:	0d1b      	lsrs	r3, r3, #20
   dc830:	051b      	lsls	r3, r3, #20
   dc832:	429a      	cmp	r2, r3
   dc834:	d1a1      	bne.n	dc77a <_strtod_l+0xa1a>
   dc836:	4640      	mov	r0, r8
   dc838:	4649      	mov	r1, r9
   dc83a:	f001 f955 	bl	ddae8 <__aeabi_d2lz>
   dc83e:	f7fe fd83 	bl	db348 <__aeabi_l2d>
   dc842:	4602      	mov	r2, r0
   dc844:	460b      	mov	r3, r1
   dc846:	4640      	mov	r0, r8
   dc848:	4649      	mov	r1, r9
   dc84a:	f7fe fbf3 	bl	db034 <__aeabi_dsub>
   dc84e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc850:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc854:	ea43 030a 	orr.w	r3, r3, sl
   dc858:	4313      	orrs	r3, r2
   dc85a:	4680      	mov	r8, r0
   dc85c:	4689      	mov	r9, r1
   dc85e:	d053      	beq.n	dc908 <_strtod_l+0xba8>
   dc860:	a335      	add	r3, pc, #212	; (adr r3, dc938 <_strtod_l+0xbd8>)
   dc862:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc866:	f7ff f80f 	bl	db888 <__aeabi_dcmplt>
   dc86a:	2800      	cmp	r0, #0
   dc86c:	f47f acce 	bne.w	dc20c <_strtod_l+0x4ac>
   dc870:	a333      	add	r3, pc, #204	; (adr r3, dc940 <_strtod_l+0xbe0>)
   dc872:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc876:	4640      	mov	r0, r8
   dc878:	4649      	mov	r1, r9
   dc87a:	f7ff f823 	bl	db8c4 <__aeabi_dcmpgt>
   dc87e:	2800      	cmp	r0, #0
   dc880:	f43f af7b 	beq.w	dc77a <_strtod_l+0xa1a>
   dc884:	e4c2      	b.n	dc20c <_strtod_l+0x4ac>
   dc886:	9b04      	ldr	r3, [sp, #16]
   dc888:	b333      	cbz	r3, dc8d8 <_strtod_l+0xb78>
   dc88a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc88c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dc890:	d822      	bhi.n	dc8d8 <_strtod_l+0xb78>
   dc892:	a32d      	add	r3, pc, #180	; (adr r3, dc948 <_strtod_l+0xbe8>)
   dc894:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc898:	4640      	mov	r0, r8
   dc89a:	4649      	mov	r1, r9
   dc89c:	f7fe fffe 	bl	db89c <__aeabi_dcmple>
   dc8a0:	b1a0      	cbz	r0, dc8cc <_strtod_l+0xb6c>
   dc8a2:	4649      	mov	r1, r9
   dc8a4:	4640      	mov	r0, r8
   dc8a6:	f7ff f855 	bl	db954 <__aeabi_d2uiz>
   dc8aa:	2801      	cmp	r0, #1
   dc8ac:	bf38      	it	cc
   dc8ae:	2001      	movcc	r0, #1
   dc8b0:	f7fe fcfe 	bl	db2b0 <__aeabi_ui2d>
   dc8b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc8b6:	4680      	mov	r8, r0
   dc8b8:	4689      	mov	r9, r1
   dc8ba:	bb13      	cbnz	r3, dc902 <_strtod_l+0xba2>
   dc8bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc8c0:	9014      	str	r0, [sp, #80]	; 0x50
   dc8c2:	9315      	str	r3, [sp, #84]	; 0x54
   dc8c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dc8c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc8cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dc8ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc8d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dc8d4:	1a9b      	subs	r3, r3, r2
   dc8d6:	930d      	str	r3, [sp, #52]	; 0x34
   dc8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc8dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dc8e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc8e4:	f000 ff90 	bl	dd808 <__ulp>
   dc8e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc8ec:	ec53 2b10 	vmov	r2, r3, d0
   dc8f0:	f7fe fd58 	bl	db3a4 <__aeabi_dmul>
   dc8f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc8f8:	f7fe fb9e 	bl	db038 <__adddf3>
   dc8fc:	4682      	mov	sl, r0
   dc8fe:	468b      	mov	fp, r1
   dc900:	e78f      	b.n	dc822 <_strtod_l+0xac2>
   dc902:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dc906:	e7dd      	b.n	dc8c4 <_strtod_l+0xb64>
   dc908:	a311      	add	r3, pc, #68	; (adr r3, dc950 <_strtod_l+0xbf0>)
   dc90a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc90e:	f7fe ffbb 	bl	db888 <__aeabi_dcmplt>
   dc912:	e7b4      	b.n	dc87e <_strtod_l+0xb1e>
   dc914:	2300      	movs	r3, #0
   dc916:	930e      	str	r3, [sp, #56]	; 0x38
   dc918:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dc91a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc91c:	6013      	str	r3, [r2, #0]
   dc91e:	f7ff ba65 	b.w	dbdec <_strtod_l+0x8c>
   dc922:	2b65      	cmp	r3, #101	; 0x65
   dc924:	f43f ab5d 	beq.w	dbfe2 <_strtod_l+0x282>
   dc928:	2b45      	cmp	r3, #69	; 0x45
   dc92a:	f43f ab5a 	beq.w	dbfe2 <_strtod_l+0x282>
   dc92e:	2201      	movs	r2, #1
   dc930:	f7ff bb92 	b.w	dc058 <_strtod_l+0x2f8>
   dc934:	f3af 8000 	nop.w
   dc938:	94a03595 	.word	0x94a03595
   dc93c:	3fdfffff 	.word	0x3fdfffff
   dc940:	35afe535 	.word	0x35afe535
   dc944:	3fe00000 	.word	0x3fe00000
   dc948:	ffc00000 	.word	0xffc00000
   dc94c:	41dfffff 	.word	0x41dfffff
   dc950:	94a03595 	.word	0x94a03595
   dc954:	3fcfffff 	.word	0x3fcfffff
   dc958:	3ff00000 	.word	0x3ff00000
   dc95c:	7ff00000 	.word	0x7ff00000
   dc960:	7fe00000 	.word	0x7fe00000
   dc964:	7c9fffff 	.word	0x7c9fffff
   dc968:	3fe00000 	.word	0x3fe00000
   dc96c:	bff00000 	.word	0xbff00000
   dc970:	7fefffff 	.word	0x7fefffff

000dc974 <strtof>:
   dc974:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   dc978:	4e26      	ldr	r6, [pc, #152]	; (dca14 <strtof+0xa0>)
   dc97a:	4b27      	ldr	r3, [pc, #156]	; (dca18 <strtof+0xa4>)
   dc97c:	460a      	mov	r2, r1
   dc97e:	ed2d 8b02 	vpush	{d8}
   dc982:	4601      	mov	r1, r0
   dc984:	6830      	ldr	r0, [r6, #0]
   dc986:	f7ff f9eb 	bl	dbd60 <_strtod_l>
   dc98a:	ec55 4b10 	vmov	r4, r5, d0
   dc98e:	ee10 2a10 	vmov	r2, s0
   dc992:	ee10 0a10 	vmov	r0, s0
   dc996:	462b      	mov	r3, r5
   dc998:	4629      	mov	r1, r5
   dc99a:	f7fe ff9d 	bl	db8d8 <__aeabi_dcmpun>
   dc99e:	b190      	cbz	r0, dc9c6 <strtof+0x52>
   dc9a0:	2d00      	cmp	r5, #0
   dc9a2:	481e      	ldr	r0, [pc, #120]	; (dca1c <strtof+0xa8>)
   dc9a4:	da09      	bge.n	dc9ba <strtof+0x46>
   dc9a6:	f001 f88b 	bl	ddac0 <nanf>
   dc9aa:	eeb1 8a40 	vneg.f32	s16, s0
   dc9ae:	eeb0 0a48 	vmov.f32	s0, s16
   dc9b2:	ecbd 8b02 	vpop	{d8}
   dc9b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   dc9ba:	ecbd 8b02 	vpop	{d8}
   dc9be:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   dc9c2:	f001 b87d 	b.w	ddac0 <nanf>
   dc9c6:	4620      	mov	r0, r4
   dc9c8:	4629      	mov	r1, r5
   dc9ca:	f7fe ffe3 	bl	db994 <__aeabi_d2f>
   dc9ce:	ee08 0a10 	vmov	s16, r0
   dc9d2:	eddf 7a13 	vldr	s15, [pc, #76]	; dca20 <strtof+0xac>
   dc9d6:	eeb0 7ac8 	vabs.f32	s14, s16
   dc9da:	eeb4 7a67 	vcmp.f32	s14, s15
   dc9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc9e2:	dde4      	ble.n	dc9ae <strtof+0x3a>
   dc9e4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
   dc9e8:	4b0e      	ldr	r3, [pc, #56]	; (dca24 <strtof+0xb0>)
   dc9ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc9ee:	4620      	mov	r0, r4
   dc9f0:	4649      	mov	r1, r9
   dc9f2:	f7fe ff71 	bl	db8d8 <__aeabi_dcmpun>
   dc9f6:	b940      	cbnz	r0, dca0a <strtof+0x96>
   dc9f8:	4b0a      	ldr	r3, [pc, #40]	; (dca24 <strtof+0xb0>)
   dc9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc9fe:	4620      	mov	r0, r4
   dca00:	4649      	mov	r1, r9
   dca02:	f7fe ff4b 	bl	db89c <__aeabi_dcmple>
   dca06:	2800      	cmp	r0, #0
   dca08:	d0d1      	beq.n	dc9ae <strtof+0x3a>
   dca0a:	6833      	ldr	r3, [r6, #0]
   dca0c:	2222      	movs	r2, #34	; 0x22
   dca0e:	601a      	str	r2, [r3, #0]
   dca10:	e7cd      	b.n	dc9ae <strtof+0x3a>
   dca12:	bf00      	nop
   dca14:	2003e1f8 	.word	0x2003e1f8
   dca18:	2003e260 	.word	0x2003e260
   dca1c:	000de761 	.word	0x000de761
   dca20:	7f7fffff 	.word	0x7f7fffff
   dca24:	7fefffff 	.word	0x7fefffff

000dca28 <_strtol_l.isra.0>:
   dca28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dca2c:	4e3a      	ldr	r6, [pc, #232]	; (dcb18 <_strtol_l.isra.0+0xf0>)
   dca2e:	4686      	mov	lr, r0
   dca30:	468c      	mov	ip, r1
   dca32:	4660      	mov	r0, ip
   dca34:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dca38:	5da5      	ldrb	r5, [r4, r6]
   dca3a:	f015 0508 	ands.w	r5, r5, #8
   dca3e:	d1f8      	bne.n	dca32 <_strtol_l.isra.0+0xa>
   dca40:	2c2d      	cmp	r4, #45	; 0x2d
   dca42:	d133      	bne.n	dcaac <_strtol_l.isra.0+0x84>
   dca44:	f89c 4000 	ldrb.w	r4, [ip]
   dca48:	f04f 0801 	mov.w	r8, #1
   dca4c:	f100 0c02 	add.w	ip, r0, #2
   dca50:	2b00      	cmp	r3, #0
   dca52:	d05c      	beq.n	dcb0e <_strtol_l.isra.0+0xe6>
   dca54:	2b10      	cmp	r3, #16
   dca56:	d10c      	bne.n	dca72 <_strtol_l.isra.0+0x4a>
   dca58:	2c30      	cmp	r4, #48	; 0x30
   dca5a:	d10a      	bne.n	dca72 <_strtol_l.isra.0+0x4a>
   dca5c:	f89c 0000 	ldrb.w	r0, [ip]
   dca60:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dca64:	2858      	cmp	r0, #88	; 0x58
   dca66:	d14d      	bne.n	dcb04 <_strtol_l.isra.0+0xdc>
   dca68:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dca6c:	2310      	movs	r3, #16
   dca6e:	f10c 0c02 	add.w	ip, ip, #2
   dca72:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dca76:	3f01      	subs	r7, #1
   dca78:	2600      	movs	r6, #0
   dca7a:	fbb7 f9f3 	udiv	r9, r7, r3
   dca7e:	4630      	mov	r0, r6
   dca80:	fb03 7a19 	mls	sl, r3, r9, r7
   dca84:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dca88:	2d09      	cmp	r5, #9
   dca8a:	d818      	bhi.n	dcabe <_strtol_l.isra.0+0x96>
   dca8c:	462c      	mov	r4, r5
   dca8e:	42a3      	cmp	r3, r4
   dca90:	dd24      	ble.n	dcadc <_strtol_l.isra.0+0xb4>
   dca92:	1c75      	adds	r5, r6, #1
   dca94:	d007      	beq.n	dcaa6 <_strtol_l.isra.0+0x7e>
   dca96:	4581      	cmp	r9, r0
   dca98:	d31d      	bcc.n	dcad6 <_strtol_l.isra.0+0xae>
   dca9a:	d101      	bne.n	dcaa0 <_strtol_l.isra.0+0x78>
   dca9c:	45a2      	cmp	sl, r4
   dca9e:	db1a      	blt.n	dcad6 <_strtol_l.isra.0+0xae>
   dcaa0:	fb00 4003 	mla	r0, r0, r3, r4
   dcaa4:	2601      	movs	r6, #1
   dcaa6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dcaaa:	e7eb      	b.n	dca84 <_strtol_l.isra.0+0x5c>
   dcaac:	2c2b      	cmp	r4, #43	; 0x2b
   dcaae:	bf08      	it	eq
   dcab0:	f89c 4000 	ldrbeq.w	r4, [ip]
   dcab4:	46a8      	mov	r8, r5
   dcab6:	bf08      	it	eq
   dcab8:	f100 0c02 	addeq.w	ip, r0, #2
   dcabc:	e7c8      	b.n	dca50 <_strtol_l.isra.0+0x28>
   dcabe:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dcac2:	2d19      	cmp	r5, #25
   dcac4:	d801      	bhi.n	dcaca <_strtol_l.isra.0+0xa2>
   dcac6:	3c37      	subs	r4, #55	; 0x37
   dcac8:	e7e1      	b.n	dca8e <_strtol_l.isra.0+0x66>
   dcaca:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dcace:	2d19      	cmp	r5, #25
   dcad0:	d804      	bhi.n	dcadc <_strtol_l.isra.0+0xb4>
   dcad2:	3c57      	subs	r4, #87	; 0x57
   dcad4:	e7db      	b.n	dca8e <_strtol_l.isra.0+0x66>
   dcad6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dcada:	e7e4      	b.n	dcaa6 <_strtol_l.isra.0+0x7e>
   dcadc:	1c73      	adds	r3, r6, #1
   dcade:	d106      	bne.n	dcaee <_strtol_l.isra.0+0xc6>
   dcae0:	2322      	movs	r3, #34	; 0x22
   dcae2:	f8ce 3000 	str.w	r3, [lr]
   dcae6:	4638      	mov	r0, r7
   dcae8:	b942      	cbnz	r2, dcafc <_strtol_l.isra.0+0xd4>
   dcaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcaee:	f1b8 0f00 	cmp.w	r8, #0
   dcaf2:	d000      	beq.n	dcaf6 <_strtol_l.isra.0+0xce>
   dcaf4:	4240      	negs	r0, r0
   dcaf6:	2a00      	cmp	r2, #0
   dcaf8:	d0f7      	beq.n	dcaea <_strtol_l.isra.0+0xc2>
   dcafa:	b10e      	cbz	r6, dcb00 <_strtol_l.isra.0+0xd8>
   dcafc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dcb00:	6011      	str	r1, [r2, #0]
   dcb02:	e7f2      	b.n	dcaea <_strtol_l.isra.0+0xc2>
   dcb04:	2430      	movs	r4, #48	; 0x30
   dcb06:	2b00      	cmp	r3, #0
   dcb08:	d1b3      	bne.n	dca72 <_strtol_l.isra.0+0x4a>
   dcb0a:	2308      	movs	r3, #8
   dcb0c:	e7b1      	b.n	dca72 <_strtol_l.isra.0+0x4a>
   dcb0e:	2c30      	cmp	r4, #48	; 0x30
   dcb10:	d0a4      	beq.n	dca5c <_strtol_l.isra.0+0x34>
   dcb12:	230a      	movs	r3, #10
   dcb14:	e7ad      	b.n	dca72 <_strtol_l.isra.0+0x4a>
   dcb16:	bf00      	nop
   dcb18:	000de9a1 	.word	0x000de9a1

000dcb1c <strtol>:
   dcb1c:	4613      	mov	r3, r2
   dcb1e:	460a      	mov	r2, r1
   dcb20:	4601      	mov	r1, r0
   dcb22:	4802      	ldr	r0, [pc, #8]	; (dcb2c <strtol+0x10>)
   dcb24:	6800      	ldr	r0, [r0, #0]
   dcb26:	f7ff bf7f 	b.w	dca28 <_strtol_l.isra.0>
   dcb2a:	bf00      	nop
   dcb2c:	2003e1f8 	.word	0x2003e1f8

000dcb30 <rshift>:
   dcb30:	6903      	ldr	r3, [r0, #16]
   dcb32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dcb36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcb3a:	ea4f 1261 	mov.w	r2, r1, asr #5
   dcb3e:	f100 0414 	add.w	r4, r0, #20
   dcb42:	dd45      	ble.n	dcbd0 <rshift+0xa0>
   dcb44:	f011 011f 	ands.w	r1, r1, #31
   dcb48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dcb4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dcb50:	d10c      	bne.n	dcb6c <rshift+0x3c>
   dcb52:	f100 0710 	add.w	r7, r0, #16
   dcb56:	4629      	mov	r1, r5
   dcb58:	42b1      	cmp	r1, r6
   dcb5a:	d334      	bcc.n	dcbc6 <rshift+0x96>
   dcb5c:	1a9b      	subs	r3, r3, r2
   dcb5e:	009b      	lsls	r3, r3, #2
   dcb60:	1eea      	subs	r2, r5, #3
   dcb62:	4296      	cmp	r6, r2
   dcb64:	bf38      	it	cc
   dcb66:	2300      	movcc	r3, #0
   dcb68:	4423      	add	r3, r4
   dcb6a:	e015      	b.n	dcb98 <rshift+0x68>
   dcb6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dcb70:	f1c1 0820 	rsb	r8, r1, #32
   dcb74:	40cf      	lsrs	r7, r1
   dcb76:	f105 0e04 	add.w	lr, r5, #4
   dcb7a:	46a1      	mov	r9, r4
   dcb7c:	4576      	cmp	r6, lr
   dcb7e:	46f4      	mov	ip, lr
   dcb80:	d815      	bhi.n	dcbae <rshift+0x7e>
   dcb82:	1a9b      	subs	r3, r3, r2
   dcb84:	009a      	lsls	r2, r3, #2
   dcb86:	3a04      	subs	r2, #4
   dcb88:	3501      	adds	r5, #1
   dcb8a:	42ae      	cmp	r6, r5
   dcb8c:	bf38      	it	cc
   dcb8e:	2200      	movcc	r2, #0
   dcb90:	18a3      	adds	r3, r4, r2
   dcb92:	50a7      	str	r7, [r4, r2]
   dcb94:	b107      	cbz	r7, dcb98 <rshift+0x68>
   dcb96:	3304      	adds	r3, #4
   dcb98:	1b1a      	subs	r2, r3, r4
   dcb9a:	42a3      	cmp	r3, r4
   dcb9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dcba0:	bf08      	it	eq
   dcba2:	2300      	moveq	r3, #0
   dcba4:	6102      	str	r2, [r0, #16]
   dcba6:	bf08      	it	eq
   dcba8:	6143      	streq	r3, [r0, #20]
   dcbaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcbae:	f8dc c000 	ldr.w	ip, [ip]
   dcbb2:	fa0c fc08 	lsl.w	ip, ip, r8
   dcbb6:	ea4c 0707 	orr.w	r7, ip, r7
   dcbba:	f849 7b04 	str.w	r7, [r9], #4
   dcbbe:	f85e 7b04 	ldr.w	r7, [lr], #4
   dcbc2:	40cf      	lsrs	r7, r1
   dcbc4:	e7da      	b.n	dcb7c <rshift+0x4c>
   dcbc6:	f851 cb04 	ldr.w	ip, [r1], #4
   dcbca:	f847 cf04 	str.w	ip, [r7, #4]!
   dcbce:	e7c3      	b.n	dcb58 <rshift+0x28>
   dcbd0:	4623      	mov	r3, r4
   dcbd2:	e7e1      	b.n	dcb98 <rshift+0x68>

000dcbd4 <__hexdig_fun>:
   dcbd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dcbd8:	2b09      	cmp	r3, #9
   dcbda:	d802      	bhi.n	dcbe2 <__hexdig_fun+0xe>
   dcbdc:	3820      	subs	r0, #32
   dcbde:	b2c0      	uxtb	r0, r0
   dcbe0:	4770      	bx	lr
   dcbe2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dcbe6:	2b05      	cmp	r3, #5
   dcbe8:	d801      	bhi.n	dcbee <__hexdig_fun+0x1a>
   dcbea:	3847      	subs	r0, #71	; 0x47
   dcbec:	e7f7      	b.n	dcbde <__hexdig_fun+0xa>
   dcbee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dcbf2:	2b05      	cmp	r3, #5
   dcbf4:	d801      	bhi.n	dcbfa <__hexdig_fun+0x26>
   dcbf6:	3827      	subs	r0, #39	; 0x27
   dcbf8:	e7f1      	b.n	dcbde <__hexdig_fun+0xa>
   dcbfa:	2000      	movs	r0, #0
   dcbfc:	4770      	bx	lr
	...

000dcc00 <__gethex>:
   dcc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcc04:	ed2d 8b02 	vpush	{d8}
   dcc08:	b089      	sub	sp, #36	; 0x24
   dcc0a:	ee08 0a10 	vmov	s16, r0
   dcc0e:	9304      	str	r3, [sp, #16]
   dcc10:	4bbc      	ldr	r3, [pc, #752]	; (dcf04 <__gethex+0x304>)
   dcc12:	681b      	ldr	r3, [r3, #0]
   dcc14:	9301      	str	r3, [sp, #4]
   dcc16:	4618      	mov	r0, r3
   dcc18:	468b      	mov	fp, r1
   dcc1a:	4690      	mov	r8, r2
   dcc1c:	f7ff f841 	bl	dbca2 <strlen>
   dcc20:	9b01      	ldr	r3, [sp, #4]
   dcc22:	f8db 2000 	ldr.w	r2, [fp]
   dcc26:	4403      	add	r3, r0
   dcc28:	4682      	mov	sl, r0
   dcc2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dcc2e:	9305      	str	r3, [sp, #20]
   dcc30:	1c93      	adds	r3, r2, #2
   dcc32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dcc36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dcc3a:	32fe      	adds	r2, #254	; 0xfe
   dcc3c:	18d1      	adds	r1, r2, r3
   dcc3e:	461f      	mov	r7, r3
   dcc40:	f813 0b01 	ldrb.w	r0, [r3], #1
   dcc44:	9100      	str	r1, [sp, #0]
   dcc46:	2830      	cmp	r0, #48	; 0x30
   dcc48:	d0f8      	beq.n	dcc3c <__gethex+0x3c>
   dcc4a:	f7ff ffc3 	bl	dcbd4 <__hexdig_fun>
   dcc4e:	4604      	mov	r4, r0
   dcc50:	2800      	cmp	r0, #0
   dcc52:	d13a      	bne.n	dccca <__gethex+0xca>
   dcc54:	9901      	ldr	r1, [sp, #4]
   dcc56:	4652      	mov	r2, sl
   dcc58:	4638      	mov	r0, r7
   dcc5a:	f7ff f82a 	bl	dbcb2 <strncmp>
   dcc5e:	4605      	mov	r5, r0
   dcc60:	2800      	cmp	r0, #0
   dcc62:	d168      	bne.n	dcd36 <__gethex+0x136>
   dcc64:	f817 000a 	ldrb.w	r0, [r7, sl]
   dcc68:	eb07 060a 	add.w	r6, r7, sl
   dcc6c:	f7ff ffb2 	bl	dcbd4 <__hexdig_fun>
   dcc70:	2800      	cmp	r0, #0
   dcc72:	d062      	beq.n	dcd3a <__gethex+0x13a>
   dcc74:	4633      	mov	r3, r6
   dcc76:	7818      	ldrb	r0, [r3, #0]
   dcc78:	2830      	cmp	r0, #48	; 0x30
   dcc7a:	461f      	mov	r7, r3
   dcc7c:	f103 0301 	add.w	r3, r3, #1
   dcc80:	d0f9      	beq.n	dcc76 <__gethex+0x76>
   dcc82:	f7ff ffa7 	bl	dcbd4 <__hexdig_fun>
   dcc86:	2301      	movs	r3, #1
   dcc88:	fab0 f480 	clz	r4, r0
   dcc8c:	0964      	lsrs	r4, r4, #5
   dcc8e:	4635      	mov	r5, r6
   dcc90:	9300      	str	r3, [sp, #0]
   dcc92:	463a      	mov	r2, r7
   dcc94:	4616      	mov	r6, r2
   dcc96:	3201      	adds	r2, #1
   dcc98:	7830      	ldrb	r0, [r6, #0]
   dcc9a:	f7ff ff9b 	bl	dcbd4 <__hexdig_fun>
   dcc9e:	2800      	cmp	r0, #0
   dcca0:	d1f8      	bne.n	dcc94 <__gethex+0x94>
   dcca2:	9901      	ldr	r1, [sp, #4]
   dcca4:	4652      	mov	r2, sl
   dcca6:	4630      	mov	r0, r6
   dcca8:	f7ff f803 	bl	dbcb2 <strncmp>
   dccac:	b980      	cbnz	r0, dccd0 <__gethex+0xd0>
   dccae:	b94d      	cbnz	r5, dccc4 <__gethex+0xc4>
   dccb0:	eb06 050a 	add.w	r5, r6, sl
   dccb4:	462a      	mov	r2, r5
   dccb6:	4616      	mov	r6, r2
   dccb8:	3201      	adds	r2, #1
   dccba:	7830      	ldrb	r0, [r6, #0]
   dccbc:	f7ff ff8a 	bl	dcbd4 <__hexdig_fun>
   dccc0:	2800      	cmp	r0, #0
   dccc2:	d1f8      	bne.n	dccb6 <__gethex+0xb6>
   dccc4:	1bad      	subs	r5, r5, r6
   dccc6:	00ad      	lsls	r5, r5, #2
   dccc8:	e004      	b.n	dccd4 <__gethex+0xd4>
   dccca:	2400      	movs	r4, #0
   dcccc:	4625      	mov	r5, r4
   dccce:	e7e0      	b.n	dcc92 <__gethex+0x92>
   dccd0:	2d00      	cmp	r5, #0
   dccd2:	d1f7      	bne.n	dccc4 <__gethex+0xc4>
   dccd4:	7833      	ldrb	r3, [r6, #0]
   dccd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dccda:	2b50      	cmp	r3, #80	; 0x50
   dccdc:	d13b      	bne.n	dcd56 <__gethex+0x156>
   dccde:	7873      	ldrb	r3, [r6, #1]
   dcce0:	2b2b      	cmp	r3, #43	; 0x2b
   dcce2:	d02c      	beq.n	dcd3e <__gethex+0x13e>
   dcce4:	2b2d      	cmp	r3, #45	; 0x2d
   dcce6:	d02e      	beq.n	dcd46 <__gethex+0x146>
   dcce8:	1c71      	adds	r1, r6, #1
   dccea:	f04f 0900 	mov.w	r9, #0
   dccee:	7808      	ldrb	r0, [r1, #0]
   dccf0:	f7ff ff70 	bl	dcbd4 <__hexdig_fun>
   dccf4:	1e43      	subs	r3, r0, #1
   dccf6:	b2db      	uxtb	r3, r3
   dccf8:	2b18      	cmp	r3, #24
   dccfa:	d82c      	bhi.n	dcd56 <__gethex+0x156>
   dccfc:	f1a0 0210 	sub.w	r2, r0, #16
   dcd00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dcd04:	f7ff ff66 	bl	dcbd4 <__hexdig_fun>
   dcd08:	1e43      	subs	r3, r0, #1
   dcd0a:	b2db      	uxtb	r3, r3
   dcd0c:	2b18      	cmp	r3, #24
   dcd0e:	d91d      	bls.n	dcd4c <__gethex+0x14c>
   dcd10:	f1b9 0f00 	cmp.w	r9, #0
   dcd14:	d000      	beq.n	dcd18 <__gethex+0x118>
   dcd16:	4252      	negs	r2, r2
   dcd18:	4415      	add	r5, r2
   dcd1a:	f8cb 1000 	str.w	r1, [fp]
   dcd1e:	b1e4      	cbz	r4, dcd5a <__gethex+0x15a>
   dcd20:	9b00      	ldr	r3, [sp, #0]
   dcd22:	2b00      	cmp	r3, #0
   dcd24:	bf14      	ite	ne
   dcd26:	2700      	movne	r7, #0
   dcd28:	2706      	moveq	r7, #6
   dcd2a:	4638      	mov	r0, r7
   dcd2c:	b009      	add	sp, #36	; 0x24
   dcd2e:	ecbd 8b02 	vpop	{d8}
   dcd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcd36:	463e      	mov	r6, r7
   dcd38:	4625      	mov	r5, r4
   dcd3a:	2401      	movs	r4, #1
   dcd3c:	e7ca      	b.n	dccd4 <__gethex+0xd4>
   dcd3e:	f04f 0900 	mov.w	r9, #0
   dcd42:	1cb1      	adds	r1, r6, #2
   dcd44:	e7d3      	b.n	dccee <__gethex+0xee>
   dcd46:	f04f 0901 	mov.w	r9, #1
   dcd4a:	e7fa      	b.n	dcd42 <__gethex+0x142>
   dcd4c:	230a      	movs	r3, #10
   dcd4e:	fb03 0202 	mla	r2, r3, r2, r0
   dcd52:	3a10      	subs	r2, #16
   dcd54:	e7d4      	b.n	dcd00 <__gethex+0x100>
   dcd56:	4631      	mov	r1, r6
   dcd58:	e7df      	b.n	dcd1a <__gethex+0x11a>
   dcd5a:	1bf3      	subs	r3, r6, r7
   dcd5c:	3b01      	subs	r3, #1
   dcd5e:	4621      	mov	r1, r4
   dcd60:	2b07      	cmp	r3, #7
   dcd62:	dc52      	bgt.n	dce0a <__gethex+0x20a>
   dcd64:	ee18 0a10 	vmov	r0, s16
   dcd68:	f000 fa52 	bl	dd210 <_Balloc>
   dcd6c:	f04f 0b00 	mov.w	fp, #0
   dcd70:	f100 0914 	add.w	r9, r0, #20
   dcd74:	f1ca 0301 	rsb	r3, sl, #1
   dcd78:	4604      	mov	r4, r0
   dcd7a:	f8cd 9008 	str.w	r9, [sp, #8]
   dcd7e:	f8cd b000 	str.w	fp, [sp]
   dcd82:	9306      	str	r3, [sp, #24]
   dcd84:	42b7      	cmp	r7, r6
   dcd86:	d343      	bcc.n	dce10 <__gethex+0x210>
   dcd88:	9802      	ldr	r0, [sp, #8]
   dcd8a:	9b00      	ldr	r3, [sp, #0]
   dcd8c:	f840 3b04 	str.w	r3, [r0], #4
   dcd90:	eba0 0009 	sub.w	r0, r0, r9
   dcd94:	1080      	asrs	r0, r0, #2
   dcd96:	0146      	lsls	r6, r0, #5
   dcd98:	6120      	str	r0, [r4, #16]
   dcd9a:	4618      	mov	r0, r3
   dcd9c:	f000 faff 	bl	dd39e <__hi0bits>
   dcda0:	1a30      	subs	r0, r6, r0
   dcda2:	f8d8 6000 	ldr.w	r6, [r8]
   dcda6:	42b0      	cmp	r0, r6
   dcda8:	dd66      	ble.n	dce78 <__gethex+0x278>
   dcdaa:	1b87      	subs	r7, r0, r6
   dcdac:	4639      	mov	r1, r7
   dcdae:	4620      	mov	r0, r4
   dcdb0:	f000 fe4c 	bl	dda4c <__any_on>
   dcdb4:	4682      	mov	sl, r0
   dcdb6:	b1a8      	cbz	r0, dcde4 <__gethex+0x1e4>
   dcdb8:	1e7b      	subs	r3, r7, #1
   dcdba:	1159      	asrs	r1, r3, #5
   dcdbc:	f003 021f 	and.w	r2, r3, #31
   dcdc0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dcdc4:	f04f 0a01 	mov.w	sl, #1
   dcdc8:	fa0a f202 	lsl.w	r2, sl, r2
   dcdcc:	420a      	tst	r2, r1
   dcdce:	d009      	beq.n	dcde4 <__gethex+0x1e4>
   dcdd0:	4553      	cmp	r3, sl
   dcdd2:	dd05      	ble.n	dcde0 <__gethex+0x1e0>
   dcdd4:	1eb9      	subs	r1, r7, #2
   dcdd6:	4620      	mov	r0, r4
   dcdd8:	f000 fe38 	bl	dda4c <__any_on>
   dcddc:	2800      	cmp	r0, #0
   dcdde:	d148      	bne.n	dce72 <__gethex+0x272>
   dcde0:	f04f 0a02 	mov.w	sl, #2
   dcde4:	4639      	mov	r1, r7
   dcde6:	4620      	mov	r0, r4
   dcde8:	f7ff fea2 	bl	dcb30 <rshift>
   dcdec:	443d      	add	r5, r7
   dcdee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dcdf2:	42ab      	cmp	r3, r5
   dcdf4:	da4f      	bge.n	dce96 <__gethex+0x296>
   dcdf6:	ee18 0a10 	vmov	r0, s16
   dcdfa:	4621      	mov	r1, r4
   dcdfc:	f000 fa3c 	bl	dd278 <_Bfree>
   dce00:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dce02:	2300      	movs	r3, #0
   dce04:	6013      	str	r3, [r2, #0]
   dce06:	27a3      	movs	r7, #163	; 0xa3
   dce08:	e78f      	b.n	dcd2a <__gethex+0x12a>
   dce0a:	3101      	adds	r1, #1
   dce0c:	105b      	asrs	r3, r3, #1
   dce0e:	e7a7      	b.n	dcd60 <__gethex+0x160>
   dce10:	1e73      	subs	r3, r6, #1
   dce12:	9a05      	ldr	r2, [sp, #20]
   dce14:	9303      	str	r3, [sp, #12]
   dce16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dce1a:	4293      	cmp	r3, r2
   dce1c:	d019      	beq.n	dce52 <__gethex+0x252>
   dce1e:	f1bb 0f20 	cmp.w	fp, #32
   dce22:	d107      	bne.n	dce34 <__gethex+0x234>
   dce24:	9b02      	ldr	r3, [sp, #8]
   dce26:	9a00      	ldr	r2, [sp, #0]
   dce28:	f843 2b04 	str.w	r2, [r3], #4
   dce2c:	9302      	str	r3, [sp, #8]
   dce2e:	2300      	movs	r3, #0
   dce30:	9300      	str	r3, [sp, #0]
   dce32:	469b      	mov	fp, r3
   dce34:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dce38:	f7ff fecc 	bl	dcbd4 <__hexdig_fun>
   dce3c:	9b00      	ldr	r3, [sp, #0]
   dce3e:	f000 000f 	and.w	r0, r0, #15
   dce42:	fa00 f00b 	lsl.w	r0, r0, fp
   dce46:	4303      	orrs	r3, r0
   dce48:	9300      	str	r3, [sp, #0]
   dce4a:	f10b 0b04 	add.w	fp, fp, #4
   dce4e:	9b03      	ldr	r3, [sp, #12]
   dce50:	e00d      	b.n	dce6e <__gethex+0x26e>
   dce52:	9b03      	ldr	r3, [sp, #12]
   dce54:	9a06      	ldr	r2, [sp, #24]
   dce56:	4413      	add	r3, r2
   dce58:	42bb      	cmp	r3, r7
   dce5a:	d3e0      	bcc.n	dce1e <__gethex+0x21e>
   dce5c:	4618      	mov	r0, r3
   dce5e:	9901      	ldr	r1, [sp, #4]
   dce60:	9307      	str	r3, [sp, #28]
   dce62:	4652      	mov	r2, sl
   dce64:	f7fe ff25 	bl	dbcb2 <strncmp>
   dce68:	9b07      	ldr	r3, [sp, #28]
   dce6a:	2800      	cmp	r0, #0
   dce6c:	d1d7      	bne.n	dce1e <__gethex+0x21e>
   dce6e:	461e      	mov	r6, r3
   dce70:	e788      	b.n	dcd84 <__gethex+0x184>
   dce72:	f04f 0a03 	mov.w	sl, #3
   dce76:	e7b5      	b.n	dcde4 <__gethex+0x1e4>
   dce78:	da0a      	bge.n	dce90 <__gethex+0x290>
   dce7a:	1a37      	subs	r7, r6, r0
   dce7c:	4621      	mov	r1, r4
   dce7e:	ee18 0a10 	vmov	r0, s16
   dce82:	463a      	mov	r2, r7
   dce84:	f000 fbce 	bl	dd624 <__lshift>
   dce88:	1bed      	subs	r5, r5, r7
   dce8a:	4604      	mov	r4, r0
   dce8c:	f100 0914 	add.w	r9, r0, #20
   dce90:	f04f 0a00 	mov.w	sl, #0
   dce94:	e7ab      	b.n	dcdee <__gethex+0x1ee>
   dce96:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dce9a:	42a8      	cmp	r0, r5
   dce9c:	dd6d      	ble.n	dcf7a <__gethex+0x37a>
   dce9e:	1b45      	subs	r5, r0, r5
   dcea0:	42ae      	cmp	r6, r5
   dcea2:	dc31      	bgt.n	dcf08 <__gethex+0x308>
   dcea4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dcea8:	2b02      	cmp	r3, #2
   dceaa:	d023      	beq.n	dcef4 <__gethex+0x2f4>
   dceac:	2b03      	cmp	r3, #3
   dceae:	d025      	beq.n	dcefc <__gethex+0x2fc>
   dceb0:	2b01      	cmp	r3, #1
   dceb2:	d115      	bne.n	dcee0 <__gethex+0x2e0>
   dceb4:	42ae      	cmp	r6, r5
   dceb6:	d113      	bne.n	dcee0 <__gethex+0x2e0>
   dceb8:	2e01      	cmp	r6, #1
   dceba:	d10b      	bne.n	dced4 <__gethex+0x2d4>
   dcebc:	9a04      	ldr	r2, [sp, #16]
   dcebe:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dcec2:	6013      	str	r3, [r2, #0]
   dcec4:	2301      	movs	r3, #1
   dcec6:	6123      	str	r3, [r4, #16]
   dcec8:	f8c9 3000 	str.w	r3, [r9]
   dcecc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dcece:	2762      	movs	r7, #98	; 0x62
   dced0:	601c      	str	r4, [r3, #0]
   dced2:	e72a      	b.n	dcd2a <__gethex+0x12a>
   dced4:	1e71      	subs	r1, r6, #1
   dced6:	4620      	mov	r0, r4
   dced8:	f000 fdb8 	bl	dda4c <__any_on>
   dcedc:	2800      	cmp	r0, #0
   dcede:	d1ed      	bne.n	dcebc <__gethex+0x2bc>
   dcee0:	ee18 0a10 	vmov	r0, s16
   dcee4:	4621      	mov	r1, r4
   dcee6:	f000 f9c7 	bl	dd278 <_Bfree>
   dceea:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dceec:	2300      	movs	r3, #0
   dceee:	6013      	str	r3, [r2, #0]
   dcef0:	2750      	movs	r7, #80	; 0x50
   dcef2:	e71a      	b.n	dcd2a <__gethex+0x12a>
   dcef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcef6:	2b00      	cmp	r3, #0
   dcef8:	d1f2      	bne.n	dcee0 <__gethex+0x2e0>
   dcefa:	e7df      	b.n	dcebc <__gethex+0x2bc>
   dcefc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcefe:	2b00      	cmp	r3, #0
   dcf00:	d1dc      	bne.n	dcebc <__gethex+0x2bc>
   dcf02:	e7ed      	b.n	dcee0 <__gethex+0x2e0>
   dcf04:	000deaa4 	.word	0x000deaa4
   dcf08:	1e6f      	subs	r7, r5, #1
   dcf0a:	f1ba 0f00 	cmp.w	sl, #0
   dcf0e:	d131      	bne.n	dcf74 <__gethex+0x374>
   dcf10:	b127      	cbz	r7, dcf1c <__gethex+0x31c>
   dcf12:	4639      	mov	r1, r7
   dcf14:	4620      	mov	r0, r4
   dcf16:	f000 fd99 	bl	dda4c <__any_on>
   dcf1a:	4682      	mov	sl, r0
   dcf1c:	117b      	asrs	r3, r7, #5
   dcf1e:	2101      	movs	r1, #1
   dcf20:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dcf24:	f007 071f 	and.w	r7, r7, #31
   dcf28:	fa01 f707 	lsl.w	r7, r1, r7
   dcf2c:	421f      	tst	r7, r3
   dcf2e:	4629      	mov	r1, r5
   dcf30:	4620      	mov	r0, r4
   dcf32:	bf18      	it	ne
   dcf34:	f04a 0a02 	orrne.w	sl, sl, #2
   dcf38:	1b76      	subs	r6, r6, r5
   dcf3a:	f7ff fdf9 	bl	dcb30 <rshift>
   dcf3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dcf42:	2702      	movs	r7, #2
   dcf44:	f1ba 0f00 	cmp.w	sl, #0
   dcf48:	d048      	beq.n	dcfdc <__gethex+0x3dc>
   dcf4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dcf4e:	2b02      	cmp	r3, #2
   dcf50:	d015      	beq.n	dcf7e <__gethex+0x37e>
   dcf52:	2b03      	cmp	r3, #3
   dcf54:	d017      	beq.n	dcf86 <__gethex+0x386>
   dcf56:	2b01      	cmp	r3, #1
   dcf58:	d109      	bne.n	dcf6e <__gethex+0x36e>
   dcf5a:	f01a 0f02 	tst.w	sl, #2
   dcf5e:	d006      	beq.n	dcf6e <__gethex+0x36e>
   dcf60:	f8d9 0000 	ldr.w	r0, [r9]
   dcf64:	ea4a 0a00 	orr.w	sl, sl, r0
   dcf68:	f01a 0f01 	tst.w	sl, #1
   dcf6c:	d10e      	bne.n	dcf8c <__gethex+0x38c>
   dcf6e:	f047 0710 	orr.w	r7, r7, #16
   dcf72:	e033      	b.n	dcfdc <__gethex+0x3dc>
   dcf74:	f04f 0a01 	mov.w	sl, #1
   dcf78:	e7d0      	b.n	dcf1c <__gethex+0x31c>
   dcf7a:	2701      	movs	r7, #1
   dcf7c:	e7e2      	b.n	dcf44 <__gethex+0x344>
   dcf7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcf80:	f1c3 0301 	rsb	r3, r3, #1
   dcf84:	9315      	str	r3, [sp, #84]	; 0x54
   dcf86:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcf88:	2b00      	cmp	r3, #0
   dcf8a:	d0f0      	beq.n	dcf6e <__gethex+0x36e>
   dcf8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dcf90:	f104 0314 	add.w	r3, r4, #20
   dcf94:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dcf98:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dcf9c:	f04f 0c00 	mov.w	ip, #0
   dcfa0:	4618      	mov	r0, r3
   dcfa2:	f853 2b04 	ldr.w	r2, [r3], #4
   dcfa6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dcfaa:	d01c      	beq.n	dcfe6 <__gethex+0x3e6>
   dcfac:	3201      	adds	r2, #1
   dcfae:	6002      	str	r2, [r0, #0]
   dcfb0:	2f02      	cmp	r7, #2
   dcfb2:	f104 0314 	add.w	r3, r4, #20
   dcfb6:	d13a      	bne.n	dd02e <__gethex+0x42e>
   dcfb8:	f8d8 2000 	ldr.w	r2, [r8]
   dcfbc:	3a01      	subs	r2, #1
   dcfbe:	42b2      	cmp	r2, r6
   dcfc0:	d10a      	bne.n	dcfd8 <__gethex+0x3d8>
   dcfc2:	1171      	asrs	r1, r6, #5
   dcfc4:	2201      	movs	r2, #1
   dcfc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dcfca:	f006 061f 	and.w	r6, r6, #31
   dcfce:	fa02 f606 	lsl.w	r6, r2, r6
   dcfd2:	421e      	tst	r6, r3
   dcfd4:	bf18      	it	ne
   dcfd6:	4617      	movne	r7, r2
   dcfd8:	f047 0720 	orr.w	r7, r7, #32
   dcfdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dcfde:	601c      	str	r4, [r3, #0]
   dcfe0:	9b04      	ldr	r3, [sp, #16]
   dcfe2:	601d      	str	r5, [r3, #0]
   dcfe4:	e6a1      	b.n	dcd2a <__gethex+0x12a>
   dcfe6:	4299      	cmp	r1, r3
   dcfe8:	f843 cc04 	str.w	ip, [r3, #-4]
   dcfec:	d8d8      	bhi.n	dcfa0 <__gethex+0x3a0>
   dcfee:	68a3      	ldr	r3, [r4, #8]
   dcff0:	4599      	cmp	r9, r3
   dcff2:	db14      	blt.n	dd01e <__gethex+0x41e>
   dcff4:	6861      	ldr	r1, [r4, #4]
   dcff6:	ee18 0a10 	vmov	r0, s16
   dcffa:	3101      	adds	r1, #1
   dcffc:	f000 f908 	bl	dd210 <_Balloc>
   dd000:	6922      	ldr	r2, [r4, #16]
   dd002:	3202      	adds	r2, #2
   dd004:	f104 010c 	add.w	r1, r4, #12
   dd008:	4682      	mov	sl, r0
   dd00a:	0092      	lsls	r2, r2, #2
   dd00c:	300c      	adds	r0, #12
   dd00e:	f7fe fdad 	bl	dbb6c <memcpy>
   dd012:	4621      	mov	r1, r4
   dd014:	ee18 0a10 	vmov	r0, s16
   dd018:	f000 f92e 	bl	dd278 <_Bfree>
   dd01c:	4654      	mov	r4, sl
   dd01e:	6923      	ldr	r3, [r4, #16]
   dd020:	1c5a      	adds	r2, r3, #1
   dd022:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dd026:	6122      	str	r2, [r4, #16]
   dd028:	2201      	movs	r2, #1
   dd02a:	615a      	str	r2, [r3, #20]
   dd02c:	e7c0      	b.n	dcfb0 <__gethex+0x3b0>
   dd02e:	6922      	ldr	r2, [r4, #16]
   dd030:	454a      	cmp	r2, r9
   dd032:	dd0b      	ble.n	dd04c <__gethex+0x44c>
   dd034:	2101      	movs	r1, #1
   dd036:	4620      	mov	r0, r4
   dd038:	f7ff fd7a 	bl	dcb30 <rshift>
   dd03c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dd040:	3501      	adds	r5, #1
   dd042:	42ab      	cmp	r3, r5
   dd044:	f6ff aed7 	blt.w	dcdf6 <__gethex+0x1f6>
   dd048:	2701      	movs	r7, #1
   dd04a:	e7c5      	b.n	dcfd8 <__gethex+0x3d8>
   dd04c:	f016 061f 	ands.w	r6, r6, #31
   dd050:	d0fa      	beq.n	dd048 <__gethex+0x448>
   dd052:	449b      	add	fp, r3
   dd054:	f1c6 0620 	rsb	r6, r6, #32
   dd058:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dd05c:	f000 f99f 	bl	dd39e <__hi0bits>
   dd060:	42b0      	cmp	r0, r6
   dd062:	dbe7      	blt.n	dd034 <__gethex+0x434>
   dd064:	e7f0      	b.n	dd048 <__gethex+0x448>
   dd066:	bf00      	nop

000dd068 <L_shift>:
   dd068:	f1c2 0208 	rsb	r2, r2, #8
   dd06c:	0092      	lsls	r2, r2, #2
   dd06e:	b570      	push	{r4, r5, r6, lr}
   dd070:	f1c2 0620 	rsb	r6, r2, #32
   dd074:	6843      	ldr	r3, [r0, #4]
   dd076:	6804      	ldr	r4, [r0, #0]
   dd078:	fa03 f506 	lsl.w	r5, r3, r6
   dd07c:	432c      	orrs	r4, r5
   dd07e:	40d3      	lsrs	r3, r2
   dd080:	6004      	str	r4, [r0, #0]
   dd082:	f840 3f04 	str.w	r3, [r0, #4]!
   dd086:	4288      	cmp	r0, r1
   dd088:	d3f4      	bcc.n	dd074 <L_shift+0xc>
   dd08a:	bd70      	pop	{r4, r5, r6, pc}

000dd08c <__match>:
   dd08c:	b530      	push	{r4, r5, lr}
   dd08e:	6803      	ldr	r3, [r0, #0]
   dd090:	3301      	adds	r3, #1
   dd092:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd096:	b914      	cbnz	r4, dd09e <__match+0x12>
   dd098:	6003      	str	r3, [r0, #0]
   dd09a:	2001      	movs	r0, #1
   dd09c:	bd30      	pop	{r4, r5, pc}
   dd09e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd0a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dd0a6:	2d19      	cmp	r5, #25
   dd0a8:	bf98      	it	ls
   dd0aa:	3220      	addls	r2, #32
   dd0ac:	42a2      	cmp	r2, r4
   dd0ae:	d0f0      	beq.n	dd092 <__match+0x6>
   dd0b0:	2000      	movs	r0, #0
   dd0b2:	e7f3      	b.n	dd09c <__match+0x10>

000dd0b4 <__hexnan>:
   dd0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd0b8:	680b      	ldr	r3, [r1, #0]
   dd0ba:	6801      	ldr	r1, [r0, #0]
   dd0bc:	115e      	asrs	r6, r3, #5
   dd0be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dd0c2:	f013 031f 	ands.w	r3, r3, #31
   dd0c6:	b087      	sub	sp, #28
   dd0c8:	bf18      	it	ne
   dd0ca:	3604      	addne	r6, #4
   dd0cc:	2500      	movs	r5, #0
   dd0ce:	1f37      	subs	r7, r6, #4
   dd0d0:	4682      	mov	sl, r0
   dd0d2:	4690      	mov	r8, r2
   dd0d4:	9301      	str	r3, [sp, #4]
   dd0d6:	f846 5c04 	str.w	r5, [r6, #-4]
   dd0da:	46b9      	mov	r9, r7
   dd0dc:	463c      	mov	r4, r7
   dd0de:	9502      	str	r5, [sp, #8]
   dd0e0:	46ab      	mov	fp, r5
   dd0e2:	784a      	ldrb	r2, [r1, #1]
   dd0e4:	1c4b      	adds	r3, r1, #1
   dd0e6:	9303      	str	r3, [sp, #12]
   dd0e8:	b342      	cbz	r2, dd13c <__hexnan+0x88>
   dd0ea:	4610      	mov	r0, r2
   dd0ec:	9105      	str	r1, [sp, #20]
   dd0ee:	9204      	str	r2, [sp, #16]
   dd0f0:	f7ff fd70 	bl	dcbd4 <__hexdig_fun>
   dd0f4:	2800      	cmp	r0, #0
   dd0f6:	d14f      	bne.n	dd198 <__hexnan+0xe4>
   dd0f8:	9a04      	ldr	r2, [sp, #16]
   dd0fa:	9905      	ldr	r1, [sp, #20]
   dd0fc:	2a20      	cmp	r2, #32
   dd0fe:	d818      	bhi.n	dd132 <__hexnan+0x7e>
   dd100:	9b02      	ldr	r3, [sp, #8]
   dd102:	459b      	cmp	fp, r3
   dd104:	dd13      	ble.n	dd12e <__hexnan+0x7a>
   dd106:	454c      	cmp	r4, r9
   dd108:	d206      	bcs.n	dd118 <__hexnan+0x64>
   dd10a:	2d07      	cmp	r5, #7
   dd10c:	dc04      	bgt.n	dd118 <__hexnan+0x64>
   dd10e:	462a      	mov	r2, r5
   dd110:	4649      	mov	r1, r9
   dd112:	4620      	mov	r0, r4
   dd114:	f7ff ffa8 	bl	dd068 <L_shift>
   dd118:	4544      	cmp	r4, r8
   dd11a:	d950      	bls.n	dd1be <__hexnan+0x10a>
   dd11c:	2300      	movs	r3, #0
   dd11e:	f1a4 0904 	sub.w	r9, r4, #4
   dd122:	f844 3c04 	str.w	r3, [r4, #-4]
   dd126:	f8cd b008 	str.w	fp, [sp, #8]
   dd12a:	464c      	mov	r4, r9
   dd12c:	461d      	mov	r5, r3
   dd12e:	9903      	ldr	r1, [sp, #12]
   dd130:	e7d7      	b.n	dd0e2 <__hexnan+0x2e>
   dd132:	2a29      	cmp	r2, #41	; 0x29
   dd134:	d156      	bne.n	dd1e4 <__hexnan+0x130>
   dd136:	3102      	adds	r1, #2
   dd138:	f8ca 1000 	str.w	r1, [sl]
   dd13c:	f1bb 0f00 	cmp.w	fp, #0
   dd140:	d050      	beq.n	dd1e4 <__hexnan+0x130>
   dd142:	454c      	cmp	r4, r9
   dd144:	d206      	bcs.n	dd154 <__hexnan+0xa0>
   dd146:	2d07      	cmp	r5, #7
   dd148:	dc04      	bgt.n	dd154 <__hexnan+0xa0>
   dd14a:	462a      	mov	r2, r5
   dd14c:	4649      	mov	r1, r9
   dd14e:	4620      	mov	r0, r4
   dd150:	f7ff ff8a 	bl	dd068 <L_shift>
   dd154:	4544      	cmp	r4, r8
   dd156:	d934      	bls.n	dd1c2 <__hexnan+0x10e>
   dd158:	f1a8 0204 	sub.w	r2, r8, #4
   dd15c:	4623      	mov	r3, r4
   dd15e:	f853 1b04 	ldr.w	r1, [r3], #4
   dd162:	f842 1f04 	str.w	r1, [r2, #4]!
   dd166:	429f      	cmp	r7, r3
   dd168:	d2f9      	bcs.n	dd15e <__hexnan+0xaa>
   dd16a:	1b3b      	subs	r3, r7, r4
   dd16c:	f023 0303 	bic.w	r3, r3, #3
   dd170:	3304      	adds	r3, #4
   dd172:	3401      	adds	r4, #1
   dd174:	3e03      	subs	r6, #3
   dd176:	42b4      	cmp	r4, r6
   dd178:	bf88      	it	hi
   dd17a:	2304      	movhi	r3, #4
   dd17c:	4443      	add	r3, r8
   dd17e:	2200      	movs	r2, #0
   dd180:	f843 2b04 	str.w	r2, [r3], #4
   dd184:	429f      	cmp	r7, r3
   dd186:	d2fb      	bcs.n	dd180 <__hexnan+0xcc>
   dd188:	683b      	ldr	r3, [r7, #0]
   dd18a:	b91b      	cbnz	r3, dd194 <__hexnan+0xe0>
   dd18c:	4547      	cmp	r7, r8
   dd18e:	d127      	bne.n	dd1e0 <__hexnan+0x12c>
   dd190:	2301      	movs	r3, #1
   dd192:	603b      	str	r3, [r7, #0]
   dd194:	2005      	movs	r0, #5
   dd196:	e026      	b.n	dd1e6 <__hexnan+0x132>
   dd198:	3501      	adds	r5, #1
   dd19a:	2d08      	cmp	r5, #8
   dd19c:	f10b 0b01 	add.w	fp, fp, #1
   dd1a0:	dd06      	ble.n	dd1b0 <__hexnan+0xfc>
   dd1a2:	4544      	cmp	r4, r8
   dd1a4:	d9c3      	bls.n	dd12e <__hexnan+0x7a>
   dd1a6:	2300      	movs	r3, #0
   dd1a8:	f844 3c04 	str.w	r3, [r4, #-4]
   dd1ac:	2501      	movs	r5, #1
   dd1ae:	3c04      	subs	r4, #4
   dd1b0:	6822      	ldr	r2, [r4, #0]
   dd1b2:	f000 000f 	and.w	r0, r0, #15
   dd1b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dd1ba:	6022      	str	r2, [r4, #0]
   dd1bc:	e7b7      	b.n	dd12e <__hexnan+0x7a>
   dd1be:	2508      	movs	r5, #8
   dd1c0:	e7b5      	b.n	dd12e <__hexnan+0x7a>
   dd1c2:	9b01      	ldr	r3, [sp, #4]
   dd1c4:	2b00      	cmp	r3, #0
   dd1c6:	d0df      	beq.n	dd188 <__hexnan+0xd4>
   dd1c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd1cc:	f1c3 0320 	rsb	r3, r3, #32
   dd1d0:	fa22 f303 	lsr.w	r3, r2, r3
   dd1d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dd1d8:	401a      	ands	r2, r3
   dd1da:	f846 2c04 	str.w	r2, [r6, #-4]
   dd1de:	e7d3      	b.n	dd188 <__hexnan+0xd4>
   dd1e0:	3f04      	subs	r7, #4
   dd1e2:	e7d1      	b.n	dd188 <__hexnan+0xd4>
   dd1e4:	2004      	movs	r0, #4
   dd1e6:	b007      	add	sp, #28
   dd1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd1ec <__ascii_mbtowc>:
   dd1ec:	b082      	sub	sp, #8
   dd1ee:	b901      	cbnz	r1, dd1f2 <__ascii_mbtowc+0x6>
   dd1f0:	a901      	add	r1, sp, #4
   dd1f2:	b142      	cbz	r2, dd206 <__ascii_mbtowc+0x1a>
   dd1f4:	b14b      	cbz	r3, dd20a <__ascii_mbtowc+0x1e>
   dd1f6:	7813      	ldrb	r3, [r2, #0]
   dd1f8:	600b      	str	r3, [r1, #0]
   dd1fa:	7812      	ldrb	r2, [r2, #0]
   dd1fc:	1e10      	subs	r0, r2, #0
   dd1fe:	bf18      	it	ne
   dd200:	2001      	movne	r0, #1
   dd202:	b002      	add	sp, #8
   dd204:	4770      	bx	lr
   dd206:	4610      	mov	r0, r2
   dd208:	e7fb      	b.n	dd202 <__ascii_mbtowc+0x16>
   dd20a:	f06f 0001 	mvn.w	r0, #1
   dd20e:	e7f8      	b.n	dd202 <__ascii_mbtowc+0x16>

000dd210 <_Balloc>:
   dd210:	b570      	push	{r4, r5, r6, lr}
   dd212:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd214:	4604      	mov	r4, r0
   dd216:	460d      	mov	r5, r1
   dd218:	b93e      	cbnz	r6, dd22a <_Balloc+0x1a>
   dd21a:	2010      	movs	r0, #16
   dd21c:	f7fa fd5e 	bl	d7cdc <malloc>
   dd220:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd224:	6260      	str	r0, [r4, #36]	; 0x24
   dd226:	6006      	str	r6, [r0, #0]
   dd228:	60c6      	str	r6, [r0, #12]
   dd22a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dd22c:	68f3      	ldr	r3, [r6, #12]
   dd22e:	b183      	cbz	r3, dd252 <_Balloc+0x42>
   dd230:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd232:	68db      	ldr	r3, [r3, #12]
   dd234:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dd238:	b9b8      	cbnz	r0, dd26a <_Balloc+0x5a>
   dd23a:	2101      	movs	r1, #1
   dd23c:	fa01 f605 	lsl.w	r6, r1, r5
   dd240:	1d72      	adds	r2, r6, #5
   dd242:	0092      	lsls	r2, r2, #2
   dd244:	4620      	mov	r0, r4
   dd246:	f000 fc22 	bl	dda8e <_calloc_r>
   dd24a:	b160      	cbz	r0, dd266 <_Balloc+0x56>
   dd24c:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dd250:	e00e      	b.n	dd270 <_Balloc+0x60>
   dd252:	2221      	movs	r2, #33	; 0x21
   dd254:	2104      	movs	r1, #4
   dd256:	4620      	mov	r0, r4
   dd258:	f000 fc19 	bl	dda8e <_calloc_r>
   dd25c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd25e:	60f0      	str	r0, [r6, #12]
   dd260:	68db      	ldr	r3, [r3, #12]
   dd262:	2b00      	cmp	r3, #0
   dd264:	d1e4      	bne.n	dd230 <_Balloc+0x20>
   dd266:	2000      	movs	r0, #0
   dd268:	bd70      	pop	{r4, r5, r6, pc}
   dd26a:	6802      	ldr	r2, [r0, #0]
   dd26c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dd270:	2300      	movs	r3, #0
   dd272:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dd276:	e7f7      	b.n	dd268 <_Balloc+0x58>

000dd278 <_Bfree>:
   dd278:	b570      	push	{r4, r5, r6, lr}
   dd27a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd27c:	4605      	mov	r5, r0
   dd27e:	460c      	mov	r4, r1
   dd280:	b93e      	cbnz	r6, dd292 <_Bfree+0x1a>
   dd282:	2010      	movs	r0, #16
   dd284:	f7fa fd2a 	bl	d7cdc <malloc>
   dd288:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd28c:	6268      	str	r0, [r5, #36]	; 0x24
   dd28e:	6006      	str	r6, [r0, #0]
   dd290:	60c6      	str	r6, [r0, #12]
   dd292:	b13c      	cbz	r4, dd2a4 <_Bfree+0x2c>
   dd294:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dd296:	6862      	ldr	r2, [r4, #4]
   dd298:	68db      	ldr	r3, [r3, #12]
   dd29a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dd29e:	6021      	str	r1, [r4, #0]
   dd2a0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dd2a4:	bd70      	pop	{r4, r5, r6, pc}

000dd2a6 <__multadd>:
   dd2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd2aa:	690e      	ldr	r6, [r1, #16]
   dd2ac:	4607      	mov	r7, r0
   dd2ae:	4698      	mov	r8, r3
   dd2b0:	460c      	mov	r4, r1
   dd2b2:	f101 0014 	add.w	r0, r1, #20
   dd2b6:	2300      	movs	r3, #0
   dd2b8:	6805      	ldr	r5, [r0, #0]
   dd2ba:	b2a9      	uxth	r1, r5
   dd2bc:	fb02 8101 	mla	r1, r2, r1, r8
   dd2c0:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dd2c4:	0c2d      	lsrs	r5, r5, #16
   dd2c6:	fb02 c505 	mla	r5, r2, r5, ip
   dd2ca:	b289      	uxth	r1, r1
   dd2cc:	3301      	adds	r3, #1
   dd2ce:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dd2d2:	429e      	cmp	r6, r3
   dd2d4:	f840 1b04 	str.w	r1, [r0], #4
   dd2d8:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dd2dc:	dcec      	bgt.n	dd2b8 <__multadd+0x12>
   dd2de:	f1b8 0f00 	cmp.w	r8, #0
   dd2e2:	d01b      	beq.n	dd31c <__multadd+0x76>
   dd2e4:	68a3      	ldr	r3, [r4, #8]
   dd2e6:	42b3      	cmp	r3, r6
   dd2e8:	dc12      	bgt.n	dd310 <__multadd+0x6a>
   dd2ea:	6861      	ldr	r1, [r4, #4]
   dd2ec:	4638      	mov	r0, r7
   dd2ee:	3101      	adds	r1, #1
   dd2f0:	f7ff ff8e 	bl	dd210 <_Balloc>
   dd2f4:	6922      	ldr	r2, [r4, #16]
   dd2f6:	3202      	adds	r2, #2
   dd2f8:	f104 010c 	add.w	r1, r4, #12
   dd2fc:	4605      	mov	r5, r0
   dd2fe:	0092      	lsls	r2, r2, #2
   dd300:	300c      	adds	r0, #12
   dd302:	f7fe fc33 	bl	dbb6c <memcpy>
   dd306:	4621      	mov	r1, r4
   dd308:	4638      	mov	r0, r7
   dd30a:	f7ff ffb5 	bl	dd278 <_Bfree>
   dd30e:	462c      	mov	r4, r5
   dd310:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dd314:	3601      	adds	r6, #1
   dd316:	f8c3 8014 	str.w	r8, [r3, #20]
   dd31a:	6126      	str	r6, [r4, #16]
   dd31c:	4620      	mov	r0, r4
   dd31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dd322 <__s2b>:
   dd322:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd326:	460c      	mov	r4, r1
   dd328:	4615      	mov	r5, r2
   dd32a:	461f      	mov	r7, r3
   dd32c:	2209      	movs	r2, #9
   dd32e:	3308      	adds	r3, #8
   dd330:	4606      	mov	r6, r0
   dd332:	fb93 f3f2 	sdiv	r3, r3, r2
   dd336:	2100      	movs	r1, #0
   dd338:	2201      	movs	r2, #1
   dd33a:	429a      	cmp	r2, r3
   dd33c:	db20      	blt.n	dd380 <__s2b+0x5e>
   dd33e:	4630      	mov	r0, r6
   dd340:	f7ff ff66 	bl	dd210 <_Balloc>
   dd344:	9b08      	ldr	r3, [sp, #32]
   dd346:	6143      	str	r3, [r0, #20]
   dd348:	2d09      	cmp	r5, #9
   dd34a:	f04f 0301 	mov.w	r3, #1
   dd34e:	6103      	str	r3, [r0, #16]
   dd350:	dd19      	ble.n	dd386 <__s2b+0x64>
   dd352:	f104 0909 	add.w	r9, r4, #9
   dd356:	46c8      	mov	r8, r9
   dd358:	442c      	add	r4, r5
   dd35a:	f818 3b01 	ldrb.w	r3, [r8], #1
   dd35e:	4601      	mov	r1, r0
   dd360:	3b30      	subs	r3, #48	; 0x30
   dd362:	220a      	movs	r2, #10
   dd364:	4630      	mov	r0, r6
   dd366:	f7ff ff9e 	bl	dd2a6 <__multadd>
   dd36a:	45a0      	cmp	r8, r4
   dd36c:	d1f5      	bne.n	dd35a <__s2b+0x38>
   dd36e:	f1a5 0408 	sub.w	r4, r5, #8
   dd372:	444c      	add	r4, r9
   dd374:	1b2d      	subs	r5, r5, r4
   dd376:	1963      	adds	r3, r4, r5
   dd378:	42bb      	cmp	r3, r7
   dd37a:	db07      	blt.n	dd38c <__s2b+0x6a>
   dd37c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd380:	0052      	lsls	r2, r2, #1
   dd382:	3101      	adds	r1, #1
   dd384:	e7d9      	b.n	dd33a <__s2b+0x18>
   dd386:	340a      	adds	r4, #10
   dd388:	2509      	movs	r5, #9
   dd38a:	e7f3      	b.n	dd374 <__s2b+0x52>
   dd38c:	f814 3b01 	ldrb.w	r3, [r4], #1
   dd390:	4601      	mov	r1, r0
   dd392:	3b30      	subs	r3, #48	; 0x30
   dd394:	220a      	movs	r2, #10
   dd396:	4630      	mov	r0, r6
   dd398:	f7ff ff85 	bl	dd2a6 <__multadd>
   dd39c:	e7eb      	b.n	dd376 <__s2b+0x54>

000dd39e <__hi0bits>:
   dd39e:	0c03      	lsrs	r3, r0, #16
   dd3a0:	041b      	lsls	r3, r3, #16
   dd3a2:	b9d3      	cbnz	r3, dd3da <__hi0bits+0x3c>
   dd3a4:	0400      	lsls	r0, r0, #16
   dd3a6:	2310      	movs	r3, #16
   dd3a8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dd3ac:	bf04      	itt	eq
   dd3ae:	0200      	lsleq	r0, r0, #8
   dd3b0:	3308      	addeq	r3, #8
   dd3b2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dd3b6:	bf04      	itt	eq
   dd3b8:	0100      	lsleq	r0, r0, #4
   dd3ba:	3304      	addeq	r3, #4
   dd3bc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dd3c0:	bf04      	itt	eq
   dd3c2:	0080      	lsleq	r0, r0, #2
   dd3c4:	3302      	addeq	r3, #2
   dd3c6:	2800      	cmp	r0, #0
   dd3c8:	db05      	blt.n	dd3d6 <__hi0bits+0x38>
   dd3ca:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dd3ce:	f103 0301 	add.w	r3, r3, #1
   dd3d2:	bf08      	it	eq
   dd3d4:	2320      	moveq	r3, #32
   dd3d6:	4618      	mov	r0, r3
   dd3d8:	4770      	bx	lr
   dd3da:	2300      	movs	r3, #0
   dd3dc:	e7e4      	b.n	dd3a8 <__hi0bits+0xa>

000dd3de <__lo0bits>:
   dd3de:	6803      	ldr	r3, [r0, #0]
   dd3e0:	f013 0207 	ands.w	r2, r3, #7
   dd3e4:	4601      	mov	r1, r0
   dd3e6:	d00b      	beq.n	dd400 <__lo0bits+0x22>
   dd3e8:	07da      	lsls	r2, r3, #31
   dd3ea:	d424      	bmi.n	dd436 <__lo0bits+0x58>
   dd3ec:	0798      	lsls	r0, r3, #30
   dd3ee:	bf49      	itett	mi
   dd3f0:	085b      	lsrmi	r3, r3, #1
   dd3f2:	089b      	lsrpl	r3, r3, #2
   dd3f4:	2001      	movmi	r0, #1
   dd3f6:	600b      	strmi	r3, [r1, #0]
   dd3f8:	bf5c      	itt	pl
   dd3fa:	600b      	strpl	r3, [r1, #0]
   dd3fc:	2002      	movpl	r0, #2
   dd3fe:	4770      	bx	lr
   dd400:	b298      	uxth	r0, r3
   dd402:	b9b0      	cbnz	r0, dd432 <__lo0bits+0x54>
   dd404:	0c1b      	lsrs	r3, r3, #16
   dd406:	2010      	movs	r0, #16
   dd408:	f013 0fff 	tst.w	r3, #255	; 0xff
   dd40c:	bf04      	itt	eq
   dd40e:	0a1b      	lsreq	r3, r3, #8
   dd410:	3008      	addeq	r0, #8
   dd412:	071a      	lsls	r2, r3, #28
   dd414:	bf04      	itt	eq
   dd416:	091b      	lsreq	r3, r3, #4
   dd418:	3004      	addeq	r0, #4
   dd41a:	079a      	lsls	r2, r3, #30
   dd41c:	bf04      	itt	eq
   dd41e:	089b      	lsreq	r3, r3, #2
   dd420:	3002      	addeq	r0, #2
   dd422:	07da      	lsls	r2, r3, #31
   dd424:	d403      	bmi.n	dd42e <__lo0bits+0x50>
   dd426:	085b      	lsrs	r3, r3, #1
   dd428:	f100 0001 	add.w	r0, r0, #1
   dd42c:	d005      	beq.n	dd43a <__lo0bits+0x5c>
   dd42e:	600b      	str	r3, [r1, #0]
   dd430:	4770      	bx	lr
   dd432:	4610      	mov	r0, r2
   dd434:	e7e8      	b.n	dd408 <__lo0bits+0x2a>
   dd436:	2000      	movs	r0, #0
   dd438:	4770      	bx	lr
   dd43a:	2020      	movs	r0, #32
   dd43c:	4770      	bx	lr

000dd43e <__i2b>:
   dd43e:	b510      	push	{r4, lr}
   dd440:	460c      	mov	r4, r1
   dd442:	2101      	movs	r1, #1
   dd444:	f7ff fee4 	bl	dd210 <_Balloc>
   dd448:	2201      	movs	r2, #1
   dd44a:	6144      	str	r4, [r0, #20]
   dd44c:	6102      	str	r2, [r0, #16]
   dd44e:	bd10      	pop	{r4, pc}

000dd450 <__multiply>:
   dd450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd454:	4615      	mov	r5, r2
   dd456:	690a      	ldr	r2, [r1, #16]
   dd458:	692b      	ldr	r3, [r5, #16]
   dd45a:	429a      	cmp	r2, r3
   dd45c:	bfb8      	it	lt
   dd45e:	460b      	movlt	r3, r1
   dd460:	460c      	mov	r4, r1
   dd462:	bfbc      	itt	lt
   dd464:	462c      	movlt	r4, r5
   dd466:	461d      	movlt	r5, r3
   dd468:	6927      	ldr	r7, [r4, #16]
   dd46a:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dd46e:	68a3      	ldr	r3, [r4, #8]
   dd470:	6861      	ldr	r1, [r4, #4]
   dd472:	eb07 0609 	add.w	r6, r7, r9
   dd476:	42b3      	cmp	r3, r6
   dd478:	bfb8      	it	lt
   dd47a:	3101      	addlt	r1, #1
   dd47c:	b085      	sub	sp, #20
   dd47e:	f7ff fec7 	bl	dd210 <_Balloc>
   dd482:	f100 0114 	add.w	r1, r0, #20
   dd486:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dd48a:	460b      	mov	r3, r1
   dd48c:	2200      	movs	r2, #0
   dd48e:	4543      	cmp	r3, r8
   dd490:	d31d      	bcc.n	dd4ce <__multiply+0x7e>
   dd492:	f104 0314 	add.w	r3, r4, #20
   dd496:	f105 0214 	add.w	r2, r5, #20
   dd49a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dd49e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dd4a2:	9302      	str	r3, [sp, #8]
   dd4a4:	1b3b      	subs	r3, r7, r4
   dd4a6:	3b15      	subs	r3, #21
   dd4a8:	f023 0303 	bic.w	r3, r3, #3
   dd4ac:	3304      	adds	r3, #4
   dd4ae:	f104 0515 	add.w	r5, r4, #21
   dd4b2:	42af      	cmp	r7, r5
   dd4b4:	bf38      	it	cc
   dd4b6:	2304      	movcc	r3, #4
   dd4b8:	9301      	str	r3, [sp, #4]
   dd4ba:	9b02      	ldr	r3, [sp, #8]
   dd4bc:	9203      	str	r2, [sp, #12]
   dd4be:	4293      	cmp	r3, r2
   dd4c0:	d808      	bhi.n	dd4d4 <__multiply+0x84>
   dd4c2:	2e00      	cmp	r6, #0
   dd4c4:	dc5a      	bgt.n	dd57c <__multiply+0x12c>
   dd4c6:	6106      	str	r6, [r0, #16]
   dd4c8:	b005      	add	sp, #20
   dd4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd4ce:	f843 2b04 	str.w	r2, [r3], #4
   dd4d2:	e7dc      	b.n	dd48e <__multiply+0x3e>
   dd4d4:	f8b2 a000 	ldrh.w	sl, [r2]
   dd4d8:	f1ba 0f00 	cmp.w	sl, #0
   dd4dc:	d024      	beq.n	dd528 <__multiply+0xd8>
   dd4de:	f104 0e14 	add.w	lr, r4, #20
   dd4e2:	4689      	mov	r9, r1
   dd4e4:	f04f 0c00 	mov.w	ip, #0
   dd4e8:	f85e 5b04 	ldr.w	r5, [lr], #4
   dd4ec:	f8d9 b000 	ldr.w	fp, [r9]
   dd4f0:	b2ab      	uxth	r3, r5
   dd4f2:	fa1f fb8b 	uxth.w	fp, fp
   dd4f6:	fb0a b303 	mla	r3, sl, r3, fp
   dd4fa:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dd4fe:	f8d9 5000 	ldr.w	r5, [r9]
   dd502:	4463      	add	r3, ip
   dd504:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd508:	fb0a c50b 	mla	r5, sl, fp, ip
   dd50c:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dd510:	b29b      	uxth	r3, r3
   dd512:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dd516:	4577      	cmp	r7, lr
   dd518:	f849 3b04 	str.w	r3, [r9], #4
   dd51c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd520:	d8e2      	bhi.n	dd4e8 <__multiply+0x98>
   dd522:	9b01      	ldr	r3, [sp, #4]
   dd524:	f841 c003 	str.w	ip, [r1, r3]
   dd528:	9b03      	ldr	r3, [sp, #12]
   dd52a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dd52e:	3204      	adds	r2, #4
   dd530:	f1b9 0f00 	cmp.w	r9, #0
   dd534:	d020      	beq.n	dd578 <__multiply+0x128>
   dd536:	680b      	ldr	r3, [r1, #0]
   dd538:	f104 0c14 	add.w	ip, r4, #20
   dd53c:	468e      	mov	lr, r1
   dd53e:	f04f 0a00 	mov.w	sl, #0
   dd542:	f8bc 5000 	ldrh.w	r5, [ip]
   dd546:	f8be b002 	ldrh.w	fp, [lr, #2]
   dd54a:	fb09 b505 	mla	r5, r9, r5, fp
   dd54e:	44aa      	add	sl, r5
   dd550:	b29b      	uxth	r3, r3
   dd552:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dd556:	f84e 3b04 	str.w	r3, [lr], #4
   dd55a:	f85c 3b04 	ldr.w	r3, [ip], #4
   dd55e:	f8be 5000 	ldrh.w	r5, [lr]
   dd562:	0c1b      	lsrs	r3, r3, #16
   dd564:	fb09 5303 	mla	r3, r9, r3, r5
   dd568:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dd56c:	4567      	cmp	r7, ip
   dd56e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dd572:	d8e6      	bhi.n	dd542 <__multiply+0xf2>
   dd574:	9d01      	ldr	r5, [sp, #4]
   dd576:	514b      	str	r3, [r1, r5]
   dd578:	3104      	adds	r1, #4
   dd57a:	e79e      	b.n	dd4ba <__multiply+0x6a>
   dd57c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dd580:	2b00      	cmp	r3, #0
   dd582:	d1a0      	bne.n	dd4c6 <__multiply+0x76>
   dd584:	3e01      	subs	r6, #1
   dd586:	e79c      	b.n	dd4c2 <__multiply+0x72>

000dd588 <__pow5mult>:
   dd588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd58c:	4615      	mov	r5, r2
   dd58e:	f012 0203 	ands.w	r2, r2, #3
   dd592:	4606      	mov	r6, r0
   dd594:	460f      	mov	r7, r1
   dd596:	d007      	beq.n	dd5a8 <__pow5mult+0x20>
   dd598:	4c21      	ldr	r4, [pc, #132]	; (dd620 <__pow5mult+0x98>)
   dd59a:	3a01      	subs	r2, #1
   dd59c:	2300      	movs	r3, #0
   dd59e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dd5a2:	f7ff fe80 	bl	dd2a6 <__multadd>
   dd5a6:	4607      	mov	r7, r0
   dd5a8:	10ad      	asrs	r5, r5, #2
   dd5aa:	d035      	beq.n	dd618 <__pow5mult+0x90>
   dd5ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dd5ae:	b93c      	cbnz	r4, dd5c0 <__pow5mult+0x38>
   dd5b0:	2010      	movs	r0, #16
   dd5b2:	f7fa fb93 	bl	d7cdc <malloc>
   dd5b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dd5ba:	6270      	str	r0, [r6, #36]	; 0x24
   dd5bc:	6004      	str	r4, [r0, #0]
   dd5be:	60c4      	str	r4, [r0, #12]
   dd5c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dd5c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dd5c8:	b94c      	cbnz	r4, dd5de <__pow5mult+0x56>
   dd5ca:	f240 2171 	movw	r1, #625	; 0x271
   dd5ce:	4630      	mov	r0, r6
   dd5d0:	f7ff ff35 	bl	dd43e <__i2b>
   dd5d4:	2300      	movs	r3, #0
   dd5d6:	f8c8 0008 	str.w	r0, [r8, #8]
   dd5da:	4604      	mov	r4, r0
   dd5dc:	6003      	str	r3, [r0, #0]
   dd5de:	f04f 0900 	mov.w	r9, #0
   dd5e2:	07eb      	lsls	r3, r5, #31
   dd5e4:	d50a      	bpl.n	dd5fc <__pow5mult+0x74>
   dd5e6:	4639      	mov	r1, r7
   dd5e8:	4622      	mov	r2, r4
   dd5ea:	4630      	mov	r0, r6
   dd5ec:	f7ff ff30 	bl	dd450 <__multiply>
   dd5f0:	4639      	mov	r1, r7
   dd5f2:	4680      	mov	r8, r0
   dd5f4:	4630      	mov	r0, r6
   dd5f6:	f7ff fe3f 	bl	dd278 <_Bfree>
   dd5fa:	4647      	mov	r7, r8
   dd5fc:	106d      	asrs	r5, r5, #1
   dd5fe:	d00b      	beq.n	dd618 <__pow5mult+0x90>
   dd600:	6820      	ldr	r0, [r4, #0]
   dd602:	b938      	cbnz	r0, dd614 <__pow5mult+0x8c>
   dd604:	4622      	mov	r2, r4
   dd606:	4621      	mov	r1, r4
   dd608:	4630      	mov	r0, r6
   dd60a:	f7ff ff21 	bl	dd450 <__multiply>
   dd60e:	6020      	str	r0, [r4, #0]
   dd610:	f8c0 9000 	str.w	r9, [r0]
   dd614:	4604      	mov	r4, r0
   dd616:	e7e4      	b.n	dd5e2 <__pow5mult+0x5a>
   dd618:	4638      	mov	r0, r7
   dd61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd61e:	bf00      	nop
   dd620:	000deba8 	.word	0x000deba8

000dd624 <__lshift>:
   dd624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd628:	460c      	mov	r4, r1
   dd62a:	6849      	ldr	r1, [r1, #4]
   dd62c:	6923      	ldr	r3, [r4, #16]
   dd62e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dd632:	68a3      	ldr	r3, [r4, #8]
   dd634:	4607      	mov	r7, r0
   dd636:	4691      	mov	r9, r2
   dd638:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dd63c:	f108 0601 	add.w	r6, r8, #1
   dd640:	42b3      	cmp	r3, r6
   dd642:	db3f      	blt.n	dd6c4 <__lshift+0xa0>
   dd644:	4638      	mov	r0, r7
   dd646:	f7ff fde3 	bl	dd210 <_Balloc>
   dd64a:	2300      	movs	r3, #0
   dd64c:	4605      	mov	r5, r0
   dd64e:	f100 0114 	add.w	r1, r0, #20
   dd652:	f100 0210 	add.w	r2, r0, #16
   dd656:	4618      	mov	r0, r3
   dd658:	4553      	cmp	r3, sl
   dd65a:	db36      	blt.n	dd6ca <__lshift+0xa6>
   dd65c:	6920      	ldr	r0, [r4, #16]
   dd65e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dd662:	f104 0314 	add.w	r3, r4, #20
   dd666:	f019 091f 	ands.w	r9, r9, #31
   dd66a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dd66e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dd672:	d02e      	beq.n	dd6d2 <__lshift+0xae>
   dd674:	f1c9 0e20 	rsb	lr, r9, #32
   dd678:	468a      	mov	sl, r1
   dd67a:	2200      	movs	r2, #0
   dd67c:	6818      	ldr	r0, [r3, #0]
   dd67e:	fa00 f009 	lsl.w	r0, r0, r9
   dd682:	4302      	orrs	r2, r0
   dd684:	f84a 2b04 	str.w	r2, [sl], #4
   dd688:	f853 2b04 	ldr.w	r2, [r3], #4
   dd68c:	459c      	cmp	ip, r3
   dd68e:	fa22 f20e 	lsr.w	r2, r2, lr
   dd692:	d8f3      	bhi.n	dd67c <__lshift+0x58>
   dd694:	ebac 0304 	sub.w	r3, ip, r4
   dd698:	3b15      	subs	r3, #21
   dd69a:	f023 0303 	bic.w	r3, r3, #3
   dd69e:	3304      	adds	r3, #4
   dd6a0:	f104 0015 	add.w	r0, r4, #21
   dd6a4:	4560      	cmp	r0, ip
   dd6a6:	bf88      	it	hi
   dd6a8:	2304      	movhi	r3, #4
   dd6aa:	50ca      	str	r2, [r1, r3]
   dd6ac:	b10a      	cbz	r2, dd6b2 <__lshift+0x8e>
   dd6ae:	f108 0602 	add.w	r6, r8, #2
   dd6b2:	3e01      	subs	r6, #1
   dd6b4:	4638      	mov	r0, r7
   dd6b6:	612e      	str	r6, [r5, #16]
   dd6b8:	4621      	mov	r1, r4
   dd6ba:	f7ff fddd 	bl	dd278 <_Bfree>
   dd6be:	4628      	mov	r0, r5
   dd6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd6c4:	3101      	adds	r1, #1
   dd6c6:	005b      	lsls	r3, r3, #1
   dd6c8:	e7ba      	b.n	dd640 <__lshift+0x1c>
   dd6ca:	f842 0f04 	str.w	r0, [r2, #4]!
   dd6ce:	3301      	adds	r3, #1
   dd6d0:	e7c2      	b.n	dd658 <__lshift+0x34>
   dd6d2:	3904      	subs	r1, #4
   dd6d4:	f853 2b04 	ldr.w	r2, [r3], #4
   dd6d8:	f841 2f04 	str.w	r2, [r1, #4]!
   dd6dc:	459c      	cmp	ip, r3
   dd6de:	d8f9      	bhi.n	dd6d4 <__lshift+0xb0>
   dd6e0:	e7e7      	b.n	dd6b2 <__lshift+0x8e>

000dd6e2 <__mcmp>:
   dd6e2:	b530      	push	{r4, r5, lr}
   dd6e4:	6902      	ldr	r2, [r0, #16]
   dd6e6:	690c      	ldr	r4, [r1, #16]
   dd6e8:	1b12      	subs	r2, r2, r4
   dd6ea:	d10e      	bne.n	dd70a <__mcmp+0x28>
   dd6ec:	f100 0314 	add.w	r3, r0, #20
   dd6f0:	3114      	adds	r1, #20
   dd6f2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dd6f6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dd6fa:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dd6fe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dd702:	42a5      	cmp	r5, r4
   dd704:	d003      	beq.n	dd70e <__mcmp+0x2c>
   dd706:	d305      	bcc.n	dd714 <__mcmp+0x32>
   dd708:	2201      	movs	r2, #1
   dd70a:	4610      	mov	r0, r2
   dd70c:	bd30      	pop	{r4, r5, pc}
   dd70e:	4283      	cmp	r3, r0
   dd710:	d3f3      	bcc.n	dd6fa <__mcmp+0x18>
   dd712:	e7fa      	b.n	dd70a <__mcmp+0x28>
   dd714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd718:	e7f7      	b.n	dd70a <__mcmp+0x28>

000dd71a <__mdiff>:
   dd71a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd71e:	460c      	mov	r4, r1
   dd720:	4606      	mov	r6, r0
   dd722:	4611      	mov	r1, r2
   dd724:	4620      	mov	r0, r4
   dd726:	4617      	mov	r7, r2
   dd728:	f7ff ffdb 	bl	dd6e2 <__mcmp>
   dd72c:	1e05      	subs	r5, r0, #0
   dd72e:	d108      	bne.n	dd742 <__mdiff+0x28>
   dd730:	4629      	mov	r1, r5
   dd732:	4630      	mov	r0, r6
   dd734:	f7ff fd6c 	bl	dd210 <_Balloc>
   dd738:	2301      	movs	r3, #1
   dd73a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dd73e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd742:	bfa4      	itt	ge
   dd744:	463b      	movge	r3, r7
   dd746:	4627      	movge	r7, r4
   dd748:	4630      	mov	r0, r6
   dd74a:	6879      	ldr	r1, [r7, #4]
   dd74c:	bfa6      	itte	ge
   dd74e:	461c      	movge	r4, r3
   dd750:	2500      	movge	r5, #0
   dd752:	2501      	movlt	r5, #1
   dd754:	f7ff fd5c 	bl	dd210 <_Balloc>
   dd758:	693e      	ldr	r6, [r7, #16]
   dd75a:	60c5      	str	r5, [r0, #12]
   dd75c:	6925      	ldr	r5, [r4, #16]
   dd75e:	f107 0114 	add.w	r1, r7, #20
   dd762:	f104 0914 	add.w	r9, r4, #20
   dd766:	f100 0e14 	add.w	lr, r0, #20
   dd76a:	f107 0210 	add.w	r2, r7, #16
   dd76e:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dd772:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dd776:	46f2      	mov	sl, lr
   dd778:	2700      	movs	r7, #0
   dd77a:	f859 3b04 	ldr.w	r3, [r9], #4
   dd77e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dd782:	fa1f f883 	uxth.w	r8, r3
   dd786:	fa17 f78b 	uxtah	r7, r7, fp
   dd78a:	0c1b      	lsrs	r3, r3, #16
   dd78c:	eba7 0808 	sub.w	r8, r7, r8
   dd790:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dd794:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dd798:	fa1f f888 	uxth.w	r8, r8
   dd79c:	141f      	asrs	r7, r3, #16
   dd79e:	454d      	cmp	r5, r9
   dd7a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dd7a4:	f84a 3b04 	str.w	r3, [sl], #4
   dd7a8:	d8e7      	bhi.n	dd77a <__mdiff+0x60>
   dd7aa:	1b2b      	subs	r3, r5, r4
   dd7ac:	3b15      	subs	r3, #21
   dd7ae:	f023 0303 	bic.w	r3, r3, #3
   dd7b2:	3304      	adds	r3, #4
   dd7b4:	3415      	adds	r4, #21
   dd7b6:	42a5      	cmp	r5, r4
   dd7b8:	bf38      	it	cc
   dd7ba:	2304      	movcc	r3, #4
   dd7bc:	4419      	add	r1, r3
   dd7be:	4473      	add	r3, lr
   dd7c0:	469e      	mov	lr, r3
   dd7c2:	460d      	mov	r5, r1
   dd7c4:	4565      	cmp	r5, ip
   dd7c6:	d30e      	bcc.n	dd7e6 <__mdiff+0xcc>
   dd7c8:	f10c 0203 	add.w	r2, ip, #3
   dd7cc:	1a52      	subs	r2, r2, r1
   dd7ce:	f022 0203 	bic.w	r2, r2, #3
   dd7d2:	3903      	subs	r1, #3
   dd7d4:	458c      	cmp	ip, r1
   dd7d6:	bf38      	it	cc
   dd7d8:	2200      	movcc	r2, #0
   dd7da:	441a      	add	r2, r3
   dd7dc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dd7e0:	b17b      	cbz	r3, dd802 <__mdiff+0xe8>
   dd7e2:	6106      	str	r6, [r0, #16]
   dd7e4:	e7ab      	b.n	dd73e <__mdiff+0x24>
   dd7e6:	f855 8b04 	ldr.w	r8, [r5], #4
   dd7ea:	fa17 f488 	uxtah	r4, r7, r8
   dd7ee:	1422      	asrs	r2, r4, #16
   dd7f0:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dd7f4:	b2a4      	uxth	r4, r4
   dd7f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dd7fa:	f84e 4b04 	str.w	r4, [lr], #4
   dd7fe:	1417      	asrs	r7, r2, #16
   dd800:	e7e0      	b.n	dd7c4 <__mdiff+0xaa>
   dd802:	3e01      	subs	r6, #1
   dd804:	e7ea      	b.n	dd7dc <__mdiff+0xc2>
	...

000dd808 <__ulp>:
   dd808:	b082      	sub	sp, #8
   dd80a:	ed8d 0b00 	vstr	d0, [sp]
   dd80e:	9b01      	ldr	r3, [sp, #4]
   dd810:	4912      	ldr	r1, [pc, #72]	; (dd85c <__ulp+0x54>)
   dd812:	4019      	ands	r1, r3
   dd814:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dd818:	2900      	cmp	r1, #0
   dd81a:	dd05      	ble.n	dd828 <__ulp+0x20>
   dd81c:	2200      	movs	r2, #0
   dd81e:	460b      	mov	r3, r1
   dd820:	ec43 2b10 	vmov	d0, r2, r3
   dd824:	b002      	add	sp, #8
   dd826:	4770      	bx	lr
   dd828:	4249      	negs	r1, r1
   dd82a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dd82e:	ea4f 5021 	mov.w	r0, r1, asr #20
   dd832:	f04f 0200 	mov.w	r2, #0
   dd836:	f04f 0300 	mov.w	r3, #0
   dd83a:	da04      	bge.n	dd846 <__ulp+0x3e>
   dd83c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dd840:	fa41 f300 	asr.w	r3, r1, r0
   dd844:	e7ec      	b.n	dd820 <__ulp+0x18>
   dd846:	f1a0 0114 	sub.w	r1, r0, #20
   dd84a:	291e      	cmp	r1, #30
   dd84c:	bfda      	itte	le
   dd84e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dd852:	fa20 f101 	lsrle.w	r1, r0, r1
   dd856:	2101      	movgt	r1, #1
   dd858:	460a      	mov	r2, r1
   dd85a:	e7e1      	b.n	dd820 <__ulp+0x18>
   dd85c:	7ff00000 	.word	0x7ff00000

000dd860 <__b2d>:
   dd860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd862:	6905      	ldr	r5, [r0, #16]
   dd864:	f100 0714 	add.w	r7, r0, #20
   dd868:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dd86c:	1f2e      	subs	r6, r5, #4
   dd86e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dd872:	4620      	mov	r0, r4
   dd874:	f7ff fd93 	bl	dd39e <__hi0bits>
   dd878:	f1c0 0320 	rsb	r3, r0, #32
   dd87c:	280a      	cmp	r0, #10
   dd87e:	f8df c07c 	ldr.w	ip, [pc, #124]	; dd8fc <__b2d+0x9c>
   dd882:	600b      	str	r3, [r1, #0]
   dd884:	dc14      	bgt.n	dd8b0 <__b2d+0x50>
   dd886:	f1c0 0e0b 	rsb	lr, r0, #11
   dd88a:	fa24 f10e 	lsr.w	r1, r4, lr
   dd88e:	42b7      	cmp	r7, r6
   dd890:	ea41 030c 	orr.w	r3, r1, ip
   dd894:	bf34      	ite	cc
   dd896:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd89a:	2100      	movcs	r1, #0
   dd89c:	3015      	adds	r0, #21
   dd89e:	fa04 f000 	lsl.w	r0, r4, r0
   dd8a2:	fa21 f10e 	lsr.w	r1, r1, lr
   dd8a6:	ea40 0201 	orr.w	r2, r0, r1
   dd8aa:	ec43 2b10 	vmov	d0, r2, r3
   dd8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd8b0:	42b7      	cmp	r7, r6
   dd8b2:	bf3a      	itte	cc
   dd8b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd8b8:	f1a5 0608 	subcc.w	r6, r5, #8
   dd8bc:	2100      	movcs	r1, #0
   dd8be:	380b      	subs	r0, #11
   dd8c0:	d017      	beq.n	dd8f2 <__b2d+0x92>
   dd8c2:	f1c0 0c20 	rsb	ip, r0, #32
   dd8c6:	fa04 f500 	lsl.w	r5, r4, r0
   dd8ca:	42be      	cmp	r6, r7
   dd8cc:	fa21 f40c 	lsr.w	r4, r1, ip
   dd8d0:	ea45 0504 	orr.w	r5, r5, r4
   dd8d4:	bf8c      	ite	hi
   dd8d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dd8da:	2400      	movls	r4, #0
   dd8dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dd8e0:	fa01 f000 	lsl.w	r0, r1, r0
   dd8e4:	fa24 f40c 	lsr.w	r4, r4, ip
   dd8e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dd8ec:	ea40 0204 	orr.w	r2, r0, r4
   dd8f0:	e7db      	b.n	dd8aa <__b2d+0x4a>
   dd8f2:	ea44 030c 	orr.w	r3, r4, ip
   dd8f6:	460a      	mov	r2, r1
   dd8f8:	e7d7      	b.n	dd8aa <__b2d+0x4a>
   dd8fa:	bf00      	nop
   dd8fc:	3ff00000 	.word	0x3ff00000

000dd900 <__d2b>:
   dd900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd904:	4689      	mov	r9, r1
   dd906:	2101      	movs	r1, #1
   dd908:	ec57 6b10 	vmov	r6, r7, d0
   dd90c:	4690      	mov	r8, r2
   dd90e:	f7ff fc7f 	bl	dd210 <_Balloc>
   dd912:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dd916:	4604      	mov	r4, r0
   dd918:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dd91c:	bb35      	cbnz	r5, dd96c <__d2b+0x6c>
   dd91e:	2e00      	cmp	r6, #0
   dd920:	9301      	str	r3, [sp, #4]
   dd922:	d028      	beq.n	dd976 <__d2b+0x76>
   dd924:	4668      	mov	r0, sp
   dd926:	9600      	str	r6, [sp, #0]
   dd928:	f7ff fd59 	bl	dd3de <__lo0bits>
   dd92c:	9900      	ldr	r1, [sp, #0]
   dd92e:	b300      	cbz	r0, dd972 <__d2b+0x72>
   dd930:	9a01      	ldr	r2, [sp, #4]
   dd932:	f1c0 0320 	rsb	r3, r0, #32
   dd936:	fa02 f303 	lsl.w	r3, r2, r3
   dd93a:	430b      	orrs	r3, r1
   dd93c:	40c2      	lsrs	r2, r0
   dd93e:	6163      	str	r3, [r4, #20]
   dd940:	9201      	str	r2, [sp, #4]
   dd942:	9b01      	ldr	r3, [sp, #4]
   dd944:	61a3      	str	r3, [r4, #24]
   dd946:	2b00      	cmp	r3, #0
   dd948:	bf14      	ite	ne
   dd94a:	2202      	movne	r2, #2
   dd94c:	2201      	moveq	r2, #1
   dd94e:	6122      	str	r2, [r4, #16]
   dd950:	b1d5      	cbz	r5, dd988 <__d2b+0x88>
   dd952:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dd956:	4405      	add	r5, r0
   dd958:	f8c9 5000 	str.w	r5, [r9]
   dd95c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dd960:	f8c8 0000 	str.w	r0, [r8]
   dd964:	4620      	mov	r0, r4
   dd966:	b003      	add	sp, #12
   dd968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd96c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd970:	e7d5      	b.n	dd91e <__d2b+0x1e>
   dd972:	6161      	str	r1, [r4, #20]
   dd974:	e7e5      	b.n	dd942 <__d2b+0x42>
   dd976:	a801      	add	r0, sp, #4
   dd978:	f7ff fd31 	bl	dd3de <__lo0bits>
   dd97c:	9b01      	ldr	r3, [sp, #4]
   dd97e:	6163      	str	r3, [r4, #20]
   dd980:	2201      	movs	r2, #1
   dd982:	6122      	str	r2, [r4, #16]
   dd984:	3020      	adds	r0, #32
   dd986:	e7e3      	b.n	dd950 <__d2b+0x50>
   dd988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dd98c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dd990:	f8c9 0000 	str.w	r0, [r9]
   dd994:	6918      	ldr	r0, [r3, #16]
   dd996:	f7ff fd02 	bl	dd39e <__hi0bits>
   dd99a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dd99e:	e7df      	b.n	dd960 <__d2b+0x60>

000dd9a0 <__ratio>:
   dd9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd9a4:	4688      	mov	r8, r1
   dd9a6:	4669      	mov	r1, sp
   dd9a8:	4681      	mov	r9, r0
   dd9aa:	f7ff ff59 	bl	dd860 <__b2d>
   dd9ae:	a901      	add	r1, sp, #4
   dd9b0:	4640      	mov	r0, r8
   dd9b2:	ec55 4b10 	vmov	r4, r5, d0
   dd9b6:	f7ff ff53 	bl	dd860 <__b2d>
   dd9ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dd9be:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dd9c2:	eba3 0c02 	sub.w	ip, r3, r2
   dd9c6:	e9dd 3200 	ldrd	r3, r2, [sp]
   dd9ca:	1a9b      	subs	r3, r3, r2
   dd9cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dd9d0:	ec51 0b10 	vmov	r0, r1, d0
   dd9d4:	2b00      	cmp	r3, #0
   dd9d6:	bfd6      	itet	le
   dd9d8:	460a      	movle	r2, r1
   dd9da:	462a      	movgt	r2, r5
   dd9dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dd9e0:	468b      	mov	fp, r1
   dd9e2:	462f      	mov	r7, r5
   dd9e4:	bfd4      	ite	le
   dd9e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dd9ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dd9ee:	4620      	mov	r0, r4
   dd9f0:	ee10 2a10 	vmov	r2, s0
   dd9f4:	465b      	mov	r3, fp
   dd9f6:	4639      	mov	r1, r7
   dd9f8:	f7fd fdfe 	bl	db5f8 <__aeabi_ddiv>
   dd9fc:	ec41 0b10 	vmov	d0, r0, r1
   dda00:	b003      	add	sp, #12
   dda02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dda06 <__copybits>:
   dda06:	3901      	subs	r1, #1
   dda08:	b570      	push	{r4, r5, r6, lr}
   dda0a:	1149      	asrs	r1, r1, #5
   dda0c:	6914      	ldr	r4, [r2, #16]
   dda0e:	3101      	adds	r1, #1
   dda10:	f102 0314 	add.w	r3, r2, #20
   dda14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dda18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dda1c:	1f05      	subs	r5, r0, #4
   dda1e:	42a3      	cmp	r3, r4
   dda20:	d30c      	bcc.n	dda3c <__copybits+0x36>
   dda22:	1aa3      	subs	r3, r4, r2
   dda24:	3b11      	subs	r3, #17
   dda26:	f023 0303 	bic.w	r3, r3, #3
   dda2a:	3211      	adds	r2, #17
   dda2c:	42a2      	cmp	r2, r4
   dda2e:	bf88      	it	hi
   dda30:	2300      	movhi	r3, #0
   dda32:	4418      	add	r0, r3
   dda34:	2300      	movs	r3, #0
   dda36:	4288      	cmp	r0, r1
   dda38:	d305      	bcc.n	dda46 <__copybits+0x40>
   dda3a:	bd70      	pop	{r4, r5, r6, pc}
   dda3c:	f853 6b04 	ldr.w	r6, [r3], #4
   dda40:	f845 6f04 	str.w	r6, [r5, #4]!
   dda44:	e7eb      	b.n	dda1e <__copybits+0x18>
   dda46:	f840 3b04 	str.w	r3, [r0], #4
   dda4a:	e7f4      	b.n	dda36 <__copybits+0x30>

000dda4c <__any_on>:
   dda4c:	f100 0214 	add.w	r2, r0, #20
   dda50:	6900      	ldr	r0, [r0, #16]
   dda52:	114b      	asrs	r3, r1, #5
   dda54:	4298      	cmp	r0, r3
   dda56:	b510      	push	{r4, lr}
   dda58:	db11      	blt.n	dda7e <__any_on+0x32>
   dda5a:	dd0a      	ble.n	dda72 <__any_on+0x26>
   dda5c:	f011 011f 	ands.w	r1, r1, #31
   dda60:	d007      	beq.n	dda72 <__any_on+0x26>
   dda62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dda66:	fa24 f001 	lsr.w	r0, r4, r1
   dda6a:	fa00 f101 	lsl.w	r1, r0, r1
   dda6e:	428c      	cmp	r4, r1
   dda70:	d10b      	bne.n	dda8a <__any_on+0x3e>
   dda72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dda76:	4293      	cmp	r3, r2
   dda78:	d803      	bhi.n	dda82 <__any_on+0x36>
   dda7a:	2000      	movs	r0, #0
   dda7c:	bd10      	pop	{r4, pc}
   dda7e:	4603      	mov	r3, r0
   dda80:	e7f7      	b.n	dda72 <__any_on+0x26>
   dda82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dda86:	2900      	cmp	r1, #0
   dda88:	d0f5      	beq.n	dda76 <__any_on+0x2a>
   dda8a:	2001      	movs	r0, #1
   dda8c:	e7f6      	b.n	dda7c <__any_on+0x30>

000dda8e <_calloc_r>:
   dda8e:	b513      	push	{r0, r1, r4, lr}
   dda90:	434a      	muls	r2, r1
   dda92:	4611      	mov	r1, r2
   dda94:	9201      	str	r2, [sp, #4]
   dda96:	f7fa f959 	bl	d7d4c <_malloc_r>
   dda9a:	4604      	mov	r4, r0
   dda9c:	b118      	cbz	r0, ddaa6 <_calloc_r+0x18>
   dda9e:	9a01      	ldr	r2, [sp, #4]
   ddaa0:	2100      	movs	r1, #0
   ddaa2:	f7fe f88b 	bl	dbbbc <memset>
   ddaa6:	4620      	mov	r0, r4
   ddaa8:	b002      	add	sp, #8
   ddaaa:	bd10      	pop	{r4, pc}
   ddaac:	0000      	movs	r0, r0
	...

000ddab0 <nan>:
   ddab0:	ed9f 0b01 	vldr	d0, [pc, #4]	; ddab8 <nan+0x8>
   ddab4:	4770      	bx	lr
   ddab6:	bf00      	nop
   ddab8:	00000000 	.word	0x00000000
   ddabc:	7ff80000 	.word	0x7ff80000

000ddac0 <nanf>:
   ddac0:	ed9f 0a01 	vldr	s0, [pc, #4]	; ddac8 <nanf+0x8>
   ddac4:	4770      	bx	lr
   ddac6:	bf00      	nop
   ddac8:	7fc00000 	.word	0x7fc00000

000ddacc <__ascii_wctomb>:
   ddacc:	b149      	cbz	r1, ddae2 <__ascii_wctomb+0x16>
   ddace:	2aff      	cmp	r2, #255	; 0xff
   ddad0:	bf85      	ittet	hi
   ddad2:	238a      	movhi	r3, #138	; 0x8a
   ddad4:	6003      	strhi	r3, [r0, #0]
   ddad6:	700a      	strbls	r2, [r1, #0]
   ddad8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   ddadc:	bf98      	it	ls
   ddade:	2001      	movls	r0, #1
   ddae0:	4770      	bx	lr
   ddae2:	4608      	mov	r0, r1
   ddae4:	4770      	bx	lr
	...

000ddae8 <__aeabi_d2lz>:
   ddae8:	b538      	push	{r3, r4, r5, lr}
   ddaea:	2200      	movs	r2, #0
   ddaec:	2300      	movs	r3, #0
   ddaee:	4604      	mov	r4, r0
   ddaf0:	460d      	mov	r5, r1
   ddaf2:	f7fd fec9 	bl	db888 <__aeabi_dcmplt>
   ddaf6:	b928      	cbnz	r0, ddb04 <__aeabi_d2lz+0x1c>
   ddaf8:	4620      	mov	r0, r4
   ddafa:	4629      	mov	r1, r5
   ddafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ddb00:	f7fd bfcc 	b.w	dba9c <__aeabi_d2ulz>
   ddb04:	4620      	mov	r0, r4
   ddb06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   ddb0a:	f7fd ffc7 	bl	dba9c <__aeabi_d2ulz>
   ddb0e:	4240      	negs	r0, r0
   ddb10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddb14:	bd38      	pop	{r3, r4, r5, pc}
   ddb16:	bf00      	nop

000ddb18 <dynalib_user>:
   ddb18:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   ddb28:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   ddb38:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   ddb48:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   ddb58:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   ddb68:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   ddb78:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   ddb88:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   ddb98:	4400 6369 6e6f 656e 7463 6465 4e00 206f     .Diconnected.No 
   ddba8:	6144 6174 5200 7365 6f70 736e 2065 6552     Data.Response Re
   ddbb8:	6563 7669 6465 5500 6b6e 6f6e 6e77 7220     ceived.Unknown r
   ddbc8:	7365 6f70 736e 2065 6572 6563 6976 6465     esponse recevied
   ddbd8:	2520 0069 6255 6469 746f 2073 6f48 6b6f      %i.Ubidots Hook
   ddbe8:	4800 7261 2064 6552 6573 2074 6e69 3220     .Hard Reset in 2
   ddbf8:	7320 6365 6e6f 7364 5300 7465 5620 7265      seconds.Set Ver
   ddc08:	6f62 6573 4d20 646f 0065 6c43 6165 6572     bose Mode.Cleare
   ddc18:	2064 6556 6272 736f 2065 6f4d 6564 4f00     d Verbose Mode.O
   ddc28:	6570 206e 6974 656d 7320 7465 7420 206f     pen time set to 
   ddc38:	6925 4c00 776f 5020 776f 7265 4d20 646f     %i.Low Power Mod
   ddc48:	0065 6f4e 6d72 6c61 4f20 6570 6172 6974     e.Normal Operati
   ddc58:	6e6f 0073 6f4e 2074 6f4c 2077 6f50 6577     ons.Not Low Powe
   ddc68:	0072 3225 312e 2066 2525 7b00 7322 696f     r.%2.1f %%.{"soi
   ddc78:	4d6c 696f 7473 7275 2265 253a 2c69 2220     lMoisture":%i, "
   ddc88:	6177 6574 6972 676e 3a22 6925 202c 6222     watering":%i, "b
   ddc98:	7461 6574 7972 3a22 6925 222c 656b 3179     attery":%i,"key1
   ddca8:	3a22 2522 2273 222c 6574 706d 3a22 6925     ":"%s","temp":%i
   ddcb8:	202c 7222 7365 7465 2273 253a 2c69 2220     , "resets":%i, "
   ddcc8:	6c61 7265 7374 3a22 6925 202c 6322 6e6f     alerts":%i, "con
   ddcd8:	656e 7463 6974 656d 3a22 6925 222c 6974     necttime":%i,"ti
   ddce8:	656d 7473 6d61 2270 253a 756c 3030 7d30     mestamp":%lu000}
   ddcf8:	5500 6962 6f64 7374 412d 7571 4d61 7361     .Ubidots-AquaMas
   ddd08:	6574 2d72 6147 6472 6e65 762d 0031 7325     ter-Garden-v1.%s
   ddd18:	5320 253a 2e32 6630 2525 202c 3a51 3225      S:%2.0f%%, Q:%2
   ddd28:	302e 2566 2025 5300 7465 5320 6c6f 7261     .0f%% .Set Solar
   ddd38:	5020 776f 7265 6465 4d20 646f 0065 6c43      Powered Mode.Cl
   ddd48:	6165 6572 2064 6f53 616c 2072 6f50 6577     eared Solar Powe
   ddd58:	6572 2064 6f4d 6564 4e00 0041 6925 303a     red Mode.NA.%i:0
   ddd68:	0030 6c43 736f 6e69 2067 6974 656d 7320     0.Closing time s
   ddd78:	7465 7420 206f 6925 4600 6f72 206d 7325     et to %i.From %s
   ddd88:	7420 206f 7325 5300 6174 6574 5420 6172      to %s.State Tra
   ddd98:	736e 7469 6f69 006e 7552 6e6e 6e69 0067     nsition.Running.
   ddda8:	6144 6c69 2079 6c43 6165 756e 0070 6f4c     Daily Cleanup.Lo
   dddb8:	6461 6e69 2067 7953 7473 6d65 4420 6665     ading System Def
   dddc8:	7561 746c 0073 6f4c 6461 6e69 2067 7973     aults.Loading sy
   dddd8:	7473 6d65 6420 6665 7561 746c 0073 6f53     stem defaults.So
   ddde8:	6c69 6f4d 7369 7574 6572 5300 6769 616e     ilMoisture.Signa
   dddf8:	006c 6552 6573 4374 756f 746e 5400 6d65     l.ResetCount.Tem
   dde08:	6570 6172 7574 6572 5200 6c65 6165 6573     perature.Release
   dde18:	7300 6174 6574 664f 6843 0067 6f6c 5077     .stateOfChg.lowP
   dde28:	776f 7265 6f4d 6564 4300 6f6c 6573 6954     owerMode.CloseTi
   dde38:	656d 4100 656c 7472 0073 6954 656d 664f     me.Alerts.TimeOf
   dde48:	7366 7465 4200 7461 6574 7972 6f43 746e     fset.BatteryCont
   dde58:	7865 0074 6157 6574 6972 676e 6350 0074     ext.WateringPct.
   dde68:	6572 6573 4374 756f 746e 0073 6148 6472     resetCounts.Hard
   dde78:	6552 6573 0074 6553 646e 6f4e 0077 6f4c     Reset.SendNow.Lo
   dde88:	5077 776f 7265 6f4d 6564 5300 6c6f 7261     wPowerMode.Solar
   dde98:	4d2d 646f 0065 6556 6272 736f 2d65 6f4d     -Mode.Verbose-Mo
   ddea8:	6564 5300 7465 542d 6d69 7a65 6e6f 0065     de.Set-Timezone.
   ddeb8:	6553 2d74 5344 4f54 6666 6573 0074 6553     Set-DSTOffset.Se
   ddec8:	2d74 704f 6e65 6954 656d 5300 7465 432d     t-OpenTime.Set-C
   dded8:	6f6c 6573 5300 7465 6157 6574 5472 7268     lose.SetWaterThr
   ddee8:	7365 6f68 646c 2500 2e32 6631 5520 4354     eshold.%2.1f UTC
   ddef8:	6300 6f6c 6475 6320 6e6f 656e 7463 6f69     .cloud connectio
   ddf08:	206e 7573 6363 7365 6673 6c75 6300 6f6c     n successful.clo
   ddf18:	6475 6320 6e6f 656e 7463 6f69 206e 6e75     ud connection un
   ddf28:	7573 6363 7365 6673 6c75 4300 6e6f 656e     successful.Conne
   ddf38:	7463 6465 6920 206e 6925 7320 6365 0073     cted in %i secs.
   ddf48:	6543 6c6c 6c75 7261 4e00 206f 6177 6574     Cellular.No wate
   ddf58:	6972 676e 6e20 6565 6564 2064 7461 7420     ring needed at t
   ddf68:	6968 2073 6974 656d 5700 7461 7265 6e69     his time.Waterin
   ddf78:	0067 227b 7564 6172 6974 6e6f 3a22 6925     g.{"duration":%i
   ddf88:	007d 6152 6863 6f69 572d 7461 7265 6147     }.Rachio-WaterGa
   ddf98:	6472 6e65 6600 6961 656c 2064 6f74 6320     rden.failed to c
   ddfa8:	6e6f 656e 7463 7420 206f 6c63 756f 2c64     onnect to cloud,
   ddfb8:	6420 696f 676e 6420 6565 2070 6572 6573      doing deep rese
   ddfc8:	0074 7245 6f72 2072 7453 7461 2065 202d     t.Error State - 
   ddfd8:	7546 6c6c 4d20 646f 6d65 5220 7365 7465     Full Modem Reset
   ddfe8:	5300 6174 6574 4500 7272 726f 5320 6174     .State.Error Sta
   ddff8:	6574 2d20 5320 7379 6574 206d 6552 6573     te - System Rese
   de008:	0074 754f 2074 666f 6d20 6d65 726f 2079     t.Out of memory 
   de018:	636f 7563 7272 6465 7320 7a69 3d65 6425     occurred size=%d
   de028:	4d00 6d65 726f 0079                         .Memory.

000de030 <_ZTV5Timer>:
	...
   de038:	430d 000d 4361 000d 4165 000d               .C..aC..eA..

000de044 <_ZTVN5spark10LogHandlerE>:
	...
   de054:	40a5 000d 40c9 000d                         .@...@..

000de05c <_ZTVN5spark16SerialLogHandlerE>:
	...
   de064:	4295 000d 42c9 000d 9aed 000d 40cb 000d     .B...B.......@..

000de074 <_ZTV8MB85RC64>:
	...
   de07c:	4199 000d 41ad 000d 6d11 000d 6da7 000d     .A...A...m...m..
   de08c:	6e29 000d                                   )n..

000de090 <_ZTV17PublishQueueAsync>:
	...
   de098:	4171 000d 4185 000d 7339 000d 7101 000d     qA...A..9s...q..
   de0a8:	70a9 000d 7087 000d 7291 000d 70e5 000d     .p...p...r...p..
   de0b8:	db2c 000d db34 000d db39 000d db3e 000d     ,...4...9...>...
   de0c8:	db42 000d db47 000d db4c 000d db50 000d     B...G...L...P...
   de0d8:	db5b 000d db66 000d                         [...f...

000de0e0 <_ZL17FRAMversionNumber>:
   de0e0:	0001 0000 6954 656d 7a20 6e6f 2065 666f     ....Time zone of
   de0f0:	7366 7465 2520 0069 5344 2054 666f 7366     fset %i.DST offs
   de100:	7465 2520 2e32 6631 6600 6961 656c 2064     et %2.1f.failed 
   de110:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   de120:	3025 7832 6320 756f 746e 253d 0075 6166     %02x count=%u.fa
   de130:	6c69 6465 7420 206f 6572 6461 7220 6765     iled to read reg
   de140:	6441 7264 253d 3230 2078 7473 7461 253d     Addr=%02x stat=%
   de150:	0064 4f46 5455 6420 6469 6e20 746f 6720     d.FOUT did not g
   de160:	206f 4948 4847 6e00 746f 6420 7465 6365     o HIGH.not detec
   de170:	6574 0064 6166 6c69 6465 7420 206f 7277     ted.failed to wr
   de180:	7469 2065 6572 4167 6464 3d72 3025 7832     ite regAddr=%02x
   de190:	7320 6174 3d74 6425 7300 7465 4457 2054      stat=%d.setWDT 
   de1a0:	6425 7700 7461 6863 6f64 2067 6c63 6165     %d.watchdog clea
   de1b0:	6572 2064 5262 7365 6c75 3d74 6425 7700     red bResult=%d.w
   de1c0:	7461 6863 6f64 2067 6573 2074 6f66 7275     atchdog set four
   de1d0:	6553 7363 253d 2064 5262 7365 6c75 3d74     Secs=%d bResult=
   de1e0:	6425 5700 5441 4843 4f44 0047 4544 5045     %d.WATCHDOG.DEEP
   de1f0:	505f 574f 5245 445f 574f 004e 4f43 4e55     _POWER_DOWN.COUN
   de200:	4454 574f 5f4e 4954 454d 0052 4c41 5241     TDOWN_TIMER.ALAR
   de210:	004d 6166 6c69 7275 2065 6e69 7520 6470     M.failure in upd
   de220:	7461 5765 6b61 5265 6165 6f73 206e 6425     ateWakeReason %d
   de230:	7700 6b61 2065 6572 7361 6e6f 3d20 2520     .wake reason = %
   de240:	0073 6166 6c69 7275 2065 6e69 7320 7465     s.failure in set
   de250:	6f43 6e75 6474 776f 546e 6d69 7265 2520     CountdownTimer %
   de260:	0064 6166 6c69 7275 2065 6e69 6420 6565     d.failure in dee
   de270:	5070 776f 7265 6f44 6e77 2520 0064 4552     pPowerDown %d.RE
   de280:	5f47 4c53 4545 5f50 5443 4c52 303d 2578     G_SLEEP_CTRL=0x%
   de290:	7832 6400 6469 276e 2074 6f70 6577 2072     2x.didn't power 
   de2a0:	6f64 6e77 2500 3430 2d64 3025 6432 252d     down.%04d-%02d-%
   de2b0:	3230 2064 3025 6432 253a 3230 3a64 3025     02d %02d:%02d:%0
   de2c0:	6432 6700 7465 7452 4163 5473 206d 7325     2d.getRtcAsTm %s
   de2d0:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   de2e0:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   de2f0:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   de300:	3142 3038 0035 6573 5274 6374 7341 6d54     B1805.setRtcAsTm
   de310:	2520 0073 6166 6c69 7275 2065 6e69 7320      %s.failure in s
   de320:	7465 7452 4663 6f72 546d 206d 6425 7300     etRtcFromTm %d.s
   de330:	7465 5220 4354 6620 6f72 206d 6c63 756f     et RTC from clou
   de340:	2064 7325 6100 7070 612e 3162 3038 0035     d %s.app.ab1805.

000de350 <_ZTV6AB1805>:
	...
   de358:	6185 000d 6187 000d 67d1 000d 6857 000d     .a...a...g..Wh..
   de368:	7277 7469 4465 7461 2061 6166 6c69 6465     writeData failed
   de378:	6420 7275 6e69 2067 7265 7361 2065 7266      during erase fr
   de388:	6d61 6441 7264 253d 0075 0000               amAddr=%u...

000de394 <_ZTV6MB85RC>:
	...
   de39c:	6c61 000d 6c63 000d 6d11 000d 6da7 000d     al..cl...m...m..
   de3ac:	6e29 000d 5953 5453 4d45 545f 5248 4145     )n..SYSTEM_THREA
   de3bc:	2844 4e45 4241 454c 2944 6920 2073 6572     D(ENABLED) is re
   de3cc:	7571 7269 6465 5000 6275 696c 6873 7551     quired.PublishQu
   de3dc:	7565 4165 7973 636e 6300 656c 7261 7645     eueAsync.clearEv
   de3ec:	6e65 7374 6e20 6d75 7645 6e65 7374 253d     ents numEvents=%
   de3fc:	2064 6973 657a 253d 0064 7571 7565 6965     d size=%d.queuei
   de40c:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   de41c:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   de42c:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   de43c:	6425 7320 7a69 3d65 6425 7300 7661 6e69     %d size=%d.savin
   de44c:	2067 7665 6e65 2074 7461 6e20 7865 4674     g event at nextF
   de45c:	6572 3d65 6425 6100 7466 7265 7320 7661     ree=%d.after sav
   de46c:	6e69 2067 756e 456d 6576 746e 3d73 6425     ing numEvents=%d
   de47c:	6e20 7865 4674 6572 3d65 6425 6520 646e      nextFree=%d end
   de48c:	253d 0064 6964 6373 7261 4f64 646c 7365     =%d.discardOldes
   de49c:	4574 6576 746e 7320 6365 6e6f 4564 6576     tEvent secondEve
   de4ac:	746e 253d 2064 7473 7261 3d74 6425 6e20     nt=%d start=%d n
   de4bc:	7865 3d74 6425 6e20 7865 4674 6572 3d65     ext=%d nextFree=
   de4cc:	6425 6100 7466 7265 6420 7369 6163 6472     %d.after discard
   de4dc:	6c4f 6564 7473 7645 6e65 2074 756e 456d     OldestEvent numE
   de4ec:	6576 746e 3d73 6425 6e20 7865 4674 6572     vents=%d nextFre
   de4fc:	3d65 6425 7200 7465 6961 656e 2064 756e     e=%d.retained nu
   de50c:	456d 6576 746e 3d73 6425 6100 2074 6e69     mEvents=%d.at in
   de51c:	7469 6e20 6d75 7645 6e65 7374 253d 2064     it numEvents=%d 
   de52c:	656e 7478 7246 6565 253d 0064 7570 6c62     nextFree=%d.publ
   de53c:	7369 6968 676e 2520 2073 7325 7420 6c74     ishing %s %s ttl
   de54c:	253d 2064 6c66 6761 3d73 7825 7000 6275     =%d flags=%x.pub
   de55c:	696c 6873 6320 6e61 6563 656c 0064 7570     lish canceled.pu
   de56c:	6c62 7369 6568 2064 7573 6363 7365 6673     blished successf
   de57c:	6c75 796c 7000 6275 696c 6873 6620 6961     ully.publish fai
   de58c:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   de59c:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   de5ac:	7162 0000                                   bq..

000de5b0 <_ZTV21PublishQueueAsyncBase>:
	...
   de5c0:	6f41 000d 40a5 000d 40a5 000d 40a5 000d     Ao...@...@...@..
   de5d0:	40a5 000d 40a5 000d                         .@...@..

000de5d8 <_ZTV25PublishQueueAsyncRetained>:
	...
   de5e0:	7045 000d 7059 000d 7339 000d 7101 000d     Ep..Yp..9s...q..
   de5f0:	70a9 000d 7087 000d 7291 000d 70e5 000d     .p...p...r...p..

000de600 <_ZTVN5spark13CellularClassE>:
	...
   de608:	7e8b 000d 7e81 000d 7e77 000d 7e39 000d     .~...~..w~..9~..
   de618:	7e6b 000d 42ed 000d 9e45 000d 9e4d 000d     k~...B..E...M...
   de628:	7e5f 000d 7e57 000d 7e4d 000d 7e43 000d     _~..W~..M~..C~..
   de638:	9e7d 000d                                   }...

000de63c <_ZTV14CellularSignal>:
	...
   de644:	7f39 000d 7f3f 000d 7f3b 000d 7f4d 000d     9...?...;...M...
   de654:	7f81 000d 7fad 000d 7fe1 000d 8031 000d     ............1...
   de664:	fffc ffff 0000 0000 8057 000d               ........W...

000de670 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de678:	8077 000d 807d 000d 80bb 000d 808b 000d     w...}...........
   de688:	8079 000d                                   y...

000de68c <_ZTVN5spark13EthernetClassE>:
	...
   de694:	86eb 000d 86e1 000d 86d7 000d 86cd 000d     ................
   de6a4:	86c1 000d 86b5 000d 9e45 000d 9e4d 000d     ........E...M...
   de6b4:	86a9 000d 86a1 000d 8697 000d 868d 000d     ................
   de6c4:	9e7d 000d                                   }...

000de6c8 <_ZTV7TwoWire>:
	...
   de6d0:	889d 000d 88e7 000d 88bf 000d 889f 000d     ................
   de6e0:	88c7 000d 88cf 000d 88d7 000d 88df 000d     ................

000de6f0 <_ZTV9IPAddress>:
	...
   de6f8:	89f1 000d 89e1 000d 89e3 000d 2575 3430     ............u%04
   de708:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   de718:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   de728:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   de738:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   de748:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   de758:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   de768:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000de778 <_ZTVN5spark16JSONStreamWriterE>:
	...
   de780:	8eab 000d 8ed1 000d 8e91 000d 8af1 000d     ................

000de790 <_ZTVN5spark16StreamLogHandlerE>:
	...
   de798:	9315 000d 932d 000d 9aed 000d 40cb 000d     ....-........@..

000de7a8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   de7b0:	9341 000d 9355 000d 9c91 000d 8e99 000d     A...U...........

000de7c0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   de7c8:	8ea9 000d 8edf 000d 9a29 000d 8e9b 000d     ........).......

000de7d8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   de7e0:	8ea7 000d 8eed 000d 925d 000d 8f09 000d     ........].......

000de7f0 <_ZTVN5spark12NetworkClassE>:
	...
   de7f8:	9e05 000d 9e0f 000d 9e19 000d 9e23 000d     ............#...
   de808:	9e2d 000d 9e39 000d 9e45 000d 9e4d 000d     -...9...E...M...
   de818:	9e55 000d 9e61 000d 9e69 000d 9e73 000d     U...a...i...s...
   de828:	9e7d 000d 6977 6972 676e 5300 7379 6574     }...wiring.Syste
   de838:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   de848:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   de858:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   de868:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   de878:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000de884 <_ZTV11USARTSerial>:
	...
   de88c:	aa71 000d aadd 000d aab5 000d a0c3 000d     q...............
   de89c:	aa85 000d aaa1 000d aa93 000d aaaf 000d     ................
   de8ac:	aa73 000d aa77 000d                         s...w...

000de8b4 <_ZTV9USBSerial>:
	...
   de8bc:	ab85 000d abed 000d abc3 000d a0c3 000d     ................
   de8cc:	abb5 000d ab87 000d ab97 000d abe7 000d     ................
   de8dc:	aba7 000d ab81 000d                         ........

000de8e4 <_ZSt7nothrow>:
   de8e4:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   de8f4:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000de905 <day_name.6145>:
   de905:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   de915:	6972 6153                                    riSat

000de91a <mon_name.6146>:
   de91a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   de92a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   de93a:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000de94c <fpi.7566>:
   de94c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   de95c:	0000 0000                                   ....

000de960 <fpinan.7602>:
   de960:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000de978 <tinytens>:
   de978:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   de988:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   de998:	6f43 64ac 0628 1168                         Co.d(.h.

000de9a0 <_ctype_>:
   de9a0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   de9b0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   de9c0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   de9d0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   de9e0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   de9f0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dea00:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dea10:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dea20:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000deaa4 <_C_numeric_locale>:
   deaa4:	e858 000d e761 000d e25c 2003 4f50 4953     X...a...\.. POSI
   deab4:	0058 0000                                   X...

000deab8 <__mprec_bigtens>:
   deab8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   deac8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dead8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000deae0 <__mprec_tens>:
   deae0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   deaf0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   deb00:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   deb10:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   deb20:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   deb30:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   deb40:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   deb50:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   deb60:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   deb70:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   deb80:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   deb90:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   deba0:	9db4 79d9 7843 44ea                         ...yCx.D

000deba8 <p05.7490>:
   deba8:	0005 0000 0019 0000 007d 0000               ........}...

000debb4 <link_const_variable_data_end>:
   debb4:	000d5c71 	.word	0x000d5c71
   debb8:	000d6179 	.word	0x000d6179
   debbc:	000d6c51 	.word	0x000d6c51
   debc0:	000d7575 	.word	0x000d7575
   debc4:	000d7e11 	.word	0x000d7e11
   debc8:	000d7f09 	.word	0x000d7f09
   debcc:	000d86f5 	.word	0x000d86f5
   debd0:	000d9add 	.word	0x000d9add
   debd4:	000d9f51 	.word	0x000d9f51
   debd8:	000da1f1 	.word	0x000da1f1
   debdc:	000da5f1 	.word	0x000da5f1
   debe0:	000daa5d 	.word	0x000daa5d

000debe4 <link_constructors_end>:
	...


/Users/chipmc/Documents/Maker/Particle/Projects/AquaMaster-Garden/target/2.1.0/boron/AquaMaster-Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000aa50  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dea70  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002e4  2003e0c8  000df274  0001e0c8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000448  2003e3b0  2003e3b0  0002e3b0  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000df558  000df558  0001f558  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000df584  000df584  0001f584  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001cc9a3  00000000  00000000  0001f588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d7a8  00000000  00000000  001ebf2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003987c  00000000  00000000  002096d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000033f0  00000000  00000000  00242f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009dc0  00000000  00000000  0024633f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003ecee  00000000  00000000  002500ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004b4fe  00000000  00000000  0028eded  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011693c  00000000  00000000  002da2eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009954  00000000  00000000  003f0c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fd6d 	bl	dbb10 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fd8f 	bl	dbb60 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0c8 	.word	0x2003e0c8
   d404c:	000df274 	.word	0x000df274
   d4050:	2003e3ac 	.word	0x2003e3ac
   d4054:	2003e3b0 	.word	0x2003e3b0
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fe4b 	bl	dacfc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dea3c 	.word	0x000dea3c
   d4080:	000dea6c 	.word	0x000dea6c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 bb84 	b.w	d5790 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f80d 	bl	d50a8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 bdf5 	b.w	dac80 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bdd7 	b.w	d7c48 <malloc>

000d409a <_Znaj>:
   d409a:	f003 bdd5 	b.w	d7c48 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bddb 	b.w	d7c58 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fc48 	bl	d7940 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7641 	.word	0x000d7641

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z18outOfMemoryHandleryi+0x8>)
   d40d6:	601a      	str	r2, [r3, #0]
}
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003e100 	.word	0x2003e100

000d40e0 <_Z16wateringTimerISRv>:

void wateringTimerISR() {
  wateringTimerFlag = true;
   d40e0:	4b01      	ldr	r3, [pc, #4]	; (d40e8 <_Z16wateringTimerISRv+0x8>)
   d40e2:	2201      	movs	r2, #1
   d40e4:	701a      	strb	r2, [r3, #0]
}
   d40e6:	4770      	bx	lr
   d40e8:	2003e580 	.word	0x2003e580

000d40ec <_Z13awakeTimerISRv>:

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d40ec:	4a02      	ldr	r2, [pc, #8]	; (d40f8 <_Z13awakeTimerISRv+0xc>)
   d40ee:	2301      	movs	r3, #1
   d40f0:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d40f2:	4a02      	ldr	r2, [pc, #8]	; (d40fc <_Z13awakeTimerISRv+0x10>)
   d40f4:	7013      	strb	r3, [r2, #0]
}
   d40f6:	4770      	bx	lr
   d40f8:	2003e528 	.word	0x2003e528
   d40fc:	2003e558 	.word	0x2003e558

000d4100 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4100:	6803      	ldr	r3, [r0, #0]
   d4102:	4718      	bx	r3

000d4104 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d4104:	2a01      	cmp	r2, #1
   d4106:	d003      	beq.n	d4110 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d4108:	2a02      	cmp	r2, #2
   d410a:	d003      	beq.n	d4114 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d410c:	2000      	movs	r0, #0
   d410e:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4110:	6001      	str	r1, [r0, #0]
	      break;
   d4112:	e7fb      	b.n	d410c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4114:	680b      	ldr	r3, [r1, #0]
   d4116:	6003      	str	r3, [r0, #0]
	}
   d4118:	e7f8      	b.n	d410c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d411c <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d411c:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d411e:	4b05      	ldr	r3, [pc, #20]	; (d4134 <_Z21batteryContextMessagev+0x18>)
   d4120:	7b1a      	ldrb	r2, [r3, #12]
   d4122:	4b05      	ldr	r3, [pc, #20]	; (d4138 <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d4124:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d4126:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d412a:	f006 f896 	bl	da25a <_ZN6StringC1EPKc>
}
   d412e:	4620      	mov	r0, r4
   d4130:	bd10      	pop	{r4, pc}
   d4132:	bf00      	nop
   d4134:	2003e528 	.word	0x2003e528
   d4138:	2003e0c8 	.word	0x2003e0c8

000d413c <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d413c:	b538      	push	{r3, r4, r5, lr}
   d413e:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4140:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4142:	b128      	cbz	r0, d4150 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4144:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4146:	210c      	movs	r1, #12
   d4148:	f006 ff39 	bl	dafbe <_ZdlPvj>
            wakeupSource = next;
   d414c:	4628      	mov	r0, r5
        while (wakeupSource) {
   d414e:	e7f8      	b.n	d4142 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4150:	4620      	mov	r0, r4
   d4152:	bd38      	pop	{r3, r4, r5, pc}

000d4154 <_Z7sendNow6String>:
{
   d4154:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4156:	4904      	ldr	r1, [pc, #16]	; (d4168 <_Z7sendNow6String+0x14>)
   d4158:	f006 f8d5 	bl	da306 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d415c:	b118      	cbz	r0, d4166 <_Z7sendNow6String+0x12>
    state = MEASURING_STATE;
   d415e:	4b03      	ldr	r3, [pc, #12]	; (d416c <_Z7sendNow6String+0x18>)
   d4160:	2203      	movs	r2, #3
   d4162:	701a      	strb	r2, [r3, #0]
    return 1;
   d4164:	2001      	movs	r0, #1
}
   d4166:	bd08      	pop	{r3, pc}
   d4168:	000ddb10 	.word	0x000ddb10
   d416c:	2003e51c 	.word	0x2003e51c

000d4170 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4170:	6943      	ldr	r3, [r0, #20]
   d4172:	b113      	cbz	r3, d417a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4174:	6983      	ldr	r3, [r0, #24]
   d4176:	300c      	adds	r0, #12
   d4178:	4718      	bx	r3
            callback();
        }
    }
   d417a:	4770      	bx	lr

000d417c <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d417c:	b510      	push	{r4, lr}
   d417e:	4b03      	ldr	r3, [pc, #12]	; (d418c <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4180:	6003      	str	r3, [r0, #0]
   d4182:	4604      	mov	r4, r0
   d4184:	f002 ff6e 	bl	d7064 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4188:	4620      	mov	r0, r4
   d418a:	bd10      	pop	{r4, pc}
   d418c:	000de064 	.word	0x000de064

000d4190 <_ZN17PublishQueueAsyncD0Ev>:
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
   d4194:	f7ff fff2 	bl	d417c <_ZN17PublishQueueAsyncD1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	2138      	movs	r1, #56	; 0x38
   d419c:	f006 ff0f 	bl	dafbe <_ZdlPvj>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d41a4:	b510      	push	{r4, lr}
   d41a6:	4b03      	ldr	r3, [pc, #12]	; (d41b4 <_ZN8MB85RC64D1Ev+0x10>)
   d41a8:	6003      	str	r3, [r0, #0]
   d41aa:	4604      	mov	r4, r0
   d41ac:	f002 fd76 	bl	d6c9c <_ZN6MB85RCD1Ev>
   d41b0:	4620      	mov	r0, r4
   d41b2:	bd10      	pop	{r4, pc}
   d41b4:	000de048 	.word	0x000de048

000d41b8 <_ZN8MB85RC64D0Ev>:
   d41b8:	b510      	push	{r4, lr}
   d41ba:	4604      	mov	r4, r0
   d41bc:	f7ff fff2 	bl	d41a4 <_ZN8MB85RC64D1Ev>
   d41c0:	4620      	mov	r0, r4
   d41c2:	2110      	movs	r1, #16
   d41c4:	f006 fefb 	bl	dafbe <_ZdlPvj>
   d41c8:	4620      	mov	r0, r4
   d41ca:	bd10      	pop	{r4, pc}

000d41cc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41cc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41ce:	2100      	movs	r1, #0
   d41d0:	4604      	mov	r4, r0
   d41d2:	4608      	mov	r0, r1
   d41d4:	f003 f9a4 	bl	d7520 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41d8:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41da:	4620      	mov	r0, r4
   d41dc:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41de:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41e0:	f003 f9b6 	bl	d7550 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41e4:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41e6:	b10c      	cbz	r4, d41ec <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d41e8:	2301      	movs	r3, #1
   d41ea:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41ec:	2100      	movs	r1, #0
   d41ee:	2001      	movs	r0, #1
   d41f0:	f003 f996 	bl	d7520 <os_thread_scheduling>
            }
        }
        if (t) {
   d41f4:	b12c      	cbz	r4, d4202 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d41f6:	6823      	ldr	r3, [r4, #0]
   d41f8:	4620      	mov	r0, r4
   d41fa:	689b      	ldr	r3, [r3, #8]
   d41fc:	4798      	blx	r3
            t->running = false;
   d41fe:	2300      	movs	r3, #0
   d4200:	7123      	strb	r3, [r4, #4]
        }
    }
   d4202:	b002      	add	sp, #8
   d4204:	bd10      	pop	{r4, pc}
	...

000d4208 <_Z11resetCounts6String>:
{
   d4208:	b508      	push	{r3, lr}
   d420a:	4908      	ldr	r1, [pc, #32]	; (d422c <_Z11resetCounts6String+0x24>)
   d420c:	f006 f87b 	bl	da306 <_ZNK6String6equalsEPKc>
   d4210:	2300      	movs	r3, #0
  if (command == "1")
   d4212:	b150      	cbz	r0, d422a <_Z11resetCounts6String+0x22>
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d4214:	4a06      	ldr	r2, [pc, #24]	; (d4230 <_Z11resetCounts6String+0x28>)
   d4216:	6113      	str	r3, [r2, #16]
    current.alertCount = 0;                                           // Reset count variables
   d4218:	4a06      	ldr	r2, [pc, #24]	; (d4234 <_Z11resetCounts6String+0x2c>)
   d421a:	6113      	str	r3, [r2, #16]
    dataInFlight = false;
   d421c:	4a06      	ldr	r2, [pc, #24]	; (d4238 <_Z11resetCounts6String+0x30>)
   d421e:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d4220:	4b06      	ldr	r3, [pc, #24]	; (d423c <_Z11resetCounts6String+0x34>)
   d4222:	2001      	movs	r0, #1
   d4224:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d4226:	4b06      	ldr	r3, [pc, #24]	; (d4240 <_Z11resetCounts6String+0x38>)
   d4228:	7018      	strb	r0, [r3, #0]
}
   d422a:	bd08      	pop	{r3, pc}
   d422c:	000ddb10 	.word	0x000ddb10
   d4230:	2003e528 	.word	0x2003e528
   d4234:	2003e460 	.word	0x2003e460
   d4238:	2003e48b 	.word	0x2003e48b
   d423c:	2003e480 	.word	0x2003e480
   d4240:	2003e558 	.word	0x2003e558

000d4244 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4244:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4246:	2000      	movs	r0, #0
   d4248:	f003 fc76 	bl	d7b38 <spark_sync_time_pending>
   d424c:	b128      	cbz	r0, d425a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d424e:	f003 fc4b 	bl	d7ae8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4252:	f080 0001 	eor.w	r0, r0, #1
   d4256:	b2c0      	uxtb	r0, r0
    }
   d4258:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d425a:	2001      	movs	r0, #1
   d425c:	e7fc      	b.n	d4258 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d425e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d425e:	2300      	movs	r3, #0
   d4260:	2204      	movs	r2, #4
   d4262:	f003 bc21 	b.w	d7aa8 <spark_variable>
	...

000d4268 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4268:	b530      	push	{r4, r5, lr}
   d426a:	b085      	sub	sp, #20
   d426c:	4603      	mov	r3, r0
   d426e:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4270:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4272:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4274:	4798      	blx	r3
        size = str.length();
   d4276:	9802      	ldr	r0, [sp, #8]
   d4278:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d427a:	f003 fce5 	bl	d7c48 <malloc>
   d427e:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4280:	b150      	cbz	r0, d4298 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d4282:	6822      	ldr	r2, [r4, #0]
   d4284:	9900      	ldr	r1, [sp, #0]
   d4286:	f007 fc43 	bl	dbb10 <memcpy>
        return 0;
   d428a:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d428c:	4668      	mov	r0, sp
   d428e:	f005 ff99 	bl	da1c4 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4292:	4620      	mov	r0, r4
   d4294:	b005      	add	sp, #20
   d4296:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d4298:	4c00      	ldr	r4, [pc, #0]	; (d429c <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d429a:	e7f7      	b.n	d428c <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d429c:	fffffefc 	.word	0xfffffefc

000d42a0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42a0:	4b0a      	ldr	r3, [pc, #40]	; (d42cc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d42a2:	b510      	push	{r4, lr}
   d42a4:	4604      	mov	r4, r0
   d42a6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d42a8:	f004 ff0a 	bl	d90c0 <_ZN5spark10LogManager8instanceEv>
   d42ac:	4621      	mov	r1, r4
   d42ae:	f005 f90c 	bl	d94ca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d42b2:	f006 fc99 	bl	dabe8 <_Z16_fetch_usbserialv>
   d42b6:	f006 fc8b 	bl	dabd0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d42ba:	4620      	mov	r0, r4
   d42bc:	4b04      	ldr	r3, [pc, #16]	; (d42d0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d42be:	f840 3b04 	str.w	r3, [r0], #4
   d42c2:	f004 ffef 	bl	d92a4 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d42c6:	4620      	mov	r0, r4
   d42c8:	bd10      	pop	{r4, pc}
   d42ca:	bf00      	nop
   d42cc:	000de030 	.word	0x000de030
   d42d0:	000de018 	.word	0x000de018

000d42d4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d42d4:	b510      	push	{r4, lr}
   d42d6:	4604      	mov	r4, r0
    }
   d42d8:	f7ff ffe2 	bl	d42a0 <_ZN5spark16SerialLogHandlerD1Ev>
   d42dc:	4620      	mov	r0, r4
   d42de:	2124      	movs	r1, #36	; 0x24
   d42e0:	f006 fe6d 	bl	dafbe <_ZdlPvj>
   d42e4:	4620      	mov	r0, r4
   d42e6:	bd10      	pop	{r4, pc}

000d42e8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d42e8:	b510      	push	{r4, lr}
   d42ea:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d42ec:	6800      	ldr	r0, [r0, #0]
   d42ee:	b108      	cbz	r0, d42f4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d42f0:	f003 fcb2 	bl	d7c58 <free>
class SystemClass {
   d42f4:	4620      	mov	r0, r4
   d42f6:	bd10      	pop	{r4, pc}

000d42f8 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d42f8:	2300      	movs	r3, #0
   d42fa:	6840      	ldr	r0, [r0, #4]
   d42fc:	461a      	mov	r2, r3
   d42fe:	4619      	mov	r1, r3
   d4300:	f003 bc6a 	b.w	d7bd8 <network_off>

000d4304 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4304:	b510      	push	{r4, lr}
      if (_M_manager)
   d4306:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4308:	4604      	mov	r4, r0
      if (_M_manager)
   d430a:	b113      	cbz	r3, d4312 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d430c:	2203      	movs	r2, #3
   d430e:	4601      	mov	r1, r0
   d4310:	4798      	blx	r3
    }
   d4312:	4620      	mov	r0, r4
   d4314:	bd10      	pop	{r4, pc}
	...

000d4318 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4318:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d431a:	4b13      	ldr	r3, [pc, #76]	; (d4368 <_ZN5TimerD1Ev+0x50>)
   d431c:	6003      	str	r3, [r0, #0]
   d431e:	4604      	mov	r4, r0
        if (handle) {
   d4320:	6880      	ldr	r0, [r0, #8]
   d4322:	b1c8      	cbz	r0, d4358 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4324:	2500      	movs	r5, #0
   d4326:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d432a:	e9cd 3500 	strd	r3, r5, [sp]
   d432e:	2102      	movs	r1, #2
   d4330:	462b      	mov	r3, r5
   d4332:	462a      	mov	r2, r5
   d4334:	f003 f914 	bl	d7560 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d4338:	68a0      	ldr	r0, [r4, #8]
   d433a:	4629      	mov	r1, r5
   d433c:	f003 f958 	bl	d75f0 <os_timer_set_id>
            while (running) {
   d4340:	7923      	ldrb	r3, [r4, #4]
   d4342:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4346:	b113      	cbz	r3, d434e <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4348:	f003 f8e2 	bl	d7510 <os_thread_yield>
            while (running) {
   d434c:	e7f8      	b.n	d4340 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d434e:	68a0      	ldr	r0, [r4, #8]
   d4350:	4629      	mov	r1, r5
   d4352:	f003 f8f5 	bl	d7540 <os_timer_destroy>
            handle = nullptr;
   d4356:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4358:	f104 000c 	add.w	r0, r4, #12
   d435c:	f7ff ffd2 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
    }
   d4360:	4620      	mov	r0, r4
   d4362:	b003      	add	sp, #12
   d4364:	bd30      	pop	{r4, r5, pc}
   d4366:	bf00      	nop
   d4368:	000de004 	.word	0x000de004

000d436c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d436c:	b510      	push	{r4, lr}
   d436e:	4604      	mov	r4, r0
    }
   d4370:	f7ff ffd2 	bl	d4318 <_ZN5TimerD1Ev>
   d4374:	4620      	mov	r0, r4
   d4376:	211c      	movs	r1, #28
   d4378:	f006 fe21 	bl	dafbe <_ZdlPvj>
   d437c:	4620      	mov	r0, r4
   d437e:	bd10      	pop	{r4, pc}

000d4380 <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d4380:	b538      	push	{r3, r4, r5, lr}
   d4382:	4604      	mov	r4, r0
            : conf_{} {
   d4384:	2520      	movs	r5, #32
   d4386:	462a      	mov	r2, r5
   d4388:	2100      	movs	r1, #0
   d438a:	f007 fbe9 	bl	dbb60 <memset>
        conf_.size = sizeof(conf_);
   d438e:	7165      	strb	r5, [r4, #5]
    }
   d4390:	4620      	mov	r0, r4
   d4392:	bd38      	pop	{r3, r4, r5, pc}

000d4394 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4396:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4398:	4605      	mov	r5, r0
   d439a:	460f      	mov	r7, r1
   d439c:	4616      	mov	r6, r2
        if (valid_) {
   d439e:	b18b      	cbz	r3, d43c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d43a0:	6803      	ldr	r3, [r0, #0]
   d43a2:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d43a4:	b183      	cbz	r3, d43c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d43a6:	889a      	ldrh	r2, [r3, #4]
   d43a8:	2a01      	cmp	r2, #1
   d43aa:	d006      	beq.n	d43ba <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d43ac:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d43ae:	e7f9      	b.n	d43a4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d43b0:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d43b2:	b14b      	cbz	r3, d43c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d43b4:	889a      	ldrh	r2, [r3, #4]
   d43b6:	2a01      	cmp	r2, #1
   d43b8:	d1fa      	bne.n	d43b0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d43ba:	b12b      	cbz	r3, d43c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d43bc:	899a      	ldrh	r2, [r3, #12]
   d43be:	42ba      	cmp	r2, r7
   d43c0:	d1f6      	bne.n	d43b0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d43c2:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d43c4:	4628      	mov	r0, r5
   d43c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d43c8:	490a      	ldr	r1, [pc, #40]	; (d43f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d43ca:	2010      	movs	r0, #16
   d43cc:	f006 fdf9 	bl	dafc2 <_ZnwjRKSt9nothrow_t>
   d43d0:	4604      	mov	r4, r0
   d43d2:	b168      	cbz	r0, d43f0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d43d4:	2210      	movs	r2, #16
   d43d6:	2100      	movs	r1, #0
   d43d8:	f007 fbc2 	bl	dbb60 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d43dc:	4b06      	ldr	r3, [pc, #24]	; (d43f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d43de:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d43e0:	2301      	movs	r3, #1
   d43e2:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d43e4:	692b      	ldr	r3, [r5, #16]
   d43e6:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d43e8:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d43ea:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d43ec:	612c      	str	r4, [r5, #16]
   d43ee:	e7e9      	b.n	d43c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d43f0:	7528      	strb	r0, [r5, #20]
                return *this;
   d43f2:	e7e7      	b.n	d43c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d43f4:	000de76c 	.word	0x000de76c
   d43f8:	00030010 	.word	0x00030010

000d43fc <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d43fc:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d43fe:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4400:	4605      	mov	r5, r0
   d4402:	460e      	mov	r6, r1
        if (valid_) {
   d4404:	b1cb      	cbz	r3, d443a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4406:	6803      	ldr	r3, [r0, #0]
   d4408:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d440a:	b123      	cbz	r3, d4416 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d440c:	889a      	ldrh	r2, [r3, #4]
   d440e:	2a04      	cmp	r2, #4
   d4410:	d017      	beq.n	d4442 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4412:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4414:	e7f9      	b.n	d440a <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4416:	490c      	ldr	r1, [pc, #48]	; (d4448 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d4418:	2010      	movs	r0, #16
   d441a:	f006 fdd2 	bl	dafc2 <_ZnwjRKSt9nothrow_t>
   d441e:	4604      	mov	r4, r0
   d4420:	b168      	cbz	r0, d443e <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d4422:	2210      	movs	r2, #16
   d4424:	2100      	movs	r1, #0
   d4426:	f007 fb9b 	bl	dbb60 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d442a:	4b08      	ldr	r3, [pc, #32]	; (d444c <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d442c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d442e:	2304      	movs	r3, #4
   d4430:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4432:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4434:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d4436:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d443a:	4628      	mov	r0, r5
   d443c:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d443e:	7528      	strb	r0, [r5, #20]
                return *this;
   d4440:	e7fb      	b.n	d443a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4442:	60de      	str	r6, [r3, #12]
                return *this;
   d4444:	e7f9      	b.n	d443a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d4446:	bf00      	nop
   d4448:	000de76c 	.word	0x000de76c
   d444c:	00030010 	.word	0x00030010

000d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4450:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4452:	4801      	ldr	r0, [pc, #4]	; (d4458 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4454:	f003 be3c 	b.w	d80d0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4458:	000d80a5 	.word	0x000d80a5

000d445c <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d445c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d445e:	468c      	mov	ip, r1
   d4460:	2500      	movs	r5, #0
   d4462:	4914      	ldr	r1, [pc, #80]	; (d44b4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   d4464:	7105      	strb	r5, [r0, #4]
   d4466:	4604      	mov	r4, r0
   d4468:	6085      	str	r5, [r0, #8]
   d446a:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d446c:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4470:	b085      	sub	sp, #20
   d4472:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4474:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4478:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d447c:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4480:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4484:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4488:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d448c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d448e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d4490:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4492:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4494:	6095      	str	r5, [r2, #8]
   d4496:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4498:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d449a:	e9cd 3500 	strd	r3, r5, [sp]
   d449e:	4a06      	ldr	r2, [pc, #24]	; (d44b8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d44a0:	4623      	mov	r3, r4
   d44a2:	4661      	mov	r1, ip
   d44a4:	f104 0008 	add.w	r0, r4, #8
   d44a8:	f003 f842 	bl	d7530 <os_timer_create>
    }
   d44ac:	4620      	mov	r0, r4
   d44ae:	b005      	add	sp, #20
   d44b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44b2:	bf00      	nop
   d44b4:	000de004 	.word	0x000de004
   d44b8:	000d41cd 	.word	0x000d41cd

000d44bc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d44bc:	b40e      	push	{r1, r2, r3}
   d44be:	b510      	push	{r4, lr}
   d44c0:	b08d      	sub	sp, #52	; 0x34
   d44c2:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d44c4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d44c6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d44ca:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d44cc:	2300      	movs	r3, #0
   d44ce:	2020      	movs	r0, #32
   d44d0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d44d4:	e9cd 4200 	strd	r4, r2, [sp]
   d44d8:	201e      	movs	r0, #30
   d44da:	aa04      	add	r2, sp, #16
   d44dc:	f003 fa40 	bl	d7960 <log_message_v>
}
   d44e0:	b00d      	add	sp, #52	; 0x34
   d44e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d44e6:	b003      	add	sp, #12
   d44e8:	4770      	bx	lr

000d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44ec:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44ee:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44f2:	f88d 3000 	strb.w	r3, [sp]
   d44f6:	f88d 5004 	strb.w	r5, [sp, #4]
   d44fa:	68e4      	ldr	r4, [r4, #12]
   d44fc:	233c      	movs	r3, #60	; 0x3c
   d44fe:	47a0      	blx	r4
	}
   d4500:	b003      	add	sp, #12
   d4502:	bd30      	pop	{r4, r5, pc}

000d4504 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4504:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4506:	780b      	ldrb	r3, [r1, #0]
   d4508:	4d1c      	ldr	r5, [pc, #112]	; (d457c <_Z14UbidotsHandlerPKcS0_+0x78>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d450a:	b093      	sub	sp, #76	; 0x4c
   d450c:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d450e:	b993      	cbnz	r3, d4536 <_Z14UbidotsHandlerPKcS0_+0x32>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4510:	491b      	ldr	r1, [pc, #108]	; (d4580 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4512:	a802      	add	r0, sp, #8
   d4514:	f007 fb71 	bl	dbbfa <strcpy>
  if (sysStatus.verboseMode) publishQueue.publish("Ubidots Hook", responseString, PRIVATE, WITH_ACK);
   d4518:	792b      	ldrb	r3, [r5, #4]
   d451a:	b153      	cbz	r3, d4532 <_Z14UbidotsHandlerPKcS0_+0x2e>
inline particle::Flag<TagT, ValueT>::operator ValueT() const {
    return val_;
}

template<typename TagT, typename ValueT>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d451c:	4b19      	ldr	r3, [pc, #100]	; (d4584 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d451e:	491a      	ldr	r1, [pc, #104]	; (d4588 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4520:	781b      	ldrb	r3, [r3, #0]
   d4522:	f88d 3000 	strb.w	r3, [sp]
   d4526:	4b19      	ldr	r3, [pc, #100]	; (d458c <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4528:	4819      	ldr	r0, [pc, #100]	; (d4590 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d452a:	781b      	ldrb	r3, [r3, #0]
   d452c:	aa02      	add	r2, sp, #8
   d452e:	f7ff ffdc 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4532:	b013      	add	sp, #76	; 0x4c
   d4534:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4536:	4608      	mov	r0, r1
   d4538:	f007 fac6 	bl	dbac8 <atoi>
   d453c:	28c8      	cmp	r0, #200	; 0xc8
   d453e:	d10d      	bne.n	d455c <_Z14UbidotsHandlerPKcS0_+0x58>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4540:	4914      	ldr	r1, [pc, #80]	; (d4594 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4542:	a802      	add	r0, sp, #8
   d4544:	f007 fb59 	bl	dbbfa <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4548:	f006 fa13 	bl	da972 <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d454c:	4b12      	ldr	r3, [pc, #72]	; (d4598 <_Z14UbidotsHandlerPKcS0_+0x94>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d454e:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d4550:	2201      	movs	r2, #1
   d4552:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4554:	4b11      	ldr	r3, [pc, #68]	; (d459c <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4556:	2200      	movs	r2, #0
   d4558:	701a      	strb	r2, [r3, #0]
   d455a:	e7dd      	b.n	d4518 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d455c:	4620      	mov	r0, r4
   d455e:	f007 fab3 	bl	dbac8 <atoi>
   d4562:	28c9      	cmp	r0, #201	; 0xc9
   d4564:	d0ec      	beq.n	d4540 <_Z14UbidotsHandlerPKcS0_+0x3c>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4566:	4620      	mov	r0, r4
   d4568:	f007 faae 	bl	dbac8 <atoi>
   d456c:	4a0c      	ldr	r2, [pc, #48]	; (d45a0 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d456e:	4603      	mov	r3, r0
   d4570:	2140      	movs	r1, #64	; 0x40
   d4572:	a802      	add	r0, sp, #8
   d4574:	f003 fb88 	bl	d7c88 <snprintf>
   d4578:	e7ce      	b.n	d4518 <_Z14UbidotsHandlerPKcS0_+0x14>
   d457a:	bf00      	nop
   d457c:	2003e528 	.word	0x2003e528
   d4580:	000ddb45 	.word	0x000ddb45
   d4584:	2003e405 	.word	0x2003e405
   d4588:	000ddb7c 	.word	0x000ddb7c
   d458c:	2003e404 	.word	0x2003e404
   d4590:	2003e4e0 	.word	0x2003e4e0
   d4594:	000ddb4d 	.word	0x000ddb4d
   d4598:	2003e558 	.word	0x2003e558
   d459c:	2003e48b 	.word	0x2003e48b
   d45a0:	000ddb5f 	.word	0x000ddb5f

000d45a4 <_Z12hardResetNow6String>:
{
   d45a4:	b507      	push	{r0, r1, r2, lr}
   d45a6:	490b      	ldr	r1, [pc, #44]	; (d45d4 <_Z12hardResetNow6String+0x30>)
   d45a8:	f005 fead 	bl	da306 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45ac:	b170      	cbz	r0, d45cc <_Z12hardResetNow6String+0x28>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d45ae:	2300      	movs	r3, #0
   d45b0:	f88d 3000 	strb.w	r3, [sp]
   d45b4:	4b08      	ldr	r3, [pc, #32]	; (d45d8 <_Z12hardResetNow6String+0x34>)
   d45b6:	4a09      	ldr	r2, [pc, #36]	; (d45dc <_Z12hardResetNow6String+0x38>)
   d45b8:	781b      	ldrb	r3, [r3, #0]
   d45ba:	4909      	ldr	r1, [pc, #36]	; (d45e0 <_Z12hardResetNow6String+0x3c>)
   d45bc:	4809      	ldr	r0, [pc, #36]	; (d45e4 <_Z12hardResetNow6String+0x40>)
   d45be:	f7ff ff94 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    ab1805.deepPowerDown(10);
   d45c2:	4809      	ldr	r0, [pc, #36]	; (d45e8 <_Z12hardResetNow6String+0x44>)
   d45c4:	210a      	movs	r1, #10
   d45c6:	f002 f873 	bl	d66b0 <_ZN6AB180513deepPowerDownEi>
   d45ca:	2001      	movs	r0, #1
}
   d45cc:	b003      	add	sp, #12
   d45ce:	f85d fb04 	ldr.w	pc, [sp], #4
   d45d2:	bf00      	nop
   d45d4:	000ddb10 	.word	0x000ddb10
   d45d8:	2003e404 	.word	0x2003e404
   d45dc:	000ddb89 	.word	0x000ddb89
   d45e0:	000dde7b 	.word	0x000dde7b
   d45e4:	2003e4e0 	.word	0x2003e4e0
   d45e8:	2003e40c 	.word	0x2003e40c

000d45ec <_Z14setVerboseMode6String>:
{
   d45ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45ee:	4919      	ldr	r1, [pc, #100]	; (d4654 <_Z14setVerboseMode6String+0x68>)
   d45f0:	4605      	mov	r5, r0
   d45f2:	f005 fe88 	bl	da306 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45f6:	4604      	mov	r4, r0
   d45f8:	b1b0      	cbz	r0, d4628 <_Z14setVerboseMode6String+0x3c>
    sysStatus.verboseMode = true;
   d45fa:	4b17      	ldr	r3, [pc, #92]	; (d4658 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d45fc:	4a17      	ldr	r2, [pc, #92]	; (d465c <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = true;
   d45fe:	2401      	movs	r4, #1
   d4600:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d4602:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d4604:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d4606:	b913      	cbnz	r3, d460e <_Z14setVerboseMode6String+0x22>
    return 1;
   d4608:	2001      	movs	r0, #1
}
   d460a:	b003      	add	sp, #12
   d460c:	bd30      	pop	{r4, r5, pc}
   d460e:	4b14      	ldr	r3, [pc, #80]	; (d4660 <_Z14setVerboseMode6String+0x74>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d4610:	4a14      	ldr	r2, [pc, #80]	; (d4664 <_Z14setVerboseMode6String+0x78>)
   d4612:	781b      	ldrb	r3, [r3, #0]
   d4614:	f88d 3000 	strb.w	r3, [sp]
   d4618:	4b13      	ldr	r3, [pc, #76]	; (d4668 <_Z14setVerboseMode6String+0x7c>)
   d461a:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d461c:	4913      	ldr	r1, [pc, #76]	; (d466c <_Z14setVerboseMode6String+0x80>)
   d461e:	4814      	ldr	r0, [pc, #80]	; (d4670 <_Z14setVerboseMode6String+0x84>)
   d4620:	f7ff ff63 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4624:	4620      	mov	r0, r4
   d4626:	e7f0      	b.n	d460a <_Z14setVerboseMode6String+0x1e>
   d4628:	4912      	ldr	r1, [pc, #72]	; (d4674 <_Z14setVerboseMode6String+0x88>)
   d462a:	4628      	mov	r0, r5
   d462c:	f005 fe6b 	bl	da306 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4630:	2800      	cmp	r0, #0
   d4632:	d0ea      	beq.n	d460a <_Z14setVerboseMode6String+0x1e>
    sysStatus.verboseMode = false;
   d4634:	4b08      	ldr	r3, [pc, #32]	; (d4658 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d4636:	4a09      	ldr	r2, [pc, #36]	; (d465c <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = false;
   d4638:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d463a:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d463c:	2401      	movs	r4, #1
   d463e:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d4640:	2b00      	cmp	r3, #0
   d4642:	d0e1      	beq.n	d4608 <_Z14setVerboseMode6String+0x1c>
   d4644:	4b06      	ldr	r3, [pc, #24]	; (d4660 <_Z14setVerboseMode6String+0x74>)
   d4646:	4a0c      	ldr	r2, [pc, #48]	; (d4678 <_Z14setVerboseMode6String+0x8c>)
   d4648:	781b      	ldrb	r3, [r3, #0]
   d464a:	f88d 3000 	strb.w	r3, [sp]
   d464e:	4b06      	ldr	r3, [pc, #24]	; (d4668 <_Z14setVerboseMode6String+0x7c>)
   d4650:	781b      	ldrb	r3, [r3, #0]
   d4652:	e7e3      	b.n	d461c <_Z14setVerboseMode6String+0x30>
   d4654:	000ddb10 	.word	0x000ddb10
   d4658:	2003e528 	.word	0x2003e528
   d465c:	2003e558 	.word	0x2003e558
   d4660:	2003e405 	.word	0x2003e405
   d4664:	000ddba1 	.word	0x000ddba1
   d4668:	2003e404 	.word	0x2003e404
   d466c:	000ddcfc 	.word	0x000ddcfc
   d4670:	2003e4e0 	.word	0x2003e4e0
   d4674:	000ddd20 	.word	0x000ddd20
   d4678:	000ddbb2 	.word	0x000ddbb2

000d467c <_Z11setOpenTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setOpenTime(String command)
   d467c:	b500      	push	{lr}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  makeUpParkHourStrings();                                                    // Create the strings for the console
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (sysStatus.connectedStatus) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d467e:	4b0c      	ldr	r3, [pc, #48]	; (d46b0 <_Z11setOpenTime6String.part.0+0x34>)
   d4680:	4a0c      	ldr	r2, [pc, #48]	; (d46b4 <_Z11setOpenTime6String.part.0+0x38>)
   d4682:	7f1b      	ldrb	r3, [r3, #28]
int setOpenTime(String command)
   d4684:	b0c3      	sub	sp, #268	; 0x10c
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4686:	f44f 7180 	mov.w	r1, #256	; 0x100
   d468a:	a802      	add	r0, sp, #8
   d468c:	f003 fafc 	bl	d7c88 <snprintf>
   d4690:	4b09      	ldr	r3, [pc, #36]	; (d46b8 <_Z11setOpenTime6String.part.0+0x3c>)
    publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4692:	490a      	ldr	r1, [pc, #40]	; (d46bc <_Z11setOpenTime6String.part.0+0x40>)
   d4694:	781b      	ldrb	r3, [r3, #0]
   d4696:	f88d 3000 	strb.w	r3, [sp]
   d469a:	4b09      	ldr	r3, [pc, #36]	; (d46c0 <_Z11setOpenTime6String.part.0+0x44>)
   d469c:	4809      	ldr	r0, [pc, #36]	; (d46c4 <_Z11setOpenTime6String.part.0+0x48>)
   d469e:	781b      	ldrb	r3, [r3, #0]
   d46a0:	aa02      	add	r2, sp, #8
   d46a2:	f7ff ff22 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d46a6:	2001      	movs	r0, #1
   d46a8:	b043      	add	sp, #268	; 0x10c
   d46aa:	f85d fb04 	ldr.w	pc, [sp], #4
   d46ae:	bf00      	nop
   d46b0:	2003e528 	.word	0x2003e528
   d46b4:	000ddbc7 	.word	0x000ddbc7
   d46b8:	2003e405 	.word	0x2003e405
   d46bc:	000ddf36 	.word	0x000ddf36
   d46c0:	2003e404 	.word	0x2003e404
   d46c4:	2003e4e0 	.word	0x2003e4e0

000d46c8 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d46c8:	b513      	push	{r0, r1, r4, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d46ca:	4925      	ldr	r1, [pc, #148]	; (d4760 <_Z15setLowPowerMode6String+0x98>)
   d46cc:	4604      	mov	r4, r0
   d46ce:	f005 fe1a 	bl	da306 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d46d2:	b320      	cbz	r0, d471e <_Z15setLowPowerMode6String+0x56>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d46d4:	4922      	ldr	r1, [pc, #136]	; (d4760 <_Z15setLowPowerMode6String+0x98>)
   d46d6:	4620      	mov	r0, r4
   d46d8:	f005 fe15 	bl	da306 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d46dc:	bb38      	cbnz	r0, d472e <_Z15setLowPowerMode6String+0x66>
   d46de:	4921      	ldr	r1, [pc, #132]	; (d4764 <_Z15setLowPowerMode6String+0x9c>)
   d46e0:	4620      	mov	r0, r4
   d46e2:	f005 fe10 	bl	da306 <_ZNK6String6equalsEPKc>
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
    }
    sysStatus.lowPowerMode = true;
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d46e6:	2800      	cmp	r0, #0
   d46e8:	d036      	beq.n	d4758 <_Z15setLowPowerMode6String+0x90>
  {
    if (!sysStatus.connectedStatus) {                                      // In case we are not connected, we will do so now.
   d46ea:	4c1f      	ldr	r4, [pc, #124]	; (d4768 <_Z15setLowPowerMode6String+0xa0>)
   d46ec:	78e2      	ldrb	r2, [r4, #3]
   d46ee:	b912      	cbnz	r2, d46f6 <_Z15setLowPowerMode6String+0x2e>
      particleConnectionNeeded = true;
   d46f0:	4b1e      	ldr	r3, [pc, #120]	; (d476c <_Z15setLowPowerMode6String+0xa4>)
   d46f2:	2201      	movs	r2, #1
   d46f4:	701a      	strb	r2, [r3, #0]
   d46f6:	4b1e      	ldr	r3, [pc, #120]	; (d4770 <_Z15setLowPowerMode6String+0xa8>)
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE, WITH_ACK);
   d46f8:	4a1e      	ldr	r2, [pc, #120]	; (d4774 <_Z15setLowPowerMode6String+0xac>)
   d46fa:	781b      	ldrb	r3, [r3, #0]
   d46fc:	f88d 3000 	strb.w	r3, [sp]
   d4700:	4b1d      	ldr	r3, [pc, #116]	; (d4778 <_Z15setLowPowerMode6String+0xb0>)
   d4702:	491e      	ldr	r1, [pc, #120]	; (d477c <_Z15setLowPowerMode6String+0xb4>)
   d4704:	781b      	ldrb	r3, [r3, #0]
   d4706:	481e      	ldr	r0, [pc, #120]	; (d4780 <_Z15setLowPowerMode6String+0xb8>)
   d4708:	f7ff feef 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d470c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4710:	f003 fb0e 	bl	d7d30 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4714:	2300      	movs	r3, #0
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d4716:	491b      	ldr	r1, [pc, #108]	; (d4784 <_Z15setLowPowerMode6String+0xbc>)
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4718:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d471a:	2210      	movs	r2, #16
   d471c:	e019      	b.n	d4752 <_Z15setLowPowerMode6String+0x8a>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d471e:	4911      	ldr	r1, [pc, #68]	; (d4764 <_Z15setLowPowerMode6String+0x9c>)
   d4720:	4620      	mov	r0, r4
   d4722:	f005 fdf0 	bl	da306 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4726:	2800      	cmp	r0, #0
   d4728:	d1d4      	bne.n	d46d4 <_Z15setLowPowerMode6String+0xc>
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d472a:	b002      	add	sp, #8
   d472c:	bd10      	pop	{r4, pc}
    if (sysStatus.connectedStatus) {
   d472e:	4c0e      	ldr	r4, [pc, #56]	; (d4768 <_Z15setLowPowerMode6String+0xa0>)
   d4730:	78e2      	ldrb	r2, [r4, #3]
   d4732:	b152      	cbz	r2, d474a <_Z15setLowPowerMode6String+0x82>
   d4734:	4b0e      	ldr	r3, [pc, #56]	; (d4770 <_Z15setLowPowerMode6String+0xa8>)
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
   d4736:	4a14      	ldr	r2, [pc, #80]	; (d4788 <_Z15setLowPowerMode6String+0xc0>)
   d4738:	781b      	ldrb	r3, [r3, #0]
   d473a:	f88d 3000 	strb.w	r3, [sp]
   d473e:	4b0e      	ldr	r3, [pc, #56]	; (d4778 <_Z15setLowPowerMode6String+0xb0>)
   d4740:	490e      	ldr	r1, [pc, #56]	; (d477c <_Z15setLowPowerMode6String+0xb4>)
   d4742:	781b      	ldrb	r3, [r3, #0]
   d4744:	480e      	ldr	r0, [pc, #56]	; (d4780 <_Z15setLowPowerMode6String+0xb8>)
   d4746:	f7ff fed0 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lowPowerMode = true;
   d474a:	2301      	movs	r3, #1
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d474c:	490f      	ldr	r1, [pc, #60]	; (d478c <_Z15setLowPowerMode6String+0xc4>)
    sysStatus.lowPowerMode = true;
   d474e:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d4750:	2210      	movs	r2, #16
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d4752:	480f      	ldr	r0, [pc, #60]	; (d4790 <_Z15setLowPowerMode6String+0xc8>)
   d4754:	f007 fa91 	bl	dbc7a <strncpy>
  systemStatusWriteNeeded = true;
   d4758:	4b0e      	ldr	r3, [pc, #56]	; (d4794 <_Z15setLowPowerMode6String+0xcc>)
   d475a:	2001      	movs	r0, #1
   d475c:	7018      	strb	r0, [r3, #0]
  return 1;
   d475e:	e7e4      	b.n	d472a <_Z15setLowPowerMode6String+0x62>
   d4760:	000ddb10 	.word	0x000ddb10
   d4764:	000ddd20 	.word	0x000ddd20
   d4768:	2003e528 	.word	0x2003e528
   d476c:	2003e4dd 	.word	0x2003e4dd
   d4770:	2003e405 	.word	0x2003e405
   d4774:	000ddbea 	.word	0x000ddbea
   d4778:	2003e404 	.word	0x2003e404
   d477c:	000ddcfc 	.word	0x000ddcfc
   d4780:	2003e4e0 	.word	0x2003e4e0
   d4784:	000ddbfc 	.word	0x000ddbfc
   d4788:	000ddbdb 	.word	0x000ddbdb
   d478c:	000ddc00 	.word	0x000ddc00
   d4790:	2003e4cc 	.word	0x2003e4cc
   d4794:	2003e558 	.word	0x2003e558

000d4798 <_Z17setWaterThreshold6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4798:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d479a:	6800      	ldr	r0, [r0, #0]
   d479c:	a903      	add	r1, sp, #12
   d479e:	f008 f8b9 	bl	dc914 <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d47a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d47a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47aa:	d42a      	bmi.n	d4802 <_Z17setWaterThreshold6String+0x6a>
   d47ac:	eddf 7a16 	vldr	s15, [pc, #88]	; d4808 <_Z17setWaterThreshold6String+0x70>
   d47b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d47b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47b8:	bfcc      	ite	gt
   d47ba:	2601      	movgt	r6, #1
   d47bc:	2600      	movle	r6, #0
   d47be:	dc20      	bgt.n	d4802 <_Z17setWaterThreshold6String+0x6a>
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
  systemStatusWriteNeeded = true;
   d47c0:	4b12      	ldr	r3, [pc, #72]	; (d480c <_Z17setWaterThreshold6String+0x74>)
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d47c2:	4d13      	ldr	r5, [pc, #76]	; (d4810 <_Z17setWaterThreshold6String+0x78>)
  systemStatusWriteNeeded = true;
   d47c4:	2401      	movs	r4, #1
   d47c6:	701c      	strb	r4, [r3, #0]
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d47c8:	ee10 0a10 	vmov	r0, s0
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d47cc:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d47d0:	f006 fd62 	bl	db298 <__aeabi_f2d>
   d47d4:	4a0f      	ldr	r2, [pc, #60]	; (d4814 <_Z17setWaterThreshold6String+0x7c>)
   d47d6:	e9cd 0100 	strd	r0, r1, [sp]
   d47da:	480f      	ldr	r0, [pc, #60]	; (d4818 <_Z17setWaterThreshold6String+0x80>)
   d47dc:	2108      	movs	r1, #8
   d47de:	f003 fa53 	bl	d7c88 <snprintf>
  if (sysStatus.verboseMode && sysStatus.connectedStatus) {                                                  // Publish result if feeling verbose
   d47e2:	792b      	ldrb	r3, [r5, #4]
   d47e4:	b153      	cbz	r3, d47fc <_Z17setWaterThreshold6String+0x64>
   d47e6:	78eb      	ldrb	r3, [r5, #3]
   d47e8:	b143      	cbz	r3, d47fc <_Z17setWaterThreshold6String+0x64>
    publishQueue.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d47ea:	4b0c      	ldr	r3, [pc, #48]	; (d481c <_Z17setWaterThreshold6String+0x84>)
   d47ec:	f88d 6000 	strb.w	r6, [sp]
   d47f0:	781b      	ldrb	r3, [r3, #0]
   d47f2:	4a09      	ldr	r2, [pc, #36]	; (d4818 <_Z17setWaterThreshold6String+0x80>)
   d47f4:	490a      	ldr	r1, [pc, #40]	; (d4820 <_Z17setWaterThreshold6String+0x88>)
   d47f6:	480b      	ldr	r0, [pc, #44]	; (d4824 <_Z17setWaterThreshold6String+0x8c>)
   d47f8:	f7ff fe77 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
}
   d47fc:	4620      	mov	r0, r4
   d47fe:	b004      	add	sp, #16
   d4800:	bd70      	pop	{r4, r5, r6, pc}
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4802:	2400      	movs	r4, #0
   d4804:	e7fa      	b.n	d47fc <_Z17setWaterThreshold6String+0x64>
   d4806:	bf00      	nop
   d4808:	42c80000 	.word	0x42c80000
   d480c:	2003e558 	.word	0x2003e558
   d4810:	2003e528 	.word	0x2003e528
   d4814:	000ddc0a 	.word	0x000ddc0a
   d4818:	2003e559 	.word	0x2003e559
   d481c:	2003e404 	.word	0x2003e404
   d4820:	000ddfe5 	.word	0x000ddfe5
   d4824:	2003e4e0 	.word	0x2003e4e0

000d4828 <_Z9sendEventv>:
void sendEvent() {
   d4828:	b500      	push	{lr}
   d482a:	b0c9      	sub	sp, #292	; 0x124
  unsigned long timeStampValue = Time.now();                                       // Going to start sending timestamps - and will modify for midnight to fix reporting issue
   d482c:	f006 f8a1 	bl	da972 <_ZN9TimeClass3nowEv>
  snprintf(data, sizeof(data), "{\"soilMoisture\":%i, \"watering\":%i, \"battery\":%i,\"key1\":\"%s\",\"temp\":%i, \"resets\":%i, \"alerts\":%i, \"connecttime\":%i,\"timestamp\":%lu000}",current.soilMoisture, current.solenoidState, sysStatus.stateOfCharge, batteryContext[sysStatus.batteryState], current.temperature, sysStatus.resetCount, current.alertCount, sysStatus.lastConnectionDuration, timeStampValue);
   d4830:	4a15      	ldr	r2, [pc, #84]	; (d4888 <_Z9sendEventv+0x60>)
   d4832:	9007      	str	r0, [sp, #28]
   d4834:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   d4836:	4b15      	ldr	r3, [pc, #84]	; (d488c <_Z9sendEventv+0x64>)
   d4838:	9106      	str	r1, [sp, #24]
   d483a:	6919      	ldr	r1, [r3, #16]
   d483c:	9105      	str	r1, [sp, #20]
   d483e:	6911      	ldr	r1, [r2, #16]
   d4840:	9104      	str	r1, [sp, #16]
   d4842:	68d9      	ldr	r1, [r3, #12]
   d4844:	9103      	str	r1, [sp, #12]
   d4846:	7b10      	ldrb	r0, [r2, #12]
   d4848:	4911      	ldr	r1, [pc, #68]	; (d4890 <_Z9sendEventv+0x68>)
   d484a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d484e:	9102      	str	r1, [sp, #8]
   d4850:	6892      	ldr	r2, [r2, #8]
   d4852:	9201      	str	r2, [sp, #4]
   d4854:	689a      	ldr	r2, [r3, #8]
   d4856:	9200      	str	r2, [sp, #0]
   d4858:	685b      	ldr	r3, [r3, #4]
   d485a:	4a0e      	ldr	r2, [pc, #56]	; (d4894 <_Z9sendEventv+0x6c>)
   d485c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4860:	a808      	add	r0, sp, #32
   d4862:	f003 fa11 	bl	d7c88 <snprintf>
   d4866:	4b0c      	ldr	r3, [pc, #48]	; (d4898 <_Z9sendEventv+0x70>)
  publishQueue.publish("Ubidots-AquaMaster-Garden-v1", data, PRIVATE, WITH_ACK);
   d4868:	490c      	ldr	r1, [pc, #48]	; (d489c <_Z9sendEventv+0x74>)
   d486a:	781b      	ldrb	r3, [r3, #0]
   d486c:	f88d 3000 	strb.w	r3, [sp]
   d4870:	4b0b      	ldr	r3, [pc, #44]	; (d48a0 <_Z9sendEventv+0x78>)
   d4872:	480c      	ldr	r0, [pc, #48]	; (d48a4 <_Z9sendEventv+0x7c>)
   d4874:	781b      	ldrb	r3, [r3, #0]
   d4876:	aa08      	add	r2, sp, #32
   d4878:	f7ff fe37 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d487c:	4b0a      	ldr	r3, [pc, #40]	; (d48a8 <_Z9sendEventv+0x80>)
   d487e:	2201      	movs	r2, #1
   d4880:	701a      	strb	r2, [r3, #0]
}
   d4882:	b049      	add	sp, #292	; 0x124
   d4884:	f85d fb04 	ldr.w	pc, [sp], #4
   d4888:	2003e528 	.word	0x2003e528
   d488c:	2003e460 	.word	0x2003e460
   d4890:	2003e0c8 	.word	0x2003e0c8
   d4894:	000ddc13 	.word	0x000ddc13
   d4898:	2003e405 	.word	0x2003e405
   d489c:	000ddc99 	.word	0x000ddc99
   d48a0:	2003e404 	.word	0x2003e404
   d48a4:	2003e4e0 	.word	0x2003e4e0
   d48a8:	2003e48b 	.word	0x2003e48b

000d48ac <_Z16isItSafeToChargev>:
{         
   d48ac:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);                                 
   d48ae:	2101      	movs	r1, #1
   d48b0:	a801      	add	r0, sp, #4
   d48b2:	f005 fb30 	bl	d9f16 <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d48b6:	4b0b      	ldr	r3, [pc, #44]	; (d48e4 <_Z16isItSafeToChargev+0x38>)
   d48b8:	68db      	ldr	r3, [r3, #12]
   d48ba:	3b24      	subs	r3, #36	; 0x24
   d48bc:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d48be:	a801      	add	r0, sp, #4
   d48c0:	f04f 0401 	mov.w	r4, #1
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d48c4:	d90a      	bls.n	d48dc <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d48c6:	f005 fbb9 	bl	da03c <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d48ca:	4b07      	ldr	r3, [pc, #28]	; (d48e8 <_Z16isItSafeToChargev+0x3c>)
   d48cc:	731c      	strb	r4, [r3, #12]
    return false;
   d48ce:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d48d0:	a801      	add	r0, sp, #4
   d48d2:	f005 fb2f 	bl	d9f34 <_ZN4PMICD1Ev>
}
   d48d6:	4620      	mov	r0, r4
   d48d8:	b002      	add	sp, #8
   d48da:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                                            // It is safe to charge the battery
   d48dc:	f005 fb97 	bl	da00e <_ZN4PMIC14enableChargingEv>
    return true;
   d48e0:	e7f6      	b.n	d48d0 <_Z16isItSafeToChargev+0x24>
   d48e2:	bf00      	nop
   d48e4:	2003e460 	.word	0x2003e460
   d48e8:	2003e528 	.word	0x2003e528

000d48ec <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d48ec:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d48ee:	4d19      	ldr	r5, [pc, #100]	; (d4954 <_Z17getSignalStrengthv+0x68>)
   d48f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d48f2:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d48f4:	ac04      	add	r4, sp, #16
   d48f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4900:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4904:	4914      	ldr	r1, [pc, #80]	; (d4958 <_Z17getSignalStrengthv+0x6c>)
   d4906:	a80e      	add	r0, sp, #56	; 0x38
   d4908:	f003 fa96 	bl	d7e38 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d490c:	a80e      	add	r0, sp, #56	; 0x38
   d490e:	f003 fae6 	bl	d7ede <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4912:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4914:	a80e      	add	r0, sp, #56	; 0x38
   d4916:	f003 faeb 	bl	d7ef0 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d491a:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d491c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4920:	f003 fb16 	bl	d7f50 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4924:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d4926:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d492a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d492e:	f006 fcb3 	bl	db298 <__aeabi_f2d>
   d4932:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4936:	4628      	mov	r0, r5
   d4938:	f006 fcae 	bl	db298 <__aeabi_f2d>
   d493c:	e9cd 0100 	strd	r0, r1, [sp]
   d4940:	4a06      	ldr	r2, [pc, #24]	; (d495c <_Z17getSignalStrengthv+0x70>)
   d4942:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4946:	4806      	ldr	r0, [pc, #24]	; (d4960 <_Z17getSignalStrengthv+0x74>)
   d4948:	2140      	movs	r1, #64	; 0x40
   d494a:	f003 f99d 	bl	d7c88 <snprintf>
}
   d494e:	b019      	add	sp, #100	; 0x64
   d4950:	bd30      	pop	{r4, r5, pc}
   d4952:	bf00      	nop
   d4954:	000de084 	.word	0x000de084
   d4958:	2003e59c 	.word	0x2003e59c
   d495c:	000ddcb6 	.word	0x000ddcb6
   d4960:	2003e3b4 	.word	0x2003e3b4
   d4964:	00000000 	.word	0x00000000

000d4968 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d4968:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d496a:	200f      	movs	r0, #15
   d496c:	f006 fa8b 	bl	dae86 <analogRead>
  if (reading < 400) {                                                // This ocrresponds to 0 degrees - less than this and we should take another reading to be sure
   d4970:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d4974:	da05      	bge.n	d4982 <_Z14getTemperaturev+0x1a>
    delay(50);
   d4976:	2032      	movs	r0, #50	; 0x32
   d4978:	f003 f9da 	bl	d7d30 <delay>
    reading = analogRead(tmp36Pin);
   d497c:	200f      	movs	r0, #15
   d497e:	f006 fa82 	bl	dae86 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4982:	f006 fc77 	bl	db274 <__aeabi_i2d>
   d4986:	a320      	add	r3, pc, #128	; (adr r3, d4a08 <_Z14getTemperaturev+0xa0>)
   d4988:	e9d3 2300 	ldrd	r2, r3, [r3]
   d498c:	f006 fcdc 	bl	db348 <__aeabi_dmul>
   d4990:	f006 ffd2 	bl	db938 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4994:	eddf 7a14 	vldr	s15, [pc, #80]	; d49e8 <_Z14getTemperaturev+0x80>
   d4998:	ee07 0a10 	vmov	s14, r0
   d499c:	ee67 7a27 	vmul.f32	s15, s14, s15
   d49a0:	ee17 0a90 	vmov	r0, s15
   d49a4:	f006 fc78 	bl	db298 <__aeabi_f2d>
   d49a8:	4b10      	ldr	r3, [pc, #64]	; (d49ec <_Z14getTemperaturev+0x84>)
   d49aa:	2200      	movs	r2, #0
   d49ac:	f006 fb14 	bl	dafd8 <__aeabi_dsub>
   d49b0:	4b0f      	ldr	r3, [pc, #60]	; (d49f0 <_Z14getTemperaturev+0x88>)
   d49b2:	2200      	movs	r2, #0
   d49b4:	f006 fcc8 	bl	db348 <__aeabi_dmul>
   d49b8:	f006 ff76 	bl	db8a8 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d49bc:	f006 fc5a 	bl	db274 <__aeabi_i2d>
   d49c0:	4b0c      	ldr	r3, [pc, #48]	; (d49f4 <_Z14getTemperaturev+0x8c>)
   d49c2:	2200      	movs	r2, #0
   d49c4:	f006 fcc0 	bl	db348 <__aeabi_dmul>
   d49c8:	4b0b      	ldr	r3, [pc, #44]	; (d49f8 <_Z14getTemperaturev+0x90>)
   d49ca:	2200      	movs	r2, #0
   d49cc:	f006 fde6 	bl	db59c <__aeabi_ddiv>
   d49d0:	4b0a      	ldr	r3, [pc, #40]	; (d49fc <_Z14getTemperaturev+0x94>)
   d49d2:	2200      	movs	r2, #0
   d49d4:	f006 fb02 	bl	dafdc <__adddf3>
   d49d8:	f006 ff66 	bl	db8a8 <__aeabi_d2iz>
   d49dc:	4b08      	ldr	r3, [pc, #32]	; (d4a00 <_Z14getTemperaturev+0x98>)
   d49de:	60d8      	str	r0, [r3, #12]
  currentCountsWriteNeeded=true;
   d49e0:	4b08      	ldr	r3, [pc, #32]	; (d4a04 <_Z14getTemperaturev+0x9c>)
   d49e2:	2201      	movs	r2, #1
   d49e4:	701a      	strb	r2, [r3, #0]
}
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	39800000 	.word	0x39800000
   d49ec:	3fe00000 	.word	0x3fe00000
   d49f0:	40590000 	.word	0x40590000
   d49f4:	40220000 	.word	0x40220000
   d49f8:	40140000 	.word	0x40140000
   d49fc:	40400000 	.word	0x40400000
   d4a00:	2003e460 	.word	0x2003e460
   d4a04:	2003e480 	.word	0x2003e480
   d4a08:	66666666 	.word	0x66666666
   d4a0c:	400a6666 	.word	0x400a6666

000d4a10 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d4a10:	b500      	push	{lr}
   d4a12:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d4a14:	4668      	mov	r0, sp
   d4a16:	f7ff fcb3 	bl	d4380 <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d4a1a:	a808      	add	r0, sp, #32
   d4a1c:	f7ff fcb0 	bl	d4380 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4a20:	2100      	movs	r1, #0
   d4a22:	a808      	add	r0, sp, #32
   d4a24:	f003 f822 	bl	d7a6c <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d4a28:	4b13      	ldr	r3, [pc, #76]	; (d4a78 <_Z14setPowerConfigv+0x68>)
   d4a2a:	7959      	ldrb	r1, [r3, #5]
   d4a2c:	b1a1      	cbz	r1, d4a58 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4a2e:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4a32:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4a36:	4b11      	ldr	r3, [pc, #68]	; (d4a7c <_Z14setPowerConfigv+0x6c>)
   d4a38:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4a3a:	f241 0370 	movw	r3, #4208	; 0x1070
   d4a3e:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4a42:	9b00      	ldr	r3, [sp, #0]
   d4a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4a48:	9300      	str	r3, [sp, #0]
   d4a4a:	2100      	movs	r1, #0
   d4a4c:	4668      	mov	r0, sp
   d4a4e:	f003 f80d 	bl	d7a6c <system_power_management_set_config>
}
   d4a52:	b011      	add	sp, #68	; 0x44
   d4a54:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d4a58:	f241 0370 	movw	r3, #4208	; 0x1070
   d4a5c:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4a60:	4b07      	ldr	r3, [pc, #28]	; (d4a80 <_Z14setPowerConfigv+0x70>)
   d4a62:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4a64:	f241 0310 	movw	r3, #4112	; 0x1010
   d4a68:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d4a6c:	9b00      	ldr	r3, [sp, #0]
   d4a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4a72:	9300      	str	r3, [sp, #0]
   d4a74:	e7ea      	b.n	d4a4c <_Z14setPowerConfigv+0x3c>
   d4a76:	bf00      	nop
   d4a78:	2003e528 	.word	0x2003e528
   d4a7c:	04000384 	.word	0x04000384
   d4a80:	03840384 	.word	0x03840384

000d4a84 <_Z12setSolarMode6String>:
{
   d4a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4a86:	491b      	ldr	r1, [pc, #108]	; (d4af4 <_Z12setSolarMode6String+0x70>)
   d4a88:	4605      	mov	r5, r0
   d4a8a:	f005 fc3c 	bl	da306 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4a8e:	4604      	mov	r4, r0
   d4a90:	b1c0      	cbz	r0, d4ac4 <_Z12setSolarMode6String+0x40>
    sysStatus.solarPowerMode = true;
   d4a92:	4d19      	ldr	r5, [pc, #100]	; (d4af8 <_Z12setSolarMode6String+0x74>)
   d4a94:	2401      	movs	r4, #1
   d4a96:	716c      	strb	r4, [r5, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4a98:	f7ff ffba 	bl	d4a10 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4a9c:	4b17      	ldr	r3, [pc, #92]	; (d4afc <_Z12setSolarMode6String+0x78>)
   d4a9e:	701c      	strb	r4, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4aa0:	78eb      	ldrb	r3, [r5, #3]
   d4aa2:	b913      	cbnz	r3, d4aaa <_Z12setSolarMode6String+0x26>
    return 1;
   d4aa4:	2001      	movs	r0, #1
}
   d4aa6:	b003      	add	sp, #12
   d4aa8:	bd30      	pop	{r4, r5, pc}
   d4aaa:	4b15      	ldr	r3, [pc, #84]	; (d4b00 <_Z12setSolarMode6String+0x7c>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4aac:	4a15      	ldr	r2, [pc, #84]	; (d4b04 <_Z12setSolarMode6String+0x80>)
   d4aae:	781b      	ldrb	r3, [r3, #0]
   d4ab0:	f88d 3000 	strb.w	r3, [sp]
   d4ab4:	4b14      	ldr	r3, [pc, #80]	; (d4b08 <_Z12setSolarMode6String+0x84>)
   d4ab6:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4ab8:	4914      	ldr	r1, [pc, #80]	; (d4b0c <_Z12setSolarMode6String+0x88>)
   d4aba:	4815      	ldr	r0, [pc, #84]	; (d4b10 <_Z12setSolarMode6String+0x8c>)
   d4abc:	f7ff fd15 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	e7f0      	b.n	d4aa6 <_Z12setSolarMode6String+0x22>
   d4ac4:	4913      	ldr	r1, [pc, #76]	; (d4b14 <_Z12setSolarMode6String+0x90>)
   d4ac6:	4628      	mov	r0, r5
   d4ac8:	f005 fc1d 	bl	da306 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4acc:	2800      	cmp	r0, #0
   d4ace:	d0ea      	beq.n	d4aa6 <_Z12setSolarMode6String+0x22>
    sysStatus.solarPowerMode = false;
   d4ad0:	4d09      	ldr	r5, [pc, #36]	; (d4af8 <_Z12setSolarMode6String+0x74>)
    systemStatusWriteNeeded=true;
   d4ad2:	4b0a      	ldr	r3, [pc, #40]	; (d4afc <_Z12setSolarMode6String+0x78>)
    sysStatus.solarPowerMode = false;
   d4ad4:	716c      	strb	r4, [r5, #5]
    systemStatusWriteNeeded=true;
   d4ad6:	2401      	movs	r4, #1
   d4ad8:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4ada:	f7ff ff99 	bl	d4a10 <_Z14setPowerConfigv>
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4ade:	78eb      	ldrb	r3, [r5, #3]
   d4ae0:	2b00      	cmp	r3, #0
   d4ae2:	d0df      	beq.n	d4aa4 <_Z12setSolarMode6String+0x20>
   d4ae4:	4b06      	ldr	r3, [pc, #24]	; (d4b00 <_Z12setSolarMode6String+0x7c>)
   d4ae6:	4a0c      	ldr	r2, [pc, #48]	; (d4b18 <_Z12setSolarMode6String+0x94>)
   d4ae8:	781b      	ldrb	r3, [r3, #0]
   d4aea:	f88d 3000 	strb.w	r3, [sp]
   d4aee:	4b06      	ldr	r3, [pc, #24]	; (d4b08 <_Z12setSolarMode6String+0x84>)
   d4af0:	781b      	ldrb	r3, [r3, #0]
   d4af2:	e7e1      	b.n	d4ab8 <_Z12setSolarMode6String+0x34>
   d4af4:	000ddb10 	.word	0x000ddb10
   d4af8:	2003e528 	.word	0x2003e528
   d4afc:	2003e558 	.word	0x2003e558
   d4b00:	2003e405 	.word	0x2003e405
   d4b04:	000ddccf 	.word	0x000ddccf
   d4b08:	2003e404 	.word	0x2003e404
   d4b0c:	000ddcfc 	.word	0x000ddcfc
   d4b10:	2003e4e0 	.word	0x2003e4e0
   d4b14:	000ddd20 	.word	0x000ddd20
   d4b18:	000ddce6 	.word	0x000ddce6

000d4b1c <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4b1c:	b570      	push	{r4, r5, r6, lr}
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d4b1e:	4b1a      	ldr	r3, [pc, #104]	; (d4b88 <_Z18loadSystemDefaultsv+0x6c>)
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d4b20:	4c1a      	ldr	r4, [pc, #104]	; (d4b8c <_Z18loadSystemDefaultsv+0x70>)
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d4b22:	2201      	movs	r2, #1
   d4b24:	701a      	strb	r2, [r3, #0]
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d4b26:	78e3      	ldrb	r3, [r4, #3]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4b28:	b086      	sub	sp, #24
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d4b2a:	b153      	cbz	r3, d4b42 <_Z18loadSystemDefaultsv+0x26>
   d4b2c:	4b18      	ldr	r3, [pc, #96]	; (d4b90 <_Z18loadSystemDefaultsv+0x74>)
   d4b2e:	4a19      	ldr	r2, [pc, #100]	; (d4b94 <_Z18loadSystemDefaultsv+0x78>)
   d4b30:	781b      	ldrb	r3, [r3, #0]
   d4b32:	f88d 3000 	strb.w	r3, [sp]
   d4b36:	4b18      	ldr	r3, [pc, #96]	; (d4b98 <_Z18loadSystemDefaultsv+0x7c>)
   d4b38:	4918      	ldr	r1, [pc, #96]	; (d4b9c <_Z18loadSystemDefaultsv+0x80>)
   d4b3a:	781b      	ldrb	r3, [r3, #0]
   d4b3c:	4818      	ldr	r0, [pc, #96]	; (d4ba0 <_Z18loadSystemDefaultsv+0x84>)
   d4b3e:	f7ff fcd4 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4b42:	2500      	movs	r5, #0
  setLowPowerMode("1");
   d4b44:	4917      	ldr	r1, [pc, #92]	; (d4ba4 <_Z18loadSystemDefaultsv+0x88>)
  sysStatus.verboseMode = false;
   d4b46:	7125      	strb	r5, [r4, #4]
  sysStatus.structuresVersion = 1;
   d4b48:	2601      	movs	r6, #1
  setLowPowerMode("1");
   d4b4a:	a802      	add	r0, sp, #8
  sysStatus.structuresVersion = 1;
   d4b4c:	7026      	strb	r6, [r4, #0]
  sysStatus.clockSet = false;
   d4b4e:	70a5      	strb	r5, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d4b50:	71e5      	strb	r5, [r4, #7]
  setLowPowerMode("1");
   d4b52:	f005 fb82 	bl	da25a <_ZN6StringC1EPKc>
   d4b56:	a802      	add	r0, sp, #8
   d4b58:	f7ff fdb6 	bl	d46c8 <_Z15setLowPowerMode6String>
   d4b5c:	a802      	add	r0, sp, #8
   d4b5e:	f005 fb31 	bl	da1c4 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d4b62:	4b11      	ldr	r3, [pc, #68]	; (d4ba8 <_Z18loadSystemDefaultsv+0x8c>)
   d4b64:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d4b66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d4b6a:	61a3      	str	r3, [r4, #24]
  sysStatus.openTime = 6;
   d4b6c:	f241 5306 	movw	r3, #5382	; 0x1506
   d4b70:	83a3      	strh	r3, [r4, #28]
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4b72:	4a06      	ldr	r2, [pc, #24]	; (d4b8c <_Z18loadSystemDefaultsv+0x70>)
   d4b74:	480d      	ldr	r0, [pc, #52]	; (d4bac <_Z18loadSystemDefaultsv+0x90>)
  sysStatus.solarPowerMode = true;  
   d4b76:	7166      	strb	r6, [r4, #5]
   d4b78:	2330      	movs	r3, #48	; 0x30
   d4b7a:	4631      	mov	r1, r6
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d4b7c:	8525      	strh	r5, [r4, #40]	; 0x28
   d4b7e:	f002 f930 	bl	d6de2 <_ZN6MB85RC9writeDataEjPKhj>
}
   d4b82:	b006      	add	sp, #24
   d4b84:	bd70      	pop	{r4, r5, r6, pc}
   d4b86:	bf00      	nop
   d4b88:	2003e4dd 	.word	0x2003e4dd
   d4b8c:	2003e528 	.word	0x2003e528
   d4b90:	2003e405 	.word	0x2003e405
   d4b94:	000ddd01 	.word	0x000ddd01
   d4b98:	2003e404 	.word	0x2003e404
   d4b9c:	000ddcfc 	.word	0x000ddcfc
   d4ba0:	2003e4e0 	.word	0x2003e4e0
   d4ba4:	000ddb10 	.word	0x000ddb10
   d4ba8:	c0a00000 	.word	0xc0a00000
   d4bac:	2003e48c 	.word	0x2003e48c

000d4bb0 <_Z17checkSystemValuesv>:
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4bb0:	4b24      	ldr	r3, [pc, #144]	; (d4c44 <_Z17checkSystemValuesv+0x94>)
   d4bb2:	691a      	ldr	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4bb4:	edd3 7a05 	vldr	s15, [r3, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4bb8:	2aff      	cmp	r2, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4bba:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4bbe:	bf88      	it	hi
   d4bc0:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4bc6:	bf88      	it	hi
   d4bc8:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4bce:	d406      	bmi.n	d4bde <_Z17checkSystemValuesv+0x2e>
   d4bd0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4bdc:	dd01      	ble.n	d4be2 <_Z17checkSystemValuesv+0x32>
   d4bde:	4a1a      	ldr	r2, [pc, #104]	; (d4c48 <_Z17checkSystemValuesv+0x98>)
   d4be0:	615a      	str	r2, [r3, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4be2:	edd3 7a06 	vldr	s15, [r3, #24]
   d4be6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4bee:	d406      	bmi.n	d4bfe <_Z17checkSystemValuesv+0x4e>
   d4bf0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4bfc:	dd02      	ble.n	d4c04 <_Z17checkSystemValuesv+0x54>
   d4bfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d4c02:	619a      	str	r2, [r3, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d4c04:	7f1a      	ldrb	r2, [r3, #28]
   d4c06:	2a0c      	cmp	r2, #12
   d4c08:	bf84      	itt	hi
   d4c0a:	2200      	movhi	r2, #0
   d4c0c:	771a      	strbhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4c0e:	7f5a      	ldrb	r2, [r3, #29]
   d4c10:	3a0c      	subs	r2, #12
   d4c12:	2a0c      	cmp	r2, #12
   d4c14:	bf84      	itt	hi
   d4c16:	2218      	movhi	r2, #24
   d4c18:	775a      	strbhi	r2, [r3, #29]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4c1a:	4a0c      	ldr	r2, [pc, #48]	; (d4c4c <_Z17checkSystemValuesv+0x9c>)
   d4c1c:	6811      	ldr	r1, [r2, #0]
   d4c1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   d4c20:	428a      	cmp	r2, r1
   d4c22:	bf84      	itt	hi
   d4c24:	2200      	movhi	r2, #0
   d4c26:	851a      	strhhi	r2, [r3, #40]	; 0x28
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4c28:	2201      	movs	r2, #1
   d4c2a:	715a      	strb	r2, [r3, #5]
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4c2c:	4b08      	ldr	r3, [pc, #32]	; (d4c50 <_Z17checkSystemValuesv+0xa0>)
   d4c2e:	8b18      	ldrh	r0, [r3, #24]
   d4c30:	4281      	cmp	r1, r0
    current.maxConnectTime = 0;
   d4c32:	bf3f      	itttt	cc
   d4c34:	2100      	movcc	r1, #0
   d4c36:	8319      	strhcc	r1, [r3, #24]
    currentCountsWriteNeeded = true;
   d4c38:	4b06      	ldrcc	r3, [pc, #24]	; (d4c54 <_Z17checkSystemValuesv+0xa4>)
   d4c3a:	701a      	strbcc	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   d4c3c:	4b06      	ldr	r3, [pc, #24]	; (d4c58 <_Z17checkSystemValuesv+0xa8>)
   d4c3e:	2201      	movs	r2, #1
   d4c40:	701a      	strb	r2, [r3, #0]
}
   d4c42:	4770      	bx	lr
   d4c44:	2003e528 	.word	0x2003e528
   d4c48:	c0a00000 	.word	0xc0a00000
   d4c4c:	2003e0ec 	.word	0x2003e0ec
   d4c50:	2003e460 	.word	0x2003e460
   d4c54:	2003e480 	.word	0x2003e480
   d4c58:	2003e558 	.word	0x2003e558

000d4c5c <_Z21makeUpParkHourStringsv>:
void makeUpParkHourStrings() {
   d4c5c:	b510      	push	{r4, lr}
  if (sysStatus.openTime == 0 && sysStatus.closeTime == 24) {
   d4c5e:	4c0e      	ldr	r4, [pc, #56]	; (d4c98 <_Z21makeUpParkHourStringsv+0x3c>)
   d4c60:	8ba3      	ldrh	r3, [r4, #28]
   d4c62:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4c66:	d109      	bne.n	d4c7c <_Z21makeUpParkHourStringsv+0x20>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   d4c68:	490c      	ldr	r1, [pc, #48]	; (d4c9c <_Z21makeUpParkHourStringsv+0x40>)
   d4c6a:	480d      	ldr	r0, [pc, #52]	; (d4ca0 <_Z21makeUpParkHourStringsv+0x44>)
   d4c6c:	f006 ffc5 	bl	dbbfa <strcpy>
}
   d4c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   d4c74:	4909      	ldr	r1, [pc, #36]	; (d4c9c <_Z21makeUpParkHourStringsv+0x40>)
   d4c76:	480b      	ldr	r0, [pc, #44]	; (d4ca4 <_Z21makeUpParkHourStringsv+0x48>)
   d4c78:	f006 bfbf 	b.w	dbbfa <strcpy>
  snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.openTime);
   d4c7c:	7f23      	ldrb	r3, [r4, #28]
   d4c7e:	4a0a      	ldr	r2, [pc, #40]	; (d4ca8 <_Z21makeUpParkHourStringsv+0x4c>)
   d4c80:	4807      	ldr	r0, [pc, #28]	; (d4ca0 <_Z21makeUpParkHourStringsv+0x44>)
   d4c82:	2108      	movs	r1, #8
   d4c84:	f003 f800 	bl	d7c88 <snprintf>
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4c88:	7f63      	ldrb	r3, [r4, #29]
   d4c8a:	4a07      	ldr	r2, [pc, #28]	; (d4ca8 <_Z21makeUpParkHourStringsv+0x4c>)
   d4c8c:	4805      	ldr	r0, [pc, #20]	; (d4ca4 <_Z21makeUpParkHourStringsv+0x48>)
}
   d4c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4c92:	2108      	movs	r1, #8
   d4c94:	f002 bff8 	b.w	d7c88 <snprintf>
   d4c98:	2003e528 	.word	0x2003e528
   d4c9c:	000ddd19 	.word	0x000ddd19
   d4ca0:	2003e0f6 	.word	0x2003e0f6
   d4ca4:	2003e0e4 	.word	0x2003e0e4
   d4ca8:	000ddd1c 	.word	0x000ddd1c

000d4cac <_Z11setOpenTime6String>:
{
   d4cac:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4cae:	220a      	movs	r2, #10
   d4cb0:	6800      	ldr	r0, [r0, #0]
   d4cb2:	a901      	add	r1, sp, #4
   d4cb4:	f007 ff02 	bl	dcabc <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4cb8:	2817      	cmp	r0, #23
   d4cba:	d80c      	bhi.n	d4cd6 <_Z11setOpenTime6String+0x2a>
  sysStatus.openTime = tempTime;
   d4cbc:	4c07      	ldr	r4, [pc, #28]	; (d4cdc <_Z11setOpenTime6String+0x30>)
   d4cbe:	7720      	strb	r0, [r4, #28]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4cc0:	f7ff ffcc 	bl	d4c5c <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4cc4:	4b06      	ldr	r3, [pc, #24]	; (d4ce0 <_Z11setOpenTime6String+0x34>)
   d4cc6:	2001      	movs	r0, #1
   d4cc8:	7018      	strb	r0, [r3, #0]
  if (sysStatus.connectedStatus) {
   d4cca:	78e3      	ldrb	r3, [r4, #3]
   d4ccc:	b10b      	cbz	r3, d4cd2 <_Z11setOpenTime6String+0x26>
   d4cce:	f7ff fcd5 	bl	d467c <_Z11setOpenTime6String.part.0>
}
   d4cd2:	b002      	add	sp, #8
   d4cd4:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4cd6:	2000      	movs	r0, #0
   d4cd8:	e7fb      	b.n	d4cd2 <_Z11setOpenTime6String+0x26>
   d4cda:	bf00      	nop
   d4cdc:	2003e528 	.word	0x2003e528
   d4ce0:	2003e558 	.word	0x2003e558

000d4ce4 <_Z12setCloseTime6String>:
{
   d4ce4:	b530      	push	{r4, r5, lr}
   d4ce6:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4ce8:	6800      	ldr	r0, [r0, #0]
   d4cea:	220a      	movs	r2, #10
   d4cec:	a903      	add	r1, sp, #12
   d4cee:	f007 fee5 	bl	dcabc <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4cf2:	2818      	cmp	r0, #24
   d4cf4:	d81c      	bhi.n	d4d30 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
   d4cf6:	4d10      	ldr	r5, [pc, #64]	; (d4d38 <_Z12setCloseTime6String+0x54>)
   d4cf8:	7768      	strb	r0, [r5, #29]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4cfa:	f7ff ffaf 	bl	d4c5c <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4cfe:	4b0f      	ldr	r3, [pc, #60]	; (d4d3c <_Z12setCloseTime6String+0x58>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4d00:	4a0f      	ldr	r2, [pc, #60]	; (d4d40 <_Z12setCloseTime6String+0x5c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4d02:	2401      	movs	r4, #1
   d4d04:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4d06:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d0a:	7f6b      	ldrb	r3, [r5, #29]
   d4d0c:	a804      	add	r0, sp, #16
   d4d0e:	f002 ffbb 	bl	d7c88 <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4d12:	78eb      	ldrb	r3, [r5, #3]
   d4d14:	b153      	cbz	r3, d4d2c <_Z12setCloseTime6String+0x48>
   d4d16:	4b0b      	ldr	r3, [pc, #44]	; (d4d44 <_Z12setCloseTime6String+0x60>)
   d4d18:	490b      	ldr	r1, [pc, #44]	; (d4d48 <_Z12setCloseTime6String+0x64>)
   d4d1a:	781b      	ldrb	r3, [r3, #0]
   d4d1c:	f88d 3000 	strb.w	r3, [sp]
   d4d20:	4b0a      	ldr	r3, [pc, #40]	; (d4d4c <_Z12setCloseTime6String+0x68>)
   d4d22:	480b      	ldr	r0, [pc, #44]	; (d4d50 <_Z12setCloseTime6String+0x6c>)
   d4d24:	781b      	ldrb	r3, [r3, #0]
   d4d26:	aa04      	add	r2, sp, #16
   d4d28:	f7ff fbdf 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	e000      	b.n	d4d32 <_Z12setCloseTime6String+0x4e>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d30:	2000      	movs	r0, #0
}
   d4d32:	b045      	add	sp, #276	; 0x114
   d4d34:	bd30      	pop	{r4, r5, pc}
   d4d36:	bf00      	nop
   d4d38:	2003e528 	.word	0x2003e528
   d4d3c:	2003e558 	.word	0x2003e558
   d4d40:	000ddd22 	.word	0x000ddd22
   d4d44:	2003e405 	.word	0x2003e405
   d4d48:	000ddf36 	.word	0x000ddf36
   d4d4c:	2003e404 	.word	0x2003e404
   d4d50:	2003e4e0 	.word	0x2003e4e0

000d4d54 <_Z22disconnectFromParticlev>:
{
   d4d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d58:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d4d5a:	2400      	movs	r4, #0
  Particle.disconnect();
   d4d5c:	a801      	add	r0, sp, #4
   d4d5e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4d62:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4d66:	f003 f9c4 	bl	d80f2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d4d6a:	4620      	mov	r0, r4
   d4d6c:	f002 fc80 	bl	d7670 <hal_timer_millis>
        while (_while() && !_condition()) {
   d4d70:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d4d74:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d4d76:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4d7a:	2000      	movs	r0, #0
   d4d7c:	f002 fc78 	bl	d7670 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4d80:	1b46      	subs	r6, r0, r5
   d4d82:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4d86:	45b9      	cmp	r9, r7
   d4d88:	bf08      	it	eq
   d4d8a:	45b0      	cmpeq	r8, r6
   d4d8c:	d305      	bcc.n	d4d9a <_Z22disconnectFromParticlev+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d8e:	f002 feab 	bl	d7ae8 <spark_cloud_flag_connected>
   d4d92:	b110      	cbz	r0, d4d9a <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d4d94:	f002 fe98 	bl	d7ac8 <spark_process>
        while (_while() && !_condition()) {
   d4d98:	e7ef      	b.n	d4d7a <_Z22disconnectFromParticlev+0x26>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d9a:	4c0a      	ldr	r4, [pc, #40]	; (d4dc4 <_Z22disconnectFromParticlev+0x70>)
   d4d9c:	f002 fea4 	bl	d7ae8 <spark_cloud_flag_connected>
   d4da0:	6860      	ldr	r0, [r4, #4]
   d4da2:	2200      	movs	r2, #0
   d4da4:	2102      	movs	r1, #2
   d4da6:	f002 feff 	bl	d7ba8 <network_disconnect>
  Cellular.off();                                                 // Turn off the cellular modem
   d4daa:	4620      	mov	r0, r4
   d4dac:	f7ff faa4 	bl	d42f8 <_ZN5spark13CellularClass3offEv>
  sysStatus.connectedStatus = false;
   d4db0:	4b05      	ldr	r3, [pc, #20]	; (d4dc8 <_Z22disconnectFromParticlev+0x74>)
   d4db2:	2200      	movs	r2, #0
   d4db4:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4db6:	4b05      	ldr	r3, [pc, #20]	; (d4dcc <_Z22disconnectFromParticlev+0x78>)
   d4db8:	2001      	movs	r0, #1
   d4dba:	7018      	strb	r0, [r3, #0]
}
   d4dbc:	b005      	add	sp, #20
   d4dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4dc2:	bf00      	nop
   d4dc4:	2003e59c 	.word	0x2003e59c
   d4dc8:	2003e528 	.word	0x2003e528
   d4dcc:	2003e558 	.word	0x2003e558

000d4dd0 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d4dd0:	b508      	push	{r3, lr}
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d4dd2:	f005 fdce 	bl	da972 <_ZN9TimeClass3nowEv>
   d4dd6:	4b07      	ldr	r3, [pc, #28]	; (d4df4 <_Z15resetEverythingv+0x24>)
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4dd8:	4907      	ldr	r1, [pc, #28]	; (d4df8 <_Z15resetEverythingv+0x28>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d4dda:	6018      	str	r0, [r3, #0]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4ddc:	2200      	movs	r2, #0
   d4dde:	611a      	str	r2, [r3, #16]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d4de0:	831a      	strh	r2, [r3, #24]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4de2:	610a      	str	r2, [r1, #16]
  current.minBatteryLevel = 100;
   d4de4:	2264      	movs	r2, #100	; 0x64
   d4de6:	61da      	str	r2, [r3, #28]
  currentCountsWriteNeeded = true;
   d4de8:	4a04      	ldr	r2, [pc, #16]	; (d4dfc <_Z15resetEverythingv+0x2c>)
   d4dea:	2301      	movs	r3, #1
   d4dec:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d4dee:	4a04      	ldr	r2, [pc, #16]	; (d4e00 <_Z15resetEverythingv+0x30>)
   d4df0:	7013      	strb	r3, [r2, #0]
}
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	2003e460 	.word	0x2003e460
   d4df8:	2003e528 	.word	0x2003e528
   d4dfc:	2003e480 	.word	0x2003e480
   d4e00:	2003e558 	.word	0x2003e558

000d4e04 <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition over serial and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d4e04:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4e06:	4c15      	ldr	r4, [pc, #84]	; (d4e5c <_Z22publishStateTransitionv+0x58>)
   d4e08:	4d15      	ldr	r5, [pc, #84]	; (d4e60 <_Z22publishStateTransitionv+0x5c>)
   d4e0a:	7822      	ldrb	r2, [r4, #0]
   d4e0c:	4915      	ldr	r1, [pc, #84]	; (d4e64 <_Z22publishStateTransitionv+0x60>)
   d4e0e:	eb02 1302 	add.w	r3, r2, r2, lsl #4
   d4e12:	782a      	ldrb	r2, [r5, #0]
{
   d4e14:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4e16:	eb02 1202 	add.w	r2, r2, r2, lsl #4
   d4e1a:	440a      	add	r2, r1
   d4e1c:	440b      	add	r3, r1
   d4e1e:	9200      	str	r2, [sp, #0]
   d4e20:	2128      	movs	r1, #40	; 0x28
   d4e22:	4a11      	ldr	r2, [pc, #68]	; (d4e68 <_Z22publishStateTransitionv+0x64>)
   d4e24:	a802      	add	r0, sp, #8
   d4e26:	f002 ff2f 	bl	d7c88 <snprintf>
  oldState = state;
   d4e2a:	782b      	ldrb	r3, [r5, #0]
   d4e2c:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) {
   d4e2e:	4b0f      	ldr	r3, [pc, #60]	; (d4e6c <_Z22publishStateTransitionv+0x68>)
   d4e30:	791a      	ldrb	r2, [r3, #4]
   d4e32:	b18a      	cbz	r2, d4e58 <_Z22publishStateTransitionv+0x54>
    if (sysStatus.connectedStatus) publishQueue.publish("State Transition",stateTransitionString, PRIVATE, WITH_ACK);
   d4e34:	78db      	ldrb	r3, [r3, #3]
   d4e36:	b153      	cbz	r3, d4e4e <_Z22publishStateTransitionv+0x4a>
   d4e38:	4b0d      	ldr	r3, [pc, #52]	; (d4e70 <_Z22publishStateTransitionv+0x6c>)
   d4e3a:	490e      	ldr	r1, [pc, #56]	; (d4e74 <_Z22publishStateTransitionv+0x70>)
   d4e3c:	781b      	ldrb	r3, [r3, #0]
   d4e3e:	f88d 3000 	strb.w	r3, [sp]
   d4e42:	4b0d      	ldr	r3, [pc, #52]	; (d4e78 <_Z22publishStateTransitionv+0x74>)
   d4e44:	480d      	ldr	r0, [pc, #52]	; (d4e7c <_Z22publishStateTransitionv+0x78>)
   d4e46:	781b      	ldrb	r3, [r3, #0]
   d4e48:	aa02      	add	r2, sp, #8
   d4e4a:	f7ff fb4e 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    Serial.println(stateTransitionString);
   d4e4e:	f005 fecb 	bl	dabe8 <_Z16_fetch_usbserialv>
   d4e52:	a902      	add	r1, sp, #8
   d4e54:	f005 f93e 	bl	da0d4 <_ZN5Print7printlnEPKc>
  }
}
   d4e58:	b00d      	add	sp, #52	; 0x34
   d4e5a:	bd30      	pop	{r4, r5, pc}
   d4e5c:	2003e4dc 	.word	0x2003e4dc
   d4e60:	2003e51c 	.word	0x2003e51c
   d4e64:	2003e104 	.word	0x2003e104
   d4e68:	000ddd39 	.word	0x000ddd39
   d4e6c:	2003e528 	.word	0x2003e528
   d4e70:	2003e405 	.word	0x2003e405
   d4e74:	000ddd47 	.word	0x000ddd47
   d4e78:	2003e404 	.word	0x2003e404
   d4e7c:	2003e4e0 	.word	0x2003e4e0

000d4e80 <_Z14fullModemResetv>:
 * @brief Fully resets modem.
 * 
 * @details Disconnects from the cloud, resets modem and SIM, and deep sleeps for 10 seconds.
 * Adapted form Rikkas7's https://github.com/rickkas7/electronsample.
 */
void fullModemReset() {  // 
   d4e80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        clearSession_(clearSession) {
   d4e82:	2300      	movs	r3, #0
	Particle.disconnect(); 	                                         // Disconnect from the cloud
   d4e84:	a801      	add	r0, sp, #4
   d4e86:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4e8a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4e8e:	f003 f930 	bl	d80f2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4e92:	f002 fbdd 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(sysStatus.connectedStatus && millis() - startTime < 15000) {
   d4e96:	4d0f      	ldr	r5, [pc, #60]	; (d4ed4 <_Z14fullModemResetv+0x54>)
   d4e98:	4604      	mov	r4, r0
   d4e9a:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4e9e:	78eb      	ldrb	r3, [r5, #3]
   d4ea0:	b143      	cbz	r3, d4eb4 <_Z14fullModemResetv+0x34>
   d4ea2:	f002 fbd5 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
   d4ea6:	1b00      	subs	r0, r0, r4
   d4ea8:	42b0      	cmp	r0, r6
   d4eaa:	d803      	bhi.n	d4eb4 <_Z14fullModemResetv+0x34>
		delay(100);
   d4eac:	2064      	movs	r0, #100	; 0x64
   d4eae:	f002 ff3f 	bl	d7d30 <delay>
	while(sysStatus.connectedStatus && millis() - startTime < 15000) {
   d4eb2:	e7f4      	b.n	d4e9e <_Z14fullModemResetv+0x1e>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.off();
   d4eb4:	4808      	ldr	r0, [pc, #32]	; (d4ed8 <_Z14fullModemResetv+0x58>)
   d4eb6:	f7ff fa1f 	bl	d42f8 <_ZN5spark13CellularClass3offEv>
	delay(1000);
   d4eba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ebe:	f002 ff37 	bl	d7d30 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4ec2:	4b06      	ldr	r3, [pc, #24]	; (d4edc <_Z14fullModemResetv+0x5c>)
   d4ec4:	220a      	movs	r2, #10
   d4ec6:	681b      	ldr	r3, [r3, #0]
   d4ec8:	2101      	movs	r1, #1
   d4eca:	a801      	add	r0, sp, #4
   d4ecc:	f005 fb3c 	bl	da548 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4ed0:	b004      	add	sp, #16
   d4ed2:	bd70      	pop	{r4, r5, r6, pc}
   d4ed4:	2003e528 	.word	0x2003e528
   d4ed8:	2003e59c 	.word	0x2003e59c
   d4edc:	2003e400 	.word	0x2003e400

000d4ee0 <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details Syncs time with remote service and sets low power mode. Called from Reporting State ONLY.
 * Clean house at the end of the day
 */
void dailyCleanup() {
   d4ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4ee4:	4b23      	ldr	r3, [pc, #140]	; (d4f74 <_Z12dailyCleanupv+0x94>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
  sysStatus.verboseMode = false;
   d4ee6:	4c24      	ldr	r4, [pc, #144]	; (d4f78 <_Z12dailyCleanupv+0x98>)
   d4ee8:	781b      	ldrb	r3, [r3, #0]
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d4eea:	4a24      	ldr	r2, [pc, #144]	; (d4f7c <_Z12dailyCleanupv+0x9c>)
   d4eec:	4924      	ldr	r1, [pc, #144]	; (d4f80 <_Z12dailyCleanupv+0xa0>)
   d4eee:	4825      	ldr	r0, [pc, #148]	; (d4f84 <_Z12dailyCleanupv+0xa4>)
void dailyCleanup() {
   d4ef0:	b086      	sub	sp, #24
  sysStatus.verboseMode = false;
   d4ef2:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d4ef4:	f88d 3000 	strb.w	r3, [sp]
   d4ef8:	4b23      	ldr	r3, [pc, #140]	; (d4f88 <_Z12dailyCleanupv+0xa8>)
   d4efa:	781b      	ldrb	r3, [r3, #0]
   d4efc:	f7ff faf5 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4f00:	7125      	strb	r5, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f02:	f002 fdf1 	bl	d7ae8 <spark_cloud_flag_connected>
        if (!connected()) {
   d4f06:	b110      	cbz	r0, d4f0e <_Z12dailyCleanupv+0x2e>
        return spark_sync_time(NULL);
   d4f08:	4628      	mov	r0, r5
   d4f0a:	f002 fe0d 	bl	d7b28 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d4f0e:	2000      	movs	r0, #0
   d4f10:	f002 fbae 	bl	d7670 <hal_timer_millis>
   d4f14:	f04f 0a00 	mov.w	sl, #0
   d4f18:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d4f1a:	f247 582f 	movw	r8, #29999	; 0x752f
   d4f1e:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4f22:	2000      	movs	r0, #0
   d4f24:	f002 fba4 	bl	d7670 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4f28:	1b46      	subs	r6, r0, r5
   d4f2a:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d4f2e:	45b9      	cmp	r9, r7
   d4f30:	bf08      	it	eq
   d4f32:	45b0      	cmpeq	r8, r6
   d4f34:	d305      	bcc.n	d4f42 <_Z12dailyCleanupv+0x62>
  Particle.syncTime();                                                 // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                // Wait for up to 30 seconds for the SyncTime to complete
   d4f36:	f7ff f985 	bl	d4244 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4f3a:	b910      	cbnz	r0, d4f42 <_Z12dailyCleanupv+0x62>
            spark_process();
   d4f3c:	f002 fdc4 	bl	d7ac8 <spark_process>
        while (_while() && !_condition()) {
   d4f40:	e7ef      	b.n	d4f22 <_Z12dailyCleanupv+0x42>
   d4f42:	f7ff f97f 	bl	d4244 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {     // If Solar or if the battery is being discharged
   d4f46:	7963      	ldrb	r3, [r4, #5]
   d4f48:	b913      	cbnz	r3, d4f50 <_Z12dailyCleanupv+0x70>
   d4f4a:	68a3      	ldr	r3, [r4, #8]
   d4f4c:	2b46      	cmp	r3, #70	; 0x46
   d4f4e:	dc09      	bgt.n	d4f64 <_Z12dailyCleanupv+0x84>
    setLowPowerMode("1");
   d4f50:	490e      	ldr	r1, [pc, #56]	; (d4f8c <_Z12dailyCleanupv+0xac>)
   d4f52:	a802      	add	r0, sp, #8
   d4f54:	f005 f981 	bl	da25a <_ZN6StringC1EPKc>
   d4f58:	a802      	add	r0, sp, #8
   d4f5a:	f7ff fbb5 	bl	d46c8 <_Z15setLowPowerMode6String>
   d4f5e:	a802      	add	r0, sp, #8
   d4f60:	f005 f930 	bl	da1c4 <_ZN6StringD1Ev>
  }

  resetEverything();                                               // If so, we need to Zero the counts for the new day
   d4f64:	f7ff ff34 	bl	d4dd0 <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d4f68:	4b09      	ldr	r3, [pc, #36]	; (d4f90 <_Z12dailyCleanupv+0xb0>)
   d4f6a:	2201      	movs	r2, #1
   d4f6c:	701a      	strb	r2, [r3, #0]
   d4f6e:	b006      	add	sp, #24
   d4f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f74:	2003e405 	.word	0x2003e405
   d4f78:	2003e528 	.word	0x2003e528
   d4f7c:	000ddd58 	.word	0x000ddd58
   d4f80:	000ddd60 	.word	0x000ddd60
   d4f84:	2003e4e0 	.word	0x2003e4e0
   d4f88:	2003e404 	.word	0x2003e404
   d4f8c:	000ddb10 	.word	0x000ddb10
   d4f90:	2003e558 	.word	0x2003e558

000d4f94 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4f94:	b530      	push	{r4, r5, lr}
   d4f96:	b085      	sub	sp, #20
   d4f98:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4f9a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4f9c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4f9e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4fa0:	f002 fcf6 	bl	d7990 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4fa4:	b9b0      	cbnz	r0, d4fd4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4fa6:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4fa8:	b10c      	cbz	r4, d4fae <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4faa:	6923      	ldr	r3, [r4, #16]
   d4fac:	b923      	cbnz	r3, d4fb8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4fae:	4a0a      	ldr	r2, [pc, #40]	; (d4fd8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4fb0:	2100      	movs	r1, #0
   d4fb2:	200a      	movs	r0, #10
   d4fb4:	f002 fcc4 	bl	d7940 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4fb8:	2300      	movs	r3, #0
   d4fba:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4fbe:	230c      	movs	r3, #12
   d4fc0:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4fc4:	2304      	movs	r3, #4
   d4fc6:	9303      	str	r3, [sp, #12]
   d4fc8:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4fca:	6923      	ldr	r3, [r4, #16]
   d4fcc:	aa01      	add	r2, sp, #4
   d4fce:	2101      	movs	r1, #1
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	4798      	blx	r3
}
   d4fd4:	b005      	add	sp, #20
   d4fd6:	bd30      	pop	{r4, r5, pc}
   d4fd8:	000d7641 	.word	0x000d7641

000d4fdc <_Z16takeMeasurementsv>:
{
   d4fdc:	b530      	push	{r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4fde:	4b2d      	ldr	r3, [pc, #180]	; (d5094 <_Z16takeMeasurementsv+0xb8>)
   d4fe0:	2200      	movs	r2, #0
   d4fe2:	b08b      	sub	sp, #44	; 0x2c
   d4fe4:	6858      	ldr	r0, [r3, #4]
   d4fe6:	4611      	mov	r1, r2
   d4fe8:	f002 fde6 	bl	d7bb8 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4fec:	b108      	cbz	r0, d4ff2 <_Z16takeMeasurementsv+0x16>
   d4fee:	f7ff fc7d 	bl	d48ec <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d4ff2:	f7ff fcb9 	bl	d4968 <_Z14getTemperaturev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4ff6:	a902      	add	r1, sp, #8
   d4ff8:	2007      	movs	r0, #7
   d4ffa:	f7ff ffcb 	bl	d4f94 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
  sysStatus.batteryState = System.batteryState();                     // Call before isItSafeToCharge() as it may overwrite the context
   d4ffe:	4c26      	ldr	r4, [pc, #152]	; (d5098 <_Z16takeMeasurementsv+0xbc>)
   d5000:	4d26      	ldr	r5, [pc, #152]	; (d509c <_Z16takeMeasurementsv+0xc0>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d5002:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d5004:	bfa8      	it	ge
   d5006:	9802      	ldrge	r0, [sp, #8]
   d5008:	7320      	strb	r0, [r4, #12]
  if (!isItSafeToCharge()) current.alertCount++;                      // Increment the alert count
   d500a:	f7ff fc4f 	bl	d48ac <_Z16isItSafeToChargev>
   d500e:	b910      	cbnz	r0, d5016 <_Z16takeMeasurementsv+0x3a>
   d5010:	692b      	ldr	r3, [r5, #16]
   d5012:	3301      	adds	r3, #1
   d5014:	612b      	str	r3, [r5, #16]
   d5016:	a902      	add	r1, sp, #8
   d5018:	2003      	movs	r0, #3
   d501a:	f7ff ffbb 	bl	d4f94 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d501e:	2800      	cmp	r0, #0
   d5020:	d134      	bne.n	d508c <_Z16takeMeasurementsv+0xb0>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d5022:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d5026:	ee07 3a90 	vmov	s15, r3
   d502a:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d502e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d5032:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5036:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d5038:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d503c:	dc09      	bgt.n	d5052 <_Z16takeMeasurementsv+0x76>
   d503e:	7b23      	ldrb	r3, [r4, #12]
   d5040:	2b01      	cmp	r3, #1
   d5042:	d106      	bne.n	d5052 <_Z16takeMeasurementsv+0x76>
    System.setPowerConfiguration(SystemPowerConfiguration());         // Reset the PMIC
   d5044:	a802      	add	r0, sp, #8
   d5046:	f7ff f99b 	bl	d4380 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d504a:	2100      	movs	r1, #0
   d504c:	a802      	add	r0, sp, #8
   d504e:	f002 fd0d 	bl	d7a6c <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) current.minBatteryLevel = sysStatus.stateOfCharge; // Keep track of lowest value for the day
   d5052:	68a3      	ldr	r3, [r4, #8]
   d5054:	69ea      	ldr	r2, [r5, #28]
   d5056:	4293      	cmp	r3, r2
   d5058:	bfb8      	it	lt
   d505a:	61eb      	strlt	r3, [r5, #28]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d505c:	2b1d      	cmp	r3, #29
   d505e:	bfcc      	ite	gt
   d5060:	2300      	movgt	r3, #0
   d5062:	2301      	movle	r3, #1
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d5064:	2013      	movs	r0, #19
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d5066:	71e3      	strb	r3, [r4, #7]
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d5068:	f005 ff0d 	bl	dae86 <analogRead>
   d506c:	2364      	movs	r3, #100	; 0x64
   d506e:	9300      	str	r3, [sp, #0]
   d5070:	2300      	movs	r3, #0
   d5072:	4619      	mov	r1, r3
   d5074:	f640 628a 	movw	r2, #3722	; 0xe8a
   d5078:	f002 fe4e 	bl	d7d18 <_Z3mapiiiii>
  systemStatusWriteNeeded = true;
   d507c:	4a08      	ldr	r2, [pc, #32]	; (d50a0 <_Z16takeMeasurementsv+0xc4>)
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d507e:	6068      	str	r0, [r5, #4]
  systemStatusWriteNeeded = true;
   d5080:	2301      	movs	r3, #1
   d5082:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d5084:	4a07      	ldr	r2, [pc, #28]	; (d50a4 <_Z16takeMeasurementsv+0xc8>)
   d5086:	7013      	strb	r3, [r2, #0]
}
   d5088:	b00b      	add	sp, #44	; 0x2c
   d508a:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d508c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d5090:	e7cd      	b.n	d502e <_Z16takeMeasurementsv+0x52>
   d5092:	bf00      	nop
   d5094:	2003e59c 	.word	0x2003e59c
   d5098:	2003e528 	.word	0x2003e528
   d509c:	2003e460 	.word	0x2003e460
   d50a0:	2003e558 	.word	0x2003e558
   d50a4:	2003e480 	.word	0x2003e480

000d50a8 <loop>:
{
   d50a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d50ac:	4ca4      	ldr	r4, [pc, #656]	; (d5340 <loop+0x298>)
   d50ae:	4ea5      	ldr	r6, [pc, #660]	; (d5344 <loop+0x29c>)
   d50b0:	7823      	ldrb	r3, [r4, #0]
   d50b2:	4fa5      	ldr	r7, [pc, #660]	; (d5348 <loop+0x2a0>)
   d50b4:	3b01      	subs	r3, #1
{
   d50b6:	b097      	sub	sp, #92	; 0x5c
   d50b8:	2b08      	cmp	r3, #8
   d50ba:	f200 80af 	bhi.w	d521c <loop+0x174>
   d50be:	e8df f013 	tbh	[pc, r3, lsl #1]
   d50c2:	02d1      	.short	0x02d1
   d50c4:	01cb0009 	.word	0x01cb0009
   d50c8:	016d01f9 	.word	0x016d01f9
   d50cc:	02710247 	.word	0x02710247
   d50d0:	004500e7 	.word	0x004500e7
    if (state != oldState) publishStateTransition();
   d50d4:	4b9d      	ldr	r3, [pc, #628]	; (d534c <loop+0x2a4>)
   d50d6:	781b      	ldrb	r3, [r3, #0]
   d50d8:	2b02      	cmp	r3, #2
   d50da:	d001      	beq.n	d50e0 <loop+0x38>
   d50dc:	f7ff fe92 	bl	d4e04 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d50e0:	4d9b      	ldr	r5, [pc, #620]	; (d5350 <loop+0x2a8>)
   d50e2:	79ab      	ldrb	r3, [r5, #6]
   d50e4:	b16b      	cbz	r3, d5102 <loop+0x5a>
   d50e6:	f002 fab3 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
   d50ea:	4b9a      	ldr	r3, [pc, #616]	; (d5354 <loop+0x2ac>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	1ac0      	subs	r0, r0, r3
   d50f0:	4b99      	ldr	r3, [pc, #612]	; (d5358 <loop+0x2b0>)
   d50f2:	681b      	ldr	r3, [r3, #0]
   d50f4:	4298      	cmp	r0, r3
   d50f6:	d904      	bls.n	d5102 <loop+0x5a>
   d50f8:	4b98      	ldr	r3, [pc, #608]	; (d535c <loop+0x2b4>)
   d50fa:	689b      	ldr	r3, [r3, #8]
   d50fc:	b90b      	cbnz	r3, d5102 <loop+0x5a>
   d50fe:	2308      	movs	r3, #8
   d5100:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = MEASURING_STATE;                                                            // We want to report on the hour but not after bedtime
   d5102:	f005 fc47 	bl	da994 <_ZN9TimeClass4hourEv>
   d5106:	4b96      	ldr	r3, [pc, #600]	; (d5360 <loop+0x2b8>)
   d5108:	4680      	mov	r8, r0
   d510a:	2100      	movs	r1, #0
   d510c:	6818      	ldr	r0, [r3, #0]
   d510e:	f005 faa3 	bl	da658 <_ZN9TimeClass4hourEx>
   d5112:	4580      	cmp	r8, r0
   d5114:	bf1c      	itt	ne
   d5116:	2303      	movne	r3, #3
   d5118:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;                             // The park is closed - sleep
   d511a:	f005 fc3b 	bl	da994 <_ZN9TimeClass4hourEv>
   d511e:	7f6b      	ldrb	r3, [r5, #29]
   d5120:	4298      	cmp	r0, r3
   d5122:	db0d      	blt.n	d5140 <loop+0x98>
   d5124:	2309      	movs	r3, #9
   d5126:	7023      	strb	r3, [r4, #0]
    if (particleConnectionNeeded) state = CONNECTING_STATE;
   d5128:	4b8e      	ldr	r3, [pc, #568]	; (d5364 <loop+0x2bc>)
   d512a:	781b      	ldrb	r3, [r3, #0]
   d512c:	b10b      	cbz	r3, d5132 <loop+0x8a>
   d512e:	2305      	movs	r3, #5
   d5130:	7023      	strb	r3, [r4, #0]
    if (wateringTimerFlag) state = WATERING_STATE;                                                                                      // Most important - turn off water when done!
   d5132:	4b8d      	ldr	r3, [pc, #564]	; (d5368 <loop+0x2c0>)
   d5134:	781b      	ldrb	r3, [r3, #0]
   d5136:	2b00      	cmp	r3, #0
   d5138:	d070      	beq.n	d521c <loop+0x174>
    state = WATERING_STATE;
   d513a:	2304      	movs	r3, #4
   d513c:	7023      	strb	r3, [r4, #0]
    break;
   d513e:	e06d      	b.n	d521c <loop+0x174>
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;                             // The park is closed - sleep
   d5140:	f005 fc28 	bl	da994 <_ZN9TimeClass4hourEv>
   d5144:	7f2b      	ldrb	r3, [r5, #28]
   d5146:	4298      	cmp	r0, r3
   d5148:	dbec      	blt.n	d5124 <loop+0x7c>
   d514a:	e7ed      	b.n	d5128 <loop+0x80>
    if (state != oldState) publishStateTransition();
   d514c:	4b7f      	ldr	r3, [pc, #508]	; (d534c <loop+0x2a4>)
   d514e:	781b      	ldrb	r3, [r3, #0]
   d5150:	2b09      	cmp	r3, #9
   d5152:	d001      	beq.n	d5158 <loop+0xb0>
   d5154:	f7ff fe56 	bl	d4e04 <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5158:	4b7d      	ldr	r3, [pc, #500]	; (d5350 <loop+0x2a8>)
   d515a:	78da      	ldrb	r2, [r3, #3]
   d515c:	4698      	mov	r8, r3
   d515e:	b10a      	cbz	r2, d5164 <loop+0xbc>
   d5160:	f7ff fdf8 	bl	d4d54 <_Z22disconnectFromParticlev>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d5164:	2100      	movs	r1, #0
   d5166:	4881      	ldr	r0, [pc, #516]	; (d536c <loop+0x2c4>)
   d5168:	f001 f948 	bl	d63fc <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d516c:	f005 fc01 	bl	da972 <_ZN9TimeClass3nowEv>
   d5170:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d5174:	fb90 f3f5 	sdiv	r3, r0, r5
   d5178:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d517c:	4b7c      	ldr	r3, [pc, #496]	; (d5370 <loop+0x2c8>)
   d517e:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d5182:	7d1a      	ldrb	r2, [r3, #20]
   d5184:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d5188:	bfa8      	it	ge
   d518a:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d518e:	b10a      	cbz	r2, d5194 <loop+0xec>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5190:	2202      	movs	r2, #2
   d5192:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5194:	2200      	movs	r2, #0
   d5196:	2104      	movs	r1, #4
   d5198:	4875      	ldr	r0, [pc, #468]	; (d5370 <loop+0x2c8>)
   d519a:	f7ff f8fb 	bl	d4394 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d519e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d51a2:	4369      	muls	r1, r5
   d51a4:	f7ff f92a 	bl	d43fc <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d51a8:	4971      	ldr	r1, [pc, #452]	; (d5370 <loop+0x2c8>)
   d51aa:	a803      	add	r0, sp, #12
   d51ac:	f005 f968 	bl	da480 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d51b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d51b4:	486d      	ldr	r0, [pc, #436]	; (d536c <loop+0x2c4>)
   d51b6:	f001 f921 	bl	d63fc <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d51ba:	486e      	ldr	r0, [pc, #440]	; (d5374 <loop+0x2cc>)
   d51bc:	f003 fb1c 	bl	d87f8 <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d51c0:	486c      	ldr	r0, [pc, #432]	; (d5374 <loop+0x2cc>)
   d51c2:	f003 fb10 	bl	d87e6 <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d51c6:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d51c8:	b19b      	cbz	r3, d51f2 <loop+0x14a>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d51ca:	889a      	ldrh	r2, [r3, #4]
   d51cc:	2a01      	cmp	r2, #1
   d51ce:	d110      	bne.n	d51f2 <loop+0x14a>
    if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   d51d0:	899b      	ldrh	r3, [r3, #12]
   d51d2:	2b04      	cmp	r3, #4
   d51d4:	d10d      	bne.n	d51f2 <loop+0x14a>
      setLowPowerMode("0");
   d51d6:	4968      	ldr	r1, [pc, #416]	; (d5378 <loop+0x2d0>)
   d51d8:	a806      	add	r0, sp, #24
   d51da:	f005 f83e 	bl	da25a <_ZN6StringC1EPKc>
   d51de:	a806      	add	r0, sp, #24
   d51e0:	f7ff fa72 	bl	d46c8 <_Z15setLowPowerMode6String>
   d51e4:	a806      	add	r0, sp, #24
   d51e6:	f004 ffed 	bl	da1c4 <_ZN6StringD1Ev>
      sysStatus.openTime = 0;
   d51ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d51ee:	f8a8 301c 	strh.w	r3, [r8, #28]
    if (Time.hour() < sysStatus.closeTime && Time.hour() >= sysStatus.openTime) { // We might wake up and find it is opening time.  Park is open let's get ready for the day
   d51f2:	f005 fbcf 	bl	da994 <_ZN9TimeClass4hourEv>
   d51f6:	f898 301d 	ldrb.w	r3, [r8, #29]
   d51fa:	4298      	cmp	r0, r3
   d51fc:	da08      	bge.n	d5210 <loop+0x168>
   d51fe:	f005 fbc9 	bl	da994 <_ZN9TimeClass4hourEv>
   d5202:	f898 301c 	ldrb.w	r3, [r8, #28]
   d5206:	4298      	cmp	r0, r3
   d5208:	db02      	blt.n	d5210 <loop+0x168>
      stayAwake = stayAwakeLong;                                       // Keeps Boron awake after deep sleep - may not be needed
   d520a:	4b53      	ldr	r3, [pc, #332]	; (d5358 <loop+0x2b0>)
   d520c:	4a5b      	ldr	r2, [pc, #364]	; (d537c <loop+0x2d4>)
   d520e:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d5210:	2302      	movs	r3, #2
   d5212:	7023      	strb	r3, [r4, #0]
        if (wakeupSource_) {
   d5214:	9803      	ldr	r0, [sp, #12]
   d5216:	b108      	cbz	r0, d521c <loop+0x174>
            free(wakeupSource_);
   d5218:	f002 fd1e 	bl	d7c58 <free>
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d521c:	4853      	ldr	r0, [pc, #332]	; (d536c <loop+0x2c4>)
   d521e:	f001 fce5 	bl	d6bec <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d5222:	7833      	ldrb	r3, [r6, #0]
   d5224:	b13b      	cbz	r3, d5236 <loop+0x18e>
   d5226:	2330      	movs	r3, #48	; 0x30
   d5228:	4a49      	ldr	r2, [pc, #292]	; (d5350 <loop+0x2a8>)
   d522a:	4855      	ldr	r0, [pc, #340]	; (d5380 <loop+0x2d8>)
   d522c:	2101      	movs	r1, #1
   d522e:	f001 fdd8 	bl	d6de2 <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
   d5232:	2300      	movs	r3, #0
   d5234:	7033      	strb	r3, [r6, #0]
  if (currentCountsWriteNeeded) {
   d5236:	783b      	ldrb	r3, [r7, #0]
   d5238:	b13b      	cbz	r3, d524a <loop+0x1a2>
   d523a:	2320      	movs	r3, #32
   d523c:	4a47      	ldr	r2, [pc, #284]	; (d535c <loop+0x2b4>)
   d523e:	4850      	ldr	r0, [pc, #320]	; (d5380 <loop+0x2d8>)
   d5240:	2150      	movs	r1, #80	; 0x50
   d5242:	f001 fdce 	bl	d6de2 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d5246:	2300      	movs	r3, #0
   d5248:	703b      	strb	r3, [r7, #0]
  if (outOfMemory >= 0) {                                             // In this function we are going to reset the system if there is an out of memory error
   d524a:	4b4e      	ldr	r3, [pc, #312]	; (d5384 <loop+0x2dc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	2b00      	cmp	r3, #0
   d5250:	db1b      	blt.n	d528a <loop+0x1e2>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d5252:	4a4d      	ldr	r2, [pc, #308]	; (d5388 <loop+0x2e0>)
   d5254:	2140      	movs	r1, #64	; 0x40
   d5256:	a806      	add	r0, sp, #24
   d5258:	f002 fd16 	bl	d7c88 <snprintf>
    Log.info(message);
   d525c:	a906      	add	r1, sp, #24
   d525e:	484b      	ldr	r0, [pc, #300]	; (d538c <loop+0x2e4>)
   d5260:	f7ff f92c 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d5264:	2064      	movs	r0, #100	; 0x64
   d5266:	f002 fd63 	bl	d7d30 <delay>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d526a:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);                   // Publish to the console - this is important so we will not filter on verboseMod
   d526c:	f88d 3000 	strb.w	r3, [sp]
   d5270:	4b47      	ldr	r3, [pc, #284]	; (d5390 <loop+0x2e8>)
   d5272:	4948      	ldr	r1, [pc, #288]	; (d5394 <loop+0x2ec>)
   d5274:	781b      	ldrb	r3, [r3, #0]
   d5276:	4848      	ldr	r0, [pc, #288]	; (d5398 <loop+0x2f0>)
   d5278:	aa06      	add	r2, sp, #24
   d527a:	f7ff f936 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d527e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5282:	f002 fd55 	bl	d7d30 <delay>
    System.reset();                                                   // An out of memory condition occurred - reset device.
   d5286:	f005 f8f7 	bl	da478 <_ZN11SystemClass5resetEv>
}
   d528a:	b017      	add	sp, #92	; 0x5c
   d528c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (state != oldState) publishStateTransition();
   d5290:	4b2e      	ldr	r3, [pc, #184]	; (d534c <loop+0x2a4>)
   d5292:	781b      	ldrb	r3, [r3, #0]
   d5294:	2b08      	cmp	r3, #8
   d5296:	d001      	beq.n	d529c <loop+0x1f4>
   d5298:	f7ff fdb4 	bl	d4e04 <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d529c:	4b2c      	ldr	r3, [pc, #176]	; (d5350 <loop+0x2a8>)
   d529e:	78db      	ldrb	r3, [r3, #3]
   d52a0:	b10b      	cbz	r3, d52a6 <loop+0x1fe>
   d52a2:	f7ff fd57 	bl	d4d54 <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                 // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d52a6:	4b2c      	ldr	r3, [pc, #176]	; (d5358 <loop+0x2b0>)
    bool stopWDT() { return setWDT(0); };
   d52a8:	4830      	ldr	r0, [pc, #192]	; (d536c <loop+0x2c4>)
   d52aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52ae:	2100      	movs	r1, #0
   d52b0:	601a      	str	r2, [r3, #0]
   d52b2:	f001 f8a3 	bl	d63fc <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d52b6:	f005 fb5c 	bl	da972 <_ZN9TimeClass3nowEv>
   d52ba:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d52be:	fb90 f3f5 	sdiv	r3, r0, r5
   d52c2:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d52c6:	4b2a      	ldr	r3, [pc, #168]	; (d5370 <loop+0x2c8>)
   d52c8:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d52cc:	7d1a      	ldrb	r2, [r3, #20]
   d52ce:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d52d2:	bfa8      	it	ge
   d52d4:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d52d8:	b10a      	cbz	r2, d52de <loop+0x236>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d52da:	2202      	movs	r2, #2
   d52dc:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d52de:	2200      	movs	r2, #0
   d52e0:	2104      	movs	r1, #4
   d52e2:	4823      	ldr	r0, [pc, #140]	; (d5370 <loop+0x2c8>)
   d52e4:	f7ff f856 	bl	d4394 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d52e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d52ec:	4369      	muls	r1, r5
   d52ee:	f7ff f885 	bl	d43fc <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d52f2:	491f      	ldr	r1, [pc, #124]	; (d5370 <loop+0x2c8>)
   d52f4:	a803      	add	r0, sp, #12
   d52f6:	f005 f8c3 	bl	da480 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d52fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d52fe:	481b      	ldr	r0, [pc, #108]	; (d536c <loop+0x2c4>)
   d5300:	f001 f87c 	bl	d63fc <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d5304:	481b      	ldr	r0, [pc, #108]	; (d5374 <loop+0x2cc>)
   d5306:	f003 fa77 	bl	d87f8 <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d530a:	481a      	ldr	r0, [pc, #104]	; (d5374 <loop+0x2cc>)
   d530c:	f003 fa6b 	bl	d87e6 <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5310:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5312:	2b00      	cmp	r3, #0
   d5314:	f43f af7c 	beq.w	d5210 <loop+0x168>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5318:	889a      	ldrh	r2, [r3, #4]
   d531a:	2a01      	cmp	r2, #1
   d531c:	f47f af78 	bne.w	d5210 <loop+0x168>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d5320:	899b      	ldrh	r3, [r3, #12]
   d5322:	2b04      	cmp	r3, #4
   d5324:	f47f af74 	bne.w	d5210 <loop+0x168>
   d5328:	4913      	ldr	r1, [pc, #76]	; (d5378 <loop+0x2d0>)
   d532a:	a806      	add	r0, sp, #24
   d532c:	f004 ff95 	bl	da25a <_ZN6StringC1EPKc>
   d5330:	a806      	add	r0, sp, #24
   d5332:	f7ff f9c9 	bl	d46c8 <_Z15setLowPowerMode6String>
   d5336:	a806      	add	r0, sp, #24
   d5338:	f004 ff44 	bl	da1c4 <_ZN6StringD1Ev>
   d533c:	e768      	b.n	d5210 <loop+0x168>
   d533e:	bf00      	nop
   d5340:	2003e51c 	.word	0x2003e51c
   d5344:	2003e558 	.word	0x2003e558
   d5348:	2003e480 	.word	0x2003e480
   d534c:	2003e4dc 	.word	0x2003e4dc
   d5350:	2003e528 	.word	0x2003e528
   d5354:	2003e524 	.word	0x2003e524
   d5358:	2003e520 	.word	0x2003e520
   d535c:	2003e460 	.word	0x2003e460
   d5360:	2003e4a4 	.word	0x2003e4a4
   d5364:	2003e4dd 	.word	0x2003e4dd
   d5368:	2003e580 	.word	0x2003e580
   d536c:	2003e40c 	.word	0x2003e40c
   d5370:	2003e448 	.word	0x2003e448
   d5374:	2003e49c 	.word	0x2003e49c
   d5378:	000ddd20 	.word	0x000ddd20
   d537c:	00015f90 	.word	0x00015f90
   d5380:	2003e48c 	.word	0x2003e48c
   d5384:	2003e100 	.word	0x2003e100
   d5388:	000ddec0 	.word	0x000ddec0
   d538c:	2003e5e0 	.word	0x2003e5e0
   d5390:	2003e404 	.word	0x2003e404
   d5394:	000ddedf 	.word	0x000ddedf
   d5398:	2003e4e0 	.word	0x2003e4e0
    if (state != oldState) {
   d539c:	4b95      	ldr	r3, [pc, #596]	; (d55f4 <loop+0x54c>)
   d539e:	781b      	ldrb	r3, [r3, #0]
   d53a0:	2b05      	cmp	r3, #5
   d53a2:	d013      	beq.n	d53cc <loop+0x324>
      if (oldState == REPORTING_STATE) returnToReporting = true;
   d53a4:	1f9a      	subs	r2, r3, #6
   d53a6:	4253      	negs	r3, r2
   d53a8:	4153      	adcs	r3, r2
   d53aa:	4a93      	ldr	r2, [pc, #588]	; (d55f8 <loop+0x550>)
   d53ac:	7013      	strb	r3, [r2, #0]
      publishStateTransition();
   d53ae:	f7ff fd29 	bl	d4e04 <_Z22publishStateTransitionv>
      connectionStartTime = Time.now();                 // Start the clock first time we enter the state
   d53b2:	f005 fade 	bl	da972 <_ZN9TimeClass3nowEv>
   d53b6:	4b91      	ldr	r3, [pc, #580]	; (d55fc <loop+0x554>)
   d53b8:	6018      	str	r0, [r3, #0]
        network_on(*this, 0, 0, NULL);
   d53ba:	4891      	ldr	r0, [pc, #580]	; (d5600 <loop+0x558>)
   d53bc:	2300      	movs	r3, #0
   d53be:	6840      	ldr	r0, [r0, #4]
   d53c0:	461a      	mov	r2, r3
   d53c2:	4619      	mov	r1, r3
   d53c4:	f002 fc00 	bl	d7bc8 <network_on>
        spark_cloud_flag_connect();
   d53c8:	f002 fb86 	bl	d7ad8 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d53cc:	f002 fb8c 	bl	d7ae8 <spark_cloud_flag_connected>
   d53d0:	4d8c      	ldr	r5, [pc, #560]	; (d5604 <loop+0x55c>)
   d53d2:	f8df 8274 	ldr.w	r8, [pc, #628]	; d5648 <loop+0x5a0>
    if (Particle.connected()) {
   d53d6:	4681      	mov	r9, r0
   d53d8:	2800      	cmp	r0, #0
   d53da:	d04a      	beq.n	d5472 <loop+0x3ca>
      particleConnectionNeeded = false;                               // Connected so we don't need this flag
   d53dc:	2300      	movs	r3, #0
   d53de:	f888 3000 	strb.w	r3, [r8]
      sysStatus.connectedStatus = true;
   d53e2:	2301      	movs	r3, #1
   d53e4:	70eb      	strb	r3, [r5, #3]
      sysStatus.lastConnection = Time.now();                          // This is the last time we attempted to connect
   d53e6:	f005 fac4 	bl	da972 <_ZN9TimeClass3nowEv>
   d53ea:	6268      	str	r0, [r5, #36]	; 0x24
    if (!particleConnectionNeeded) {                                  // Whether the connection was successful or not, we will collect and publish metrics
   d53ec:	f898 3000 	ldrb.w	r3, [r8]
   d53f0:	2b00      	cmp	r3, #0
   d53f2:	d131      	bne.n	d5458 <loop+0x3b0>
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d53f4:	f005 fabd 	bl	da972 <_ZN9TimeClass3nowEv>
   d53f8:	4b80      	ldr	r3, [pc, #512]	; (d55fc <loop+0x554>)
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d53fa:	4a83      	ldr	r2, [pc, #524]	; (d5608 <loop+0x560>)
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d53fc:	681b      	ldr	r3, [r3, #0]
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d53fe:	8b11      	ldrh	r1, [r2, #24]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d5400:	1ac0      	subs	r0, r0, r3
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d5402:	4b82      	ldr	r3, [pc, #520]	; (d560c <loop+0x564>)
   d5404:	681b      	ldr	r3, [r3, #0]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d5406:	b280      	uxth	r0, r0
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d5408:	4298      	cmp	r0, r3
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d540a:	8528      	strh	r0, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d540c:	bf88      	it	hi
   d540e:	852b      	strhhi	r3, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d5410:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   d5412:	4299      	cmp	r1, r3
   d5414:	bf38      	it	cc
   d5416:	8313      	strhcc	r3, [r2, #24]
      snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d5418:	2120      	movs	r1, #32
   d541a:	4a7d      	ldr	r2, [pc, #500]	; (d5610 <loop+0x568>)
   d541c:	a806      	add	r0, sp, #24
   d541e:	f002 fc33 	bl	d7c88 <snprintf>
      Log.info(connectionStr);
   d5422:	487c      	ldr	r0, [pc, #496]	; (d5614 <loop+0x56c>)
   d5424:	a906      	add	r1, sp, #24
   d5426:	f7ff f849 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
      if (sysStatus.verboseMode) publishQueue.publish("Cellular",connectionStr,PRIVATE);
   d542a:	792b      	ldrb	r3, [r5, #4]
   d542c:	b14b      	cbz	r3, d5442 <loop+0x39a>
   d542e:	2300      	movs	r3, #0
   d5430:	f88d 3000 	strb.w	r3, [sp]
   d5434:	4b78      	ldr	r3, [pc, #480]	; (d5618 <loop+0x570>)
   d5436:	4979      	ldr	r1, [pc, #484]	; (d561c <loop+0x574>)
   d5438:	781b      	ldrb	r3, [r3, #0]
   d543a:	4879      	ldr	r0, [pc, #484]	; (d5620 <loop+0x578>)
   d543c:	aa06      	add	r2, sp, #24
   d543e:	f7ff f854 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      systemStatusWriteNeeded = true;
   d5442:	2301      	movs	r3, #1
   d5444:	7033      	strb	r3, [r6, #0]
      currentCountsWriteNeeded = true;
   d5446:	703b      	strb	r3, [r7, #0]
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d5448:	78eb      	ldrb	r3, [r5, #3]
   d544a:	2b00      	cmp	r3, #0
   d544c:	d030      	beq.n	d54b0 <loop+0x408>
   d544e:	4b6a      	ldr	r3, [pc, #424]	; (d55f8 <loop+0x550>)
   d5450:	781b      	ldrb	r3, [r3, #0]
   d5452:	b36b      	cbz	r3, d54b0 <loop+0x408>
   d5454:	2306      	movs	r3, #6
      else state = IDLE_STATE;                                             // We are connected so, we can go to the IDLE state
   d5456:	7023      	strb	r3, [r4, #0]
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5458:	4b6a      	ldr	r3, [pc, #424]	; (d5604 <loop+0x55c>)
   d545a:	791b      	ldrb	r3, [r3, #4]
   d545c:	b133      	cbz	r3, d546c <loop+0x3c4>
   d545e:	4b65      	ldr	r3, [pc, #404]	; (d55f4 <loop+0x54c>)
   d5460:	7822      	ldrb	r2, [r4, #0]
   d5462:	781b      	ldrb	r3, [r3, #0]
   d5464:	429a      	cmp	r2, r3
   d5466:	d001      	beq.n	d546c <loop+0x3c4>
   d5468:	f7ff fccc 	bl	d4e04 <_Z22publishStateTransitionv>
    takeMeasurements();
   d546c:	f7ff fdb6 	bl	d4fdc <_Z16takeMeasurementsv>
   d5470:	e663      	b.n	d513a <loop+0x92>
    else if ((Time.now() - connectionStartTime) > connectMaxTimeSec) {
   d5472:	f005 fa7e 	bl	da972 <_ZN9TimeClass3nowEv>
   d5476:	4b61      	ldr	r3, [pc, #388]	; (d55fc <loop+0x554>)
   d5478:	4a64      	ldr	r2, [pc, #400]	; (d560c <loop+0x564>)
   d547a:	681b      	ldr	r3, [r3, #0]
   d547c:	6812      	ldr	r2, [r2, #0]
   d547e:	1ac3      	subs	r3, r0, r3
   d5480:	4293      	cmp	r3, r2
   d5482:	d9b3      	bls.n	d53ec <loop+0x344>
      particleConnectionNeeded = false;                               // Timed out so we will give up until the next hour
   d5484:	f888 9000 	strb.w	r9, [r8]
      if ((Time.now() - sysStatus.lastConnection) > 7200) {             // Only sends to ERROR_STATE if it has been over 2 hours
   d5488:	f005 fa73 	bl	da972 <_ZN9TimeClass3nowEv>
   d548c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d548e:	1ac0      	subs	r0, r0, r3
   d5490:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5494:	d905      	bls.n	d54a2 <loop+0x3fa>
        state = ERROR_STATE;     
   d5496:	2301      	movs	r3, #1
   d5498:	7023      	strb	r3, [r4, #0]
   d549a:	f002 f8d9 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   d549e:	4b61      	ldr	r3, [pc, #388]	; (d5624 <loop+0x57c>)
   d54a0:	6018      	str	r0, [r3, #0]
      sysStatus.connectedStatus = false;
   d54a2:	2300      	movs	r3, #0
      Log.info("cloud connection unsuccessful");
   d54a4:	4960      	ldr	r1, [pc, #384]	; (d5628 <loop+0x580>)
   d54a6:	485b      	ldr	r0, [pc, #364]	; (d5614 <loop+0x56c>)
      sysStatus.connectedStatus = false;
   d54a8:	70eb      	strb	r3, [r5, #3]
      Log.info("cloud connection unsuccessful");
   d54aa:	f7ff f807 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
   d54ae:	e79d      	b.n	d53ec <loop+0x344>
      else state = IDLE_STATE;                                             // We are connected so, we can go to the IDLE state
   d54b0:	2302      	movs	r3, #2
   d54b2:	e7d0      	b.n	d5456 <loop+0x3ae>
    if (wateringTimerFlag) {                                              // Already watering - time to turn off the tap
   d54b4:	4d5d      	ldr	r5, [pc, #372]	; (d562c <loop+0x584>)
   d54b6:	f8df 9160 	ldr.w	r9, [pc, #352]	; d5618 <loop+0x570>
   d54ba:	782b      	ldrb	r3, [r5, #0]
   d54bc:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   d54c0:	b173      	cbz	r3, d54e0 <loop+0x438>
   d54c2:	f04f 0800 	mov.w	r8, #0
      publishQueue.publish("Watering","Done with watering cycle",PRIVATE);
   d54c6:	f88d 8000 	strb.w	r8, [sp]
   d54ca:	f899 3000 	ldrb.w	r3, [r9]
   d54ce:	4a58      	ldr	r2, [pc, #352]	; (d5630 <loop+0x588>)
   d54d0:	4958      	ldr	r1, [pc, #352]	; (d5634 <loop+0x58c>)
   d54d2:	4853      	ldr	r0, [pc, #332]	; (d5620 <loop+0x578>)
   d54d4:	f7ff f809 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      wateringTimerFlag = false;
   d54d8:	f885 8000 	strb.w	r8, [r5]
    state = REPORTING_STATE;
   d54dc:	2306      	movs	r3, #6
   d54de:	e62d      	b.n	d513c <loop+0x94>
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
   d54e0:	f005 fa58 	bl	da994 <_ZN9TimeClass4hourEv>
   d54e4:	2808      	cmp	r0, #8
   d54e6:	d10a      	bne.n	d54fe <loop+0x456>
    else if (sysStatus.stateOfCharge < 50) {
   d54e8:	4946      	ldr	r1, [pc, #280]	; (d5604 <loop+0x55c>)
   d54ea:	f899 3000 	ldrb.w	r3, [r9]
   d54ee:	688a      	ldr	r2, [r1, #8]
   d54f0:	2a31      	cmp	r2, #49	; 0x31
   d54f2:	dc16      	bgt.n	d5522 <loop+0x47a>
   d54f4:	2200      	movs	r2, #0
      publishQueue.publish("Watering","Watering Needed but battery too low",PRIVATE);
   d54f6:	f88d 2000 	strb.w	r2, [sp]
   d54fa:	4a4f      	ldr	r2, [pc, #316]	; (d5638 <loop+0x590>)
   d54fc:	e00c      	b.n	d5518 <loop+0x470>
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
   d54fe:	f005 fa49 	bl	da994 <_ZN9TimeClass4hourEv>
   d5502:	280c      	cmp	r0, #12
   d5504:	d0f0      	beq.n	d54e8 <loop+0x440>
   d5506:	f005 fa45 	bl	da994 <_ZN9TimeClass4hourEv>
   d550a:	2811      	cmp	r0, #17
   d550c:	d0ec      	beq.n	d54e8 <loop+0x440>
      publishQueue.publish("Watering","Not time to water",PRIVATE);
   d550e:	f88d 8000 	strb.w	r8, [sp]
   d5512:	f899 3000 	ldrb.w	r3, [r9]
   d5516:	4a49      	ldr	r2, [pc, #292]	; (d563c <loop+0x594>)
      publishQueue.publish("Watering","Watering not needed",PRIVATE);
   d5518:	4946      	ldr	r1, [pc, #280]	; (d5634 <loop+0x58c>)
   d551a:	4841      	ldr	r0, [pc, #260]	; (d5620 <loop+0x578>)
   d551c:	f7fe ffe5 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5520:	e7dc      	b.n	d54dc <loop+0x434>
    else if (current.soilMoisture < sysStatus.wateringThresholdPct && !current.solenoidState) {  // Water if dry and if we are not already watering
   d5522:	4a39      	ldr	r2, [pc, #228]	; (d5608 <loop+0x560>)
   d5524:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
   d5528:	edd2 7a01 	vldr	s15, [r2, #4]
   d552c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5530:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5538:	d505      	bpl.n	d5546 <loop+0x49e>
   d553a:	6892      	ldr	r2, [r2, #8]
   d553c:	b91a      	cbnz	r2, d5546 <loop+0x49e>
      publishQueue.publish("Watering","Watering needed - starting watering cycle",PRIVATE);
   d553e:	f88d 2000 	strb.w	r2, [sp]
   d5542:	4a3f      	ldr	r2, [pc, #252]	; (d5640 <loop+0x598>)
   d5544:	e7e8      	b.n	d5518 <loop+0x470>
   d5546:	2200      	movs	r2, #0
      publishQueue.publish("Watering","Watering not needed",PRIVATE);
   d5548:	f88d 2000 	strb.w	r2, [sp]
   d554c:	4a3d      	ldr	r2, [pc, #244]	; (d5644 <loop+0x59c>)
   d554e:	e7e3      	b.n	d5518 <loop+0x470>
    if (state != oldState) publishStateTransition();
   d5550:	4b28      	ldr	r3, [pc, #160]	; (d55f4 <loop+0x54c>)
   d5552:	781b      	ldrb	r3, [r3, #0]
   d5554:	2b06      	cmp	r3, #6
   d5556:	d001      	beq.n	d555c <loop+0x4b4>
   d5558:	f7ff fc54 	bl	d4e04 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) {
   d555c:	4d29      	ldr	r5, [pc, #164]	; (d5604 <loop+0x55c>)
   d555e:	78eb      	ldrb	r3, [r5, #3]
   d5560:	b923      	cbnz	r3, d556c <loop+0x4c4>
      particleConnectionNeeded = true;                                   // Go to connect state to connect and will return from there
   d5562:	4b39      	ldr	r3, [pc, #228]	; (d5648 <loop+0x5a0>)
   d5564:	2201      	movs	r2, #1
   d5566:	701a      	strb	r2, [r3, #0]
      state = CONNECTING_STATE;                                          // Go straight to the connecting state
   d5568:	2305      	movs	r3, #5
   d556a:	e5e7      	b.n	d513c <loop+0x94>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house and publish to Google Sheets
   d556c:	f005 fa12 	bl	da994 <_ZN9TimeClass4hourEv>
   d5570:	7f2b      	ldrb	r3, [r5, #28]
   d5572:	4298      	cmp	r0, r3
   d5574:	d113      	bne.n	d559e <loop+0x4f6>
   d5576:	f7ff fcb3 	bl	d4ee0 <_Z12dailyCleanupv>
      if (Time.hour() == sysStatus.openTime && sysStatus.openTime==0) sendEvent();    // Need this so we can get 24 hour reporting for non-sleeping devices
   d557a:	f005 fa0b 	bl	da994 <_ZN9TimeClass4hourEv>
   d557e:	7f2b      	ldrb	r3, [r5, #28]
   d5580:	4298      	cmp	r0, r3
   d5582:	d102      	bne.n	d558a <loop+0x4e2>
   d5584:	b908      	cbnz	r0, d558a <loop+0x4e2>
   d5586:	f7ff f94f 	bl	d4828 <_Z9sendEventv>
   d558a:	f002 f861 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();
   d558e:	4b2f      	ldr	r3, [pc, #188]	; (d564c <loop+0x5a4>)
   d5590:	6018      	str	r0, [r3, #0]
      lastReportedTime = Time.now();
   d5592:	f005 f9ee 	bl	da972 <_ZN9TimeClass3nowEv>
   d5596:	4b2e      	ldr	r3, [pc, #184]	; (d5650 <loop+0x5a8>)
   d5598:	6018      	str	r0, [r3, #0]
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d559a:	2307      	movs	r3, #7
   d559c:	e5ce      	b.n	d513c <loop+0x94>
      else sendEvent();                                               // Send data to Ubidots but not at opening time as there is nothing to publish
   d559e:	f7ff f943 	bl	d4828 <_Z9sendEventv>
   d55a2:	e7ea      	b.n	d557a <loop+0x4d2>
    if (state != oldState) publishStateTransition();
   d55a4:	4b13      	ldr	r3, [pc, #76]	; (d55f4 <loop+0x54c>)
   d55a6:	781b      	ldrb	r3, [r3, #0]
   d55a8:	2b07      	cmp	r3, #7
   d55aa:	d001      	beq.n	d55b0 <loop+0x508>
   d55ac:	f7ff fc2a 	bl	d4e04 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   d55b0:	4b28      	ldr	r3, [pc, #160]	; (d5654 <loop+0x5ac>)
   d55b2:	781d      	ldrb	r5, [r3, #0]
   d55b4:	b96d      	cbnz	r5, d55d2 <loop+0x52a>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d55b6:	4b28      	ldr	r3, [pc, #160]	; (d5658 <loop+0x5b0>)
   d55b8:	4a28      	ldr	r2, [pc, #160]	; (d565c <loop+0x5b4>)
   d55ba:	601a      	str	r2, [r3, #0]
   d55bc:	f002 f848 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d55c0:	4b27      	ldr	r3, [pc, #156]	; (d5660 <loop+0x5b8>)
   d55c2:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d55c4:	2302      	movs	r3, #2
   d55c6:	7023      	strb	r3, [r4, #0]
      current.alertCount = 0; // Zero out the counts until next reporting period
   d55c8:	4b0f      	ldr	r3, [pc, #60]	; (d5608 <loop+0x560>)
   d55ca:	611d      	str	r5, [r3, #16]
      currentCountsWriteNeeded=true;
   d55cc:	2301      	movs	r3, #1
   d55ce:	703b      	strb	r3, [r7, #0]
   d55d0:	e624      	b.n	d521c <loop+0x174>
   d55d2:	f002 f83d 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d55d6:	4b1d      	ldr	r3, [pc, #116]	; (d564c <loop+0x5a4>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	1ac0      	subs	r0, r0, r3
   d55dc:	f247 5330 	movw	r3, #30000	; 0x7530
   d55e0:	4298      	cmp	r0, r3
   d55e2:	f67f ae1b 	bls.w	d521c <loop+0x174>
   d55e6:	f002 f833 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d55ea:	4b0e      	ldr	r3, [pc, #56]	; (d5624 <loop+0x57c>)
   d55ec:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d55ee:	2301      	movs	r3, #1
   d55f0:	e5a4      	b.n	d513c <loop+0x94>
   d55f2:	bf00      	nop
   d55f4:	2003e4dc 	.word	0x2003e4dc
   d55f8:	2003e406 	.word	0x2003e406
   d55fc:	2003e408 	.word	0x2003e408
   d5600:	2003e59c 	.word	0x2003e59c
   d5604:	2003e528 	.word	0x2003e528
   d5608:	2003e460 	.word	0x2003e460
   d560c:	2003e0ec 	.word	0x2003e0ec
   d5610:	000ddd8c 	.word	0x000ddd8c
   d5614:	2003e5e0 	.word	0x2003e5e0
   d5618:	2003e404 	.word	0x2003e404
   d561c:	000ddda1 	.word	0x000ddda1
   d5620:	2003e4e0 	.word	0x2003e4e0
   d5624:	2003e518 	.word	0x2003e518
   d5628:	000ddd6e 	.word	0x000ddd6e
   d562c:	2003e580 	.word	0x2003e580
   d5630:	000dddaa 	.word	0x000dddaa
   d5634:	000dddc3 	.word	0x000dddc3
   d5638:	000dddde 	.word	0x000dddde
   d563c:	000dddcc 	.word	0x000dddcc
   d5640:	000dde02 	.word	0x000dde02
   d5644:	000dde2c 	.word	0x000dde2c
   d5648:	2003e4dd 	.word	0x2003e4dd
   d564c:	2003e584 	.word	0x2003e584
   d5650:	2003e4a4 	.word	0x2003e4a4
   d5654:	2003e48b 	.word	0x2003e48b
   d5658:	2003e520 	.word	0x2003e520
   d565c:	00015f90 	.word	0x00015f90
   d5660:	2003e524 	.word	0x2003e524
    if (state != oldState) publishStateTransition();
   d5664:	4b3b      	ldr	r3, [pc, #236]	; (d5754 <loop+0x6ac>)
   d5666:	781b      	ldrb	r3, [r3, #0]
   d5668:	2b01      	cmp	r3, #1
   d566a:	d001      	beq.n	d5670 <loop+0x5c8>
   d566c:	f7ff fbca 	bl	d4e04 <_Z22publishStateTransitionv>
   d5670:	f001 ffee 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5674:	4b38      	ldr	r3, [pc, #224]	; (d5758 <loop+0x6b0>)
   d5676:	681b      	ldr	r3, [r3, #0]
   d5678:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d567c:	3330      	adds	r3, #48	; 0x30
   d567e:	4283      	cmp	r3, r0
   d5680:	f4bf adcc 	bcs.w	d521c <loop+0x174>
      if ((Time.now() - sysStatus.lastConnection) > 7200) {         // It is been over two hours since we last connected to the cloud - time for a reset
   d5684:	4c35      	ldr	r4, [pc, #212]	; (d575c <loop+0x6b4>)
   d5686:	f005 f974 	bl	da972 <_ZN9TimeClass3nowEv>
   d568a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d568c:	1ac0      	subs	r0, r0, r3
   d568e:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5692:	d910      	bls.n	d56b6 <loop+0x60e>
   d5694:	2330      	movs	r3, #48	; 0x30
   d5696:	4622      	mov	r2, r4
   d5698:	2101      	movs	r1, #1
   d569a:	4831      	ldr	r0, [pc, #196]	; (d5760 <loop+0x6b8>)
   d569c:	f001 fba1 	bl	d6de2 <_ZN6MB85RC9writeDataEjPKhj>
        Log.info("failed to connect to cloud, doing deep reset");
   d56a0:	4930      	ldr	r1, [pc, #192]	; (d5764 <loop+0x6bc>)
   d56a2:	4831      	ldr	r0, [pc, #196]	; (d5768 <loop+0x6c0>)
   d56a4:	f7fe ff0a 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
        delay(100);
   d56a8:	2064      	movs	r0, #100	; 0x64
   d56aa:	f002 fb41 	bl	d7d30 <delay>
        ab1805.deepPowerDown();                                       // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d56ae:	482f      	ldr	r0, [pc, #188]	; (d576c <loop+0x6c4>)
   d56b0:	211e      	movs	r1, #30
   d56b2:	f000 fffd 	bl	d66b0 <_ZN6AB180513deepPowerDownEi>
      if (sysStatus.resetCount <= 3) {                                // First try simple reset
   d56b6:	6923      	ldr	r3, [r4, #16]
   d56b8:	2b03      	cmp	r3, #3
   d56ba:	dc13      	bgt.n	d56e4 <loop+0x63c>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d56bc:	78e3      	ldrb	r3, [r4, #3]
   d56be:	b153      	cbz	r3, d56d6 <loop+0x62e>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d56c0:	4b2b      	ldr	r3, [pc, #172]	; (d5770 <loop+0x6c8>)
   d56c2:	4a2c      	ldr	r2, [pc, #176]	; (d5774 <loop+0x6cc>)
   d56c4:	781b      	ldrb	r3, [r3, #0]
   d56c6:	f88d 3000 	strb.w	r3, [sp]
   d56ca:	4b2b      	ldr	r3, [pc, #172]	; (d5778 <loop+0x6d0>)
   d56cc:	492b      	ldr	r1, [pc, #172]	; (d577c <loop+0x6d4>)
   d56ce:	781b      	ldrb	r3, [r3, #0]
   d56d0:	482b      	ldr	r0, [pc, #172]	; (d5780 <loop+0x6d8>)
   d56d2:	f7fe ff0a 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d56d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d56da:	f002 fb29 	bl	d7d30 <delay>
        System.reset();
   d56de:	f004 fecb 	bl	da478 <_ZN11SystemClass5resetEv>
   d56e2:	e59b      	b.n	d521c <loop+0x174>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d56e4:	f005 f945 	bl	da972 <_ZN9TimeClass3nowEv>
   d56e8:	6a23      	ldr	r3, [r4, #32]
   d56ea:	1ac0      	subs	r0, r0, r3
   d56ec:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d56f0:	78e3      	ldrb	r3, [r4, #3]
   d56f2:	d918      	bls.n	d5726 <loop+0x67e>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Power Cycle", PRIVATE, WITH_ACK);  // Broadcast Reset Action
   d56f4:	b153      	cbz	r3, d570c <loop+0x664>
   d56f6:	4b1e      	ldr	r3, [pc, #120]	; (d5770 <loop+0x6c8>)
   d56f8:	4a22      	ldr	r2, [pc, #136]	; (d5784 <loop+0x6dc>)
   d56fa:	781b      	ldrb	r3, [r3, #0]
   d56fc:	f88d 3000 	strb.w	r3, [sp]
   d5700:	4b1d      	ldr	r3, [pc, #116]	; (d5778 <loop+0x6d0>)
   d5702:	491e      	ldr	r1, [pc, #120]	; (d577c <loop+0x6d4>)
   d5704:	781b      	ldrb	r3, [r3, #0]
   d5706:	481e      	ldr	r0, [pc, #120]	; (d5780 <loop+0x6d8>)
   d5708:	f7fe feef 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d570c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5710:	f002 fb0e 	bl	d7d30 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5714:	2300      	movs	r3, #0
   d5716:	6123      	str	r3, [r4, #16]
        ab1805.deepPowerDown(10);
   d5718:	210a      	movs	r1, #10
        systemStatusWriteNeeded=true;
   d571a:	2301      	movs	r3, #1
        ab1805.deepPowerDown(10);
   d571c:	4813      	ldr	r0, [pc, #76]	; (d576c <loop+0x6c4>)
        systemStatusWriteNeeded=true;
   d571e:	7033      	strb	r3, [r6, #0]
        ab1805.deepPowerDown(10);
   d5720:	f000 ffc6 	bl	d66b0 <_ZN6AB180513deepPowerDownEi>
   d5724:	e57a      	b.n	d521c <loop+0x174>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcase Reset Action
   d5726:	b153      	cbz	r3, d573e <loop+0x696>
   d5728:	4b11      	ldr	r3, [pc, #68]	; (d5770 <loop+0x6c8>)
   d572a:	4a17      	ldr	r2, [pc, #92]	; (d5788 <loop+0x6e0>)
   d572c:	781b      	ldrb	r3, [r3, #0]
   d572e:	f88d 3000 	strb.w	r3, [sp]
   d5732:	4b11      	ldr	r3, [pc, #68]	; (d5778 <loop+0x6d0>)
   d5734:	4911      	ldr	r1, [pc, #68]	; (d577c <loop+0x6d4>)
   d5736:	781b      	ldrb	r3, [r3, #0]
   d5738:	4811      	ldr	r0, [pc, #68]	; (d5780 <loop+0x6d8>)
   d573a:	f7fe fed6 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d573e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5742:	f002 faf5 	bl	d7d30 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5746:	2300      	movs	r3, #0
   d5748:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d574a:	2301      	movs	r3, #1
   d574c:	7033      	strb	r3, [r6, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d574e:	f7ff fb97 	bl	d4e80 <_Z14fullModemResetv>
   d5752:	e563      	b.n	d521c <loop+0x174>
   d5754:	2003e4dc 	.word	0x2003e4dc
   d5758:	2003e518 	.word	0x2003e518
   d575c:	2003e528 	.word	0x2003e528
   d5760:	2003e48c 	.word	0x2003e48c
   d5764:	000dde40 	.word	0x000dde40
   d5768:	2003e5e0 	.word	0x2003e5e0
   d576c:	2003e40c 	.word	0x2003e40c
   d5770:	2003e405 	.word	0x2003e405
   d5774:	000dde6d 	.word	0x000dde6d
   d5778:	2003e404 	.word	0x2003e404
   d577c:	000dde81 	.word	0x000dde81
   d5780:	2003e4e0 	.word	0x2003e4e0
   d5784:	000dde87 	.word	0x000dde87
   d5788:	000ddea1 	.word	0x000ddea1
   d578c:	00000000 	.word	0x00000000

000d5790 <setup>:
{
   d5790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5794:	2100      	movs	r1, #0
{
   d5796:	b0aa      	sub	sp, #168	; 0xa8
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5798:	2008      	movs	r0, #8
   d579a:	f005 fb37 	bl	dae0c <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d579e:	2100      	movs	r1, #0
   d57a0:	2004      	movs	r0, #4
   d57a2:	f005 fb33 	bl	dae0c <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d57a6:	2101      	movs	r1, #1
   d57a8:	2007      	movs	r0, #7
   d57aa:	f005 fb2f 	bl	dae0c <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d57ae:	2101      	movs	r1, #1
   d57b0:	2007      	movs	r0, #7
   d57b2:	f005 fb3c 	bl	dae2e <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d57b6:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d57b8:	2400      	movs	r4, #0
   d57ba:	f002 f99d 	bl	d7af8 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d57be:	2300      	movs	r3, #0
   d57c0:	227d      	movs	r2, #125	; 0x7d
   d57c2:	a90a      	add	r1, sp, #40	; 0x28
   d57c4:	a806      	add	r0, sp, #24
   d57c6:	f004 fdb0 	bl	da32a <_ZNK6String8getBytesEPhjj>
   d57ca:	49b7      	ldr	r1, [pc, #732]	; (d5aa8 <setup+0x318>)
   d57cc:	f8df 83d8 	ldr.w	r8, [pc, #984]	; d5ba8 <setup+0x418>
   d57d0:	4db6      	ldr	r5, [pc, #728]	; (d5aac <setup+0x31c>)
   d57d2:	4fb7      	ldr	r7, [pc, #732]	; (d5ab0 <setup+0x320>)
   d57d4:	4623      	mov	r3, r4
   d57d6:	4622      	mov	r2, r4
   d57d8:	e9cd 4400 	strd	r4, r4, [sp]
   d57dc:	a80a      	add	r0, sp, #40	; 0x28
   d57de:	f002 f99b 	bl	d7b18 <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d57e2:	4623      	mov	r3, r4
   d57e4:	2202      	movs	r2, #2
   d57e6:	49b3      	ldr	r1, [pc, #716]	; (d5ab4 <setup+0x324>)
   d57e8:	48b3      	ldr	r0, [pc, #716]	; (d5ab8 <setup+0x328>)
   d57ea:	f002 f95d 	bl	d7aa8 <spark_variable>
        return _variable(varKey, var, STRING);
   d57ee:	49b3      	ldr	r1, [pc, #716]	; (d5abc <setup+0x32c>)
   d57f0:	48b3      	ldr	r0, [pc, #716]	; (d5ac0 <setup+0x330>)
   d57f2:	f7fe fd34 	bl	d425e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d57f6:	49b3      	ldr	r1, [pc, #716]	; (d5ac4 <setup+0x334>)
   d57f8:	48b3      	ldr	r0, [pc, #716]	; (d5ac8 <setup+0x338>)
   d57fa:	4623      	mov	r3, r4
   d57fc:	2202      	movs	r2, #2
   d57fe:	f002 f953 	bl	d7aa8 <spark_variable>
   d5802:	4623      	mov	r3, r4
   d5804:	2202      	movs	r2, #2
   d5806:	49b1      	ldr	r1, [pc, #708]	; (d5acc <setup+0x33c>)
   d5808:	48b1      	ldr	r0, [pc, #708]	; (d5ad0 <setup+0x340>)
   d580a:	f002 f94d 	bl	d7aa8 <spark_variable>
        return _variable(varKey, var, STRING);
   d580e:	49b1      	ldr	r1, [pc, #708]	; (d5ad4 <setup+0x344>)
   d5810:	48b1      	ldr	r0, [pc, #708]	; (d5ad8 <setup+0x348>)
   d5812:	f7fe fd24 	bl	d425e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5816:	4623      	mov	r3, r4
   d5818:	2202      	movs	r2, #2
   d581a:	49b0      	ldr	r1, [pc, #704]	; (d5adc <setup+0x34c>)
   d581c:	48b0      	ldr	r0, [pc, #704]	; (d5ae0 <setup+0x350>)
   d581e:	f002 f943 	bl	d7aa8 <spark_variable>
        return _variable(varKey, var, STRING);
   d5822:	49b0      	ldr	r1, [pc, #704]	; (d5ae4 <setup+0x354>)
   d5824:	48b0      	ldr	r0, [pc, #704]	; (d5ae8 <setup+0x358>)
   d5826:	f7fe fd1a 	bl	d425e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d582a:	49b0      	ldr	r1, [pc, #704]	; (d5aec <setup+0x35c>)
   d582c:	48b0      	ldr	r0, [pc, #704]	; (d5af0 <setup+0x360>)
   d582e:	f7fe fd16 	bl	d425e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5832:	49b0      	ldr	r1, [pc, #704]	; (d5af4 <setup+0x364>)
   d5834:	48b0      	ldr	r0, [pc, #704]	; (d5af8 <setup+0x368>)
   d5836:	f7fe fd12 	bl	d425e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d583a:	4623      	mov	r3, r4
   d583c:	2202      	movs	r2, #2
   d583e:	49af      	ldr	r1, [pc, #700]	; (d5afc <setup+0x36c>)
   d5840:	48af      	ldr	r0, [pc, #700]	; (d5b00 <setup+0x370>)
   d5842:	f002 f931 	bl	d7aa8 <spark_variable>
        return _variable(varKey, var, STRING);
   d5846:	49af      	ldr	r1, [pc, #700]	; (d5b04 <setup+0x374>)
   d5848:	48af      	ldr	r0, [pc, #700]	; (d5b08 <setup+0x378>)
   d584a:	f7fe fd08 	bl	d425e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d584e:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d5850:	e9cd 4403 	strd	r4, r4, [sp, #12]
        extra.size = sizeof(extra);
   d5854:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d5858:	4bac      	ldr	r3, [pc, #688]	; (d5b0c <setup+0x37c>)
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d585a:	49ad      	ldr	r1, [pc, #692]	; (d5b10 <setup+0x380>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d585c:	9305      	str	r3, [sp, #20]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d585e:	2204      	movs	r2, #4
   d5860:	ab03      	add	r3, sp, #12
   d5862:	48ac      	ldr	r0, [pc, #688]	; (d5b14 <setup+0x384>)
   d5864:	f002 f920 	bl	d7aa8 <spark_variable>
        return _variable(varKey, var, STRING);
   d5868:	49ab      	ldr	r1, [pc, #684]	; (d5b18 <setup+0x388>)
   d586a:	48ac      	ldr	r0, [pc, #688]	; (d5b1c <setup+0x38c>)
   d586c:	f7fe fcf7 	bl	d425e <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d5870:	49ab      	ldr	r1, [pc, #684]	; (d5b20 <setup+0x390>)
   d5872:	48ac      	ldr	r0, [pc, #688]	; (d5b24 <setup+0x394>)
   d5874:	f7fe fdec 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5878:	49ab      	ldr	r1, [pc, #684]	; (d5b28 <setup+0x398>)
   d587a:	48ac      	ldr	r0, [pc, #688]	; (d5b2c <setup+0x39c>)
   d587c:	f7fe fde8 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5880:	49ab      	ldr	r1, [pc, #684]	; (d5b30 <setup+0x3a0>)
   d5882:	48ac      	ldr	r0, [pc, #688]	; (d5b34 <setup+0x3a4>)
   d5884:	f7fe fde4 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5888:	49ab      	ldr	r1, [pc, #684]	; (d5b38 <setup+0x3a8>)
   d588a:	48ac      	ldr	r0, [pc, #688]	; (d5b3c <setup+0x3ac>)
   d588c:	f7fe fde0 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5890:	49ab      	ldr	r1, [pc, #684]	; (d5b40 <setup+0x3b0>)
   d5892:	48ac      	ldr	r0, [pc, #688]	; (d5b44 <setup+0x3b4>)
   d5894:	f7fe fddc 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5898:	49ab      	ldr	r1, [pc, #684]	; (d5b48 <setup+0x3b8>)
   d589a:	48ac      	ldr	r0, [pc, #688]	; (d5b4c <setup+0x3bc>)
   d589c:	f7fe fdd8 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d58a0:	49ab      	ldr	r1, [pc, #684]	; (d5b50 <setup+0x3c0>)
   d58a2:	48ac      	ldr	r0, [pc, #688]	; (d5b54 <setup+0x3c4>)
   d58a4:	f7fe fdd4 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d58a8:	49ab      	ldr	r1, [pc, #684]	; (d5b58 <setup+0x3c8>)
   d58aa:	48ac      	ldr	r0, [pc, #688]	; (d5b5c <setup+0x3cc>)
   d58ac:	f7fe fdd0 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d58b0:	49ab      	ldr	r1, [pc, #684]	; (d5b60 <setup+0x3d0>)
   d58b2:	48ac      	ldr	r0, [pc, #688]	; (d5b64 <setup+0x3d4>)
   d58b4:	f7fe fdcc 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d58b8:	49ab      	ldr	r1, [pc, #684]	; (d5b68 <setup+0x3d8>)
   d58ba:	48ac      	ldr	r0, [pc, #688]	; (d5b6c <setup+0x3dc>)
   d58bc:	f7fe fdc8 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d58c0:	49ab      	ldr	r1, [pc, #684]	; (d5b70 <setup+0x3e0>)
   d58c2:	48ac      	ldr	r0, [pc, #688]	; (d5b74 <setup+0x3e4>)
   d58c4:	f7fe fdc4 	bl	d4450 <_ZN10CloudClass9_functionEPKcPFi6StringE>
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d58c8:	2601      	movs	r6, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d58ca:	2203      	movs	r2, #3
   d58cc:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d58d0:	a803      	add	r0, sp, #12
   d58d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    graceful_ = enabled;
   d58d6:	f8ad 6014 	strh.w	r6, [sp, #20]
   d58da:	f002 fc24 	bl	d8126 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  fram.begin();                                                       // Initialize the FRAM module
   d58de:	48a6      	ldr	r0, [pc, #664]	; (d5b78 <setup+0x3e8>)
   d58e0:	f001 f9f2 	bl	d6cc8 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d58e4:	4621      	mov	r1, r4
   d58e6:	48a4      	ldr	r0, [pc, #656]	; (d5b78 <setup+0x3e8>)
   d58e8:	4633      	mov	r3, r6
   d58ea:	f10d 020b 	add.w	r2, sp, #11
   d58ee:	f001 fa2d 	bl	d6d4c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d58f2:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d58f6:	42b1      	cmp	r1, r6
   d58f8:	f000 80b5 	beq.w	d5a66 <setup+0x2d6>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d58fc:	489e      	ldr	r0, [pc, #632]	; (d5b78 <setup+0x3e8>)
   d58fe:	f001 f9ed 	bl	d6cdc <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5902:	4a9e      	ldr	r2, [pc, #632]	; (d5b7c <setup+0x3ec>)
   d5904:	489c      	ldr	r0, [pc, #624]	; (d5b78 <setup+0x3e8>)
   d5906:	2304      	movs	r3, #4
   d5908:	4621      	mov	r1, r4
   d590a:	f001 fa6a 	bl	d6de2 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d590e:	4633      	mov	r3, r6
   d5910:	4899      	ldr	r0, [pc, #612]	; (d5b78 <setup+0x3e8>)
   d5912:	f10d 020b 	add.w	r2, sp, #11
   d5916:	4621      	mov	r1, r4
   d5918:	f001 fa18 	bl	d6d4c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d591c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5920:	42b3      	cmp	r3, r6
   d5922:	f000 809d 	beq.w	d5a60 <setup+0x2d0>
   d5926:	703e      	strb	r6, [r7, #0]
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d5928:	4c95      	ldr	r4, [pc, #596]	; (d5b80 <setup+0x3f0>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d592a:	f7ff f941 	bl	d4bb0 <_Z17checkSystemValuesv>
  makeUpParkHourStrings();                                            // Create the strings for the console
   d592e:	f7ff f995 	bl	d4c5c <_Z21makeUpParkHourStringsv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d5932:	4a94      	ldr	r2, [pc, #592]	; (d5b84 <setup+0x3f4>)
   d5934:	2300      	movs	r3, #0
   d5936:	2100      	movs	r1, #0
   d5938:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d593c:	f002 f852 	bl	d79e4 <system_subscribe_event>
   d5940:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();
   d5942:	2101      	movs	r1, #1
   d5944:	4620      	mov	r0, r4
   d5946:	8163      	strh	r3, [r4, #10]
   d5948:	f001 f870 	bl	d6a2c <_ZN6AB18055setupEb>
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d594c:	2301      	movs	r3, #1
   d594e:	461a      	mov	r2, r3
   d5950:	2110      	movs	r1, #16
   d5952:	4620      	mov	r0, r4
   d5954:	f000 fdd5 	bl	d6502 <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d5958:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet = ab1805.isRTCSet();
   d595a:	70a8      	strb	r0, [r5, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d595c:	4620      	mov	r0, r4
   d595e:	f000 fd4d 	bl	d63fc <_ZN6AB18056setWDTEi>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d5962:	ed95 0a06 	vldr	s0, [r5, #24]
   d5966:	f004 febb 	bl	da6e0 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d596a:	f000 fb69 	bl	d6040 <_Z8isDSTusav>
   d596e:	2800      	cmp	r0, #0
   d5970:	f000 8085 	beq.w	d5a7e <setup+0x2ee>
   d5974:	f004 fed2 	bl	da71c <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d5978:	ed95 0a05 	vldr	s0, [r5, #20]
   d597c:	f004 fe90 	bl	da6a0 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5980:	f005 f830 	bl	da9e4 <_ZN9TimeClass5localEv>
   d5984:	4604      	mov	r4, r0
   d5986:	f004 fff4 	bl	da972 <_ZN9TimeClass3nowEv>
   d598a:	1a20      	subs	r0, r4, r0
   d598c:	f005 fc72 	bl	db274 <__aeabi_i2d>
   d5990:	a343      	add	r3, pc, #268	; (adr r3, d5aa0 <setup+0x310>)
   d5992:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5996:	f005 fe01 	bl	db59c <__aeabi_ddiv>
   d599a:	4a7b      	ldr	r2, [pc, #492]	; (d5b88 <setup+0x3f8>)
   d599c:	e9cd 0100 	strd	r0, r1, [sp]
   d59a0:	210a      	movs	r1, #10
   d59a2:	4858      	ldr	r0, [pc, #352]	; (d5b04 <setup+0x374>)
   d59a4:	f002 f970 	bl	d7c88 <snprintf>
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d59a8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   d59aa:	f005 fc75 	bl	db298 <__aeabi_f2d>
   d59ae:	4a77      	ldr	r2, [pc, #476]	; (d5b8c <setup+0x3fc>)
   d59b0:	e9cd 0100 	strd	r0, r1, [sp]
   d59b4:	4858      	ldr	r0, [pc, #352]	; (d5b18 <setup+0x388>)
   d59b6:	2108      	movs	r1, #8
   d59b8:	f002 f966 	bl	d7c88 <snprintf>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d59bc:	79ab      	ldrb	r3, [r5, #6]
   d59be:	2210      	movs	r2, #16
   d59c0:	2b00      	cmp	r3, #0
   d59c2:	d05f      	beq.n	d5a84 <setup+0x2f4>
   d59c4:	4972      	ldr	r1, [pc, #456]	; (d5b90 <setup+0x400>)
   d59c6:	4847      	ldr	r0, [pc, #284]	; (d5ae4 <setup+0x354>)
   d59c8:	f006 f957 	bl	dbc7a <strncpy>
        int reason = RESET_REASON_NONE;
   d59cc:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d59ce:	4611      	mov	r1, r2
   d59d0:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d59d2:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d59d4:	f001 fe1c 	bl	d7610 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d59d8:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d59da:	2b14      	cmp	r3, #20
   d59dc:	f04f 0200 	mov.w	r2, #0
   d59e0:	d152      	bne.n	d5a88 <setup+0x2f8>
    sysStatus.resetCount++;
   d59e2:	692b      	ldr	r3, [r5, #16]
   d59e4:	3301      	adds	r3, #1
   d59e6:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d59e8:	4b6a      	ldr	r3, [pc, #424]	; (d5b94 <setup+0x404>)
   d59ea:	2201      	movs	r2, #1
   d59ec:	701a      	strb	r2, [r3, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d59ee:	f7ff f80f 	bl	d4a10 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d59f2:	2004      	movs	r0, #4
   d59f4:	f005 fa34 	bl	dae60 <digitalRead>
   d59f8:	b908      	cbnz	r0, d59fe <setup+0x26e>
   d59fa:	f7ff f88f 	bl	d4b1c <_Z18loadSystemDefaultsv>
  if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   d59fe:	f004 ffd5 	bl	da9ac <_ZN9TimeClass3dayEv>
   d5a02:	2100      	movs	r1, #0
   d5a04:	4604      	mov	r4, r0
   d5a06:	f8d8 0000 	ldr.w	r0, [r8]
   d5a0a:	f004 fe2d 	bl	da668 <_ZN9TimeClass3dayEx>
   d5a0e:	4284      	cmp	r4, r0
   d5a10:	d001      	beq.n	d5a16 <setup+0x286>
    resetEverything();                                                 // Zero the counts for the new day
   d5a12:	f7ff f9dd 	bl	d4dd0 <_Z15resetEverythingv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d5a16:	f004 ffbd 	bl	da994 <_ZN9TimeClass4hourEv>
   d5a1a:	7f2b      	ldrb	r3, [r5, #28]
   d5a1c:	4298      	cmp	r0, r3
   d5a1e:	db11      	blt.n	d5a44 <setup+0x2b4>
   d5a20:	f004 ffb8 	bl	da994 <_ZN9TimeClass4hourEv>
   d5a24:	7f6b      	ldrb	r3, [r5, #29]
   d5a26:	4298      	cmp	r0, r3
   d5a28:	da0c      	bge.n	d5a44 <setup+0x2b4>
    if (sysStatus.connectedStatus && !Particle.connected()) {         // If the system thinks we are connected, let's make sure that we are
   d5a2a:	78eb      	ldrb	r3, [r5, #3]
   d5a2c:	b12b      	cbz	r3, d5a3a <setup+0x2aa>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a2e:	f002 f85b 	bl	d7ae8 <spark_cloud_flag_connected>
   d5a32:	b910      	cbnz	r0, d5a3a <setup+0x2aa>
      particleConnectionNeeded = true;                                    // This may happen if there was an unexpected reset during park open hours
   d5a34:	4b58      	ldr	r3, [pc, #352]	; (d5b98 <setup+0x408>)
   d5a36:	2201      	movs	r2, #1
   d5a38:	701a      	strb	r2, [r3, #0]
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d5a3a:	f7ff facf 	bl	d4fdc <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Boron awake after reboot - helps with recovery
   d5a3e:	4b57      	ldr	r3, [pc, #348]	; (d5b9c <setup+0x40c>)
   d5a40:	4a57      	ldr	r2, [pc, #348]	; (d5ba0 <setup+0x410>)
   d5a42:	601a      	str	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5a44:	783b      	ldrb	r3, [r7, #0]
   d5a46:	b90b      	cbnz	r3, d5a4c <setup+0x2bc>
   d5a48:	2302      	movs	r3, #2
   d5a4a:	703b      	strb	r3, [r7, #0]
  digitalWrite(blueLED,LOW);                                          // Signal the end of startup
   d5a4c:	2100      	movs	r1, #0
   d5a4e:	2007      	movs	r0, #7
   d5a50:	f005 f9ed 	bl	dae2e <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5a54:	a806      	add	r0, sp, #24
   d5a56:	f004 fbb5 	bl	da1c4 <_ZN6StringD1Ev>
}
   d5a5a:	b02a      	add	sp, #168	; 0xa8
   d5a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5a60:	f7ff f85c 	bl	d4b1c <_Z18loadSystemDefaultsv>
   d5a64:	e760      	b.n	d5928 <setup+0x198>
   d5a66:	462a      	mov	r2, r5
   d5a68:	2330      	movs	r3, #48	; 0x30
   d5a6a:	4843      	ldr	r0, [pc, #268]	; (d5b78 <setup+0x3e8>)
   d5a6c:	f001 f96e 	bl	d6d4c <_ZN6MB85RC8readDataEjPhj>
   d5a70:	2320      	movs	r3, #32
   d5a72:	4642      	mov	r2, r8
   d5a74:	2150      	movs	r1, #80	; 0x50
   d5a76:	4840      	ldr	r0, [pc, #256]	; (d5b78 <setup+0x3e8>)
   d5a78:	f001 f968 	bl	d6d4c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5a7c:	e754      	b.n	d5928 <setup+0x198>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d5a7e:	f004 fe59 	bl	da734 <_ZN9TimeClass6endDSTEv>
   d5a82:	e779      	b.n	d5978 <setup+0x1e8>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d5a84:	4947      	ldr	r1, [pc, #284]	; (d5ba4 <setup+0x414>)
   d5a86:	e79e      	b.n	d59c6 <setup+0x236>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a88:	4611      	mov	r1, r2
   d5a8a:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5a8c:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a8e:	f001 fdbf 	bl	d7610 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5a92:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5a94:	2b8c      	cmp	r3, #140	; 0x8c
   d5a96:	d1aa      	bne.n	d59ee <setup+0x25e>
   d5a98:	e7a3      	b.n	d59e2 <setup+0x252>
   d5a9a:	bf00      	nop
   d5a9c:	f3af 8000 	nop.w
   d5aa0:	00000000 	.word	0x00000000
   d5aa4:	40ac2000 	.word	0x40ac2000
   d5aa8:	000d4505 	.word	0x000d4505
   d5aac:	2003e528 	.word	0x2003e528
   d5ab0:	2003e51c 	.word	0x2003e51c
   d5ab4:	2003e464 	.word	0x2003e464
   d5ab8:	000ddee6 	.word	0x000ddee6
   d5abc:	2003e3b4 	.word	0x2003e3b4
   d5ac0:	000ddef3 	.word	0x000ddef3
   d5ac4:	2003e538 	.word	0x2003e538
   d5ac8:	000ddefa 	.word	0x000ddefa
   d5acc:	2003e46c 	.word	0x2003e46c
   d5ad0:	000ddf05 	.word	0x000ddf05
   d5ad4:	2003e0f0 	.word	0x2003e0f0
   d5ad8:	000ddf11 	.word	0x000ddf11
   d5adc:	2003e530 	.word	0x2003e530
   d5ae0:	000ddf19 	.word	0x000ddf19
   d5ae4:	2003e4cc 	.word	0x2003e4cc
   d5ae8:	000ddf24 	.word	0x000ddf24
   d5aec:	2003e0f6 	.word	0x2003e0f6
   d5af0:	000ddfca 	.word	0x000ddfca
   d5af4:	2003e0e4 	.word	0x2003e0e4
   d5af8:	000ddf31 	.word	0x000ddf31
   d5afc:	2003e470 	.word	0x2003e470
   d5b00:	000ddf3b 	.word	0x000ddf3b
   d5b04:	2003e481 	.word	0x2003e481
   d5b08:	000ddf42 	.word	0x000ddf42
   d5b0c:	000d4269 	.word	0x000d4269
   d5b10:	000d411d 	.word	0x000d411d
   d5b14:	000ddf4d 	.word	0x000ddf4d
   d5b18:	2003e559 	.word	0x2003e559
   d5b1c:	000ddf5c 	.word	0x000ddf5c
   d5b20:	000d4209 	.word	0x000d4209
   d5b24:	000ddf68 	.word	0x000ddf68
   d5b28:	000d45a5 	.word	0x000d45a5
   d5b2c:	000ddf74 	.word	0x000ddf74
   d5b30:	000d4155 	.word	0x000d4155
   d5b34:	000ddf7e 	.word	0x000ddf7e
   d5b38:	000d46c9 	.word	0x000d46c9
   d5b3c:	000ddf86 	.word	0x000ddf86
   d5b40:	000d4a85 	.word	0x000d4a85
   d5b44:	000ddf93 	.word	0x000ddf93
   d5b48:	000d45ed 	.word	0x000d45ed
   d5b4c:	000ddf9e 	.word	0x000ddf9e
   d5b50:	000d5f19 	.word	0x000d5f19
   d5b54:	000ddfab 	.word	0x000ddfab
   d5b58:	000d6081 	.word	0x000d6081
   d5b5c:	000ddfb8 	.word	0x000ddfb8
   d5b60:	000d4cad 	.word	0x000d4cad
   d5b64:	000ddfc6 	.word	0x000ddfc6
   d5b68:	000d4ce5 	.word	0x000d4ce5
   d5b6c:	000ddfd3 	.word	0x000ddfd3
   d5b70:	000d4799 	.word	0x000d4799
   d5b74:	000ddfdd 	.word	0x000ddfdd
   d5b78:	2003e48c 	.word	0x2003e48c
   d5b7c:	000de0ac 	.word	0x000de0ac
   d5b80:	2003e40c 	.word	0x2003e40c
   d5b84:	000d40d5 	.word	0x000d40d5
   d5b88:	000ddfef 	.word	0x000ddfef
   d5b8c:	000ddc0a 	.word	0x000ddc0a
   d5b90:	000ddc00 	.word	0x000ddc00
   d5b94:	2003e558 	.word	0x2003e558
   d5b98:	2003e4dd 	.word	0x2003e4dd
   d5b9c:	2003e520 	.word	0x2003e520
   d5ba0:	00015f90 	.word	0x00015f90
   d5ba4:	000ddbfc 	.word	0x000ddbfc
   d5ba8:	2003e460 	.word	0x2003e460

000d5bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5bac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5bae:	e9d0 5300 	ldrd	r5, r3, [r0]
   d5bb2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5bb4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5bb6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5bba:	42ae      	cmp	r6, r5
   d5bbc:	d004      	beq.n	d5bc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d5bbe:	4628      	mov	r0, r5
   d5bc0:	f004 fb00 	bl	da1c4 <_ZN6StringD1Ev>
   d5bc4:	3514      	adds	r5, #20
   d5bc6:	e7f8      	b.n	d5bba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d5bc8:	6820      	ldr	r0, [r4, #0]
   d5bca:	f002 f845 	bl	d7c58 <free>
    AllocatorT::free(data_);
}
   d5bce:	4620      	mov	r0, r4
   d5bd0:	bd70      	pop	{r4, r5, r6, pc}

000d5bd2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5bd2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bd6:	4604      	mov	r4, r0
   d5bd8:	460d      	mov	r5, r1
   d5bda:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5bdc:	d916      	bls.n	d5c0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5bde:	4290      	cmp	r0, r2
   d5be0:	d215      	bcs.n	d5c0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d5be2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d5be6:	1a75      	subs	r5, r6, r1
   d5be8:	f1a1 0714 	sub.w	r7, r1, #20
   d5bec:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5bee:	42b7      	cmp	r7, r6
   d5bf0:	d01c      	beq.n	d5c2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d5bf2:	b12c      	cbz	r4, d5c00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d5bf4:	4631      	mov	r1, r6
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	f004 fb60 	bl	da2bc <_ZN6StringC1EOS_>
   d5bfc:	7c33      	ldrb	r3, [r6, #16]
   d5bfe:	7423      	strb	r3, [r4, #16]
   d5c00:	4630      	mov	r0, r6
   d5c02:	f004 fadf 	bl	da1c4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5c06:	3e14      	subs	r6, #20
   d5c08:	3c14      	subs	r4, #20
   d5c0a:	e7f0      	b.n	d5bee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5c0c:	d00e      	beq.n	d5c2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5c0e:	42b5      	cmp	r5, r6
   d5c10:	d00c      	beq.n	d5c2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d5c12:	b12c      	cbz	r4, d5c20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d5c14:	4629      	mov	r1, r5
   d5c16:	4620      	mov	r0, r4
   d5c18:	f004 fb50 	bl	da2bc <_ZN6StringC1EOS_>
   d5c1c:	7c2b      	ldrb	r3, [r5, #16]
   d5c1e:	7423      	strb	r3, [r4, #16]
   d5c20:	4628      	mov	r0, r5
   d5c22:	f004 facf 	bl	da1c4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5c26:	3514      	adds	r5, #20
   d5c28:	3414      	adds	r4, #20
   d5c2a:	e7f0      	b.n	d5c0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d5c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d5c32:	2300      	movs	r3, #0
   d5c34:	e9c0 3300 	strd	r3, r3, [r0]
   d5c38:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5c3a:	684f      	ldr	r7, [r1, #4]
   d5c3c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5c3e:	4604      	mov	r4, r0
   d5c40:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5c42:	dd23      	ble.n	d5c8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d5c44:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d5c48:	fb08 f007 	mul.w	r0, r8, r7
   d5c4c:	f001 fffc 	bl	d7c48 <malloc>
            if (!d) {
   d5c50:	4605      	mov	r5, r0
   d5c52:	b1d8      	cbz	r0, d5c8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d5c54:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5c58:	fb08 1202 	mla	r2, r8, r2, r1
   d5c5c:	f7ff ffb9 	bl	d5bd2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5c60:	6820      	ldr	r0, [r4, #0]
   d5c62:	f001 fff9 	bl	d7c58 <free>
        data_ = d;
   d5c66:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5c68:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5c6a:	e9d6 7300 	ldrd	r7, r3, [r6]
   d5c6e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d5c72:	45b8      	cmp	r8, r7
   d5c74:	d008      	beq.n	d5c88 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d5c76:	4639      	mov	r1, r7
   d5c78:	4628      	mov	r0, r5
   d5c7a:	f004 fb39 	bl	da2f0 <_ZN6StringC1ERKS_>
   d5c7e:	7c3b      	ldrb	r3, [r7, #16]
   d5c80:	742b      	strb	r3, [r5, #16]
   d5c82:	3714      	adds	r7, #20
   d5c84:	3514      	adds	r5, #20
   d5c86:	e7f4      	b.n	d5c72 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5c88:	6873      	ldr	r3, [r6, #4]
   d5c8a:	6063      	str	r3, [r4, #4]
}
   d5c8c:	4620      	mov	r0, r4
   d5c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5c94 <_GLOBAL__sub_I___appProductID>:
        val_(val) {
   d5c94:	4b74      	ldr	r3, [pc, #464]	; (d5e68 <_GLOBAL__sub_I___appProductID+0x1d4>)
   d5c96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c9a:	2400      	movs	r4, #0
   d5c9c:	601c      	str	r4, [r3, #0]
   d5c9e:	4b73      	ldr	r3, [pc, #460]	; (d5e6c <_GLOBAL__sub_I___appProductID+0x1d8>)
              error_(SYSTEM_ERROR_NONE) {
   d5ca0:	4f73      	ldr	r7, [pc, #460]	; (d5e70 <_GLOBAL__sub_I___appProductID+0x1dc>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5ca2:	4d74      	ldr	r5, [pc, #464]	; (d5e74 <_GLOBAL__sub_I___appProductID+0x1e0>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5ca4:	f8df 9248 	ldr.w	r9, [pc, #584]	; d5ef0 <_GLOBAL__sub_I___appProductID+0x25c>
   d5ca8:	2601      	movs	r6, #1
   d5caa:	701e      	strb	r6, [r3, #0]
   d5cac:	4b72      	ldr	r3, [pc, #456]	; (d5e78 <_GLOBAL__sub_I___appProductID+0x1e4>)
   d5cae:	2208      	movs	r2, #8
   d5cb0:	b08f      	sub	sp, #60	; 0x3c
   d5cb2:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5cb4:	f005 f854 	bl	dad60 <spark_protocol_instance>
   d5cb8:	4623      	mov	r3, r4
   d5cba:	4622      	mov	r2, r4
   d5cbc:	210d      	movs	r1, #13
   d5cbe:	f005 f857 	bl	dad70 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5cc2:	f005 f84d 	bl	dad60 <spark_protocol_instance>
   d5cc6:	4623      	mov	r3, r4
   d5cc8:	4622      	mov	r2, r4
   d5cca:	2102      	movs	r1, #2
   d5ccc:	f005 f858 	bl	dad80 <spark_protocol_set_product_firmware_version>
struct currentStatus_structure {                    // currently 10 bytes long
   d5cd0:	4b6a      	ldr	r3, [pc, #424]	; (d5e7c <_GLOBAL__sub_I___appProductID+0x1e8>)
   d5cd2:	603c      	str	r4, [r7, #0]
   d5cd4:	2264      	movs	r2, #100	; 0x64
   d5cd6:	831c      	strh	r4, [r3, #24]
   d5cd8:	61da      	str	r2, [r3, #28]
    SleepResult() {}
   d5cda:	4b69      	ldr	r3, [pc, #420]	; (d5e80 <_GLOBAL__sub_I___appProductID+0x1ec>)
   d5cdc:	60bb      	str	r3, [r7, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5cde:	80bc      	strh	r4, [r7, #4]
    SleepResult() {}
   d5ce0:	71bc      	strb	r4, [r7, #6]
        set_system_mode(mode);
   d5ce2:	2002      	movs	r0, #2
   d5ce4:	f001 fe66 	bl	d79b4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5ce8:	462a      	mov	r2, r5
   d5cea:	4966      	ldr	r1, [pc, #408]	; (d5e84 <_GLOBAL__sub_I___appProductID+0x1f0>)
   d5cec:	4638      	mov	r0, r7
   d5cee:	f005 f961 	bl	dafb4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5cf2:	4621      	mov	r1, r4
   d5cf4:	4630      	mov	r0, r6
   d5cf6:	f001 fe7d 	bl	d79f4 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5cfa:	4631      	mov	r1, r6
   d5cfc:	2004      	movs	r0, #4
   d5cfe:	f001 fc7f 	bl	d7600 <HAL_Feature_Set>
        : config_(config) {
   d5d02:	4861      	ldr	r0, [pc, #388]	; (d5e88 <_GLOBAL__sub_I___appProductID+0x1f4>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5d04:	4961      	ldr	r1, [pc, #388]	; (d5e8c <_GLOBAL__sub_I___appProductID+0x1f8>)
              valid_(true) {
   d5d06:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5d0a:	4603      	mov	r3, r0
   d5d0c:	1d02      	adds	r2, r0, #4
   d5d0e:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5d12:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5d14:	4b5e      	ldr	r3, [pc, #376]	; (d5e90 <_GLOBAL__sub_I___appProductID+0x1fc>)
   d5d16:	6043      	str	r3, [r0, #4]
   d5d18:	462a      	mov	r2, r5
        config_.wakeup_sources = nullptr;
   d5d1a:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d5d1e:	7506      	strb	r6, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5d20:	7204      	strb	r4, [r0, #8]
   d5d22:	f005 f947 	bl	dafb4 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5d26:	f005 f8f5 	bl	daf14 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5d2a:	4f5a      	ldr	r7, [pc, #360]	; (d5e94 <_GLOBAL__sub_I___appProductID+0x200>)
   d5d2c:	4601      	mov	r1, r0
   d5d2e:	4623      	mov	r3, r4
   d5d30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5d34:	4638      	mov	r0, r7
   d5d36:	f000 ffbd 	bl	d6cb4 <_ZN6MB85RCC1ER7TwoWireji>
   d5d3a:	4b57      	ldr	r3, [pc, #348]	; (d5e98 <_GLOBAL__sub_I___appProductID+0x204>)
   d5d3c:	603b      	str	r3, [r7, #0]
   d5d3e:	4638      	mov	r0, r7
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5d40:	4f56      	ldr	r7, [pc, #344]	; (d5e9c <_GLOBAL__sub_I___appProductID+0x208>)
   d5d42:	4957      	ldr	r1, [pc, #348]	; (d5ea0 <_GLOBAL__sub_I___appProductID+0x20c>)
   d5d44:	462a      	mov	r2, r5
   d5d46:	f005 f935 	bl	dafb4 <__aeabi_atexit>
   d5d4a:	4956      	ldr	r1, [pc, #344]	; (d5ea4 <_GLOBAL__sub_I___appProductID+0x210>)
   d5d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5d50:	4638      	mov	r0, r7
   d5d52:	f001 faaf 	bl	d72b4 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5d56:	4b54      	ldr	r3, [pc, #336]	; (d5ea8 <_GLOBAL__sub_I___appProductID+0x214>)
   d5d58:	603b      	str	r3, [r7, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5d5a:	462a      	mov	r2, r5
   d5d5c:	4953      	ldr	r1, [pc, #332]	; (d5eac <_GLOBAL__sub_I___appProductID+0x218>)
   d5d5e:	4638      	mov	r0, r7
   d5d60:	f005 f928 	bl	dafb4 <__aeabi_atexit>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d5d64:	f005 f8d6 	bl	daf14 <_Z19__fetch_global_Wirev>
   d5d68:	4f51      	ldr	r7, [pc, #324]	; (d5eb0 <_GLOBAL__sub_I___appProductID+0x21c>)
   d5d6a:	4601      	mov	r1, r0
   d5d6c:	2269      	movs	r2, #105	; 0x69
   d5d6e:	4638      	mov	r0, r7
   d5d70:	f000 fa46 	bl	d6200 <_ZN6AB1805C1ER7TwoWireh>
   d5d74:	4638      	mov	r0, r7
FuelGauge fuel;                                     // Enable the fuel gauge API                        
   d5d76:	4f4f      	ldr	r7, [pc, #316]	; (d5eb4 <_GLOBAL__sub_I___appProductID+0x220>)
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d5d78:	494f      	ldr	r1, [pc, #316]	; (d5eb8 <_GLOBAL__sub_I___appProductID+0x224>)
   d5d7a:	462a      	mov	r2, r5
   d5d7c:	f005 f91a 	bl	dafb4 <__aeabi_atexit>
FuelGauge fuel;                                     // Enable the fuel gauge API                        
   d5d80:	4621      	mov	r1, r4
   d5d82:	4638      	mov	r0, r7
   d5d84:	f002 fc9e 	bl	d86c4 <_ZN9FuelGaugeC1Eb>
   d5d88:	462a      	mov	r2, r5
   d5d8a:	494c      	ldr	r1, [pc, #304]	; (d5ebc <_GLOBAL__sub_I___appProductID+0x228>)
   d5d8c:	4638      	mov	r0, r7
   d5d8e:	f005 f911 	bl	dafb4 <__aeabi_atexit>
        capacity_(0) {
   d5d92:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d5d96:	9403      	str	r4, [sp, #12]
            StreamLogHandler(Serial, level, filters) {
   d5d98:	f004 ff26 	bl	dabe8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d5d9c:	4c48      	ldr	r4, [pc, #288]	; (d5ec0 <_GLOBAL__sub_I___appProductID+0x22c>)
   d5d9e:	4607      	mov	r7, r0
   d5da0:	a901      	add	r1, sp, #4
   d5da2:	a804      	add	r0, sp, #16
   d5da4:	f7ff ff43 	bl	d5c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5da8:	46a0      	mov	r8, r4
        stream_(&stream) {
   d5daa:	a904      	add	r1, sp, #16
   d5dac:	a807      	add	r0, sp, #28
   d5dae:	f7ff ff3e 	bl	d5c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5db2:	4b44      	ldr	r3, [pc, #272]	; (d5ec4 <_GLOBAL__sub_I___appProductID+0x230>)
   d5db4:	f848 3b04 	str.w	r3, [r8], #4
   d5db8:	a907      	add	r1, sp, #28
   d5dba:	a80a      	add	r0, sp, #40	; 0x28
   d5dbc:	f7ff ff37 	bl	d5c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5dc0:	aa0a      	add	r2, sp, #40	; 0x28
   d5dc2:	4631      	mov	r1, r6
   d5dc4:	4640      	mov	r0, r8
   d5dc6:	f003 fcd3 	bl	d9770 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5dca:	a80a      	add	r0, sp, #40	; 0x28
   d5dcc:	f7ff feee 	bl	d5bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5dd0:	a807      	add	r0, sp, #28
   d5dd2:	f7ff feeb 	bl	d5bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5dd6:	4b3c      	ldr	r3, [pc, #240]	; (d5ec8 <_GLOBAL__sub_I___appProductID+0x234>)
   d5dd8:	6023      	str	r3, [r4, #0]
   d5dda:	6227      	str	r7, [r4, #32]
   d5ddc:	a804      	add	r0, sp, #16
   d5dde:	f7ff fee5 	bl	d5bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5de2:	4b3a      	ldr	r3, [pc, #232]	; (d5ecc <_GLOBAL__sub_I___appProductID+0x238>)
   d5de4:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d5de6:	f004 feff 	bl	dabe8 <_Z16_fetch_usbserialv>
   d5dea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5dee:	f004 feeb 	bl	dabc8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5df2:	f003 f965 	bl	d90c0 <_ZN5spark10LogManager8instanceEv>
   d5df6:	4621      	mov	r1, r4
   d5df8:	f003 fc4c 	bl	d9694 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ALL);
   d5dfc:	a801      	add	r0, sp, #4
   d5dfe:	f7ff fed5 	bl	d5bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5e02:	462a      	mov	r2, r5
   d5e04:	4932      	ldr	r1, [pc, #200]	; (d5ed0 <_GLOBAL__sub_I___appProductID+0x23c>)
	    _M_invoker = &_My_handler::_M_invoke;
   d5e06:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d5ef4 <_GLOBAL__sub_I___appProductID+0x260>
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5e0a:	4f32      	ldr	r7, [pc, #200]	; (d5ed4 <_GLOBAL__sub_I___appProductID+0x240>)
SerialLogHandler logHandler(LOG_LEVEL_ALL);
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	f005 f8d1 	bl	dafb4 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5e12:	4b31      	ldr	r3, [pc, #196]	; (d5ed8 <_GLOBAL__sub_I___appProductID+0x244>)
	    _M_manager = &_My_handler::_M_manager;
   d5e14:	4c31      	ldr	r4, [pc, #196]	; (d5edc <_GLOBAL__sub_I___appProductID+0x248>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5e16:	4932      	ldr	r1, [pc, #200]	; (d5ee0 <_GLOBAL__sub_I___appProductID+0x24c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5e18:	930a      	str	r3, [sp, #40]	; 0x28
   d5e1a:	aa0a      	add	r2, sp, #40	; 0x28
   d5e1c:	4633      	mov	r3, r6
   d5e1e:	4648      	mov	r0, r9
	    _M_manager = &_My_handler::_M_manager;
   d5e20:	940c      	str	r4, [sp, #48]	; 0x30
	    _M_invoker = &_My_handler::_M_invoke;
   d5e22:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   d5e26:	f7fe fb19 	bl	d445c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d5e2a:	a80a      	add	r0, sp, #40	; 0x28
   d5e2c:	f7fe fa6a 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
   d5e30:	462a      	mov	r2, r5
   d5e32:	4639      	mov	r1, r7
   d5e34:	4648      	mov	r0, r9
   d5e36:	f005 f8bd 	bl	dafb4 <__aeabi_atexit>
	    _M_manager = &_My_handler::_M_manager;
   d5e3a:	e9cd 480c 	strd	r4, r8, [sp, #48]	; 0x30
Timer awakeTimer(1800000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d5e3e:	4c29      	ldr	r4, [pc, #164]	; (d5ee4 <_GLOBAL__sub_I___appProductID+0x250>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5e40:	4b29      	ldr	r3, [pc, #164]	; (d5ee8 <_GLOBAL__sub_I___appProductID+0x254>)
   d5e42:	492a      	ldr	r1, [pc, #168]	; (d5eec <_GLOBAL__sub_I___appProductID+0x258>)
   d5e44:	930a      	str	r3, [sp, #40]	; 0x28
   d5e46:	aa0a      	add	r2, sp, #40	; 0x28
   d5e48:	4633      	mov	r3, r6
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	f7fe fb06 	bl	d445c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d5e50:	a80a      	add	r0, sp, #40	; 0x28
   d5e52:	f7fe fa57 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
   d5e56:	462a      	mov	r2, r5
   d5e58:	4639      	mov	r1, r7
   d5e5a:	4620      	mov	r0, r4
   d5e5c:	f005 f8aa 	bl	dafb4 <__aeabi_atexit>
   d5e60:	b00f      	add	sp, #60	; 0x3c
   d5e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e66:	bf00      	nop
   d5e68:	2003e400 	.word	0x2003e400
   d5e6c:	2003e404 	.word	0x2003e404
   d5e70:	2003e3f4 	.word	0x2003e3f4
   d5e74:	2003e3b0 	.word	0x2003e3b0
   d5e78:	2003e405 	.word	0x2003e405
   d5e7c:	2003e460 	.word	0x2003e460
   d5e80:	ffff0000 	.word	0xffff0000
   d5e84:	000d42e9 	.word	0x000d42e9
   d5e88:	2003e448 	.word	0x2003e448
   d5e8c:	000d413d 	.word	0x000d413d
   d5e90:	00030010 	.word	0x00030010
   d5e94:	2003e48c 	.word	0x2003e48c
   d5e98:	000de048 	.word	0x000de048
   d5e9c:	2003e4e0 	.word	0x2003e4e0
   d5ea0:	000d41a5 	.word	0x000d41a5
   d5ea4:	2003f400 	.word	0x2003f400
   d5ea8:	000de064 	.word	0x000de064
   d5eac:	000d417d 	.word	0x000d417d
   d5eb0:	2003e40c 	.word	0x2003e40c
   d5eb4:	2003e49c 	.word	0x2003e49c
   d5eb8:	000d6195 	.word	0x000d6195
   d5ebc:	000d86e5 	.word	0x000d86e5
   d5ec0:	2003e4a8 	.word	0x2003e4a8
   d5ec4:	000de018 	.word	0x000de018
   d5ec8:	000de620 	.word	0x000de620
   d5ecc:	000de030 	.word	0x000de030
   d5ed0:	000d42a1 	.word	0x000d42a1
   d5ed4:	000d4319 	.word	0x000d4319
   d5ed8:	000d40e1 	.word	0x000d40e1
   d5edc:	000d4105 	.word	0x000d4105
   d5ee0:	00124f80 	.word	0x00124f80
   d5ee4:	2003e42c 	.word	0x2003e42c
   d5ee8:	000d40ed 	.word	0x000d40ed
   d5eec:	001b7740 	.word	0x001b7740
   d5ef0:	2003e564 	.word	0x2003e564
   d5ef4:	000d4101 	.word	0x000d4101

000d5ef8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d5ef8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5efa:	2000      	movs	r0, #0
   d5efc:	f001 fe1c 	bl	d7b38 <spark_sync_time_pending>
   d5f00:	b128      	cbz	r0, d5f0e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5f02:	f001 fdf1 	bl	d7ae8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5f06:	f080 0001 	eor.w	r0, r0, #1
   d5f0a:	b2c0      	uxtb	r0, r0
    }
   d5f0c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5f0e:	2001      	movs	r0, #1
   d5f10:	e7fc      	b.n	d5f0c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
   d5f12:	0000      	movs	r0, r0
   d5f14:	0000      	movs	r0, r0
	...

000d5f18 <_Z11setTimeZone6String>:
 * Values outside this range will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if successful, 0 if invalid command
 */
int setTimeZone(String command)
{
   d5f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5f1c:	b0c8      	sub	sp, #288	; 0x120
   d5f1e:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5f20:	f001 fde2 	bl	d7ae8 <spark_cloud_flag_connected>
        if (!connected()) {
   d5f24:	b110      	cbz	r0, d5f2c <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d5f26:	2000      	movs	r0, #0
   d5f28:	f001 fdfe 	bl	d7b28 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d5f2c:	2000      	movs	r0, #0
   d5f2e:	f001 fb9f 	bl	d7670 <hal_timer_millis>
   d5f32:	f04f 0a00 	mov.w	sl, #0
   d5f36:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d5f38:	f247 562f 	movw	r6, #29999	; 0x752f
   d5f3c:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d5f3e:	2000      	movs	r0, #0
   d5f40:	f001 fb96 	bl	d7670 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5f44:	ebb0 0409 	subs.w	r4, r0, r9
   d5f48:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d5f4c:	42af      	cmp	r7, r5
   d5f4e:	bf08      	it	eq
   d5f50:	42a6      	cmpeq	r6, r4
   d5f52:	d305      	bcc.n	d5f60 <_Z11setTimeZone6String+0x48>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d5f54:	f7ff ffd0 	bl	d5ef8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5f58:	b910      	cbnz	r0, d5f60 <_Z11setTimeZone6String+0x48>
            spark_process();
   d5f5a:	f001 fdb5 	bl	d7ac8 <spark_process>
        while (_while() && !_condition()) {
   d5f5e:	e7ee      	b.n	d5f3e <_Z11setTimeZone6String+0x26>
   d5f60:	f7ff ffca 	bl	d5ef8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d5f64:	f8d8 0000 	ldr.w	r0, [r8]
   d5f68:	220a      	movs	r2, #10
   d5f6a:	a903      	add	r1, sp, #12
   d5f6c:	f006 fda6 	bl	dcabc <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d5f70:	f100 030c 	add.w	r3, r0, #12
   d5f74:	b2db      	uxtb	r3, r3
   d5f76:	2b18      	cmp	r3, #24
   d5f78:	d848      	bhi.n	d600c <_Z11setTimeZone6String+0xf4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d5f7a:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d5f7c:	ee07 5a90 	vmov	s15, r5
   d5f80:	4b27      	ldr	r3, [pc, #156]	; (d6020 <_Z11setTimeZone6String+0x108>)
   d5f82:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d5f86:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d5f88:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d5f8c:	f004 fb88 	bl	da6a0 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d5f90:	4b24      	ldr	r3, [pc, #144]	; (d6024 <_Z11setTimeZone6String+0x10c>)
   d5f92:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d5f94:	f004 fd26 	bl	da9e4 <_ZN9TimeClass5localEv>
   d5f98:	4606      	mov	r6, r0
   d5f9a:	f004 fcea 	bl	da972 <_ZN9TimeClass3nowEv>
   d5f9e:	1a30      	subs	r0, r6, r0
   d5fa0:	f005 f968 	bl	db274 <__aeabi_i2d>
   d5fa4:	a31c      	add	r3, pc, #112	; (adr r3, d6018 <_Z11setTimeZone6String+0x100>)
   d5fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5faa:	f005 faf7 	bl	db59c <__aeabi_ddiv>
   d5fae:	4a1e      	ldr	r2, [pc, #120]	; (d6028 <_Z11setTimeZone6String+0x110>)
   d5fb0:	e9cd 0100 	strd	r0, r1, [sp]
   d5fb4:	210a      	movs	r1, #10
   d5fb6:	481d      	ldr	r0, [pc, #116]	; (d602c <_Z11setTimeZone6String+0x114>)
   d5fb8:	f001 fe66 	bl	d7c88 <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5fbc:	f001 fd94 	bl	d7ae8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d5fc0:	b310      	cbz	r0, d6008 <_Z11setTimeZone6String+0xf0>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d5fc2:	462b      	mov	r3, r5
   d5fc4:	4a1a      	ldr	r2, [pc, #104]	; (d6030 <_Z11setTimeZone6String+0x118>)
   d5fc6:	4d1b      	ldr	r5, [pc, #108]	; (d6034 <_Z11setTimeZone6String+0x11c>)
   d5fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
        val_(0) {
   d5fcc:	2600      	movs	r6, #0
   d5fce:	a808      	add	r0, sp, #32
   d5fd0:	f001 fe5a 	bl	d7c88 <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d5fd4:	f88d 6000 	strb.w	r6, [sp]
   d5fd8:	4917      	ldr	r1, [pc, #92]	; (d6038 <_Z11setTimeZone6String+0x120>)
   d5fda:	782b      	ldrb	r3, [r5, #0]
   d5fdc:	4817      	ldr	r0, [pc, #92]	; (d603c <_Z11setTimeZone6String+0x124>)
   d5fde:	aa08      	add	r2, sp, #32
   d5fe0:	f7fe fa83 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d5fe4:	f004 fcc5 	bl	da972 <_ZN9TimeClass3nowEv>
   d5fe8:	4602      	mov	r2, r0
   d5fea:	17c3      	asrs	r3, r0, #31
   d5fec:	a804      	add	r0, sp, #16
   d5fee:	f004 fbbd 	bl	da76c <_ZN9TimeClass7timeStrEx>
   d5ff2:	f88d 6000 	strb.w	r6, [sp]
   d5ff6:	782b      	ldrb	r3, [r5, #0]
   d5ff8:	9a04      	ldr	r2, [sp, #16]
   d5ffa:	490f      	ldr	r1, [pc, #60]	; (d6038 <_Z11setTimeZone6String+0x120>)
   d5ffc:	480f      	ldr	r0, [pc, #60]	; (d603c <_Z11setTimeZone6String+0x124>)
   d5ffe:	f7fe fa74 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6002:	a804      	add	r0, sp, #16
   d6004:	f004 f8de 	bl	da1c4 <_ZN6StringD1Ev>
  }

  return 1;
   d6008:	4620      	mov	r0, r4
   d600a:	e000      	b.n	d600e <_Z11setTimeZone6String+0xf6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d600c:	2000      	movs	r0, #0
}
   d600e:	b048      	add	sp, #288	; 0x120
   d6010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6014:	f3af 8000 	nop.w
   d6018:	00000000 	.word	0x00000000
   d601c:	40ac2000 	.word	0x40ac2000
   d6020:	2003e528 	.word	0x2003e528
   d6024:	2003e558 	.word	0x2003e558
   d6028:	000ddfef 	.word	0x000ddfef
   d602c:	2003e481 	.word	0x2003e481
   d6030:	000de0b0 	.word	0x000de0b0
   d6034:	2003e588 	.word	0x2003e588
   d6038:	000ddf36 	.word	0x000ddf36
   d603c:	2003e4e0 	.word	0x2003e4e0

000d6040 <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d6040:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d6042:	f004 fcb3 	bl	da9ac <_ZN9TimeClass3dayEv>
   d6046:	4605      	mov	r5, r0
  int month = Time.month();
   d6048:	f004 fcc4 	bl	da9d4 <_ZN9TimeClass5monthEv>
   d604c:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d604e:	f004 fcb9 	bl	da9c4 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d6052:	1f23      	subs	r3, r4, #4
   d6054:	2b06      	cmp	r3, #6
   d6056:	d90e      	bls.n	d6076 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d6058:	1ee3      	subs	r3, r4, #3
   d605a:	2b08      	cmp	r3, #8
   d605c:	d80d      	bhi.n	d607a <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d605e:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d6060:	1a2d      	subs	r5, r5, r0
   d6062:	d504      	bpl.n	d606e <_Z8isDSTusav+0x2e>
   d6064:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6066:	bf14      	ite	ne
   d6068:	2000      	movne	r0, #0
   d606a:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d606c:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d606e:	2d07      	cmp	r5, #7
   d6070:	dd03      	ble.n	d607a <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6072:	2c03      	cmp	r4, #3
   d6074:	e7f7      	b.n	d6066 <_Z8isDSTusav+0x26>
    return true;
   d6076:	2001      	movs	r0, #1
   d6078:	e7f8      	b.n	d606c <_Z8isDSTusav+0x2c>
    return false;
   d607a:	2000      	movs	r0, #0
   d607c:	e7f6      	b.n	d606c <_Z8isDSTusav+0x2c>
	...

000d6080 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d6080:	b570      	push	{r4, r5, r6, lr}
   d6082:	ed2d 8b02 	vpush	{d8}
   d6086:	b0c8      	sub	sp, #288	; 0x120
   d6088:	4605      	mov	r5, r0
  time_t t = Time.now();
   d608a:	f004 fc72 	bl	da972 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d608e:	220a      	movs	r2, #10
  time_t t = Time.now();
   d6090:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d6092:	a903      	add	r1, sp, #12
   d6094:	6828      	ldr	r0, [r5, #0]
   d6096:	f006 fd11 	bl	dcabc <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d609a:	b2c3      	uxtb	r3, r0
   d609c:	2b02      	cmp	r3, #2
   d609e:	d859      	bhi.n	d6154 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d60a0:	b243      	sxtb	r3, r0
   d60a2:	ee08 3a10 	vmov	s16, r3
   d60a6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d60aa:	eeb0 0a48 	vmov.f32	s0, s16
   d60ae:	f004 fb17 	bl	da6e0 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d60b2:	4b2d      	ldr	r3, [pc, #180]	; (d6168 <_Z12setDSTOffset6String+0xe8>)
   d60b4:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d60b8:	4b2c      	ldr	r3, [pc, #176]	; (d616c <_Z12setDSTOffset6String+0xec>)
   d60ba:	2201      	movs	r2, #1
   d60bc:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d60be:	ee18 0a10 	vmov	r0, s16
   d60c2:	f005 f8e9 	bl	db298 <__aeabi_f2d>
   d60c6:	4a2a      	ldr	r2, [pc, #168]	; (d6170 <_Z12setDSTOffset6String+0xf0>)
   d60c8:	e9cd 0100 	strd	r0, r1, [sp]
   d60cc:	f44f 7180 	mov.w	r1, #256	; 0x100
   d60d0:	a808      	add	r0, sp, #32
   d60d2:	f001 fdd9 	bl	d7c88 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d60d6:	f004 fc2f 	bl	da938 <_ZN9TimeClass7isValidEv>
   d60da:	b128      	cbz	r0, d60e8 <_Z12setDSTOffset6String+0x68>
   d60dc:	f7ff ffb0 	bl	d6040 <_Z8isDSTusav>
   d60e0:	2800      	cmp	r0, #0
   d60e2:	d034      	beq.n	d614e <_Z12setDSTOffset6String+0xce>
   d60e4:	f004 fb1a 	bl	da71c <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d60e8:	f004 fc7c 	bl	da9e4 <_ZN9TimeClass5localEv>
   d60ec:	4605      	mov	r5, r0
   d60ee:	f004 fc40 	bl	da972 <_ZN9TimeClass3nowEv>
   d60f2:	1a28      	subs	r0, r5, r0
   d60f4:	f005 f8be 	bl	db274 <__aeabi_i2d>
   d60f8:	a319      	add	r3, pc, #100	; (adr r3, d6160 <_Z12setDSTOffset6String+0xe0>)
   d60fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60fe:	f005 fa4d 	bl	db59c <__aeabi_ddiv>
   d6102:	4a1c      	ldr	r2, [pc, #112]	; (d6174 <_Z12setDSTOffset6String+0xf4>)
   d6104:	e9cd 0100 	strd	r0, r1, [sp]
   d6108:	210a      	movs	r1, #10
   d610a:	481b      	ldr	r0, [pc, #108]	; (d6178 <_Z12setDSTOffset6String+0xf8>)
   d610c:	f001 fdbc 	bl	d7c88 <snprintf>
   d6110:	f001 fcea 	bl	d7ae8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d6114:	b1c8      	cbz	r0, d614a <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d6116:	4d19      	ldr	r5, [pc, #100]	; (d617c <_Z12setDSTOffset6String+0xfc>)
   d6118:	4919      	ldr	r1, [pc, #100]	; (d6180 <_Z12setDSTOffset6String+0x100>)
   d611a:	481a      	ldr	r0, [pc, #104]	; (d6184 <_Z12setDSTOffset6String+0x104>)
   d611c:	2600      	movs	r6, #0
   d611e:	f88d 6000 	strb.w	r6, [sp]
   d6122:	782b      	ldrb	r3, [r5, #0]
   d6124:	aa08      	add	r2, sp, #32
   d6126:	f7fe f9e0 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d612a:	4622      	mov	r2, r4
   d612c:	17e3      	asrs	r3, r4, #31
   d612e:	a804      	add	r0, sp, #16
   d6130:	f004 fb1c 	bl	da76c <_ZN9TimeClass7timeStrEx>
   d6134:	f88d 6000 	strb.w	r6, [sp]
   d6138:	782b      	ldrb	r3, [r5, #0]
   d613a:	9a04      	ldr	r2, [sp, #16]
   d613c:	4910      	ldr	r1, [pc, #64]	; (d6180 <_Z12setDSTOffset6String+0x100>)
   d613e:	4811      	ldr	r0, [pc, #68]	; (d6184 <_Z12setDSTOffset6String+0x104>)
   d6140:	f7fe f9d3 	bl	d44ea <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6144:	a804      	add	r0, sp, #16
   d6146:	f004 f83d 	bl	da1c4 <_ZN6StringD1Ev>
  return 1;
   d614a:	2001      	movs	r0, #1
   d614c:	e003      	b.n	d6156 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d614e:	f004 faf1 	bl	da734 <_ZN9TimeClass6endDSTEv>
   d6152:	e7c9      	b.n	d60e8 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d6154:	2000      	movs	r0, #0
}
   d6156:	b048      	add	sp, #288	; 0x120
   d6158:	ecbd 8b02 	vpop	{d8}
   d615c:	bd70      	pop	{r4, r5, r6, pc}
   d615e:	bf00      	nop
   d6160:	00000000 	.word	0x00000000
   d6164:	40ac2000 	.word	0x40ac2000
   d6168:	2003e528 	.word	0x2003e528
   d616c:	2003e558 	.word	0x2003e558
   d6170:	000de0c4 	.word	0x000de0c4
   d6174:	000ddfef 	.word	0x000ddfef
   d6178:	2003e481 	.word	0x2003e481
   d617c:	2003e588 	.word	0x2003e588
   d6180:	000ddf36 	.word	0x000ddf36
   d6184:	2003e4e0 	.word	0x2003e4e0

000d6188 <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d6188:	4b01      	ldr	r3, [pc, #4]	; (d6190 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d618a:	2201      	movs	r2, #1
   d618c:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d618e:	4770      	bx	lr
   d6190:	2003e588 	.word	0x2003e588

000d6194 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d6194:	4770      	bx	lr

000d6196 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d6196:	b510      	push	{r4, lr}
}
   d6198:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d619a:	4604      	mov	r4, r0
}
   d619c:	f004 ff0f 	bl	dafbe <_ZdlPvj>
   d61a0:	4620      	mov	r0, r4
   d61a2:	bd10      	pop	{r4, pc}

000d61a4 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d61a4:	b40e      	push	{r1, r2, r3}
   d61a6:	b510      	push	{r4, lr}
   d61a8:	b08d      	sub	sp, #52	; 0x34
   d61aa:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d61ac:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d61ae:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d61b2:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d61b4:	2300      	movs	r3, #0
   d61b6:	2020      	movs	r0, #32
   d61b8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d61bc:	e9cd 4200 	strd	r4, r2, [sp]
   d61c0:	2001      	movs	r0, #1
   d61c2:	aa04      	add	r2, sp, #16
   d61c4:	f001 fbcc 	bl	d7960 <log_message_v>
}
   d61c8:	b00d      	add	sp, #52	; 0x34
   d61ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d61ce:	b003      	add	sp, #12
   d61d0:	4770      	bx	lr

000d61d2 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d61d2:	b40e      	push	{r1, r2, r3}
   d61d4:	b510      	push	{r4, lr}
   d61d6:	b08d      	sub	sp, #52	; 0x34
   d61d8:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d61da:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d61dc:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d61e0:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d61e2:	2300      	movs	r3, #0
   d61e4:	2020      	movs	r0, #32
   d61e6:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d61ea:	e9cd 4200 	strd	r4, r2, [sp]
   d61ee:	2032      	movs	r0, #50	; 0x32
   d61f0:	aa04      	add	r2, sp, #16
   d61f2:	f001 fbb5 	bl	d7960 <log_message_v>
}
   d61f6:	b00d      	add	sp, #52	; 0x34
   d61f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d61fc:	b003      	add	sp, #12
   d61fe:	4770      	bx	lr

000d6200 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6200:	b510      	push	{r4, lr}
   d6202:	7202      	strb	r2, [r0, #8]
   d6204:	22ff      	movs	r2, #255	; 0xff
   d6206:	8142      	strh	r2, [r0, #10]
   d6208:	2200      	movs	r2, #0
   d620a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d620e:	6142      	str	r2, [r0, #20]
   d6210:	7602      	strb	r2, [r0, #24]
   d6212:	61c2      	str	r2, [r0, #28]
    instance = this;
   d6214:	4a02      	ldr	r2, [pc, #8]	; (d6220 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6216:	4c03      	ldr	r4, [pc, #12]	; (d6224 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d6218:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d621a:	e9c0 4100 	strd	r4, r1, [r0]
}
   d621e:	bd10      	pop	{r4, pc}
   d6220:	2003e590 	.word	0x2003e590
   d6224:	000de324 	.word	0x000de324

000d6228 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d6228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d622c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d6230:	4604      	mov	r4, r0
   d6232:	4689      	mov	r9, r1
   d6234:	4616      	mov	r6, r2
   d6236:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d6238:	f1b8 0f00 	cmp.w	r8, #0
   d623c:	d002      	beq.n	d6244 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d623e:	6840      	ldr	r0, [r0, #4]
   d6240:	f002 fb8e 	bl	d8960 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6244:	7a21      	ldrb	r1, [r4, #8]
   d6246:	6860      	ldr	r0, [r4, #4]
   d6248:	f002 fb67 	bl	d891a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d624c:	6860      	ldr	r0, [r4, #4]
   d624e:	6803      	ldr	r3, [r0, #0]
   d6250:	4649      	mov	r1, r9
   d6252:	689b      	ldr	r3, [r3, #8]
   d6254:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d6256:	6860      	ldr	r0, [r4, #4]
   d6258:	2100      	movs	r1, #0
   d625a:	f002 fb7d 	bl	d8958 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d625e:	4605      	mov	r5, r0
   d6260:	bb00      	cbnz	r0, d62a4 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6262:	2301      	movs	r3, #1
   d6264:	7a21      	ldrb	r1, [r4, #8]
   d6266:	6860      	ldr	r0, [r4, #4]
   d6268:	463a      	mov	r2, r7
   d626a:	f002 fb44 	bl	d88f6 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d626e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6270:	4603      	mov	r3, r0
        if (count == num) {
   d6272:	d109      	bne.n	d6288 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d6274:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d6276:	42be      	cmp	r6, r7
   d6278:	d01c      	beq.n	d62b4 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d627a:	6860      	ldr	r0, [r4, #4]
   d627c:	6803      	ldr	r3, [r0, #0]
   d627e:	695b      	ldr	r3, [r3, #20]
   d6280:	4798      	blx	r3
   d6282:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d6286:	e7f6      	b.n	d6276 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d6288:	490b      	ldr	r1, [pc, #44]	; (d62b8 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d628a:	480c      	ldr	r0, [pc, #48]	; (d62bc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d628c:	464a      	mov	r2, r9
   d628e:	f7ff ffa0 	bl	d61d2 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d6292:	f1b8 0f00 	cmp.w	r8, #0
   d6296:	d002      	beq.n	d629e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d6298:	6860      	ldr	r0, [r4, #4]
   d629a:	f002 fb6a 	bl	d8972 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d629e:	4628      	mov	r0, r5
   d62a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d62a4:	4603      	mov	r3, r0
   d62a6:	4906      	ldr	r1, [pc, #24]	; (d62c0 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d62a8:	4804      	ldr	r0, [pc, #16]	; (d62bc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d62aa:	464a      	mov	r2, r9
   d62ac:	f7ff ff91 	bl	d61d2 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d62b0:	2500      	movs	r5, #0
   d62b2:	e7ee      	b.n	d6292 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d62b4:	2501      	movs	r5, #1
   d62b6:	e7ec      	b.n	d6292 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d62b8:	000de0d5 	.word	0x000de0d5
   d62bc:	2003e58c 	.word	0x2003e58c
   d62c0:	000de0fa 	.word	0x000de0fa

000d62c4 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d62c4:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d62c6:	9300      	str	r3, [sp, #0]
   d62c8:	2301      	movs	r3, #1
   d62ca:	f7ff ffad 	bl	d6228 <_ZN6AB180513readRegistersEhPhjb>
}
   d62ce:	b003      	add	sp, #12
   d62d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d62d4 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d62d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d62d6:	8943      	ldrh	r3, [r0, #10]
   d62d8:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d62da:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d62dc:	d010      	beq.n	d6300 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d62de:	4e19      	ldr	r6, [pc, #100]	; (d6344 <_ZN6AB180510detectChipEv+0x70>)
   d62e0:	4d19      	ldr	r5, [pc, #100]	; (d6348 <_ZN6AB180510detectChipEv+0x74>)
   d62e2:	f001 f9b5 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d62e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d62ea:	d209      	bcs.n	d6300 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d62ec:	8960      	ldrh	r0, [r4, #10]
   d62ee:	f004 fdb7 	bl	dae60 <digitalRead>
   d62f2:	2801      	cmp	r0, #1
   d62f4:	d004      	beq.n	d6300 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d62f6:	4631      	mov	r1, r6
   d62f8:	4628      	mov	r0, r5
   d62fa:	f7fe f8df 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
   d62fe:	e7f0      	b.n	d62e2 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d6300:	2301      	movs	r3, #1
   d6302:	f10d 0207 	add.w	r2, sp, #7
   d6306:	2128      	movs	r1, #40	; 0x28
   d6308:	4620      	mov	r0, r4
   d630a:	f7ff ffdb 	bl	d62c4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d630e:	b930      	cbnz	r0, d631e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d6310:	480d      	ldr	r0, [pc, #52]	; (d6348 <_ZN6AB180510detectChipEv+0x74>)
   d6312:	490e      	ldr	r1, [pc, #56]	; (d634c <_ZN6AB180510detectChipEv+0x78>)
   d6314:	f7fe f8d2 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
   d6318:	2000      	movs	r0, #0
}
   d631a:	b002      	add	sp, #8
   d631c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d631e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6322:	2b18      	cmp	r3, #24
   d6324:	d1f4      	bne.n	d6310 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d6326:	2301      	movs	r3, #1
   d6328:	f10d 0207 	add.w	r2, sp, #7
   d632c:	2129      	movs	r1, #41	; 0x29
   d632e:	4620      	mov	r0, r4
   d6330:	f7ff ffc8 	bl	d62c4 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d6334:	2800      	cmp	r0, #0
   d6336:	d0eb      	beq.n	d6310 <_ZN6AB180510detectChipEv+0x3c>
   d6338:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d633c:	2b05      	cmp	r3, #5
   d633e:	d1e7      	bne.n	d6310 <_ZN6AB180510detectChipEv+0x3c>
   d6340:	e7eb      	b.n	d631a <_ZN6AB180510detectChipEv+0x46>
   d6342:	bf00      	nop
   d6344:	000de11e 	.word	0x000de11e
   d6348:	2003e58c 	.word	0x2003e58c
   d634c:	000de133 	.word	0x000de133

000d6350 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d6350:	b507      	push	{r0, r1, r2, lr}
   d6352:	4613      	mov	r3, r2
    uint8_t value = 0;
   d6354:	2200      	movs	r2, #0
   d6356:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d635a:	f10d 0207 	add.w	r2, sp, #7
   d635e:	f7ff ffb1 	bl	d62c4 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d6362:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6366:	b003      	add	sp, #12
   d6368:	f85d fb04 	ldr.w	pc, [sp], #4

000d636c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d636c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6370:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d6374:	4604      	mov	r4, r0
   d6376:	460f      	mov	r7, r1
   d6378:	4615      	mov	r5, r2
   d637a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d637c:	f1b8 0f00 	cmp.w	r8, #0
   d6380:	d002      	beq.n	d6388 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d6382:	6840      	ldr	r0, [r0, #4]
   d6384:	f002 faec 	bl	d8960 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6388:	7a21      	ldrb	r1, [r4, #8]
   d638a:	6860      	ldr	r0, [r4, #4]
   d638c:	f002 fac5 	bl	d891a <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6390:	6860      	ldr	r0, [r4, #4]
   d6392:	6803      	ldr	r3, [r0, #0]
   d6394:	4639      	mov	r1, r7
   d6396:	689b      	ldr	r3, [r3, #8]
   d6398:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d639a:	442e      	add	r6, r5
   d639c:	42b5      	cmp	r5, r6
   d639e:	6860      	ldr	r0, [r4, #4]
   d63a0:	d005      	beq.n	d63ae <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d63a2:	6803      	ldr	r3, [r0, #0]
   d63a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d63a8:	689b      	ldr	r3, [r3, #8]
   d63aa:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d63ac:	e7f6      	b.n	d639c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d63ae:	2101      	movs	r1, #1
   d63b0:	f002 fad2 	bl	d8958 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d63b4:	4603      	mov	r3, r0
   d63b6:	b170      	cbz	r0, d63d6 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d63b8:	4908      	ldr	r1, [pc, #32]	; (d63dc <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d63ba:	4809      	ldr	r0, [pc, #36]	; (d63e0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d63bc:	463a      	mov	r2, r7
   d63be:	f7ff ff08 	bl	d61d2 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d63c2:	2500      	movs	r5, #0
    }

    if (lock) {
   d63c4:	f1b8 0f00 	cmp.w	r8, #0
   d63c8:	d002      	beq.n	d63d0 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d63ca:	6860      	ldr	r0, [r4, #4]
   d63cc:	f002 fad1 	bl	d8972 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d63d0:	4628      	mov	r0, r5
   d63d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d63d6:	2501      	movs	r5, #1
   d63d8:	e7f4      	b.n	d63c4 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d63da:	bf00      	nop
   d63dc:	000de140 	.word	0x000de140
   d63e0:	2003e58c 	.word	0x2003e58c

000d63e4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d63e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d63e6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d63ea:	9300      	str	r3, [sp, #0]
   d63ec:	f10d 020f 	add.w	r2, sp, #15
   d63f0:	2301      	movs	r3, #1
   d63f2:	f7ff ffbb 	bl	d636c <_ZN6AB180514writeRegistersEhPKhjb>
}
   d63f6:	b005      	add	sp, #20
   d63f8:	f85d fb04 	ldr.w	pc, [sp], #4

000d63fc <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d63fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d63fe:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d6400:	460c      	mov	r4, r1
   d6402:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d6404:	491a      	ldr	r1, [pc, #104]	; (d6470 <_ZN6AB18056setWDTEi+0x74>)
   d6406:	481b      	ldr	r0, [pc, #108]	; (d6474 <_ZN6AB18056setWDTEi+0x78>)
   d6408:	f7fe f858 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d640c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d640e:	bfb8      	it	lt
   d6410:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d6412:	b97c      	cbnz	r4, d6434 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d6414:	2301      	movs	r3, #1
   d6416:	4622      	mov	r2, r4
   d6418:	211b      	movs	r1, #27
   d641a:	4628      	mov	r0, r5
   d641c:	f7ff ffe2 	bl	d63e4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6420:	4915      	ldr	r1, [pc, #84]	; (d6478 <_ZN6AB18056setWDTEi+0x7c>)
   d6422:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d6424:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6426:	4813      	ldr	r0, [pc, #76]	; (d6474 <_ZN6AB18056setWDTEi+0x78>)
   d6428:	f7ff febc 	bl	d61a4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d642c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d642e:	616c      	str	r4, [r5, #20]
}
   d6430:	4630      	mov	r0, r6
   d6432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d6434:	2c03      	cmp	r4, #3
   d6436:	dd19      	ble.n	d646c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d6438:	10a7      	asrs	r7, r4, #2
   d643a:	2f1f      	cmp	r7, #31
   d643c:	bfa8      	it	ge
   d643e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6440:	00ba      	lsls	r2, r7, #2
   d6442:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d6446:	2301      	movs	r3, #1
   d6448:	b2d2      	uxtb	r2, r2
   d644a:	211b      	movs	r1, #27
   d644c:	4628      	mov	r0, r5
   d644e:	f7ff ffc9 	bl	d63e4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d6452:	463a      	mov	r2, r7
   d6454:	4603      	mov	r3, r0
   d6456:	4909      	ldr	r1, [pc, #36]	; (d647c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6458:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d645a:	4806      	ldr	r0, [pc, #24]	; (d6474 <_ZN6AB18056setWDTEi+0x78>)
   d645c:	f7ff fea2 	bl	d61a4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6460:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d6464:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d6466:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6468:	616f      	str	r7, [r5, #20]
   d646a:	e7e1      	b.n	d6430 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d646c:	2701      	movs	r7, #1
   d646e:	e7e7      	b.n	d6440 <_ZN6AB18056setWDTEi+0x44>
   d6470:	000de165 	.word	0x000de165
   d6474:	2003e58c 	.word	0x2003e58c
   d6478:	000de16f 	.word	0x000de16f
   d647c:	000de18b 	.word	0x000de18b

000d6480 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6480:	460b      	mov	r3, r1
    if (instance) {
   d6482:	4907      	ldr	r1, [pc, #28]	; (d64a0 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6484:	4602      	mov	r2, r0
    if (instance) {
   d6486:	6808      	ldr	r0, [r1, #0]
   d6488:	b148      	cbz	r0, d649e <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d648a:	2b00      	cmp	r3, #0
   d648c:	bf08      	it	eq
   d648e:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d6492:	d104      	bne.n	d649e <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d6494:	68c3      	ldr	r3, [r0, #12]
   d6496:	b113      	cbz	r3, d649e <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d6498:	2100      	movs	r1, #0
   d649a:	f7ff bfaf 	b.w	d63fc <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d649e:	4770      	bx	lr
   d64a0:	2003e590 	.word	0x2003e590

000d64a4 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d64a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d64a8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d64ac:	4605      	mov	r5, r0
   d64ae:	4616      	mov	r6, r2
   d64b0:	461f      	mov	r7, r3
    if (lock) {
   d64b2:	f1b8 0f00 	cmp.w	r8, #0
   d64b6:	d004      	beq.n	d64c2 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d64b8:	6840      	ldr	r0, [r0, #4]
   d64ba:	9101      	str	r1, [sp, #4]
   d64bc:	f002 fa50 	bl	d8960 <_ZN7TwoWire4lockEv>
   d64c0:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d64c2:	9101      	str	r1, [sp, #4]
   d64c4:	2300      	movs	r3, #0
   d64c6:	f10d 020f 	add.w	r2, sp, #15
   d64ca:	4628      	mov	r0, r5
   d64cc:	f7ff fefa 	bl	d62c4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d64d0:	4604      	mov	r4, r0
   d64d2:	b160      	cbz	r0, d64ee <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d64d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d64d8:	ea03 0206 	and.w	r2, r3, r6
   d64dc:	433a      	orrs	r2, r7
        if (newValue != value) {
   d64de:	4293      	cmp	r3, r2
   d64e0:	d005      	beq.n	d64ee <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d64e2:	9901      	ldr	r1, [sp, #4]
   d64e4:	2300      	movs	r3, #0
   d64e6:	4628      	mov	r0, r5
   d64e8:	f7ff ff7c 	bl	d63e4 <_ZN6AB180513writeRegisterEhhb>
   d64ec:	4604      	mov	r4, r0
    if (lock) {
   d64ee:	f1b8 0f00 	cmp.w	r8, #0
   d64f2:	d002      	beq.n	d64fa <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d64f4:	6868      	ldr	r0, [r5, #4]
   d64f6:	f002 fa3c 	bl	d8972 <_ZN7TwoWire6unlockEv>
}
   d64fa:	4620      	mov	r0, r4
   d64fc:	b004      	add	sp, #16
   d64fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6502 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6502:	b513      	push	{r0, r1, r4, lr}
   d6504:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6506:	f10d 0207 	add.w	r2, sp, #7
   d650a:	f7ff fedb 	bl	d62c4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d650e:	b128      	cbz	r0, d651c <_ZN6AB180510isBitClearEhhb+0x1a>
   d6510:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6514:	421c      	tst	r4, r3
   d6516:	bf0c      	ite	eq
   d6518:	2001      	moveq	r0, #1
   d651a:	2000      	movne	r0, #0
}
   d651c:	b002      	add	sp, #8
   d651e:	bd10      	pop	{r4, pc}

000d6520 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6520:	b513      	push	{r0, r1, r4, lr}
   d6522:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6524:	f10d 0207 	add.w	r2, sp, #7
   d6528:	f7ff fecc 	bl	d62c4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d652c:	b128      	cbz	r0, d653a <_ZN6AB18058isBitSetEhhb+0x1a>
   d652e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6532:	421c      	tst	r4, r3
   d6534:	bf14      	ite	ne
   d6536:	2001      	movne	r0, #1
   d6538:	2000      	moveq	r0, #0
}
   d653a:	b002      	add	sp, #8
   d653c:	bd10      	pop	{r4, pc}

000d653e <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d653e:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d6540:	43d2      	mvns	r2, r2
   d6542:	9300      	str	r3, [sp, #0]
   d6544:	b2d2      	uxtb	r2, r2
   d6546:	2300      	movs	r3, #0
   d6548:	f7ff ffac 	bl	d64a4 <_ZN6AB180512maskRegisterEhhhb>
}
   d654c:	b003      	add	sp, #12
   d654e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6554 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d6554:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d6556:	2301      	movs	r3, #1
   d6558:	f10d 0207 	add.w	r2, sp, #7
   d655c:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d655e:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d6560:	f7ff feb0 	bl	d62c4 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d6564:	4605      	mov	r5, r0
   d6566:	b938      	cbnz	r0, d6578 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d6568:	491e      	ldr	r1, [pc, #120]	; (d65e4 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d656a:	481f      	ldr	r0, [pc, #124]	; (d65e8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d656c:	22ad      	movs	r2, #173	; 0xad
   d656e:	f7ff fe30 	bl	d61d2 <_ZNK5spark6Logger5errorEPKcz>
}
   d6572:	4628      	mov	r0, r5
   d6574:	b003      	add	sp, #12
   d6576:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d6578:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d657c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d6580:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d6584:	d00b      	beq.n	d659e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6586:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d6588:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d658a:	210f      	movs	r1, #15
   d658c:	4620      	mov	r0, r4
   d658e:	f7ff ffd6 	bl	d653e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d6592:	4a16      	ldr	r2, [pc, #88]	; (d65ec <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d6594:	4916      	ldr	r1, [pc, #88]	; (d65f0 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d6596:	4814      	ldr	r0, [pc, #80]	; (d65e8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6598:	f7fd ff90 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
   d659c:	e7e9      	b.n	d6572 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d659e:	2208      	movs	r2, #8
   d65a0:	2117      	movs	r1, #23
   d65a2:	4620      	mov	r0, r4
   d65a4:	f7ff ffbc 	bl	d6520 <_ZN6AB18058isBitSetEhhb>
   d65a8:	b118      	cbz	r0, d65b2 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d65aa:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d65ac:	4a11      	ldr	r2, [pc, #68]	; (d65f4 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d65ae:	61e3      	str	r3, [r4, #28]
   d65b0:	e7f0      	b.n	d6594 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d65b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d65b6:	071a      	lsls	r2, r3, #28
   d65b8:	d509      	bpl.n	d65ce <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d65ba:	2303      	movs	r3, #3
   d65bc:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d65be:	2208      	movs	r2, #8
   d65c0:	2301      	movs	r3, #1
   d65c2:	210f      	movs	r1, #15
   d65c4:	4620      	mov	r0, r4
   d65c6:	f7ff ffba 	bl	d653e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d65ca:	4a0b      	ldr	r2, [pc, #44]	; (d65f8 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d65cc:	e7e2      	b.n	d6594 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d65ce:	075b      	lsls	r3, r3, #29
   d65d0:	d5cf      	bpl.n	d6572 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d65d2:	2204      	movs	r2, #4
   d65d4:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d65d6:	2301      	movs	r3, #1
   d65d8:	210f      	movs	r1, #15
   d65da:	4620      	mov	r0, r4
   d65dc:	f7ff ffaf 	bl	d653e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d65e0:	4a06      	ldr	r2, [pc, #24]	; (d65fc <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d65e2:	e7d7      	b.n	d6594 <_ZN6AB180516updateWakeReasonEv+0x40>
   d65e4:	000de1de 	.word	0x000de1de
   d65e8:	2003e58c 	.word	0x2003e58c
   d65ec:	000de1af 	.word	0x000de1af
   d65f0:	000de1fd 	.word	0x000de1fd
   d65f4:	000de1b8 	.word	0x000de1b8
   d65f8:	000de1c8 	.word	0x000de1c8
   d65fc:	000de1d8 	.word	0x000de1d8

000d6600 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6600:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d6602:	9300      	str	r3, [sp, #0]
   d6604:	4613      	mov	r3, r2
   d6606:	22ff      	movs	r2, #255	; 0xff
   d6608:	f7ff ff4c 	bl	d64a4 <_ZN6AB180512maskRegisterEhhhb>
}
   d660c:	b003      	add	sp, #12
   d660e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6614 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6616:	460f      	mov	r7, r1
   d6618:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d661a:	2301      	movs	r3, #1
   d661c:	2200      	movs	r2, #0
   d661e:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6620:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6622:	f7ff fedf 	bl	d63e4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6626:	4604      	mov	r4, r0
   d6628:	b938      	cbnz	r0, d663a <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d662a:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d662e:	491e      	ldr	r1, [pc, #120]	; (d66a8 <_ZN6AB180517setCountdownTimerEib+0x94>)
   d6630:	481e      	ldr	r0, [pc, #120]	; (d66ac <_ZN6AB180517setCountdownTimerEib+0x98>)
   d6632:	f7ff fdce 	bl	d61d2 <_ZNK5spark6Logger5errorEPKcz>
}
   d6636:	4620      	mov	r0, r4
   d6638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d663a:	2301      	movs	r3, #1
   d663c:	2223      	movs	r2, #35	; 0x23
   d663e:	2118      	movs	r1, #24
   d6640:	4628      	mov	r0, r5
   d6642:	f7ff fecf 	bl	d63e4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6646:	4604      	mov	r4, r0
   d6648:	b910      	cbnz	r0, d6650 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d664a:	f240 229b 	movw	r2, #667	; 0x29b
   d664e:	e7ee      	b.n	d662e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d6650:	2fff      	cmp	r7, #255	; 0xff
   d6652:	bfa8      	it	ge
   d6654:	27ff      	movge	r7, #255	; 0xff
   d6656:	2f01      	cmp	r7, #1
   d6658:	bfb8      	it	lt
   d665a:	2701      	movlt	r7, #1
   d665c:	2301      	movs	r3, #1
   d665e:	b2fa      	uxtb	r2, r7
   d6660:	2119      	movs	r1, #25
   d6662:	4628      	mov	r0, r5
   d6664:	f7ff febe 	bl	d63e4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6668:	4604      	mov	r4, r0
   d666a:	b910      	cbnz	r0, d6672 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d666c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d6670:	e7dd      	b.n	d662e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d6672:	2301      	movs	r3, #1
   d6674:	2208      	movs	r2, #8
   d6676:	2112      	movs	r1, #18
   d6678:	4628      	mov	r0, r5
   d667a:	f7ff ffc1 	bl	d6600 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d667e:	4604      	mov	r4, r0
   d6680:	b910      	cbnz	r0, d6688 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d6682:	f240 22af 	movw	r2, #687	; 0x2af
   d6686:	e7d2      	b.n	d662e <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d6688:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d668a:	f04f 0301 	mov.w	r3, #1
   d668e:	bf14      	ite	ne
   d6690:	2283      	movne	r2, #131	; 0x83
   d6692:	2282      	moveq	r2, #130	; 0x82
   d6694:	2118      	movs	r1, #24
   d6696:	4628      	mov	r0, r5
   d6698:	f7ff fea4 	bl	d63e4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d669c:	4604      	mov	r4, r0
   d669e:	2800      	cmp	r0, #0
   d66a0:	d1c9      	bne.n	d6636 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d66a2:	f240 22b9 	movw	r2, #697	; 0x2b9
   d66a6:	e7c2      	b.n	d662e <_ZN6AB180517setCountdownTimerEib+0x1a>
   d66a8:	000de20e 	.word	0x000de20e
   d66ac:	2003e58c 	.word	0x2003e58c

000d66b0 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d66b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d66b4:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d66b6:	4605      	mov	r5, r0
   d66b8:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d66ba:	484f      	ldr	r0, [pc, #316]	; (d67f8 <_ZN6AB180513deepPowerDownEi+0x148>)
   d66bc:	494f      	ldr	r1, [pc, #316]	; (d67fc <_ZN6AB180513deepPowerDownEi+0x14c>)
   d66be:	f7fd fefd 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d66c2:	2100      	movs	r1, #0
   d66c4:	4628      	mov	r0, r5
   d66c6:	f7ff fe99 	bl	d63fc <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d66ca:	4604      	mov	r4, r0
   d66cc:	b948      	cbnz	r0, d66e2 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d66ce:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d66d2:	494b      	ldr	r1, [pc, #300]	; (d6800 <_ZN6AB180513deepPowerDownEi+0x150>)
   d66d4:	4848      	ldr	r0, [pc, #288]	; (d67f8 <_ZN6AB180513deepPowerDownEi+0x148>)
   d66d6:	f7ff fd7c 	bl	d61d2 <_ZNK5spark6Logger5errorEPKcz>
}
   d66da:	4620      	mov	r0, r4
   d66dc:	b003      	add	sp, #12
   d66de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d66e2:	2301      	movs	r3, #1
   d66e4:	461a      	mov	r2, r3
   d66e6:	2130      	movs	r1, #48	; 0x30
   d66e8:	4628      	mov	r0, r5
   d66ea:	f7ff ff89 	bl	d6600 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d66ee:	4604      	mov	r4, r0
   d66f0:	b910      	cbnz	r0, d66f8 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d66f2:	f240 2205 	movw	r2, #517	; 0x205
   d66f6:	e7ec      	b.n	d66d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d66f8:	2210      	movs	r2, #16
   d66fa:	2301      	movs	r3, #1
   d66fc:	4611      	mov	r1, r2
   d66fe:	4628      	mov	r0, r5
   d6700:	f7ff ff1d 	bl	d653e <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d6704:	4604      	mov	r4, r0
   d6706:	b910      	cbnz	r0, d670e <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d6708:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d670c:	e7e1      	b.n	d66d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d670e:	2301      	movs	r3, #1
   d6710:	2226      	movs	r2, #38	; 0x26
   d6712:	2113      	movs	r1, #19
   d6714:	4628      	mov	r0, r5
   d6716:	f7ff fe65 	bl	d63e4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d671a:	4604      	mov	r4, r0
   d671c:	b910      	cbnz	r0, d6724 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d671e:	f240 2213 	movw	r2, #531	; 0x213
   d6722:	e7d6      	b.n	d66d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d6724:	2601      	movs	r6, #1
   d6726:	9600      	str	r6, [sp, #0]
   d6728:	4633      	mov	r3, r6
   d672a:	22fc      	movs	r2, #252	; 0xfc
   d672c:	2111      	movs	r1, #17
   d672e:	4628      	mov	r0, r5
   d6730:	f7ff feb8 	bl	d64a4 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6734:	4604      	mov	r4, r0
   d6736:	b910      	cbnz	r0, d673e <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d6738:	f240 221b 	movw	r2, #539	; 0x21b
   d673c:	e7c9      	b.n	d66d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d673e:	2200      	movs	r2, #0
   d6740:	4639      	mov	r1, r7
   d6742:	4628      	mov	r0, r5
   d6744:	f7ff ff66 	bl	d6614 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d6748:	4604      	mov	r4, r0
   d674a:	b910      	cbnz	r0, d6752 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d674c:	f240 2222 	movw	r2, #546	; 0x222
   d6750:	e7bf      	b.n	d66d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d6752:	9600      	str	r6, [sp, #0]
   d6754:	2302      	movs	r3, #2
   d6756:	2277      	movs	r2, #119	; 0x77
   d6758:	2110      	movs	r1, #16
   d675a:	4628      	mov	r0, r5
   d675c:	f7ff fea2 	bl	d64a4 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6760:	4604      	mov	r4, r0
   d6762:	b910      	cbnz	r0, d676a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d6764:	f240 222b 	movw	r2, #555	; 0x22b
   d6768:	e7b3      	b.n	d66d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d676a:	4633      	mov	r3, r6
   d676c:	2204      	movs	r2, #4
   d676e:	211c      	movs	r1, #28
   d6770:	4628      	mov	r0, r5
   d6772:	f7ff ff45 	bl	d6600 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6776:	4604      	mov	r4, r0
   d6778:	b910      	cbnz	r0, d6780 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d677a:	f240 2232 	movw	r2, #562	; 0x232
   d677e:	e7a8      	b.n	d66d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d6780:	9600      	str	r6, [sp, #0]
   d6782:	2318      	movs	r3, #24
   d6784:	22e3      	movs	r2, #227	; 0xe3
   d6786:	2111      	movs	r1, #17
   d6788:	4628      	mov	r0, r5
   d678a:	f7ff fe8b 	bl	d64a4 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d678e:	4604      	mov	r4, r0
   d6790:	b910      	cbnz	r0, d6798 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d6792:	f240 2239 	movw	r2, #569	; 0x239
   d6796:	e79c      	b.n	d66d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d6798:	4633      	mov	r3, r6
   d679a:	22c0      	movs	r2, #192	; 0xc0
   d679c:	2117      	movs	r1, #23
   d679e:	4628      	mov	r0, r5
   d67a0:	f7ff fe20 	bl	d63e4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d67a4:	4604      	mov	r4, r0
   d67a6:	b910      	cbnz	r0, d67ae <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d67a8:	f44f 7210 	mov.w	r2, #576	; 0x240
   d67ac:	e791      	b.n	d66d2 <_ZN6AB180513deepPowerDownEi+0x22>
   d67ae:	f000 ff4f 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d67b2:	f8df 9054 	ldr.w	r9, [pc, #84]	; d6808 <_ZN6AB180513deepPowerDownEi+0x158>
   d67b6:	f8df 8040 	ldr.w	r8, [pc, #64]	; d67f8 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d67ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d67be:	4606      	mov	r6, r0
   d67c0:	434f      	muls	r7, r1
   d67c2:	f000 ff45 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
   d67c6:	1b80      	subs	r0, r0, r6
   d67c8:	42b8      	cmp	r0, r7
   d67ca:	d20e      	bcs.n	d67ea <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d67cc:	2201      	movs	r2, #1
   d67ce:	2117      	movs	r1, #23
   d67d0:	4628      	mov	r0, r5
   d67d2:	f7ff fdbd 	bl	d6350 <_ZN6AB180512readRegisterEhb>
   d67d6:	4649      	mov	r1, r9
   d67d8:	4602      	mov	r2, r0
   d67da:	4640      	mov	r0, r8
   d67dc:	f7fd fe6e 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d67e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d67e4:	f001 faa4 	bl	d7d30 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d67e8:	e7eb      	b.n	d67c2 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d67ea:	4906      	ldr	r1, [pc, #24]	; (d6804 <_ZN6AB180513deepPowerDownEi+0x154>)
   d67ec:	4802      	ldr	r0, [pc, #8]	; (d67f8 <_ZN6AB180513deepPowerDownEi+0x148>)
   d67ee:	f7ff fcf0 	bl	d61d2 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d67f2:	f003 fe41 	bl	da478 <_ZN11SystemClass5resetEv>
    return true;
   d67f6:	e770      	b.n	d66da <_ZN6AB180513deepPowerDownEi+0x2a>
   d67f8:	2003e58c 	.word	0x2003e58c
   d67fc:	000de239 	.word	0x000de239
   d6800:	000de22e 	.word	0x000de22e
   d6804:	000de25f 	.word	0x000de25f
   d6808:	000de24a 	.word	0x000de24a

000d680c <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d680c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6810:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6814:	4605      	mov	r5, r0
   d6816:	460c      	mov	r4, r1
   d6818:	4691      	mov	r9, r2
   d681a:	461f      	mov	r7, r3
    if (lock) {
   d681c:	f1ba 0f00 	cmp.w	sl, #0
   d6820:	d002      	beq.n	d6828 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6822:	6840      	ldr	r0, [r0, #4]
   d6824:	f002 f89c 	bl	d8960 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6828:	b307      	cbz	r7, d686c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d682a:	2f20      	cmp	r7, #32
   d682c:	463e      	mov	r6, r7
   d682e:	bf28      	it	cs
   d6830:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6832:	2c7f      	cmp	r4, #127	; 0x7f
   d6834:	d826      	bhi.n	d6884 <_ZN6AB18057readRamEjPhjb+0x78>
   d6836:	1933      	adds	r3, r6, r4
   d6838:	2b80      	cmp	r3, #128	; 0x80
   d683a:	d901      	bls.n	d6840 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d683c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6840:	2301      	movs	r3, #1
   d6842:	2204      	movs	r2, #4
   d6844:	213f      	movs	r1, #63	; 0x3f
   d6846:	4628      	mov	r0, r5
   d6848:	f7ff fe79 	bl	d653e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d684c:	2300      	movs	r3, #0
   d684e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6852:	9300      	str	r3, [sp, #0]
   d6854:	464a      	mov	r2, r9
   d6856:	4633      	mov	r3, r6
   d6858:	b2c9      	uxtb	r1, r1
   d685a:	4628      	mov	r0, r5
   d685c:	f7ff fce4 	bl	d6228 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6860:	4680      	mov	r8, r0
   d6862:	b128      	cbz	r0, d6870 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6864:	4434      	add	r4, r6
        dataLen -= count;
   d6866:	1bbf      	subs	r7, r7, r6
        data += count;
   d6868:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d686a:	e7dd      	b.n	d6828 <_ZN6AB18057readRamEjPhjb+0x1c>
   d686c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6870:	f1ba 0f00 	cmp.w	sl, #0
   d6874:	d002      	beq.n	d687c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6876:	6868      	ldr	r0, [r5, #4]
   d6878:	f002 f87b 	bl	d8972 <_ZN7TwoWire6unlockEv>
}
   d687c:	4640      	mov	r0, r8
   d687e:	b002      	add	sp, #8
   d6880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6884:	2301      	movs	r3, #1
   d6886:	2204      	movs	r2, #4
   d6888:	213f      	movs	r1, #63	; 0x3f
   d688a:	4628      	mov	r0, r5
   d688c:	f7ff feb8 	bl	d6600 <_ZN6AB180514setRegisterBitEhhb>
   d6890:	e7dc      	b.n	d684c <_ZN6AB18057readRamEjPhjb+0x40>

000d6892 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6892:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6896:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d689a:	4605      	mov	r5, r0
   d689c:	460c      	mov	r4, r1
   d689e:	4691      	mov	r9, r2
   d68a0:	461f      	mov	r7, r3
    if (lock) {
   d68a2:	f1ba 0f00 	cmp.w	sl, #0
   d68a6:	d002      	beq.n	d68ae <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d68a8:	6840      	ldr	r0, [r0, #4]
   d68aa:	f002 f859 	bl	d8960 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d68ae:	b307      	cbz	r7, d68f2 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d68b0:	2f1f      	cmp	r7, #31
   d68b2:	463e      	mov	r6, r7
   d68b4:	bf28      	it	cs
   d68b6:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d68b8:	2c7f      	cmp	r4, #127	; 0x7f
   d68ba:	d826      	bhi.n	d690a <_ZN6AB18058writeRamEjPKhjb+0x78>
   d68bc:	1933      	adds	r3, r6, r4
   d68be:	2b80      	cmp	r3, #128	; 0x80
   d68c0:	d901      	bls.n	d68c6 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d68c2:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d68c6:	2301      	movs	r3, #1
   d68c8:	2204      	movs	r2, #4
   d68ca:	213f      	movs	r1, #63	; 0x3f
   d68cc:	4628      	mov	r0, r5
   d68ce:	f7ff fe36 	bl	d653e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d68d2:	2300      	movs	r3, #0
   d68d4:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d68d8:	9300      	str	r3, [sp, #0]
   d68da:	464a      	mov	r2, r9
   d68dc:	4633      	mov	r3, r6
   d68de:	b2c9      	uxtb	r1, r1
   d68e0:	4628      	mov	r0, r5
   d68e2:	f7ff fd43 	bl	d636c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d68e6:	4680      	mov	r8, r0
   d68e8:	b128      	cbz	r0, d68f6 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d68ea:	4434      	add	r4, r6
        dataLen -= count;
   d68ec:	1bbf      	subs	r7, r7, r6
        data += count;
   d68ee:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d68f0:	e7dd      	b.n	d68ae <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d68f2:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d68f6:	f1ba 0f00 	cmp.w	sl, #0
   d68fa:	d002      	beq.n	d6902 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d68fc:	6868      	ldr	r0, [r5, #4]
   d68fe:	f002 f838 	bl	d8972 <_ZN7TwoWire6unlockEv>
}
   d6902:	4640      	mov	r0, r8
   d6904:	b002      	add	sp, #8
   d6906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d690a:	2301      	movs	r3, #1
   d690c:	2204      	movs	r2, #4
   d690e:	213f      	movs	r1, #63	; 0x3f
   d6910:	4628      	mov	r0, r5
   d6912:	f7ff fe75 	bl	d6600 <_ZN6AB180514setRegisterBitEhhb>
   d6916:	e7dc      	b.n	d68d2 <_ZN6AB18058writeRamEjPKhjb+0x40>

000d6918 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d6918:	b530      	push	{r4, r5, lr}
   d691a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d691c:	680d      	ldr	r5, [r1, #0]
   d691e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6922:	9503      	str	r5, [sp, #12]
   d6924:	684d      	ldr	r5, [r1, #4]
   d6926:	9502      	str	r5, [sp, #8]
   d6928:	688d      	ldr	r5, [r1, #8]
   d692a:	9501      	str	r5, [sp, #4]
   d692c:	68c9      	ldr	r1, [r1, #12]
   d692e:	9100      	str	r1, [sp, #0]
   d6930:	3301      	adds	r3, #1
   d6932:	4904      	ldr	r1, [pc, #16]	; (d6944 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6934:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d6938:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d693a:	f003 fd0f 	bl	da35c <_ZN6String6formatEPKcz>
}
   d693e:	4620      	mov	r0, r4
   d6940:	b005      	add	sp, #20
   d6942:	bd30      	pop	{r4, r5, pc}
   d6944:	000de271 	.word	0x000de271

000d6948 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6948:	1103      	asrs	r3, r0, #4
}
   d694a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d694c:	f000 000f 	and.w	r0, r0, #15
}
   d6950:	fb02 0003 	mla	r0, r2, r3, r0
   d6954:	4770      	bx	lr

000d6956 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6956:	b538      	push	{r3, r4, r5, lr}
   d6958:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d695a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d695c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d695e:	f7ff fff3 	bl	d6948 <_ZN6AB180510bcdToValueEh>
   d6962:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6964:	7860      	ldrb	r0, [r4, #1]
   d6966:	f7ff ffef 	bl	d6948 <_ZN6AB180510bcdToValueEh>
   d696a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d696c:	78a0      	ldrb	r0, [r4, #2]
   d696e:	f7ff ffeb 	bl	d6948 <_ZN6AB180510bcdToValueEh>
   d6972:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6974:	78e0      	ldrb	r0, [r4, #3]
   d6976:	f7ff ffe7 	bl	d6948 <_ZN6AB180510bcdToValueEh>
   d697a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d697c:	7920      	ldrb	r0, [r4, #4]
   d697e:	f7ff ffe3 	bl	d6948 <_ZN6AB180510bcdToValueEh>
   d6982:	3801      	subs	r0, #1
   d6984:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6986:	b92d      	cbnz	r5, d6994 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6988:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d698a:	7828      	ldrb	r0, [r5, #0]
   d698c:	f7ff ffdc 	bl	d6948 <_ZN6AB180510bcdToValueEh>
   d6990:	6188      	str	r0, [r1, #24]
}
   d6992:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6994:	7960      	ldrb	r0, [r4, #5]
   d6996:	f7ff ffd7 	bl	d6948 <_ZN6AB180510bcdToValueEh>
   d699a:	3064      	adds	r0, #100	; 0x64
   d699c:	1da5      	adds	r5, r4, #6
   d699e:	6148      	str	r0, [r1, #20]
   d69a0:	e7f3      	b.n	d698a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d69a4 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d69a4:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d69a6:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d69a8:	b088      	sub	sp, #32
   d69aa:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d69ac:	461a      	mov	r2, r3
   d69ae:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d69b0:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d69b2:	f7ff fda6 	bl	d6502 <_ZN6AB180510isBitClearEhhb>
   d69b6:	b1f0      	cbz	r0, d69f6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d69b8:	2308      	movs	r3, #8
   d69ba:	2601      	movs	r6, #1
   d69bc:	4620      	mov	r0, r4
   d69be:	9600      	str	r6, [sp, #0]
   d69c0:	eb0d 0203 	add.w	r2, sp, r3
   d69c4:	2100      	movs	r1, #0
   d69c6:	f7ff fc2f 	bl	d6228 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d69ca:	4604      	mov	r4, r0
   d69cc:	b198      	cbz	r0, d69f6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d69ce:	4632      	mov	r2, r6
   d69d0:	4629      	mov	r1, r5
   d69d2:	f10d 0009 	add.w	r0, sp, #9
   d69d6:	f7ff ffbe 	bl	d6956 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d69da:	a804      	add	r0, sp, #16
   d69dc:	f7ff ff9c 	bl	d6918 <_ZN6AB180510tmToStringEPK2tm>
   d69e0:	4808      	ldr	r0, [pc, #32]	; (d6a04 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d69e2:	9a04      	ldr	r2, [sp, #16]
   d69e4:	4908      	ldr	r1, [pc, #32]	; (d6a08 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d69e6:	f7fd fd69 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
   d69ea:	a804      	add	r0, sp, #16
   d69ec:	f003 fbea 	bl	da1c4 <_ZN6StringD1Ev>
}
   d69f0:	4620      	mov	r0, r4
   d69f2:	b008      	add	sp, #32
   d69f4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d69f6:	2224      	movs	r2, #36	; 0x24
   d69f8:	2100      	movs	r1, #0
   d69fa:	4628      	mov	r0, r5
   d69fc:	f005 f8b0 	bl	dbb60 <memset>
   d6a00:	2400      	movs	r4, #0
   d6a02:	e7f5      	b.n	d69f0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d6a04:	2003e58c 	.word	0x2003e58c
   d6a08:	000de28f 	.word	0x000de28f

000d6a0c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d6a0c:	b530      	push	{r4, r5, lr}
   d6a0e:	b08b      	sub	sp, #44	; 0x2c
   d6a10:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6a12:	a901      	add	r1, sp, #4
   d6a14:	f7ff ffc6 	bl	d69a4 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d6a18:	4604      	mov	r4, r0
   d6a1a:	b120      	cbz	r0, d6a26 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d6a1c:	a801      	add	r0, sp, #4
   d6a1e:	f001 f973 	bl	d7d08 <mktime>
   d6a22:	e9c5 0100 	strd	r0, r1, [r5]
}
   d6a26:	4620      	mov	r0, r4
   d6a28:	b00b      	add	sp, #44	; 0x2c
   d6a2a:	bd30      	pop	{r4, r5, pc}

000d6a2c <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d6a2c:	b510      	push	{r4, lr}
   d6a2e:	4604      	mov	r4, r0
   d6a30:	b088      	sub	sp, #32
    if (callBegin) {
   d6a32:	b111      	cbz	r1, d6a3a <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d6a34:	6840      	ldr	r0, [r0, #4]
   d6a36:	f001 ff41 	bl	d88bc <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d6a3a:	4620      	mov	r0, r4
   d6a3c:	f7ff fc4a 	bl	d62d4 <_ZN6AB180510detectChipEv>
   d6a40:	b370      	cbz	r0, d6aa0 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6a42:	4620      	mov	r0, r4
   d6a44:	f7ff fd86 	bl	d6554 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6a48:	2301      	movs	r3, #1
   d6a4a:	461a      	mov	r2, r3
   d6a4c:	2110      	movs	r1, #16
   d6a4e:	4620      	mov	r0, r4
   d6a50:	f7ff fd57 	bl	d6502 <_ZN6AB180510isBitClearEhhb>
   d6a54:	b1d8      	cbz	r0, d6a8e <_ZN6AB18055setupEb+0x62>
   d6a56:	f003 ff6f 	bl	da938 <_ZN9TimeClass7isValidEv>
   d6a5a:	b9c0      	cbnz	r0, d6a8e <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6a5c:	a902      	add	r1, sp, #8
   d6a5e:	4620      	mov	r0, r4
   d6a60:	f7ff ffd4 	bl	d6a0c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6a68:	f003 fe6c 	bl	da744 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6a6c:	4b0f      	ldr	r3, [pc, #60]	; (d6aac <_ZN6AB18055setupEb+0x80>)
   d6a6e:	4910      	ldr	r1, [pc, #64]	; (d6ab0 <_ZN6AB18055setupEb+0x84>)
   d6a70:	681b      	ldr	r3, [r3, #0]
   d6a72:	9300      	str	r3, [sp, #0]
   d6a74:	a804      	add	r0, sp, #16
   d6a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6a7a:	f003 ff1b 	bl	da8b4 <_ZN9TimeClass6formatExPKc>
   d6a7e:	480d      	ldr	r0, [pc, #52]	; (d6ab4 <_ZN6AB18055setupEb+0x88>)
   d6a80:	9a04      	ldr	r2, [sp, #16]
   d6a82:	490d      	ldr	r1, [pc, #52]	; (d6ab8 <_ZN6AB18055setupEb+0x8c>)
   d6a84:	f7fd fd1a 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
   d6a88:	a804      	add	r0, sp, #16
   d6a8a:	f003 fb9b 	bl	da1c4 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6a8e:	4a0b      	ldr	r2, [pc, #44]	; (d6abc <_ZN6AB18055setupEb+0x90>)
   d6a90:	2300      	movs	r3, #0
   d6a92:	2100      	movs	r1, #0
   d6a94:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6a98:	f000 ffa4 	bl	d79e4 <system_subscribe_event>
}
   d6a9c:	b008      	add	sp, #32
   d6a9e:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6aa0:	4907      	ldr	r1, [pc, #28]	; (d6ac0 <_ZN6AB18055setupEb+0x94>)
   d6aa2:	4804      	ldr	r0, [pc, #16]	; (d6ab4 <_ZN6AB18055setupEb+0x88>)
   d6aa4:	f7ff fb95 	bl	d61d2 <_ZNK5spark6Logger5errorEPKcz>
   d6aa8:	e7f1      	b.n	d6a8e <_ZN6AB18055setupEb+0x62>
   d6aaa:	bf00      	nop
   d6aac:	2003e1c8 	.word	0x2003e1c8
   d6ab0:	2003e634 	.word	0x2003e634
   d6ab4:	2003e58c 	.word	0x2003e58c
   d6ab8:	000de29d 	.word	0x000de29d
   d6abc:	000d6481 	.word	0x000d6481
   d6ac0:	000de2ba 	.word	0x000de2ba

000d6ac4 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6ac4:	220a      	movs	r2, #10
   d6ac6:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d6aca:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d6ace:	fb93 f1f2 	sdiv	r1, r3, r2
   d6ad2:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6ad6:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d6ada:	b2c0      	uxtb	r0, r0
   d6adc:	4770      	bx	lr

000d6ade <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6ade:	b570      	push	{r4, r5, r6, lr}
   d6ae0:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6ae2:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6ae4:	460c      	mov	r4, r1
   d6ae6:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6ae8:	f7ff ffec 	bl	d6ac4 <_ZN6AB180510valueToBcdEi>
   d6aec:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d6aee:	6868      	ldr	r0, [r5, #4]
   d6af0:	f7ff ffe8 	bl	d6ac4 <_ZN6AB180510valueToBcdEi>
   d6af4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d6af6:	68a8      	ldr	r0, [r5, #8]
   d6af8:	f7ff ffe4 	bl	d6ac4 <_ZN6AB180510valueToBcdEi>
   d6afc:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d6afe:	68e8      	ldr	r0, [r5, #12]
   d6b00:	f7ff ffe0 	bl	d6ac4 <_ZN6AB180510valueToBcdEi>
   d6b04:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6b06:	6928      	ldr	r0, [r5, #16]
   d6b08:	3001      	adds	r0, #1
   d6b0a:	f7ff ffdb 	bl	d6ac4 <_ZN6AB180510valueToBcdEi>
   d6b0e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d6b10:	b92e      	cbnz	r6, d6b1e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6b12:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d6b14:	69a8      	ldr	r0, [r5, #24]
   d6b16:	f7ff ffd5 	bl	d6ac4 <_ZN6AB180510valueToBcdEi>
   d6b1a:	7030      	strb	r0, [r6, #0]
}
   d6b1c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d6b1e:	696a      	ldr	r2, [r5, #20]
   d6b20:	2364      	movs	r3, #100	; 0x64
   d6b22:	fb92 f0f3 	sdiv	r0, r2, r3
   d6b26:	fb03 2010 	mls	r0, r3, r0, r2
   d6b2a:	f7ff ffcb 	bl	d6ac4 <_ZN6AB180510valueToBcdEi>
   d6b2e:	1da6      	adds	r6, r4, #6
   d6b30:	7160      	strb	r0, [r4, #5]
   d6b32:	e7ef      	b.n	d6b14 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d6b34 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b36:	b087      	sub	sp, #28
   d6b38:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6b3a:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6b3c:	4616      	mov	r6, r2
   d6b3e:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6b40:	f7ff feea 	bl	d6918 <_ZN6AB180510tmToStringEPK2tm>
   d6b44:	481e      	ldr	r0, [pc, #120]	; (d6bc0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6b46:	9a02      	ldr	r2, [sp, #8]
   d6b48:	491e      	ldr	r1, [pc, #120]	; (d6bc4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d6b4a:	f7fd fcb7 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
   d6b4e:	a802      	add	r0, sp, #8
   d6b50:	f003 fb38 	bl	da1c4 <_ZN6StringD1Ev>
    if (lock) {
   d6b54:	b116      	cbz	r6, d6b5c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d6b56:	6868      	ldr	r0, [r5, #4]
   d6b58:	f001 ff02 	bl	d8960 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	2201      	movs	r2, #1
   d6b60:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6b64:	2700      	movs	r7, #0
   d6b66:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d6b6a:	f7ff ffb8 	bl	d6ade <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6b6e:	2301      	movs	r3, #1
   d6b70:	461a      	mov	r2, r3
   d6b72:	2110      	movs	r1, #16
   d6b74:	4628      	mov	r0, r5
   d6b76:	f7ff fd43 	bl	d6600 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d6b7a:	4604      	mov	r4, r0
   d6b7c:	b1e8      	cbz	r0, d6bba <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d6b7e:	2308      	movs	r3, #8
   d6b80:	9700      	str	r7, [sp, #0]
   d6b82:	eb0d 0203 	add.w	r2, sp, r3
   d6b86:	4639      	mov	r1, r7
   d6b88:	4628      	mov	r0, r5
   d6b8a:	f7ff fbef 	bl	d636c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d6b8e:	4604      	mov	r4, r0
   d6b90:	b160      	cbz	r0, d6bac <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6b92:	2301      	movs	r3, #1
   d6b94:	461a      	mov	r2, r3
   d6b96:	2110      	movs	r1, #16
   d6b98:	4628      	mov	r0, r5
   d6b9a:	f7ff fcd0 	bl	d653e <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d6b9e:	b116      	cbz	r6, d6ba6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d6ba0:	6868      	ldr	r0, [r5, #4]
   d6ba2:	f001 fee6 	bl	d8972 <_ZN7TwoWire6unlockEv>
}
   d6ba6:	4620      	mov	r0, r4
   d6ba8:	b007      	add	sp, #28
   d6baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d6bac:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d6bb0:	4905      	ldr	r1, [pc, #20]	; (d6bc8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d6bb2:	4803      	ldr	r0, [pc, #12]	; (d6bc0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6bb4:	f7ff fb0d 	bl	d61d2 <_ZNK5spark6Logger5errorEPKcz>
   d6bb8:	e7f1      	b.n	d6b9e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d6bba:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d6bbe:	e7f7      	b.n	d6bb0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d6bc0:	2003e58c 	.word	0x2003e58c
   d6bc4:	000de2d2 	.word	0x000de2d2
   d6bc8:	000de2e0 	.word	0x000de2e0

000d6bcc <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6bcc:	b513      	push	{r0, r1, r4, lr}
   d6bce:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d6bd0:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6bd2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d6bd6:	f004 ff89 	bl	dbaec <gmtime>
    return setRtcFromTm(tm, lock);
   d6bda:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d6bde:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d6be0:	4620      	mov	r0, r4
   d6be2:	f7ff ffa7 	bl	d6b34 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d6be6:	b002      	add	sp, #8
   d6be8:	bd10      	pop	{r4, pc}
	...

000d6bec <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d6bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6bee:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d6bf0:	b089      	sub	sp, #36	; 0x24
   d6bf2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6bf4:	bb75      	cbnz	r5, d6c54 <_ZN6AB18054loopEv+0x68>
   d6bf6:	f003 fe9f 	bl	da938 <_ZN9TimeClass7isValidEv>
   d6bfa:	b358      	cbz	r0, d6c54 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d6bfc:	2600      	movs	r6, #0
   d6bfe:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d6c00:	a904      	add	r1, sp, #16
   d6c02:	4628      	mov	r0, r5
        tm = 0;
   d6c04:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d6c08:	f000 ff9e 	bl	d7b48 <spark_sync_time_last>
   d6c0c:	b310      	cbz	r0, d6c54 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d6c0e:	2501      	movs	r5, #1
   d6c10:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d6c12:	f003 feae 	bl	da972 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d6c16:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d6c18:	4602      	mov	r2, r0
   d6c1a:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d6c1c:	4620      	mov	r0, r4
        time_t time = Time.now();
   d6c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d6c22:	f7ff ffd3 	bl	d6bcc <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d6c26:	a902      	add	r1, sp, #8
   d6c28:	4620      	mov	r0, r4
        time = 0;
   d6c2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d6c2e:	f7ff feed 	bl	d6a0c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6c32:	4b12      	ldr	r3, [pc, #72]	; (d6c7c <_ZN6AB18054loopEv+0x90>)
   d6c34:	4912      	ldr	r1, [pc, #72]	; (d6c80 <_ZN6AB18054loopEv+0x94>)
   d6c36:	681b      	ldr	r3, [r3, #0]
   d6c38:	9300      	str	r3, [sp, #0]
   d6c3a:	a804      	add	r0, sp, #16
   d6c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6c40:	f003 fe38 	bl	da8b4 <_ZN9TimeClass6formatExPKc>
   d6c44:	480f      	ldr	r0, [pc, #60]	; (d6c84 <_ZN6AB18054loopEv+0x98>)
   d6c46:	9a04      	ldr	r2, [sp, #16]
   d6c48:	490f      	ldr	r1, [pc, #60]	; (d6c88 <_ZN6AB18054loopEv+0x9c>)
   d6c4a:	f7fd fc37 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
   d6c4e:	a804      	add	r0, sp, #16
   d6c50:	f003 fab8 	bl	da1c4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6c54:	6963      	ldr	r3, [r4, #20]
   d6c56:	b173      	cbz	r3, d6c76 <_ZN6AB18054loopEv+0x8a>
   d6c58:	f000 fcfa 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d6c5c:	6923      	ldr	r3, [r4, #16]
   d6c5e:	1ac0      	subs	r0, r0, r3
   d6c60:	6963      	ldr	r3, [r4, #20]
   d6c62:	4298      	cmp	r0, r3
   d6c64:	d307      	bcc.n	d6c76 <_ZN6AB18054loopEv+0x8a>
   d6c66:	f000 fcf3 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d6c6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d6c6e:	6120      	str	r0, [r4, #16]
            setWDT();
   d6c70:	4620      	mov	r0, r4
   d6c72:	f7ff fbc3 	bl	d63fc <_ZN6AB18056setWDTEi>
}
   d6c76:	b009      	add	sp, #36	; 0x24
   d6c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6c7a:	bf00      	nop
   d6c7c:	2003e1c8 	.word	0x2003e1c8
   d6c80:	2003e634 	.word	0x2003e634
   d6c84:	2003e58c 	.word	0x2003e58c
   d6c88:	000de2fb 	.word	0x000de2fb

000d6c8c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d6c8c:	4b01      	ldr	r3, [pc, #4]	; (d6c94 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d6c8e:	4a02      	ldr	r2, [pc, #8]	; (d6c98 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6c90:	601a      	str	r2, [r3, #0]
}
   d6c92:	4770      	bx	lr
   d6c94:	2003e58c 	.word	0x2003e58c
   d6c98:	000de311 	.word	0x000de311

000d6c9c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d6c9c:	4770      	bx	lr

000d6c9e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d6c9e:	b510      	push	{r4, lr}
}
   d6ca0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d6ca2:	4604      	mov	r4, r0
}
   d6ca4:	f004 f98b 	bl	dafbe <_ZdlPvj>
   d6ca8:	4620      	mov	r0, r4
   d6caa:	bd10      	pop	{r4, pc}

000d6cac <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d6cac:	6803      	ldr	r3, [r0, #0]
   d6cae:	b2c9      	uxtb	r1, r1
   d6cb0:	689b      	ldr	r3, [r3, #8]
   d6cb2:	4718      	bx	r3

000d6cb4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d6cb4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d6cb6:	4d03      	ldr	r5, [pc, #12]	; (d6cc4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d6cb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d6cbc:	e9c0 5100 	strd	r5, r1, [r0]
}
   d6cc0:	bd30      	pop	{r4, r5, pc}
   d6cc2:	bf00      	nop
   d6cc4:	000de368 	.word	0x000de368

000d6cc8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d6cc8:	6840      	ldr	r0, [r0, #4]
   d6cca:	f001 bdf7 	b.w	d88bc <_ZN7TwoWire5beginEv>

000d6cce <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6cce:	b510      	push	{r4, lr}
   d6cd0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6cd2:	6800      	ldr	r0, [r0, #0]
   d6cd4:	f001 fe4d 	bl	d8972 <_ZN7TwoWire6unlockEv>
   d6cd8:	4620      	mov	r0, r4
   d6cda:	bd10      	pop	{r4, pc}

000d6cdc <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d6cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ce0:	b08a      	sub	sp, #40	; 0x28
   d6ce2:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d6ce4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6ce6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6ce8:	f001 fe3a 	bl	d8960 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d6cec:	221e      	movs	r2, #30
   d6cee:	2100      	movs	r1, #0
   d6cf0:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d6cf2:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d6cf4:	f004 ff34 	bl	dbb60 <memset>
		size_t framAddr = 0;
   d6cf8:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d6cfa:	b1ef      	cbz	r7, d6d38 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d6cfc:	6823      	ldr	r3, [r4, #0]
   d6cfe:	2f1e      	cmp	r7, #30
   d6d00:	46b8      	mov	r8, r7
   d6d02:	bf28      	it	cs
   d6d04:	f04f 081e 	movcs.w	r8, #30
   d6d08:	68dd      	ldr	r5, [r3, #12]
   d6d0a:	aa02      	add	r2, sp, #8
   d6d0c:	4643      	mov	r3, r8
   d6d0e:	4631      	mov	r1, r6
   d6d10:	4620      	mov	r0, r4
   d6d12:	47a8      	blx	r5
			if (!result) {
   d6d14:	4605      	mov	r5, r0
   d6d16:	b958      	cbnz	r0, d6d30 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d6d18:	480a      	ldr	r0, [pc, #40]	; (d6d44 <_ZN6MB85RC5eraseEv+0x68>)
   d6d1a:	490b      	ldr	r1, [pc, #44]	; (d6d48 <_ZN6MB85RC5eraseEv+0x6c>)
   d6d1c:	4632      	mov	r2, r6
   d6d1e:	f7fd fbcd 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d6d22:	a801      	add	r0, sp, #4
   d6d24:	f7ff ffd3 	bl	d6cce <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d6d28:	4628      	mov	r0, r5
   d6d2a:	b00a      	add	sp, #40	; 0x28
   d6d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d6d30:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d6d34:	4446      	add	r6, r8
		while(totalLen > 0) {
   d6d36:	e7e0      	b.n	d6cfa <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d6d38:	a801      	add	r0, sp, #4
   d6d3a:	f7ff ffc8 	bl	d6cce <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d6d3e:	2501      	movs	r5, #1
   d6d40:	e7f2      	b.n	d6d28 <_ZN6MB85RC5eraseEv+0x4c>
   d6d42:	bf00      	nop
   d6d44:	2003e5e0 	.word	0x2003e5e0
   d6d48:	000de334 	.word	0x000de334

000d6d4c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6d4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6d50:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6d52:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d54:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6d56:	460d      	mov	r5, r1
   d6d58:	4616      	mov	r6, r2
   d6d5a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d6d5c:	f001 fe00 	bl	d8960 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d6d60:	b1a7      	cbz	r7, d6d8c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6d62:	68e1      	ldr	r1, [r4, #12]
   d6d64:	6860      	ldr	r0, [r4, #4]
   d6d66:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6d6a:	f001 fdda 	bl	d8922 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6d6e:	0a29      	lsrs	r1, r5, #8
   d6d70:	6860      	ldr	r0, [r4, #4]
   d6d72:	f7ff ff9b 	bl	d6cac <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6d76:	4629      	mov	r1, r5
   d6d78:	6860      	ldr	r0, [r4, #4]
   d6d7a:	f7ff ff97 	bl	d6cac <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d6d7e:	6860      	ldr	r0, [r4, #4]
   d6d80:	2100      	movs	r1, #0
   d6d82:	f001 fde9 	bl	d8958 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6d86:	b148      	cbz	r0, d6d9c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d6d88:	2400      	movs	r4, #0
   d6d8a:	e000      	b.n	d6d8e <_ZN6MB85RC8readDataEjPhj+0x42>
   d6d8c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6d8e:	a801      	add	r0, sp, #4
   d6d90:	f7ff ff9d 	bl	d6cce <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d6d94:	4620      	mov	r0, r4
   d6d96:	b003      	add	sp, #12
   d6d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d6d9c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d6d9e:	7b21      	ldrb	r1, [r4, #12]
   d6da0:	6860      	ldr	r0, [r4, #4]
   d6da2:	46b8      	mov	r8, r7
   d6da4:	bf28      	it	cs
   d6da6:	f04f 0820 	movcs.w	r8, #32
   d6daa:	2301      	movs	r3, #1
   d6dac:	4642      	mov	r2, r8
   d6dae:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6db2:	f001 fda0 	bl	d88f6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d6db6:	f004 f8ad 	bl	daf14 <_Z19__fetch_global_Wirev>
   d6dba:	6803      	ldr	r3, [r0, #0]
   d6dbc:	691b      	ldr	r3, [r3, #16]
   d6dbe:	4798      	blx	r3
   d6dc0:	4540      	cmp	r0, r8
   d6dc2:	dbe1      	blt.n	d6d88 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d6dc4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d6dc8:	f004 f8a4 	bl	daf14 <_Z19__fetch_global_Wirev>
   d6dcc:	6803      	ldr	r3, [r0, #0]
   d6dce:	695b      	ldr	r3, [r3, #20]
   d6dd0:	4798      	blx	r3
   d6dd2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d6dd6:	454e      	cmp	r6, r9
   d6dd8:	d1f6      	bne.n	d6dc8 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d6dda:	4445      	add	r5, r8
   d6ddc:	eba7 0708 	sub.w	r7, r7, r8
   d6de0:	e7be      	b.n	d6d60 <_ZN6MB85RC8readDataEjPhj+0x14>

000d6de2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6de2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6de6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6de8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6dea:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6dec:	460e      	mov	r6, r1
   d6dee:	4690      	mov	r8, r2
   d6df0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d6df2:	f001 fdb5 	bl	d8960 <_ZN7TwoWire4lockEv>
   d6df6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d6dfa:	f1b9 0f00 	cmp.w	r9, #0
   d6dfe:	d02a      	beq.n	d6e56 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d6e00:	b34d      	cbz	r5, d6e56 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6e02:	68e1      	ldr	r1, [r4, #12]
   d6e04:	6860      	ldr	r0, [r4, #4]
   d6e06:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6e0a:	f001 fd8a 	bl	d8922 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6e0e:	0a31      	lsrs	r1, r6, #8
   d6e10:	6860      	ldr	r0, [r4, #4]
   d6e12:	f7ff ff4b 	bl	d6cac <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6e16:	6860      	ldr	r0, [r4, #4]
   d6e18:	4631      	mov	r1, r6
   d6e1a:	f7ff ff47 	bl	d6cac <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6e1e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d6e22:	4647      	mov	r7, r8
   d6e24:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d6e28:	6860      	ldr	r0, [r4, #4]
   d6e2a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d6e2e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d6e30:	3d01      	subs	r5, #1
				wire.write(*data);
   d6e32:	689b      	ldr	r3, [r3, #8]
   d6e34:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6e36:	4555      	cmp	r5, sl
   d6e38:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d6e3c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6e3e:	d001      	beq.n	d6e44 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d6e40:	2d00      	cmp	r5, #0
   d6e42:	d1f1      	bne.n	d6e28 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d6e44:	6860      	ldr	r0, [r4, #4]
   d6e46:	2101      	movs	r1, #1
   d6e48:	f001 fd86 	bl	d8958 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6e4c:	2800      	cmp	r0, #0
   d6e4e:	d0d7      	beq.n	d6e00 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d6e50:	f04f 0900 	mov.w	r9, #0
   d6e54:	e7d1      	b.n	d6dfa <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d6e56:	a801      	add	r0, sp, #4
   d6e58:	f7ff ff39 	bl	d6cce <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d6e5c:	4648      	mov	r0, r9
   d6e5e:	b003      	add	sp, #12
   d6e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6e64 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e68:	b08b      	sub	sp, #44	; 0x2c
   d6e6a:	460e      	mov	r6, r1
   d6e6c:	4615      	mov	r5, r2
   d6e6e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d6e70:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6e72:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6e74:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d6e76:	f001 fd73 	bl	d8960 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d6e7a:	42ae      	cmp	r6, r5
   d6e7c:	d229      	bcs.n	d6ed2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d6e7e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d6e80:	4425      	add	r5, r4
			while(numBytes > 0) {
   d6e82:	b18c      	cbz	r4, d6ea8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d6e84:	2c1e      	cmp	r4, #30
   d6e86:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6e88:	f8d8 3000 	ldr.w	r3, [r8]
   d6e8c:	bf28      	it	cs
   d6e8e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d6e90:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d6e92:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6e96:	aa02      	add	r2, sp, #8
   d6e98:	463b      	mov	r3, r7
   d6e9a:	4631      	mov	r1, r6
   d6e9c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d6e9e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d6ea0:	47c8      	blx	r9
				if (!result) {
   d6ea2:	b948      	cbnz	r0, d6eb8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6ea4:	2400      	movs	r4, #0
   d6ea6:	e000      	b.n	d6eaa <_ZN6MB85RC8moveDataEjjj+0x46>
   d6ea8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6eaa:	a801      	add	r0, sp, #4
   d6eac:	f7ff ff0f 	bl	d6cce <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	b00b      	add	sp, #44	; 0x2c
   d6eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d6eb8:	f8d8 3000 	ldr.w	r3, [r8]
   d6ebc:	aa02      	add	r2, sp, #8
   d6ebe:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6ec2:	4629      	mov	r1, r5
   d6ec4:	463b      	mov	r3, r7
   d6ec6:	4640      	mov	r0, r8
   d6ec8:	47c8      	blx	r9
				if (!result) {
   d6eca:	2800      	cmp	r0, #0
   d6ecc:	d0ea      	beq.n	d6ea4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d6ece:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6ed0:	e7d7      	b.n	d6e82 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d6ed2:	d9e9      	bls.n	d6ea8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d6ed4:	2c00      	cmp	r4, #0
   d6ed6:	d0e7      	beq.n	d6ea8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d6ed8:	f8d8 3000 	ldr.w	r3, [r8]
   d6edc:	2c1e      	cmp	r4, #30
   d6ede:	4627      	mov	r7, r4
   d6ee0:	bf28      	it	cs
   d6ee2:	271e      	movcs	r7, #30
   d6ee4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6ee8:	aa02      	add	r2, sp, #8
   d6eea:	463b      	mov	r3, r7
   d6eec:	4631      	mov	r1, r6
   d6eee:	4640      	mov	r0, r8
   d6ef0:	47c8      	blx	r9
				if (!result) {
   d6ef2:	2800      	cmp	r0, #0
   d6ef4:	d0d6      	beq.n	d6ea4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d6ef6:	f8d8 3000 	ldr.w	r3, [r8]
   d6efa:	aa02      	add	r2, sp, #8
   d6efc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6f00:	4629      	mov	r1, r5
   d6f02:	463b      	mov	r3, r7
   d6f04:	4640      	mov	r0, r8
   d6f06:	47c8      	blx	r9
				if (!result) {
   d6f08:	2800      	cmp	r0, #0
   d6f0a:	d0cb      	beq.n	d6ea4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d6f0c:	443e      	add	r6, r7
				framAddrTo += count;
   d6f0e:	443d      	add	r5, r7
				numBytes -= count;
   d6f10:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6f12:	e7df      	b.n	d6ed4 <_ZN6MB85RC8moveDataEjjj+0x70>

000d6f14 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6f14:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6f16:	4603      	mov	r3, r0
	switch (__op)
   d6f18:	d102      	bne.n	d6f20 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6f1a:	6001      	str	r1, [r0, #0]
      }
   d6f1c:	2000      	movs	r0, #0
   d6f1e:	4770      	bx	lr
	  switch (__op)
   d6f20:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6f22:	bf04      	itt	eq
   d6f24:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6f28:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d6f2c:	e7f6      	b.n	d6f1c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d6f2e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6f2e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6f30:	2301      	movs	r3, #1
   d6f32:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6f34:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d6f36:	4604      	mov	r4, r0
        if (th->func) {
   d6f38:	b143      	cbz	r3, d6f4c <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d6f3a:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6f3c:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d6f3e:	2301      	movs	r3, #1
   d6f40:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6f42:	2000      	movs	r0, #0
    }
   d6f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6f48:	f000 bb4a 	b.w	d75e0 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6f4c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6f4e:	2800      	cmp	r0, #0
   d6f50:	d0f5      	beq.n	d6f3e <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d6f52:	6883      	ldr	r3, [r0, #8]
   d6f54:	b90b      	cbnz	r3, d6f5a <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d6f56:	f004 f838 	bl	dafca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6f5a:	68c3      	ldr	r3, [r0, #12]
   d6f5c:	e7ee      	b.n	d6f3c <_ZN6Thread3runEPv+0xe>

000d6f5e <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6f5e:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6f60:	6842      	ldr	r2, [r0, #4]
   d6f62:	4603      	mov	r3, r0
   d6f64:	1054      	asrs	r4, r2, #1
   d6f66:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6f6a:	07d2      	lsls	r2, r2, #31
   d6f6c:	bf48      	it	mi
   d6f6e:	590a      	ldrmi	r2, [r1, r4]
   d6f70:	681b      	ldr	r3, [r3, #0]
      }
   d6f72:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6f76:	bf48      	it	mi
   d6f78:	58d3      	ldrmi	r3, [r2, r3]
   d6f7a:	4718      	bx	r3

000d6f7c <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d6f7c:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d6f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6f80:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d6f84:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d6f86:	3008      	adds	r0, #8
   d6f88:	f000 faf2 	bl	d7570 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6f8c:	2004      	movs	r0, #4
   d6f8e:	f7fd f882 	bl	d4096 <_Znwj>
   d6f92:	4605      	mov	r5, r0
   d6f94:	b398      	cbz	r0, d6ffe <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d6f96:	491b      	ldr	r1, [pc, #108]	; (d7004 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d6f98:	2014      	movs	r0, #20
   d6f9a:	f004 f812 	bl	dafc2 <_ZnwjRKSt9nothrow_t>
   d6f9e:	b130      	cbz	r0, d6fae <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6fa0:	2300      	movs	r3, #0
            exited(false) {
   d6fa2:	e9c0 3300 	strd	r3, r3, [r0]
   d6fa6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6faa:	7403      	strb	r3, [r0, #16]
   d6fac:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6fae:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6fb0:	b1a0      	cbz	r0, d6fdc <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d6fb2:	4b15      	ldr	r3, [pc, #84]	; (d7008 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6fb4:	4915      	ldr	r1, [pc, #84]	; (d700c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d6fb6:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6fbe:	e9cd 0300 	strd	r0, r3, [sp]
   d6fc2:	2202      	movs	r2, #2
   d6fc4:	4b12      	ldr	r3, [pc, #72]	; (d7010 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d6fc6:	3004      	adds	r0, #4
   d6fc8:	f000 fa9a 	bl	d7500 <os_thread_create>
   d6fcc:	b930      	cbnz	r0, d6fdc <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6fce:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d6fd0:	7c1b      	ldrb	r3, [r3, #16]
   d6fd2:	b9a3      	cbnz	r3, d6ffe <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d6fd4:	2001      	movs	r0, #1
   d6fd6:	f000 fb2b 	bl	d7630 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d6fda:	e7f8      	b.n	d6fce <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fdc:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6fde:	2300      	movs	r3, #0
   d6fe0:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d6fe2:	b164      	cbz	r4, d6ffe <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d6fe4:	6827      	ldr	r7, [r4, #0]
   d6fe6:	b137      	cbz	r7, d6ff6 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d6fe8:	4638      	mov	r0, r7
   d6fea:	f7fd f98b 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6fee:	2110      	movs	r1, #16
   d6ff0:	4638      	mov	r0, r7
   d6ff2:	f003 ffe4 	bl	dafbe <_ZdlPvj>
   d6ff6:	2114      	movs	r1, #20
   d6ff8:	4620      	mov	r0, r4
   d6ffa:	f003 ffe0 	bl	dafbe <_ZdlPvj>
   d6ffe:	6075      	str	r5, [r6, #4]
}
   d7000:	b003      	add	sp, #12
   d7002:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7004:	000de76c 	.word	0x000de76c
   d7008:	000d721b 	.word	0x000d721b
   d700c:	000de37c 	.word	0x000de37c
   d7010:	000d6f2f 	.word	0x000d6f2f

000d7014 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7014:	f247 5130 	movw	r1, #30000	; 0x7530
   d7018:	4a08      	ldr	r2, [pc, #32]	; (d703c <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d701a:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d701c:	4908      	ldr	r1, [pc, #32]	; (d7040 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d701e:	6002      	str	r2, [r0, #0]
   d7020:	2200      	movs	r2, #0
   d7022:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7026:	4907      	ldr	r1, [pc, #28]	; (d7044 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7028:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d702a:	4907      	ldr	r1, [pc, #28]	; (d7048 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d702c:	6042      	str	r2, [r0, #4]
   d702e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7032:	6181      	str	r1, [r0, #24]
   d7034:	8502      	strh	r2, [r0, #40]	; 0x28
   d7036:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d703a:	4770      	bx	lr
   d703c:	000de440 	.word	0x000de440
   d7040:	000d7385 	.word	0x000d7385
   d7044:	000d6f5f 	.word	0x000d6f5f
   d7048:	000d6f15 	.word	0x000d6f15

000d704c <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d704c:	b510      	push	{r4, lr}
   d704e:	4b04      	ldr	r3, [pc, #16]	; (d7060 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7050:	4604      	mov	r4, r0
   d7052:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7056:	f7fd f955 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
}
   d705a:	4620      	mov	r0, r4
   d705c:	bd10      	pop	{r4, pc}
   d705e:	bf00      	nop
   d7060:	000de440 	.word	0x000de440

000d7064 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7064:	b510      	push	{r4, lr}
   d7066:	4b03      	ldr	r3, [pc, #12]	; (d7074 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7068:	6003      	str	r3, [r0, #0]
   d706a:	4604      	mov	r4, r0
   d706c:	f7ff ffee 	bl	d704c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7070:	4620      	mov	r0, r4
   d7072:	bd10      	pop	{r4, pc}
   d7074:	000de468 	.word	0x000de468

000d7078 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7078:	b510      	push	{r4, lr}
   d707a:	4604      	mov	r4, r0
}
   d707c:	f7ff fff2 	bl	d7064 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7080:	4620      	mov	r0, r4
   d7082:	2138      	movs	r1, #56	; 0x38
   d7084:	f003 ff9b 	bl	dafbe <_ZdlPvj>
   d7088:	4620      	mov	r0, r4
   d708a:	bd10      	pop	{r4, pc}

000d708c <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d708c:	6880      	ldr	r0, [r0, #8]
   d708e:	f000 ba77 	b.w	d7580 <os_mutex_lock>

000d7092 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7092:	6880      	ldr	r0, [r0, #8]
   d7094:	f000 ba7c 	b.w	d7590 <os_mutex_unlock>

000d7098 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d7098:	b510      	push	{r4, lr}
   d709a:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d709c:	6800      	ldr	r0, [r0, #0]
   d709e:	f7ff fff8 	bl	d7092 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d70a2:	4620      	mov	r0, r4
   d70a4:	bd10      	pop	{r4, pc}

000d70a6 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d70a6:	b513      	push	{r0, r1, r4, lr}
   d70a8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d70aa:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d70ac:	f7ff ffee 	bl	d708c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d70b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d70b2:	88dc      	ldrh	r4, [r3, #6]
   d70b4:	b2a4      	uxth	r4, r4
   d70b6:	b10c      	cbz	r4, d70bc <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d70b8:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d70bc:	a801      	add	r0, sp, #4
   d70be:	f7ff ffeb 	bl	d7098 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d70c2:	4620      	mov	r0, r4
   d70c4:	b002      	add	sp, #8
   d70c6:	bd10      	pop	{r4, pc}

000d70c8 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d70c8:	b513      	push	{r0, r1, r4, lr}
   d70ca:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d70cc:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d70ce:	f7ff ffdd 	bl	d708c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d70d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d70d6:	b943      	cbnz	r3, d70ea <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d70d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d70da:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d70dc:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d70de:	a801      	add	r0, sp, #4
   d70e0:	f7ff ffda 	bl	d7098 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d70e4:	4620      	mov	r0, r4
   d70e6:	b002      	add	sp, #8
   d70e8:	bd10      	pop	{r4, pc}
	bool result = false;
   d70ea:	2400      	movs	r4, #0
   d70ec:	e7f7      	b.n	d70de <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d70ee <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d70ee:	b513      	push	{r0, r1, r4, lr}
   d70f0:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d70f2:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d70f4:	f7ff ffca 	bl	d708c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d70f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d70fa:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d70fc:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d70fe:	f7ff ffcb 	bl	d7098 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d7102:	4620      	mov	r0, r4
   d7104:	b002      	add	sp, #8
   d7106:	bd10      	pop	{r4, pc}

000d7108 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d710c:	4699      	mov	r9, r3
   d710e:	b086      	sub	sp, #24
	if (!haveSetup) {
   d7110:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7114:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7118:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d711c:	4604      	mov	r4, r0
   d711e:	460f      	mov	r7, r1
   d7120:	4616      	mov	r6, r2
	if (!haveSetup) {
   d7122:	b913      	cbnz	r3, d712a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7124:	6803      	ldr	r3, [r0, #0]
   d7126:	689b      	ldr	r3, [r3, #8]
   d7128:	4798      	blx	r3
		data = "";
   d712a:	4b31      	ldr	r3, [pc, #196]	; (d71f0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d712c:	4638      	mov	r0, r7
		data = "";
   d712e:	2e00      	cmp	r6, #0
   d7130:	bf08      	it	eq
   d7132:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7134:	f004 fd87 	bl	dbc46 <strlen>
   d7138:	4605      	mov	r5, r0
   d713a:	4630      	mov	r0, r6
   d713c:	f004 fd83 	bl	dbc46 <strlen>
   d7140:	4428      	add	r0, r5
   d7142:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d7146:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d7148:	bf1c      	itt	ne
   d714a:	f025 0503 	bicne.w	r5, r5, #3
   d714e:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7150:	4633      	mov	r3, r6
   d7152:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d7156:	e9cd 9a00 	strd	r9, sl, [sp]
   d715a:	4926      	ldr	r1, [pc, #152]	; (d71f4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d715c:	4826      	ldr	r0, [pc, #152]	; (d71f8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d715e:	463a      	mov	r2, r7
   d7160:	f7fd f9ac 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7164:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7166:	3b08      	subs	r3, #8
   d7168:	42ab      	cmp	r3, r5
   d716a:	d212      	bcs.n	d7192 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d716c:	2400      	movs	r4, #0
}
   d716e:	4620      	mov	r0, r4
   d7170:	b006      	add	sp, #24
   d7172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d7176:	88cb      	ldrh	r3, [r1, #6]
   d7178:	2b01      	cmp	r3, #1
   d717a:	d036      	beq.n	d71ea <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d717c:	a805      	add	r0, sp, #20
   d717e:	f7ff ff8b 	bl	d7098 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d7182:	6823      	ldr	r3, [r4, #0]
   d7184:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d7188:	699b      	ldr	r3, [r3, #24]
   d718a:	4620      	mov	r0, r4
   d718c:	4798      	blx	r3
   d718e:	2800      	cmp	r0, #0
   d7190:	d0ec      	beq.n	d716c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d7192:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7194:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d7196:	f7ff ff79 	bl	d708c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d719a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d719c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d719e:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d71a0:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d71a2:	1ad2      	subs	r2, r2, r3
   d71a4:	42aa      	cmp	r2, r5
   d71a6:	d3e6      	bcc.n	d7176 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d71a8:	ea48 080a 	orr.w	r8, r8, sl
   d71ac:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d71b0:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d71b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d71b6:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d71ba:	4639      	mov	r1, r7
   d71bc:	4640      	mov	r0, r8
   d71be:	f004 fd1c 	bl	dbbfa <strcpy>
				cp += strlen(cp) + 1;
   d71c2:	4640      	mov	r0, r8
   d71c4:	f004 fd3f 	bl	dbc46 <strlen>
   d71c8:	3001      	adds	r0, #1
				strcpy(cp, data);
   d71ca:	4631      	mov	r1, r6
   d71cc:	4440      	add	r0, r8
   d71ce:	f004 fd14 	bl	dbbfa <strcpy>
				nextFree += size;
   d71d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d71d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d71d6:	441d      	add	r5, r3
   d71d8:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d71da:	88d3      	ldrh	r3, [r2, #6]
   d71dc:	3301      	adds	r3, #1
   d71de:	80d3      	strh	r3, [r2, #6]
				return true;
   d71e0:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d71e2:	a805      	add	r0, sp, #20
   d71e4:	f7ff ff58 	bl	d7098 <_ZN11StMutexLockD1Ev>
   d71e8:	e7c1      	b.n	d716e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d71ea:	2400      	movs	r4, #0
   d71ec:	e7f9      	b.n	d71e2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d71ee:	bf00      	nop
   d71f0:	000de5e9 	.word	0x000de5e9
   d71f4:	000de38e 	.word	0x000de38e
   d71f8:	2003e594 	.word	0x2003e594

000d71fc <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d71fc:	b508      	push	{r3, lr}
   d71fe:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7200:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7204:	69a3      	ldr	r3, [r4, #24]
   d7206:	b90b      	cbnz	r3, d720c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d7208:	f003 fedf 	bl	dafca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d720c:	69e3      	ldr	r3, [r4, #28]
   d720e:	4621      	mov	r1, r4
   d7210:	4628      	mov	r0, r5
   d7212:	4798      	blx	r3
		os_thread_yield();
   d7214:	f000 f97c 	bl	d7510 <os_thread_yield>
	while(true) {
   d7218:	e7f4      	b.n	d7204 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d721a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d721a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d721c:	f7ff ffee 	bl	d71fc <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7220 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7220:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7222:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7226:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7228:	4628      	mov	r0, r5
   d722a:	f004 fd0c 	bl	dbc46 <strlen>
   d722e:	3001      	adds	r0, #1
   d7230:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7232:	4628      	mov	r0, r5
   d7234:	f004 fd07 	bl	dbc46 <strlen>
	size_t offset = start - retainedBuffer;
   d7238:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d723a:	3001      	adds	r0, #1
   d723c:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d723e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7240:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7244:	bf1c      	itt	ne
   d7246:	f1c3 0304 	rsbne	r3, r3, #4
   d724a:	18c0      	addne	r0, r0, r3
}
   d724c:	bd68      	pop	{r3, r5, r6, pc}

000d724e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d724e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7250:	4604      	mov	r4, r0
   d7252:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7254:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7256:	f7ff ff19 	bl	d708c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d725a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d725c:	88fb      	ldrh	r3, [r7, #6]
   d725e:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d7262:	b1e6      	cbz	r6, d729e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d7264:	2b01      	cmp	r3, #1
   d7266:	d922      	bls.n	d72ae <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d7268:	4629      	mov	r1, r5
   d726a:	4620      	mov	r0, r4
   d726c:	f7ff ffd8 	bl	d7220 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d7270:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d7272:	4629      	mov	r1, r5
   d7274:	4620      	mov	r0, r4
   d7276:	f7ff ffd3 	bl	d7220 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d727a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d727c:	443a      	add	r2, r7
	if (after > 0) {
   d727e:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d7280:	4601      	mov	r1, r0
	size_t len = next - start;
   d7282:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d7286:	d002      	beq.n	d728e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d7288:	4628      	mov	r0, r5
   d728a:	f004 fc4f 	bl	dbb2c <memmove>
	nextFree -= len;
   d728e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7290:	1b9b      	subs	r3, r3, r6
   d7292:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d7294:	88fb      	ldrh	r3, [r7, #6]
   d7296:	3b01      	subs	r3, #1
   d7298:	80fb      	strh	r3, [r7, #6]
	return true;
   d729a:	2601      	movs	r6, #1
   d729c:	e001      	b.n	d72a2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d729e:	2b00      	cmp	r3, #0
   d72a0:	d1e7      	bne.n	d7272 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d72a2:	a801      	add	r0, sp, #4
   d72a4:	f7ff fef8 	bl	d7098 <_ZN11StMutexLockD1Ev>
}
   d72a8:	4630      	mov	r0, r6
   d72aa:	b003      	add	sp, #12
   d72ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d72ae:	2600      	movs	r6, #0
   d72b0:	e7f7      	b.n	d72a2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d72b4 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d72b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d72b8:	460d      	mov	r5, r1
   d72ba:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d72bc:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d72be:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d72c0:	f7ff fea8 	bl	d7014 <_ZN21PublishQueueAsyncBaseC1Ev>
   d72c4:	4b15      	ldr	r3, [pc, #84]	; (d731c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d72c6:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d72ca:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d72cc:	4b14      	ldr	r3, [pc, #80]	; (d7320 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d72ce:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d72d0:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d72d2:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d72d4:	4698      	mov	r8, r3
   d72d6:	d117      	bne.n	d7308 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d72d8:	88ab      	ldrh	r3, [r5, #4]
   d72da:	b29b      	uxth	r3, r3
   d72dc:	42b3      	cmp	r3, r6
   d72de:	d113      	bne.n	d7308 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d72e0:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d72e4:	6367      	str	r7, [r4, #52]	; 0x34
   d72e6:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d72ea:	88eb      	ldrh	r3, [r5, #6]
   d72ec:	fa1f f289 	uxth.w	r2, r9
   d72f0:	b29b      	uxth	r3, r3
   d72f2:	429a      	cmp	r2, r3
   d72f4:	d20e      	bcs.n	d7314 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d72f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d72f8:	4620      	mov	r0, r4
   d72fa:	f7ff ff91 	bl	d7220 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d72fe:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d7300:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7302:	f109 0901 	add.w	r9, r9, #1
   d7306:	d9f0      	bls.n	d72ea <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d7308:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d730a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d730e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7310:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7312:	80eb      	strh	r3, [r5, #6]
}
   d7314:	4620      	mov	r0, r4
   d7316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d731a:	bf00      	nop
   d731c:	000de468 	.word	0x000de468
   d7320:	d19cab61 	.word	0xd19cab61

000d7324 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7324:	b510      	push	{r4, lr}
   d7326:	e9d1 2300 	ldrd	r2, r3, [r1]
   d732a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d732c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d732e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7330:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7332:	b90a      	cbnz	r2, d7338 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7334:	07d9      	lsls	r1, r3, #31
   d7336:	d505      	bpl.n	d7344 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7338:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d733c:	4b0f      	ldr	r3, [pc, #60]	; (d737c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d733e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7340:	4b0f      	ldr	r3, [pc, #60]	; (d7380 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7342:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7344:	ab02      	add	r3, sp, #8
   d7346:	e893 0003 	ldmia.w	r3, {r0, r1}
   d734a:	466a      	mov	r2, sp
   d734c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7350:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7354:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7358:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d735c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d735e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7362:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7364:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7366:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7368:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d736a:	4618      	mov	r0, r3
   d736c:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d736e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7370:	9105      	str	r1, [sp, #20]
   d7372:	f7fc ffc7 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
	}
   d7376:	4620      	mov	r0, r4
   d7378:	b006      	add	sp, #24
   d737a:	bd10      	pop	{r4, pc}
   d737c:	000d6f5f 	.word	0x000d6f5f
   d7380:	000d6f15 	.word	0x000d6f15

000d7384 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7384:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7386:	4b05      	ldr	r3, [pc, #20]	; (d739c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7388:	9300      	str	r3, [sp, #0]
   d738a:	4669      	mov	r1, sp
   d738c:	2300      	movs	r3, #0
   d738e:	3010      	adds	r0, #16
   d7390:	9301      	str	r3, [sp, #4]
   d7392:	f7ff ffc7 	bl	d7324 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7396:	b003      	add	sp, #12
   d7398:	f85d fb04 	ldr.w	pc, [sp], #4
   d739c:	000d73cd 	.word	0x000d73cd

000d73a0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d73a0:	b513      	push	{r0, r1, r4, lr}
   d73a2:	4604      	mov	r4, r0
   d73a4:	f000 f954 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d73a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d73aa:	1ac0      	subs	r0, r0, r3
   d73ac:	68e3      	ldr	r3, [r4, #12]
   d73ae:	4298      	cmp	r0, r3
   d73b0:	d308      	bcc.n	d73c4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d73b2:	4b05      	ldr	r3, [pc, #20]	; (d73c8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d73b4:	9300      	str	r3, [sp, #0]
   d73b6:	4669      	mov	r1, sp
   d73b8:	2300      	movs	r3, #0
   d73ba:	f104 0010 	add.w	r0, r4, #16
   d73be:	9301      	str	r3, [sp, #4]
   d73c0:	f7ff ffb0 	bl	d7324 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d73c4:	b002      	add	sp, #8
   d73c6:	bd10      	pop	{r4, pc}
   d73c8:	000d73cd 	.word	0x000d73cd

000d73cc <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d73cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d73d0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d73d4:	b086      	sub	sp, #24
   d73d6:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d73d8:	2b00      	cmp	r3, #0
   d73da:	d164      	bne.n	d74a6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d73dc:	f000 fb84 	bl	d7ae8 <spark_cloud_flag_connected>
   d73e0:	2800      	cmp	r0, #0
   d73e2:	d060      	beq.n	d74a6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d73e4:	f000 f934 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
   d73e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d73ea:	1ac0      	subs	r0, r0, r3
   d73ec:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d73f0:	4298      	cmp	r0, r3
   d73f2:	d958      	bls.n	d74a6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d73f4:	6823      	ldr	r3, [r4, #0]
   d73f6:	4620      	mov	r0, r4
   d73f8:	695b      	ldr	r3, [r3, #20]
   d73fa:	4798      	blx	r3
		if (data) {
   d73fc:	4605      	mov	r5, r0
   d73fe:	2800      	cmp	r0, #0
   d7400:	d051      	beq.n	d74a6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7402:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7406:	2301      	movs	r3, #1
   d7408:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d740c:	4638      	mov	r0, r7
   d740e:	f004 fc1a 	bl	dbc46 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7412:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7416:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d741a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d741c:	682b      	ldr	r3, [r5, #0]
   d741e:	492b      	ldr	r1, [pc, #172]	; (d74cc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7420:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7422:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7424:	4633      	mov	r3, r6
   d7426:	482a      	ldr	r0, [pc, #168]	; (d74d0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7428:	463a      	mov	r2, r7
   d742a:	f7fd f847 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d742e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7430:	f88d 8000 	strb.w	r8, [sp]
   d7434:	4632      	mov	r2, r6
   d7436:	4639      	mov	r1, r7
   d7438:	a802      	add	r0, sp, #8
   d743a:	f000 ff83 	bl	d8344 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d743e:	9d02      	ldr	r5, [sp, #8]
   d7440:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7442:	b91b      	cbnz	r3, d744c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7444:	2001      	movs	r0, #1
   d7446:	f000 fc73 	bl	d7d30 <delay>
			while(!request.isDone()) {
   d744a:	e7f8      	b.n	d743e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d744c:	2000      	movs	r0, #0
   d744e:	f000 fad9 	bl	d7a04 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7452:	b120      	cbz	r0, d745e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7454:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7456:	b913      	cbnz	r3, d745e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d7458:	f000 fb36 	bl	d7ac8 <spark_process>
    }
   d745c:	e7fa      	b.n	d7454 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d745e:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7460:	2b01      	cmp	r3, #1
   d7462:	d123      	bne.n	d74ac <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d7464:	491b      	ldr	r1, [pc, #108]	; (d74d4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7466:	481a      	ldr	r0, [pc, #104]	; (d74d0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7468:	f7fd f828 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d746c:	6823      	ldr	r3, [r4, #0]
   d746e:	2100      	movs	r1, #0
   d7470:	699b      	ldr	r3, [r3, #24]
   d7472:	4620      	mov	r0, r4
   d7474:	4798      	blx	r3
			isSending = false;
   d7476:	2300      	movs	r3, #0
   d7478:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d747c:	f000 f8e8 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7480:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7482:	9c03      	ldr	r4, [sp, #12]
   d7484:	b17c      	cbz	r4, d74a6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d7486:	6863      	ldr	r3, [r4, #4]
   d7488:	3b01      	subs	r3, #1
   d748a:	6063      	str	r3, [r4, #4]
   d748c:	b95b      	cbnz	r3, d74a6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d748e:	6823      	ldr	r3, [r4, #0]
   d7490:	4620      	mov	r0, r4
   d7492:	689b      	ldr	r3, [r3, #8]
   d7494:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7496:	68a3      	ldr	r3, [r4, #8]
   d7498:	3b01      	subs	r3, #1
   d749a:	60a3      	str	r3, [r4, #8]
   d749c:	b91b      	cbnz	r3, d74a6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d749e:	6823      	ldr	r3, [r4, #0]
   d74a0:	4620      	mov	r0, r4
   d74a2:	68db      	ldr	r3, [r3, #12]
   d74a4:	4798      	blx	r3
}
   d74a6:	b006      	add	sp, #24
   d74a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d74ac:	68e2      	ldr	r2, [r4, #12]
   d74ae:	490a      	ldr	r1, [pc, #40]	; (d74d8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d74b0:	4807      	ldr	r0, [pc, #28]	; (d74d0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d74b2:	f7fd f803 	bl	d44bc <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d74b6:	4b09      	ldr	r3, [pc, #36]	; (d74dc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d74b8:	9304      	str	r3, [sp, #16]
   d74ba:	a904      	add	r1, sp, #16
   d74bc:	2300      	movs	r3, #0
   d74be:	f104 0010 	add.w	r0, r4, #16
   d74c2:	9305      	str	r3, [sp, #20]
   d74c4:	f7ff ff2e 	bl	d7324 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d74c8:	e7d5      	b.n	d7476 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d74ca:	bf00      	nop
   d74cc:	000de3cf 	.word	0x000de3cf
   d74d0:	2003e594 	.word	0x2003e594
   d74d4:	000de3f0 	.word	0x000de3f0
   d74d8:	000de407 	.word	0x000de407
   d74dc:	000d73a1 	.word	0x000d73a1

000d74e0 <_GLOBAL__sub_I_pubqLogger>:
   d74e0:	4b01      	ldr	r3, [pc, #4]	; (d74e8 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d74e2:	4a02      	ldr	r2, [pc, #8]	; (d74ec <_GLOBAL__sub_I_pubqLogger+0xc>)
   d74e4:	601a      	str	r2, [r3, #0]
}
   d74e6:	4770      	bx	lr
   d74e8:	2003e594 	.word	0x2003e594
   d74ec:	000de42e 	.word	0x000de42e

000d74f0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d74f0:	b508      	push	{r3, lr}
   d74f2:	4b02      	ldr	r3, [pc, #8]	; (d74fc <cellular_signal+0xc>)
   d74f4:	681b      	ldr	r3, [r3, #0]
   d74f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d74f8:	9301      	str	r3, [sp, #4]
   d74fa:	bd08      	pop	{r3, pc}
   d74fc:	00030274 	.word	0x00030274

000d7500 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7500:	b508      	push	{r3, lr}
   d7502:	4b02      	ldr	r3, [pc, #8]	; (d750c <os_thread_create+0xc>)
   d7504:	681b      	ldr	r3, [r3, #0]
   d7506:	685b      	ldr	r3, [r3, #4]
   d7508:	9301      	str	r3, [sp, #4]
   d750a:	bd08      	pop	{r3, pc}
   d750c:	00030248 	.word	0x00030248

000d7510 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7510:	b508      	push	{r3, lr}
   d7512:	4b02      	ldr	r3, [pc, #8]	; (d751c <os_thread_yield+0xc>)
   d7514:	681b      	ldr	r3, [r3, #0]
   d7516:	68db      	ldr	r3, [r3, #12]
   d7518:	9301      	str	r3, [sp, #4]
   d751a:	bd08      	pop	{r3, pc}
   d751c:	00030248 	.word	0x00030248

000d7520 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7520:	b508      	push	{r3, lr}
   d7522:	4b02      	ldr	r3, [pc, #8]	; (d752c <os_thread_scheduling+0xc>)
   d7524:	681b      	ldr	r3, [r3, #0]
   d7526:	69db      	ldr	r3, [r3, #28]
   d7528:	9301      	str	r3, [sp, #4]
   d752a:	bd08      	pop	{r3, pc}
   d752c:	00030248 	.word	0x00030248

000d7530 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7530:	b508      	push	{r3, lr}
   d7532:	4b02      	ldr	r3, [pc, #8]	; (d753c <os_timer_create+0xc>)
   d7534:	681b      	ldr	r3, [r3, #0]
   d7536:	6a1b      	ldr	r3, [r3, #32]
   d7538:	9301      	str	r3, [sp, #4]
   d753a:	bd08      	pop	{r3, pc}
   d753c:	00030248 	.word	0x00030248

000d7540 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7540:	b508      	push	{r3, lr}
   d7542:	4b02      	ldr	r3, [pc, #8]	; (d754c <os_timer_destroy+0xc>)
   d7544:	681b      	ldr	r3, [r3, #0]
   d7546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7548:	9301      	str	r3, [sp, #4]
   d754a:	bd08      	pop	{r3, pc}
   d754c:	00030248 	.word	0x00030248

000d7550 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7550:	b508      	push	{r3, lr}
   d7552:	4b02      	ldr	r3, [pc, #8]	; (d755c <os_timer_get_id+0xc>)
   d7554:	681b      	ldr	r3, [r3, #0]
   d7556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7558:	9301      	str	r3, [sp, #4]
   d755a:	bd08      	pop	{r3, pc}
   d755c:	00030248 	.word	0x00030248

000d7560 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7560:	b508      	push	{r3, lr}
   d7562:	4b02      	ldr	r3, [pc, #8]	; (d756c <os_timer_change+0xc>)
   d7564:	681b      	ldr	r3, [r3, #0]
   d7566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7568:	9301      	str	r3, [sp, #4]
   d756a:	bd08      	pop	{r3, pc}
   d756c:	00030248 	.word	0x00030248

000d7570 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7570:	b508      	push	{r3, lr}
   d7572:	4b02      	ldr	r3, [pc, #8]	; (d757c <os_mutex_create+0xc>)
   d7574:	681b      	ldr	r3, [r3, #0]
   d7576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7578:	9301      	str	r3, [sp, #4]
   d757a:	bd08      	pop	{r3, pc}
   d757c:	00030248 	.word	0x00030248

000d7580 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7580:	b508      	push	{r3, lr}
   d7582:	4b02      	ldr	r3, [pc, #8]	; (d758c <os_mutex_lock+0xc>)
   d7584:	681b      	ldr	r3, [r3, #0]
   d7586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7588:	9301      	str	r3, [sp, #4]
   d758a:	bd08      	pop	{r3, pc}
   d758c:	00030248 	.word	0x00030248

000d7590 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7590:	b508      	push	{r3, lr}
   d7592:	4b02      	ldr	r3, [pc, #8]	; (d759c <os_mutex_unlock+0xc>)
   d7594:	681b      	ldr	r3, [r3, #0]
   d7596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7598:	9301      	str	r3, [sp, #4]
   d759a:	bd08      	pop	{r3, pc}
   d759c:	00030248 	.word	0x00030248

000d75a0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d75a0:	b508      	push	{r3, lr}
   d75a2:	4b02      	ldr	r3, [pc, #8]	; (d75ac <os_mutex_recursive_create+0xc>)
   d75a4:	681b      	ldr	r3, [r3, #0]
   d75a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d75a8:	9301      	str	r3, [sp, #4]
   d75aa:	bd08      	pop	{r3, pc}
   d75ac:	00030248 	.word	0x00030248

000d75b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d75b0:	b508      	push	{r3, lr}
   d75b2:	4b02      	ldr	r3, [pc, #8]	; (d75bc <os_mutex_recursive_destroy+0xc>)
   d75b4:	681b      	ldr	r3, [r3, #0]
   d75b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d75b8:	9301      	str	r3, [sp, #4]
   d75ba:	bd08      	pop	{r3, pc}
   d75bc:	00030248 	.word	0x00030248

000d75c0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d75c0:	b508      	push	{r3, lr}
   d75c2:	4b02      	ldr	r3, [pc, #8]	; (d75cc <os_mutex_recursive_lock+0xc>)
   d75c4:	681b      	ldr	r3, [r3, #0]
   d75c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d75c8:	9301      	str	r3, [sp, #4]
   d75ca:	bd08      	pop	{r3, pc}
   d75cc:	00030248 	.word	0x00030248

000d75d0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d75d0:	b508      	push	{r3, lr}
   d75d2:	4b02      	ldr	r3, [pc, #8]	; (d75dc <os_mutex_recursive_unlock+0xc>)
   d75d4:	681b      	ldr	r3, [r3, #0]
   d75d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d75d8:	9301      	str	r3, [sp, #4]
   d75da:	bd08      	pop	{r3, pc}
   d75dc:	00030248 	.word	0x00030248

000d75e0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d75e0:	b508      	push	{r3, lr}
   d75e2:	4b02      	ldr	r3, [pc, #8]	; (d75ec <os_thread_exit+0xc>)
   d75e4:	681b      	ldr	r3, [r3, #0]
   d75e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d75e8:	9301      	str	r3, [sp, #4]
   d75ea:	bd08      	pop	{r3, pc}
   d75ec:	00030248 	.word	0x00030248

000d75f0 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d75f0:	b508      	push	{r3, lr}
   d75f2:	4b02      	ldr	r3, [pc, #8]	; (d75fc <os_timer_set_id+0xc>)
   d75f4:	681b      	ldr	r3, [r3, #0]
   d75f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d75f8:	9301      	str	r3, [sp, #4]
   d75fa:	bd08      	pop	{r3, pc}
   d75fc:	00030248 	.word	0x00030248

000d7600 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7600:	b508      	push	{r3, lr}
   d7602:	4b02      	ldr	r3, [pc, #8]	; (d760c <HAL_Feature_Set+0xc>)
   d7604:	681b      	ldr	r3, [r3, #0]
   d7606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7608:	9301      	str	r3, [sp, #4]
   d760a:	bd08      	pop	{r3, pc}
   d760c:	00030234 	.word	0x00030234

000d7610 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7610:	b508      	push	{r3, lr}
   d7612:	4b02      	ldr	r3, [pc, #8]	; (d761c <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7614:	681b      	ldr	r3, [r3, #0]
   d7616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7618:	9301      	str	r3, [sp, #4]
   d761a:	bd08      	pop	{r3, pc}
   d761c:	00030234 	.word	0x00030234

000d7620 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7620:	b508      	push	{r3, lr}
   d7622:	4b02      	ldr	r3, [pc, #8]	; (d762c <HAL_RNG_GetRandomNumber+0xc>)
   d7624:	681b      	ldr	r3, [r3, #0]
   d7626:	685b      	ldr	r3, [r3, #4]
   d7628:	9301      	str	r3, [sp, #4]
   d762a:	bd08      	pop	{r3, pc}
   d762c:	00030218 	.word	0x00030218

000d7630 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7630:	b508      	push	{r3, lr}
   d7632:	4b02      	ldr	r3, [pc, #8]	; (d763c <HAL_Delay_Milliseconds+0xc>)
   d7634:	681b      	ldr	r3, [r3, #0]
   d7636:	689b      	ldr	r3, [r3, #8]
   d7638:	9301      	str	r3, [sp, #4]
   d763a:	bd08      	pop	{r3, pc}
   d763c:	00030218 	.word	0x00030218

000d7640 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7640:	b508      	push	{r3, lr}
   d7642:	4b02      	ldr	r3, [pc, #8]	; (d764c <HAL_Delay_Microseconds+0xc>)
   d7644:	681b      	ldr	r3, [r3, #0]
   d7646:	68db      	ldr	r3, [r3, #12]
   d7648:	9301      	str	r3, [sp, #4]
   d764a:	bd08      	pop	{r3, pc}
   d764c:	00030218 	.word	0x00030218

000d7650 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7650:	b508      	push	{r3, lr}
   d7652:	4b02      	ldr	r3, [pc, #8]	; (d765c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7654:	681b      	ldr	r3, [r3, #0]
   d7656:	695b      	ldr	r3, [r3, #20]
   d7658:	9301      	str	r3, [sp, #4]
   d765a:	bd08      	pop	{r3, pc}
   d765c:	00030218 	.word	0x00030218

000d7660 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7660:	b508      	push	{r3, lr}
   d7662:	4b02      	ldr	r3, [pc, #8]	; (d766c <hal_rtc_time_is_valid+0xc>)
   d7664:	681b      	ldr	r3, [r3, #0]
   d7666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7668:	9301      	str	r3, [sp, #4]
   d766a:	bd08      	pop	{r3, pc}
   d766c:	00030218 	.word	0x00030218

000d7670 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7670:	b508      	push	{r3, lr}
   d7672:	4b02      	ldr	r3, [pc, #8]	; (d767c <hal_timer_millis+0xc>)
   d7674:	681b      	ldr	r3, [r3, #0]
   d7676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7678:	9301      	str	r3, [sp, #4]
   d767a:	bd08      	pop	{r3, pc}
   d767c:	00030218 	.word	0x00030218

000d7680 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7680:	b508      	push	{r3, lr}
   d7682:	4b02      	ldr	r3, [pc, #8]	; (d768c <hal_rtc_get_time+0xc>)
   d7684:	681b      	ldr	r3, [r3, #0]
   d7686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7688:	9301      	str	r3, [sp, #4]
   d768a:	bd08      	pop	{r3, pc}
   d768c:	00030218 	.word	0x00030218

000d7690 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7690:	b508      	push	{r3, lr}
   d7692:	4b02      	ldr	r3, [pc, #8]	; (d769c <hal_rtc_set_time+0xc>)
   d7694:	681b      	ldr	r3, [r3, #0]
   d7696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7698:	9301      	str	r3, [sp, #4]
   d769a:	bd08      	pop	{r3, pc}
   d769c:	00030218 	.word	0x00030218

000d76a0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d76a0:	b508      	push	{r3, lr}
   d76a2:	4b02      	ldr	r3, [pc, #8]	; (d76ac <HAL_Validate_Pin_Function+0xc>)
   d76a4:	681b      	ldr	r3, [r3, #0]
   d76a6:	685b      	ldr	r3, [r3, #4]
   d76a8:	9301      	str	r3, [sp, #4]
   d76aa:	bd08      	pop	{r3, pc}
   d76ac:	0003022c 	.word	0x0003022c

000d76b0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d76b0:	b508      	push	{r3, lr}
   d76b2:	4b02      	ldr	r3, [pc, #8]	; (d76bc <HAL_Pin_Mode+0xc>)
   d76b4:	681b      	ldr	r3, [r3, #0]
   d76b6:	689b      	ldr	r3, [r3, #8]
   d76b8:	9301      	str	r3, [sp, #4]
   d76ba:	bd08      	pop	{r3, pc}
   d76bc:	0003022c 	.word	0x0003022c

000d76c0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d76c0:	b508      	push	{r3, lr}
   d76c2:	4b02      	ldr	r3, [pc, #8]	; (d76cc <HAL_Get_Pin_Mode+0xc>)
   d76c4:	681b      	ldr	r3, [r3, #0]
   d76c6:	68db      	ldr	r3, [r3, #12]
   d76c8:	9301      	str	r3, [sp, #4]
   d76ca:	bd08      	pop	{r3, pc}
   d76cc:	0003022c 	.word	0x0003022c

000d76d0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d76d0:	b508      	push	{r3, lr}
   d76d2:	4b02      	ldr	r3, [pc, #8]	; (d76dc <HAL_GPIO_Write+0xc>)
   d76d4:	681b      	ldr	r3, [r3, #0]
   d76d6:	691b      	ldr	r3, [r3, #16]
   d76d8:	9301      	str	r3, [sp, #4]
   d76da:	bd08      	pop	{r3, pc}
   d76dc:	0003022c 	.word	0x0003022c

000d76e0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d76e0:	b508      	push	{r3, lr}
   d76e2:	4b02      	ldr	r3, [pc, #8]	; (d76ec <HAL_GPIO_Read+0xc>)
   d76e4:	681b      	ldr	r3, [r3, #0]
   d76e6:	695b      	ldr	r3, [r3, #20]
   d76e8:	9301      	str	r3, [sp, #4]
   d76ea:	bd08      	pop	{r3, pc}
   d76ec:	0003022c 	.word	0x0003022c

000d76f0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d76f0:	b508      	push	{r3, lr}
   d76f2:	4b02      	ldr	r3, [pc, #8]	; (d76fc <hal_adc_read+0xc>)
   d76f4:	681b      	ldr	r3, [r3, #0]
   d76f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d76f8:	9301      	str	r3, [sp, #4]
   d76fa:	bd08      	pop	{r3, pc}
   d76fc:	0003022c 	.word	0x0003022c

000d7700 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7700:	b508      	push	{r3, lr}
   d7702:	4b02      	ldr	r3, [pc, #8]	; (d770c <hal_i2c_begin+0xc>)
   d7704:	681b      	ldr	r3, [r3, #0]
   d7706:	68db      	ldr	r3, [r3, #12]
   d7708:	9301      	str	r3, [sp, #4]
   d770a:	bd08      	pop	{r3, pc}
   d770c:	00030228 	.word	0x00030228

000d7710 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7710:	b508      	push	{r3, lr}
   d7712:	4b02      	ldr	r3, [pc, #8]	; (d771c <hal_i2c_begin_transmission+0xc>)
   d7714:	681b      	ldr	r3, [r3, #0]
   d7716:	699b      	ldr	r3, [r3, #24]
   d7718:	9301      	str	r3, [sp, #4]
   d771a:	bd08      	pop	{r3, pc}
   d771c:	00030228 	.word	0x00030228

000d7720 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7720:	b508      	push	{r3, lr}
   d7722:	4b02      	ldr	r3, [pc, #8]	; (d772c <hal_i2c_end_transmission+0xc>)
   d7724:	681b      	ldr	r3, [r3, #0]
   d7726:	69db      	ldr	r3, [r3, #28]
   d7728:	9301      	str	r3, [sp, #4]
   d772a:	bd08      	pop	{r3, pc}
   d772c:	00030228 	.word	0x00030228

000d7730 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7730:	b508      	push	{r3, lr}
   d7732:	4b02      	ldr	r3, [pc, #8]	; (d773c <hal_i2c_write+0xc>)
   d7734:	681b      	ldr	r3, [r3, #0]
   d7736:	6a1b      	ldr	r3, [r3, #32]
   d7738:	9301      	str	r3, [sp, #4]
   d773a:	bd08      	pop	{r3, pc}
   d773c:	00030228 	.word	0x00030228

000d7740 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7740:	b508      	push	{r3, lr}
   d7742:	4b02      	ldr	r3, [pc, #8]	; (d774c <hal_i2c_available+0xc>)
   d7744:	681b      	ldr	r3, [r3, #0]
   d7746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7748:	9301      	str	r3, [sp, #4]
   d774a:	bd08      	pop	{r3, pc}
   d774c:	00030228 	.word	0x00030228

000d7750 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7750:	b508      	push	{r3, lr}
   d7752:	4b02      	ldr	r3, [pc, #8]	; (d775c <hal_i2c_read+0xc>)
   d7754:	681b      	ldr	r3, [r3, #0]
   d7756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7758:	9301      	str	r3, [sp, #4]
   d775a:	bd08      	pop	{r3, pc}
   d775c:	00030228 	.word	0x00030228

000d7760 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7760:	b508      	push	{r3, lr}
   d7762:	4b02      	ldr	r3, [pc, #8]	; (d776c <hal_i2c_peek+0xc>)
   d7764:	681b      	ldr	r3, [r3, #0]
   d7766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7768:	9301      	str	r3, [sp, #4]
   d776a:	bd08      	pop	{r3, pc}
   d776c:	00030228 	.word	0x00030228

000d7770 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7770:	b508      	push	{r3, lr}
   d7772:	4b02      	ldr	r3, [pc, #8]	; (d777c <hal_i2c_flush+0xc>)
   d7774:	681b      	ldr	r3, [r3, #0]
   d7776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7778:	9301      	str	r3, [sp, #4]
   d777a:	bd08      	pop	{r3, pc}
   d777c:	00030228 	.word	0x00030228

000d7780 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7780:	b508      	push	{r3, lr}
   d7782:	4b02      	ldr	r3, [pc, #8]	; (d778c <hal_i2c_is_enabled+0xc>)
   d7784:	681b      	ldr	r3, [r3, #0]
   d7786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7788:	9301      	str	r3, [sp, #4]
   d778a:	bd08      	pop	{r3, pc}
   d778c:	00030228 	.word	0x00030228

000d7790 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7790:	b508      	push	{r3, lr}
   d7792:	4b02      	ldr	r3, [pc, #8]	; (d779c <hal_i2c_init+0xc>)
   d7794:	681b      	ldr	r3, [r3, #0]
   d7796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7798:	9301      	str	r3, [sp, #4]
   d779a:	bd08      	pop	{r3, pc}
   d779c:	00030228 	.word	0x00030228

000d77a0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d77a0:	b508      	push	{r3, lr}
   d77a2:	4b02      	ldr	r3, [pc, #8]	; (d77ac <hal_i2c_lock+0xc>)
   d77a4:	681b      	ldr	r3, [r3, #0]
   d77a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d77a8:	9301      	str	r3, [sp, #4]
   d77aa:	bd08      	pop	{r3, pc}
   d77ac:	00030228 	.word	0x00030228

000d77b0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d77b0:	b508      	push	{r3, lr}
   d77b2:	4b02      	ldr	r3, [pc, #8]	; (d77bc <hal_i2c_unlock+0xc>)
   d77b4:	681b      	ldr	r3, [r3, #0]
   d77b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d77b8:	9301      	str	r3, [sp, #4]
   d77ba:	bd08      	pop	{r3, pc}
   d77bc:	00030228 	.word	0x00030228

000d77c0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d77c0:	b508      	push	{r3, lr}
   d77c2:	4b02      	ldr	r3, [pc, #8]	; (d77cc <hal_i2c_request_ex+0xc>)
   d77c4:	681b      	ldr	r3, [r3, #0]
   d77c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d77c8:	9301      	str	r3, [sp, #4]
   d77ca:	bd08      	pop	{r3, pc}
   d77cc:	00030228 	.word	0x00030228

000d77d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d77d0:	b508      	push	{r3, lr}
   d77d2:	4b02      	ldr	r3, [pc, #8]	; (d77dc <inet_inet_ntop+0xc>)
   d77d4:	681b      	ldr	r3, [r3, #0]
   d77d6:	695b      	ldr	r3, [r3, #20]
   d77d8:	9301      	str	r3, [sp, #4]
   d77da:	bd08      	pop	{r3, pc}
   d77dc:	00030264 	.word	0x00030264

000d77e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d77e0:	b508      	push	{r3, lr}
   d77e2:	4b02      	ldr	r3, [pc, #8]	; (d77ec <netdb_freeaddrinfo+0xc>)
   d77e4:	681b      	ldr	r3, [r3, #0]
   d77e6:	689b      	ldr	r3, [r3, #8]
   d77e8:	9301      	str	r3, [sp, #4]
   d77ea:	bd08      	pop	{r3, pc}
   d77ec:	00030268 	.word	0x00030268

000d77f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d77f0:	b508      	push	{r3, lr}
   d77f2:	4b02      	ldr	r3, [pc, #8]	; (d77fc <netdb_getaddrinfo+0xc>)
   d77f4:	681b      	ldr	r3, [r3, #0]
   d77f6:	68db      	ldr	r3, [r3, #12]
   d77f8:	9301      	str	r3, [sp, #4]
   d77fa:	bd08      	pop	{r3, pc}
   d77fc:	00030268 	.word	0x00030268

000d7800 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7800:	b508      	push	{r3, lr}
   d7802:	4b02      	ldr	r3, [pc, #8]	; (d780c <hal_spi_init+0xc>)
   d7804:	681b      	ldr	r3, [r3, #0]
   d7806:	69db      	ldr	r3, [r3, #28]
   d7808:	9301      	str	r3, [sp, #4]
   d780a:	bd08      	pop	{r3, pc}
   d780c:	00030230 	.word	0x00030230

000d7810 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7810:	b508      	push	{r3, lr}
   d7812:	4b02      	ldr	r3, [pc, #8]	; (d781c <hal_spi_is_enabled+0xc>)
   d7814:	681b      	ldr	r3, [r3, #0]
   d7816:	6a1b      	ldr	r3, [r3, #32]
   d7818:	9301      	str	r3, [sp, #4]
   d781a:	bd08      	pop	{r3, pc}
   d781c:	00030230 	.word	0x00030230

000d7820 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7820:	b508      	push	{r3, lr}
   d7822:	4b02      	ldr	r3, [pc, #8]	; (d782c <hal_usart_init+0xc>)
   d7824:	681b      	ldr	r3, [r3, #0]
   d7826:	681b      	ldr	r3, [r3, #0]
   d7828:	9301      	str	r3, [sp, #4]
   d782a:	bd08      	pop	{r3, pc}
   d782c:	0003023c 	.word	0x0003023c

000d7830 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d7830:	b508      	push	{r3, lr}
   d7832:	4b02      	ldr	r3, [pc, #8]	; (d783c <hal_usart_end+0xc>)
   d7834:	681b      	ldr	r3, [r3, #0]
   d7836:	689b      	ldr	r3, [r3, #8]
   d7838:	9301      	str	r3, [sp, #4]
   d783a:	bd08      	pop	{r3, pc}
   d783c:	0003023c 	.word	0x0003023c

000d7840 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7840:	b508      	push	{r3, lr}
   d7842:	4b02      	ldr	r3, [pc, #8]	; (d784c <hal_usart_write+0xc>)
   d7844:	681b      	ldr	r3, [r3, #0]
   d7846:	68db      	ldr	r3, [r3, #12]
   d7848:	9301      	str	r3, [sp, #4]
   d784a:	bd08      	pop	{r3, pc}
   d784c:	0003023c 	.word	0x0003023c

000d7850 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7850:	b508      	push	{r3, lr}
   d7852:	4b02      	ldr	r3, [pc, #8]	; (d785c <hal_usart_available+0xc>)
   d7854:	681b      	ldr	r3, [r3, #0]
   d7856:	691b      	ldr	r3, [r3, #16]
   d7858:	9301      	str	r3, [sp, #4]
   d785a:	bd08      	pop	{r3, pc}
   d785c:	0003023c 	.word	0x0003023c

000d7860 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7860:	b508      	push	{r3, lr}
   d7862:	4b02      	ldr	r3, [pc, #8]	; (d786c <hal_usart_read+0xc>)
   d7864:	681b      	ldr	r3, [r3, #0]
   d7866:	695b      	ldr	r3, [r3, #20]
   d7868:	9301      	str	r3, [sp, #4]
   d786a:	bd08      	pop	{r3, pc}
   d786c:	0003023c 	.word	0x0003023c

000d7870 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7870:	b508      	push	{r3, lr}
   d7872:	4b02      	ldr	r3, [pc, #8]	; (d787c <hal_usart_peek+0xc>)
   d7874:	681b      	ldr	r3, [r3, #0]
   d7876:	699b      	ldr	r3, [r3, #24]
   d7878:	9301      	str	r3, [sp, #4]
   d787a:	bd08      	pop	{r3, pc}
   d787c:	0003023c 	.word	0x0003023c

000d7880 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7880:	b508      	push	{r3, lr}
   d7882:	4b02      	ldr	r3, [pc, #8]	; (d788c <hal_usart_flush+0xc>)
   d7884:	681b      	ldr	r3, [r3, #0]
   d7886:	69db      	ldr	r3, [r3, #28]
   d7888:	9301      	str	r3, [sp, #4]
   d788a:	bd08      	pop	{r3, pc}
   d788c:	0003023c 	.word	0x0003023c

000d7890 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7890:	b508      	push	{r3, lr}
   d7892:	4b02      	ldr	r3, [pc, #8]	; (d789c <hal_usart_is_enabled+0xc>)
   d7894:	681b      	ldr	r3, [r3, #0]
   d7896:	6a1b      	ldr	r3, [r3, #32]
   d7898:	9301      	str	r3, [sp, #4]
   d789a:	bd08      	pop	{r3, pc}
   d789c:	0003023c 	.word	0x0003023c

000d78a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d78a0:	b508      	push	{r3, lr}
   d78a2:	4b02      	ldr	r3, [pc, #8]	; (d78ac <hal_usart_available_data_for_write+0xc>)
   d78a4:	681b      	ldr	r3, [r3, #0]
   d78a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d78a8:	9301      	str	r3, [sp, #4]
   d78aa:	bd08      	pop	{r3, pc}
   d78ac:	0003023c 	.word	0x0003023c

000d78b0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d78b0:	b508      	push	{r3, lr}
   d78b2:	4b02      	ldr	r3, [pc, #8]	; (d78bc <hal_usart_begin_config+0xc>)
   d78b4:	681b      	ldr	r3, [r3, #0]
   d78b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d78b8:	9301      	str	r3, [sp, #4]
   d78ba:	bd08      	pop	{r3, pc}
   d78bc:	0003023c 	.word	0x0003023c

000d78c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d78c0:	b508      	push	{r3, lr}
   d78c2:	4b02      	ldr	r3, [pc, #8]	; (d78cc <HAL_USB_USART_Init+0xc>)
   d78c4:	681b      	ldr	r3, [r3, #0]
   d78c6:	681b      	ldr	r3, [r3, #0]
   d78c8:	9301      	str	r3, [sp, #4]
   d78ca:	bd08      	pop	{r3, pc}
   d78cc:	0003024c 	.word	0x0003024c

000d78d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d78d0:	b508      	push	{r3, lr}
   d78d2:	4b02      	ldr	r3, [pc, #8]	; (d78dc <HAL_USB_USART_Begin+0xc>)
   d78d4:	681b      	ldr	r3, [r3, #0]
   d78d6:	685b      	ldr	r3, [r3, #4]
   d78d8:	9301      	str	r3, [sp, #4]
   d78da:	bd08      	pop	{r3, pc}
   d78dc:	0003024c 	.word	0x0003024c

000d78e0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d78e0:	b508      	push	{r3, lr}
   d78e2:	4b02      	ldr	r3, [pc, #8]	; (d78ec <HAL_USB_USART_End+0xc>)
   d78e4:	681b      	ldr	r3, [r3, #0]
   d78e6:	689b      	ldr	r3, [r3, #8]
   d78e8:	9301      	str	r3, [sp, #4]
   d78ea:	bd08      	pop	{r3, pc}
   d78ec:	0003024c 	.word	0x0003024c

000d78f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d78f0:	b508      	push	{r3, lr}
   d78f2:	4b02      	ldr	r3, [pc, #8]	; (d78fc <HAL_USB_USART_Available_Data+0xc>)
   d78f4:	681b      	ldr	r3, [r3, #0]
   d78f6:	691b      	ldr	r3, [r3, #16]
   d78f8:	9301      	str	r3, [sp, #4]
   d78fa:	bd08      	pop	{r3, pc}
   d78fc:	0003024c 	.word	0x0003024c

000d7900 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7900:	b508      	push	{r3, lr}
   d7902:	4b02      	ldr	r3, [pc, #8]	; (d790c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7904:	681b      	ldr	r3, [r3, #0]
   d7906:	695b      	ldr	r3, [r3, #20]
   d7908:	9301      	str	r3, [sp, #4]
   d790a:	bd08      	pop	{r3, pc}
   d790c:	0003024c 	.word	0x0003024c

000d7910 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7910:	b508      	push	{r3, lr}
   d7912:	4b02      	ldr	r3, [pc, #8]	; (d791c <HAL_USB_USART_Receive_Data+0xc>)
   d7914:	681b      	ldr	r3, [r3, #0]
   d7916:	699b      	ldr	r3, [r3, #24]
   d7918:	9301      	str	r3, [sp, #4]
   d791a:	bd08      	pop	{r3, pc}
   d791c:	0003024c 	.word	0x0003024c

000d7920 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7920:	b508      	push	{r3, lr}
   d7922:	4b02      	ldr	r3, [pc, #8]	; (d792c <HAL_USB_USART_Send_Data+0xc>)
   d7924:	681b      	ldr	r3, [r3, #0]
   d7926:	69db      	ldr	r3, [r3, #28]
   d7928:	9301      	str	r3, [sp, #4]
   d792a:	bd08      	pop	{r3, pc}
   d792c:	0003024c 	.word	0x0003024c

000d7930 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7930:	b508      	push	{r3, lr}
   d7932:	4b02      	ldr	r3, [pc, #8]	; (d793c <HAL_USB_USART_Flush_Data+0xc>)
   d7934:	681b      	ldr	r3, [r3, #0]
   d7936:	6a1b      	ldr	r3, [r3, #32]
   d7938:	9301      	str	r3, [sp, #4]
   d793a:	bd08      	pop	{r3, pc}
   d793c:	0003024c 	.word	0x0003024c

000d7940 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7940:	b508      	push	{r3, lr}
   d7942:	4b02      	ldr	r3, [pc, #8]	; (d794c <panic_+0xc>)
   d7944:	681b      	ldr	r3, [r3, #0]
   d7946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7948:	9301      	str	r3, [sp, #4]
   d794a:	bd08      	pop	{r3, pc}
   d794c:	00030260 	.word	0x00030260

000d7950 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7950:	b508      	push	{r3, lr}
   d7952:	4b02      	ldr	r3, [pc, #8]	; (d795c <log_message+0xc>)
   d7954:	681b      	ldr	r3, [r3, #0]
   d7956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7958:	9301      	str	r3, [sp, #4]
   d795a:	bd08      	pop	{r3, pc}
   d795c:	00030260 	.word	0x00030260

000d7960 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d7960:	b508      	push	{r3, lr}
   d7962:	4b02      	ldr	r3, [pc, #8]	; (d796c <log_message_v+0xc>)
   d7964:	681b      	ldr	r3, [r3, #0]
   d7966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7968:	9301      	str	r3, [sp, #4]
   d796a:	bd08      	pop	{r3, pc}
   d796c:	00030260 	.word	0x00030260

000d7970 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d7970:	b508      	push	{r3, lr}
   d7972:	4b02      	ldr	r3, [pc, #8]	; (d797c <log_level_name+0xc>)
   d7974:	681b      	ldr	r3, [r3, #0]
   d7976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7978:	9301      	str	r3, [sp, #4]
   d797a:	bd08      	pop	{r3, pc}
   d797c:	00030260 	.word	0x00030260

000d7980 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d7980:	b508      	push	{r3, lr}
   d7982:	4b02      	ldr	r3, [pc, #8]	; (d798c <log_set_callbacks+0xc>)
   d7984:	681b      	ldr	r3, [r3, #0]
   d7986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7988:	9301      	str	r3, [sp, #4]
   d798a:	bd08      	pop	{r3, pc}
   d798c:	00030260 	.word	0x00030260

000d7990 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d7990:	b508      	push	{r3, lr}
   d7992:	4b03      	ldr	r3, [pc, #12]	; (d79a0 <diag_get_source+0x10>)
   d7994:	681b      	ldr	r3, [r3, #0]
   d7996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d799a:	9301      	str	r3, [sp, #4]
   d799c:	bd08      	pop	{r3, pc}
   d799e:	0000      	.short	0x0000
   d79a0:	00030260 	.word	0x00030260

000d79a4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d79a4:	b508      	push	{r3, lr}
   d79a6:	4b02      	ldr	r3, [pc, #8]	; (d79b0 <system_mode+0xc>)
   d79a8:	681b      	ldr	r3, [r3, #0]
   d79aa:	681b      	ldr	r3, [r3, #0]
   d79ac:	9301      	str	r3, [sp, #4]
   d79ae:	bd08      	pop	{r3, pc}
   d79b0:	00030220 	.word	0x00030220

000d79b4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d79b4:	b508      	push	{r3, lr}
   d79b6:	4b02      	ldr	r3, [pc, #8]	; (d79c0 <set_system_mode+0xc>)
   d79b8:	681b      	ldr	r3, [r3, #0]
   d79ba:	685b      	ldr	r3, [r3, #4]
   d79bc:	9301      	str	r3, [sp, #4]
   d79be:	bd08      	pop	{r3, pc}
   d79c0:	00030220 	.word	0x00030220

000d79c4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d79c4:	b508      	push	{r3, lr}
   d79c6:	4b02      	ldr	r3, [pc, #8]	; (d79d0 <system_delay_ms+0xc>)
   d79c8:	681b      	ldr	r3, [r3, #0]
   d79ca:	695b      	ldr	r3, [r3, #20]
   d79cc:	9301      	str	r3, [sp, #4]
   d79ce:	bd08      	pop	{r3, pc}
   d79d0:	00030220 	.word	0x00030220

000d79d4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d79d4:	b508      	push	{r3, lr}
   d79d6:	4b02      	ldr	r3, [pc, #8]	; (d79e0 <system_sleep+0xc>)
   d79d8:	681b      	ldr	r3, [r3, #0]
   d79da:	699b      	ldr	r3, [r3, #24]
   d79dc:	9301      	str	r3, [sp, #4]
   d79de:	bd08      	pop	{r3, pc}
   d79e0:	00030220 	.word	0x00030220

000d79e4 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d79e4:	b508      	push	{r3, lr}
   d79e6:	4b02      	ldr	r3, [pc, #8]	; (d79f0 <system_subscribe_event+0xc>)
   d79e8:	681b      	ldr	r3, [r3, #0]
   d79ea:	6a1b      	ldr	r3, [r3, #32]
   d79ec:	9301      	str	r3, [sp, #4]
   d79ee:	bd08      	pop	{r3, pc}
   d79f0:	00030220 	.word	0x00030220

000d79f4 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d79f4:	b508      	push	{r3, lr}
   d79f6:	4b02      	ldr	r3, [pc, #8]	; (d7a00 <system_thread_set_state+0xc>)
   d79f8:	681b      	ldr	r3, [r3, #0]
   d79fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d79fc:	9301      	str	r3, [sp, #4]
   d79fe:	bd08      	pop	{r3, pc}
   d7a00:	00030220 	.word	0x00030220

000d7a04 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7a04:	b508      	push	{r3, lr}
   d7a06:	4b02      	ldr	r3, [pc, #8]	; (d7a10 <application_thread_current+0xc>)
   d7a08:	681b      	ldr	r3, [r3, #0]
   d7a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7a0c:	9301      	str	r3, [sp, #4]
   d7a0e:	bd08      	pop	{r3, pc}
   d7a10:	00030220 	.word	0x00030220

000d7a14 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7a14:	b508      	push	{r3, lr}
   d7a16:	4b02      	ldr	r3, [pc, #8]	; (d7a20 <application_thread_invoke+0xc>)
   d7a18:	681b      	ldr	r3, [r3, #0]
   d7a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7a1c:	9301      	str	r3, [sp, #4]
   d7a1e:	bd08      	pop	{r3, pc}
   d7a20:	00030220 	.word	0x00030220

000d7a24 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7a24:	b508      	push	{r3, lr}
   d7a26:	4b02      	ldr	r3, [pc, #8]	; (d7a30 <system_thread_get_state+0xc>)
   d7a28:	681b      	ldr	r3, [r3, #0]
   d7a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7a2c:	9301      	str	r3, [sp, #4]
   d7a2e:	bd08      	pop	{r3, pc}
   d7a30:	00030220 	.word	0x00030220

000d7a34 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d7a34:	b508      	push	{r3, lr}
   d7a36:	4b02      	ldr	r3, [pc, #8]	; (d7a40 <system_notify_time_changed+0xc>)
   d7a38:	681b      	ldr	r3, [r3, #0]
   d7a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7a3c:	9301      	str	r3, [sp, #4]
   d7a3e:	bd08      	pop	{r3, pc}
   d7a40:	00030220 	.word	0x00030220

000d7a44 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7a44:	b508      	push	{r3, lr}
   d7a46:	4b03      	ldr	r3, [pc, #12]	; (d7a54 <system_ctrl_set_app_request_handler+0x10>)
   d7a48:	681b      	ldr	r3, [r3, #0]
   d7a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7a4e:	9301      	str	r3, [sp, #4]
   d7a50:	bd08      	pop	{r3, pc}
   d7a52:	0000      	.short	0x0000
   d7a54:	00030220 	.word	0x00030220

000d7a58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7a58:	b508      	push	{r3, lr}
   d7a5a:	4b03      	ldr	r3, [pc, #12]	; (d7a68 <system_ctrl_set_result+0x10>)
   d7a5c:	681b      	ldr	r3, [r3, #0]
   d7a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7a62:	9301      	str	r3, [sp, #4]
   d7a64:	bd08      	pop	{r3, pc}
   d7a66:	0000      	.short	0x0000
   d7a68:	00030220 	.word	0x00030220

000d7a6c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d7a6c:	b508      	push	{r3, lr}
   d7a6e:	4b03      	ldr	r3, [pc, #12]	; (d7a7c <system_power_management_set_config+0x10>)
   d7a70:	681b      	ldr	r3, [r3, #0]
   d7a72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7a76:	9301      	str	r3, [sp, #4]
   d7a78:	bd08      	pop	{r3, pc}
   d7a7a:	0000      	.short	0x0000
   d7a7c:	00030220 	.word	0x00030220

000d7a80 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d7a80:	b508      	push	{r3, lr}
   d7a82:	4b03      	ldr	r3, [pc, #12]	; (d7a90 <system_sleep_ext+0x10>)
   d7a84:	681b      	ldr	r3, [r3, #0]
   d7a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d7a8a:	9301      	str	r3, [sp, #4]
   d7a8c:	bd08      	pop	{r3, pc}
   d7a8e:	0000      	.short	0x0000
   d7a90:	00030220 	.word	0x00030220

000d7a94 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d7a94:	b508      	push	{r3, lr}
   d7a96:	4b03      	ldr	r3, [pc, #12]	; (d7aa4 <system_reset+0x10>)
   d7a98:	681b      	ldr	r3, [r3, #0]
   d7a9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d7a9e:	9301      	str	r3, [sp, #4]
   d7aa0:	bd08      	pop	{r3, pc}
   d7aa2:	0000      	.short	0x0000
   d7aa4:	00030220 	.word	0x00030220

000d7aa8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7aa8:	b508      	push	{r3, lr}
   d7aaa:	4b02      	ldr	r3, [pc, #8]	; (d7ab4 <spark_variable+0xc>)
   d7aac:	681b      	ldr	r3, [r3, #0]
   d7aae:	681b      	ldr	r3, [r3, #0]
   d7ab0:	9301      	str	r3, [sp, #4]
   d7ab2:	bd08      	pop	{r3, pc}
   d7ab4:	00030244 	.word	0x00030244

000d7ab8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d7ab8:	b508      	push	{r3, lr}
   d7aba:	4b02      	ldr	r3, [pc, #8]	; (d7ac4 <spark_function+0xc>)
   d7abc:	681b      	ldr	r3, [r3, #0]
   d7abe:	685b      	ldr	r3, [r3, #4]
   d7ac0:	9301      	str	r3, [sp, #4]
   d7ac2:	bd08      	pop	{r3, pc}
   d7ac4:	00030244 	.word	0x00030244

000d7ac8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7ac8:	b508      	push	{r3, lr}
   d7aca:	4b02      	ldr	r3, [pc, #8]	; (d7ad4 <spark_process+0xc>)
   d7acc:	681b      	ldr	r3, [r3, #0]
   d7ace:	689b      	ldr	r3, [r3, #8]
   d7ad0:	9301      	str	r3, [sp, #4]
   d7ad2:	bd08      	pop	{r3, pc}
   d7ad4:	00030244 	.word	0x00030244

000d7ad8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d7ad8:	b508      	push	{r3, lr}
   d7ada:	4b02      	ldr	r3, [pc, #8]	; (d7ae4 <spark_cloud_flag_connect+0xc>)
   d7adc:	681b      	ldr	r3, [r3, #0]
   d7ade:	68db      	ldr	r3, [r3, #12]
   d7ae0:	9301      	str	r3, [sp, #4]
   d7ae2:	bd08      	pop	{r3, pc}
   d7ae4:	00030244 	.word	0x00030244

000d7ae8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7ae8:	b508      	push	{r3, lr}
   d7aea:	4b02      	ldr	r3, [pc, #8]	; (d7af4 <spark_cloud_flag_connected+0xc>)
   d7aec:	681b      	ldr	r3, [r3, #0]
   d7aee:	695b      	ldr	r3, [r3, #20]
   d7af0:	9301      	str	r3, [sp, #4]
   d7af2:	bd08      	pop	{r3, pc}
   d7af4:	00030244 	.word	0x00030244

000d7af8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7af8:	b508      	push	{r3, lr}
   d7afa:	4b02      	ldr	r3, [pc, #8]	; (d7b04 <spark_deviceID+0xc>)
   d7afc:	681b      	ldr	r3, [r3, #0]
   d7afe:	69db      	ldr	r3, [r3, #28]
   d7b00:	9301      	str	r3, [sp, #4]
   d7b02:	bd08      	pop	{r3, pc}
   d7b04:	00030244 	.word	0x00030244

000d7b08 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7b08:	b508      	push	{r3, lr}
   d7b0a:	4b02      	ldr	r3, [pc, #8]	; (d7b14 <spark_send_event+0xc>)
   d7b0c:	681b      	ldr	r3, [r3, #0]
   d7b0e:	6a1b      	ldr	r3, [r3, #32]
   d7b10:	9301      	str	r3, [sp, #4]
   d7b12:	bd08      	pop	{r3, pc}
   d7b14:	00030244 	.word	0x00030244

000d7b18 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7b18:	b508      	push	{r3, lr}
   d7b1a:	4b02      	ldr	r3, [pc, #8]	; (d7b24 <spark_subscribe+0xc>)
   d7b1c:	681b      	ldr	r3, [r3, #0]
   d7b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7b20:	9301      	str	r3, [sp, #4]
   d7b22:	bd08      	pop	{r3, pc}
   d7b24:	00030244 	.word	0x00030244

000d7b28 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d7b28:	b508      	push	{r3, lr}
   d7b2a:	4b02      	ldr	r3, [pc, #8]	; (d7b34 <spark_sync_time+0xc>)
   d7b2c:	681b      	ldr	r3, [r3, #0]
   d7b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7b30:	9301      	str	r3, [sp, #4]
   d7b32:	bd08      	pop	{r3, pc}
   d7b34:	00030244 	.word	0x00030244

000d7b38 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7b38:	b508      	push	{r3, lr}
   d7b3a:	4b02      	ldr	r3, [pc, #8]	; (d7b44 <spark_sync_time_pending+0xc>)
   d7b3c:	681b      	ldr	r3, [r3, #0]
   d7b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7b40:	9301      	str	r3, [sp, #4]
   d7b42:	bd08      	pop	{r3, pc}
   d7b44:	00030244 	.word	0x00030244

000d7b48 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d7b48:	b508      	push	{r3, lr}
   d7b4a:	4b02      	ldr	r3, [pc, #8]	; (d7b54 <spark_sync_time_last+0xc>)
   d7b4c:	681b      	ldr	r3, [r3, #0]
   d7b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7b50:	9301      	str	r3, [sp, #4]
   d7b52:	bd08      	pop	{r3, pc}
   d7b54:	00030244 	.word	0x00030244

000d7b58 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d7b58:	b508      	push	{r3, lr}
   d7b5a:	4b02      	ldr	r3, [pc, #8]	; (d7b64 <spark_set_connection_property+0xc>)
   d7b5c:	681b      	ldr	r3, [r3, #0]
   d7b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7b60:	9301      	str	r3, [sp, #4]
   d7b62:	bd08      	pop	{r3, pc}
   d7b64:	00030244 	.word	0x00030244

000d7b68 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7b68:	b508      	push	{r3, lr}
   d7b6a:	4b02      	ldr	r3, [pc, #8]	; (d7b74 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7b6c:	681b      	ldr	r3, [r3, #0]
   d7b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7b70:	9301      	str	r3, [sp, #4]
   d7b72:	bd08      	pop	{r3, pc}
   d7b74:	00030244 	.word	0x00030244

000d7b78 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d7b78:	b508      	push	{r3, lr}
   d7b7a:	4b02      	ldr	r3, [pc, #8]	; (d7b84 <spark_cloud_disconnect+0xc>)
   d7b7c:	681b      	ldr	r3, [r3, #0]
   d7b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7b80:	9301      	str	r3, [sp, #4]
   d7b82:	bd08      	pop	{r3, pc}
   d7b84:	00030244 	.word	0x00030244

000d7b88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7b88:	b508      	push	{r3, lr}
   d7b8a:	4b02      	ldr	r3, [pc, #8]	; (d7b94 <network_connect+0xc>)
   d7b8c:	681b      	ldr	r3, [r3, #0]
   d7b8e:	685b      	ldr	r3, [r3, #4]
   d7b90:	9301      	str	r3, [sp, #4]
   d7b92:	bd08      	pop	{r3, pc}
   d7b94:	00030240 	.word	0x00030240

000d7b98 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7b98:	b508      	push	{r3, lr}
   d7b9a:	4b02      	ldr	r3, [pc, #8]	; (d7ba4 <network_connecting+0xc>)
   d7b9c:	681b      	ldr	r3, [r3, #0]
   d7b9e:	689b      	ldr	r3, [r3, #8]
   d7ba0:	9301      	str	r3, [sp, #4]
   d7ba2:	bd08      	pop	{r3, pc}
   d7ba4:	00030240 	.word	0x00030240

000d7ba8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7ba8:	b508      	push	{r3, lr}
   d7baa:	4b02      	ldr	r3, [pc, #8]	; (d7bb4 <network_disconnect+0xc>)
   d7bac:	681b      	ldr	r3, [r3, #0]
   d7bae:	68db      	ldr	r3, [r3, #12]
   d7bb0:	9301      	str	r3, [sp, #4]
   d7bb2:	bd08      	pop	{r3, pc}
   d7bb4:	00030240 	.word	0x00030240

000d7bb8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7bb8:	b508      	push	{r3, lr}
   d7bba:	4b02      	ldr	r3, [pc, #8]	; (d7bc4 <network_ready+0xc>)
   d7bbc:	681b      	ldr	r3, [r3, #0]
   d7bbe:	691b      	ldr	r3, [r3, #16]
   d7bc0:	9301      	str	r3, [sp, #4]
   d7bc2:	bd08      	pop	{r3, pc}
   d7bc4:	00030240 	.word	0x00030240

000d7bc8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7bc8:	b508      	push	{r3, lr}
   d7bca:	4b02      	ldr	r3, [pc, #8]	; (d7bd4 <network_on+0xc>)
   d7bcc:	681b      	ldr	r3, [r3, #0]
   d7bce:	695b      	ldr	r3, [r3, #20]
   d7bd0:	9301      	str	r3, [sp, #4]
   d7bd2:	bd08      	pop	{r3, pc}
   d7bd4:	00030240 	.word	0x00030240

000d7bd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7bd8:	b508      	push	{r3, lr}
   d7bda:	4b02      	ldr	r3, [pc, #8]	; (d7be4 <network_off+0xc>)
   d7bdc:	681b      	ldr	r3, [r3, #0]
   d7bde:	699b      	ldr	r3, [r3, #24]
   d7be0:	9301      	str	r3, [sp, #4]
   d7be2:	bd08      	pop	{r3, pc}
   d7be4:	00030240 	.word	0x00030240

000d7be8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7be8:	b508      	push	{r3, lr}
   d7bea:	4b02      	ldr	r3, [pc, #8]	; (d7bf4 <network_listen+0xc>)
   d7bec:	681b      	ldr	r3, [r3, #0]
   d7bee:	69db      	ldr	r3, [r3, #28]
   d7bf0:	9301      	str	r3, [sp, #4]
   d7bf2:	bd08      	pop	{r3, pc}
   d7bf4:	00030240 	.word	0x00030240

000d7bf8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7bf8:	b508      	push	{r3, lr}
   d7bfa:	4b02      	ldr	r3, [pc, #8]	; (d7c04 <network_listening+0xc>)
   d7bfc:	681b      	ldr	r3, [r3, #0]
   d7bfe:	6a1b      	ldr	r3, [r3, #32]
   d7c00:	9301      	str	r3, [sp, #4]
   d7c02:	bd08      	pop	{r3, pc}
   d7c04:	00030240 	.word	0x00030240

000d7c08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7c08:	b508      	push	{r3, lr}
   d7c0a:	4b02      	ldr	r3, [pc, #8]	; (d7c14 <network_set_listen_timeout+0xc>)
   d7c0c:	681b      	ldr	r3, [r3, #0]
   d7c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c10:	9301      	str	r3, [sp, #4]
   d7c12:	bd08      	pop	{r3, pc}
   d7c14:	00030240 	.word	0x00030240

000d7c18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7c18:	b508      	push	{r3, lr}
   d7c1a:	4b02      	ldr	r3, [pc, #8]	; (d7c24 <network_get_listen_timeout+0xc>)
   d7c1c:	681b      	ldr	r3, [r3, #0]
   d7c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7c20:	9301      	str	r3, [sp, #4]
   d7c22:	bd08      	pop	{r3, pc}
   d7c24:	00030240 	.word	0x00030240

000d7c28 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7c28:	b508      	push	{r3, lr}
   d7c2a:	4b02      	ldr	r3, [pc, #8]	; (d7c34 <network_is_on+0xc>)
   d7c2c:	681b      	ldr	r3, [r3, #0]
   d7c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7c30:	9301      	str	r3, [sp, #4]
   d7c32:	bd08      	pop	{r3, pc}
   d7c34:	00030240 	.word	0x00030240

000d7c38 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7c38:	b508      	push	{r3, lr}
   d7c3a:	4b02      	ldr	r3, [pc, #8]	; (d7c44 <network_is_off+0xc>)
   d7c3c:	681b      	ldr	r3, [r3, #0]
   d7c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c40:	9301      	str	r3, [sp, #4]
   d7c42:	bd08      	pop	{r3, pc}
   d7c44:	00030240 	.word	0x00030240

000d7c48 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7c48:	b508      	push	{r3, lr}
   d7c4a:	4b02      	ldr	r3, [pc, #8]	; (d7c54 <malloc+0xc>)
   d7c4c:	681b      	ldr	r3, [r3, #0]
   d7c4e:	681b      	ldr	r3, [r3, #0]
   d7c50:	9301      	str	r3, [sp, #4]
   d7c52:	bd08      	pop	{r3, pc}
   d7c54:	0003021c 	.word	0x0003021c

000d7c58 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7c58:	b508      	push	{r3, lr}
   d7c5a:	4b02      	ldr	r3, [pc, #8]	; (d7c64 <free+0xc>)
   d7c5c:	681b      	ldr	r3, [r3, #0]
   d7c5e:	685b      	ldr	r3, [r3, #4]
   d7c60:	9301      	str	r3, [sp, #4]
   d7c62:	bd08      	pop	{r3, pc}
   d7c64:	0003021c 	.word	0x0003021c

000d7c68 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7c68:	b508      	push	{r3, lr}
   d7c6a:	4b02      	ldr	r3, [pc, #8]	; (d7c74 <realloc+0xc>)
   d7c6c:	681b      	ldr	r3, [r3, #0]
   d7c6e:	689b      	ldr	r3, [r3, #8]
   d7c70:	9301      	str	r3, [sp, #4]
   d7c72:	bd08      	pop	{r3, pc}
   d7c74:	0003021c 	.word	0x0003021c

000d7c78 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7c78:	b508      	push	{r3, lr}
   d7c7a:	4b02      	ldr	r3, [pc, #8]	; (d7c84 <siprintf+0xc>)
   d7c7c:	681b      	ldr	r3, [r3, #0]
   d7c7e:	691b      	ldr	r3, [r3, #16]
   d7c80:	9301      	str	r3, [sp, #4]
   d7c82:	bd08      	pop	{r3, pc}
   d7c84:	0003021c 	.word	0x0003021c

000d7c88 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7c88:	b508      	push	{r3, lr}
   d7c8a:	4b02      	ldr	r3, [pc, #8]	; (d7c94 <snprintf+0xc>)
   d7c8c:	681b      	ldr	r3, [r3, #0]
   d7c8e:	69db      	ldr	r3, [r3, #28]
   d7c90:	9301      	str	r3, [sp, #4]
   d7c92:	bd08      	pop	{r3, pc}
   d7c94:	0003021c 	.word	0x0003021c

000d7c98 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7c98:	b508      	push	{r3, lr}
   d7c9a:	4b02      	ldr	r3, [pc, #8]	; (d7ca4 <vsnprintf+0xc>)
   d7c9c:	681b      	ldr	r3, [r3, #0]
   d7c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ca0:	9301      	str	r3, [sp, #4]
   d7ca2:	bd08      	pop	{r3, pc}
   d7ca4:	0003021c 	.word	0x0003021c

000d7ca8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7ca8:	b508      	push	{r3, lr}
   d7caa:	4b02      	ldr	r3, [pc, #8]	; (d7cb4 <abort+0xc>)
   d7cac:	681b      	ldr	r3, [r3, #0]
   d7cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7cb0:	9301      	str	r3, [sp, #4]
   d7cb2:	bd08      	pop	{r3, pc}
   d7cb4:	0003021c 	.word	0x0003021c

000d7cb8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7cb8:	b508      	push	{r3, lr}
   d7cba:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <_malloc_r+0xc>)
   d7cbc:	681b      	ldr	r3, [r3, #0]
   d7cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7cc0:	9301      	str	r3, [sp, #4]
   d7cc2:	bd08      	pop	{r3, pc}
   d7cc4:	0003021c 	.word	0x0003021c

000d7cc8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7cc8:	b508      	push	{r3, lr}
   d7cca:	4b02      	ldr	r3, [pc, #8]	; (d7cd4 <newlib_impure_ptr_callback+0xc>)
   d7ccc:	681b      	ldr	r3, [r3, #0]
   d7cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7cd0:	9301      	str	r3, [sp, #4]
   d7cd2:	bd08      	pop	{r3, pc}
   d7cd4:	0003021c 	.word	0x0003021c

000d7cd8 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d7cd8:	b508      	push	{r3, lr}
   d7cda:	4b02      	ldr	r3, [pc, #8]	; (d7ce4 <strftime+0xc>)
   d7cdc:	681b      	ldr	r3, [r3, #0]
   d7cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7ce0:	9301      	str	r3, [sp, #4]
   d7ce2:	bd08      	pop	{r3, pc}
   d7ce4:	0003021c 	.word	0x0003021c

000d7ce8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7ce8:	b508      	push	{r3, lr}
   d7cea:	4b02      	ldr	r3, [pc, #8]	; (d7cf4 <localtime_r+0xc>)
   d7cec:	681b      	ldr	r3, [r3, #0]
   d7cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7cf0:	9301      	str	r3, [sp, #4]
   d7cf2:	bd08      	pop	{r3, pc}
   d7cf4:	0003021c 	.word	0x0003021c

000d7cf8 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7cf8:	b508      	push	{r3, lr}
   d7cfa:	4b02      	ldr	r3, [pc, #8]	; (d7d04 <gmtime_r+0xc>)
   d7cfc:	681b      	ldr	r3, [r3, #0]
   d7cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7d00:	9301      	str	r3, [sp, #4]
   d7d02:	bd08      	pop	{r3, pc}
   d7d04:	0003021c 	.word	0x0003021c

000d7d08 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d7d08:	b508      	push	{r3, lr}
   d7d0a:	4b02      	ldr	r3, [pc, #8]	; (d7d14 <mktime+0xc>)
   d7d0c:	681b      	ldr	r3, [r3, #0]
   d7d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7d10:	9301      	str	r3, [sp, #4]
   d7d12:	bd08      	pop	{r3, pc}
   d7d14:	0003021c 	.word	0x0003021c

000d7d18 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d7d18:	428a      	cmp	r2, r1
{
   d7d1a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d7d1c:	d007      	beq.n	d7d2e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d7d1e:	9c02      	ldr	r4, [sp, #8]
   d7d20:	1a40      	subs	r0, r0, r1
   d7d22:	1ae4      	subs	r4, r4, r3
   d7d24:	4360      	muls	r0, r4
   d7d26:	1a52      	subs	r2, r2, r1
   d7d28:	fb90 f0f2 	sdiv	r0, r0, r2
   d7d2c:	4418      	add	r0, r3
}
   d7d2e:	bd10      	pop	{r4, pc}

000d7d30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7d30:	2100      	movs	r1, #0
   d7d32:	f7ff be47 	b.w	d79c4 <system_delay_ms>

000d7d36 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7d36:	b510      	push	{r4, lr}
      if (_M_empty())
   d7d38:	6883      	ldr	r3, [r0, #8]
   d7d3a:	4604      	mov	r4, r0
   d7d3c:	b90b      	cbnz	r3, d7d42 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7d3e:	f003 f944 	bl	dafca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7d42:	68c3      	ldr	r3, [r0, #12]
   d7d44:	4798      	blx	r3
      if (_M_manager)
   d7d46:	68a3      	ldr	r3, [r4, #8]
   d7d48:	b11b      	cbz	r3, d7d52 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7d4a:	2203      	movs	r2, #3
   d7d4c:	4621      	mov	r1, r4
   d7d4e:	4620      	mov	r0, r4
   d7d50:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7d52:	4620      	mov	r0, r4
   d7d54:	2110      	movs	r1, #16
}
   d7d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7d5a:	f003 b930 	b.w	dafbe <_ZdlPvj>

000d7d5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7d5e:	b510      	push	{r4, lr}
          _M_dispose();
   d7d60:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7d62:	4604      	mov	r4, r0
          _M_dispose();
   d7d64:	689b      	ldr	r3, [r3, #8]
   d7d66:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7d68:	68a3      	ldr	r3, [r4, #8]
   d7d6a:	3b01      	subs	r3, #1
   d7d6c:	60a3      	str	r3, [r4, #8]
   d7d6e:	b92b      	cbnz	r3, d7d7c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d7d70:	6823      	ldr	r3, [r4, #0]
   d7d72:	4620      	mov	r0, r4
   d7d74:	68db      	ldr	r3, [r3, #12]
    }
   d7d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7d7a:	4718      	bx	r3
    }
   d7d7c:	bd10      	pop	{r4, pc}

000d7d7e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7d7e:	b510      	push	{r4, lr}
   d7d80:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7d82:	6800      	ldr	r0, [r0, #0]
   d7d84:	b108      	cbz	r0, d7d8a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7d86:	f7ff fc13 	bl	d75b0 <os_mutex_recursive_destroy>
    }
   d7d8a:	4620      	mov	r0, r4
   d7d8c:	bd10      	pop	{r4, pc}

000d7d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7d8e:	680b      	ldr	r3, [r1, #0]
   d7d90:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7d92:	b113      	cbz	r3, d7d9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7d94:	685a      	ldr	r2, [r3, #4]
   d7d96:	3201      	adds	r2, #1
   d7d98:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d7d9a:	4770      	bx	lr

000d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d7d9c:	b510      	push	{r4, lr}
   d7d9e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d7da0:	6800      	ldr	r0, [r0, #0]
   d7da2:	b128      	cbz	r0, d7db0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d7da4:	6843      	ldr	r3, [r0, #4]
   d7da6:	3b01      	subs	r3, #1
   d7da8:	6043      	str	r3, [r0, #4]
   d7daa:	b90b      	cbnz	r3, d7db0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7dac:	f7ff ffd7 	bl	d7d5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d7db0:	4620      	mov	r0, r4
   d7db2:	bd10      	pop	{r4, pc}

000d7db4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7db4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7db6:	4c06      	ldr	r4, [pc, #24]	; (d7dd0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7db8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7dba:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7dbc:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7dbe:	f7ff fbef 	bl	d75a0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7dc2:	4620      	mov	r0, r4
   d7dc4:	4a03      	ldr	r2, [pc, #12]	; (d7dd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7dc6:	4904      	ldr	r1, [pc, #16]	; (d7dd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7dcc:	f003 b8f2 	b.w	dafb4 <__aeabi_atexit>
   d7dd0:	2003e598 	.word	0x2003e598
   d7dd4:	2003e3b0 	.word	0x2003e3b0
   d7dd8:	000d7d7f 	.word	0x000d7d7f

000d7ddc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7ddc:	2200      	movs	r2, #0
   d7dde:	6840      	ldr	r0, [r0, #4]
   d7de0:	4611      	mov	r1, r2
   d7de2:	f7ff bee9 	b.w	d7bb8 <network_ready>

000d7de6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7de6:	2200      	movs	r2, #0
   d7de8:	6840      	ldr	r0, [r0, #4]
   d7dea:	4611      	mov	r1, r2
   d7dec:	f7ff bf04 	b.w	d7bf8 <network_listening>

000d7df0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7df0:	2200      	movs	r2, #0
   d7df2:	6840      	ldr	r0, [r0, #4]
   d7df4:	4611      	mov	r1, r2
   d7df6:	f7ff bf0f 	b.w	d7c18 <network_get_listen_timeout>

000d7dfa <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7dfa:	6840      	ldr	r0, [r0, #4]
   d7dfc:	2200      	movs	r2, #0
   d7dfe:	f7ff bf03 	b.w	d7c08 <network_set_listen_timeout>

000d7e02 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7e02:	6840      	ldr	r0, [r0, #4]
   d7e04:	2200      	movs	r2, #0
   d7e06:	f081 0101 	eor.w	r1, r1, #1
   d7e0a:	f7ff beed 	b.w	d7be8 <network_listen>

000d7e0e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7e0e:	2300      	movs	r3, #0
   d7e10:	6840      	ldr	r0, [r0, #4]
   d7e12:	461a      	mov	r2, r3
   d7e14:	4619      	mov	r1, r3
   d7e16:	f7ff bed7 	b.w	d7bc8 <network_on>

000d7e1a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7e1a:	2200      	movs	r2, #0
   d7e1c:	6840      	ldr	r0, [r0, #4]
   d7e1e:	4611      	mov	r1, r2
   d7e20:	f7ff beba 	b.w	d7b98 <network_connecting>

000d7e24 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7e24:	6840      	ldr	r0, [r0, #4]
   d7e26:	2200      	movs	r2, #0
   d7e28:	2102      	movs	r1, #2
   d7e2a:	f7ff bebd 	b.w	d7ba8 <network_disconnect>

000d7e2e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7e2e:	2300      	movs	r3, #0
   d7e30:	6840      	ldr	r0, [r0, #4]
   d7e32:	461a      	mov	r2, r3
   d7e34:	f7ff bea8 	b.w	d7b88 <network_connect>

000d7e38 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d7e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d7e3a:	4b1b      	ldr	r3, [pc, #108]	; (d7ea8 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d7e3c:	6003      	str	r3, [r0, #0]
   d7e3e:	2500      	movs	r5, #0
   d7e40:	460f      	mov	r7, r1
   d7e42:	3328      	adds	r3, #40	; 0x28
   d7e44:	2618      	movs	r6, #24
   d7e46:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7e4a:	b089      	sub	sp, #36	; 0x24
   d7e4c:	6043      	str	r3, [r0, #4]
   d7e4e:	4632      	mov	r2, r6
   d7e50:	4629      	mov	r1, r5
   d7e52:	4604      	mov	r4, r0
   d7e54:	3010      	adds	r0, #16
   d7e56:	f003 fe83 	bl	dbb60 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7e5a:	6878      	ldr	r0, [r7, #4]
   d7e5c:	462a      	mov	r2, r5
   d7e5e:	4629      	mov	r1, r5
   d7e60:	f7ff feaa 	bl	d7bb8 <network_ready>
   d7e64:	b918      	cbnz	r0, d7e6e <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d7e66:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d7e68:	4620      	mov	r0, r4
   d7e6a:	b009      	add	sp, #36	; 0x24
   d7e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d7e6e:	4629      	mov	r1, r5
   d7e70:	4632      	mov	r2, r6
   d7e72:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d7e74:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d7e78:	f003 fe72 	bl	dbb60 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7e7c:	a902      	add	r1, sp, #8
   d7e7e:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d7e80:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7e84:	f7ff fb34 	bl	d74f0 <cellular_signal>
   d7e88:	b110      	cbz	r0, d7e90 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d7e8a:	2301      	movs	r3, #1
   d7e8c:	60a3      	str	r3, [r4, #8]
            return sig;
   d7e8e:	e7eb      	b.n	d7e68 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d7e90:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d7e92:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d7e94:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d7e96:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d7e98:	b90b      	cbnz	r3, d7e9e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d7e9a:	2302      	movs	r3, #2
   d7e9c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d7e9e:	a902      	add	r1, sp, #8
   d7ea0:	4620      	mov	r0, r4
   d7ea2:	f000 f8ae 	bl	d8002 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d7ea6:	e7df      	b.n	d7e68 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d7ea8:	000de4cc 	.word	0x000de4cc

000d7eac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7eac:	4b08      	ldr	r3, [pc, #32]	; (d7ed0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7eae:	b510      	push	{r4, lr}
   d7eb0:	2428      	movs	r4, #40	; 0x28
   d7eb2:	4622      	mov	r2, r4
   d7eb4:	4618      	mov	r0, r3
   d7eb6:	2100      	movs	r1, #0
   d7eb8:	f003 fe52 	bl	dbb60 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7ebc:	4b05      	ldr	r3, [pc, #20]	; (d7ed4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7ebe:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7ec4:	6042      	str	r2, [r0, #4]
   d7ec6:	2204      	movs	r2, #4
   d7ec8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7eca:	4a03      	ldr	r2, [pc, #12]	; (d7ed8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7ecc:	601a      	str	r2, [r3, #0]
   d7ece:	bd10      	pop	{r4, pc}
   d7ed0:	2003e5a4 	.word	0x2003e5a4
   d7ed4:	2003e59c 	.word	0x2003e59c
   d7ed8:	000de490 	.word	0x000de490

000d7edc <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d7edc:	4770      	bx	lr

000d7ede <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7ede:	7d00      	ldrb	r0, [r0, #20]
   d7ee0:	4770      	bx	lr

000d7ee2 <_ZN14CellularSignalD0Ev>:
   d7ee2:	b510      	push	{r4, lr}
   d7ee4:	2128      	movs	r1, #40	; 0x28
   d7ee6:	4604      	mov	r4, r0
   d7ee8:	f003 f869 	bl	dafbe <_ZdlPvj>
   d7eec:	4620      	mov	r0, r4
   d7eee:	bd10      	pop	{r4, pc}

000d7ef0 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d7ef0:	7d03      	ldrb	r3, [r0, #20]
   d7ef2:	b17b      	cbz	r3, d7f14 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d7ef4:	69c3      	ldr	r3, [r0, #28]
   d7ef6:	2b00      	cmp	r3, #0
   d7ef8:	db0c      	blt.n	d7f14 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d7efa:	ee07 3a90 	vmov	s15, r3
   d7efe:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7f1c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d7f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7f06:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7f0a:	eddf 7a05 	vldr	s15, [pc, #20]	; d7f20 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d7f0e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7f12:	4770      	bx	lr
    }

    return -1.0f;
   d7f14:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7f18:	4770      	bx	lr
   d7f1a:	bf00      	nop
   d7f1c:	477fff00 	.word	0x477fff00
   d7f20:	42c80000 	.word	0x42c80000

000d7f24 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d7f24:	7d03      	ldrb	r3, [r0, #20]
   d7f26:	b163      	cbz	r3, d7f42 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d7f28:	6983      	ldr	r3, [r0, #24]
   d7f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7f2e:	d008      	beq.n	d7f42 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d7f30:	ee07 3a90 	vmov	s15, r3
   d7f34:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7f48 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7f3c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7f40:	4770      	bx	lr
    }

    return 0.0f;
   d7f42:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7f4c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d7f46:	4770      	bx	lr
   d7f48:	42c80000 	.word	0x42c80000
   d7f4c:	00000000 	.word	0x00000000

000d7f50 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7f50:	7d03      	ldrb	r3, [r0, #20]
   d7f52:	b17b      	cbz	r3, d7f74 <_ZNK14CellularSignal10getQualityEv+0x24>
   d7f54:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d7f56:	2b00      	cmp	r3, #0
   d7f58:	db0c      	blt.n	d7f74 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d7f5a:	ee07 3a90 	vmov	s15, r3
   d7f5e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7f7c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d7f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7f66:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7f6a:	eddf 7a05 	vldr	s15, [pc, #20]	; d7f80 <_ZNK14CellularSignal10getQualityEv+0x30>
   d7f6e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7f72:	4770      	bx	lr
    }

    return -1.0f;
   d7f74:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7f78:	4770      	bx	lr
   d7f7a:	bf00      	nop
   d7f7c:	477fff00 	.word	0x477fff00
   d7f80:	42c80000 	.word	0x42c80000

000d7f84 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7f84:	7d03      	ldrb	r3, [r0, #20]
   d7f86:	b163      	cbz	r3, d7fa2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d7f88:	6a03      	ldr	r3, [r0, #32]
   d7f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7f8e:	d008      	beq.n	d7fa2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d7f90:	ee07 3a90 	vmov	s15, r3
   d7f94:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7fa8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7f9c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7fa0:	4770      	bx	lr
    }

    return 0.0f;
   d7fa2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7fac <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d7fa6:	4770      	bx	lr
   d7fa8:	42c80000 	.word	0x42c80000
   d7fac:	00000000 	.word	0x00000000

000d7fb0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d7fb0:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d7fb2:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d7fb4:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d7fb6:	da0a      	bge.n	d7fce <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d7fb8:	212d      	movs	r1, #45	; 0x2d
   d7fba:	f002 f87c 	bl	da0b6 <_ZN5Print5printEc>
            val = -n;
   d7fbe:	4261      	negs	r1, r4
            t = print('-');
   d7fc0:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7fc2:	220a      	movs	r2, #10
   d7fc4:	4630      	mov	r0, r6
   d7fc6:	f002 f88f 	bl	da0e8 <_ZN5Print11printNumberEmh>
    }
}
   d7fca:	4428      	add	r0, r5
   d7fcc:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d7fce:	4621      	mov	r1, r4
        size_t t = 0;
   d7fd0:	2500      	movs	r5, #0
   d7fd2:	e7f6      	b.n	d7fc2 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d7fd4 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d7fd4:	b570      	push	{r4, r5, r6, lr}
   d7fd6:	460c      	mov	r4, r1
   d7fd8:	4605      	mov	r5, r0
   d7fda:	6881      	ldr	r1, [r0, #8]
   d7fdc:	4620      	mov	r0, r4
   d7fde:	f7ff ffe7 	bl	d7fb0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d7fe2:	212c      	movs	r1, #44	; 0x2c
   d7fe4:	4606      	mov	r6, r0
   d7fe6:	4620      	mov	r0, r4
   d7fe8:	f002 f865 	bl	da0b6 <_ZN5Print5printEc>
   d7fec:	68e9      	ldr	r1, [r5, #12]
   d7fee:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	f7ff ffdd 	bl	d7fb0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d7ff6:	4430      	add	r0, r6
   d7ff8:	bd70      	pop	{r4, r5, r6, pc}

000d7ffa <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d7ffa:	f1a0 0004 	sub.w	r0, r0, #4
   d7ffe:	f7ff bfe9 	b.w	d7fd4 <_ZNK14CellularSignal7printToER5Print>

000d8002 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d8002:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8004:	460d      	mov	r5, r1
   d8006:	f100 0410 	add.w	r4, r0, #16
   d800a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d800c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d800e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8012:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d8016:	2001      	movs	r0, #1
   d8018:	bd30      	pop	{r4, r5, pc}

000d801a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d801a:	4770      	bx	lr

000d801c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d801c:	2000      	movs	r0, #0
   d801e:	4770      	bx	lr

000d8020 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8020:	b510      	push	{r4, lr}
   d8022:	2110      	movs	r1, #16
   d8024:	4604      	mov	r4, r0
   d8026:	f002 ffca 	bl	dafbe <_ZdlPvj>
   d802a:	4620      	mov	r0, r4
   d802c:	bd10      	pop	{r4, pc}

000d802e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d802e:	b508      	push	{r3, lr}
      { delete this; }
   d8030:	f7ff fff6 	bl	d8020 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8034:	bd08      	pop	{r3, pc}

000d8036 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8036:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8038:	2200      	movs	r2, #0
   d803a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d803e:	6002      	str	r2, [r0, #0]
   d8040:	8084      	strh	r4, [r0, #4]
   d8042:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8044:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8046:	680c      	ldr	r4, [r1, #0]
   d8048:	8085      	strh	r5, [r0, #4]
   d804a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d804c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d804e:	bd30      	pop	{r4, r5, pc}

000d8050 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8050:	b510      	push	{r4, lr}
   d8052:	4604      	mov	r4, r0
    free((void*)msg_);
   d8054:	6800      	ldr	r0, [r0, #0]
   d8056:	f7ff fdff 	bl	d7c58 <free>
}
   d805a:	4620      	mov	r0, r4
   d805c:	bd10      	pop	{r4, pc}

000d805e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d805e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8060:	68c4      	ldr	r4, [r0, #12]
   d8062:	b1f4      	cbz	r4, d80a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8064:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8066:	2b02      	cmp	r3, #2
   d8068:	d103      	bne.n	d8072 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d806a:	f104 000c 	add.w	r0, r4, #12
   d806e:	f7ff ffef 	bl	d8050 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8072:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8074:	b135      	cbz	r5, d8084 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8076:	4628      	mov	r0, r5
   d8078:	f7fc f944 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
   d807c:	2110      	movs	r1, #16
   d807e:	4628      	mov	r0, r5
   d8080:	f002 ff9d 	bl	dafbe <_ZdlPvj>
   d8084:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8086:	b135      	cbz	r5, d8096 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8088:	4628      	mov	r0, r5
   d808a:	f7fc f93b 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
   d808e:	2110      	movs	r1, #16
   d8090:	4628      	mov	r0, r5
   d8092:	f002 ff94 	bl	dafbe <_ZdlPvj>
   d8096:	4620      	mov	r0, r4
   d8098:	2114      	movs	r1, #20
   d809a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d809e:	f002 bf8e 	b.w	dafbe <_ZdlPvj>
   d80a2:	bd38      	pop	{r3, r4, r5, pc}

000d80a4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d80a4:	b510      	push	{r4, lr}
   d80a6:	b088      	sub	sp, #32
   d80a8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d80aa:	4668      	mov	r0, sp
   d80ac:	f002 f8d5 	bl	da25a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d80b0:	4669      	mov	r1, sp
   d80b2:	a804      	add	r0, sp, #16
   d80b4:	f002 f91c 	bl	da2f0 <_ZN6StringC1ERKS_>
   d80b8:	a804      	add	r0, sp, #16
   d80ba:	47a0      	blx	r4
   d80bc:	4604      	mov	r4, r0
   d80be:	a804      	add	r0, sp, #16
   d80c0:	f002 f880 	bl	da1c4 <_ZN6StringD1Ev>
    String p(param);
   d80c4:	4668      	mov	r0, sp
   d80c6:	f002 f87d 	bl	da1c4 <_ZN6StringD1Ev>
}
   d80ca:	4620      	mov	r0, r4
   d80cc:	b008      	add	sp, #32
   d80ce:	bd10      	pop	{r4, pc}

000d80d0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d80d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d80d2:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d80d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d80d8:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d80da:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d80dc:	461a      	mov	r2, r3
   d80de:	4669      	mov	r1, sp
   d80e0:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d80e2:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d80e6:	f8ad 4000 	strh.w	r4, [sp]
   d80ea:	f7ff fce5 	bl	d7ab8 <spark_function>
}
   d80ee:	b004      	add	sp, #16
   d80f0:	bd10      	pop	{r4, pc}

000d80f2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d80f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d80f4:	230c      	movs	r3, #12
   d80f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d80fa:	6803      	ldr	r3, [r0, #0]
   d80fc:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d8100:	7a03      	ldrb	r3, [r0, #8]
   d8102:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d8106:	6843      	ldr	r3, [r0, #4]
   d8108:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d810a:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d810c:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d810e:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8112:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d8114:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d8118:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d811c:	f7ff fd2c 	bl	d7b78 <spark_cloud_disconnect>
}
   d8120:	b005      	add	sp, #20
   d8122:	f85d fb04 	ldr.w	pc, [sp], #4

000d8126 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d8126:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d8128:	220c      	movs	r2, #12
   d812a:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   d812e:	6802      	ldr	r2, [r0, #0]
   d8130:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   d8134:	7a02      	ldrb	r2, [r0, #8]
   d8136:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   d813a:	6842      	ldr	r2, [r0, #4]
   d813c:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d813e:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   d8140:	7a42      	ldrb	r2, [r0, #9]
   d8142:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d8146:	4619      	mov	r1, r3
   d8148:	aa01      	add	r2, sp, #4
   d814a:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   d814c:	f8ad 300d 	strh.w	r3, [sp, #13]
   d8150:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d8154:	f7ff fd00 	bl	d7b58 <spark_set_connection_property>
}
   d8158:	b005      	add	sp, #20
   d815a:	f85d fb04 	ldr.w	pc, [sp], #4

000d815e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d815e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8160:	460e      	mov	r6, r1
   d8162:	4604      	mov	r4, r0
   d8164:	f856 3b04 	ldr.w	r3, [r6], #4
   d8168:	9300      	str	r3, [sp, #0]
   d816a:	460d      	mov	r5, r1
   d816c:	a801      	add	r0, sp, #4
   d816e:	4631      	mov	r1, r6
   d8170:	f7ff fe0d 	bl	d7d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8174:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8176:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8178:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d817a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d817c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d817e:	2300      	movs	r3, #0
   d8180:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8182:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8184:	f7ff fe0a 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8188:	4630      	mov	r0, r6
   d818a:	f7ff fe07 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d818e:	4628      	mov	r0, r5
   d8190:	2108      	movs	r1, #8
   d8192:	f002 ff14 	bl	dafbe <_ZdlPvj>
        return p;
    }
   d8196:	4620      	mov	r0, r4
   d8198:	b002      	add	sp, #8
   d819a:	bd70      	pop	{r4, r5, r6, pc}

000d819c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d819c:	b513      	push	{r0, r1, r4, lr}
   d819e:	460b      	mov	r3, r1
   d81a0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81a2:	e9d0 0100 	ldrd	r0, r1, [r0]
   d81a6:	466c      	mov	r4, sp
   d81a8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d81ac:	e893 0003 	ldmia.w	r3, {r0, r1}
   d81b0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d81b4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d81b8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d81bc:	b002      	add	sp, #8
   d81be:	bd10      	pop	{r4, pc}

000d81c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d81c0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d81c2:	b510      	push	{r4, lr}
      if (_M_empty())
   d81c4:	b90a      	cbnz	r2, d81ca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d81c6:	f002 ff00 	bl	dafca <_ZSt25__throw_bad_function_callv>
    }
   d81ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d81ce:	68c3      	ldr	r3, [r0, #12]
   d81d0:	4718      	bx	r3

000d81d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d81d2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d81d4:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d81d6:	f100 0110 	add.w	r1, r0, #16
   d81da:	f7ff fff1 	bl	d81c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d81de:	bd08      	pop	{r3, pc}

000d81e0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d81e0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d81e2:	b510      	push	{r4, lr}
      if (_M_empty())
   d81e4:	b90a      	cbnz	r2, d81ea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d81e6:	f002 fef0 	bl	dafca <_ZSt25__throw_bad_function_callv>
    }
   d81ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d81ee:	68c3      	ldr	r3, [r0, #12]
   d81f0:	4718      	bx	r3

000d81f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d81f2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d81f4:	6800      	ldr	r0, [r0, #0]
   d81f6:	f100 0110 	add.w	r1, r0, #16
   d81fa:	f7ff fff1 	bl	d81e0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d81fe:	bd08      	pop	{r3, pc}

000d8200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8200:	b538      	push	{r3, r4, r5, lr}
   d8202:	2300      	movs	r3, #0
   d8204:	4604      	mov	r4, r0
   d8206:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8208:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d820a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d820c:	f7fb ff43 	bl	d4096 <_Znwj>
   d8210:	b128      	cbz	r0, d821e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8212:	2301      	movs	r3, #1
   d8214:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8218:	4b02      	ldr	r3, [pc, #8]	; (d8224 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d821a:	6003      	str	r3, [r0, #0]
   d821c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d821e:	6020      	str	r0, [r4, #0]
	}
   d8220:	4620      	mov	r0, r4
   d8222:	bd38      	pop	{r3, r4, r5, pc}
   d8224:	000de500 	.word	0x000de500

000d8228 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8228:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d822a:	2300      	movs	r3, #0
   d822c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d822e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8230:	4604      	mov	r4, r0
   d8232:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8234:	b12b      	cbz	r3, d8242 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8236:	2202      	movs	r2, #2
   d8238:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d823a:	68eb      	ldr	r3, [r5, #12]
   d823c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d823e:	68ab      	ldr	r3, [r5, #8]
   d8240:	60a3      	str	r3, [r4, #8]
    }
   d8242:	4620      	mov	r0, r4
   d8244:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8248:	b5f0      	push	{r4, r5, r6, r7, lr}
   d824a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d824c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d824e:	4668      	mov	r0, sp
   d8250:	f7ff fef1 	bl	d8036 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8254:	f04f 0302 	mov.w	r3, #2
   d8258:	e8d4 2f4f 	ldrexb	r2, [r4]
   d825c:	2a00      	cmp	r2, #0
   d825e:	d103      	bne.n	d8268 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8260:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8264:	2900      	cmp	r1, #0
   d8266:	d1f7      	bne.n	d8258 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8268:	d125      	bne.n	d82b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d826a:	f104 050c 	add.w	r5, r4, #12
   d826e:	4669      	mov	r1, sp
   d8270:	4628      	mov	r0, r5
   d8272:	f7ff fee0 	bl	d8036 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8276:	f3bf 8f5b 	dmb	ish
   d827a:	2301      	movs	r3, #1
   d827c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d827e:	2000      	movs	r0, #0
   d8280:	f104 0308 	add.w	r3, r4, #8
   d8284:	f3bf 8f5b 	dmb	ish
   d8288:	e853 6f00 	ldrex	r6, [r3]
   d828c:	e843 0200 	strex	r2, r0, [r3]
   d8290:	2a00      	cmp	r2, #0
   d8292:	d1f9      	bne.n	d8288 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8294:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8298:	b16e      	cbz	r6, d82b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d829a:	f7ff fbb3 	bl	d7a04 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d829e:	b178      	cbz	r0, d82c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d82a0:	4629      	mov	r1, r5
   d82a2:	4630      	mov	r0, r6
   d82a4:	f7ff ff8c 	bl	d81c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d82a8:	4630      	mov	r0, r6
   d82aa:	f7fc f82b 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d82ae:	2110      	movs	r1, #16
   d82b0:	4630      	mov	r0, r6
   d82b2:	f002 fe84 	bl	dafbe <_ZdlPvj>
        p_->setError(std::move(error));
   d82b6:	4668      	mov	r0, sp
   d82b8:	f7ff feca 	bl	d8050 <_ZN8particle5ErrorD1Ev>
    }
   d82bc:	b009      	add	sp, #36	; 0x24
   d82be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d82c0:	4631      	mov	r1, r6
   d82c2:	a802      	add	r0, sp, #8
   d82c4:	f7ff ffb0 	bl	d8228 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d82c8:	68e0      	ldr	r0, [r4, #12]
   d82ca:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d82ce:	b108      	cbz	r0, d82d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d82d0:	f003 fc9c 	bl	dbc0c <strdup>
        type_(type) {
   d82d4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d82d6:	2010      	movs	r0, #16
   d82d8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d82dc:	f7fb fedb 	bl	d4096 <_Znwj>
   d82e0:	4605      	mov	r5, r0
   d82e2:	b1e8      	cbz	r0, d8320 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d82e4:	2700      	movs	r7, #0
   d82e6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d82e8:	2018      	movs	r0, #24
   d82ea:	f7fb fed4 	bl	d4096 <_Znwj>
   d82ee:	4604      	mov	r4, r0
   d82f0:	b188      	cbz	r0, d8316 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d82f2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d82f4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d82f6:	a802      	add	r0, sp, #8
   d82f8:	f7ff ff50 	bl	d819c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d82fc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d82fe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8300:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8302:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8304:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8306:	a906      	add	r1, sp, #24
   d8308:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d830a:	60e3      	str	r3, [r4, #12]
   d830c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8310:	9205      	str	r2, [sp, #20]
   d8312:	f7ff fe90 	bl	d8036 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8316:	4b08      	ldr	r3, [pc, #32]	; (d8338 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8318:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d831a:	4b08      	ldr	r3, [pc, #32]	; (d833c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d831c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d831e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8320:	a806      	add	r0, sp, #24
   d8322:	f7ff fe95 	bl	d8050 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8326:	a802      	add	r0, sp, #8
   d8328:	f7fb ffec 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d832c:	2200      	movs	r2, #0
   d832e:	4629      	mov	r1, r5
   d8330:	4803      	ldr	r0, [pc, #12]	; (d8340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8332:	f7ff fb6f 	bl	d7a14 <application_thread_invoke>
   d8336:	e7b7      	b.n	d82a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8338:	000d81d3 	.word	0x000d81d3
   d833c:	000d8469 	.word	0x000d8469
   d8340:	000d7d37 	.word	0x000d7d37

000d8344 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8348:	b08a      	sub	sp, #40	; 0x28
   d834a:	4605      	mov	r5, r0
   d834c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8350:	460c      	mov	r4, r1
   d8352:	4617      	mov	r7, r2
   d8354:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8356:	f7ff fbc7 	bl	d7ae8 <spark_cloud_flag_connected>
   d835a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d835c:	4682      	mov	sl, r0
   d835e:	bb38      	cbnz	r0, d83b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8360:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8364:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8366:	a905      	add	r1, sp, #20
   d8368:	4630      	mov	r0, r6
   d836a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d836e:	f7ff fe62 	bl	d8036 <_ZN8particle5ErrorC1EOS0_>
   d8372:	2014      	movs	r0, #20
   d8374:	f7fb fe8f 	bl	d4096 <_Znwj>
   d8378:	4604      	mov	r4, r0
   d837a:	b148      	cbz	r0, d8390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d837c:	2302      	movs	r3, #2
   d837e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8380:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8382:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8386:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8388:	4631      	mov	r1, r6
   d838a:	300c      	adds	r0, #12
   d838c:	f7ff fe53 	bl	d8036 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8390:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8392:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8394:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8398:	f7ff ff32 	bl	d8200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d839c:	4630      	mov	r0, r6
   d839e:	f7ff fe57 	bl	d8050 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d83a2:	a805      	add	r0, sp, #20
   d83a4:	f7ff fe54 	bl	d8050 <_ZN8particle5ErrorD1Ev>
}
   d83a8:	4628      	mov	r0, r5
   d83aa:	b00a      	add	sp, #40	; 0x28
   d83ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d83b0:	230c      	movs	r3, #12
   d83b2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d83b6:	2014      	movs	r0, #20
   d83b8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d83bc:	9307      	str	r3, [sp, #28]
   d83be:	f7fb fe6a 	bl	d4096 <_Znwj>
   d83c2:	4601      	mov	r1, r0
   d83c4:	b128      	cbz	r0, d83d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d83c6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d83ca:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d83ce:	f880 a001 	strb.w	sl, [r0, #1]
   d83d2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d83d4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d83d6:	f7ff ff13 	bl	d8200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d83da:	4b22      	ldr	r3, [pc, #136]	; (d8464 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d83dc:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d83de:	2008      	movs	r0, #8
   d83e0:	f7fb fe59 	bl	d4096 <_Znwj>
   d83e4:	4682      	mov	sl, r0
   d83e6:	b128      	cbz	r0, d83f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d83e8:	9b03      	ldr	r3, [sp, #12]
   d83ea:	f840 3b04 	str.w	r3, [r0], #4
   d83ee:	a904      	add	r1, sp, #16
   d83f0:	f7ff fccd 	bl	d7d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d83f4:	9600      	str	r6, [sp, #0]
   d83f6:	fa5f f389 	uxtb.w	r3, r9
   d83fa:	4642      	mov	r2, r8
   d83fc:	4639      	mov	r1, r7
   d83fe:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8400:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8404:	f7ff fb80 	bl	d7b08 <spark_send_event>
   d8408:	b9b8      	cbnz	r0, d843a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d840a:	9b03      	ldr	r3, [sp, #12]
   d840c:	785b      	ldrb	r3, [r3, #1]
   d840e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8412:	b993      	cbnz	r3, d843a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8414:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8418:	a905      	add	r1, sp, #20
   d841a:	a803      	add	r0, sp, #12
   d841c:	9205      	str	r2, [sp, #20]
   d841e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8422:	f7ff ff11 	bl	d8248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8426:	a805      	add	r0, sp, #20
   d8428:	f7ff fe12 	bl	d8050 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d842c:	a805      	add	r0, sp, #20
   d842e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8430:	f7ff fe95 	bl	d815e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8434:	a806      	add	r0, sp, #24
   d8436:	f7ff fcb1 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d843a:	9b03      	ldr	r3, [sp, #12]
   d843c:	9305      	str	r3, [sp, #20]
   d843e:	a904      	add	r1, sp, #16
   d8440:	a806      	add	r0, sp, #24
   d8442:	f7ff fca4 	bl	d7d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8446:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8448:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d844a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d844c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d844e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8450:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8452:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8454:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8456:	f7ff fca1 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d845a:	a804      	add	r0, sp, #16
   d845c:	f7ff fc9e 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8460:	e7a2      	b.n	d83a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8462:	bf00      	nop
   d8464:	000d852d 	.word	0x000d852d

000d8468 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8468:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d846a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d846c:	4605      	mov	r5, r0
	  switch (__op)
   d846e:	d007      	beq.n	d8480 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8470:	2a03      	cmp	r2, #3
   d8472:	d018      	beq.n	d84a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8474:	2a01      	cmp	r2, #1
   d8476:	d101      	bne.n	d847c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8478:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d847a:	6003      	str	r3, [r0, #0]
	}
   d847c:	2000      	movs	r0, #0
   d847e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8480:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8482:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8484:	f7fb fe07 	bl	d4096 <_Znwj>
   d8488:	4604      	mov	r4, r0
   d848a:	b150      	cbz	r0, d84a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d848c:	4631      	mov	r1, r6
   d848e:	f7ff fecb 	bl	d8228 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8492:	6930      	ldr	r0, [r6, #16]
   d8494:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8498:	b108      	cbz	r0, d849e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d849a:	f003 fbb7 	bl	dbc0c <strdup>
        type_(type) {
   d849e:	6120      	str	r0, [r4, #16]
   d84a0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d84a2:	602c      	str	r4, [r5, #0]
	}
   d84a4:	e7ea      	b.n	d847c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d84a6:	6804      	ldr	r4, [r0, #0]
   d84a8:	2c00      	cmp	r4, #0
   d84aa:	d0e7      	beq.n	d847c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d84ac:	f104 0010 	add.w	r0, r4, #16
   d84b0:	f7ff fdce 	bl	d8050 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d84b4:	4620      	mov	r0, r4
   d84b6:	f7fb ff25 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d84ba:	2118      	movs	r1, #24
   d84bc:	4620      	mov	r0, r4
   d84be:	f002 fd7e 	bl	dafbe <_ZdlPvj>
   d84c2:	e7db      	b.n	d847c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d84c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d84c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d84c6:	2300      	movs	r3, #0
   d84c8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d84ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d84cc:	4604      	mov	r4, r0
   d84ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d84d0:	b12b      	cbz	r3, d84de <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d84d2:	2202      	movs	r2, #2
   d84d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d84d6:	68eb      	ldr	r3, [r5, #12]
   d84d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d84da:	68ab      	ldr	r3, [r5, #8]
   d84dc:	60a3      	str	r3, [r4, #8]
    }
   d84de:	4620      	mov	r0, r4
   d84e0:	bd38      	pop	{r3, r4, r5, pc}

000d84e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d84e2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d84e4:	b570      	push	{r4, r5, r6, lr}
   d84e6:	4604      	mov	r4, r0
	  switch (__op)
   d84e8:	d007      	beq.n	d84fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d84ea:	2a03      	cmp	r2, #3
   d84ec:	d012      	beq.n	d8514 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d84ee:	2a01      	cmp	r2, #1
   d84f0:	d101      	bne.n	d84f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d84f2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d84f4:	6003      	str	r3, [r0, #0]
	}
   d84f6:	2000      	movs	r0, #0
   d84f8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d84fa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d84fc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d84fe:	f7fb fdca 	bl	d4096 <_Znwj>
   d8502:	4605      	mov	r5, r0
   d8504:	b120      	cbz	r0, d8510 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8506:	4631      	mov	r1, r6
   d8508:	f7ff ffdc 	bl	d84c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d850c:	7c33      	ldrb	r3, [r6, #16]
   d850e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8510:	6025      	str	r5, [r4, #0]
	}
   d8512:	e7f0      	b.n	d84f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8514:	6804      	ldr	r4, [r0, #0]
   d8516:	2c00      	cmp	r4, #0
   d8518:	d0ed      	beq.n	d84f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d851a:	4620      	mov	r0, r4
   d851c:	f7fb fef2 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8520:	2114      	movs	r1, #20
   d8522:	4620      	mov	r0, r4
   d8524:	f002 fd4b 	bl	dafbe <_ZdlPvj>
   d8528:	e7e5      	b.n	d84f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d852c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d852c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d852e:	b089      	sub	sp, #36	; 0x24
   d8530:	4604      	mov	r4, r0
   d8532:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8534:	a801      	add	r0, sp, #4
   d8536:	4611      	mov	r1, r2
   d8538:	f7ff fe11 	bl	d815e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d853c:	b1a4      	cbz	r4, d8568 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d853e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8540:	b11d      	cbz	r5, d854a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8542:	4628      	mov	r0, r5
   d8544:	f003 fb62 	bl	dbc0c <strdup>
   d8548:	4605      	mov	r5, r0
   d854a:	a801      	add	r0, sp, #4
   d854c:	a903      	add	r1, sp, #12
        type_(type) {
   d854e:	9503      	str	r5, [sp, #12]
   d8550:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8554:	f7ff fe78 	bl	d8248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8558:	a803      	add	r0, sp, #12
   d855a:	f7ff fd79 	bl	d8050 <_ZN8particle5ErrorD1Ev>
   d855e:	a802      	add	r0, sp, #8
   d8560:	f7ff fc1c 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8564:	b009      	add	sp, #36	; 0x24
   d8566:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8568:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d856a:	2301      	movs	r3, #1
   d856c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8570:	2a00      	cmp	r2, #0
   d8572:	d103      	bne.n	d857c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8574:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8578:	2900      	cmp	r1, #0
   d857a:	d1f7      	bne.n	d856c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d857c:	d1ef      	bne.n	d855e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d857e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8580:	f3bf 8f5b 	dmb	ish
   d8584:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8586:	1d2b      	adds	r3, r5, #4
   d8588:	f3bf 8f5b 	dmb	ish
   d858c:	e853 6f00 	ldrex	r6, [r3]
   d8590:	e843 4200 	strex	r2, r4, [r3]
   d8594:	2a00      	cmp	r2, #0
   d8596:	d1f9      	bne.n	d858c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8598:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d859c:	2e00      	cmp	r6, #0
   d859e:	d0de      	beq.n	d855e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d85a0:	4620      	mov	r0, r4
   d85a2:	f7ff fa2f 	bl	d7a04 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d85a6:	4607      	mov	r7, r0
   d85a8:	b160      	cbz	r0, d85c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d85aa:	f105 010c 	add.w	r1, r5, #12
   d85ae:	4630      	mov	r0, r6
   d85b0:	f7ff fe16 	bl	d81e0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d85b4:	4630      	mov	r0, r6
   d85b6:	f7fb fea5 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d85ba:	2110      	movs	r1, #16
   d85bc:	4630      	mov	r0, r6
   d85be:	f002 fcfe 	bl	dafbe <_ZdlPvj>
   d85c2:	e7cc      	b.n	d855e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d85c4:	4631      	mov	r1, r6
   d85c6:	a803      	add	r0, sp, #12
   d85c8:	f7ff ff7c 	bl	d84c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d85cc:	7b2b      	ldrb	r3, [r5, #12]
   d85ce:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d85d2:	2010      	movs	r0, #16
   d85d4:	f7fb fd5f 	bl	d4096 <_Znwj>
   d85d8:	4605      	mov	r5, r0
   d85da:	b1d0      	cbz	r0, d8612 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d85dc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d85de:	2014      	movs	r0, #20
   d85e0:	f7fb fd59 	bl	d4096 <_Znwj>
   d85e4:	4604      	mov	r4, r0
   d85e6:	b178      	cbz	r0, d8608 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d85e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d85ea:	4601      	mov	r1, r0
   d85ec:	a803      	add	r0, sp, #12
   d85ee:	f7ff fdd5 	bl	d819c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d85f2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d85f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d85f6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d85f8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d85fa:	9205      	str	r2, [sp, #20]
   d85fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d85fe:	60e3      	str	r3, [r4, #12]
   d8600:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8604:	9206      	str	r2, [sp, #24]
   d8606:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8608:	4b06      	ldr	r3, [pc, #24]	; (d8624 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d860a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d860c:	4b06      	ldr	r3, [pc, #24]	; (d8628 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d860e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8610:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8612:	a803      	add	r0, sp, #12
   d8614:	f7fb fe76 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8618:	2200      	movs	r2, #0
   d861a:	4629      	mov	r1, r5
   d861c:	4803      	ldr	r0, [pc, #12]	; (d862c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d861e:	f7ff f9f9 	bl	d7a14 <application_thread_invoke>
   d8622:	e7c7      	b.n	d85b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8624:	000d81f3 	.word	0x000d81f3
   d8628:	000d84e3 	.word	0x000d84e3
   d862c:	000d7d37 	.word	0x000d7d37

000d8630 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8630:	2200      	movs	r2, #0
   d8632:	6840      	ldr	r0, [r0, #4]
   d8634:	4611      	mov	r1, r2
   d8636:	f7ff badf 	b.w	d7bf8 <network_listening>

000d863a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d863a:	2200      	movs	r2, #0
   d863c:	6840      	ldr	r0, [r0, #4]
   d863e:	4611      	mov	r1, r2
   d8640:	f7ff baea 	b.w	d7c18 <network_get_listen_timeout>

000d8644 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8644:	6840      	ldr	r0, [r0, #4]
   d8646:	2200      	movs	r2, #0
   d8648:	f7ff bade 	b.w	d7c08 <network_set_listen_timeout>

000d864c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d864c:	6840      	ldr	r0, [r0, #4]
   d864e:	2200      	movs	r2, #0
   d8650:	f081 0101 	eor.w	r1, r1, #1
   d8654:	f7ff bac8 	b.w	d7be8 <network_listen>

000d8658 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8658:	2300      	movs	r3, #0
   d865a:	6840      	ldr	r0, [r0, #4]
   d865c:	461a      	mov	r2, r3
   d865e:	4619      	mov	r1, r3
   d8660:	f7ff baba 	b.w	d7bd8 <network_off>

000d8664 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8664:	2300      	movs	r3, #0
   d8666:	6840      	ldr	r0, [r0, #4]
   d8668:	461a      	mov	r2, r3
   d866a:	4619      	mov	r1, r3
   d866c:	f7ff baac 	b.w	d7bc8 <network_on>

000d8670 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8670:	2200      	movs	r2, #0
   d8672:	6840      	ldr	r0, [r0, #4]
   d8674:	4611      	mov	r1, r2
   d8676:	f7ff ba9f 	b.w	d7bb8 <network_ready>

000d867a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d867a:	2200      	movs	r2, #0
   d867c:	6840      	ldr	r0, [r0, #4]
   d867e:	4611      	mov	r1, r2
   d8680:	f7ff ba8a 	b.w	d7b98 <network_connecting>

000d8684 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8684:	6840      	ldr	r0, [r0, #4]
   d8686:	2200      	movs	r2, #0
   d8688:	2102      	movs	r1, #2
   d868a:	f7ff ba8d 	b.w	d7ba8 <network_disconnect>

000d868e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d868e:	2300      	movs	r3, #0
   d8690:	6840      	ldr	r0, [r0, #4]
   d8692:	461a      	mov	r2, r3
   d8694:	f7ff ba78 	b.w	d7b88 <network_connect>

000d8698 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8698:	4b02      	ldr	r3, [pc, #8]	; (d86a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d869a:	2203      	movs	r2, #3
   d869c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d869e:	4a02      	ldr	r2, [pc, #8]	; (d86a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d86a0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d86a2:	4770      	bx	lr
   d86a4:	2003e5cc 	.word	0x2003e5cc
   d86a8:	000de51c 	.word	0x000de51c

000d86ac <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d86ac:	6800      	ldr	r0, [r0, #0]
   d86ae:	f000 b957 	b.w	d8960 <_ZN7TwoWire4lockEv>

000d86b2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d86b2:	b510      	push	{r4, lr}
   d86b4:	4604      	mov	r4, r0
      lock_(_lock) {
   d86b6:	6001      	str	r1, [r0, #0]
   d86b8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d86ba:	b10a      	cbz	r2, d86c0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d86bc:	f7ff fff6 	bl	d86ac <_ZN9FuelGauge4lockEv>
}
   d86c0:	4620      	mov	r0, r4
   d86c2:	bd10      	pop	{r4, pc}

000d86c4 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d86c4:	b513      	push	{r0, r1, r4, lr}
   d86c6:	4604      	mov	r4, r0
   d86c8:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d86ca:	f002 fc4b 	bl	daf64 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d86ce:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d86d0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d86d2:	4620      	mov	r0, r4
   d86d4:	f7ff ffed 	bl	d86b2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d86d8:	4620      	mov	r0, r4
   d86da:	b002      	add	sp, #8
   d86dc:	bd10      	pop	{r4, pc}

000d86de <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d86de:	6800      	ldr	r0, [r0, #0]
   d86e0:	f000 b947 	b.w	d8972 <_ZN7TwoWire6unlockEv>

000d86e4 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d86e4:	b510      	push	{r4, lr}
    if (lock_) {
   d86e6:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d86e8:	4604      	mov	r4, r0
    if (lock_) {
   d86ea:	b10b      	cbz	r3, d86f0 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d86ec:	f7ff fff7 	bl	d86de <_ZN9FuelGauge6unlockEv>
}
   d86f0:	4620      	mov	r0, r4
   d86f2:	bd10      	pop	{r4, pc}

000d86f4 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d86f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d86f8:	4604      	mov	r4, r0
   d86fa:	460d      	mov	r5, r1
   d86fc:	4617      	mov	r7, r2
   d86fe:	461e      	mov	r6, r3
   d8700:	f7ff ffd4 	bl	d86ac <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8704:	2336      	movs	r3, #54	; 0x36
   d8706:	f88d 3000 	strb.w	r3, [sp]
   d870a:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d870c:	6820      	ldr	r0, [r4, #0]
   d870e:	9301      	str	r3, [sp, #4]
   d8710:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d8714:	230a      	movs	r3, #10
   d8716:	4669      	mov	r1, sp
   d8718:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d871a:	f88d 8008 	strb.w	r8, [sp, #8]
   d871e:	f000 f903 	bl	d8928 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d8722:	6820      	ldr	r0, [r4, #0]
   d8724:	6803      	ldr	r3, [r0, #0]
   d8726:	4629      	mov	r1, r5
   d8728:	689b      	ldr	r3, [r3, #8]
   d872a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d872c:	6820      	ldr	r0, [r4, #0]
   d872e:	4641      	mov	r1, r8
   d8730:	f000 f912 	bl	d8958 <_ZN7TwoWire15endTransmissionEh>
   d8734:	4605      	mov	r5, r0
   d8736:	b140      	cbz	r0, d874a <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d8738:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d873c:	4620      	mov	r0, r4
   d873e:	f7ff ffce 	bl	d86de <_ZN9FuelGauge6unlockEv>
}
   d8742:	4628      	mov	r0, r5
   d8744:	b004      	add	sp, #16
   d8746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d874a:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d874c:	6820      	ldr	r0, [r4, #0]
   d874e:	9301      	str	r3, [sp, #4]
   d8750:	4669      	mov	r1, sp
   d8752:	f000 f8b9 	bl	d88c8 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d8756:	2802      	cmp	r0, #2
   d8758:	d1ee      	bne.n	d8738 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d875a:	6820      	ldr	r0, [r4, #0]
   d875c:	6803      	ldr	r3, [r0, #0]
   d875e:	695b      	ldr	r3, [r3, #20]
   d8760:	4798      	blx	r3
   d8762:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d8764:	6820      	ldr	r0, [r4, #0]
   d8766:	6803      	ldr	r3, [r0, #0]
   d8768:	695b      	ldr	r3, [r3, #20]
   d876a:	4798      	blx	r3
   d876c:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d876e:	e7e5      	b.n	d873c <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d8770 <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   d8770:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   d8772:	460a      	mov	r2, r1
   d8774:	210c      	movs	r1, #12
   d8776:	f7ff bfbd 	b.w	d86f4 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d877a <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d877a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d877e:	4616      	mov	r6, r2
   d8780:	4604      	mov	r4, r0
   d8782:	461d      	mov	r5, r3
   d8784:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d8786:	f7ff ff91 	bl	d86ac <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d878a:	2336      	movs	r3, #54	; 0x36
   d878c:	f88d 3000 	strb.w	r3, [sp]
   d8790:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8792:	6820      	ldr	r0, [r4, #0]
   d8794:	9301      	str	r3, [sp, #4]
   d8796:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d879a:	230a      	movs	r3, #10
   d879c:	4669      	mov	r1, sp
   d879e:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d87a0:	f88d 8008 	strb.w	r8, [sp, #8]
   d87a4:	f000 f8c0 	bl	d8928 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d87a8:	6820      	ldr	r0, [r4, #0]
   d87aa:	6803      	ldr	r3, [r0, #0]
   d87ac:	4639      	mov	r1, r7
   d87ae:	689b      	ldr	r3, [r3, #8]
   d87b0:	4798      	blx	r3
    i2c_.write(MSB);
   d87b2:	6820      	ldr	r0, [r4, #0]
   d87b4:	6803      	ldr	r3, [r0, #0]
   d87b6:	4631      	mov	r1, r6
   d87b8:	689b      	ldr	r3, [r3, #8]
   d87ba:	4798      	blx	r3
    i2c_.write(LSB);
   d87bc:	6820      	ldr	r0, [r4, #0]
   d87be:	6803      	ldr	r3, [r0, #0]
   d87c0:	4629      	mov	r1, r5
   d87c2:	689b      	ldr	r3, [r3, #8]
   d87c4:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d87c6:	4641      	mov	r1, r8
   d87c8:	6820      	ldr	r0, [r4, #0]
   d87ca:	f000 f8c5 	bl	d8958 <_ZN7TwoWire15endTransmissionEh>
   d87ce:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d87d0:	4620      	mov	r0, r4
   d87d2:	bf0c      	ite	eq
   d87d4:	2500      	moveq	r5, #0
   d87d6:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d87da:	f7ff ff80 	bl	d86de <_ZN9FuelGauge6unlockEv>
}
   d87de:	4628      	mov	r0, r5
   d87e0:	b004      	add	sp, #16
   d87e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d87e6 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d87e6:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d87e8:	2240      	movs	r2, #64	; 0x40
   d87ea:	2300      	movs	r3, #0
   d87ec:	2106      	movs	r1, #6
   d87ee:	f7ff ffc4 	bl	d877a <_ZN9FuelGauge13writeRegisterEhhh>
}
   d87f2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d87f6:	bd08      	pop	{r3, pc}

000d87f8 <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   d87f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d87fa:	4605      	mov	r5, r0
      { _M_device.lock(); }
   d87fc:	f7ff ff56 	bl	d86ac <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   d8800:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   d8802:	f10d 0207 	add.w	r2, sp, #7
   d8806:	f10d 0106 	add.w	r1, sp, #6
   d880a:	4628      	mov	r0, r5
    byte MSB = 0;
   d880c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d8810:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   d8814:	f7ff ffac 	bl	d8770 <_ZN9FuelGauge18readConfigRegisterERhS0_>
   d8818:	1e04      	subs	r4, r0, #0
   d881a:	db0b      	blt.n	d8834 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   d881c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d8820:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d8824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d8828:	210c      	movs	r1, #12
   d882a:	4628      	mov	r0, r5
   d882c:	f7ff ffa5 	bl	d877a <_ZN9FuelGauge13writeRegisterEhhh>
   d8830:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   d8834:	4628      	mov	r0, r5
   d8836:	f7ff ff52 	bl	d86de <_ZN9FuelGauge6unlockEv>
}
   d883a:	4620      	mov	r0, r4
   d883c:	b003      	add	sp, #12
   d883e:	bd30      	pop	{r4, r5, pc}

000d8840 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8840:	4770      	bx	lr

000d8842 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8844:	4606      	mov	r6, r0
   d8846:	4615      	mov	r5, r2
   d8848:	460c      	mov	r4, r1
   d884a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d884c:	42bc      	cmp	r4, r7
   d884e:	d006      	beq.n	d885e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8850:	6833      	ldr	r3, [r6, #0]
   d8852:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8856:	689b      	ldr	r3, [r3, #8]
   d8858:	4630      	mov	r0, r6
   d885a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d885c:	e7f6      	b.n	d884c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d885e:	4628      	mov	r0, r5
   d8860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8862 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8862:	7c00      	ldrb	r0, [r0, #16]
   d8864:	2200      	movs	r2, #0
   d8866:	f7fe bf63 	b.w	d7730 <hal_i2c_write>

000d886a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d886a:	7c00      	ldrb	r0, [r0, #16]
   d886c:	2100      	movs	r1, #0
   d886e:	f7fe bf67 	b.w	d7740 <hal_i2c_available>

000d8872 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8872:	7c00      	ldrb	r0, [r0, #16]
   d8874:	2100      	movs	r1, #0
   d8876:	f7fe bf6b 	b.w	d7750 <hal_i2c_read>

000d887a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d887a:	7c00      	ldrb	r0, [r0, #16]
   d887c:	2100      	movs	r1, #0
   d887e:	f7fe bf6f 	b.w	d7760 <hal_i2c_peek>

000d8882 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8882:	7c00      	ldrb	r0, [r0, #16]
   d8884:	2100      	movs	r1, #0
   d8886:	f7fe bf73 	b.w	d7770 <hal_i2c_flush>

000d888a <_ZN7TwoWireD0Ev>:
   d888a:	b510      	push	{r4, lr}
   d888c:	2114      	movs	r1, #20
   d888e:	4604      	mov	r4, r0
   d8890:	f002 fb95 	bl	dafbe <_ZdlPvj>
   d8894:	4620      	mov	r0, r4
   d8896:	bd10      	pop	{r4, pc}

000d8898 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8898:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d889a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d889e:	4604      	mov	r4, r0
   d88a0:	4608      	mov	r0, r1
   d88a2:	2100      	movs	r1, #0
   d88a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d88a8:	4b03      	ldr	r3, [pc, #12]	; (d88b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d88aa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d88ac:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d88ae:	4611      	mov	r1, r2
   d88b0:	f7fe ff6e 	bl	d7790 <hal_i2c_init>
}
   d88b4:	4620      	mov	r0, r4
   d88b6:	bd10      	pop	{r4, pc}
   d88b8:	000de558 	.word	0x000de558

000d88bc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d88bc:	2300      	movs	r3, #0
   d88be:	7c00      	ldrb	r0, [r0, #16]
   d88c0:	461a      	mov	r2, r3
   d88c2:	4619      	mov	r1, r3
   d88c4:	f7fe bf1c 	b.w	d7700 <hal_i2c_begin>

000d88c8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d88c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d88ca:	2200      	movs	r2, #0
   d88cc:	2314      	movs	r3, #20
   d88ce:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d88d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d88d6:	780b      	ldrb	r3, [r1, #0]
   d88d8:	f88d 3008 	strb.w	r3, [sp, #8]
   d88dc:	684b      	ldr	r3, [r1, #4]
   d88de:	9303      	str	r3, [sp, #12]
   d88e0:	68cb      	ldr	r3, [r1, #12]
   d88e2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d88e4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d88e6:	7a0b      	ldrb	r3, [r1, #8]
   d88e8:	9305      	str	r3, [sp, #20]
   d88ea:	a901      	add	r1, sp, #4
   d88ec:	f7fe ff68 	bl	d77c0 <hal_i2c_request_ex>
}
   d88f0:	b007      	add	sp, #28
   d88f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d88f6 <_ZN7TwoWire11requestFromEhjh>:
{
   d88f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d88f8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d88fa:	f88d 1000 	strb.w	r1, [sp]
   d88fe:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8902:	9103      	str	r1, [sp, #12]
   d8904:	bf18      	it	ne
   d8906:	2301      	movne	r3, #1
   d8908:	4669      	mov	r1, sp
    size_ = size;
   d890a:	9201      	str	r2, [sp, #4]
   d890c:	f88d 3008 	strb.w	r3, [sp, #8]
   d8910:	f7ff ffda 	bl	d88c8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8914:	b005      	add	sp, #20
   d8916:	f85d fb04 	ldr.w	pc, [sp], #4

000d891a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d891a:	7c00      	ldrb	r0, [r0, #16]
   d891c:	2200      	movs	r2, #0
   d891e:	f7fe bef7 	b.w	d7710 <hal_i2c_begin_transmission>

000d8922 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8922:	b2c9      	uxtb	r1, r1
   d8924:	f7ff bff9 	b.w	d891a <_ZN7TwoWire17beginTransmissionEh>

000d8928 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d8928:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d892a:	2300      	movs	r3, #0
   d892c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d8930:	684a      	ldr	r2, [r1, #4]
   d8932:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d8934:	2314      	movs	r3, #20
    };
   d8936:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8938:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d893c:	780b      	ldrb	r3, [r1, #0]
    };
   d893e:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8940:	7a0a      	ldrb	r2, [r1, #8]
   d8942:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d8944:	7c00      	ldrb	r0, [r0, #16]
    };
   d8946:	f88d 3008 	strb.w	r3, [sp, #8]
   d894a:	aa01      	add	r2, sp, #4
   d894c:	4619      	mov	r1, r3
   d894e:	f7fe fedf 	bl	d7710 <hal_i2c_begin_transmission>
}
   d8952:	b007      	add	sp, #28
   d8954:	f85d fb04 	ldr.w	pc, [sp], #4

000d8958 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8958:	7c00      	ldrb	r0, [r0, #16]
   d895a:	2200      	movs	r2, #0
   d895c:	f7fe bee0 	b.w	d7720 <hal_i2c_end_transmission>

000d8960 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8960:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8962:	2100      	movs	r1, #0
   d8964:	7c00      	ldrb	r0, [r0, #16]
   d8966:	f7fe ff1b 	bl	d77a0 <hal_i2c_lock>
}
   d896a:	fab0 f080 	clz	r0, r0
   d896e:	0940      	lsrs	r0, r0, #5
   d8970:	bd08      	pop	{r3, pc}

000d8972 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8972:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8974:	2100      	movs	r1, #0
   d8976:	7c00      	ldrb	r0, [r0, #16]
   d8978:	f7fe ff1a 	bl	d77b0 <hal_i2c_unlock>
}
   d897c:	fab0 f080 	clz	r0, r0
   d8980:	0940      	lsrs	r0, r0, #5
   d8982:	bd08      	pop	{r3, pc}

000d8984 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8984:	4770      	bx	lr

000d8986 <_ZN9IPAddressD0Ev>:
   d8986:	b510      	push	{r4, lr}
   d8988:	2118      	movs	r1, #24
   d898a:	4604      	mov	r4, r0
   d898c:	f002 fb17 	bl	dafbe <_ZdlPvj>
   d8990:	4620      	mov	r0, r4
   d8992:	bd10      	pop	{r4, pc}

000d8994 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8994:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8996:	7d03      	ldrb	r3, [r0, #20]
   d8998:	2b06      	cmp	r3, #6
{
   d899a:	b08d      	sub	sp, #52	; 0x34
   d899c:	460e      	mov	r6, r1
   d899e:	f100 0704 	add.w	r7, r0, #4
   d89a2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d89a6:	d012      	beq.n	d89ce <_ZNK9IPAddress7printToER5Print+0x3a>
   d89a8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d89ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d89b0:	220a      	movs	r2, #10
   d89b2:	4630      	mov	r0, r6
   d89b4:	f001 fb98 	bl	da0e8 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d89b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d89ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d89bc:	d019      	beq.n	d89f2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d89be:	2c00      	cmp	r4, #0
   d89c0:	d0f4      	beq.n	d89ac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d89c2:	212e      	movs	r1, #46	; 0x2e
   d89c4:	4630      	mov	r0, r6
   d89c6:	f001 fb76 	bl	da0b6 <_ZN5Print5printEc>
   d89ca:	4404      	add	r4, r0
   d89cc:	e7ee      	b.n	d89ac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d89ce:	232f      	movs	r3, #47	; 0x2f
   d89d0:	466a      	mov	r2, sp
   d89d2:	4639      	mov	r1, r7
   d89d4:	200a      	movs	r0, #10
		buf[0] = 0;
   d89d6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d89da:	f7fe fef9 	bl	d77d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d89de:	4668      	mov	r0, sp
   d89e0:	f003 f931 	bl	dbc46 <strlen>
   d89e4:	6833      	ldr	r3, [r6, #0]
   d89e6:	4602      	mov	r2, r0
   d89e8:	68db      	ldr	r3, [r3, #12]
   d89ea:	4669      	mov	r1, sp
   d89ec:	4630      	mov	r0, r6
   d89ee:	4798      	blx	r3
   d89f0:	4604      	mov	r4, r0
    }
    return n;
}
   d89f2:	4620      	mov	r0, r4
   d89f4:	b00d      	add	sp, #52	; 0x34
   d89f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d89f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d89f8:	b510      	push	{r4, lr}
   d89fa:	4b05      	ldr	r3, [pc, #20]	; (d8a10 <_ZN9IPAddressC1Ev+0x18>)
   d89fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d89fe:	2211      	movs	r2, #17
   d8a00:	f840 3b04 	str.w	r3, [r0], #4
   d8a04:	2100      	movs	r1, #0
   d8a06:	f003 f8ab 	bl	dbb60 <memset>
}
   d8a0a:	4620      	mov	r0, r4
   d8a0c:	bd10      	pop	{r4, pc}
   d8a0e:	bf00      	nop
   d8a10:	000de580 	.word	0x000de580

000d8a14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8a14:	4603      	mov	r3, r0
   d8a16:	4a07      	ldr	r2, [pc, #28]	; (d8a34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8a18:	b510      	push	{r4, lr}
   d8a1a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8a1e:	f101 0210 	add.w	r2, r1, #16
   d8a22:	f851 4b04 	ldr.w	r4, [r1], #4
   d8a26:	f843 4b04 	str.w	r4, [r3], #4
   d8a2a:	4291      	cmp	r1, r2
   d8a2c:	d1f9      	bne.n	d8a22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8a2e:	780a      	ldrb	r2, [r1, #0]
   d8a30:	701a      	strb	r2, [r3, #0]
}
   d8a32:	bd10      	pop	{r4, pc}
   d8a34:	000de580 	.word	0x000de580

000d8a38 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8a38:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8a3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8a3e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8a42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8a46:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8a4a:	2304      	movs	r3, #4
   d8a4c:	6041      	str	r1, [r0, #4]
   d8a4e:	7503      	strb	r3, [r0, #20]
}
   d8a50:	bd10      	pop	{r4, pc}

000d8a52 <_ZN9IPAddressaSEPKh>:
{
   d8a52:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8a54:	78cb      	ldrb	r3, [r1, #3]
   d8a56:	9300      	str	r3, [sp, #0]
   d8a58:	788b      	ldrb	r3, [r1, #2]
   d8a5a:	784a      	ldrb	r2, [r1, #1]
   d8a5c:	7809      	ldrb	r1, [r1, #0]
   d8a5e:	f7ff ffeb 	bl	d8a38 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8a62:	b002      	add	sp, #8
   d8a64:	bd10      	pop	{r4, pc}

000d8a66 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d8a66:	f100 0310 	add.w	r3, r0, #16
   d8a6a:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8a6c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d8a70:	2901      	cmp	r1, #1
   d8a72:	4618      	mov	r0, r3
   d8a74:	d108      	bne.n	d8a88 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d8a76:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d8a7a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d8a7e:	3a01      	subs	r2, #1
   d8a80:	f103 0310 	add.w	r3, r3, #16
   d8a84:	d1f2      	bne.n	d8a6c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d8a86:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d8a88:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8a8a:	bf04      	itt	eq
   d8a8c:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d8a90:	1852      	addeq	r2, r2, r1
   d8a92:	e7f4      	b.n	d8a7e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d8a94 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d8a94:	b40e      	push	{r1, r2, r3}
   d8a96:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8a98:	b088      	sub	sp, #32
   d8a9a:	af00      	add	r7, sp, #0
   d8a9c:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8aa0:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8aa2:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8aa6:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8aa8:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8aaa:	462b      	mov	r3, r5
   d8aac:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d8aae:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8ab0:	f7ff f8f2 	bl	d7c98 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d8ab4:	280f      	cmp	r0, #15
   d8ab6:	687a      	ldr	r2, [r7, #4]
   d8ab8:	d91a      	bls.n	d8af0 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d8aba:	f100 0308 	add.w	r3, r0, #8
   d8abe:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d8ac2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d8ac4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8ac8:	1c41      	adds	r1, r0, #1
   d8aca:	462b      	mov	r3, r5
   d8acc:	4668      	mov	r0, sp
        va_start(args, fmt);
   d8ace:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8ad0:	f7ff f8e2 	bl	d7c98 <vsnprintf>
        if (n > 0) {
   d8ad4:	1e02      	subs	r2, r0, #0
   d8ad6:	dd04      	ble.n	d8ae2 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d8ad8:	6823      	ldr	r3, [r4, #0]
   d8ada:	4669      	mov	r1, sp
   d8adc:	689b      	ldr	r3, [r3, #8]
   d8ade:	4620      	mov	r0, r4
   d8ae0:	4798      	blx	r3
   d8ae2:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d8ae4:	3720      	adds	r7, #32
   d8ae6:	46bd      	mov	sp, r7
   d8ae8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8aec:	b003      	add	sp, #12
   d8aee:	4770      	bx	lr
    } else if (n > 0) {
   d8af0:	2800      	cmp	r0, #0
   d8af2:	d0f7      	beq.n	d8ae4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d8af4:	6823      	ldr	r3, [r4, #0]
   d8af6:	4602      	mov	r2, r0
   d8af8:	689b      	ldr	r3, [r3, #8]
   d8afa:	f107 0110 	add.w	r1, r7, #16
   d8afe:	4620      	mov	r0, r4
   d8b00:	4798      	blx	r3
}
   d8b02:	e7ef      	b.n	d8ae4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d8b04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8b04:	b510      	push	{r4, lr}
          _M_dispose();
   d8b06:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8b08:	4604      	mov	r4, r0
          _M_dispose();
   d8b0a:	689b      	ldr	r3, [r3, #8]
   d8b0c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8b0e:	68a3      	ldr	r3, [r4, #8]
   d8b10:	3b01      	subs	r3, #1
   d8b12:	60a3      	str	r3, [r4, #8]
   d8b14:	b92b      	cbnz	r3, d8b22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8b16:	6823      	ldr	r3, [r4, #0]
   d8b18:	4620      	mov	r0, r4
   d8b1a:	68db      	ldr	r3, [r3, #12]
    }
   d8b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d8b20:	4718      	bx	r3
    }
   d8b22:	bd10      	pop	{r4, pc}

000d8b24 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8b24:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8b26:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d8b28:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8b2c:	689b      	ldr	r3, [r3, #8]
   d8b2e:	2201      	movs	r2, #1
   d8b30:	f10d 0107 	add.w	r1, sp, #7
   d8b34:	4798      	blx	r3
}
   d8b36:	b003      	add	sp, #12
   d8b38:	f85d fb04 	ldr.w	pc, [sp], #4

000d8b3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d8b3c:	b538      	push	{r3, r4, r5, lr}
   d8b3e:	680b      	ldr	r3, [r1, #0]
   d8b40:	6003      	str	r3, [r0, #0]
   d8b42:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d8b44:	6843      	ldr	r3, [r0, #4]
   d8b46:	429d      	cmp	r5, r3
    class __shared_ptr
   d8b48:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d8b4a:	d00c      	beq.n	d8b66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d8b4c:	b115      	cbz	r5, d8b54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d8b4e:	686b      	ldr	r3, [r5, #4]
   d8b50:	3301      	adds	r3, #1
   d8b52:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d8b54:	6860      	ldr	r0, [r4, #4]
   d8b56:	b128      	cbz	r0, d8b64 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d8b58:	6843      	ldr	r3, [r0, #4]
   d8b5a:	3b01      	subs	r3, #1
   d8b5c:	6043      	str	r3, [r0, #4]
   d8b5e:	b90b      	cbnz	r3, d8b64 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d8b60:	f7ff ffd0 	bl	d8b04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d8b64:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d8b66:	4620      	mov	r0, r4
   d8b68:	bd38      	pop	{r3, r4, r5, pc}

000d8b6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8b6a:	460b      	mov	r3, r1
   d8b6c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d8b6e:	2200      	movs	r2, #0
   d8b70:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d8b72:	e9c0 2200 	strd	r2, r2, [r0]
   d8b76:	4604      	mov	r4, r0
        t_ = t;
   d8b78:	6083      	str	r3, [r0, #8]
    if (t) {
   d8b7a:	b90b      	cbnz	r3, d8b80 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d8b7c:	4620      	mov	r0, r4
   d8b7e:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d8b80:	f7ff ffdc 	bl	d8b3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d8b84:	e7fa      	b.n	d8b7c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d8b86 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d8b86:	6883      	ldr	r3, [r0, #8]
   d8b88:	b1eb      	cbz	r3, d8bc6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d8b8a:	781a      	ldrb	r2, [r3, #0]
   d8b8c:	2a03      	cmp	r2, #3
   d8b8e:	d81a      	bhi.n	d8bc6 <_ZNK5spark9JSONValue4typeEv+0x40>
   d8b90:	e8df f002 	tbb	[pc, r2]
   d8b94:	1b021704 	.word	0x1b021704
   d8b98:	2005      	movs	r0, #5
   d8b9a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d8b9c:	6802      	ldr	r2, [r0, #0]
   d8b9e:	685b      	ldr	r3, [r3, #4]
   d8ba0:	6852      	ldr	r2, [r2, #4]
   d8ba2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8ba4:	282d      	cmp	r0, #45	; 0x2d
   d8ba6:	d012      	beq.n	d8bce <_ZNK5spark9JSONValue4typeEv+0x48>
   d8ba8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8bac:	2b09      	cmp	r3, #9
   d8bae:	d90e      	bls.n	d8bce <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8bb0:	2874      	cmp	r0, #116	; 0x74
   d8bb2:	d00e      	beq.n	d8bd2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8bb4:	2866      	cmp	r0, #102	; 0x66
   d8bb6:	d00c      	beq.n	d8bd2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d8bb8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8bbc:	4258      	negs	r0, r3
   d8bbe:	4158      	adcs	r0, r3
   d8bc0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d8bc2:	2006      	movs	r0, #6
   d8bc4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d8bc6:	2000      	movs	r0, #0
   d8bc8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d8bca:	2004      	movs	r0, #4
   d8bcc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d8bce:	2003      	movs	r0, #3
   d8bd0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d8bd2:	2002      	movs	r0, #2
}
   d8bd4:	4770      	bx	lr

000d8bd6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d8bd6:	b510      	push	{r4, lr}
   d8bd8:	4604      	mov	r4, r0
    switch (type()) {
   d8bda:	f7ff ffd4 	bl	d8b86 <_ZNK5spark9JSONValue4typeEv>
   d8bde:	2802      	cmp	r0, #2
   d8be0:	d00e      	beq.n	d8c00 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d8be2:	1ec3      	subs	r3, r0, #3
   d8be4:	b2db      	uxtb	r3, r3
   d8be6:	2b01      	cmp	r3, #1
   d8be8:	d814      	bhi.n	d8c14 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d8bea:	6822      	ldr	r2, [r4, #0]
   d8bec:	68a3      	ldr	r3, [r4, #8]
   d8bee:	6850      	ldr	r0, [r2, #4]
   d8bf0:	685b      	ldr	r3, [r3, #4]
}
   d8bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d8bf6:	220a      	movs	r2, #10
   d8bf8:	2100      	movs	r1, #0
   d8bfa:	4418      	add	r0, r3
   d8bfc:	f003 bf5e 	b.w	dcabc <strtol>
        const char* const s = d_->json + t_->start;
   d8c00:	6822      	ldr	r2, [r4, #0]
   d8c02:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8c04:	6852      	ldr	r2, [r2, #4]
   d8c06:	685b      	ldr	r3, [r3, #4]
   d8c08:	5cd0      	ldrb	r0, [r2, r3]
   d8c0a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d8c0e:	4258      	negs	r0, r3
   d8c10:	4158      	adcs	r0, r3
}
   d8c12:	bd10      	pop	{r4, pc}
    switch (type()) {
   d8c14:	2000      	movs	r0, #0
   d8c16:	e7fc      	b.n	d8c12 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d8c18 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8c18:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d8c1a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d8c1c:	e9c0 3300 	strd	r3, r3, [r0]
   d8c20:	4604      	mov	r4, r0
        n_(0) {
   d8c22:	480e      	ldr	r0, [pc, #56]	; (d8c5c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d8c24:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8c28:	b1a9      	cbz	r1, d8c56 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d8c2a:	780b      	ldrb	r3, [r1, #0]
   d8c2c:	2b03      	cmp	r3, #3
   d8c2e:	d006      	beq.n	d8c3e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8c30:	b98b      	cbnz	r3, d8c56 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d8c32:	6813      	ldr	r3, [r2, #0]
   d8c34:	6858      	ldr	r0, [r3, #4]
   d8c36:	684b      	ldr	r3, [r1, #4]
   d8c38:	5cc3      	ldrb	r3, [r0, r3]
   d8c3a:	2b6e      	cmp	r3, #110	; 0x6e
   d8c3c:	d007      	beq.n	d8c4e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d8c3e:	6813      	ldr	r3, [r2, #0]
   d8c40:	684d      	ldr	r5, [r1, #4]
   d8c42:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d8c44:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d8c46:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d8c48:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d8c4a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d8c4c:	60e3      	str	r3, [r4, #12]
   d8c4e:	4611      	mov	r1, r2
   d8c50:	4620      	mov	r0, r4
   d8c52:	f7ff ff73 	bl	d8b3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d8c56:	4620      	mov	r0, r4
   d8c58:	bd38      	pop	{r3, r4, r5, pc}
   d8c5a:	bf00      	nop
   d8c5c:	000de5e9 	.word	0x000de5e9

000d8c60 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8c60:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d8c62:	2500      	movs	r5, #0
   d8c64:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d8c66:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d8c6a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d8c6e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8c72:	4604      	mov	r4, r0
   d8c74:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d8c76:	b14b      	cbz	r3, d8c8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d8c78:	781a      	ldrb	r2, [r3, #0]
   d8c7a:	2a01      	cmp	r2, #1
   d8c7c:	d106      	bne.n	d8c8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d8c7e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d8c82:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d8c84:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d8c86:	6143      	str	r3, [r0, #20]
   d8c88:	f7ff ff58 	bl	d8b3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d8c8c:	4620      	mov	r0, r4
   d8c8e:	bd38      	pop	{r3, r4, r5, pc}

000d8c90 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d8c90:	b510      	push	{r4, lr}
    if (!n_) {
   d8c92:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d8c94:	4604      	mov	r4, r0
    if (!n_) {
   d8c96:	b163      	cbz	r3, d8cb2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d8c98:	6880      	ldr	r0, [r0, #8]
   d8c9a:	60e0      	str	r0, [r4, #12]
    --n_;
   d8c9c:	3b01      	subs	r3, #1
    ++t_;
   d8c9e:	3010      	adds	r0, #16
   d8ca0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d8ca2:	6120      	str	r0, [r4, #16]
    --n_;
   d8ca4:	6163      	str	r3, [r4, #20]
    if (n_) {
   d8ca6:	b113      	cbz	r3, d8cae <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d8ca8:	f7ff fedd 	bl	d8a66 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8cac:	60a0      	str	r0, [r4, #8]
    return true;
   d8cae:	2001      	movs	r0, #1
   d8cb0:	e000      	b.n	d8cb4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d8cb2:	4618      	mov	r0, r3
}
   d8cb4:	bd10      	pop	{r4, pc}

000d8cb6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d8cb6:	b510      	push	{r4, lr}
    write('}');
   d8cb8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d8cba:	4604      	mov	r4, r0
    write('}');
   d8cbc:	f7ff ff32 	bl	d8b24 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d8cc0:	2301      	movs	r3, #1
   d8cc2:	7123      	strb	r3, [r4, #4]
}
   d8cc4:	4620      	mov	r0, r4
   d8cc6:	bd10      	pop	{r4, pc}

000d8cc8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d8cc8:	b508      	push	{r3, lr}
    switch (state_) {
   d8cca:	7903      	ldrb	r3, [r0, #4]
   d8ccc:	2b01      	cmp	r3, #1
   d8cce:	d002      	beq.n	d8cd6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d8cd0:	2b02      	cmp	r3, #2
   d8cd2:	d004      	beq.n	d8cde <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d8cd4:	bd08      	pop	{r3, pc}
        write(',');
   d8cd6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d8cd8:	f7ff ff24 	bl	d8b24 <_ZN5spark10JSONWriter5writeEc>
}
   d8cdc:	e7fa      	b.n	d8cd4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d8cde:	213a      	movs	r1, #58	; 0x3a
   d8ce0:	e7fa      	b.n	d8cd8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d8ce2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d8ce2:	b510      	push	{r4, lr}
   d8ce4:	4604      	mov	r4, r0
    writeSeparator();
   d8ce6:	f7ff ffef 	bl	d8cc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8cea:	4620      	mov	r0, r4
   d8cec:	217b      	movs	r1, #123	; 0x7b
   d8cee:	f7ff ff19 	bl	d8b24 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d8cf2:	2300      	movs	r3, #0
   d8cf4:	7123      	strb	r3, [r4, #4]
}
   d8cf6:	4620      	mov	r0, r4
   d8cf8:	bd10      	pop	{r4, pc}
	...

000d8cfc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8cfc:	b513      	push	{r0, r1, r4, lr}
   d8cfe:	4604      	mov	r4, r0
   d8d00:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d8d02:	f7ff ffe1 	bl	d8cc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d8d06:	6823      	ldr	r3, [r4, #0]
   d8d08:	9a01      	ldr	r2, [sp, #4]
   d8d0a:	68db      	ldr	r3, [r3, #12]
   d8d0c:	4903      	ldr	r1, [pc, #12]	; (d8d1c <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8d0e:	4620      	mov	r0, r4
   d8d10:	4798      	blx	r3
    state_ = NEXT;
   d8d12:	2301      	movs	r3, #1
}
   d8d14:	4620      	mov	r0, r4
    state_ = NEXT;
   d8d16:	7123      	strb	r3, [r4, #4]
}
   d8d18:	b002      	add	sp, #8
   d8d1a:	bd10      	pop	{r4, pc}
   d8d1c:	000de16c 	.word	0x000de16c

000d8d20 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8d20:	b513      	push	{r0, r1, r4, lr}
   d8d22:	4604      	mov	r4, r0
   d8d24:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d8d26:	f7ff ffcf 	bl	d8cc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8d2a:	6823      	ldr	r3, [r4, #0]
   d8d2c:	9a01      	ldr	r2, [sp, #4]
   d8d2e:	68db      	ldr	r3, [r3, #12]
   d8d30:	4903      	ldr	r1, [pc, #12]	; (d8d40 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8d32:	4620      	mov	r0, r4
   d8d34:	4798      	blx	r3
    state_ = NEXT;
   d8d36:	2301      	movs	r3, #1
}
   d8d38:	4620      	mov	r0, r4
    state_ = NEXT;
   d8d3a:	7123      	strb	r3, [r4, #4]
}
   d8d3c:	b002      	add	sp, #8
   d8d3e:	bd10      	pop	{r4, pc}
   d8d40:	000de35b 	.word	0x000de35b

000d8d44 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8d48:	460d      	mov	r5, r1
   d8d4a:	4617      	mov	r7, r2
    write('"');
   d8d4c:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d8d4e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d8df0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8d52:	4604      	mov	r4, r0
    const char* const end = str + size;
   d8d54:	442f      	add	r7, r5
    write('"');
   d8d56:	f7ff fee5 	bl	d8b24 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d8d5a:	4629      	mov	r1, r5
    while (s != end) {
   d8d5c:	42bd      	cmp	r5, r7
   d8d5e:	462a      	mov	r2, r5
   d8d60:	d038      	beq.n	d8dd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d8d62:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d8d66:	2e22      	cmp	r6, #34	; 0x22
   d8d68:	d003      	beq.n	d8d72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8d6a:	2e5c      	cmp	r6, #92	; 0x5c
   d8d6c:	d001      	beq.n	d8d72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8d6e:	2e1f      	cmp	r6, #31
   d8d70:	d8f4      	bhi.n	d8d5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d8d72:	6823      	ldr	r3, [r4, #0]
   d8d74:	1a52      	subs	r2, r2, r1
   d8d76:	689b      	ldr	r3, [r3, #8]
   d8d78:	4620      	mov	r0, r4
   d8d7a:	4798      	blx	r3
            write('\\');
   d8d7c:	215c      	movs	r1, #92	; 0x5c
   d8d7e:	4620      	mov	r0, r4
   d8d80:	f7ff fed0 	bl	d8b24 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8d84:	2e0d      	cmp	r6, #13
   d8d86:	d80a      	bhi.n	d8d9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d8d88:	2e07      	cmp	r6, #7
   d8d8a:	d91c      	bls.n	d8dc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8d8c:	f1a6 0308 	sub.w	r3, r6, #8
   d8d90:	2b05      	cmp	r3, #5
   d8d92:	d818      	bhi.n	d8dc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8d94:	e8df f003 	tbb	[pc, r3]
   d8d98:	17110f0d 	.word	0x17110f0d
   d8d9c:	1513      	.short	0x1513
   d8d9e:	2e22      	cmp	r6, #34	; 0x22
   d8da0:	d001      	beq.n	d8da6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8da2:	2e5c      	cmp	r6, #92	; 0x5c
   d8da4:	d10f      	bne.n	d8dc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d8da6:	4631      	mov	r1, r6
                write('b');
   d8da8:	4620      	mov	r0, r4
   d8daa:	f7ff febb 	bl	d8b24 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d8dae:	4629      	mov	r1, r5
    while (s != end) {
   d8db0:	e7d4      	b.n	d8d5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d8db2:	2162      	movs	r1, #98	; 0x62
   d8db4:	e7f8      	b.n	d8da8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d8db6:	2174      	movs	r1, #116	; 0x74
   d8db8:	e7f6      	b.n	d8da8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d8dba:	216e      	movs	r1, #110	; 0x6e
   d8dbc:	e7f4      	b.n	d8da8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d8dbe:	2166      	movs	r1, #102	; 0x66
   d8dc0:	e7f2      	b.n	d8da8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d8dc2:	2172      	movs	r1, #114	; 0x72
   d8dc4:	e7f0      	b.n	d8da8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d8dc6:	6823      	ldr	r3, [r4, #0]
   d8dc8:	4632      	mov	r2, r6
   d8dca:	68db      	ldr	r3, [r3, #12]
   d8dcc:	4641      	mov	r1, r8
   d8dce:	4620      	mov	r0, r4
   d8dd0:	4798      	blx	r3
                break;
   d8dd2:	e7ec      	b.n	d8dae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d8dd4:	428d      	cmp	r5, r1
   d8dd6:	d004      	beq.n	d8de2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d8dd8:	6823      	ldr	r3, [r4, #0]
   d8dda:	1a6a      	subs	r2, r5, r1
   d8ddc:	689b      	ldr	r3, [r3, #8]
   d8dde:	4620      	mov	r0, r4
   d8de0:	4798      	blx	r3
    }
    write('"');
   d8de2:	2122      	movs	r1, #34	; 0x22
   d8de4:	4620      	mov	r0, r4
   d8de6:	f7ff fe9d 	bl	d8b24 <_ZN5spark10JSONWriter5writeEc>
}
   d8dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8dee:	bf00      	nop
   d8df0:	000de58c 	.word	0x000de58c

000d8df4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d8df4:	b513      	push	{r0, r1, r4, lr}
   d8df6:	4604      	mov	r4, r0
   d8df8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8dfc:	f7ff ff64 	bl	d8cc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8e00:	4620      	mov	r0, r4
   d8e02:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8e06:	f7ff ff9d 	bl	d8d44 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d8e0a:	2302      	movs	r3, #2
}
   d8e0c:	4620      	mov	r0, r4
    state_ = VALUE;
   d8e0e:	7123      	strb	r3, [r4, #4]
}
   d8e10:	b002      	add	sp, #8
   d8e12:	bd10      	pop	{r4, pc}

000d8e14 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8e14:	b513      	push	{r0, r1, r4, lr}
   d8e16:	4604      	mov	r4, r0
   d8e18:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8e1c:	f7ff ff54 	bl	d8cc8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8e20:	4620      	mov	r0, r4
   d8e22:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8e26:	f7ff ff8d 	bl	d8d44 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d8e2a:	2301      	movs	r3, #1
}
   d8e2c:	4620      	mov	r0, r4
    state_ = NEXT;
   d8e2e:	7123      	strb	r3, [r4, #4]
}
   d8e30:	b002      	add	sp, #8
   d8e32:	bd10      	pop	{r4, pc}

000d8e34 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d8e34:	6880      	ldr	r0, [r0, #8]
   d8e36:	6803      	ldr	r3, [r0, #0]
   d8e38:	68db      	ldr	r3, [r3, #12]
   d8e3a:	4718      	bx	r3

000d8e3c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d8e3c:	4770      	bx	lr

000d8e3e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d8e3e:	4608      	mov	r0, r1
   d8e40:	b111      	cbz	r1, d8e48 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8e42:	680b      	ldr	r3, [r1, #0]
   d8e44:	685b      	ldr	r3, [r3, #4]
   d8e46:	4718      	bx	r3
}
   d8e48:	4770      	bx	lr

000d8e4a <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8e4a:	4770      	bx	lr

000d8e4c <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d8e4c:	4770      	bx	lr

000d8e4e <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d8e4e:	4770      	bx	lr

000d8e50 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d8e50:	b538      	push	{r3, r4, r5, lr}
   d8e52:	4604      	mov	r4, r0
   d8e54:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8e56:	6800      	ldr	r0, [r0, #0]
   d8e58:	212e      	movs	r1, #46	; 0x2e
   d8e5a:	f002 feba 	bl	dbbd2 <strchrnul>
    size = s - category;
   d8e5e:	6823      	ldr	r3, [r4, #0]
   d8e60:	1ac3      	subs	r3, r0, r3
   d8e62:	602b      	str	r3, [r5, #0]
    if (size) {
   d8e64:	b123      	cbz	r3, d8e70 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8e66:	7803      	ldrb	r3, [r0, #0]
   d8e68:	b103      	cbz	r3, d8e6c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d8e6a:	3001      	adds	r0, #1
   d8e6c:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e6e:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d8e70:	4618      	mov	r0, r3
   d8e72:	bd38      	pop	{r3, r4, r5, pc}

000d8e74 <_ZN5spark16JSONStreamWriterD0Ev>:
   d8e74:	b510      	push	{r4, lr}
   d8e76:	210c      	movs	r1, #12
   d8e78:	4604      	mov	r4, r0
   d8e7a:	f002 f8a0 	bl	dafbe <_ZdlPvj>
   d8e7e:	4620      	mov	r0, r4
   d8e80:	bd10      	pop	{r4, pc}

000d8e82 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d8e82:	b510      	push	{r4, lr}
   d8e84:	2104      	movs	r1, #4
   d8e86:	4604      	mov	r4, r0
   d8e88:	f002 f899 	bl	dafbe <_ZdlPvj>
   d8e8c:	4620      	mov	r0, r4
   d8e8e:	bd10      	pop	{r4, pc}

000d8e90 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8e90:	b510      	push	{r4, lr}
   d8e92:	2104      	movs	r1, #4
   d8e94:	4604      	mov	r4, r0
   d8e96:	f002 f892 	bl	dafbe <_ZdlPvj>
   d8e9a:	4620      	mov	r0, r4
   d8e9c:	bd10      	pop	{r4, pc}

000d8e9e <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d8e9e:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d8ea0:	f002 fea1 	bl	dbbe6 <strcmp>
}
   d8ea4:	fab0 f080 	clz	r0, r0
   d8ea8:	0940      	lsrs	r0, r0, #5
   d8eaa:	bd08      	pop	{r3, pc}

000d8eac <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d8eac:	b510      	push	{r4, lr}
   d8eae:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d8eb0:	f001 fe9a 	bl	dabe8 <_Z16_fetch_usbserialv>
   d8eb4:	4284      	cmp	r4, r0
   d8eb6:	d010      	beq.n	d8eda <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d8eb8:	f001 fe0a 	bl	daad0 <_Z22__fetch_global_Serial1v>
   d8ebc:	4284      	cmp	r4, r0
   d8ebe:	d105      	bne.n	d8ecc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d8ec0:	f001 fe06 	bl	daad0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d8ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d8ec8:	f001 bdff 	b.w	daaca <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d8ecc:	b12c      	cbz	r4, d8eda <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d8ece:	6823      	ldr	r3, [r4, #0]
   d8ed0:	4620      	mov	r0, r4
   d8ed2:	685b      	ldr	r3, [r3, #4]
}
   d8ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8ed8:	4718      	bx	r3
   d8eda:	bd10      	pop	{r4, pc}

000d8edc <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d8edc:	b513      	push	{r0, r1, r4, lr}
   d8ede:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d8ee0:	4608      	mov	r0, r1
   d8ee2:	9101      	str	r1, [sp, #4]
   d8ee4:	f002 feaf 	bl	dbc46 <strlen>
   d8ee8:	9901      	ldr	r1, [sp, #4]
   d8eea:	4602      	mov	r2, r0
   d8eec:	4620      	mov	r0, r4
}
   d8eee:	b002      	add	sp, #8
   d8ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d8ef4:	f7ff bf8e 	b.w	d8e14 <_ZN5spark10JSONWriter5valueEPKcj>

000d8ef8 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d8ef8:	b513      	push	{r0, r1, r4, lr}
   d8efa:	4604      	mov	r4, r0
    write(str, strlen(str));
   d8efc:	4608      	mov	r0, r1
   d8efe:	9101      	str	r1, [sp, #4]
   d8f00:	f002 fea1 	bl	dbc46 <strlen>
   d8f04:	6823      	ldr	r3, [r4, #0]
   d8f06:	9901      	ldr	r1, [sp, #4]
   d8f08:	68db      	ldr	r3, [r3, #12]
   d8f0a:	4602      	mov	r2, r0
   d8f0c:	4620      	mov	r0, r4
}
   d8f0e:	b002      	add	sp, #8
   d8f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d8f14:	4718      	bx	r3

000d8f16 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d8f16:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8f18:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d8f1a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8f1e:	68db      	ldr	r3, [r3, #12]
   d8f20:	2201      	movs	r2, #1
   d8f22:	f10d 0107 	add.w	r1, sp, #7
   d8f26:	4798      	blx	r3
}
   d8f28:	b003      	add	sp, #12
   d8f2a:	f85d fb04 	ldr.w	pc, [sp], #4

000d8f2e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8f2e:	b40e      	push	{r1, r2, r3}
   d8f30:	b503      	push	{r0, r1, lr}
   d8f32:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d8f34:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8f36:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d8f3a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d8f3c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d8f3e:	f001 f8f1 	bl	da124 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d8f42:	b002      	add	sp, #8
   d8f44:	f85d eb04 	ldr.w	lr, [sp], #4
   d8f48:	b003      	add	sp, #12
   d8f4a:	4770      	bx	lr

000d8f4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d8f50:	e9d0 9500 	ldrd	r9, r5, [r0]
   d8f54:	f04f 0814 	mov.w	r8, #20
   d8f58:	fb08 f505 	mul.w	r5, r8, r5
   d8f5c:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8f5e:	10ab      	asrs	r3, r5, #2
   d8f60:	4d18      	ldr	r5, [pc, #96]	; (d8fc4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8f62:	4617      	mov	r7, r2
   d8f64:	435d      	muls	r5, r3
   d8f66:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8f68:	2d00      	cmp	r5, #0
   d8f6a:	dd23      	ble.n	d8fb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d8f6c:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d8f6e:	fb08 f006 	mul.w	r0, r8, r6
   d8f72:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d8f76:	463a      	mov	r2, r7
   d8f78:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d8f7c:	5820      	ldr	r0, [r4, r0]
   d8f7e:	9101      	str	r1, [sp, #4]
   d8f80:	455f      	cmp	r7, fp
   d8f82:	bf28      	it	cs
   d8f84:	465a      	movcs	r2, fp
   d8f86:	f002 fe66 	bl	dbc56 <strncmp>
                if (cmp == 0) {
   d8f8a:	9901      	ldr	r1, [sp, #4]
   d8f8c:	2301      	movs	r3, #1
   d8f8e:	b978      	cbnz	r0, d8fb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d8f90:	455f      	cmp	r7, fp
   d8f92:	d103      	bne.n	d8f9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8f94:	9a00      	ldr	r2, [sp, #0]
   d8f96:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8f98:	4635      	mov	r5, r6
   d8f9a:	e7e5      	b.n	d8f68 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d8f9c:	bf8c      	ite	hi
   d8f9e:	2001      	movhi	r0, #1
   d8fa0:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d8fa2:	2800      	cmp	r0, #0
   d8fa4:	d0f8      	beq.n	d8f98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d8fa6:	1bae      	subs	r6, r5, r6
	      ++__first;
   d8fa8:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d8fac:	3e01      	subs	r6, #1
   d8fae:	e7f3      	b.n	d8f98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d8fb0:	0fc0      	lsrs	r0, r0, #31
   d8fb2:	e7f6      	b.n	d8fa2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d8fb4:	eba4 0409 	sub.w	r4, r4, r9
}
   d8fb8:	4802      	ldr	r0, [pc, #8]	; (d8fc4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8fba:	10a4      	asrs	r4, r4, #2
   d8fbc:	4360      	muls	r0, r4
   d8fbe:	b003      	add	sp, #12
   d8fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8fc4:	cccccccd 	.word	0xcccccccd

000d8fc8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d8fca:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d8fcc:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8fce:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d8fd0:	b30b      	cbz	r3, d9016 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d8fd2:	b301      	cbz	r1, d9016 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d8fd4:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d8fd6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d8fda:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d8fdc:	a903      	add	r1, sp, #12
   d8fde:	a801      	add	r0, sp, #4
   d8fe0:	f7ff ff36 	bl	d8e50 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8fe4:	4601      	mov	r1, r0
   d8fe6:	b1b0      	cbz	r0, d9016 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d8fe8:	f10d 030b 	add.w	r3, sp, #11
   d8fec:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d8fee:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d8ff2:	4620      	mov	r0, r4
   d8ff4:	f7ff ffaa 	bl	d8f4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d8ff8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8ffc:	b15b      	cbz	r3, d9016 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d8ffe:	6824      	ldr	r4, [r4, #0]
   d9000:	2314      	movs	r3, #20
   d9002:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d9006:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d900a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d900e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d9010:	bfa8      	it	ge
   d9012:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d9014:	e7e2      	b.n	d8fdc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d9016:	4630      	mov	r0, r6
   d9018:	b004      	add	sp, #16
   d901a:	bd70      	pop	{r4, r5, r6, pc}

000d901c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d901c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d901e:	4c0a      	ldr	r4, [pc, #40]	; (d9048 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d9020:	7823      	ldrb	r3, [r4, #0]
   d9022:	f3bf 8f5b 	dmb	ish
   d9026:	07db      	lsls	r3, r3, #31
   d9028:	d40b      	bmi.n	d9042 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d902a:	4620      	mov	r0, r4
   d902c:	f7fb f844 	bl	d40b8 <__cxa_guard_acquire>
   d9030:	b138      	cbz	r0, d9042 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d9032:	4620      	mov	r0, r4
   d9034:	f7fb f845 	bl	d40c2 <__cxa_guard_release>
   d9038:	4a04      	ldr	r2, [pc, #16]	; (d904c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d903a:	4905      	ldr	r1, [pc, #20]	; (d9050 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d903c:	4805      	ldr	r0, [pc, #20]	; (d9054 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d903e:	f001 ffb9 	bl	dafb4 <__aeabi_atexit>
}
   d9042:	4804      	ldr	r0, [pc, #16]	; (d9054 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d9044:	bd10      	pop	{r4, pc}
   d9046:	bf00      	nop
   d9048:	2003e5d8 	.word	0x2003e5d8
   d904c:	2003e3b0 	.word	0x2003e3b0
   d9050:	000d8e4d 	.word	0x000d8e4d
   d9054:	2003e1c0 	.word	0x2003e1c0

000d9058 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d9058:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d905a:	4c0a      	ldr	r4, [pc, #40]	; (d9084 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d905c:	7823      	ldrb	r3, [r4, #0]
   d905e:	f3bf 8f5b 	dmb	ish
   d9062:	07db      	lsls	r3, r3, #31
   d9064:	d40b      	bmi.n	d907e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d9066:	4620      	mov	r0, r4
   d9068:	f7fb f826 	bl	d40b8 <__cxa_guard_acquire>
   d906c:	b138      	cbz	r0, d907e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d906e:	4620      	mov	r0, r4
   d9070:	f7fb f827 	bl	d40c2 <__cxa_guard_release>
   d9074:	4a04      	ldr	r2, [pc, #16]	; (d9088 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d9076:	4905      	ldr	r1, [pc, #20]	; (d908c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d9078:	4805      	ldr	r0, [pc, #20]	; (d9090 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d907a:	f001 ff9b 	bl	dafb4 <__aeabi_atexit>
    return &factory;
}
   d907e:	4804      	ldr	r0, [pc, #16]	; (d9090 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d9080:	bd10      	pop	{r4, pc}
   d9082:	bf00      	nop
   d9084:	2003e5dc 	.word	0x2003e5dc
   d9088:	2003e3b0 	.word	0x2003e3b0
   d908c:	000d8e4b 	.word	0x000d8e4b
   d9090:	2003e1c4 	.word	0x2003e1c4

000d9094 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d9094:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d9096:	2500      	movs	r5, #0
   d9098:	4604      	mov	r4, r0
   d909a:	e9c0 5500 	strd	r5, r5, [r0]
   d909e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d90a2:	6085      	str	r5, [r0, #8]
   d90a4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d90a6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d90aa:	f7fe fa79 	bl	d75a0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d90ae:	f7ff ffb5 	bl	d901c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d90b2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d90b4:	f7ff ffd0 	bl	d9058 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d90b8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d90ba:	6220      	str	r0, [r4, #32]
}
   d90bc:	4620      	mov	r0, r4
   d90be:	bd38      	pop	{r3, r4, r5, pc}

000d90c0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d90c0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d90c2:	4c0b      	ldr	r4, [pc, #44]	; (d90f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d90c4:	7823      	ldrb	r3, [r4, #0]
   d90c6:	f3bf 8f5b 	dmb	ish
   d90ca:	07db      	lsls	r3, r3, #31
   d90cc:	d40e      	bmi.n	d90ec <_ZN5spark10LogManager8instanceEv+0x2c>
   d90ce:	4620      	mov	r0, r4
   d90d0:	f7fa fff2 	bl	d40b8 <__cxa_guard_acquire>
   d90d4:	b150      	cbz	r0, d90ec <_ZN5spark10LogManager8instanceEv+0x2c>
   d90d6:	4807      	ldr	r0, [pc, #28]	; (d90f4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d90d8:	f7ff ffdc 	bl	d9094 <_ZN5spark10LogManagerC1Ev>
   d90dc:	4620      	mov	r0, r4
   d90de:	f7fa fff0 	bl	d40c2 <__cxa_guard_release>
   d90e2:	4a05      	ldr	r2, [pc, #20]	; (d90f8 <_ZN5spark10LogManager8instanceEv+0x38>)
   d90e4:	4905      	ldr	r1, [pc, #20]	; (d90fc <_ZN5spark10LogManager8instanceEv+0x3c>)
   d90e6:	4803      	ldr	r0, [pc, #12]	; (d90f4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d90e8:	f001 ff64 	bl	dafb4 <__aeabi_atexit>
    return &mgr;
}
   d90ec:	4801      	ldr	r0, [pc, #4]	; (d90f4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d90ee:	bd10      	pop	{r4, pc}
   d90f0:	2003e5d4 	.word	0x2003e5d4
   d90f4:	2003e5e4 	.word	0x2003e5e4
   d90f8:	2003e3b0 	.word	0x2003e3b0
   d90fc:	000d9555 	.word	0x000d9555

000d9100 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d9100:	4a02      	ldr	r2, [pc, #8]	; (d910c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d9102:	4903      	ldr	r1, [pc, #12]	; (d9110 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d9104:	4803      	ldr	r0, [pc, #12]	; (d9114 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d9106:	2300      	movs	r3, #0
   d9108:	f7fe bc3a 	b.w	d7980 <log_set_callbacks>
   d910c:	000d9431 	.word	0x000d9431
   d9110:	000d93bd 	.word	0x000d93bd
   d9114:	000d933d 	.word	0x000d933d

000d9118 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d9118:	2300      	movs	r3, #0
   d911a:	461a      	mov	r2, r3
   d911c:	4619      	mov	r1, r3
   d911e:	4618      	mov	r0, r3
   d9120:	f7fe bc2e 	b.w	d7980 <log_set_callbacks>

000d9124 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9124:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d9126:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9128:	f851 3b04 	ldr.w	r3, [r1], #4
   d912c:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d912e:	4604      	mov	r4, r0
   d9130:	a801      	add	r0, sp, #4
   d9132:	f7fe fe2c 	bl	d7d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d9136:	466a      	mov	r2, sp
   d9138:	4629      	mov	r1, r5
   d913a:	4620      	mov	r0, r4
   d913c:	f7ff fd15 	bl	d8b6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9140:	a801      	add	r0, sp, #4
   d9142:	f7fe fe2b 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9146:	4620      	mov	r0, r4
   d9148:	b003      	add	sp, #12
   d914a:	bd30      	pop	{r4, r5, pc}

000d914c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d914c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d914e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9150:	f851 3b04 	ldr.w	r3, [r1], #4
   d9154:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9156:	4604      	mov	r4, r0
   d9158:	a801      	add	r0, sp, #4
   d915a:	f7fe fe18 	bl	d7d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d915e:	466a      	mov	r2, sp
   d9160:	4629      	mov	r1, r5
   d9162:	4620      	mov	r0, r4
   d9164:	f7ff fd7c 	bl	d8c60 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9168:	a801      	add	r0, sp, #4
   d916a:	f7fe fe17 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d916e:	4620      	mov	r0, r4
   d9170:	b003      	add	sp, #12
   d9172:	bd30      	pop	{r4, r5, pc}

000d9174 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9174:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d9176:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9178:	f851 3b04 	ldr.w	r3, [r1], #4
   d917c:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d917e:	4604      	mov	r4, r0
   d9180:	a801      	add	r0, sp, #4
   d9182:	f7fe fe04 	bl	d7d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d9186:	466a      	mov	r2, sp
   d9188:	4629      	mov	r1, r5
   d918a:	4620      	mov	r0, r4
   d918c:	f7ff fd44 	bl	d8c18 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9190:	a801      	add	r0, sp, #4
   d9192:	f7fe fe03 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9196:	4620      	mov	r0, r4
   d9198:	b003      	add	sp, #12
   d919a:	bd30      	pop	{r4, r5, pc}

000d919c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d919c:	b570      	push	{r4, r5, r6, lr}
   d919e:	b08a      	sub	sp, #40	; 0x28
   d91a0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d91a2:	4601      	mov	r1, r0
   d91a4:	a804      	add	r0, sp, #16
   d91a6:	f7ff ffd1 	bl	d914c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d91aa:	4e14      	ldr	r6, [pc, #80]	; (d91fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d91ac:	a804      	add	r0, sp, #16
   d91ae:	f7ff fd6f 	bl	d8c90 <_ZN5spark18JSONObjectIterator4nextEv>
   d91b2:	b1e8      	cbz	r0, d91f0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d91b4:	a904      	add	r1, sp, #16
   d91b6:	4668      	mov	r0, sp
   d91b8:	f7ff ffdc 	bl	d9174 <_ZNK5spark18JSONObjectIterator4nameEv>
   d91bc:	9802      	ldr	r0, [sp, #8]
   d91be:	4631      	mov	r1, r6
   d91c0:	f7ff fe6d 	bl	d8e9e <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d91c4:	4604      	mov	r4, r0
   d91c6:	b110      	cbz	r0, d91ce <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d91c8:	1e2c      	subs	r4, r5, #0
   d91ca:	bf18      	it	ne
   d91cc:	2401      	movne	r4, #1
   d91ce:	a801      	add	r0, sp, #4
   d91d0:	f7fe fde4 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d91d4:	2c00      	cmp	r4, #0
   d91d6:	d0e9      	beq.n	d91ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d91d8:	a904      	add	r1, sp, #16
   d91da:	4668      	mov	r0, sp
   d91dc:	f7ff ffa2 	bl	d9124 <_ZNK5spark18JSONObjectIterator5valueEv>
   d91e0:	4668      	mov	r0, sp
   d91e2:	f7ff fcf8 	bl	d8bd6 <_ZNK5spark9JSONValue5toIntEv>
   d91e6:	6028      	str	r0, [r5, #0]
   d91e8:	a801      	add	r0, sp, #4
   d91ea:	f7fe fdd7 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d91ee:	e7dd      	b.n	d91ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d91f0:	a805      	add	r0, sp, #20
   d91f2:	f7fe fdd3 	bl	d7d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d91f6:	b00a      	add	sp, #40	; 0x28
   d91f8:	bd70      	pop	{r4, r5, r6, pc}
   d91fa:	bf00      	nop
   d91fc:	000de592 	.word	0x000de592

000d9200 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9200:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9202:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d9204:	4620      	mov	r0, r4
   d9206:	4912      	ldr	r1, [pc, #72]	; (d9250 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9208:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d920a:	f002 fcec 	bl	dbbe6 <strcmp>
   d920e:	b948      	cbnz	r0, d9224 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d9210:	f001 fcea 	bl	dabe8 <_Z16_fetch_usbserialv>
   d9214:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d9218:	f001 fcd6 	bl	dabc8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d921c:	f001 fce4 	bl	dabe8 <_Z16_fetch_usbserialv>
}
   d9220:	b003      	add	sp, #12
   d9222:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d9224:	490b      	ldr	r1, [pc, #44]	; (d9254 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d9226:	4620      	mov	r0, r4
   d9228:	f002 fcdd 	bl	dbbe6 <strcmp>
   d922c:	b970      	cbnz	r0, d924c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d922e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d9232:	a901      	add	r1, sp, #4
   d9234:	4628      	mov	r0, r5
        int baud = 9600;
   d9236:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d9238:	f7ff ffb0 	bl	d919c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d923c:	f001 fc48 	bl	daad0 <_Z22__fetch_global_Serial1v>
   d9240:	9901      	ldr	r1, [sp, #4]
   d9242:	f001 fc3f 	bl	daac4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d9246:	f001 fc43 	bl	daad0 <_Z22__fetch_global_Serial1v>
   d924a:	e7e9      	b.n	d9220 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d924c:	2000      	movs	r0, #0
   d924e:	e7e7      	b.n	d9220 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d9250:	000de597 	.word	0x000de597
   d9254:	000de59e 	.word	0x000de59e

000d9258 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9258:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d925a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d925e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9260:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9262:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9266:	42ae      	cmp	r6, r5
   d9268:	d005      	beq.n	d9276 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d926a:	f105 0008 	add.w	r0, r5, #8
   d926e:	f7ff fff3 	bl	d9258 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9272:	3514      	adds	r5, #20
   d9274:	e7f7      	b.n	d9266 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d9276:	6820      	ldr	r0, [r4, #0]
   d9278:	f7fe fcee 	bl	d7c58 <free>
}
   d927c:	4620      	mov	r0, r4
   d927e:	bd70      	pop	{r4, r5, r6, pc}

000d9280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9280:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9282:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9286:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9288:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d928c:	42ae      	cmp	r6, r5
   d928e:	d004      	beq.n	d929a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d9290:	4628      	mov	r0, r5
   d9292:	f000 ff97 	bl	da1c4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d9296:	3510      	adds	r5, #16
   d9298:	e7f8      	b.n	d928c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d929a:	6820      	ldr	r0, [r4, #0]
   d929c:	f7fe fcdc 	bl	d7c58 <free>
}
   d92a0:	4620      	mov	r0, r4
   d92a2:	bd70      	pop	{r4, r5, r6, pc}

000d92a4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d92a4:	b510      	push	{r4, lr}
   d92a6:	4604      	mov	r4, r0
   d92a8:	300c      	adds	r0, #12
   d92aa:	f7ff ffd5 	bl	d9258 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d92ae:	4620      	mov	r0, r4
   d92b0:	f7ff ffe6 	bl	d9280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d92b4:	4620      	mov	r0, r4
   d92b6:	bd10      	pop	{r4, pc}

000d92b8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d92b8:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d92ba:	4b04      	ldr	r3, [pc, #16]	; (d92cc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d92bc:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d92be:	f840 3b04 	str.w	r3, [r0], #4
   d92c2:	f7ff ffef 	bl	d92a4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d92c6:	4620      	mov	r0, r4
   d92c8:	bd10      	pop	{r4, pc}
   d92ca:	bf00      	nop
   d92cc:	000de018 	.word	0x000de018

000d92d0 <_ZN5spark16StreamLogHandlerD0Ev>:
   d92d0:	b510      	push	{r4, lr}
   d92d2:	4604      	mov	r4, r0
   d92d4:	f7ff fff0 	bl	d92b8 <_ZN5spark16StreamLogHandlerD1Ev>
   d92d8:	4620      	mov	r0, r4
   d92da:	2124      	movs	r1, #36	; 0x24
   d92dc:	f001 fe6f 	bl	dafbe <_ZdlPvj>
   d92e0:	4620      	mov	r0, r4
   d92e2:	bd10      	pop	{r4, pc}

000d92e4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d92e4:	b510      	push	{r4, lr}
   d92e6:	4b03      	ldr	r3, [pc, #12]	; (d92f4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d92e8:	6003      	str	r3, [r0, #0]
   d92ea:	4604      	mov	r4, r0
   d92ec:	f7ff ffe4 	bl	d92b8 <_ZN5spark16StreamLogHandlerD1Ev>
   d92f0:	4620      	mov	r0, r4
   d92f2:	bd10      	pop	{r4, pc}
   d92f4:	000de638 	.word	0x000de638

000d92f8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d92f8:	b510      	push	{r4, lr}
   d92fa:	4604      	mov	r4, r0
   d92fc:	f7ff fff2 	bl	d92e4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d9300:	4620      	mov	r0, r4
   d9302:	2124      	movs	r1, #36	; 0x24
   d9304:	f001 fe5b 	bl	dafbe <_ZdlPvj>
   d9308:	4620      	mov	r0, r4
   d930a:	bd10      	pop	{r4, pc}

000d930c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d930c:	2200      	movs	r2, #0
   d930e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d9312:	b510      	push	{r4, lr}
        capacity_(0) {
   d9314:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9316:	680c      	ldr	r4, [r1, #0]
   d9318:	6004      	str	r4, [r0, #0]
   d931a:	684c      	ldr	r4, [r1, #4]
   d931c:	6044      	str	r4, [r0, #4]
   d931e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9320:	600a      	str	r2, [r1, #0]
   d9322:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9324:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9326:	608a      	str	r2, [r1, #8]
}
   d9328:	bd10      	pop	{r4, pc}

000d932a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d932a:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d932c:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d932e:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9330:	6818      	ldr	r0, [r3, #0]
   d9332:	f7fe f94d 	bl	d75d0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d9336:	4620      	mov	r0, r4
   d9338:	bd10      	pop	{r4, pc}
	...

000d933c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d933c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9340:	b087      	sub	sp, #28
   d9342:	4680      	mov	r8, r0
   d9344:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d9346:	4b1c      	ldr	r3, [pc, #112]	; (d93b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d9348:	685b      	ldr	r3, [r3, #4]
   d934a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d934e:	4689      	mov	r9, r1
   d9350:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9352:	b96b      	cbnz	r3, d9370 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d9354:	f7ff feb4 	bl	d90c0 <_ZN5spark10LogManager8instanceEv>
   d9358:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d935a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d935e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9360:	9305      	str	r3, [sp, #20]
   d9362:	f7fe f92d 	bl	d75c0 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d9366:	7b23      	ldrb	r3, [r4, #12]
   d9368:	b12b      	cbz	r3, d9376 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d936a:	a805      	add	r0, sp, #20
   d936c:	f7ff ffdd 	bl	d932a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9370:	b007      	add	sp, #28
   d9372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9376:	2301      	movs	r3, #1
   d9378:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d937a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d937e:	fa5f f989 	uxtb.w	r9, r9
   d9382:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9386:	45aa      	cmp	sl, r5
   d9388:	d012      	beq.n	d93b0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d938a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d938e:	4631      	mov	r1, r6
   d9390:	1d38      	adds	r0, r7, #4
   d9392:	f7ff fe19 	bl	d8fc8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9396:	4581      	cmp	r9, r0
   d9398:	d3f5      	bcc.n	d9386 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d939a:	683b      	ldr	r3, [r7, #0]
   d939c:	9a03      	ldr	r2, [sp, #12]
   d939e:	9200      	str	r2, [sp, #0]
   d93a0:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d93a4:	464a      	mov	r2, r9
   d93a6:	4633      	mov	r3, r6
   d93a8:	4641      	mov	r1, r8
   d93aa:	4638      	mov	r0, r7
   d93ac:	47d8      	blx	fp
   d93ae:	e7ea      	b.n	d9386 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d93b0:	2300      	movs	r3, #0
   d93b2:	7323      	strb	r3, [r4, #12]
   d93b4:	e7d9      	b.n	d936a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d93b6:	bf00      	nop
   d93b8:	e000ed00 	.word	0xe000ed00

000d93bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d93bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d93c0:	469b      	mov	fp, r3
   d93c2:	4b1a      	ldr	r3, [pc, #104]	; (d942c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d93c4:	685b      	ldr	r3, [r3, #4]
   d93c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d93ca:	4680      	mov	r8, r0
   d93cc:	4689      	mov	r9, r1
   d93ce:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d93d0:	b96b      	cbnz	r3, d93ee <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d93d2:	f7ff fe75 	bl	d90c0 <_ZN5spark10LogManager8instanceEv>
   d93d6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d93d8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d93dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d93de:	9301      	str	r3, [sp, #4]
   d93e0:	f7fe f8ee 	bl	d75c0 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d93e4:	7b23      	ldrb	r3, [r4, #12]
   d93e6:	b12b      	cbz	r3, d93f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d93e8:	a801      	add	r0, sp, #4
   d93ea:	f7ff ff9e 	bl	d932a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d93ee:	b003      	add	sp, #12
   d93f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d93f4:	2301      	movs	r3, #1
   d93f6:	7323      	strb	r3, [r4, #12]
   d93f8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d93fc:	b2f6      	uxtb	r6, r6
   d93fe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9402:	4555      	cmp	r5, sl
   d9404:	d00e      	beq.n	d9424 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d9406:	f855 7b04 	ldr.w	r7, [r5], #4
   d940a:	4659      	mov	r1, fp
   d940c:	1d38      	adds	r0, r7, #4
   d940e:	f7ff fddb 	bl	d8fc8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9412:	4286      	cmp	r6, r0
   d9414:	d3f5      	bcc.n	d9402 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d9416:	683b      	ldr	r3, [r7, #0]
   d9418:	464a      	mov	r2, r9
   d941a:	68db      	ldr	r3, [r3, #12]
   d941c:	4641      	mov	r1, r8
   d941e:	4638      	mov	r0, r7
   d9420:	4798      	blx	r3
   d9422:	e7ee      	b.n	d9402 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d9424:	2300      	movs	r3, #0
   d9426:	7323      	strb	r3, [r4, #12]
   d9428:	e7de      	b.n	d93e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d942a:	bf00      	nop
   d942c:	e000ed00 	.word	0xe000ed00

000d9430 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d9430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9434:	4b16      	ldr	r3, [pc, #88]	; (d9490 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d9436:	685b      	ldr	r3, [r3, #4]
   d9438:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d943c:	4605      	mov	r5, r0
   d943e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d9440:	bb1b      	cbnz	r3, d948a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d9442:	f7ff fe3d 	bl	d90c0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d9446:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d944a:	4604      	mov	r4, r0
   d944c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d944e:	9301      	str	r3, [sp, #4]
   d9450:	f7fe f8b6 	bl	d75c0 <os_mutex_recursive_lock>
   d9454:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d9458:	2446      	movs	r4, #70	; 0x46
   d945a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d945e:	45b0      	cmp	r8, r6
   d9460:	d109      	bne.n	d9476 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d9462:	a801      	add	r0, sp, #4
   d9464:	f7ff ff61 	bl	d932a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d9468:	42a5      	cmp	r5, r4
   d946a:	bfb4      	ite	lt
   d946c:	2000      	movlt	r0, #0
   d946e:	2001      	movge	r0, #1
}
   d9470:	b002      	add	sp, #8
   d9472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d9476:	f856 0b04 	ldr.w	r0, [r6], #4
   d947a:	4639      	mov	r1, r7
   d947c:	3004      	adds	r0, #4
   d947e:	f7ff fda3 	bl	d8fc8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d9482:	4284      	cmp	r4, r0
   d9484:	bfa8      	it	ge
   d9486:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d9488:	e7e9      	b.n	d945e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d948a:	2000      	movs	r0, #0
   d948c:	e7f0      	b.n	d9470 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d948e:	bf00      	nop
   d9490:	e000ed00 	.word	0xe000ed00

000d9494 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9494:	b570      	push	{r4, r5, r6, lr}
   d9496:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9498:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d949c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d949e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d94a2:	4282      	cmp	r2, r0
   d94a4:	d007      	beq.n	d94b6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d94a6:	4601      	mov	r1, r0
            if (*p == value) {
   d94a8:	681d      	ldr	r5, [r3, #0]
   d94aa:	f851 6b04 	ldr.w	r6, [r1], #4
   d94ae:	42ae      	cmp	r6, r5
   d94b0:	d003      	beq.n	d94ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d94b2:	4608      	mov	r0, r1
   d94b4:	e7f5      	b.n	d94a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d94b6:	2000      	movs	r0, #0
}
   d94b8:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d94ba:	1a52      	subs	r2, r2, r1
   d94bc:	f002 fb36 	bl	dbb2c <memmove>
    --size_;
   d94c0:	6863      	ldr	r3, [r4, #4]
   d94c2:	3b01      	subs	r3, #1
   d94c4:	6063      	str	r3, [r4, #4]
    return true;
   d94c6:	2001      	movs	r0, #1
   d94c8:	e7f6      	b.n	d94b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d94ca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d94ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d94cc:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d94d0:	4604      	mov	r4, r0
   d94d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d94d4:	9101      	str	r1, [sp, #4]
   d94d6:	9303      	str	r3, [sp, #12]
   d94d8:	f7fe f872 	bl	d75c0 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d94dc:	a901      	add	r1, sp, #4
   d94de:	4620      	mov	r0, r4
   d94e0:	f7ff ffd8 	bl	d9494 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d94e4:	b118      	cbz	r0, d94ee <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d94e6:	6863      	ldr	r3, [r4, #4]
   d94e8:	b90b      	cbnz	r3, d94ee <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d94ea:	f7ff fe15 	bl	d9118 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d94ee:	a803      	add	r0, sp, #12
   d94f0:	f7ff ff1b 	bl	d932a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d94f4:	b004      	add	sp, #16
   d94f6:	bd10      	pop	{r4, pc}

000d94f8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d94f8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d94fa:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d94fe:	2318      	movs	r3, #24
   d9500:	4604      	mov	r4, r0
   d9502:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9506:	42ae      	cmp	r6, r5
   d9508:	d015      	beq.n	d9536 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d950a:	f105 0110 	add.w	r1, r5, #16
   d950e:	4620      	mov	r0, r4
   d9510:	f7ff ffc0 	bl	d9494 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9514:	6863      	ldr	r3, [r4, #4]
   d9516:	b90b      	cbnz	r3, d951c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9518:	f7ff fdfe 	bl	d9118 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d951c:	69e0      	ldr	r0, [r4, #28]
   d951e:	6929      	ldr	r1, [r5, #16]
   d9520:	6803      	ldr	r3, [r0, #0]
   d9522:	68db      	ldr	r3, [r3, #12]
   d9524:	4798      	blx	r3
        if (h.stream) {
   d9526:	6969      	ldr	r1, [r5, #20]
   d9528:	b119      	cbz	r1, d9532 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d952a:	6a20      	ldr	r0, [r4, #32]
   d952c:	6803      	ldr	r3, [r0, #0]
   d952e:	68db      	ldr	r3, [r3, #12]
   d9530:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d9532:	3518      	adds	r5, #24
   d9534:	e7e7      	b.n	d9506 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d9536:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d953a:	2618      	movs	r6, #24
   d953c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9540:	42ae      	cmp	r6, r5
   d9542:	d004      	beq.n	d954e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9544:	4628      	mov	r0, r5
   d9546:	f000 fe3d 	bl	da1c4 <_ZN6StringD1Ev>
   d954a:	3518      	adds	r5, #24
   d954c:	e7f8      	b.n	d9540 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d954e:	2300      	movs	r3, #0
   d9550:	6163      	str	r3, [r4, #20]
}
   d9552:	bd70      	pop	{r4, r5, r6, pc}

000d9554 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9554:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9556:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d9558:	f7ff fdde 	bl	d9118 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d955c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9560:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9562:	9301      	str	r3, [sp, #4]
   d9564:	f7fe f82c 	bl	d75c0 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d9568:	4620      	mov	r0, r4
   d956a:	f7ff ffc5 	bl	d94f8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d956e:	a801      	add	r0, sp, #4
   d9570:	f7ff fedb 	bl	d932a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9574:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9576:	b108      	cbz	r0, d957c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9578:	f7fe f81a 	bl	d75b0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d957c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9580:	2618      	movs	r6, #24
   d9582:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9586:	42ae      	cmp	r6, r5
   d9588:	d004      	beq.n	d9594 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d958a:	4628      	mov	r0, r5
   d958c:	f000 fe1a 	bl	da1c4 <_ZN6StringD1Ev>
   d9590:	3518      	adds	r5, #24
   d9592:	e7f8      	b.n	d9586 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9594:	6920      	ldr	r0, [r4, #16]
   d9596:	f7fe fb5f 	bl	d7c58 <free>
   d959a:	6820      	ldr	r0, [r4, #0]
   d959c:	f7fe fb5c 	bl	d7c58 <free>
}
   d95a0:	4620      	mov	r0, r4
   d95a2:	b002      	add	sp, #8
   d95a4:	bd70      	pop	{r4, r5, r6, pc}

000d95a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d95a6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d95a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d95aa:	4606      	mov	r6, r0
   d95ac:	460c      	mov	r4, r1
   d95ae:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d95b0:	d927      	bls.n	d9602 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d95b2:	4290      	cmp	r0, r2
   d95b4:	d226      	bcs.n	d9604 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d95b6:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d95ba:	1a6c      	subs	r4, r5, r1
   d95bc:	f1a1 0714 	sub.w	r7, r1, #20
   d95c0:	4404      	add	r4, r0
        capacity_(0) {
   d95c2:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d95c4:	42af      	cmp	r7, r5
   d95c6:	d03d      	beq.n	d9644 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d95c8:	b1a4      	cbz	r4, d95f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d95ca:	682b      	ldr	r3, [r5, #0]
   d95cc:	6023      	str	r3, [r4, #0]
   d95ce:	88ab      	ldrh	r3, [r5, #4]
   d95d0:	80a3      	strh	r3, [r4, #4]
   d95d2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d95d6:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d95d8:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d95dc:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d95de:	68ab      	ldr	r3, [r5, #8]
   d95e0:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d95e2:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d95e4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d95e6:	68ea      	ldr	r2, [r5, #12]
   d95e8:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d95ea:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d95ec:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d95ee:	692a      	ldr	r2, [r5, #16]
   d95f0:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d95f2:	612b      	str	r3, [r5, #16]
   d95f4:	f105 0008 	add.w	r0, r5, #8
   d95f8:	f7ff fe2e 	bl	d9258 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d95fc:	3d14      	subs	r5, #20
   d95fe:	3c14      	subs	r4, #20
   d9600:	e7e0      	b.n	d95c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d9602:	d01f      	beq.n	d9644 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d9604:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d9606:	42ac      	cmp	r4, r5
   d9608:	d01c      	beq.n	d9644 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d960a:	b1a6      	cbz	r6, d9636 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d960c:	6823      	ldr	r3, [r4, #0]
   d960e:	6033      	str	r3, [r6, #0]
   d9610:	88a3      	ldrh	r3, [r4, #4]
   d9612:	80b3      	strh	r3, [r6, #4]
   d9614:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d9618:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d961a:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d961e:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9620:	68a3      	ldr	r3, [r4, #8]
   d9622:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9624:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9626:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9628:	68e2      	ldr	r2, [r4, #12]
   d962a:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d962c:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d962e:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9630:	6922      	ldr	r2, [r4, #16]
   d9632:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9634:	6123      	str	r3, [r4, #16]
   d9636:	f104 0008 	add.w	r0, r4, #8
   d963a:	f7ff fe0d 	bl	d9258 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d963e:	3414      	adds	r4, #20
   d9640:	3614      	adds	r6, #20
   d9642:	e7e0      	b.n	d9606 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d9644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9646 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9648:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d964c:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d964e:	4604      	mov	r4, r0
   d9650:	460e      	mov	r6, r1
   d9652:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9654:	db0d      	blt.n	d9672 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9656:	3501      	adds	r5, #1
        if (n > 0) {
   d9658:	2d00      	cmp	r5, #0
   d965a:	6800      	ldr	r0, [r0, #0]
   d965c:	dd04      	ble.n	d9668 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d965e:	00a9      	lsls	r1, r5, #2
   d9660:	f7fe fb02 	bl	d7c68 <realloc>
            if (!d) {
   d9664:	b918      	cbnz	r0, d966e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d9668:	f7fe faf6 	bl	d7c58 <free>
        T* d = nullptr;
   d966c:	2000      	movs	r0, #0
        data_ = d;
   d966e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9670:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9672:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9674:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9676:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d967a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d967c:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9680:	1d08      	adds	r0, r1, #4
   d9682:	f002 fa53 	bl	dbb2c <memmove>
    new(p) T(std::move(value));
   d9686:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d968a:	6863      	ldr	r3, [r4, #4]
   d968c:	3301      	adds	r3, #1
   d968e:	6063      	str	r3, [r4, #4]
    return true;
   d9690:	2001      	movs	r0, #1
   d9692:	e7e8      	b.n	d9666 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d9694 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9694:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9696:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d969a:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d969c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d969e:	9301      	str	r3, [sp, #4]
   d96a0:	460d      	mov	r5, r1
   d96a2:	f7fd ff8d 	bl	d75c0 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d96a6:	e9d4 3100 	ldrd	r3, r1, [r4]
   d96aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d96ae:	4283      	cmp	r3, r0
   d96b0:	461a      	mov	r2, r3
   d96b2:	d00b      	beq.n	d96cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d96b4:	6812      	ldr	r2, [r2, #0]
   d96b6:	42aa      	cmp	r2, r5
   d96b8:	f103 0304 	add.w	r3, r3, #4
   d96bc:	d1f7      	bne.n	d96ae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d96be:	a801      	add	r0, sp, #4
   d96c0:	f7ff fe33 	bl	d932a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d96c4:	2500      	movs	r5, #0
}
   d96c6:	4628      	mov	r0, r5
   d96c8:	b003      	add	sp, #12
   d96ca:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d96cc:	462a      	mov	r2, r5
   d96ce:	4620      	mov	r0, r4
   d96d0:	f7ff ffb9 	bl	d9646 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d96d4:	4605      	mov	r5, r0
   d96d6:	2800      	cmp	r0, #0
   d96d8:	d0f1      	beq.n	d96be <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d96da:	6863      	ldr	r3, [r4, #4]
   d96dc:	2b01      	cmp	r3, #1
   d96de:	d101      	bne.n	d96e4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d96e0:	f7ff fd0e 	bl	d9100 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d96e4:	a801      	add	r0, sp, #4
   d96e6:	f7ff fe20 	bl	d932a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d96ea:	e7ec      	b.n	d96c6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d96ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d96ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d96ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d96f0:	4604      	mov	r4, r0
   d96f2:	460d      	mov	r5, r1
   d96f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d96f6:	d914      	bls.n	d9722 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d96f8:	4290      	cmp	r0, r2
   d96fa:	d213      	bcs.n	d9724 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d96fc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d9700:	1a75      	subs	r5, r6, r1
   d9702:	f1a1 0710 	sub.w	r7, r1, #16
   d9706:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d9708:	42b7      	cmp	r7, r6
   d970a:	d018      	beq.n	d973e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d970c:	b11c      	cbz	r4, d9716 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d970e:	4631      	mov	r1, r6
   d9710:	4620      	mov	r0, r4
   d9712:	f000 fdd3 	bl	da2bc <_ZN6StringC1EOS_>
                end->~T();
   d9716:	4630      	mov	r0, r6
   d9718:	f000 fd54 	bl	da1c4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d971c:	3e10      	subs	r6, #16
   d971e:	3c10      	subs	r4, #16
   d9720:	e7f2      	b.n	d9708 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d9722:	d00c      	beq.n	d973e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d9724:	42b5      	cmp	r5, r6
   d9726:	d00a      	beq.n	d973e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d9728:	b11c      	cbz	r4, d9732 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d972a:	4629      	mov	r1, r5
   d972c:	4620      	mov	r0, r4
   d972e:	f000 fdc5 	bl	da2bc <_ZN6StringC1EOS_>
                p->~T();
   d9732:	4628      	mov	r0, r5
   d9734:	f000 fd46 	bl	da1c4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d9738:	3510      	adds	r5, #16
   d973a:	3410      	adds	r4, #16
   d973c:	e7f2      	b.n	d9724 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d973e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9740 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d9740:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d9742:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d9744:	4605      	mov	r5, r0
        if (n > 0) {
   d9746:	dd11      	ble.n	d976c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d9748:	0130      	lsls	r0, r6, #4
   d974a:	f7fe fa7d 	bl	d7c48 <malloc>
            if (!d) {
   d974e:	4604      	mov	r4, r0
   d9750:	b158      	cbz	r0, d976a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d9752:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9756:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d975a:	f7ff ffc7 	bl	d96ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d975e:	6828      	ldr	r0, [r5, #0]
   d9760:	f7fe fa7a 	bl	d7c58 <free>
        data_ = d;
   d9764:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9766:	60ae      	str	r6, [r5, #8]
        return true;
   d9768:	2001      	movs	r0, #1
    }
   d976a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d976c:	2400      	movs	r4, #0
   d976e:	e7f6      	b.n	d975e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9770 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9774:	4691      	mov	r9, r2
   d9776:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d9778:	2300      	movs	r3, #0
   d977a:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d977c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9780:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9782:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d9784:	4299      	cmp	r1, r3
        capacity_(0) {
   d9786:	e9c0 3300 	strd	r3, r3, [r0]
   d978a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d978e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9792:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9796:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9798:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d979a:	dc23      	bgt.n	d97e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d979c:	e9d9 5700 	ldrd	r5, r7, [r9]
   d97a0:	2314      	movs	r3, #20
   d97a2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d97a6:	42af      	cmp	r7, r5
   d97a8:	d03b      	beq.n	d9822 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d97aa:	4629      	mov	r1, r5
   d97ac:	a80d      	add	r0, sp, #52	; 0x34
   d97ae:	f000 fd85 	bl	da2bc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d97b2:	a90d      	add	r1, sp, #52	; 0x34
   d97b4:	a811      	add	r0, sp, #68	; 0x44
   d97b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d97b8:	f000 fd80 	bl	da2bc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d97bc:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d97c0:	4299      	cmp	r1, r3
   d97c2:	da1b      	bge.n	d97fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d97c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d97c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d97c8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d97cc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d97d0:	4631      	mov	r1, r6
   d97d2:	f106 0010 	add.w	r0, r6, #16
   d97d6:	f7ff ff89 	bl	d96ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d97da:	b9ee      	cbnz	r6, d9818 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d97dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d97de:	3301      	adds	r3, #1
   d97e0:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d97e2:	e011      	b.n	d9808 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d97e4:	a80a      	add	r0, sp, #40	; 0x28
   d97e6:	f7ff ffab 	bl	d9740 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d97ea:	2800      	cmp	r0, #0
   d97ec:	d1d6      	bne.n	d979c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d97ee:	a80a      	add	r0, sp, #40	; 0x28
   d97f0:	f7ff fd46 	bl	d9280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d97f4:	4620      	mov	r0, r4
   d97f6:	b017      	add	sp, #92	; 0x5c
   d97f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d97fc:	3101      	adds	r1, #1
   d97fe:	a80a      	add	r0, sp, #40	; 0x28
   d9800:	f7ff ff9e 	bl	d9740 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9804:	2800      	cmp	r0, #0
   d9806:	d1dd      	bne.n	d97c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d9808:	a811      	add	r0, sp, #68	; 0x44
   d980a:	f000 fcdb 	bl	da1c4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d980e:	a80d      	add	r0, sp, #52	; 0x34
   d9810:	f000 fcd8 	bl	da1c4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d9814:	3514      	adds	r5, #20
   d9816:	e7c6      	b.n	d97a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d9818:	a911      	add	r1, sp, #68	; 0x44
   d981a:	4630      	mov	r0, r6
   d981c:	f000 fd4e 	bl	da2bc <_ZN6StringC1EOS_>
   d9820:	e7dc      	b.n	d97dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d9822:	2600      	movs	r6, #0
   d9824:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d9828:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d982a:	4637      	mov	r7, r6
   d982c:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d9830:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9834:	429e      	cmp	r6, r3
   d9836:	f280 8097 	bge.w	d9968 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d983a:	0133      	lsls	r3, r6, #4
   d983c:	58d3      	ldr	r3, [r2, r3]
   d983e:	9308      	str	r3, [sp, #32]
        if (!category) {
   d9840:	b90b      	cbnz	r3, d9846 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d9842:	3601      	adds	r6, #1
   d9844:	e7f4      	b.n	d9830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d9846:	fb0a f306 	mul.w	r3, sl, r6
   d984a:	9709      	str	r7, [sp, #36]	; 0x24
   d984c:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d984e:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d9850:	a909      	add	r1, sp, #36	; 0x24
   d9852:	a808      	add	r0, sp, #32
   d9854:	f7ff fafc 	bl	d8e50 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9858:	4683      	mov	fp, r0
   d985a:	2800      	cmp	r0, #0
   d985c:	d0f1      	beq.n	d9842 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d985e:	4601      	mov	r1, r0
   d9860:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d9862:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9866:	f10d 031f 	add.w	r3, sp, #31
   d986a:	4628      	mov	r0, r5
   d986c:	f7ff fb6e 	bl	d8f4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9870:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9874:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9876:	f1b8 0f00 	cmp.w	r8, #0
   d987a:	d166      	bne.n	d994a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d987c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d9880:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d9884:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d9888:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d988c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d9890:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d9894:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9898:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d989c:	4293      	cmp	r3, r2
   d989e:	db1a      	blt.n	d98d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d98a0:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d98a4:	f1bb 0f00 	cmp.w	fp, #0
   d98a8:	dd4a      	ble.n	d9940 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d98aa:	fb0a f00b 	mul.w	r0, sl, fp
   d98ae:	f7fe f9cb 	bl	d7c48 <malloc>
            if (!d) {
   d98b2:	9004      	str	r0, [sp, #16]
   d98b4:	2800      	cmp	r0, #0
   d98b6:	d045      	beq.n	d9944 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d98b8:	e9d5 1200 	ldrd	r1, r2, [r5]
   d98bc:	fb0a 1202 	mla	r2, sl, r2, r1
   d98c0:	f7ff fe71 	bl	d95a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d98c4:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d98c6:	6828      	ldr	r0, [r5, #0]
   d98c8:	9304      	str	r3, [sp, #16]
   d98ca:	f7fe f9c5 	bl	d7c58 <free>
        data_ = d;
   d98ce:	9b04      	ldr	r3, [sp, #16]
   d98d0:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d98d2:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d98d6:	9b01      	ldr	r3, [sp, #4]
   d98d8:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d98dc:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d98de:	fb0a f303 	mul.w	r3, sl, r3
   d98e2:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d98e6:	f101 0014 	add.w	r0, r1, #20
   d98ea:	fb0a b202 	mla	r2, sl, r2, fp
   d98ee:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d98f0:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d98f2:	f7ff fe58 	bl	d95a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d98f6:	9904      	ldr	r1, [sp, #16]
   d98f8:	b1a9      	cbz	r1, d9926 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d98fa:	9b05      	ldr	r3, [sp, #20]
   d98fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d98fe:	f84b 2003 	str.w	r2, [fp, r3]
   d9902:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d9906:	808b      	strh	r3, [r1, #4]
   d9908:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d990c:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d990e:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d9912:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9916:	608b      	str	r3, [r1, #8]
   d9918:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d991a:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d991c:	60cb      	str	r3, [r1, #12]
   d991e:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d9920:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d9922:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9924:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d9926:	686b      	ldr	r3, [r5, #4]
   d9928:	3301      	adds	r3, #1
   d992a:	606b      	str	r3, [r5, #4]
   d992c:	a813      	add	r0, sp, #76	; 0x4c
   d992e:	f7ff fc93 	bl	d9258 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9932:	f1b8 0f00 	cmp.w	r8, #0
   d9936:	d008      	beq.n	d994a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d9938:	a80d      	add	r0, sp, #52	; 0x34
   d993a:	f7ff fc8d 	bl	d9258 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d993e:	e756      	b.n	d97ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d9940:	4643      	mov	r3, r8
   d9942:	e7c0      	b.n	d98c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9944:	f04f 0801 	mov.w	r8, #1
   d9948:	e7f0      	b.n	d992c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d994a:	9b01      	ldr	r3, [sp, #4]
   d994c:	682d      	ldr	r5, [r5, #0]
   d994e:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d9952:	9b08      	ldr	r3, [sp, #32]
   d9954:	781b      	ldrb	r3, [r3, #0]
   d9956:	b92b      	cbnz	r3, d9964 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d9958:	f8d9 3000 	ldr.w	r3, [r9]
   d995c:	9a02      	ldr	r2, [sp, #8]
   d995e:	4413      	add	r3, r2
   d9960:	7c1b      	ldrb	r3, [r3, #16]
   d9962:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d9964:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d9966:	e773      	b.n	d9850 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9968:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d996a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d996c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d996e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9970:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9972:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d9974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d9976:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9978:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d997a:	60a2      	str	r2, [r4, #8]
   d997c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d997e:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9980:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9982:	60e2      	str	r2, [r4, #12]
   d9984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d9986:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9988:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d998a:	6122      	str	r2, [r4, #16]
   d998c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d998e:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d9990:	9b03      	ldr	r3, [sp, #12]
   d9992:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d9994:	6162      	str	r2, [r4, #20]
   d9996:	7623      	strb	r3, [r4, #24]
   d9998:	e7ce      	b.n	d9938 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d999c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d999c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d999e:	4605      	mov	r5, r0
   d99a0:	4b09      	ldr	r3, [pc, #36]	; (d99c8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d99a2:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d99a6:	4604      	mov	r4, r0
   d99a8:	460e      	mov	r6, r1
        filter_(level, filters) {
   d99aa:	a801      	add	r0, sp, #4
   d99ac:	4611      	mov	r1, r2
   d99ae:	f7fc f93e 	bl	d5c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d99b2:	aa01      	add	r2, sp, #4
   d99b4:	4631      	mov	r1, r6
   d99b6:	4628      	mov	r0, r5
   d99b8:	f7ff feda 	bl	d9770 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d99bc:	a801      	add	r0, sp, #4
   d99be:	f7fc f8f5 	bl	d5bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d99c2:	4620      	mov	r0, r4
   d99c4:	b004      	add	sp, #16
   d99c6:	bd70      	pop	{r4, r5, r6, pc}
   d99c8:	000de018 	.word	0x000de018

000d99cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d99cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d99ce:	460f      	mov	r7, r1
   d99d0:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d99d2:	4926      	ldr	r1, [pc, #152]	; (d9a6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d99d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d99d6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d99d8:	4616      	mov	r6, r2
   d99da:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d99dc:	f002 f903 	bl	dbbe6 <strcmp>
   d99e0:	bb00      	cbnz	r0, d9a24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d99e2:	b1e4      	cbz	r4, d9a1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d99e4:	4629      	mov	r1, r5
   d99e6:	4668      	mov	r0, sp
   d99e8:	f7ff fc90 	bl	d930c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d99ec:	4920      	ldr	r1, [pc, #128]	; (d9a70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d99ee:	2024      	movs	r0, #36	; 0x24
   d99f0:	f001 fae7 	bl	dafc2 <_ZnwjRKSt9nothrow_t>
   d99f4:	4605      	mov	r5, r0
   d99f6:	b170      	cbz	r0, d9a16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d99f8:	4669      	mov	r1, sp
   d99fa:	a803      	add	r0, sp, #12
   d99fc:	f7fc f917 	bl	d5c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9a00:	aa03      	add	r2, sp, #12
   d9a02:	4631      	mov	r1, r6
   d9a04:	4628      	mov	r0, r5
   d9a06:	f7ff ffc9 	bl	d999c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9a0a:	a803      	add	r0, sp, #12
   d9a0c:	f7fc f8ce 	bl	d5bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d9a10:	4b18      	ldr	r3, [pc, #96]	; (d9a74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d9a12:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d9a14:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d9a16:	4668      	mov	r0, sp
   d9a18:	f7fc f8c8 	bl	d5bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9a1c:	462c      	mov	r4, r5
}
   d9a1e:	4620      	mov	r0, r4
   d9a20:	b007      	add	sp, #28
   d9a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d9a24:	4914      	ldr	r1, [pc, #80]	; (d9a78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d9a26:	4638      	mov	r0, r7
   d9a28:	f002 f8dd 	bl	dbbe6 <strcmp>
   d9a2c:	b9e0      	cbnz	r0, d9a68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d9a2e:	2c00      	cmp	r4, #0
   d9a30:	d0f5      	beq.n	d9a1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d9a32:	4629      	mov	r1, r5
   d9a34:	4668      	mov	r0, sp
   d9a36:	f7ff fc69 	bl	d930c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d9a3a:	490d      	ldr	r1, [pc, #52]	; (d9a70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d9a3c:	2024      	movs	r0, #36	; 0x24
   d9a3e:	f001 fac0 	bl	dafc2 <_ZnwjRKSt9nothrow_t>
   d9a42:	4605      	mov	r5, r0
   d9a44:	2800      	cmp	r0, #0
   d9a46:	d0e6      	beq.n	d9a16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d9a48:	4669      	mov	r1, sp
   d9a4a:	a803      	add	r0, sp, #12
   d9a4c:	f7fc f8ef 	bl	d5c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9a50:	aa03      	add	r2, sp, #12
   d9a52:	4631      	mov	r1, r6
   d9a54:	4628      	mov	r0, r5
   d9a56:	f7ff ffa1 	bl	d999c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9a5a:	a803      	add	r0, sp, #12
   d9a5c:	f7fc f8a6 	bl	d5bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9a60:	4b06      	ldr	r3, [pc, #24]	; (d9a7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d9a62:	602b      	str	r3, [r5, #0]
   d9a64:	622c      	str	r4, [r5, #32]
}
   d9a66:	e7d6      	b.n	d9a16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d9a68:	2400      	movs	r4, #0
   d9a6a:	e7d8      	b.n	d9a1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d9a6c:	000de5a6 	.word	0x000de5a6
   d9a70:	000de76c 	.word	0x000de76c
   d9a74:	000de638 	.word	0x000de638
   d9a78:	000de5aa 	.word	0x000de5aa
   d9a7c:	000de620 	.word	0x000de620

000d9a80 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d9a80:	4b01      	ldr	r3, [pc, #4]	; (d9a88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9a82:	4a02      	ldr	r2, [pc, #8]	; (d9a8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9a84:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d9a86:	4770      	bx	lr
   d9a88:	2003e5e0 	.word	0x2003e5e0
   d9a8c:	000de5bb 	.word	0x000de5bb

000d9a90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9a94:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d9a96:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9a9a:	4604      	mov	r4, r0
   d9a9c:	460e      	mov	r6, r1
   d9a9e:	4617      	mov	r7, r2
   d9aa0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d9aa2:	f001 f8a1 	bl	dabe8 <_Z16_fetch_usbserialv>
   d9aa6:	4581      	cmp	r9, r0
   d9aa8:	d04c      	beq.n	d9b44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d9aaa:	792b      	ldrb	r3, [r5, #4]
   d9aac:	0719      	lsls	r1, r3, #28
   d9aae:	d504      	bpl.n	d9aba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d9ab0:	696a      	ldr	r2, [r5, #20]
   d9ab2:	4954      	ldr	r1, [pc, #336]	; (d9c04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d9ab4:	4620      	mov	r0, r4
   d9ab6:	f7ff fa3a 	bl	d8f2e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d9aba:	f1b8 0f00 	cmp.w	r8, #0
   d9abe:	d00d      	beq.n	d9adc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d9ac0:	215b      	movs	r1, #91	; 0x5b
   d9ac2:	4620      	mov	r0, r4
   d9ac4:	f7ff fa27 	bl	d8f16 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d9ac8:	4641      	mov	r1, r8
   d9aca:	4620      	mov	r0, r4
   d9acc:	f7ff fa14 	bl	d8ef8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d9ad0:	6823      	ldr	r3, [r4, #0]
   d9ad2:	494d      	ldr	r1, [pc, #308]	; (d9c08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d9ad4:	68db      	ldr	r3, [r3, #12]
   d9ad6:	2202      	movs	r2, #2
   d9ad8:	4620      	mov	r0, r4
   d9ada:	4798      	blx	r3
    if (attr.has_file) {
   d9adc:	792b      	ldrb	r3, [r5, #4]
   d9ade:	07da      	lsls	r2, r3, #31
   d9ae0:	d523      	bpl.n	d9b2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d9ae2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d9ae6:	212f      	movs	r1, #47	; 0x2f
   d9ae8:	4640      	mov	r0, r8
   d9aea:	f002 f8d9 	bl	dbca0 <strrchr>
    if (s1) {
   d9aee:	b108      	cbz	r0, d9af4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d9af0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d9af4:	4641      	mov	r1, r8
   d9af6:	4620      	mov	r0, r4
   d9af8:	f7ff f9fe 	bl	d8ef8 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d9afc:	792b      	ldrb	r3, [r5, #4]
   d9afe:	079b      	lsls	r3, r3, #30
   d9b00:	d508      	bpl.n	d9b14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d9b02:	213a      	movs	r1, #58	; 0x3a
   d9b04:	4620      	mov	r0, r4
   d9b06:	f7ff fa06 	bl	d8f16 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d9b0a:	68ea      	ldr	r2, [r5, #12]
   d9b0c:	493f      	ldr	r1, [pc, #252]	; (d9c0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d9b0e:	4620      	mov	r0, r4
   d9b10:	f7ff fa0d 	bl	d8f2e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d9b14:	792a      	ldrb	r2, [r5, #4]
   d9b16:	6823      	ldr	r3, [r4, #0]
   d9b18:	f012 0f04 	tst.w	r2, #4
   d9b1c:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d9b1e:	bf14      	ite	ne
   d9b20:	493b      	ldrne	r1, [pc, #236]	; (d9c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d9b22:	493c      	ldreq	r1, [pc, #240]	; (d9c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d9b24:	2202      	movs	r2, #2
            write(": ", 2);
   d9b26:	4620      	mov	r0, r4
   d9b28:	4798      	blx	r3
    if (attr.has_function) {
   d9b2a:	792b      	ldrb	r3, [r5, #4]
   d9b2c:	0758      	lsls	r0, r3, #29
   d9b2e:	d51d      	bpl.n	d9b6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9b30:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d9b32:	460b      	mov	r3, r1
   d9b34:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d9b36:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9b3a:	b160      	cbz	r0, d9b56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d9b3c:	2820      	cmp	r0, #32
   d9b3e:	d108      	bne.n	d9b52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d9b40:	4619      	mov	r1, r3
   d9b42:	e7f7      	b.n	d9b34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d9b44:	4834      	ldr	r0, [pc, #208]	; (d9c18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d9b46:	f000 f966 	bl	d9e16 <_ZN5spark12NetworkClass9listeningEv>
   d9b4a:	2800      	cmp	r0, #0
   d9b4c:	d0ad      	beq.n	d9aaa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d9b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d9b52:	2828      	cmp	r0, #40	; 0x28
   d9b54:	d1ee      	bne.n	d9b34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d9b56:	6823      	ldr	r3, [r4, #0]
   d9b58:	1a52      	subs	r2, r2, r1
   d9b5a:	68db      	ldr	r3, [r3, #12]
   d9b5c:	4620      	mov	r0, r4
   d9b5e:	4798      	blx	r3
        write("(): ", 4);
   d9b60:	6823      	ldr	r3, [r4, #0]
   d9b62:	492e      	ldr	r1, [pc, #184]	; (d9c1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d9b64:	68db      	ldr	r3, [r3, #12]
   d9b66:	2204      	movs	r2, #4
   d9b68:	4620      	mov	r0, r4
   d9b6a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d9b6c:	2100      	movs	r1, #0
   d9b6e:	4638      	mov	r0, r7
   d9b70:	f7fd fefe 	bl	d7970 <log_level_name>
   d9b74:	4601      	mov	r1, r0
    write(s);
   d9b76:	4620      	mov	r0, r4
   d9b78:	f7ff f9be 	bl	d8ef8 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d9b7c:	6823      	ldr	r3, [r4, #0]
   d9b7e:	4925      	ldr	r1, [pc, #148]	; (d9c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d9b80:	68db      	ldr	r3, [r3, #12]
   d9b82:	2202      	movs	r2, #2
   d9b84:	4620      	mov	r0, r4
   d9b86:	4798      	blx	r3
    if (msg) {
   d9b88:	b11e      	cbz	r6, d9b92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d9b8a:	4631      	mov	r1, r6
   d9b8c:	4620      	mov	r0, r4
   d9b8e:	f7ff f9b3 	bl	d8ef8 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d9b92:	792b      	ldrb	r3, [r5, #4]
   d9b94:	f013 0f30 	tst.w	r3, #48	; 0x30
   d9b98:	d02c      	beq.n	d9bf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d9b9a:	6823      	ldr	r3, [r4, #0]
   d9b9c:	4920      	ldr	r1, [pc, #128]	; (d9c20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d9b9e:	68db      	ldr	r3, [r3, #12]
   d9ba0:	2202      	movs	r2, #2
   d9ba2:	4620      	mov	r0, r4
   d9ba4:	4798      	blx	r3
        if (attr.has_code) {
   d9ba6:	792b      	ldrb	r3, [r5, #4]
   d9ba8:	06d9      	lsls	r1, r3, #27
   d9baa:	d50a      	bpl.n	d9bc2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d9bac:	6823      	ldr	r3, [r4, #0]
   d9bae:	491d      	ldr	r1, [pc, #116]	; (d9c24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9bb0:	68db      	ldr	r3, [r3, #12]
   d9bb2:	2207      	movs	r2, #7
   d9bb4:	4620      	mov	r0, r4
   d9bb6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d9bb8:	69aa      	ldr	r2, [r5, #24]
   d9bba:	491b      	ldr	r1, [pc, #108]	; (d9c28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d9bbc:	4620      	mov	r0, r4
   d9bbe:	f7ff f9b6 	bl	d8f2e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d9bc2:	792b      	ldrb	r3, [r5, #4]
   d9bc4:	069a      	lsls	r2, r3, #26
   d9bc6:	d511      	bpl.n	d9bec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d9bc8:	06db      	lsls	r3, r3, #27
   d9bca:	d505      	bpl.n	d9bd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d9bcc:	6823      	ldr	r3, [r4, #0]
   d9bce:	4910      	ldr	r1, [pc, #64]	; (d9c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d9bd0:	68db      	ldr	r3, [r3, #12]
   d9bd2:	2202      	movs	r2, #2
   d9bd4:	4620      	mov	r0, r4
   d9bd6:	4798      	blx	r3
            write("details = ", 10);
   d9bd8:	6823      	ldr	r3, [r4, #0]
   d9bda:	4914      	ldr	r1, [pc, #80]	; (d9c2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d9bdc:	68db      	ldr	r3, [r3, #12]
   d9bde:	4620      	mov	r0, r4
   d9be0:	220a      	movs	r2, #10
   d9be2:	4798      	blx	r3
            write(attr.details);
   d9be4:	69e9      	ldr	r1, [r5, #28]
   d9be6:	4620      	mov	r0, r4
   d9be8:	f7ff f986 	bl	d8ef8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d9bec:	215d      	movs	r1, #93	; 0x5d
   d9bee:	4620      	mov	r0, r4
   d9bf0:	f7ff f991 	bl	d8f16 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d9bf4:	6823      	ldr	r3, [r4, #0]
   d9bf6:	490e      	ldr	r1, [pc, #56]	; (d9c30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d9bf8:	68db      	ldr	r3, [r3, #12]
   d9bfa:	4620      	mov	r0, r4
   d9bfc:	2202      	movs	r2, #2
}
   d9bfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d9c02:	4718      	bx	r3
   d9c04:	000de5bf 	.word	0x000de5bf
   d9c08:	000de5c6 	.word	0x000de5c6
   d9c0c:	000de16c 	.word	0x000de16c
   d9c10:	000de5c9 	.word	0x000de5c9
   d9c14:	000de5ce 	.word	0x000de5ce
   d9c18:	2003e60c 	.word	0x2003e60c
   d9c1c:	000de5cc 	.word	0x000de5cc
   d9c20:	000de5d1 	.word	0x000de5d1
   d9c24:	000de5d4 	.word	0x000de5d4
   d9c28:	000ddb79 	.word	0x000ddb79
   d9c2c:	000de5dc 	.word	0x000de5dc
   d9c30:	000de5e7 	.word	0x000de5e7

000d9c34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9c38:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d9c3a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9c3e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d9c40:	4605      	mov	r5, r0
   d9c42:	460f      	mov	r7, r1
   d9c44:	4690      	mov	r8, r2
   d9c46:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d9c48:	f000 ffce 	bl	dabe8 <_Z16_fetch_usbserialv>
   d9c4c:	4581      	cmp	r9, r0
   d9c4e:	d105      	bne.n	d9c5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d9c50:	4849      	ldr	r0, [pc, #292]	; (d9d78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d9c52:	f000 f8e0 	bl	d9e16 <_ZN5spark12NetworkClass9listeningEv>
   d9c56:	2800      	cmp	r0, #0
   d9c58:	f040 808a 	bne.w	d9d70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d9c5c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d9c5e:	4a47      	ldr	r2, [pc, #284]	; (d9d7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d9c60:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d9c62:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d9c66:	a801      	add	r0, sp, #4
        strm_(stream) {
   d9c68:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d9c6a:	f88d 9008 	strb.w	r9, [sp, #8]
   d9c6e:	f7ff f838 	bl	d8ce2 <_ZN5spark10JSONWriter11beginObjectEv>
   d9c72:	4649      	mov	r1, r9
   d9c74:	4640      	mov	r0, r8
   d9c76:	f7fd fe7b 	bl	d7970 <log_level_name>
    json.name("l", 1).value(s);
   d9c7a:	4941      	ldr	r1, [pc, #260]	; (d9d80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d9c7c:	4680      	mov	r8, r0
   d9c7e:	2201      	movs	r2, #1
   d9c80:	a801      	add	r0, sp, #4
   d9c82:	f7ff f8b7 	bl	d8df4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9c86:	4641      	mov	r1, r8
   d9c88:	f7ff f928 	bl	d8edc <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d9c8c:	b13f      	cbz	r7, d9c9e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d9c8e:	493d      	ldr	r1, [pc, #244]	; (d9d84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d9c90:	2201      	movs	r2, #1
   d9c92:	a801      	add	r0, sp, #4
   d9c94:	f7ff f8ae 	bl	d8df4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9c98:	4639      	mov	r1, r7
   d9c9a:	f7ff f91f 	bl	d8edc <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d9c9e:	b13e      	cbz	r6, d9cb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d9ca0:	4939      	ldr	r1, [pc, #228]	; (d9d88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d9ca2:	2201      	movs	r2, #1
   d9ca4:	a801      	add	r0, sp, #4
   d9ca6:	f7ff f8a5 	bl	d8df4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9caa:	4631      	mov	r1, r6
   d9cac:	f7ff f916 	bl	d8edc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d9cb0:	7923      	ldrb	r3, [r4, #4]
   d9cb2:	07df      	lsls	r7, r3, #31
   d9cb4:	d50e      	bpl.n	d9cd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d9cb6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d9cb8:	212f      	movs	r1, #47	; 0x2f
   d9cba:	4630      	mov	r0, r6
   d9cbc:	f001 fff0 	bl	dbca0 <strrchr>
    if (s1) {
   d9cc0:	b100      	cbz	r0, d9cc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d9cc2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d9cc4:	4931      	ldr	r1, [pc, #196]	; (d9d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d9cc6:	2201      	movs	r2, #1
   d9cc8:	a801      	add	r0, sp, #4
   d9cca:	f7ff f893 	bl	d8df4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9cce:	4631      	mov	r1, r6
   d9cd0:	f7ff f904 	bl	d8edc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d9cd4:	7923      	ldrb	r3, [r4, #4]
   d9cd6:	079e      	lsls	r6, r3, #30
   d9cd8:	d507      	bpl.n	d9cea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d9cda:	492d      	ldr	r1, [pc, #180]	; (d9d90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d9cdc:	2202      	movs	r2, #2
   d9cde:	a801      	add	r0, sp, #4
   d9ce0:	f7ff f888 	bl	d8df4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9ce4:	68e1      	ldr	r1, [r4, #12]
   d9ce6:	f7ff f809 	bl	d8cfc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d9cea:	7923      	ldrb	r3, [r4, #4]
   d9cec:	0758      	lsls	r0, r3, #29
   d9cee:	d514      	bpl.n	d9d1a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9cf0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d9cf2:	4633      	mov	r3, r6
   d9cf4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d9cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9cfa:	b12a      	cbz	r2, d9d08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d9cfc:	2a20      	cmp	r2, #32
   d9cfe:	d101      	bne.n	d9d04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d9d00:	461e      	mov	r6, r3
   d9d02:	e7f7      	b.n	d9cf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d9d04:	2a28      	cmp	r2, #40	; 0x28
   d9d06:	d1f5      	bne.n	d9cf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d9d08:	4922      	ldr	r1, [pc, #136]	; (d9d94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d9d0a:	2202      	movs	r2, #2
   d9d0c:	a801      	add	r0, sp, #4
   d9d0e:	f7ff f871 	bl	d8df4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d12:	1bba      	subs	r2, r7, r6
   d9d14:	4631      	mov	r1, r6
   d9d16:	f7ff f87d 	bl	d8e14 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d9d1a:	7923      	ldrb	r3, [r4, #4]
   d9d1c:	0719      	lsls	r1, r3, #28
   d9d1e:	d507      	bpl.n	d9d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d9d20:	491d      	ldr	r1, [pc, #116]	; (d9d98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d9d22:	2201      	movs	r2, #1
   d9d24:	a801      	add	r0, sp, #4
   d9d26:	f7ff f865 	bl	d8df4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d2a:	6961      	ldr	r1, [r4, #20]
   d9d2c:	f7fe fff8 	bl	d8d20 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d9d30:	7923      	ldrb	r3, [r4, #4]
   d9d32:	06da      	lsls	r2, r3, #27
   d9d34:	d508      	bpl.n	d9d48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d9d36:	2204      	movs	r2, #4
   d9d38:	4918      	ldr	r1, [pc, #96]	; (d9d9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d9d3a:	eb0d 0002 	add.w	r0, sp, r2
   d9d3e:	f7ff f859 	bl	d8df4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d42:	69a1      	ldr	r1, [r4, #24]
   d9d44:	f7fe ffda 	bl	d8cfc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d9d48:	7923      	ldrb	r3, [r4, #4]
   d9d4a:	069b      	lsls	r3, r3, #26
   d9d4c:	d507      	bpl.n	d9d5e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d9d4e:	4914      	ldr	r1, [pc, #80]	; (d9da0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d9d50:	2206      	movs	r2, #6
   d9d52:	a801      	add	r0, sp, #4
   d9d54:	f7ff f84e 	bl	d8df4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9d58:	69e1      	ldr	r1, [r4, #28]
   d9d5a:	f7ff f8bf 	bl	d8edc <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d9d5e:	a801      	add	r0, sp, #4
   d9d60:	f7fe ffa9 	bl	d8cb6 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d9d64:	6a28      	ldr	r0, [r5, #32]
   d9d66:	490f      	ldr	r1, [pc, #60]	; (d9da4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d9d68:	6803      	ldr	r3, [r0, #0]
   d9d6a:	2202      	movs	r2, #2
   d9d6c:	68db      	ldr	r3, [r3, #12]
   d9d6e:	4798      	blx	r3
}
   d9d70:	b005      	add	sp, #20
   d9d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9d76:	bf00      	nop
   d9d78:	2003e60c 	.word	0x2003e60c
   d9d7c:	000de608 	.word	0x000de608
   d9d80:	000de59c 	.word	0x000de59c
   d9d84:	000de5ea 	.word	0x000de5ea
   d9d88:	000de38c 	.word	0x000de38c
   d9d8c:	000de0d3 	.word	0x000de0d3
   d9d90:	000de5ec 	.word	0x000de5ec
   d9d94:	000de5ef 	.word	0x000de5ef
   d9d98:	000ddf66 	.word	0x000ddf66
   d9d9c:	000de5f2 	.word	0x000de5f2
   d9da0:	000de5f7 	.word	0x000de5f7
   d9da4:	000de5e7 	.word	0x000de5e7

000d9da8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9da8:	2300      	movs	r3, #0
   d9daa:	6840      	ldr	r0, [r0, #4]
   d9dac:	461a      	mov	r2, r3
   d9dae:	f7fd beeb 	b.w	d7b88 <network_connect>

000d9db2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9db2:	6840      	ldr	r0, [r0, #4]
   d9db4:	2200      	movs	r2, #0
   d9db6:	2102      	movs	r1, #2
   d9db8:	f7fd bef6 	b.w	d7ba8 <network_disconnect>

000d9dbc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9dbc:	2200      	movs	r2, #0
   d9dbe:	6840      	ldr	r0, [r0, #4]
   d9dc0:	4611      	mov	r1, r2
   d9dc2:	f7fd bee9 	b.w	d7b98 <network_connecting>

000d9dc6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9dc6:	2200      	movs	r2, #0
   d9dc8:	6840      	ldr	r0, [r0, #4]
   d9dca:	4611      	mov	r1, r2
   d9dcc:	f7fd bef4 	b.w	d7bb8 <network_ready>

000d9dd0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9dd0:	2300      	movs	r3, #0
   d9dd2:	6840      	ldr	r0, [r0, #4]
   d9dd4:	461a      	mov	r2, r3
   d9dd6:	4619      	mov	r1, r3
   d9dd8:	f7fd bef6 	b.w	d7bc8 <network_on>

000d9ddc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9ddc:	2300      	movs	r3, #0
   d9dde:	6840      	ldr	r0, [r0, #4]
   d9de0:	461a      	mov	r2, r3
   d9de2:	4619      	mov	r1, r3
   d9de4:	f7fd bef8 	b.w	d7bd8 <network_off>

000d9de8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9de8:	6840      	ldr	r0, [r0, #4]
   d9dea:	2100      	movs	r1, #0
   d9dec:	f7fd bf1c 	b.w	d7c28 <network_is_on>

000d9df0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9df0:	6840      	ldr	r0, [r0, #4]
   d9df2:	2100      	movs	r1, #0
   d9df4:	f7fd bf20 	b.w	d7c38 <network_is_off>

000d9df8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9df8:	6840      	ldr	r0, [r0, #4]
   d9dfa:	2200      	movs	r2, #0
   d9dfc:	f081 0101 	eor.w	r1, r1, #1
   d9e00:	f7fd bef2 	b.w	d7be8 <network_listen>

000d9e04 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9e04:	6840      	ldr	r0, [r0, #4]
   d9e06:	2200      	movs	r2, #0
   d9e08:	f7fd befe 	b.w	d7c08 <network_set_listen_timeout>

000d9e0c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9e0c:	2200      	movs	r2, #0
   d9e0e:	6840      	ldr	r0, [r0, #4]
   d9e10:	4611      	mov	r1, r2
   d9e12:	f7fd bf01 	b.w	d7c18 <network_get_listen_timeout>

000d9e16 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9e16:	2200      	movs	r2, #0
   d9e18:	6840      	ldr	r0, [r0, #4]
   d9e1a:	4611      	mov	r1, r2
   d9e1c:	f7fd beec 	b.w	d7bf8 <network_listening>

000d9e20 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9e24:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9e26:	b095      	sub	sp, #84	; 0x54
   d9e28:	4616      	mov	r6, r2
   d9e2a:	460d      	mov	r5, r1
   d9e2c:	4607      	mov	r7, r0
    IPAddress addr;
   d9e2e:	f7fe fde3 	bl	d89f8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9e32:	4621      	mov	r1, r4
   d9e34:	2218      	movs	r2, #24
   d9e36:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9e38:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9e3a:	f001 fe91 	bl	dbb60 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9e3e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9e40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9e44:	4621      	mov	r1, r4
   d9e46:	466b      	mov	r3, sp
   d9e48:	aa0c      	add	r2, sp, #48	; 0x30
   d9e4a:	4630      	mov	r0, r6
   d9e4c:	f7fd fcd0 	bl	d77f0 <netdb_getaddrinfo>
    if (!r) {
   d9e50:	4604      	mov	r4, r0
   d9e52:	2800      	cmp	r0, #0
   d9e54:	d146      	bne.n	d9ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9e56:	4602      	mov	r2, r0
   d9e58:	2101      	movs	r1, #1
   d9e5a:	6868      	ldr	r0, [r5, #4]
   d9e5c:	f7fd feac 	bl	d7bb8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9e60:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9e62:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9e64:	4622      	mov	r2, r4
   d9e66:	6868      	ldr	r0, [r5, #4]
   d9e68:	f7fd fea6 	bl	d7bb8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9e6c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9e6e:	4681      	mov	r9, r0
        bool ok = false;
   d9e70:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9e72:	2e00      	cmp	r6, #0
   d9e74:	d036      	beq.n	d9ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9e76:	2900      	cmp	r1, #0
   d9e78:	d134      	bne.n	d9ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9e7a:	6873      	ldr	r3, [r6, #4]
   d9e7c:	2b02      	cmp	r3, #2
   d9e7e:	d003      	beq.n	d9e88 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9e80:	2b0a      	cmp	r3, #10
   d9e82:	d00b      	beq.n	d9e9c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9e84:	69f6      	ldr	r6, [r6, #28]
   d9e86:	e7f4      	b.n	d9e72 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9e88:	f1b8 0f00 	cmp.w	r8, #0
   d9e8c:	d004      	beq.n	d9e98 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9e8e:	6971      	ldr	r1, [r6, #20]
   d9e90:	4638      	mov	r0, r7
   d9e92:	3104      	adds	r1, #4
   d9e94:	f7fe fddd 	bl	d8a52 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9e98:	4641      	mov	r1, r8
   d9e9a:	e7f3      	b.n	d9e84 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9e9c:	f1b9 0f00 	cmp.w	r9, #0
   d9ea0:	d101      	bne.n	d9ea6 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9ea2:	4649      	mov	r1, r9
   d9ea4:	e7ee      	b.n	d9e84 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9ea6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9ea8:	2210      	movs	r2, #16
   d9eaa:	a801      	add	r0, sp, #4
   d9eac:	f001 fe58 	bl	dbb60 <memset>
                    a.v = 6;
   d9eb0:	2306      	movs	r3, #6
   d9eb2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9eb6:	ad01      	add	r5, sp, #4
   d9eb8:	f104 0308 	add.w	r3, r4, #8
   d9ebc:	3418      	adds	r4, #24
   d9ebe:	6818      	ldr	r0, [r3, #0]
   d9ec0:	6859      	ldr	r1, [r3, #4]
   d9ec2:	462a      	mov	r2, r5
   d9ec4:	c203      	stmia	r2!, {r0, r1}
   d9ec6:	3308      	adds	r3, #8
   d9ec8:	42a3      	cmp	r3, r4
   d9eca:	4615      	mov	r5, r2
   d9ecc:	d1f7      	bne.n	d9ebe <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9ece:	a901      	add	r1, sp, #4
   d9ed0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9ed2:	ad07      	add	r5, sp, #28
   d9ed4:	f7fe fd9e 	bl	d8a14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9eda:	1d3c      	adds	r4, r7, #4
   d9edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9ede:	682b      	ldr	r3, [r5, #0]
   d9ee0:	7023      	strb	r3, [r4, #0]
   d9ee2:	e7de      	b.n	d9ea2 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9ee4:	9800      	ldr	r0, [sp, #0]
   d9ee6:	f7fd fc7b 	bl	d77e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9eea:	4638      	mov	r0, r7
   d9eec:	b015      	add	sp, #84	; 0x54
   d9eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9ef4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9ef4:	4b02      	ldr	r3, [pc, #8]	; (d9f00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9ef6:	4a03      	ldr	r2, [pc, #12]	; (d9f04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9ef8:	601a      	str	r2, [r3, #0]
   d9efa:	2200      	movs	r2, #0
   d9efc:	605a      	str	r2, [r3, #4]

} // spark
   d9efe:	4770      	bx	lr
   d9f00:	2003e60c 	.word	0x2003e60c
   d9f04:	000de680 	.word	0x000de680

000d9f08 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d9f08:	b508      	push	{r3, lr}
            return &Wire1;
   d9f0a:	f001 f82b 	bl	daf64 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d9f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d9f12:	f7fe bd25 	b.w	d8960 <_ZN7TwoWire4lockEv>

000d9f16 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d9f16:	b510      	push	{r4, lr}
   d9f18:	4604      	mov	r4, r0
    lock_(_lock)
   d9f1a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d9f1c:	b109      	cbz	r1, d9f22 <_ZN4PMICC1Eb+0xc>
        lock();
   d9f1e:	f7ff fff3 	bl	d9f08 <_ZN4PMIC4lockEv.constprop.0>
}
   d9f22:	4620      	mov	r0, r4
   d9f24:	bd10      	pop	{r4, pc}

000d9f26 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d9f26:	b508      	push	{r3, lr}
            return &Wire1;
   d9f28:	f001 f81c 	bl	daf64 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d9f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d9f30:	f7fe bd1f 	b.w	d8972 <_ZN7TwoWire6unlockEv>

000d9f34 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d9f34:	b510      	push	{r4, lr}
    if (lock_) {
   d9f36:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d9f38:	4604      	mov	r4, r0
    if (lock_) {
   d9f3a:	b10b      	cbz	r3, d9f40 <_ZN4PMICD1Ev+0xc>
        unlock();
   d9f3c:	f7ff fff3 	bl	d9f26 <_ZN4PMIC6unlockEv>
}
   d9f40:	4620      	mov	r0, r4
   d9f42:	bd10      	pop	{r4, pc}

000d9f44 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d9f44:	b510      	push	{r4, lr}
   d9f46:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d9f48:	6800      	ldr	r0, [r0, #0]
   d9f4a:	f7ff ffec 	bl	d9f26 <_ZN4PMIC6unlockEv>
   d9f4e:	4620      	mov	r0, r4
   d9f50:	bd10      	pop	{r4, pc}

000d9f52 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d9f52:	b530      	push	{r4, r5, lr}
   d9f54:	b087      	sub	sp, #28
   d9f56:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9f58:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9f5a:	f7ff ffd5 	bl	d9f08 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9f5e:	236b      	movs	r3, #107	; 0x6b
   d9f60:	f88d 3008 	strb.w	r3, [sp, #8]
   d9f64:	2300      	movs	r3, #0
   d9f66:	2401      	movs	r4, #1
   d9f68:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d9f6a:	230a      	movs	r3, #10
   d9f6c:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9f6e:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d9f72:	f000 fff7 	bl	daf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9f76:	a902      	add	r1, sp, #8
   d9f78:	f7fe fcd6 	bl	d8928 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9f7c:	f000 fff2 	bl	daf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d9f80:	6803      	ldr	r3, [r0, #0]
   d9f82:	4629      	mov	r1, r5
   d9f84:	689b      	ldr	r3, [r3, #8]
   d9f86:	4798      	blx	r3
            return &Wire1;
   d9f88:	f000 ffec 	bl	daf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9f8c:	4621      	mov	r1, r4
   d9f8e:	f7fe fce3 	bl	d8958 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d9f92:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d9f94:	f000 ffe6 	bl	daf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d9f98:	a902      	add	r1, sp, #8
   d9f9a:	f7fe fc95 	bl	d88c8 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d9f9e:	f000 ffe1 	bl	daf64 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d9fa2:	6803      	ldr	r3, [r0, #0]
   d9fa4:	695b      	ldr	r3, [r3, #20]
   d9fa6:	4798      	blx	r3
   d9fa8:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d9faa:	a801      	add	r0, sp, #4
   d9fac:	f7ff ffca 	bl	d9f44 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9fb0:	b2e0      	uxtb	r0, r4
   d9fb2:	b007      	add	sp, #28
   d9fb4:	bd30      	pop	{r4, r5, pc}

000d9fb6 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d9fb6:	b570      	push	{r4, r5, r6, lr}
   d9fb8:	b086      	sub	sp, #24
   d9fba:	4614      	mov	r4, r2
   d9fbc:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9fbe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9fc0:	f7ff ffa2 	bl	d9f08 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9fc4:	236b      	movs	r3, #107	; 0x6b
   d9fc6:	f88d 3008 	strb.w	r3, [sp, #8]
   d9fca:	2300      	movs	r3, #0
   d9fcc:	9303      	str	r3, [sp, #12]
   d9fce:	2601      	movs	r6, #1
    timeout_ = ms;
   d9fd0:	230a      	movs	r3, #10
   d9fd2:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9fd4:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d9fd8:	f000 ffc4 	bl	daf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9fdc:	a902      	add	r1, sp, #8
   d9fde:	f7fe fca3 	bl	d8928 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9fe2:	f000 ffbf 	bl	daf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d9fe6:	6803      	ldr	r3, [r0, #0]
   d9fe8:	4629      	mov	r1, r5
   d9fea:	689b      	ldr	r3, [r3, #8]
   d9fec:	4798      	blx	r3
            return &Wire1;
   d9fee:	f000 ffb9 	bl	daf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d9ff2:	6803      	ldr	r3, [r0, #0]
   d9ff4:	4621      	mov	r1, r4
   d9ff6:	689b      	ldr	r3, [r3, #8]
   d9ff8:	4798      	blx	r3
            return &Wire1;
   d9ffa:	f000 ffb3 	bl	daf64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9ffe:	4631      	mov	r1, r6
   da000:	f7fe fcaa 	bl	d8958 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   da004:	a801      	add	r0, sp, #4
   da006:	f7ff ff9d 	bl	d9f44 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da00a:	b006      	add	sp, #24
   da00c:	bd70      	pop	{r4, r5, r6, pc}

000da00e <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   da00e:	b513      	push	{r0, r1, r4, lr}
   da010:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da012:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da014:	f7ff ff78 	bl	d9f08 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da018:	2101      	movs	r1, #1
   da01a:	4620      	mov	r0, r4
   da01c:	f7ff ff99 	bl	d9f52 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   da020:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   da024:	f040 0210 	orr.w	r2, r0, #16
   da028:	2101      	movs	r1, #1
   da02a:	4620      	mov	r0, r4
   da02c:	f7ff ffc3 	bl	d9fb6 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da030:	a801      	add	r0, sp, #4
   da032:	f7ff ff87 	bl	d9f44 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da036:	2001      	movs	r0, #1
   da038:	b002      	add	sp, #8
   da03a:	bd10      	pop	{r4, pc}

000da03c <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   da03c:	b513      	push	{r0, r1, r4, lr}
   da03e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da040:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da042:	f7ff ff61 	bl	d9f08 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da046:	2101      	movs	r1, #1
   da048:	4620      	mov	r0, r4
   da04a:	f7ff ff82 	bl	d9f52 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   da04e:	2101      	movs	r1, #1
   da050:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   da054:	4620      	mov	r0, r4
   da056:	f7ff ffae 	bl	d9fb6 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da05a:	a801      	add	r0, sp, #4
   da05c:	f7ff ff72 	bl	d9f44 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da060:	2001      	movs	r0, #1
   da062:	b002      	add	sp, #8
   da064:	bd10      	pop	{r4, pc}

000da066 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da068:	4606      	mov	r6, r0
   da06a:	460d      	mov	r5, r1
  size_t n = 0;
   da06c:	188f      	adds	r7, r1, r2
   da06e:	2400      	movs	r4, #0
  while (size--) {
   da070:	42bd      	cmp	r5, r7
   da072:	d00c      	beq.n	da08e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da074:	6833      	ldr	r3, [r6, #0]
   da076:	f815 1b01 	ldrb.w	r1, [r5], #1
   da07a:	689b      	ldr	r3, [r3, #8]
   da07c:	4630      	mov	r0, r6
   da07e:	4798      	blx	r3
     if (chunk>=0)
   da080:	1e03      	subs	r3, r0, #0
   da082:	db01      	blt.n	da088 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da084:	441c      	add	r4, r3
  while (size--) {
   da086:	e7f3      	b.n	da070 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da088:	2c00      	cmp	r4, #0
   da08a:	bf08      	it	eq
   da08c:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   da08e:	4620      	mov	r0, r4
   da090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da092 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   da092:	b513      	push	{r0, r1, r4, lr}
   da094:	4604      	mov	r4, r0
    }
   da096:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   da098:	b159      	cbz	r1, da0b2 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   da09a:	9101      	str	r1, [sp, #4]
   da09c:	f001 fdd3 	bl	dbc46 <strlen>
   da0a0:	6823      	ldr	r3, [r4, #0]
   da0a2:	9901      	ldr	r1, [sp, #4]
   da0a4:	68db      	ldr	r3, [r3, #12]
   da0a6:	4602      	mov	r2, r0
   da0a8:	4620      	mov	r0, r4
    }
   da0aa:	b002      	add	sp, #8
   da0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   da0b0:	4718      	bx	r3
    }
   da0b2:	b002      	add	sp, #8
   da0b4:	bd10      	pop	{r4, pc}

000da0b6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da0b6:	6803      	ldr	r3, [r0, #0]
   da0b8:	689b      	ldr	r3, [r3, #8]
   da0ba:	4718      	bx	r3

000da0bc <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da0bc:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da0be:	210d      	movs	r1, #13
{
   da0c0:	4605      	mov	r5, r0
  size_t n = print('\r');
   da0c2:	f7ff fff8 	bl	da0b6 <_ZN5Print5printEc>
  n += print('\n');
   da0c6:	210a      	movs	r1, #10
  size_t n = print('\r');
   da0c8:	4604      	mov	r4, r0
  n += print('\n');
   da0ca:	4628      	mov	r0, r5
   da0cc:	f7ff fff3 	bl	da0b6 <_ZN5Print5printEc>
  return n;
}
   da0d0:	4420      	add	r0, r4
   da0d2:	bd38      	pop	{r3, r4, r5, pc}

000da0d4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   da0d4:	b538      	push	{r3, r4, r5, lr}
   da0d6:	4605      	mov	r5, r0
  return write(str);
   da0d8:	f7ff ffdb 	bl	da092 <_ZN5Print5writeEPKc>
   da0dc:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   da0de:	4628      	mov	r0, r5
   da0e0:	f7ff ffec 	bl	da0bc <_ZN5Print7printlnEv>
  return n;
}
   da0e4:	4420      	add	r0, r4
   da0e6:	bd38      	pop	{r3, r4, r5, pc}

000da0e8 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da0e8:	b530      	push	{r4, r5, lr}
   da0ea:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da0ec:	2300      	movs	r3, #0
   da0ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da0f2:	2a01      	cmp	r2, #1
   da0f4:	bf98      	it	ls
   da0f6:	220a      	movls	r2, #10
   da0f8:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   da0fa:	460d      	mov	r5, r1
   da0fc:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   da100:	fb01 5312 	mls	r3, r1, r2, r5
   da104:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da108:	2b09      	cmp	r3, #9
   da10a:	bf94      	ite	ls
   da10c:	3330      	addls	r3, #48	; 0x30
   da10e:	3337      	addhi	r3, #55	; 0x37
   da110:	b2db      	uxtb	r3, r3
  } while(n);
   da112:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da114:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   da118:	d9ef      	bls.n	da0fa <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   da11a:	4621      	mov	r1, r4
   da11c:	f7ff ffb9 	bl	da092 <_ZN5Print5writeEPKc>
}
   da120:	b00b      	add	sp, #44	; 0x2c
   da122:	bd30      	pop	{r4, r5, pc}

000da124 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   da124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da128:	b086      	sub	sp, #24
   da12a:	af00      	add	r7, sp, #0
   da12c:	4605      	mov	r5, r0
   da12e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   da130:	1d38      	adds	r0, r7, #4
   da132:	2114      	movs	r1, #20
{
   da134:	4614      	mov	r4, r2
    va_copy(args2, args);
   da136:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   da138:	f7fd fdae 	bl	d7c98 <vsnprintf>

    if (n<bufsize)
   da13c:	2813      	cmp	r0, #19
   da13e:	d80e      	bhi.n	da15e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   da140:	1d39      	adds	r1, r7, #4
   da142:	4628      	mov	r0, r5
   da144:	f7ff ffa5 	bl	da092 <_ZN5Print5writeEPKc>
   da148:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   da14a:	b11e      	cbz	r6, da154 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   da14c:	4628      	mov	r0, r5
   da14e:	f7ff ffb5 	bl	da0bc <_ZN5Print7printlnEv>
   da152:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   da154:	4620      	mov	r0, r4
   da156:	3718      	adds	r7, #24
   da158:	46bd      	mov	sp, r7
   da15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   da15e:	f100 0308 	add.w	r3, r0, #8
   da162:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   da166:	46e8      	mov	r8, sp
        char bigger[n+1];
   da168:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   da16c:	4622      	mov	r2, r4
   da16e:	1c41      	adds	r1, r0, #1
   da170:	683b      	ldr	r3, [r7, #0]
   da172:	4668      	mov	r0, sp
   da174:	f7fd fd90 	bl	d7c98 <vsnprintf>
  return write(str);
   da178:	4669      	mov	r1, sp
   da17a:	4628      	mov	r0, r5
   da17c:	f7ff ff89 	bl	da092 <_ZN5Print5writeEPKc>
   da180:	4604      	mov	r4, r0
   da182:	46c5      	mov	sp, r8
   da184:	e7e1      	b.n	da14a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000da186 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da186:	b510      	push	{r4, lr}
   da188:	4604      	mov	r4, r0
   da18a:	f7fa f8bb 	bl	d4304 <_ZNSt14_Function_baseD1Ev>
   da18e:	4620      	mov	r0, r4
   da190:	bd10      	pop	{r4, pc}
	...

000da194 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   da194:	4803      	ldr	r0, [pc, #12]	; (da1a4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da196:	4a04      	ldr	r2, [pc, #16]	; (da1a8 <_GLOBAL__sub_I_RGB+0x14>)
   da198:	4904      	ldr	r1, [pc, #16]	; (da1ac <_GLOBAL__sub_I_RGB+0x18>)
   da19a:	2300      	movs	r3, #0
   da19c:	6083      	str	r3, [r0, #8]
   da19e:	f000 bf09 	b.w	dafb4 <__aeabi_atexit>
   da1a2:	bf00      	nop
   da1a4:	2003e614 	.word	0x2003e614
   da1a8:	2003e3b0 	.word	0x2003e3b0
   da1ac:	000da187 	.word	0x000da187

000da1b0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   da1b0:	b510      	push	{r4, lr}
   da1b2:	4604      	mov	r4, r0
   da1b4:	4608      	mov	r0, r1
{
    _spi = spi;
   da1b6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   da1b8:	f7fd fb22 	bl	d7800 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   da1bc:	2300      	movs	r3, #0
   da1be:	6063      	str	r3, [r4, #4]
}
   da1c0:	4620      	mov	r0, r4
   da1c2:	bd10      	pop	{r4, pc}

000da1c4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   da1c4:	b510      	push	{r4, lr}
   da1c6:	4604      	mov	r4, r0
{
	free(buffer);
   da1c8:	6800      	ldr	r0, [r0, #0]
   da1ca:	f7fd fd45 	bl	d7c58 <free>
}
   da1ce:	4620      	mov	r0, r4
   da1d0:	bd10      	pop	{r4, pc}

000da1d2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   da1d2:	b510      	push	{r4, lr}
   da1d4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   da1d6:	6800      	ldr	r0, [r0, #0]
   da1d8:	b108      	cbz	r0, da1de <_ZN6String10invalidateEv+0xc>
   da1da:	f7fd fd3d 	bl	d7c58 <free>
	buffer = NULL;
   da1de:	2300      	movs	r3, #0
	capacity = len = 0;
   da1e0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   da1e4:	6023      	str	r3, [r4, #0]
}
   da1e6:	bd10      	pop	{r4, pc}

000da1e8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   da1e8:	b538      	push	{r3, r4, r5, lr}
   da1ea:	4604      	mov	r4, r0
   da1ec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   da1ee:	6800      	ldr	r0, [r0, #0]
   da1f0:	3101      	adds	r1, #1
   da1f2:	f7fd fd39 	bl	d7c68 <realloc>
	if (newbuffer) {
   da1f6:	b110      	cbz	r0, da1fe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   da1f8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   da1fc:	2001      	movs	r0, #1
	}
	return 0;
}
   da1fe:	bd38      	pop	{r3, r4, r5, pc}

000da200 <_ZN6String7reserveEj>:
{
   da200:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da202:	6803      	ldr	r3, [r0, #0]
{
   da204:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da206:	b123      	cbz	r3, da212 <_ZN6String7reserveEj+0x12>
   da208:	6843      	ldr	r3, [r0, #4]
   da20a:	428b      	cmp	r3, r1
   da20c:	d301      	bcc.n	da212 <_ZN6String7reserveEj+0x12>
   da20e:	2001      	movs	r0, #1
}
   da210:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   da212:	4620      	mov	r0, r4
   da214:	f7ff ffe8 	bl	da1e8 <_ZN6String12changeBufferEj>
   da218:	2800      	cmp	r0, #0
   da21a:	d0f9      	beq.n	da210 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   da21c:	68a3      	ldr	r3, [r4, #8]
   da21e:	2b00      	cmp	r3, #0
   da220:	d1f5      	bne.n	da20e <_ZN6String7reserveEj+0xe>
   da222:	6822      	ldr	r2, [r4, #0]
   da224:	7013      	strb	r3, [r2, #0]
   da226:	e7f2      	b.n	da20e <_ZN6String7reserveEj+0xe>

000da228 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da228:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da22a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   da22c:	4611      	mov	r1, r2
   da22e:	9201      	str	r2, [sp, #4]
{
   da230:	4604      	mov	r4, r0
	if (!reserve(length)) {
   da232:	f7ff ffe5 	bl	da200 <_ZN6String7reserveEj>
   da236:	9a01      	ldr	r2, [sp, #4]
   da238:	b928      	cbnz	r0, da246 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   da23a:	4620      	mov	r0, r4
   da23c:	f7ff ffc9 	bl	da1d2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   da240:	4620      	mov	r0, r4
   da242:	b003      	add	sp, #12
   da244:	bd30      	pop	{r4, r5, pc}
	len = length;
   da246:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   da248:	4629      	mov	r1, r5
   da24a:	6820      	ldr	r0, [r4, #0]
   da24c:	f001 fc60 	bl	dbb10 <memcpy>
	buffer[len] = 0;
   da250:	6822      	ldr	r2, [r4, #0]
   da252:	68a3      	ldr	r3, [r4, #8]
   da254:	2100      	movs	r1, #0
   da256:	54d1      	strb	r1, [r2, r3]
	return *this;
   da258:	e7f2      	b.n	da240 <_ZN6String4copyEPKcj+0x18>

000da25a <_ZN6StringC1EPKc>:
	buffer = NULL;
   da25a:	2300      	movs	r3, #0
String::String(const char *cstr)
   da25c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   da25e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   da262:	4604      	mov	r4, r0
	len = 0;
   da264:	6083      	str	r3, [r0, #8]
	flags = 0;
   da266:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   da268:	b141      	cbz	r1, da27c <_ZN6StringC1EPKc+0x22>
   da26a:	4608      	mov	r0, r1
   da26c:	9101      	str	r1, [sp, #4]
   da26e:	f001 fcea 	bl	dbc46 <strlen>
   da272:	9901      	ldr	r1, [sp, #4]
   da274:	4602      	mov	r2, r0
   da276:	4620      	mov	r0, r4
   da278:	f7ff ffd6 	bl	da228 <_ZN6String4copyEPKcj>
}
   da27c:	4620      	mov	r0, r4
   da27e:	b002      	add	sp, #8
   da280:	bd10      	pop	{r4, pc}

000da282 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da282:	b538      	push	{r3, r4, r5, lr}
   da284:	4605      	mov	r5, r0
	if (buffer) {
   da286:	6800      	ldr	r0, [r0, #0]
{
   da288:	460c      	mov	r4, r1
	if (buffer) {
   da28a:	b168      	cbz	r0, da2a8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   da28c:	686a      	ldr	r2, [r5, #4]
   da28e:	688b      	ldr	r3, [r1, #8]
   da290:	429a      	cmp	r2, r3
   da292:	d307      	bcc.n	da2a4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   da294:	6809      	ldr	r1, [r1, #0]
   da296:	f001 fcb0 	bl	dbbfa <strcpy>
			len = rhs.len;
   da29a:	68a3      	ldr	r3, [r4, #8]
   da29c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   da29e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   da2a0:	60a3      	str	r3, [r4, #8]
}
   da2a2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   da2a4:	f7fd fcd8 	bl	d7c58 <free>
	buffer = rhs.buffer;
   da2a8:	6823      	ldr	r3, [r4, #0]
   da2aa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   da2ac:	6863      	ldr	r3, [r4, #4]
   da2ae:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   da2b0:	68a3      	ldr	r3, [r4, #8]
   da2b2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   da2b4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   da2b6:	e9c4 3300 	strd	r3, r3, [r4]
   da2ba:	e7f1      	b.n	da2a0 <_ZN6String4moveERS_+0x1e>

000da2bc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   da2bc:	b510      	push	{r4, lr}
	buffer = NULL;
   da2be:	2300      	movs	r3, #0
	capacity = 0;
   da2c0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   da2c4:	4604      	mov	r4, r0
	len = 0;
   da2c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   da2c8:	7303      	strb	r3, [r0, #12]
	move(rval);
   da2ca:	f7ff ffda 	bl	da282 <_ZN6String4moveERS_>
}
   da2ce:	4620      	mov	r0, r4
   da2d0:	bd10      	pop	{r4, pc}

000da2d2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da2d2:	4288      	cmp	r0, r1
{
   da2d4:	b510      	push	{r4, lr}
   da2d6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da2d8:	d005      	beq.n	da2e6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da2da:	680b      	ldr	r3, [r1, #0]
   da2dc:	b12b      	cbz	r3, da2ea <_ZN6StringaSERKS_+0x18>
   da2de:	688a      	ldr	r2, [r1, #8]
   da2e0:	4619      	mov	r1, r3
   da2e2:	f7ff ffa1 	bl	da228 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da2e6:	4620      	mov	r0, r4
   da2e8:	bd10      	pop	{r4, pc}
	else invalidate();
   da2ea:	f7ff ff72 	bl	da1d2 <_ZN6String10invalidateEv>
   da2ee:	e7fa      	b.n	da2e6 <_ZN6StringaSERKS_+0x14>

000da2f0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   da2f0:	b510      	push	{r4, lr}
	buffer = NULL;
   da2f2:	2300      	movs	r3, #0
String::String(const String &value)
   da2f4:	4604      	mov	r4, r0
	capacity = 0;
   da2f6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   da2fa:	6083      	str	r3, [r0, #8]
	flags = 0;
   da2fc:	7303      	strb	r3, [r0, #12]
	*this = value;
   da2fe:	f7ff ffe8 	bl	da2d2 <_ZN6StringaSERKS_>
}
   da302:	4620      	mov	r0, r4
   da304:	bd10      	pop	{r4, pc}

000da306 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da306:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da308:	6882      	ldr	r2, [r0, #8]
   da30a:	b93a      	cbnz	r2, da31c <_ZNK6String6equalsEPKc+0x16>
   da30c:	b121      	cbz	r1, da318 <_ZNK6String6equalsEPKc+0x12>
   da30e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   da310:	fab0 f080 	clz	r0, r0
   da314:	0940      	lsrs	r0, r0, #5
   da316:	e000      	b.n	da31a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da318:	2001      	movs	r0, #1
}
   da31a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   da31c:	6800      	ldr	r0, [r0, #0]
   da31e:	b909      	cbnz	r1, da324 <_ZNK6String6equalsEPKc+0x1e>
   da320:	7800      	ldrb	r0, [r0, #0]
   da322:	e7f5      	b.n	da310 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   da324:	f001 fc5f 	bl	dbbe6 <strcmp>
   da328:	e7f2      	b.n	da310 <_ZNK6String6equalsEPKc+0xa>

000da32a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   da32a:	b558      	push	{r3, r4, r6, lr}
   da32c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   da32e:	b12a      	cbz	r2, da33c <_ZNK6String8getBytesEPhjj+0x12>
   da330:	b121      	cbz	r1, da33c <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   da332:	6884      	ldr	r4, [r0, #8]
   da334:	42a3      	cmp	r3, r4
   da336:	d302      	bcc.n	da33e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   da338:	2300      	movs	r3, #0
   da33a:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   da33c:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   da33e:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   da340:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   da342:	6801      	ldr	r1, [r0, #0]
   da344:	4294      	cmp	r4, r2
   da346:	bf28      	it	cs
   da348:	4614      	movcs	r4, r2
   da34a:	4419      	add	r1, r3
   da34c:	4622      	mov	r2, r4
   da34e:	4630      	mov	r0, r6
   da350:	f001 fc93 	bl	dbc7a <strncpy>
	buf[n] = 0;
   da354:	2300      	movs	r3, #0
   da356:	5533      	strb	r3, [r6, r4]
   da358:	e7f0      	b.n	da33c <_ZNK6String8getBytesEPhjj+0x12>
	...

000da35c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   da35c:	b40e      	push	{r1, r2, r3}
   da35e:	b570      	push	{r4, r5, r6, lr}
   da360:	b087      	sub	sp, #28
   da362:	ad0b      	add	r5, sp, #44	; 0x2c
   da364:	4604      	mov	r4, r0
   da366:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da36a:	9201      	str	r2, [sp, #4]
   da36c:	462b      	mov	r3, r5
   da36e:	2105      	movs	r1, #5
   da370:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   da372:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da374:	f7fd fc90 	bl	d7c98 <vsnprintf>
    va_end(marker);

    String result;
   da378:	490b      	ldr	r1, [pc, #44]	; (da3a8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da37a:	4606      	mov	r6, r0
    String result;
   da37c:	4620      	mov	r0, r4
   da37e:	f7ff ff6c 	bl	da25a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   da382:	4631      	mov	r1, r6
   da384:	4620      	mov	r0, r4
   da386:	f7ff ff3b 	bl	da200 <_ZN6String7reserveEj>
    if (result.buffer) {
   da38a:	6820      	ldr	r0, [r4, #0]
   da38c:	b130      	cbz	r0, da39c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da38e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   da390:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da392:	462b      	mov	r3, r5
   da394:	1c71      	adds	r1, r6, #1
   da396:	f7fd fc7f 	bl	d7c98 <vsnprintf>
        va_end(marker);
        result.len = n;
   da39a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   da39c:	4620      	mov	r0, r4
   da39e:	b007      	add	sp, #28
   da3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da3a4:	b003      	add	sp, #12
   da3a6:	4770      	bx	lr
   da3a8:	000de5e9 	.word	0x000de5e9

000da3ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   da3ac:	b510      	push	{r4, lr}
   da3ae:	4604      	mov	r4, r0
        if (wakeupSource_) {
   da3b0:	6800      	ldr	r0, [r0, #0]
   da3b2:	b118      	cbz	r0, da3bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   da3b4:	f7fd fc50 	bl	d7c58 <free>
            wakeupSource_ = nullptr;
   da3b8:	2300      	movs	r3, #0
   da3ba:	6023      	str	r3, [r4, #0]
        }
    }
   da3bc:	bd10      	pop	{r4, pc}

000da3be <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da3be:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   da3c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   da3c4:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   da3c6:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da3c8:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   da3ca:	f853 2f06 	ldr.w	r2, [r3, #6]!
   da3ce:	f8c0 2006 	str.w	r2, [r0, #6]
   da3d2:	889b      	ldrh	r3, [r3, #4]
   da3d4:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da3d6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   da3d8:	f7ff ffe8 	bl	da3ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   da3dc:	682b      	ldr	r3, [r5, #0]
   da3de:	b113      	cbz	r3, da3e6 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   da3e0:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   da3e2:	2300      	movs	r3, #0
   da3e4:	602b      	str	r3, [r5, #0]
    }
   da3e6:	4620      	mov	r0, r4
   da3e8:	bd38      	pop	{r3, r4, r5, pc}

000da3ea <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   da3ea:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   da3ee:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   da3f0:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   da3f2:	b933      	cbnz	r3, da402 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   da3f4:	b932      	cbnz	r2, da404 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   da3f6:	f851 3f06 	ldr.w	r3, [r1, #6]!
   da3fa:	6003      	str	r3, [r0, #0]
   da3fc:	888b      	ldrh	r3, [r1, #4]
   da3fe:	8083      	strh	r3, [r0, #4]
    }
   da400:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   da402:	b122      	cbz	r2, da40e <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   da404:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   da406:	2c01      	cmp	r4, #1
   da408:	d003      	beq.n	da412 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   da40a:	2c04      	cmp	r4, #4
   da40c:	d006      	beq.n	da41c <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   da40e:	2204      	movs	r2, #4
   da410:	e005      	b.n	da41e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   da412:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   da414:	814a      	strh	r2, [r1, #10]
   da416:	718c      	strb	r4, [r1, #6]
   da418:	810b      	strh	r3, [r1, #8]
                    break;
   da41a:	e7ec      	b.n	da3f6 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   da41c:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   da41e:	810b      	strh	r3, [r1, #8]
   da420:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da424:	718a      	strb	r2, [r1, #6]
   da426:	814b      	strh	r3, [r1, #10]
                    break;
   da428:	e7e5      	b.n	da3f6 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
	...

000da42c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   da42c:	b538      	push	{r3, r4, r5, lr}
   da42e:	460c      	mov	r4, r1
   da430:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   da432:	f7ff ffbb 	bl	da3ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   da436:	b144      	cbz	r4, da44a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   da438:	8820      	ldrh	r0, [r4, #0]
   da43a:	f7fd fc05 	bl	d7c48 <malloc>
   da43e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   da440:	b128      	cbz	r0, da44e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   da442:	8822      	ldrh	r2, [r4, #0]
   da444:	4621      	mov	r1, r4
   da446:	f001 fb63 	bl	dbb10 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   da44a:	2000      	movs	r0, #0
    }
   da44c:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   da44e:	4801      	ldr	r0, [pc, #4]	; (da454 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   da450:	e7fc      	b.n	da44c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   da452:	bf00      	nop
   da454:	fffffefc 	.word	0xfffffefc

000da458 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   da458:	b507      	push	{r0, r1, r2, lr}
   da45a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   da45c:	2100      	movs	r1, #0
{
   da45e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   da460:	9100      	str	r1, [sp, #0]
   da462:	2001      	movs	r0, #1
   da464:	218c      	movs	r1, #140	; 0x8c
   da466:	f7fd fb15 	bl	d7a94 <system_reset>
}
   da46a:	b003      	add	sp, #12
   da46c:	f85d fb04 	ldr.w	pc, [sp], #4

000da470 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   da470:	4601      	mov	r1, r0
    reset(0, flags);
   da472:	2000      	movs	r0, #0
   da474:	f7ff bff0 	b.w	da458 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000da478 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   da478:	2000      	movs	r0, #0
   da47a:	f7ff bff9 	b.w	da470 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000da480 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   da480:	b5f0      	push	{r4, r5, r6, r7, lr}
   da482:	4d2d      	ldr	r5, [pc, #180]	; (da538 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   da484:	7d0b      	ldrb	r3, [r1, #20]
   da486:	4604      	mov	r4, r0
   da488:	b08b      	sub	sp, #44	; 0x2c
   da48a:	4608      	mov	r0, r1
   da48c:	1daf      	adds	r7, r5, #6
   da48e:	2b00      	cmp	r3, #0
   da490:	d038      	beq.n	da504 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   da492:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   da494:	791b      	ldrb	r3, [r3, #4]
   da496:	2b00      	cmp	r3, #0
   da498:	d034      	beq.n	da504 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   da49a:	2200      	movs	r2, #0
    SleepResult() {}
   da49c:	4b27      	ldr	r3, [pc, #156]	; (da53c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da49e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   da4a0:	a902      	add	r1, sp, #8
   da4a2:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   da4a4:	9202      	str	r2, [sp, #8]
   da4a6:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   da4aa:	f88d 200e 	strb.w	r2, [sp, #14]
   da4ae:	f7fd fae7 	bl	d7a80 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   da4b2:	f8dd 300e 	ldr.w	r3, [sp, #14]
   da4b6:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   da4ba:	b200      	sxth	r0, r0
   da4bc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   da4c0:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   da4c4:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   da4c6:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   da4c8:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da4ca:	4628      	mov	r0, r5
   da4cc:	f7ff ffae 	bl	da42c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   da4d0:	a802      	add	r0, sp, #8
   da4d2:	f7ff ff6b 	bl	da3ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   da4d6:	2300      	movs	r3, #0
   da4d8:	6023      	str	r3, [r4, #0]
   da4da:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   da4dc:	71a3      	strb	r3, [r4, #6]
   da4de:	8123      	strh	r3, [r4, #8]
   da4e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da4e4:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   da4e6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   da4ea:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   da4ec:	683b      	ldr	r3, [r7, #0]
   da4ee:	f8c4 3006 	str.w	r3, [r4, #6]
   da4f2:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da4f4:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   da4f6:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   da4f8:	4620      	mov	r0, r4
   da4fa:	f7ff ff97 	bl	da42c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   da4fe:	4620      	mov	r0, r4
   da500:	b00b      	add	sp, #44	; 0x2c
   da502:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   da504:	2600      	movs	r6, #0
   da506:	2320      	movs	r3, #32
   da508:	e9cd 3602 	strd	r3, r6, [sp, #8]
   da50c:	4b0c      	ldr	r3, [pc, #48]	; (da540 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   da50e:	9300      	str	r3, [sp, #0]
   da510:	490c      	ldr	r1, [pc, #48]	; (da544 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   da512:	4633      	mov	r3, r6
   da514:	aa02      	add	r2, sp, #8
   da516:	2032      	movs	r0, #50	; 0x32
   da518:	f7fd fa1a 	bl	d7950 <log_message>
    SleepResult() {}
   da51c:	4b07      	ldr	r3, [pc, #28]	; (da53c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da51e:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   da520:	a902      	add	r1, sp, #8
        error_ = error;
   da522:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   da526:	4804      	ldr	r0, [pc, #16]	; (da538 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   da528:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   da52a:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   da52e:	f8ad 300c 	strh.w	r3, [sp, #12]
   da532:	f7ff ff44 	bl	da3be <_ZN17SystemSleepResultaSEOS_>
   da536:	e7cb      	b.n	da4d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   da538:	2003e624 	.word	0x2003e624
   da53c:	ffff0000 	.word	0xffff0000
   da540:	000de6bb 	.word	0x000de6bb
   da544:	000de6b4 	.word	0x000de6b4

000da548 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   da548:	b530      	push	{r4, r5, lr}
   da54a:	4604      	mov	r4, r0
   da54c:	b085      	sub	sp, #20
   da54e:	4608      	mov	r0, r1
   da550:	4611      	mov	r1, r2
   da552:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   da554:	2300      	movs	r3, #0
   da556:	f7fd fa3d 	bl	d79d4 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   da55a:	4d0d      	ldr	r5, [pc, #52]	; (da590 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   da55c:	f8ad 000c 	strh.w	r0, [sp, #12]
              compatResult_(r) {
   da560:	2300      	movs	r3, #0
   da562:	a901      	add	r1, sp, #4
   da564:	9301      	str	r3, [sp, #4]
   da566:	f8ad 3008 	strh.w	r3, [sp, #8]
   da56a:	f88d 300a 	strb.w	r3, [sp, #10]
   da56e:	4628      	mov	r0, r5
   da570:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da574:	f8ad 300e 	strh.w	r3, [sp, #14]
   da578:	f7ff ff21 	bl	da3be <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   da57c:	a801      	add	r0, sp, #4
   da57e:	f7ff ff15 	bl	da3ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   da582:	4620      	mov	r0, r4
   da584:	4629      	mov	r1, r5
   da586:	f7ff ff30 	bl	da3ea <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   da58a:	4620      	mov	r0, r4
   da58c:	b005      	add	sp, #20
   da58e:	bd30      	pop	{r4, r5, pc}
   da590:	2003e624 	.word	0x2003e624

000da594 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   da594:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   da596:	4b09      	ldr	r3, [pc, #36]	; (da5bc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   da598:	4c09      	ldr	r4, [pc, #36]	; (da5c0 <_GLOBAL__sub_I_System+0x2c>)
   da59a:	2202      	movs	r2, #2
   da59c:	2000      	movs	r0, #0
   da59e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   da5a0:	4b08      	ldr	r3, [pc, #32]	; (da5c4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   da5a2:	6020      	str	r0, [r4, #0]
   da5a4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   da5a6:	71a0      	strb	r0, [r4, #6]
   da5a8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   da5aa:	f7fd fa03 	bl	d79b4 <set_system_mode>
SystemClass System;
   da5ae:	4620      	mov	r0, r4
   da5b0:	4a05      	ldr	r2, [pc, #20]	; (da5c8 <_GLOBAL__sub_I_System+0x34>)
   da5b2:	4906      	ldr	r1, [pc, #24]	; (da5cc <_GLOBAL__sub_I_System+0x38>)
   da5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   da5b8:	f000 bcfc 	b.w	dafb4 <__aeabi_atexit>
   da5bc:	2003e630 	.word	0x2003e630
   da5c0:	2003e624 	.word	0x2003e624
   da5c4:	ffff0000 	.word	0xffff0000
   da5c8:	2003e3b0 	.word	0x2003e3b0
   da5cc:	000d42e9 	.word	0x000d42e9

000da5d0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   da5d4:	4a15      	ldr	r2, [pc, #84]	; (da62c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da5d6:	f8df 8060 	ldr.w	r8, [pc, #96]	; da638 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   da5da:	e9d2 3200 	ldrd	r3, r2, [r2]
   da5de:	18c0      	adds	r0, r0, r3
   da5e0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   da5e4:	4a12      	ldr	r2, [pc, #72]	; (da630 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   da5e6:	e9d2 3200 	ldrd	r3, r2, [r2]
   da5ea:	18c6      	adds	r6, r0, r3
   da5ec:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   da5f0:	e9d8 2300 	ldrd	r2, r3, [r8]
   da5f4:	42bb      	cmp	r3, r7
   da5f6:	bf08      	it	eq
   da5f8:	42b2      	cmpeq	r2, r6
{
   da5fa:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   da5fc:	d013      	beq.n	da626 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   da5fe:	a903      	add	r1, sp, #12
   da600:	4668      	mov	r0, sp
   da602:	e9cd 6700 	strd	r6, r7, [sp]
   da606:	f7fd fb6f 	bl	d7ce8 <localtime_r>
	calendar_time.tm_year += 1900;
   da60a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da60c:	4d09      	ldr	r5, [pc, #36]	; (da634 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   da60e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da612:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   da614:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da61a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da61c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da61e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da622:	6823      	ldr	r3, [r4, #0]
   da624:	602b      	str	r3, [r5, #0]
    }
}
   da626:	b00c      	add	sp, #48	; 0x30
   da628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da62c:	2003e668 	.word	0x2003e668
   da630:	2003e660 	.word	0x2003e660
   da634:	2003e63c 	.word	0x2003e63c
   da638:	2003e670 	.word	0x2003e670

000da63c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   da63c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da63e:	2000      	movs	r0, #0
   da640:	f7fd fa7a 	bl	d7b38 <spark_sync_time_pending>
   da644:	b128      	cbz	r0, da652 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   da646:	f7fd fa4f 	bl	d7ae8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da64a:	f080 0001 	eor.w	r0, r0, #1
   da64e:	b2c0      	uxtb	r0, r0
    }
   da650:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da652:	2001      	movs	r0, #1
   da654:	e7fc      	b.n	da650 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000da658 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   da658:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da65a:	f7ff ffb9 	bl	da5d0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   da65e:	4b01      	ldr	r3, [pc, #4]	; (da664 <_ZN9TimeClass4hourEx+0xc>)
   da660:	6898      	ldr	r0, [r3, #8]
   da662:	bd08      	pop	{r3, pc}
   da664:	2003e63c 	.word	0x2003e63c

000da668 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   da668:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da66a:	f7ff ffb1 	bl	da5d0 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   da66e:	4b01      	ldr	r3, [pc, #4]	; (da674 <_ZN9TimeClass3dayEx+0xc>)
   da670:	68d8      	ldr	r0, [r3, #12]
   da672:	bd08      	pop	{r3, pc}
   da674:	2003e63c 	.word	0x2003e63c

000da678 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   da678:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da67a:	f7ff ffa9 	bl	da5d0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   da67e:	4b02      	ldr	r3, [pc, #8]	; (da688 <_ZN9TimeClass7weekdayEx+0x10>)
   da680:	6998      	ldr	r0, [r3, #24]
}
   da682:	3001      	adds	r0, #1
   da684:	bd08      	pop	{r3, pc}
   da686:	bf00      	nop
   da688:	2003e63c 	.word	0x2003e63c

000da68c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   da68c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da68e:	f7ff ff9f 	bl	da5d0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   da692:	4b02      	ldr	r3, [pc, #8]	; (da69c <_ZN9TimeClass5monthEx+0x10>)
   da694:	6918      	ldr	r0, [r3, #16]
}
   da696:	3001      	adds	r0, #1
   da698:	bd08      	pop	{r3, pc}
   da69a:	bf00      	nop
   da69c:	2003e63c 	.word	0x2003e63c

000da6a0 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da6a0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   da6a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   da6ac:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da6ae:	d411      	bmi.n	da6d4 <_ZN9TimeClass4zoneEf+0x34>
   da6b0:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   da6b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da6bc:	dc0a      	bgt.n	da6d4 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   da6be:	eddf 7a06 	vldr	s15, [pc, #24]	; da6d8 <_ZN9TimeClass4zoneEf+0x38>
   da6c2:	ee60 7a27 	vmul.f32	s15, s0, s15
   da6c6:	ee17 0a90 	vmov	r0, s15
   da6ca:	f001 f985 	bl	db9d8 <__aeabi_f2lz>
   da6ce:	4b03      	ldr	r3, [pc, #12]	; (da6dc <_ZN9TimeClass4zoneEf+0x3c>)
   da6d0:	e9c3 0100 	strd	r0, r1, [r3]
}
   da6d4:	bd08      	pop	{r3, pc}
   da6d6:	bf00      	nop
   da6d8:	45610000 	.word	0x45610000
   da6dc:	2003e668 	.word	0x2003e668

000da6e0 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   da6e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   da6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   da6e8:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   da6ea:	d411      	bmi.n	da710 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   da6ec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   da6f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da6f8:	dc0a      	bgt.n	da710 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   da6fa:	eddf 7a06 	vldr	s15, [pc, #24]	; da714 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   da6fe:	ee60 7a27 	vmul.f32	s15, s0, s15
   da702:	ee17 0a90 	vmov	r0, s15
   da706:	f001 f967 	bl	db9d8 <__aeabi_f2lz>
   da70a:	4b03      	ldr	r3, [pc, #12]	; (da718 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   da70c:	e9c3 0100 	strd	r0, r1, [r3]
}
   da710:	bd08      	pop	{r3, pc}
   da712:	bf00      	nop
   da714:	45610000 	.word	0x45610000
   da718:	2003e1d0 	.word	0x2003e1d0

000da71c <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   da71c:	4b03      	ldr	r3, [pc, #12]	; (da72c <_ZN9TimeClass8beginDSTEv+0x10>)
   da71e:	e9d3 0100 	ldrd	r0, r1, [r3]
   da722:	4b03      	ldr	r3, [pc, #12]	; (da730 <_ZN9TimeClass8beginDSTEv+0x14>)
   da724:	e9c3 0100 	strd	r0, r1, [r3]
}
   da728:	4770      	bx	lr
   da72a:	bf00      	nop
   da72c:	2003e1d0 	.word	0x2003e1d0
   da730:	2003e660 	.word	0x2003e660

000da734 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   da734:	4b02      	ldr	r3, [pc, #8]	; (da740 <_ZN9TimeClass6endDSTEv+0xc>)
   da736:	2000      	movs	r0, #0
   da738:	2100      	movs	r1, #0
   da73a:	e9c3 0100 	strd	r0, r1, [r3]
}
   da73e:	4770      	bx	lr
   da740:	2003e660 	.word	0x2003e660

000da744 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   da744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da746:	4602      	mov	r2, r0
   da748:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da74a:	4668      	mov	r0, sp
    struct timeval tv = {
   da74c:	2100      	movs	r1, #0
    };
   da74e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   da752:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da756:	f7fc ff9b 	bl	d7690 <hal_rtc_set_time>
   da75a:	4602      	mov	r2, r0
   da75c:	b910      	cbnz	r0, da764 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   da75e:	4601      	mov	r1, r0
   da760:	f7fd f968 	bl	d7a34 <system_notify_time_changed>
    }
}
   da764:	b005      	add	sp, #20
   da766:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da76c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da76c:	b530      	push	{r4, r5, lr}
   da76e:	4604      	mov	r4, r0
    t += time_zone_cache;
   da770:	4818      	ldr	r0, [pc, #96]	; (da7d4 <_ZN9TimeClass7timeStrEx+0x68>)
   da772:	e9d0 1000 	ldrd	r1, r0, [r0]
   da776:	1852      	adds	r2, r2, r1
   da778:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da77c:	4816      	ldr	r0, [pc, #88]	; (da7d8 <_ZN9TimeClass7timeStrEx+0x6c>)
   da77e:	e9d0 1000 	ldrd	r1, r0, [r0]
   da782:	1852      	adds	r2, r2, r1
{
   da784:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da786:	eb40 0303 	adc.w	r3, r0, r3
   da78a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da78e:	2224      	movs	r2, #36	; 0x24
   da790:	eb0d 0002 	add.w	r0, sp, r2
   da794:	2100      	movs	r1, #0
   da796:	f001 f9e3 	bl	dbb60 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da79a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da79c:	a909      	add	r1, sp, #36	; 0x24
   da79e:	4668      	mov	r0, sp
   da7a0:	f7fd faa2 	bl	d7ce8 <localtime_r>
    char ascstr[26] = {};
   da7a4:	2216      	movs	r2, #22
   da7a6:	4629      	mov	r1, r5
   da7a8:	a803      	add	r0, sp, #12
   da7aa:	9502      	str	r5, [sp, #8]
   da7ac:	f001 f9d8 	bl	dbb60 <memset>
    asctime_r(&calendar_time, ascstr);
   da7b0:	a902      	add	r1, sp, #8
   da7b2:	a809      	add	r0, sp, #36	; 0x24
   da7b4:	f001 f962 	bl	dba7c <asctime_r>
    int len = strlen(ascstr);
   da7b8:	a802      	add	r0, sp, #8
   da7ba:	f001 fa44 	bl	dbc46 <strlen>
    ascstr[len-1] = 0; // remove final newline
   da7be:	ab12      	add	r3, sp, #72	; 0x48
   da7c0:	4418      	add	r0, r3
    return String(ascstr);
   da7c2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da7c4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da7c8:	4620      	mov	r0, r4
   da7ca:	f7ff fd46 	bl	da25a <_ZN6StringC1EPKc>
}
   da7ce:	4620      	mov	r0, r4
   da7d0:	b013      	add	sp, #76	; 0x4c
   da7d2:	bd30      	pop	{r4, r5, pc}
   da7d4:	2003e668 	.word	0x2003e668
   da7d8:	2003e660 	.word	0x2003e660

000da7dc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da7e0:	b0a5      	sub	sp, #148	; 0x94
   da7e2:	4607      	mov	r7, r0
   da7e4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da7e6:	a814      	add	r0, sp, #80	; 0x50
{
   da7e8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da7ea:	223f      	movs	r2, #63	; 0x3f
{
   da7ec:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da7ee:	f001 fa44 	bl	dbc7a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da7f2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da7f4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da7f6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da7fa:	f001 fa24 	bl	dbc46 <strlen>
   da7fe:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da800:	bb5d      	cbnz	r5, da85a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da802:	492a      	ldr	r1, [pc, #168]	; (da8ac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da804:	a803      	add	r0, sp, #12
   da806:	f001 f9f8 	bl	dbbfa <strcpy>
   da80a:	ae14      	add	r6, sp, #80	; 0x50
{
   da80c:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da80e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da812:	45ab      	cmp	fp, r5
   da814:	d936      	bls.n	da884 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da816:	46b1      	mov	r9, r6
   da818:	f105 0a01 	add.w	sl, r5, #1
   da81c:	f819 3b01 	ldrb.w	r3, [r9], #1
   da820:	2b25      	cmp	r3, #37	; 0x25
   da822:	d117      	bne.n	da854 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da824:	7873      	ldrb	r3, [r6, #1]
   da826:	2b7a      	cmp	r3, #122	; 0x7a
   da828:	d114      	bne.n	da854 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da82a:	a803      	add	r0, sp, #12
   da82c:	f001 fa0b 	bl	dbc46 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da830:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da832:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da834:	1828      	adds	r0, r5, r0
   da836:	4418      	add	r0, r3
   da838:	ebab 0205 	sub.w	r2, fp, r5
   da83c:	1cb1      	adds	r1, r6, #2
   da83e:	f001 f967 	bl	dbb10 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da842:	4622      	mov	r2, r4
   da844:	a903      	add	r1, sp, #12
   da846:	4630      	mov	r0, r6
   da848:	f001 f962 	bl	dbb10 <memcpy>
            len = strlen(format_str);
   da84c:	a814      	add	r0, sp, #80	; 0x50
   da84e:	f001 f9fa 	bl	dbc46 <strlen>
   da852:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da854:	464e      	mov	r6, r9
   da856:	4655      	mov	r5, sl
   da858:	e7d9      	b.n	da80e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da85a:	213c      	movs	r1, #60	; 0x3c
   da85c:	fb95 f3f1 	sdiv	r3, r5, r1
   da860:	2b00      	cmp	r3, #0
   da862:	bfb8      	it	lt
   da864:	425b      	neglt	r3, r3
   da866:	fbb3 f2f1 	udiv	r2, r3, r1
   da86a:	fb01 3312 	mls	r3, r1, r2, r3
   da86e:	9300      	str	r3, [sp, #0]
   da870:	4a0f      	ldr	r2, [pc, #60]	; (da8b0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da872:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da876:	2110      	movs	r1, #16
   da878:	a803      	add	r0, sp, #12
   da87a:	fb95 f3f3 	sdiv	r3, r5, r3
   da87e:	f7fd fa03 	bl	d7c88 <snprintf>
   da882:	e7c2      	b.n	da80a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da884:	2100      	movs	r1, #0
   da886:	222e      	movs	r2, #46	; 0x2e
   da888:	a808      	add	r0, sp, #32
   da88a:	9107      	str	r1, [sp, #28]
   da88c:	f001 f968 	bl	dbb60 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da890:	4643      	mov	r3, r8
   da892:	aa14      	add	r2, sp, #80	; 0x50
   da894:	2132      	movs	r1, #50	; 0x32
   da896:	a807      	add	r0, sp, #28
   da898:	f7fd fa1e 	bl	d7cd8 <strftime>
    return String(buf);
   da89c:	a907      	add	r1, sp, #28
   da89e:	4638      	mov	r0, r7
   da8a0:	f7ff fcdb 	bl	da25a <_ZN6StringC1EPKc>
}
   da8a4:	4638      	mov	r0, r7
   da8a6:	b025      	add	sp, #148	; 0x94
   da8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da8ac:	000de6e2 	.word	0x000de6e2
   da8b0:	000de6e4 	.word	0x000de6e4

000da8b4 <_ZN9TimeClass6formatExPKc>:
{
   da8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   da8b6:	b08d      	sub	sp, #52	; 0x34
   da8b8:	e9cd 2300 	strd	r2, r3, [sp]
   da8bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da8be:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da8c0:	b915      	cbnz	r5, da8c8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da8c2:	4b19      	ldr	r3, [pc, #100]	; (da928 <_ZN9TimeClass6formatExPKc+0x74>)
   da8c4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da8c6:	b12d      	cbz	r5, da8d4 <_ZN9TimeClass6formatExPKc+0x20>
   da8c8:	4b18      	ldr	r3, [pc, #96]	; (da92c <_ZN9TimeClass6formatExPKc+0x78>)
   da8ca:	4628      	mov	r0, r5
   da8cc:	6819      	ldr	r1, [r3, #0]
   da8ce:	f001 f98a 	bl	dbbe6 <strcmp>
   da8d2:	b938      	cbnz	r0, da8e4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da8d4:	e9dd 2300 	ldrd	r2, r3, [sp]
   da8d8:	4620      	mov	r0, r4
   da8da:	f7ff ff47 	bl	da76c <_ZN9TimeClass7timeStrEx>
}
   da8de:	4620      	mov	r0, r4
   da8e0:	b00d      	add	sp, #52	; 0x34
   da8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da8e4:	4e12      	ldr	r6, [pc, #72]	; (da930 <_ZN9TimeClass6formatExPKc+0x7c>)
   da8e6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da8e8:	4f12      	ldr	r7, [pc, #72]	; (da934 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da8ea:	e9d6 3200 	ldrd	r3, r2, [r6]
   da8ee:	185b      	adds	r3, r3, r1
   da8f0:	9901      	ldr	r1, [sp, #4]
   da8f2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da8f6:	e9d7 0100 	ldrd	r0, r1, [r7]
   da8fa:	181b      	adds	r3, r3, r0
   da8fc:	eb41 0202 	adc.w	r2, r1, r2
   da900:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da904:	2100      	movs	r1, #0
   da906:	2224      	movs	r2, #36	; 0x24
   da908:	a803      	add	r0, sp, #12
   da90a:	f001 f929 	bl	dbb60 <memset>
    localtime_r(&t, &calendar_time);
   da90e:	a903      	add	r1, sp, #12
   da910:	4668      	mov	r0, sp
   da912:	f7fd f9e9 	bl	d7ce8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da916:	6832      	ldr	r2, [r6, #0]
   da918:	683b      	ldr	r3, [r7, #0]
   da91a:	a903      	add	r1, sp, #12
   da91c:	4413      	add	r3, r2
   da91e:	4620      	mov	r0, r4
   da920:	462a      	mov	r2, r5
   da922:	f7ff ff5b 	bl	da7dc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da926:	e7da      	b.n	da8de <_ZN9TimeClass6formatExPKc+0x2a>
   da928:	2003e638 	.word	0x2003e638
   da92c:	2003e1c8 	.word	0x2003e1c8
   da930:	2003e668 	.word	0x2003e668
   da934:	2003e660 	.word	0x2003e660

000da938 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da938:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da93a:	2000      	movs	r0, #0
   da93c:	f7fc fe90 	bl	d7660 <hal_rtc_time_is_valid>
    if (rtcstate)
   da940:	4604      	mov	r4, r0
   da942:	b9a0      	cbnz	r0, da96e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da944:	f7fd f82e 	bl	d79a4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da948:	2801      	cmp	r0, #1
   da94a:	d110      	bne.n	da96e <_ZN9TimeClass7isValidEv+0x36>
   da94c:	4620      	mov	r0, r4
   da94e:	f7fd f869 	bl	d7a24 <system_thread_get_state>
   da952:	b960      	cbnz	r0, da96e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da954:	f7ff fe72 	bl	da63c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da958:	b910      	cbnz	r0, da960 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da95a:	f7fd f8b5 	bl	d7ac8 <spark_process>
        while (_while() && !_condition()) {
   da95e:	e7f9      	b.n	da954 <_ZN9TimeClass7isValidEv+0x1c>
   da960:	f7ff fe6c 	bl	da63c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da968:	2000      	movs	r0, #0
   da96a:	f7fc be79 	b.w	d7660 <hal_rtc_time_is_valid>
}
   da96e:	4620      	mov	r0, r4
   da970:	bd10      	pop	{r4, pc}

000da972 <_ZN9TimeClass3nowEv>:
{
   da972:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da974:	f7ff ffe0 	bl	da938 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da978:	2210      	movs	r2, #16
   da97a:	2100      	movs	r1, #0
   da97c:	4668      	mov	r0, sp
   da97e:	f001 f8ef 	bl	dbb60 <memset>
    hal_rtc_get_time(&tv, nullptr);
   da982:	2100      	movs	r1, #0
   da984:	4668      	mov	r0, sp
   da986:	f7fc fe7b 	bl	d7680 <hal_rtc_get_time>
}
   da98a:	9800      	ldr	r0, [sp, #0]
   da98c:	b005      	add	sp, #20
   da98e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da994 <_ZN9TimeClass4hourEv>:
{
   da994:	b508      	push	{r3, lr}
	return hour(now());
   da996:	f7ff ffec 	bl	da972 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da99a:	17c1      	asrs	r1, r0, #31
   da99c:	f7ff fe18 	bl	da5d0 <_ZL22Refresh_UnixTime_Cachex>
}
   da9a0:	4b01      	ldr	r3, [pc, #4]	; (da9a8 <_ZN9TimeClass4hourEv+0x14>)
   da9a2:	6898      	ldr	r0, [r3, #8]
   da9a4:	bd08      	pop	{r3, pc}
   da9a6:	bf00      	nop
   da9a8:	2003e63c 	.word	0x2003e63c

000da9ac <_ZN9TimeClass3dayEv>:
{
   da9ac:	b508      	push	{r3, lr}
	return day(now());
   da9ae:	f7ff ffe0 	bl	da972 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da9b2:	17c1      	asrs	r1, r0, #31
   da9b4:	f7ff fe0c 	bl	da5d0 <_ZL22Refresh_UnixTime_Cachex>
}
   da9b8:	4b01      	ldr	r3, [pc, #4]	; (da9c0 <_ZN9TimeClass3dayEv+0x14>)
   da9ba:	68d8      	ldr	r0, [r3, #12]
   da9bc:	bd08      	pop	{r3, pc}
   da9be:	bf00      	nop
   da9c0:	2003e63c 	.word	0x2003e63c

000da9c4 <_ZN9TimeClass7weekdayEv>:
{
   da9c4:	b508      	push	{r3, lr}
	return weekday(now());
   da9c6:	f7ff ffd4 	bl	da972 <_ZN9TimeClass3nowEv>
}
   da9ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   da9ce:	17c1      	asrs	r1, r0, #31
   da9d0:	f7ff be52 	b.w	da678 <_ZN9TimeClass7weekdayEx>

000da9d4 <_ZN9TimeClass5monthEv>:
{
   da9d4:	b508      	push	{r3, lr}
	return month(now());
   da9d6:	f7ff ffcc 	bl	da972 <_ZN9TimeClass3nowEv>
}
   da9da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   da9de:	17c1      	asrs	r1, r0, #31
   da9e0:	f7ff be54 	b.w	da68c <_ZN9TimeClass5monthEx>

000da9e4 <_ZN9TimeClass5localEv>:
{
   da9e4:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   da9e6:	f7ff ffc4 	bl	da972 <_ZN9TimeClass3nowEv>
   da9ea:	4b03      	ldr	r3, [pc, #12]	; (da9f8 <_ZN9TimeClass5localEv+0x14>)
   da9ec:	4a03      	ldr	r2, [pc, #12]	; (da9fc <_ZN9TimeClass5localEv+0x18>)
   da9ee:	681b      	ldr	r3, [r3, #0]
   da9f0:	6812      	ldr	r2, [r2, #0]
   da9f2:	4413      	add	r3, r2
}
   da9f4:	4418      	add	r0, r3
   da9f6:	bd08      	pop	{r3, pc}
   da9f8:	2003e668 	.word	0x2003e668
   da9fc:	2003e660 	.word	0x2003e660

000daa00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   daa00:	4b02      	ldr	r3, [pc, #8]	; (daa0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   daa02:	681a      	ldr	r2, [r3, #0]
   daa04:	4b02      	ldr	r3, [pc, #8]	; (daa10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   daa06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   daa08:	4770      	bx	lr
   daa0a:	bf00      	nop
   daa0c:	2003e1c8 	.word	0x2003e1c8
   daa10:	2003e638 	.word	0x2003e638

000daa14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   daa14:	4770      	bx	lr

000daa16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   daa16:	7441      	strb	r1, [r0, #17]
}
   daa18:	4770      	bx	lr

000daa1a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   daa1a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   daa1c:	7c00      	ldrb	r0, [r0, #16]
   daa1e:	f7fc ff3f 	bl	d78a0 <hal_usart_available_data_for_write>
}
   daa22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daa26:	bd08      	pop	{r3, pc}

000daa28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   daa28:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   daa2a:	7c00      	ldrb	r0, [r0, #16]
   daa2c:	f7fc ff10 	bl	d7850 <hal_usart_available>
}
   daa30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daa34:	bd08      	pop	{r3, pc}

000daa36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   daa36:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   daa38:	7c00      	ldrb	r0, [r0, #16]
   daa3a:	f7fc ff19 	bl	d7870 <hal_usart_peek>
}
   daa3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   daa42:	bd08      	pop	{r3, pc}

000daa44 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   daa44:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   daa46:	7c00      	ldrb	r0, [r0, #16]
   daa48:	f7fc ff0a 	bl	d7860 <hal_usart_read>
}
   daa4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   daa50:	bd08      	pop	{r3, pc}

000daa52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   daa52:	7c00      	ldrb	r0, [r0, #16]
   daa54:	f7fc bf14 	b.w	d7880 <hal_usart_flush>

000daa58 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   daa58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daa5a:	7c45      	ldrb	r5, [r0, #17]
{
   daa5c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daa5e:	b12d      	cbz	r5, daa6c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   daa60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   daa62:	b003      	add	sp, #12
   daa64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   daa68:	f7fc beea 	b.w	d7840 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daa6c:	7c00      	ldrb	r0, [r0, #16]
   daa6e:	9101      	str	r1, [sp, #4]
   daa70:	f7fc ff16 	bl	d78a0 <hal_usart_available_data_for_write>
   daa74:	2800      	cmp	r0, #0
   daa76:	9901      	ldr	r1, [sp, #4]
   daa78:	dcf2      	bgt.n	daa60 <_ZN11USARTSerial5writeEh+0x8>
}
   daa7a:	4628      	mov	r0, r5
   daa7c:	b003      	add	sp, #12
   daa7e:	bd30      	pop	{r4, r5, pc}

000daa80 <_ZN11USARTSerialD0Ev>:
   daa80:	b510      	push	{r4, lr}
   daa82:	2114      	movs	r1, #20
   daa84:	4604      	mov	r4, r0
   daa86:	f000 fa9a 	bl	dafbe <_ZdlPvj>
   daa8a:	4620      	mov	r0, r4
   daa8c:	bd10      	pop	{r4, pc}
	...

000daa90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   daa90:	b510      	push	{r4, lr}
   daa92:	f04f 0c00 	mov.w	ip, #0
   daa96:	4604      	mov	r4, r0
   daa98:	4608      	mov	r0, r1
   daa9a:	4611      	mov	r1, r2
   daa9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   daaa0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   daaa4:	4a04      	ldr	r2, [pc, #16]	; (daab8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   daaa6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   daaa8:	2201      	movs	r2, #1
  _serial = serial;
   daaaa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   daaac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   daaae:	461a      	mov	r2, r3
   daab0:	f7fc feb6 	bl	d7820 <hal_usart_init>
}
   daab4:	4620      	mov	r0, r4
   daab6:	bd10      	pop	{r4, pc}
   daab8:	000de714 	.word	0x000de714

000daabc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   daabc:	7c00      	ldrb	r0, [r0, #16]
   daabe:	2300      	movs	r3, #0
   daac0:	f7fc bef6 	b.w	d78b0 <hal_usart_begin_config>

000daac4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   daac4:	2200      	movs	r2, #0
   daac6:	f7ff bff9 	b.w	daabc <_ZN11USARTSerial5beginEmm>

000daaca <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   daaca:	7c00      	ldrb	r0, [r0, #16]
   daacc:	f7fc beb0 	b.w	d7830 <hal_usart_end>

000daad0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   daad0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   daad2:	4c0e      	ldr	r4, [pc, #56]	; (dab0c <_Z22__fetch_global_Serial1v+0x3c>)
   daad4:	7821      	ldrb	r1, [r4, #0]
   daad6:	f3bf 8f5b 	dmb	ish
   daada:	f011 0101 	ands.w	r1, r1, #1
   daade:	d112      	bne.n	dab06 <_Z22__fetch_global_Serial1v+0x36>
   daae0:	4620      	mov	r0, r4
   daae2:	9101      	str	r1, [sp, #4]
   daae4:	f7f9 fae8 	bl	d40b8 <__cxa_guard_acquire>
   daae8:	9901      	ldr	r1, [sp, #4]
   daaea:	b160      	cbz	r0, dab06 <_Z22__fetch_global_Serial1v+0x36>
   daaec:	4a08      	ldr	r2, [pc, #32]	; (dab10 <_Z22__fetch_global_Serial1v+0x40>)
   daaee:	4b09      	ldr	r3, [pc, #36]	; (dab14 <_Z22__fetch_global_Serial1v+0x44>)
   daaf0:	4809      	ldr	r0, [pc, #36]	; (dab18 <_Z22__fetch_global_Serial1v+0x48>)
   daaf2:	f7ff ffcd 	bl	daa90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   daaf6:	4620      	mov	r0, r4
   daaf8:	f7f9 fae3 	bl	d40c2 <__cxa_guard_release>
   daafc:	4a07      	ldr	r2, [pc, #28]	; (dab1c <_Z22__fetch_global_Serial1v+0x4c>)
   daafe:	4908      	ldr	r1, [pc, #32]	; (dab20 <_Z22__fetch_global_Serial1v+0x50>)
   dab00:	4805      	ldr	r0, [pc, #20]	; (dab18 <_Z22__fetch_global_Serial1v+0x48>)
   dab02:	f000 fa57 	bl	dafb4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dab06:	4804      	ldr	r0, [pc, #16]	; (dab18 <_Z22__fetch_global_Serial1v+0x48>)
   dab08:	b002      	add	sp, #8
   dab0a:	bd10      	pop	{r4, pc}
   dab0c:	2003e678 	.word	0x2003e678
   dab10:	2003e67c 	.word	0x2003e67c
   dab14:	2003e700 	.word	0x2003e700
   dab18:	2003e784 	.word	0x2003e784
   dab1c:	2003e3b0 	.word	0x2003e3b0
   dab20:	000daa15 	.word	0x000daa15

000dab24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dab24:	7441      	strb	r1, [r0, #17]
}
   dab26:	4770      	bx	lr

000dab28 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dab28:	4770      	bx	lr

000dab2a <_ZN9USBSerial4readEv>:
{
   dab2a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dab2c:	2100      	movs	r1, #0
   dab2e:	7c00      	ldrb	r0, [r0, #16]
   dab30:	f7fc feee 	bl	d7910 <HAL_USB_USART_Receive_Data>
}
   dab34:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dab38:	bd08      	pop	{r3, pc}

000dab3a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   dab3a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dab3c:	2101      	movs	r1, #1
   dab3e:	7c00      	ldrb	r0, [r0, #16]
   dab40:	f7fc fee6 	bl	d7910 <HAL_USB_USART_Receive_Data>
}
   dab44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dab48:	bd08      	pop	{r3, pc}

000dab4a <_ZN9USBSerial17availableForWriteEv>:
{
   dab4a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dab4c:	7c00      	ldrb	r0, [r0, #16]
   dab4e:	f7fc fed7 	bl	d7900 <HAL_USB_USART_Available_Data_For_Write>
}
   dab52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dab56:	bd08      	pop	{r3, pc}

000dab58 <_ZN9USBSerial9availableEv>:
{
   dab58:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dab5a:	7c00      	ldrb	r0, [r0, #16]
   dab5c:	f7fc fec8 	bl	d78f0 <HAL_USB_USART_Available_Data>
}
   dab60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dab64:	bd08      	pop	{r3, pc}

000dab66 <_ZN9USBSerial5writeEh>:
{
   dab66:	b513      	push	{r0, r1, r4, lr}
   dab68:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dab6a:	7c00      	ldrb	r0, [r0, #16]
{
   dab6c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dab6e:	f7fc fec7 	bl	d7900 <HAL_USB_USART_Available_Data_For_Write>
   dab72:	2800      	cmp	r0, #0
   dab74:	9901      	ldr	r1, [sp, #4]
   dab76:	dc01      	bgt.n	dab7c <_ZN9USBSerial5writeEh+0x16>
   dab78:	7c60      	ldrb	r0, [r4, #17]
   dab7a:	b120      	cbz	r0, dab86 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dab7c:	7c20      	ldrb	r0, [r4, #16]
   dab7e:	f7fc fecf 	bl	d7920 <HAL_USB_USART_Send_Data>
   dab82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   dab86:	b002      	add	sp, #8
   dab88:	bd10      	pop	{r4, pc}

000dab8a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   dab8a:	7c00      	ldrb	r0, [r0, #16]
   dab8c:	f7fc bed0 	b.w	d7930 <HAL_USB_USART_Flush_Data>

000dab90 <_ZN9USBSerialD0Ev>:
   dab90:	b510      	push	{r4, lr}
   dab92:	2114      	movs	r1, #20
   dab94:	4604      	mov	r4, r0
   dab96:	f000 fa12 	bl	dafbe <_ZdlPvj>
   dab9a:	4620      	mov	r0, r4
   dab9c:	bd10      	pop	{r4, pc}
	...

000daba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   daba0:	b510      	push	{r4, lr}
   daba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   daba6:	4604      	mov	r4, r0
   daba8:	4608      	mov	r0, r1
   dabaa:	2100      	movs	r1, #0
   dabac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dabb0:	4b04      	ldr	r3, [pc, #16]	; (dabc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dabb2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   dabb4:	2301      	movs	r3, #1
  _serial = serial;
   dabb6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dabb8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   dabba:	4611      	mov	r1, r2
   dabbc:	f7fc fe80 	bl	d78c0 <HAL_USB_USART_Init>
}
   dabc0:	4620      	mov	r0, r4
   dabc2:	bd10      	pop	{r4, pc}
   dabc4:	000de744 	.word	0x000de744

000dabc8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dabc8:	7c00      	ldrb	r0, [r0, #16]
   dabca:	2200      	movs	r2, #0
   dabcc:	f7fc be80 	b.w	d78d0 <HAL_USB_USART_Begin>

000dabd0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   dabd0:	7c00      	ldrb	r0, [r0, #16]
   dabd2:	f7fc be85 	b.w	d78e0 <HAL_USB_USART_End>

000dabd6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dabd6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dabd8:	2214      	movs	r2, #20
{
   dabda:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dabdc:	2100      	movs	r1, #0
   dabde:	f000 ffbf 	bl	dbb60 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dabe2:	4620      	mov	r0, r4
   dabe4:	bd10      	pop	{r4, pc}
	...

000dabe8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dabe8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dabea:	4c10      	ldr	r4, [pc, #64]	; (dac2c <_Z16_fetch_usbserialv+0x44>)
{
   dabec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dabee:	a803      	add	r0, sp, #12
   dabf0:	f7ff fff1 	bl	dabd6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dabf4:	7821      	ldrb	r1, [r4, #0]
   dabf6:	f3bf 8f5b 	dmb	ish
   dabfa:	f011 0101 	ands.w	r1, r1, #1
   dabfe:	d111      	bne.n	dac24 <_Z16_fetch_usbserialv+0x3c>
   dac00:	4620      	mov	r0, r4
   dac02:	9101      	str	r1, [sp, #4]
   dac04:	f7f9 fa58 	bl	d40b8 <__cxa_guard_acquire>
   dac08:	9901      	ldr	r1, [sp, #4]
   dac0a:	b158      	cbz	r0, dac24 <_Z16_fetch_usbserialv+0x3c>
   dac0c:	aa03      	add	r2, sp, #12
   dac0e:	4808      	ldr	r0, [pc, #32]	; (dac30 <_Z16_fetch_usbserialv+0x48>)
   dac10:	f7ff ffc6 	bl	daba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dac14:	4620      	mov	r0, r4
   dac16:	f7f9 fa54 	bl	d40c2 <__cxa_guard_release>
   dac1a:	4a06      	ldr	r2, [pc, #24]	; (dac34 <_Z16_fetch_usbserialv+0x4c>)
   dac1c:	4906      	ldr	r1, [pc, #24]	; (dac38 <_Z16_fetch_usbserialv+0x50>)
   dac1e:	4804      	ldr	r0, [pc, #16]	; (dac30 <_Z16_fetch_usbserialv+0x48>)
   dac20:	f000 f9c8 	bl	dafb4 <__aeabi_atexit>
	return _usbserial;
}
   dac24:	4802      	ldr	r0, [pc, #8]	; (dac30 <_Z16_fetch_usbserialv+0x48>)
   dac26:	b008      	add	sp, #32
   dac28:	bd10      	pop	{r4, pc}
   dac2a:	bf00      	nop
   dac2c:	2003e798 	.word	0x2003e798
   dac30:	2003e79c 	.word	0x2003e79c
   dac34:	2003e3b0 	.word	0x2003e3b0
   dac38:	000dab29 	.word	0x000dab29

000dac3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   dac3c:	4b01      	ldr	r3, [pc, #4]	; (dac44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   dac3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   dac40:	4770      	bx	lr
   dac42:	bf00      	nop
   dac44:	2003e1d8 	.word	0x2003e1d8

000dac48 <serialEventRun>:
{
   dac48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dac4a:	4b0b      	ldr	r3, [pc, #44]	; (dac78 <serialEventRun+0x30>)
   dac4c:	b143      	cbz	r3, dac60 <serialEventRun+0x18>
   dac4e:	f7ff ffcb 	bl	dabe8 <_Z16_fetch_usbserialv>
   dac52:	6803      	ldr	r3, [r0, #0]
   dac54:	691b      	ldr	r3, [r3, #16]
   dac56:	4798      	blx	r3
   dac58:	2800      	cmp	r0, #0
   dac5a:	dd01      	ble.n	dac60 <serialEventRun+0x18>
        serialEvent();
   dac5c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   dac60:	4b06      	ldr	r3, [pc, #24]	; (dac7c <serialEventRun+0x34>)
   dac62:	b143      	cbz	r3, dac76 <serialEventRun+0x2e>
   dac64:	f7ff ff34 	bl	daad0 <_Z22__fetch_global_Serial1v>
   dac68:	6803      	ldr	r3, [r0, #0]
   dac6a:	691b      	ldr	r3, [r3, #16]
   dac6c:	4798      	blx	r3
   dac6e:	2800      	cmp	r0, #0
   dac70:	dd01      	ble.n	dac76 <serialEventRun+0x2e>
        serialEvent1();
   dac72:	f3af 8000 	nop.w
}
   dac76:	bd08      	pop	{r3, pc}
	...

000dac80 <_post_loop>:
{
   dac80:	b508      	push	{r3, lr}
	serialEventRun();
   dac82:	f7ff ffe1 	bl	dac48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dac86:	f7fc fce3 	bl	d7650 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dac8a:	4b01      	ldr	r3, [pc, #4]	; (dac90 <_post_loop+0x10>)
   dac8c:	6018      	str	r0, [r3, #0]
}
   dac8e:	bd08      	pop	{r3, pc}
   dac90:	2003e7c4 	.word	0x2003e7c4

000dac94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dac94:	4802      	ldr	r0, [pc, #8]	; (daca0 <_Z33system_initialize_user_backup_ramv+0xc>)
   dac96:	4a03      	ldr	r2, [pc, #12]	; (daca4 <_Z33system_initialize_user_backup_ramv+0x10>)
   dac98:	4903      	ldr	r1, [pc, #12]	; (daca8 <_Z33system_initialize_user_backup_ramv+0x14>)
   dac9a:	1a12      	subs	r2, r2, r0
   dac9c:	f000 bf38 	b.w	dbb10 <memcpy>
   daca0:	2003f400 	.word	0x2003f400
   daca4:	2003fc04 	.word	0x2003fc04
   daca8:	000dea70 	.word	0x000dea70

000dacac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dacac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dacae:	2300      	movs	r3, #0
   dacb0:	9300      	str	r3, [sp, #0]
   dacb2:	461a      	mov	r2, r3
   dacb4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dacb8:	f7fc fece 	bl	d7a58 <system_ctrl_set_result>
}
   dacbc:	b003      	add	sp, #12
   dacbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dacc4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   dacc4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dacc6:	8843      	ldrh	r3, [r0, #2]
   dacc8:	2b0a      	cmp	r3, #10
   dacca:	d008      	beq.n	dacde <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   daccc:	2b50      	cmp	r3, #80	; 0x50
   dacce:	d10b      	bne.n	dace8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   dacd0:	4b09      	ldr	r3, [pc, #36]	; (dacf8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dacd2:	681b      	ldr	r3, [r3, #0]
   dacd4:	b14b      	cbz	r3, dacea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   dacd6:	b003      	add	sp, #12
   dacd8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   dacdc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   dacde:	f7ff ffe5 	bl	dacac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   dace2:	b003      	add	sp, #12
   dace4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dace8:	2300      	movs	r3, #0
   dacea:	9300      	str	r3, [sp, #0]
   dacec:	461a      	mov	r2, r3
   dacee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dacf2:	f7fc feb1 	bl	d7a58 <system_ctrl_set_result>
}
   dacf6:	e7f4      	b.n	dace2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   dacf8:	2003e7b4 	.word	0x2003e7b4

000dacfc <module_user_init_hook>:
{
   dacfc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dacfe:	4c12      	ldr	r4, [pc, #72]	; (dad48 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dad00:	4812      	ldr	r0, [pc, #72]	; (dad4c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dad02:	4d13      	ldr	r5, [pc, #76]	; (dad50 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dad04:	2100      	movs	r1, #0
   dad06:	f7fc ffdf 	bl	d7cc8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dad0a:	6823      	ldr	r3, [r4, #0]
   dad0c:	42ab      	cmp	r3, r5
   dad0e:	4b11      	ldr	r3, [pc, #68]	; (dad54 <module_user_init_hook+0x58>)
   dad10:	bf0c      	ite	eq
   dad12:	2201      	moveq	r2, #1
   dad14:	2200      	movne	r2, #0
   dad16:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dad18:	d002      	beq.n	dad20 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   dad1a:	f7ff ffbb 	bl	dac94 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   dad1e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dad20:	f7fc fc7e 	bl	d7620 <HAL_RNG_GetRandomNumber>
   dad24:	4604      	mov	r4, r0
    srand(seed);
   dad26:	f000 ff23 	bl	dbb70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dad2a:	4b0b      	ldr	r3, [pc, #44]	; (dad58 <module_user_init_hook+0x5c>)
   dad2c:	b113      	cbz	r3, dad34 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   dad2e:	4620      	mov	r0, r4
   dad30:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dad34:	2100      	movs	r1, #0
   dad36:	4808      	ldr	r0, [pc, #32]	; (dad58 <module_user_init_hook+0x5c>)
   dad38:	f7fc ff16 	bl	d7b68 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   dad3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dad40:	4806      	ldr	r0, [pc, #24]	; (dad5c <module_user_init_hook+0x60>)
   dad42:	2100      	movs	r1, #0
   dad44:	f7fc be7e 	b.w	d7a44 <system_ctrl_set_app_request_handler>
   dad48:	2003fc00 	.word	0x2003fc00
   dad4c:	000dac3d 	.word	0x000dac3d
   dad50:	9a271c1e 	.word	0x9a271c1e
   dad54:	2003e7b0 	.word	0x2003e7b0
   dad58:	00000000 	.word	0x00000000
   dad5c:	000dacc5 	.word	0x000dacc5

000dad60 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   dad60:	b508      	push	{r3, lr}
   dad62:	4b02      	ldr	r3, [pc, #8]	; (dad6c <spark_protocol_instance+0xc>)
   dad64:	681b      	ldr	r3, [r3, #0]
   dad66:	681b      	ldr	r3, [r3, #0]
   dad68:	9301      	str	r3, [sp, #4]
   dad6a:	bd08      	pop	{r3, pc}
   dad6c:	0003025c 	.word	0x0003025c

000dad70 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   dad70:	b508      	push	{r3, lr}
   dad72:	4b02      	ldr	r3, [pc, #8]	; (dad7c <spark_protocol_set_product_id+0xc>)
   dad74:	681b      	ldr	r3, [r3, #0]
   dad76:	685b      	ldr	r3, [r3, #4]
   dad78:	9301      	str	r3, [sp, #4]
   dad7a:	bd08      	pop	{r3, pc}
   dad7c:	0003025c 	.word	0x0003025c

000dad80 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   dad80:	b508      	push	{r3, lr}
   dad82:	4b02      	ldr	r3, [pc, #8]	; (dad8c <spark_protocol_set_product_firmware_version+0xc>)
   dad84:	681b      	ldr	r3, [r3, #0]
   dad86:	689b      	ldr	r3, [r3, #8]
   dad88:	9301      	str	r3, [sp, #4]
   dad8a:	bd08      	pop	{r3, pc}
   dad8c:	0003025c 	.word	0x0003025c

000dad90 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   dad90:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   dad92:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   dad94:	d902      	bls.n	dad9c <pinAvailable+0xc>
    return false;
   dad96:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   dad98:	b002      	add	sp, #8
   dad9a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   dad9c:	f1a0 030b 	sub.w	r3, r0, #11
   dada0:	2b02      	cmp	r3, #2
   dada2:	d81a      	bhi.n	dadda <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dada4:	4c17      	ldr	r4, [pc, #92]	; (dae04 <pinAvailable+0x74>)
   dada6:	7821      	ldrb	r1, [r4, #0]
   dada8:	f3bf 8f5b 	dmb	ish
   dadac:	f011 0101 	ands.w	r1, r1, #1
   dadb0:	d10b      	bne.n	dadca <pinAvailable+0x3a>
   dadb2:	4620      	mov	r0, r4
   dadb4:	9101      	str	r1, [sp, #4]
   dadb6:	f7f9 f97f 	bl	d40b8 <__cxa_guard_acquire>
   dadba:	9901      	ldr	r1, [sp, #4]
   dadbc:	b128      	cbz	r0, dadca <pinAvailable+0x3a>
   dadbe:	4812      	ldr	r0, [pc, #72]	; (dae08 <pinAvailable+0x78>)
   dadc0:	f7ff f9f6 	bl	da1b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   dadc4:	4620      	mov	r0, r4
   dadc6:	f7f9 f97c 	bl	d40c2 <__cxa_guard_release>
   dadca:	4b0f      	ldr	r3, [pc, #60]	; (dae08 <pinAvailable+0x78>)
   dadcc:	7818      	ldrb	r0, [r3, #0]
   dadce:	f7fc fd1f 	bl	d7810 <hal_spi_is_enabled>
   dadd2:	2800      	cmp	r0, #0
   dadd4:	d1df      	bne.n	dad96 <pinAvailable+0x6>
  return true; // 'pin' is available
   dadd6:	2001      	movs	r0, #1
   dadd8:	e7de      	b.n	dad98 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   dadda:	2801      	cmp	r0, #1
   daddc:	d809      	bhi.n	dadf2 <pinAvailable+0x62>
   dadde:	f000 f899 	bl	daf14 <_Z19__fetch_global_Wirev>
   dade2:	2100      	movs	r1, #0
   dade4:	7c00      	ldrb	r0, [r0, #16]
   dade6:	f7fc fccb 	bl	d7780 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   dadea:	f080 0001 	eor.w	r0, r0, #1
   dadee:	b2c0      	uxtb	r0, r0
   dadf0:	e7d2      	b.n	dad98 <pinAvailable+0x8>
   dadf2:	3809      	subs	r0, #9
   dadf4:	2801      	cmp	r0, #1
   dadf6:	d8ee      	bhi.n	dadd6 <pinAvailable+0x46>
   dadf8:	f7ff fe6a 	bl	daad0 <_Z22__fetch_global_Serial1v>
   dadfc:	7c00      	ldrb	r0, [r0, #16]
   dadfe:	f7fc fd47 	bl	d7890 <hal_usart_is_enabled>
   dae02:	e7f2      	b.n	dadea <pinAvailable+0x5a>
   dae04:	2003e7b8 	.word	0x2003e7b8
   dae08:	2003e7bc 	.word	0x2003e7bc

000dae0c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dae0c:	2823      	cmp	r0, #35	; 0x23
{
   dae0e:	b538      	push	{r3, r4, r5, lr}
   dae10:	4604      	mov	r4, r0
   dae12:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dae14:	d80a      	bhi.n	dae2c <pinMode+0x20>
   dae16:	29ff      	cmp	r1, #255	; 0xff
   dae18:	d008      	beq.n	dae2c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   dae1a:	f7ff ffb9 	bl	dad90 <pinAvailable>
   dae1e:	b128      	cbz	r0, dae2c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   dae20:	4629      	mov	r1, r5
   dae22:	4620      	mov	r0, r4
}
   dae24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   dae28:	f7fc bc42 	b.w	d76b0 <HAL_Pin_Mode>
}
   dae2c:	bd38      	pop	{r3, r4, r5, pc}

000dae2e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dae2e:	b538      	push	{r3, r4, r5, lr}
   dae30:	4604      	mov	r4, r0
   dae32:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dae34:	f7fc fc44 	bl	d76c0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dae38:	28ff      	cmp	r0, #255	; 0xff
   dae3a:	d010      	beq.n	dae5e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   dae3c:	2806      	cmp	r0, #6
   dae3e:	d804      	bhi.n	dae4a <digitalWrite+0x1c>
   dae40:	234d      	movs	r3, #77	; 0x4d
   dae42:	fa23 f000 	lsr.w	r0, r3, r0
   dae46:	07c3      	lsls	r3, r0, #31
   dae48:	d409      	bmi.n	dae5e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dae4a:	4620      	mov	r0, r4
   dae4c:	f7ff ffa0 	bl	dad90 <pinAvailable>
   dae50:	b128      	cbz	r0, dae5e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dae52:	4629      	mov	r1, r5
   dae54:	4620      	mov	r0, r4
}
   dae56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   dae5a:	f7fc bc39 	b.w	d76d0 <HAL_GPIO_Write>
}
   dae5e:	bd38      	pop	{r3, r4, r5, pc}

000dae60 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dae60:	b510      	push	{r4, lr}
   dae62:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dae64:	f7fc fc2c 	bl	d76c0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   dae68:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   dae6a:	b2db      	uxtb	r3, r3
   dae6c:	2b01      	cmp	r3, #1
   dae6e:	d908      	bls.n	dae82 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dae70:	4620      	mov	r0, r4
   dae72:	f7ff ff8d 	bl	dad90 <pinAvailable>
   dae76:	b120      	cbz	r0, dae82 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dae78:	4620      	mov	r0, r4
}
   dae7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   dae7e:	f7fc bc2f 	b.w	d76e0 <HAL_GPIO_Read>
}
   dae82:	2000      	movs	r0, #0
   dae84:	bd10      	pop	{r4, pc}

000dae86 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dae86:	280d      	cmp	r0, #13
{
   dae88:	b510      	push	{r4, lr}
   dae8a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   dae8c:	bf9c      	itt	ls
   dae8e:	340e      	addls	r4, #14
   dae90:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dae92:	4620      	mov	r0, r4
   dae94:	f7ff ff7c 	bl	dad90 <pinAvailable>
   dae98:	b150      	cbz	r0, daeb0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dae9a:	2103      	movs	r1, #3
   dae9c:	4620      	mov	r0, r4
   dae9e:	f7fc fbff 	bl	d76a0 <HAL_Validate_Pin_Function>
   daea2:	2803      	cmp	r0, #3
   daea4:	d104      	bne.n	daeb0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   daea6:	4620      	mov	r0, r4
}
   daea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   daeac:	f7fc bc20 	b.w	d76f0 <hal_adc_read>
}
   daeb0:	2000      	movs	r0, #0
   daeb2:	bd10      	pop	{r4, pc}

000daeb4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   daeb4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   daeb6:	2300      	movs	r3, #0
   daeb8:	2520      	movs	r5, #32
   daeba:	8043      	strh	r3, [r0, #2]
   daebc:	2314      	movs	r3, #20
{
   daebe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   daec0:	8003      	strh	r3, [r0, #0]
   daec2:	6085      	str	r5, [r0, #8]
   daec4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daec6:	4906      	ldr	r1, [pc, #24]	; (daee0 <_Z17acquireWireBufferv+0x2c>)
   daec8:	4628      	mov	r0, r5
   daeca:	f000 f87c 	bl	dafc6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daece:	4904      	ldr	r1, [pc, #16]	; (daee0 <_Z17acquireWireBufferv+0x2c>)
	};
   daed0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daed2:	4628      	mov	r0, r5
   daed4:	f000 f877 	bl	dafc6 <_ZnajRKSt9nothrow_t>
	};
   daed8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   daeda:	4620      	mov	r0, r4
   daedc:	bd38      	pop	{r3, r4, r5, pc}
   daede:	bf00      	nop
   daee0:	000de76c 	.word	0x000de76c

000daee4 <_Z18acquireWire1Bufferv>:
   daee4:	b538      	push	{r3, r4, r5, lr}
   daee6:	2300      	movs	r3, #0
   daee8:	2520      	movs	r5, #32
   daeea:	8043      	strh	r3, [r0, #2]
   daeec:	2314      	movs	r3, #20
   daeee:	4604      	mov	r4, r0
   daef0:	8003      	strh	r3, [r0, #0]
   daef2:	6085      	str	r5, [r0, #8]
   daef4:	6105      	str	r5, [r0, #16]
   daef6:	4906      	ldr	r1, [pc, #24]	; (daf10 <_Z18acquireWire1Bufferv+0x2c>)
   daef8:	4628      	mov	r0, r5
   daefa:	f000 f864 	bl	dafc6 <_ZnajRKSt9nothrow_t>
   daefe:	4904      	ldr	r1, [pc, #16]	; (daf10 <_Z18acquireWire1Bufferv+0x2c>)
   daf00:	6060      	str	r0, [r4, #4]
   daf02:	4628      	mov	r0, r5
   daf04:	f000 f85f 	bl	dafc6 <_ZnajRKSt9nothrow_t>
   daf08:	60e0      	str	r0, [r4, #12]
   daf0a:	4620      	mov	r0, r4
   daf0c:	bd38      	pop	{r3, r4, r5, pc}
   daf0e:	bf00      	nop
   daf10:	000de76c 	.word	0x000de76c

000daf14 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   daf14:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daf16:	4d0f      	ldr	r5, [pc, #60]	; (daf54 <_Z19__fetch_global_Wirev+0x40>)
   daf18:	7829      	ldrb	r1, [r5, #0]
   daf1a:	f3bf 8f5b 	dmb	ish
   daf1e:	f011 0401 	ands.w	r4, r1, #1
{
   daf22:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daf24:	d113      	bne.n	daf4e <_Z19__fetch_global_Wirev+0x3a>
   daf26:	4628      	mov	r0, r5
   daf28:	f7f9 f8c6 	bl	d40b8 <__cxa_guard_acquire>
   daf2c:	b178      	cbz	r0, daf4e <_Z19__fetch_global_Wirev+0x3a>
   daf2e:	a801      	add	r0, sp, #4
   daf30:	f7ff ffc0 	bl	daeb4 <_Z17acquireWireBufferv>
   daf34:	aa01      	add	r2, sp, #4
   daf36:	4621      	mov	r1, r4
   daf38:	4807      	ldr	r0, [pc, #28]	; (daf58 <_Z19__fetch_global_Wirev+0x44>)
   daf3a:	f7fd fcad 	bl	d8898 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   daf3e:	4628      	mov	r0, r5
   daf40:	f7f9 f8bf 	bl	d40c2 <__cxa_guard_release>
   daf44:	4a05      	ldr	r2, [pc, #20]	; (daf5c <_Z19__fetch_global_Wirev+0x48>)
   daf46:	4906      	ldr	r1, [pc, #24]	; (daf60 <_Z19__fetch_global_Wirev+0x4c>)
   daf48:	4803      	ldr	r0, [pc, #12]	; (daf58 <_Z19__fetch_global_Wirev+0x44>)
   daf4a:	f000 f833 	bl	dafb4 <__aeabi_atexit>
	return wire;
}
   daf4e:	4802      	ldr	r0, [pc, #8]	; (daf58 <_Z19__fetch_global_Wirev+0x44>)
   daf50:	b007      	add	sp, #28
   daf52:	bd30      	pop	{r4, r5, pc}
   daf54:	2003e7c8 	.word	0x2003e7c8
   daf58:	2003e7d0 	.word	0x2003e7d0
   daf5c:	2003e3b0 	.word	0x2003e3b0
   daf60:	000d8841 	.word	0x000d8841

000daf64 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   daf64:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   daf66:	4c0f      	ldr	r4, [pc, #60]	; (dafa4 <_Z20__fetch_global_Wire1v+0x40>)
   daf68:	7823      	ldrb	r3, [r4, #0]
   daf6a:	f3bf 8f5b 	dmb	ish
   daf6e:	07db      	lsls	r3, r3, #31
{
   daf70:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   daf72:	d413      	bmi.n	daf9c <_Z20__fetch_global_Wire1v+0x38>
   daf74:	4620      	mov	r0, r4
   daf76:	f7f9 f89f 	bl	d40b8 <__cxa_guard_acquire>
   daf7a:	b178      	cbz	r0, daf9c <_Z20__fetch_global_Wire1v+0x38>
   daf7c:	a801      	add	r0, sp, #4
   daf7e:	f7ff ffb1 	bl	daee4 <_Z18acquireWire1Bufferv>
   daf82:	aa01      	add	r2, sp, #4
   daf84:	2101      	movs	r1, #1
   daf86:	4808      	ldr	r0, [pc, #32]	; (dafa8 <_Z20__fetch_global_Wire1v+0x44>)
   daf88:	f7fd fc86 	bl	d8898 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   daf8c:	4620      	mov	r0, r4
   daf8e:	f7f9 f898 	bl	d40c2 <__cxa_guard_release>
   daf92:	4a06      	ldr	r2, [pc, #24]	; (dafac <_Z20__fetch_global_Wire1v+0x48>)
   daf94:	4906      	ldr	r1, [pc, #24]	; (dafb0 <_Z20__fetch_global_Wire1v+0x4c>)
   daf96:	4804      	ldr	r0, [pc, #16]	; (dafa8 <_Z20__fetch_global_Wire1v+0x44>)
   daf98:	f000 f80c 	bl	dafb4 <__aeabi_atexit>
	return wire;
}
   daf9c:	4802      	ldr	r0, [pc, #8]	; (dafa8 <_Z20__fetch_global_Wire1v+0x44>)
   daf9e:	b006      	add	sp, #24
   dafa0:	bd10      	pop	{r4, pc}
   dafa2:	bf00      	nop
   dafa4:	2003e7cc 	.word	0x2003e7cc
   dafa8:	2003e7e4 	.word	0x2003e7e4
   dafac:	2003e3b0 	.word	0x2003e3b0
   dafb0:	000d8841 	.word	0x000d8841

000dafb4 <__aeabi_atexit>:
   dafb4:	460b      	mov	r3, r1
   dafb6:	4601      	mov	r1, r0
   dafb8:	4618      	mov	r0, r3
   dafba:	f000 bd89 	b.w	dbad0 <__cxa_atexit>

000dafbe <_ZdlPvj>:
   dafbe:	f7f9 b86e 	b.w	d409e <_ZdlPv>

000dafc2 <_ZnwjRKSt9nothrow_t>:
   dafc2:	f7f9 b868 	b.w	d4096 <_Znwj>

000dafc6 <_ZnajRKSt9nothrow_t>:
   dafc6:	f7f9 b868 	b.w	d409a <_Znaj>

000dafca <_ZSt25__throw_bad_function_callv>:
   dafca:	b508      	push	{r3, lr}
   dafcc:	f7fc fe6c 	bl	d7ca8 <abort>

000dafd0 <__aeabi_drsub>:
   dafd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dafd4:	e002      	b.n	dafdc <__adddf3>
   dafd6:	bf00      	nop

000dafd8 <__aeabi_dsub>:
   dafd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dafdc <__adddf3>:
   dafdc:	b530      	push	{r4, r5, lr}
   dafde:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dafe2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dafe6:	ea94 0f05 	teq	r4, r5
   dafea:	bf08      	it	eq
   dafec:	ea90 0f02 	teqeq	r0, r2
   daff0:	bf1f      	itttt	ne
   daff2:	ea54 0c00 	orrsne.w	ip, r4, r0
   daff6:	ea55 0c02 	orrsne.w	ip, r5, r2
   daffa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   daffe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db002:	f000 80e2 	beq.w	db1ca <__adddf3+0x1ee>
   db006:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db00a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db00e:	bfb8      	it	lt
   db010:	426d      	neglt	r5, r5
   db012:	dd0c      	ble.n	db02e <__adddf3+0x52>
   db014:	442c      	add	r4, r5
   db016:	ea80 0202 	eor.w	r2, r0, r2
   db01a:	ea81 0303 	eor.w	r3, r1, r3
   db01e:	ea82 0000 	eor.w	r0, r2, r0
   db022:	ea83 0101 	eor.w	r1, r3, r1
   db026:	ea80 0202 	eor.w	r2, r0, r2
   db02a:	ea81 0303 	eor.w	r3, r1, r3
   db02e:	2d36      	cmp	r5, #54	; 0x36
   db030:	bf88      	it	hi
   db032:	bd30      	pophi	{r4, r5, pc}
   db034:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db038:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db03c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db040:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db044:	d002      	beq.n	db04c <__adddf3+0x70>
   db046:	4240      	negs	r0, r0
   db048:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db04c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db050:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db054:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db058:	d002      	beq.n	db060 <__adddf3+0x84>
   db05a:	4252      	negs	r2, r2
   db05c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db060:	ea94 0f05 	teq	r4, r5
   db064:	f000 80a7 	beq.w	db1b6 <__adddf3+0x1da>
   db068:	f1a4 0401 	sub.w	r4, r4, #1
   db06c:	f1d5 0e20 	rsbs	lr, r5, #32
   db070:	db0d      	blt.n	db08e <__adddf3+0xb2>
   db072:	fa02 fc0e 	lsl.w	ip, r2, lr
   db076:	fa22 f205 	lsr.w	r2, r2, r5
   db07a:	1880      	adds	r0, r0, r2
   db07c:	f141 0100 	adc.w	r1, r1, #0
   db080:	fa03 f20e 	lsl.w	r2, r3, lr
   db084:	1880      	adds	r0, r0, r2
   db086:	fa43 f305 	asr.w	r3, r3, r5
   db08a:	4159      	adcs	r1, r3
   db08c:	e00e      	b.n	db0ac <__adddf3+0xd0>
   db08e:	f1a5 0520 	sub.w	r5, r5, #32
   db092:	f10e 0e20 	add.w	lr, lr, #32
   db096:	2a01      	cmp	r2, #1
   db098:	fa03 fc0e 	lsl.w	ip, r3, lr
   db09c:	bf28      	it	cs
   db09e:	f04c 0c02 	orrcs.w	ip, ip, #2
   db0a2:	fa43 f305 	asr.w	r3, r3, r5
   db0a6:	18c0      	adds	r0, r0, r3
   db0a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db0ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db0b0:	d507      	bpl.n	db0c2 <__adddf3+0xe6>
   db0b2:	f04f 0e00 	mov.w	lr, #0
   db0b6:	f1dc 0c00 	rsbs	ip, ip, #0
   db0ba:	eb7e 0000 	sbcs.w	r0, lr, r0
   db0be:	eb6e 0101 	sbc.w	r1, lr, r1
   db0c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db0c6:	d31b      	bcc.n	db100 <__adddf3+0x124>
   db0c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db0cc:	d30c      	bcc.n	db0e8 <__adddf3+0x10c>
   db0ce:	0849      	lsrs	r1, r1, #1
   db0d0:	ea5f 0030 	movs.w	r0, r0, rrx
   db0d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db0d8:	f104 0401 	add.w	r4, r4, #1
   db0dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db0e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db0e4:	f080 809a 	bcs.w	db21c <__adddf3+0x240>
   db0e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db0ec:	bf08      	it	eq
   db0ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db0f2:	f150 0000 	adcs.w	r0, r0, #0
   db0f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db0fa:	ea41 0105 	orr.w	r1, r1, r5
   db0fe:	bd30      	pop	{r4, r5, pc}
   db100:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db104:	4140      	adcs	r0, r0
   db106:	eb41 0101 	adc.w	r1, r1, r1
   db10a:	3c01      	subs	r4, #1
   db10c:	bf28      	it	cs
   db10e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db112:	d2e9      	bcs.n	db0e8 <__adddf3+0x10c>
   db114:	f091 0f00 	teq	r1, #0
   db118:	bf04      	itt	eq
   db11a:	4601      	moveq	r1, r0
   db11c:	2000      	moveq	r0, #0
   db11e:	fab1 f381 	clz	r3, r1
   db122:	bf08      	it	eq
   db124:	3320      	addeq	r3, #32
   db126:	f1a3 030b 	sub.w	r3, r3, #11
   db12a:	f1b3 0220 	subs.w	r2, r3, #32
   db12e:	da0c      	bge.n	db14a <__adddf3+0x16e>
   db130:	320c      	adds	r2, #12
   db132:	dd08      	ble.n	db146 <__adddf3+0x16a>
   db134:	f102 0c14 	add.w	ip, r2, #20
   db138:	f1c2 020c 	rsb	r2, r2, #12
   db13c:	fa01 f00c 	lsl.w	r0, r1, ip
   db140:	fa21 f102 	lsr.w	r1, r1, r2
   db144:	e00c      	b.n	db160 <__adddf3+0x184>
   db146:	f102 0214 	add.w	r2, r2, #20
   db14a:	bfd8      	it	le
   db14c:	f1c2 0c20 	rsble	ip, r2, #32
   db150:	fa01 f102 	lsl.w	r1, r1, r2
   db154:	fa20 fc0c 	lsr.w	ip, r0, ip
   db158:	bfdc      	itt	le
   db15a:	ea41 010c 	orrle.w	r1, r1, ip
   db15e:	4090      	lslle	r0, r2
   db160:	1ae4      	subs	r4, r4, r3
   db162:	bfa2      	ittt	ge
   db164:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db168:	4329      	orrge	r1, r5
   db16a:	bd30      	popge	{r4, r5, pc}
   db16c:	ea6f 0404 	mvn.w	r4, r4
   db170:	3c1f      	subs	r4, #31
   db172:	da1c      	bge.n	db1ae <__adddf3+0x1d2>
   db174:	340c      	adds	r4, #12
   db176:	dc0e      	bgt.n	db196 <__adddf3+0x1ba>
   db178:	f104 0414 	add.w	r4, r4, #20
   db17c:	f1c4 0220 	rsb	r2, r4, #32
   db180:	fa20 f004 	lsr.w	r0, r0, r4
   db184:	fa01 f302 	lsl.w	r3, r1, r2
   db188:	ea40 0003 	orr.w	r0, r0, r3
   db18c:	fa21 f304 	lsr.w	r3, r1, r4
   db190:	ea45 0103 	orr.w	r1, r5, r3
   db194:	bd30      	pop	{r4, r5, pc}
   db196:	f1c4 040c 	rsb	r4, r4, #12
   db19a:	f1c4 0220 	rsb	r2, r4, #32
   db19e:	fa20 f002 	lsr.w	r0, r0, r2
   db1a2:	fa01 f304 	lsl.w	r3, r1, r4
   db1a6:	ea40 0003 	orr.w	r0, r0, r3
   db1aa:	4629      	mov	r1, r5
   db1ac:	bd30      	pop	{r4, r5, pc}
   db1ae:	fa21 f004 	lsr.w	r0, r1, r4
   db1b2:	4629      	mov	r1, r5
   db1b4:	bd30      	pop	{r4, r5, pc}
   db1b6:	f094 0f00 	teq	r4, #0
   db1ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db1be:	bf06      	itte	eq
   db1c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db1c4:	3401      	addeq	r4, #1
   db1c6:	3d01      	subne	r5, #1
   db1c8:	e74e      	b.n	db068 <__adddf3+0x8c>
   db1ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db1ce:	bf18      	it	ne
   db1d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db1d4:	d029      	beq.n	db22a <__adddf3+0x24e>
   db1d6:	ea94 0f05 	teq	r4, r5
   db1da:	bf08      	it	eq
   db1dc:	ea90 0f02 	teqeq	r0, r2
   db1e0:	d005      	beq.n	db1ee <__adddf3+0x212>
   db1e2:	ea54 0c00 	orrs.w	ip, r4, r0
   db1e6:	bf04      	itt	eq
   db1e8:	4619      	moveq	r1, r3
   db1ea:	4610      	moveq	r0, r2
   db1ec:	bd30      	pop	{r4, r5, pc}
   db1ee:	ea91 0f03 	teq	r1, r3
   db1f2:	bf1e      	ittt	ne
   db1f4:	2100      	movne	r1, #0
   db1f6:	2000      	movne	r0, #0
   db1f8:	bd30      	popne	{r4, r5, pc}
   db1fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db1fe:	d105      	bne.n	db20c <__adddf3+0x230>
   db200:	0040      	lsls	r0, r0, #1
   db202:	4149      	adcs	r1, r1
   db204:	bf28      	it	cs
   db206:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db20a:	bd30      	pop	{r4, r5, pc}
   db20c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db210:	bf3c      	itt	cc
   db212:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db216:	bd30      	popcc	{r4, r5, pc}
   db218:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db21c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db220:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db224:	f04f 0000 	mov.w	r0, #0
   db228:	bd30      	pop	{r4, r5, pc}
   db22a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db22e:	bf1a      	itte	ne
   db230:	4619      	movne	r1, r3
   db232:	4610      	movne	r0, r2
   db234:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db238:	bf1c      	itt	ne
   db23a:	460b      	movne	r3, r1
   db23c:	4602      	movne	r2, r0
   db23e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db242:	bf06      	itte	eq
   db244:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db248:	ea91 0f03 	teqeq	r1, r3
   db24c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db250:	bd30      	pop	{r4, r5, pc}
   db252:	bf00      	nop

000db254 <__aeabi_ui2d>:
   db254:	f090 0f00 	teq	r0, #0
   db258:	bf04      	itt	eq
   db25a:	2100      	moveq	r1, #0
   db25c:	4770      	bxeq	lr
   db25e:	b530      	push	{r4, r5, lr}
   db260:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db264:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db268:	f04f 0500 	mov.w	r5, #0
   db26c:	f04f 0100 	mov.w	r1, #0
   db270:	e750      	b.n	db114 <__adddf3+0x138>
   db272:	bf00      	nop

000db274 <__aeabi_i2d>:
   db274:	f090 0f00 	teq	r0, #0
   db278:	bf04      	itt	eq
   db27a:	2100      	moveq	r1, #0
   db27c:	4770      	bxeq	lr
   db27e:	b530      	push	{r4, r5, lr}
   db280:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db284:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db288:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db28c:	bf48      	it	mi
   db28e:	4240      	negmi	r0, r0
   db290:	f04f 0100 	mov.w	r1, #0
   db294:	e73e      	b.n	db114 <__adddf3+0x138>
   db296:	bf00      	nop

000db298 <__aeabi_f2d>:
   db298:	0042      	lsls	r2, r0, #1
   db29a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db29e:	ea4f 0131 	mov.w	r1, r1, rrx
   db2a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db2a6:	bf1f      	itttt	ne
   db2a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db2ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db2b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db2b4:	4770      	bxne	lr
   db2b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db2ba:	bf08      	it	eq
   db2bc:	4770      	bxeq	lr
   db2be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db2c2:	bf04      	itt	eq
   db2c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db2c8:	4770      	bxeq	lr
   db2ca:	b530      	push	{r4, r5, lr}
   db2cc:	f44f 7460 	mov.w	r4, #896	; 0x380
   db2d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db2d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db2d8:	e71c      	b.n	db114 <__adddf3+0x138>
   db2da:	bf00      	nop

000db2dc <__aeabi_ul2d>:
   db2dc:	ea50 0201 	orrs.w	r2, r0, r1
   db2e0:	bf08      	it	eq
   db2e2:	4770      	bxeq	lr
   db2e4:	b530      	push	{r4, r5, lr}
   db2e6:	f04f 0500 	mov.w	r5, #0
   db2ea:	e00a      	b.n	db302 <__aeabi_l2d+0x16>

000db2ec <__aeabi_l2d>:
   db2ec:	ea50 0201 	orrs.w	r2, r0, r1
   db2f0:	bf08      	it	eq
   db2f2:	4770      	bxeq	lr
   db2f4:	b530      	push	{r4, r5, lr}
   db2f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db2fa:	d502      	bpl.n	db302 <__aeabi_l2d+0x16>
   db2fc:	4240      	negs	r0, r0
   db2fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db302:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db306:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db30a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db30e:	f43f aed8 	beq.w	db0c2 <__adddf3+0xe6>
   db312:	f04f 0203 	mov.w	r2, #3
   db316:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db31a:	bf18      	it	ne
   db31c:	3203      	addne	r2, #3
   db31e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db322:	bf18      	it	ne
   db324:	3203      	addne	r2, #3
   db326:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db32a:	f1c2 0320 	rsb	r3, r2, #32
   db32e:	fa00 fc03 	lsl.w	ip, r0, r3
   db332:	fa20 f002 	lsr.w	r0, r0, r2
   db336:	fa01 fe03 	lsl.w	lr, r1, r3
   db33a:	ea40 000e 	orr.w	r0, r0, lr
   db33e:	fa21 f102 	lsr.w	r1, r1, r2
   db342:	4414      	add	r4, r2
   db344:	e6bd      	b.n	db0c2 <__adddf3+0xe6>
   db346:	bf00      	nop

000db348 <__aeabi_dmul>:
   db348:	b570      	push	{r4, r5, r6, lr}
   db34a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db34e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db352:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db356:	bf1d      	ittte	ne
   db358:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db35c:	ea94 0f0c 	teqne	r4, ip
   db360:	ea95 0f0c 	teqne	r5, ip
   db364:	f000 f8de 	bleq	db524 <__aeabi_dmul+0x1dc>
   db368:	442c      	add	r4, r5
   db36a:	ea81 0603 	eor.w	r6, r1, r3
   db36e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db372:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db376:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db37a:	bf18      	it	ne
   db37c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db380:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db388:	d038      	beq.n	db3fc <__aeabi_dmul+0xb4>
   db38a:	fba0 ce02 	umull	ip, lr, r0, r2
   db38e:	f04f 0500 	mov.w	r5, #0
   db392:	fbe1 e502 	umlal	lr, r5, r1, r2
   db396:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db39a:	fbe0 e503 	umlal	lr, r5, r0, r3
   db39e:	f04f 0600 	mov.w	r6, #0
   db3a2:	fbe1 5603 	umlal	r5, r6, r1, r3
   db3a6:	f09c 0f00 	teq	ip, #0
   db3aa:	bf18      	it	ne
   db3ac:	f04e 0e01 	orrne.w	lr, lr, #1
   db3b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db3b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db3b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db3bc:	d204      	bcs.n	db3c8 <__aeabi_dmul+0x80>
   db3be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db3c2:	416d      	adcs	r5, r5
   db3c4:	eb46 0606 	adc.w	r6, r6, r6
   db3c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db3cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db3d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db3d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db3d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db3dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db3e0:	bf88      	it	hi
   db3e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db3e6:	d81e      	bhi.n	db426 <__aeabi_dmul+0xde>
   db3e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db3ec:	bf08      	it	eq
   db3ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db3f2:	f150 0000 	adcs.w	r0, r0, #0
   db3f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db3fa:	bd70      	pop	{r4, r5, r6, pc}
   db3fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db400:	ea46 0101 	orr.w	r1, r6, r1
   db404:	ea40 0002 	orr.w	r0, r0, r2
   db408:	ea81 0103 	eor.w	r1, r1, r3
   db40c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db410:	bfc2      	ittt	gt
   db412:	ebd4 050c 	rsbsgt	r5, r4, ip
   db416:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db41a:	bd70      	popgt	{r4, r5, r6, pc}
   db41c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db420:	f04f 0e00 	mov.w	lr, #0
   db424:	3c01      	subs	r4, #1
   db426:	f300 80ab 	bgt.w	db580 <__aeabi_dmul+0x238>
   db42a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db42e:	bfde      	ittt	le
   db430:	2000      	movle	r0, #0
   db432:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db436:	bd70      	pople	{r4, r5, r6, pc}
   db438:	f1c4 0400 	rsb	r4, r4, #0
   db43c:	3c20      	subs	r4, #32
   db43e:	da35      	bge.n	db4ac <__aeabi_dmul+0x164>
   db440:	340c      	adds	r4, #12
   db442:	dc1b      	bgt.n	db47c <__aeabi_dmul+0x134>
   db444:	f104 0414 	add.w	r4, r4, #20
   db448:	f1c4 0520 	rsb	r5, r4, #32
   db44c:	fa00 f305 	lsl.w	r3, r0, r5
   db450:	fa20 f004 	lsr.w	r0, r0, r4
   db454:	fa01 f205 	lsl.w	r2, r1, r5
   db458:	ea40 0002 	orr.w	r0, r0, r2
   db45c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db464:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db468:	fa21 f604 	lsr.w	r6, r1, r4
   db46c:	eb42 0106 	adc.w	r1, r2, r6
   db470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db474:	bf08      	it	eq
   db476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db47a:	bd70      	pop	{r4, r5, r6, pc}
   db47c:	f1c4 040c 	rsb	r4, r4, #12
   db480:	f1c4 0520 	rsb	r5, r4, #32
   db484:	fa00 f304 	lsl.w	r3, r0, r4
   db488:	fa20 f005 	lsr.w	r0, r0, r5
   db48c:	fa01 f204 	lsl.w	r2, r1, r4
   db490:	ea40 0002 	orr.w	r0, r0, r2
   db494:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db498:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db49c:	f141 0100 	adc.w	r1, r1, #0
   db4a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db4a4:	bf08      	it	eq
   db4a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db4aa:	bd70      	pop	{r4, r5, r6, pc}
   db4ac:	f1c4 0520 	rsb	r5, r4, #32
   db4b0:	fa00 f205 	lsl.w	r2, r0, r5
   db4b4:	ea4e 0e02 	orr.w	lr, lr, r2
   db4b8:	fa20 f304 	lsr.w	r3, r0, r4
   db4bc:	fa01 f205 	lsl.w	r2, r1, r5
   db4c0:	ea43 0302 	orr.w	r3, r3, r2
   db4c4:	fa21 f004 	lsr.w	r0, r1, r4
   db4c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db4cc:	fa21 f204 	lsr.w	r2, r1, r4
   db4d0:	ea20 0002 	bic.w	r0, r0, r2
   db4d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db4d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db4dc:	bf08      	it	eq
   db4de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db4e2:	bd70      	pop	{r4, r5, r6, pc}
   db4e4:	f094 0f00 	teq	r4, #0
   db4e8:	d10f      	bne.n	db50a <__aeabi_dmul+0x1c2>
   db4ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db4ee:	0040      	lsls	r0, r0, #1
   db4f0:	eb41 0101 	adc.w	r1, r1, r1
   db4f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db4f8:	bf08      	it	eq
   db4fa:	3c01      	subeq	r4, #1
   db4fc:	d0f7      	beq.n	db4ee <__aeabi_dmul+0x1a6>
   db4fe:	ea41 0106 	orr.w	r1, r1, r6
   db502:	f095 0f00 	teq	r5, #0
   db506:	bf18      	it	ne
   db508:	4770      	bxne	lr
   db50a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db50e:	0052      	lsls	r2, r2, #1
   db510:	eb43 0303 	adc.w	r3, r3, r3
   db514:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db518:	bf08      	it	eq
   db51a:	3d01      	subeq	r5, #1
   db51c:	d0f7      	beq.n	db50e <__aeabi_dmul+0x1c6>
   db51e:	ea43 0306 	orr.w	r3, r3, r6
   db522:	4770      	bx	lr
   db524:	ea94 0f0c 	teq	r4, ip
   db528:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db52c:	bf18      	it	ne
   db52e:	ea95 0f0c 	teqne	r5, ip
   db532:	d00c      	beq.n	db54e <__aeabi_dmul+0x206>
   db534:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db538:	bf18      	it	ne
   db53a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db53e:	d1d1      	bne.n	db4e4 <__aeabi_dmul+0x19c>
   db540:	ea81 0103 	eor.w	r1, r1, r3
   db544:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db548:	f04f 0000 	mov.w	r0, #0
   db54c:	bd70      	pop	{r4, r5, r6, pc}
   db54e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db552:	bf06      	itte	eq
   db554:	4610      	moveq	r0, r2
   db556:	4619      	moveq	r1, r3
   db558:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db55c:	d019      	beq.n	db592 <__aeabi_dmul+0x24a>
   db55e:	ea94 0f0c 	teq	r4, ip
   db562:	d102      	bne.n	db56a <__aeabi_dmul+0x222>
   db564:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db568:	d113      	bne.n	db592 <__aeabi_dmul+0x24a>
   db56a:	ea95 0f0c 	teq	r5, ip
   db56e:	d105      	bne.n	db57c <__aeabi_dmul+0x234>
   db570:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db574:	bf1c      	itt	ne
   db576:	4610      	movne	r0, r2
   db578:	4619      	movne	r1, r3
   db57a:	d10a      	bne.n	db592 <__aeabi_dmul+0x24a>
   db57c:	ea81 0103 	eor.w	r1, r1, r3
   db580:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db584:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db588:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db58c:	f04f 0000 	mov.w	r0, #0
   db590:	bd70      	pop	{r4, r5, r6, pc}
   db592:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db596:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db59a:	bd70      	pop	{r4, r5, r6, pc}

000db59c <__aeabi_ddiv>:
   db59c:	b570      	push	{r4, r5, r6, lr}
   db59e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db5a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db5a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db5aa:	bf1d      	ittte	ne
   db5ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db5b0:	ea94 0f0c 	teqne	r4, ip
   db5b4:	ea95 0f0c 	teqne	r5, ip
   db5b8:	f000 f8a7 	bleq	db70a <__aeabi_ddiv+0x16e>
   db5bc:	eba4 0405 	sub.w	r4, r4, r5
   db5c0:	ea81 0e03 	eor.w	lr, r1, r3
   db5c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db5c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db5cc:	f000 8088 	beq.w	db6e0 <__aeabi_ddiv+0x144>
   db5d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db5d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db5d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db5dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db5e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db5e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db5e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db5ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db5f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db5f4:	429d      	cmp	r5, r3
   db5f6:	bf08      	it	eq
   db5f8:	4296      	cmpeq	r6, r2
   db5fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db5fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db602:	d202      	bcs.n	db60a <__aeabi_ddiv+0x6e>
   db604:	085b      	lsrs	r3, r3, #1
   db606:	ea4f 0232 	mov.w	r2, r2, rrx
   db60a:	1ab6      	subs	r6, r6, r2
   db60c:	eb65 0503 	sbc.w	r5, r5, r3
   db610:	085b      	lsrs	r3, r3, #1
   db612:	ea4f 0232 	mov.w	r2, r2, rrx
   db616:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db61a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db61e:	ebb6 0e02 	subs.w	lr, r6, r2
   db622:	eb75 0e03 	sbcs.w	lr, r5, r3
   db626:	bf22      	ittt	cs
   db628:	1ab6      	subcs	r6, r6, r2
   db62a:	4675      	movcs	r5, lr
   db62c:	ea40 000c 	orrcs.w	r0, r0, ip
   db630:	085b      	lsrs	r3, r3, #1
   db632:	ea4f 0232 	mov.w	r2, r2, rrx
   db636:	ebb6 0e02 	subs.w	lr, r6, r2
   db63a:	eb75 0e03 	sbcs.w	lr, r5, r3
   db63e:	bf22      	ittt	cs
   db640:	1ab6      	subcs	r6, r6, r2
   db642:	4675      	movcs	r5, lr
   db644:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db648:	085b      	lsrs	r3, r3, #1
   db64a:	ea4f 0232 	mov.w	r2, r2, rrx
   db64e:	ebb6 0e02 	subs.w	lr, r6, r2
   db652:	eb75 0e03 	sbcs.w	lr, r5, r3
   db656:	bf22      	ittt	cs
   db658:	1ab6      	subcs	r6, r6, r2
   db65a:	4675      	movcs	r5, lr
   db65c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db660:	085b      	lsrs	r3, r3, #1
   db662:	ea4f 0232 	mov.w	r2, r2, rrx
   db666:	ebb6 0e02 	subs.w	lr, r6, r2
   db66a:	eb75 0e03 	sbcs.w	lr, r5, r3
   db66e:	bf22      	ittt	cs
   db670:	1ab6      	subcs	r6, r6, r2
   db672:	4675      	movcs	r5, lr
   db674:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db678:	ea55 0e06 	orrs.w	lr, r5, r6
   db67c:	d018      	beq.n	db6b0 <__aeabi_ddiv+0x114>
   db67e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db682:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db686:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db68a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db68e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db692:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db696:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db69a:	d1c0      	bne.n	db61e <__aeabi_ddiv+0x82>
   db69c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db6a0:	d10b      	bne.n	db6ba <__aeabi_ddiv+0x11e>
   db6a2:	ea41 0100 	orr.w	r1, r1, r0
   db6a6:	f04f 0000 	mov.w	r0, #0
   db6aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db6ae:	e7b6      	b.n	db61e <__aeabi_ddiv+0x82>
   db6b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db6b4:	bf04      	itt	eq
   db6b6:	4301      	orreq	r1, r0
   db6b8:	2000      	moveq	r0, #0
   db6ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db6be:	bf88      	it	hi
   db6c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db6c4:	f63f aeaf 	bhi.w	db426 <__aeabi_dmul+0xde>
   db6c8:	ebb5 0c03 	subs.w	ip, r5, r3
   db6cc:	bf04      	itt	eq
   db6ce:	ebb6 0c02 	subseq.w	ip, r6, r2
   db6d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db6d6:	f150 0000 	adcs.w	r0, r0, #0
   db6da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db6de:	bd70      	pop	{r4, r5, r6, pc}
   db6e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db6e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db6e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db6ec:	bfc2      	ittt	gt
   db6ee:	ebd4 050c 	rsbsgt	r5, r4, ip
   db6f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db6f6:	bd70      	popgt	{r4, r5, r6, pc}
   db6f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db6fc:	f04f 0e00 	mov.w	lr, #0
   db700:	3c01      	subs	r4, #1
   db702:	e690      	b.n	db426 <__aeabi_dmul+0xde>
   db704:	ea45 0e06 	orr.w	lr, r5, r6
   db708:	e68d      	b.n	db426 <__aeabi_dmul+0xde>
   db70a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db70e:	ea94 0f0c 	teq	r4, ip
   db712:	bf08      	it	eq
   db714:	ea95 0f0c 	teqeq	r5, ip
   db718:	f43f af3b 	beq.w	db592 <__aeabi_dmul+0x24a>
   db71c:	ea94 0f0c 	teq	r4, ip
   db720:	d10a      	bne.n	db738 <__aeabi_ddiv+0x19c>
   db722:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db726:	f47f af34 	bne.w	db592 <__aeabi_dmul+0x24a>
   db72a:	ea95 0f0c 	teq	r5, ip
   db72e:	f47f af25 	bne.w	db57c <__aeabi_dmul+0x234>
   db732:	4610      	mov	r0, r2
   db734:	4619      	mov	r1, r3
   db736:	e72c      	b.n	db592 <__aeabi_dmul+0x24a>
   db738:	ea95 0f0c 	teq	r5, ip
   db73c:	d106      	bne.n	db74c <__aeabi_ddiv+0x1b0>
   db73e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db742:	f43f aefd 	beq.w	db540 <__aeabi_dmul+0x1f8>
   db746:	4610      	mov	r0, r2
   db748:	4619      	mov	r1, r3
   db74a:	e722      	b.n	db592 <__aeabi_dmul+0x24a>
   db74c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db750:	bf18      	it	ne
   db752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db756:	f47f aec5 	bne.w	db4e4 <__aeabi_dmul+0x19c>
   db75a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db75e:	f47f af0d 	bne.w	db57c <__aeabi_dmul+0x234>
   db762:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db766:	f47f aeeb 	bne.w	db540 <__aeabi_dmul+0x1f8>
   db76a:	e712      	b.n	db592 <__aeabi_dmul+0x24a>

000db76c <__gedf2>:
   db76c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   db770:	e006      	b.n	db780 <__cmpdf2+0x4>
   db772:	bf00      	nop

000db774 <__ledf2>:
   db774:	f04f 0c01 	mov.w	ip, #1
   db778:	e002      	b.n	db780 <__cmpdf2+0x4>
   db77a:	bf00      	nop

000db77c <__cmpdf2>:
   db77c:	f04f 0c01 	mov.w	ip, #1
   db780:	f84d cd04 	str.w	ip, [sp, #-4]!
   db784:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db788:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db78c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db790:	bf18      	it	ne
   db792:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   db796:	d01b      	beq.n	db7d0 <__cmpdf2+0x54>
   db798:	b001      	add	sp, #4
   db79a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   db79e:	bf0c      	ite	eq
   db7a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   db7a4:	ea91 0f03 	teqne	r1, r3
   db7a8:	bf02      	ittt	eq
   db7aa:	ea90 0f02 	teqeq	r0, r2
   db7ae:	2000      	moveq	r0, #0
   db7b0:	4770      	bxeq	lr
   db7b2:	f110 0f00 	cmn.w	r0, #0
   db7b6:	ea91 0f03 	teq	r1, r3
   db7ba:	bf58      	it	pl
   db7bc:	4299      	cmppl	r1, r3
   db7be:	bf08      	it	eq
   db7c0:	4290      	cmpeq	r0, r2
   db7c2:	bf2c      	ite	cs
   db7c4:	17d8      	asrcs	r0, r3, #31
   db7c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db7ca:	f040 0001 	orr.w	r0, r0, #1
   db7ce:	4770      	bx	lr
   db7d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db7d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db7d8:	d102      	bne.n	db7e0 <__cmpdf2+0x64>
   db7da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db7de:	d107      	bne.n	db7f0 <__cmpdf2+0x74>
   db7e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db7e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db7e8:	d1d6      	bne.n	db798 <__cmpdf2+0x1c>
   db7ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db7ee:	d0d3      	beq.n	db798 <__cmpdf2+0x1c>
   db7f0:	f85d 0b04 	ldr.w	r0, [sp], #4
   db7f4:	4770      	bx	lr
   db7f6:	bf00      	nop

000db7f8 <__aeabi_cdrcmple>:
   db7f8:	4684      	mov	ip, r0
   db7fa:	4610      	mov	r0, r2
   db7fc:	4662      	mov	r2, ip
   db7fe:	468c      	mov	ip, r1
   db800:	4619      	mov	r1, r3
   db802:	4663      	mov	r3, ip
   db804:	e000      	b.n	db808 <__aeabi_cdcmpeq>
   db806:	bf00      	nop

000db808 <__aeabi_cdcmpeq>:
   db808:	b501      	push	{r0, lr}
   db80a:	f7ff ffb7 	bl	db77c <__cmpdf2>
   db80e:	2800      	cmp	r0, #0
   db810:	bf48      	it	mi
   db812:	f110 0f00 	cmnmi.w	r0, #0
   db816:	bd01      	pop	{r0, pc}

000db818 <__aeabi_dcmpeq>:
   db818:	f84d ed08 	str.w	lr, [sp, #-8]!
   db81c:	f7ff fff4 	bl	db808 <__aeabi_cdcmpeq>
   db820:	bf0c      	ite	eq
   db822:	2001      	moveq	r0, #1
   db824:	2000      	movne	r0, #0
   db826:	f85d fb08 	ldr.w	pc, [sp], #8
   db82a:	bf00      	nop

000db82c <__aeabi_dcmplt>:
   db82c:	f84d ed08 	str.w	lr, [sp, #-8]!
   db830:	f7ff ffea 	bl	db808 <__aeabi_cdcmpeq>
   db834:	bf34      	ite	cc
   db836:	2001      	movcc	r0, #1
   db838:	2000      	movcs	r0, #0
   db83a:	f85d fb08 	ldr.w	pc, [sp], #8
   db83e:	bf00      	nop

000db840 <__aeabi_dcmple>:
   db840:	f84d ed08 	str.w	lr, [sp, #-8]!
   db844:	f7ff ffe0 	bl	db808 <__aeabi_cdcmpeq>
   db848:	bf94      	ite	ls
   db84a:	2001      	movls	r0, #1
   db84c:	2000      	movhi	r0, #0
   db84e:	f85d fb08 	ldr.w	pc, [sp], #8
   db852:	bf00      	nop

000db854 <__aeabi_dcmpge>:
   db854:	f84d ed08 	str.w	lr, [sp, #-8]!
   db858:	f7ff ffce 	bl	db7f8 <__aeabi_cdrcmple>
   db85c:	bf94      	ite	ls
   db85e:	2001      	movls	r0, #1
   db860:	2000      	movhi	r0, #0
   db862:	f85d fb08 	ldr.w	pc, [sp], #8
   db866:	bf00      	nop

000db868 <__aeabi_dcmpgt>:
   db868:	f84d ed08 	str.w	lr, [sp, #-8]!
   db86c:	f7ff ffc4 	bl	db7f8 <__aeabi_cdrcmple>
   db870:	bf34      	ite	cc
   db872:	2001      	movcc	r0, #1
   db874:	2000      	movcs	r0, #0
   db876:	f85d fb08 	ldr.w	pc, [sp], #8
   db87a:	bf00      	nop

000db87c <__aeabi_dcmpun>:
   db87c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db884:	d102      	bne.n	db88c <__aeabi_dcmpun+0x10>
   db886:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db88a:	d10a      	bne.n	db8a2 <__aeabi_dcmpun+0x26>
   db88c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db894:	d102      	bne.n	db89c <__aeabi_dcmpun+0x20>
   db896:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db89a:	d102      	bne.n	db8a2 <__aeabi_dcmpun+0x26>
   db89c:	f04f 0000 	mov.w	r0, #0
   db8a0:	4770      	bx	lr
   db8a2:	f04f 0001 	mov.w	r0, #1
   db8a6:	4770      	bx	lr

000db8a8 <__aeabi_d2iz>:
   db8a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db8ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db8b0:	d215      	bcs.n	db8de <__aeabi_d2iz+0x36>
   db8b2:	d511      	bpl.n	db8d8 <__aeabi_d2iz+0x30>
   db8b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db8b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db8bc:	d912      	bls.n	db8e4 <__aeabi_d2iz+0x3c>
   db8be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db8c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db8c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db8ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db8ce:	fa23 f002 	lsr.w	r0, r3, r2
   db8d2:	bf18      	it	ne
   db8d4:	4240      	negne	r0, r0
   db8d6:	4770      	bx	lr
   db8d8:	f04f 0000 	mov.w	r0, #0
   db8dc:	4770      	bx	lr
   db8de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db8e2:	d105      	bne.n	db8f0 <__aeabi_d2iz+0x48>
   db8e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   db8e8:	bf08      	it	eq
   db8ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db8ee:	4770      	bx	lr
   db8f0:	f04f 0000 	mov.w	r0, #0
   db8f4:	4770      	bx	lr
   db8f6:	bf00      	nop

000db8f8 <__aeabi_d2uiz>:
   db8f8:	004a      	lsls	r2, r1, #1
   db8fa:	d211      	bcs.n	db920 <__aeabi_d2uiz+0x28>
   db8fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db900:	d211      	bcs.n	db926 <__aeabi_d2uiz+0x2e>
   db902:	d50d      	bpl.n	db920 <__aeabi_d2uiz+0x28>
   db904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db90c:	d40e      	bmi.n	db92c <__aeabi_d2uiz+0x34>
   db90e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db91a:	fa23 f002 	lsr.w	r0, r3, r2
   db91e:	4770      	bx	lr
   db920:	f04f 0000 	mov.w	r0, #0
   db924:	4770      	bx	lr
   db926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db92a:	d102      	bne.n	db932 <__aeabi_d2uiz+0x3a>
   db92c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db930:	4770      	bx	lr
   db932:	f04f 0000 	mov.w	r0, #0
   db936:	4770      	bx	lr

000db938 <__aeabi_d2f>:
   db938:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db93c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db940:	bf24      	itt	cs
   db942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db94a:	d90d      	bls.n	db968 <__aeabi_d2f+0x30>
   db94c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db95c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db960:	bf08      	it	eq
   db962:	f020 0001 	biceq.w	r0, r0, #1
   db966:	4770      	bx	lr
   db968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db96c:	d121      	bne.n	db9b2 <__aeabi_d2f+0x7a>
   db96e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db972:	bfbc      	itt	lt
   db974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db978:	4770      	bxlt	lr
   db97a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db97e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db982:	f1c2 0218 	rsb	r2, r2, #24
   db986:	f1c2 0c20 	rsb	ip, r2, #32
   db98a:	fa10 f30c 	lsls.w	r3, r0, ip
   db98e:	fa20 f002 	lsr.w	r0, r0, r2
   db992:	bf18      	it	ne
   db994:	f040 0001 	orrne.w	r0, r0, #1
   db998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db99c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db9a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   db9a4:	ea40 000c 	orr.w	r0, r0, ip
   db9a8:	fa23 f302 	lsr.w	r3, r3, r2
   db9ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db9b0:	e7cc      	b.n	db94c <__aeabi_d2f+0x14>
   db9b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db9b6:	d107      	bne.n	db9c8 <__aeabi_d2f+0x90>
   db9b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db9bc:	bf1e      	ittt	ne
   db9be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db9c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db9c6:	4770      	bxne	lr
   db9c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db9cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db9d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db9d4:	4770      	bx	lr
   db9d6:	bf00      	nop

000db9d8 <__aeabi_f2lz>:
   db9d8:	ee07 0a90 	vmov	s15, r0
   db9dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   db9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db9e4:	d401      	bmi.n	db9ea <__aeabi_f2lz+0x12>
   db9e6:	f000 b80b 	b.w	dba00 <__aeabi_f2ulz>
   db9ea:	eef1 7a67 	vneg.f32	s15, s15
   db9ee:	b508      	push	{r3, lr}
   db9f0:	ee17 0a90 	vmov	r0, s15
   db9f4:	f000 f804 	bl	dba00 <__aeabi_f2ulz>
   db9f8:	4240      	negs	r0, r0
   db9fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db9fe:	bd08      	pop	{r3, pc}

000dba00 <__aeabi_f2ulz>:
   dba00:	b5d0      	push	{r4, r6, r7, lr}
   dba02:	f7ff fc49 	bl	db298 <__aeabi_f2d>
   dba06:	4b0c      	ldr	r3, [pc, #48]	; (dba38 <__aeabi_f2ulz+0x38>)
   dba08:	2200      	movs	r2, #0
   dba0a:	4606      	mov	r6, r0
   dba0c:	460f      	mov	r7, r1
   dba0e:	f7ff fc9b 	bl	db348 <__aeabi_dmul>
   dba12:	f7ff ff71 	bl	db8f8 <__aeabi_d2uiz>
   dba16:	4604      	mov	r4, r0
   dba18:	f7ff fc1c 	bl	db254 <__aeabi_ui2d>
   dba1c:	4b07      	ldr	r3, [pc, #28]	; (dba3c <__aeabi_f2ulz+0x3c>)
   dba1e:	2200      	movs	r2, #0
   dba20:	f7ff fc92 	bl	db348 <__aeabi_dmul>
   dba24:	4602      	mov	r2, r0
   dba26:	460b      	mov	r3, r1
   dba28:	4630      	mov	r0, r6
   dba2a:	4639      	mov	r1, r7
   dba2c:	f7ff fad4 	bl	dafd8 <__aeabi_dsub>
   dba30:	f7ff ff62 	bl	db8f8 <__aeabi_d2uiz>
   dba34:	4621      	mov	r1, r4
   dba36:	bdd0      	pop	{r4, r6, r7, pc}
   dba38:	3df00000 	.word	0x3df00000
   dba3c:	41f00000 	.word	0x41f00000

000dba40 <__aeabi_d2ulz>:
   dba40:	b5d0      	push	{r4, r6, r7, lr}
   dba42:	4b0c      	ldr	r3, [pc, #48]	; (dba74 <__aeabi_d2ulz+0x34>)
   dba44:	2200      	movs	r2, #0
   dba46:	4606      	mov	r6, r0
   dba48:	460f      	mov	r7, r1
   dba4a:	f7ff fc7d 	bl	db348 <__aeabi_dmul>
   dba4e:	f7ff ff53 	bl	db8f8 <__aeabi_d2uiz>
   dba52:	4604      	mov	r4, r0
   dba54:	f7ff fbfe 	bl	db254 <__aeabi_ui2d>
   dba58:	4b07      	ldr	r3, [pc, #28]	; (dba78 <__aeabi_d2ulz+0x38>)
   dba5a:	2200      	movs	r2, #0
   dba5c:	f7ff fc74 	bl	db348 <__aeabi_dmul>
   dba60:	4602      	mov	r2, r0
   dba62:	460b      	mov	r3, r1
   dba64:	4630      	mov	r0, r6
   dba66:	4639      	mov	r1, r7
   dba68:	f7ff fab6 	bl	dafd8 <__aeabi_dsub>
   dba6c:	f7ff ff44 	bl	db8f8 <__aeabi_d2uiz>
   dba70:	4621      	mov	r1, r4
   dba72:	bdd0      	pop	{r4, r6, r7, pc}
   dba74:	3df00000 	.word	0x3df00000
   dba78:	41f00000 	.word	0x41f00000

000dba7c <asctime_r>:
   dba7c:	b510      	push	{r4, lr}
   dba7e:	460c      	mov	r4, r1
   dba80:	6941      	ldr	r1, [r0, #20]
   dba82:	6903      	ldr	r3, [r0, #16]
   dba84:	6982      	ldr	r2, [r0, #24]
   dba86:	b086      	sub	sp, #24
   dba88:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dba8c:	9104      	str	r1, [sp, #16]
   dba8e:	6801      	ldr	r1, [r0, #0]
   dba90:	9103      	str	r1, [sp, #12]
   dba92:	6841      	ldr	r1, [r0, #4]
   dba94:	9102      	str	r1, [sp, #8]
   dba96:	6881      	ldr	r1, [r0, #8]
   dba98:	9101      	str	r1, [sp, #4]
   dba9a:	68c1      	ldr	r1, [r0, #12]
   dba9c:	9100      	str	r1, [sp, #0]
   dba9e:	4907      	ldr	r1, [pc, #28]	; (dbabc <asctime_r+0x40>)
   dbaa0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dbaa4:	440b      	add	r3, r1
   dbaa6:	4906      	ldr	r1, [pc, #24]	; (dbac0 <asctime_r+0x44>)
   dbaa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dbaac:	440a      	add	r2, r1
   dbaae:	4620      	mov	r0, r4
   dbab0:	4904      	ldr	r1, [pc, #16]	; (dbac4 <asctime_r+0x48>)
   dbab2:	f7fc f8e1 	bl	d7c78 <siprintf>
   dbab6:	4620      	mov	r0, r4
   dbab8:	b006      	add	sp, #24
   dbaba:	bd10      	pop	{r4, pc}
   dbabc:	000de7a2 	.word	0x000de7a2
   dbac0:	000de78d 	.word	0x000de78d
   dbac4:	000de76d 	.word	0x000de76d

000dbac8 <atoi>:
   dbac8:	220a      	movs	r2, #10
   dbaca:	2100      	movs	r1, #0
   dbacc:	f000 bff6 	b.w	dcabc <strtol>

000dbad0 <__cxa_atexit>:
   dbad0:	b510      	push	{r4, lr}
   dbad2:	4c05      	ldr	r4, [pc, #20]	; (dbae8 <__cxa_atexit+0x18>)
   dbad4:	4613      	mov	r3, r2
   dbad6:	b12c      	cbz	r4, dbae4 <__cxa_atexit+0x14>
   dbad8:	460a      	mov	r2, r1
   dbada:	4601      	mov	r1, r0
   dbadc:	2002      	movs	r0, #2
   dbade:	f3af 8000 	nop.w
   dbae2:	bd10      	pop	{r4, pc}
   dbae4:	4620      	mov	r0, r4
   dbae6:	e7fc      	b.n	dbae2 <__cxa_atexit+0x12>
   dbae8:	00000000 	.word	0x00000000

000dbaec <gmtime>:
   dbaec:	b538      	push	{r3, r4, r5, lr}
   dbaee:	4b07      	ldr	r3, [pc, #28]	; (dbb0c <gmtime+0x20>)
   dbaf0:	681d      	ldr	r5, [r3, #0]
   dbaf2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dbaf4:	4604      	mov	r4, r0
   dbaf6:	b91b      	cbnz	r3, dbb00 <gmtime+0x14>
   dbaf8:	2024      	movs	r0, #36	; 0x24
   dbafa:	f7fc f8a5 	bl	d7c48 <malloc>
   dbafe:	63e8      	str	r0, [r5, #60]	; 0x3c
   dbb00:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dbb02:	4620      	mov	r0, r4
   dbb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbb08:	f7fc b8f6 	b.w	d7cf8 <gmtime_r>
   dbb0c:	2003e1d8 	.word	0x2003e1d8

000dbb10 <memcpy>:
   dbb10:	440a      	add	r2, r1
   dbb12:	4291      	cmp	r1, r2
   dbb14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dbb18:	d100      	bne.n	dbb1c <memcpy+0xc>
   dbb1a:	4770      	bx	lr
   dbb1c:	b510      	push	{r4, lr}
   dbb1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbb22:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbb26:	4291      	cmp	r1, r2
   dbb28:	d1f9      	bne.n	dbb1e <memcpy+0xe>
   dbb2a:	bd10      	pop	{r4, pc}

000dbb2c <memmove>:
   dbb2c:	4288      	cmp	r0, r1
   dbb2e:	b510      	push	{r4, lr}
   dbb30:	eb01 0402 	add.w	r4, r1, r2
   dbb34:	d902      	bls.n	dbb3c <memmove+0x10>
   dbb36:	4284      	cmp	r4, r0
   dbb38:	4623      	mov	r3, r4
   dbb3a:	d807      	bhi.n	dbb4c <memmove+0x20>
   dbb3c:	1e43      	subs	r3, r0, #1
   dbb3e:	42a1      	cmp	r1, r4
   dbb40:	d008      	beq.n	dbb54 <memmove+0x28>
   dbb42:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbb46:	f803 2f01 	strb.w	r2, [r3, #1]!
   dbb4a:	e7f8      	b.n	dbb3e <memmove+0x12>
   dbb4c:	4402      	add	r2, r0
   dbb4e:	4601      	mov	r1, r0
   dbb50:	428a      	cmp	r2, r1
   dbb52:	d100      	bne.n	dbb56 <memmove+0x2a>
   dbb54:	bd10      	pop	{r4, pc}
   dbb56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dbb5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dbb5e:	e7f7      	b.n	dbb50 <memmove+0x24>

000dbb60 <memset>:
   dbb60:	4402      	add	r2, r0
   dbb62:	4603      	mov	r3, r0
   dbb64:	4293      	cmp	r3, r2
   dbb66:	d100      	bne.n	dbb6a <memset+0xa>
   dbb68:	4770      	bx	lr
   dbb6a:	f803 1b01 	strb.w	r1, [r3], #1
   dbb6e:	e7f9      	b.n	dbb64 <memset+0x4>

000dbb70 <srand>:
   dbb70:	b538      	push	{r3, r4, r5, lr}
   dbb72:	4b0d      	ldr	r3, [pc, #52]	; (dbba8 <srand+0x38>)
   dbb74:	681d      	ldr	r5, [r3, #0]
   dbb76:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbb78:	4604      	mov	r4, r0
   dbb7a:	b97b      	cbnz	r3, dbb9c <srand+0x2c>
   dbb7c:	2018      	movs	r0, #24
   dbb7e:	f7fc f863 	bl	d7c48 <malloc>
   dbb82:	4a0a      	ldr	r2, [pc, #40]	; (dbbac <srand+0x3c>)
   dbb84:	4b0a      	ldr	r3, [pc, #40]	; (dbbb0 <srand+0x40>)
   dbb86:	63a8      	str	r0, [r5, #56]	; 0x38
   dbb88:	e9c0 2300 	strd	r2, r3, [r0]
   dbb8c:	4b09      	ldr	r3, [pc, #36]	; (dbbb4 <srand+0x44>)
   dbb8e:	6083      	str	r3, [r0, #8]
   dbb90:	230b      	movs	r3, #11
   dbb92:	8183      	strh	r3, [r0, #12]
   dbb94:	2201      	movs	r2, #1
   dbb96:	2300      	movs	r3, #0
   dbb98:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbb9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbb9e:	2200      	movs	r2, #0
   dbba0:	611c      	str	r4, [r3, #16]
   dbba2:	615a      	str	r2, [r3, #20]
   dbba4:	bd38      	pop	{r3, r4, r5, pc}
   dbba6:	bf00      	nop
   dbba8:	2003e1d8 	.word	0x2003e1d8
   dbbac:	abcd330e 	.word	0xabcd330e
   dbbb0:	e66d1234 	.word	0xe66d1234
   dbbb4:	0005deec 	.word	0x0005deec

000dbbb8 <strchr>:
   dbbb8:	b2c9      	uxtb	r1, r1
   dbbba:	4603      	mov	r3, r0
   dbbbc:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbbc0:	b11a      	cbz	r2, dbbca <strchr+0x12>
   dbbc2:	428a      	cmp	r2, r1
   dbbc4:	d1f9      	bne.n	dbbba <strchr+0x2>
   dbbc6:	4618      	mov	r0, r3
   dbbc8:	4770      	bx	lr
   dbbca:	2900      	cmp	r1, #0
   dbbcc:	bf18      	it	ne
   dbbce:	2300      	movne	r3, #0
   dbbd0:	e7f9      	b.n	dbbc6 <strchr+0xe>

000dbbd2 <strchrnul>:
   dbbd2:	b510      	push	{r4, lr}
   dbbd4:	4604      	mov	r4, r0
   dbbd6:	f7ff ffef 	bl	dbbb8 <strchr>
   dbbda:	b918      	cbnz	r0, dbbe4 <strchrnul+0x12>
   dbbdc:	4620      	mov	r0, r4
   dbbde:	f000 f832 	bl	dbc46 <strlen>
   dbbe2:	4420      	add	r0, r4
   dbbe4:	bd10      	pop	{r4, pc}

000dbbe6 <strcmp>:
   dbbe6:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbbea:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbbee:	2a01      	cmp	r2, #1
   dbbf0:	bf28      	it	cs
   dbbf2:	429a      	cmpcs	r2, r3
   dbbf4:	d0f7      	beq.n	dbbe6 <strcmp>
   dbbf6:	1ad0      	subs	r0, r2, r3
   dbbf8:	4770      	bx	lr

000dbbfa <strcpy>:
   dbbfa:	4603      	mov	r3, r0
   dbbfc:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbc00:	f803 2b01 	strb.w	r2, [r3], #1
   dbc04:	2a00      	cmp	r2, #0
   dbc06:	d1f9      	bne.n	dbbfc <strcpy+0x2>
   dbc08:	4770      	bx	lr
	...

000dbc0c <strdup>:
   dbc0c:	4b02      	ldr	r3, [pc, #8]	; (dbc18 <strdup+0xc>)
   dbc0e:	4601      	mov	r1, r0
   dbc10:	6818      	ldr	r0, [r3, #0]
   dbc12:	f000 b803 	b.w	dbc1c <_strdup_r>
   dbc16:	bf00      	nop
   dbc18:	2003e1d8 	.word	0x2003e1d8

000dbc1c <_strdup_r>:
   dbc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dbc1e:	4604      	mov	r4, r0
   dbc20:	4608      	mov	r0, r1
   dbc22:	460d      	mov	r5, r1
   dbc24:	f000 f80f 	bl	dbc46 <strlen>
   dbc28:	1c42      	adds	r2, r0, #1
   dbc2a:	4611      	mov	r1, r2
   dbc2c:	4620      	mov	r0, r4
   dbc2e:	9201      	str	r2, [sp, #4]
   dbc30:	f7fc f842 	bl	d7cb8 <_malloc_r>
   dbc34:	4604      	mov	r4, r0
   dbc36:	b118      	cbz	r0, dbc40 <_strdup_r+0x24>
   dbc38:	9a01      	ldr	r2, [sp, #4]
   dbc3a:	4629      	mov	r1, r5
   dbc3c:	f7ff ff68 	bl	dbb10 <memcpy>
   dbc40:	4620      	mov	r0, r4
   dbc42:	b003      	add	sp, #12
   dbc44:	bd30      	pop	{r4, r5, pc}

000dbc46 <strlen>:
   dbc46:	4603      	mov	r3, r0
   dbc48:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbc4c:	2a00      	cmp	r2, #0
   dbc4e:	d1fb      	bne.n	dbc48 <strlen+0x2>
   dbc50:	1a18      	subs	r0, r3, r0
   dbc52:	3801      	subs	r0, #1
   dbc54:	4770      	bx	lr

000dbc56 <strncmp>:
   dbc56:	b510      	push	{r4, lr}
   dbc58:	b16a      	cbz	r2, dbc76 <strncmp+0x20>
   dbc5a:	3901      	subs	r1, #1
   dbc5c:	1884      	adds	r4, r0, r2
   dbc5e:	f810 3b01 	ldrb.w	r3, [r0], #1
   dbc62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dbc66:	4293      	cmp	r3, r2
   dbc68:	d103      	bne.n	dbc72 <strncmp+0x1c>
   dbc6a:	42a0      	cmp	r0, r4
   dbc6c:	d001      	beq.n	dbc72 <strncmp+0x1c>
   dbc6e:	2b00      	cmp	r3, #0
   dbc70:	d1f5      	bne.n	dbc5e <strncmp+0x8>
   dbc72:	1a98      	subs	r0, r3, r2
   dbc74:	bd10      	pop	{r4, pc}
   dbc76:	4610      	mov	r0, r2
   dbc78:	e7fc      	b.n	dbc74 <strncmp+0x1e>

000dbc7a <strncpy>:
   dbc7a:	b510      	push	{r4, lr}
   dbc7c:	3901      	subs	r1, #1
   dbc7e:	4603      	mov	r3, r0
   dbc80:	b132      	cbz	r2, dbc90 <strncpy+0x16>
   dbc82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbc86:	f803 4b01 	strb.w	r4, [r3], #1
   dbc8a:	3a01      	subs	r2, #1
   dbc8c:	2c00      	cmp	r4, #0
   dbc8e:	d1f7      	bne.n	dbc80 <strncpy+0x6>
   dbc90:	441a      	add	r2, r3
   dbc92:	2100      	movs	r1, #0
   dbc94:	4293      	cmp	r3, r2
   dbc96:	d100      	bne.n	dbc9a <strncpy+0x20>
   dbc98:	bd10      	pop	{r4, pc}
   dbc9a:	f803 1b01 	strb.w	r1, [r3], #1
   dbc9e:	e7f9      	b.n	dbc94 <strncpy+0x1a>

000dbca0 <strrchr>:
   dbca0:	b538      	push	{r3, r4, r5, lr}
   dbca2:	4603      	mov	r3, r0
   dbca4:	460c      	mov	r4, r1
   dbca6:	b969      	cbnz	r1, dbcc4 <strrchr+0x24>
   dbca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbcac:	f7ff bf84 	b.w	dbbb8 <strchr>
   dbcb0:	1c43      	adds	r3, r0, #1
   dbcb2:	4605      	mov	r5, r0
   dbcb4:	4621      	mov	r1, r4
   dbcb6:	4618      	mov	r0, r3
   dbcb8:	f7ff ff7e 	bl	dbbb8 <strchr>
   dbcbc:	2800      	cmp	r0, #0
   dbcbe:	d1f7      	bne.n	dbcb0 <strrchr+0x10>
   dbcc0:	4628      	mov	r0, r5
   dbcc2:	bd38      	pop	{r3, r4, r5, pc}
   dbcc4:	2500      	movs	r5, #0
   dbcc6:	e7f5      	b.n	dbcb4 <strrchr+0x14>

000dbcc8 <sulp>:
   dbcc8:	b570      	push	{r4, r5, r6, lr}
   dbcca:	4604      	mov	r4, r0
   dbccc:	460d      	mov	r5, r1
   dbcce:	ec45 4b10 	vmov	d0, r4, r5
   dbcd2:	4616      	mov	r6, r2
   dbcd4:	f001 fd68 	bl	dd7a8 <__ulp>
   dbcd8:	ec51 0b10 	vmov	r0, r1, d0
   dbcdc:	b17e      	cbz	r6, dbcfe <sulp+0x36>
   dbcde:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dbce2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dbce6:	2b00      	cmp	r3, #0
   dbce8:	dd09      	ble.n	dbcfe <sulp+0x36>
   dbcea:	051b      	lsls	r3, r3, #20
   dbcec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dbcf0:	2400      	movs	r4, #0
   dbcf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dbcf6:	4622      	mov	r2, r4
   dbcf8:	462b      	mov	r3, r5
   dbcfa:	f7ff fb25 	bl	db348 <__aeabi_dmul>
   dbcfe:	bd70      	pop	{r4, r5, r6, pc}

000dbd00 <_strtod_l>:
   dbd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbd04:	b0a3      	sub	sp, #140	; 0x8c
   dbd06:	461f      	mov	r7, r3
   dbd08:	2300      	movs	r3, #0
   dbd0a:	931e      	str	r3, [sp, #120]	; 0x78
   dbd0c:	4ba4      	ldr	r3, [pc, #656]	; (dbfa0 <_strtod_l+0x2a0>)
   dbd0e:	9219      	str	r2, [sp, #100]	; 0x64
   dbd10:	681b      	ldr	r3, [r3, #0]
   dbd12:	9307      	str	r3, [sp, #28]
   dbd14:	4604      	mov	r4, r0
   dbd16:	4618      	mov	r0, r3
   dbd18:	4688      	mov	r8, r1
   dbd1a:	f7ff ff94 	bl	dbc46 <strlen>
   dbd1e:	f04f 0a00 	mov.w	sl, #0
   dbd22:	4605      	mov	r5, r0
   dbd24:	f04f 0b00 	mov.w	fp, #0
   dbd28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbd2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbd2e:	781a      	ldrb	r2, [r3, #0]
   dbd30:	2a2b      	cmp	r2, #43	; 0x2b
   dbd32:	d04c      	beq.n	dbdce <_strtod_l+0xce>
   dbd34:	d839      	bhi.n	dbdaa <_strtod_l+0xaa>
   dbd36:	2a0d      	cmp	r2, #13
   dbd38:	d832      	bhi.n	dbda0 <_strtod_l+0xa0>
   dbd3a:	2a08      	cmp	r2, #8
   dbd3c:	d832      	bhi.n	dbda4 <_strtod_l+0xa4>
   dbd3e:	2a00      	cmp	r2, #0
   dbd40:	d03c      	beq.n	dbdbc <_strtod_l+0xbc>
   dbd42:	2300      	movs	r3, #0
   dbd44:	930e      	str	r3, [sp, #56]	; 0x38
   dbd46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dbd48:	7833      	ldrb	r3, [r6, #0]
   dbd4a:	2b30      	cmp	r3, #48	; 0x30
   dbd4c:	f040 80b4 	bne.w	dbeb8 <_strtod_l+0x1b8>
   dbd50:	7873      	ldrb	r3, [r6, #1]
   dbd52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dbd56:	2b58      	cmp	r3, #88	; 0x58
   dbd58:	d16c      	bne.n	dbe34 <_strtod_l+0x134>
   dbd5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dbd5c:	9301      	str	r3, [sp, #4]
   dbd5e:	ab1e      	add	r3, sp, #120	; 0x78
   dbd60:	9702      	str	r7, [sp, #8]
   dbd62:	9300      	str	r3, [sp, #0]
   dbd64:	4a8f      	ldr	r2, [pc, #572]	; (dbfa4 <_strtod_l+0x2a4>)
   dbd66:	ab1f      	add	r3, sp, #124	; 0x7c
   dbd68:	a91d      	add	r1, sp, #116	; 0x74
   dbd6a:	4620      	mov	r0, r4
   dbd6c:	f000 ff18 	bl	dcba0 <__gethex>
   dbd70:	f010 0707 	ands.w	r7, r0, #7
   dbd74:	4605      	mov	r5, r0
   dbd76:	d005      	beq.n	dbd84 <_strtod_l+0x84>
   dbd78:	2f06      	cmp	r7, #6
   dbd7a:	d12a      	bne.n	dbdd2 <_strtod_l+0xd2>
   dbd7c:	3601      	adds	r6, #1
   dbd7e:	2300      	movs	r3, #0
   dbd80:	961d      	str	r6, [sp, #116]	; 0x74
   dbd82:	930e      	str	r3, [sp, #56]	; 0x38
   dbd84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dbd86:	2b00      	cmp	r3, #0
   dbd88:	f040 8596 	bne.w	dc8b8 <_strtod_l+0xbb8>
   dbd8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dbd8e:	b1db      	cbz	r3, dbdc8 <_strtod_l+0xc8>
   dbd90:	4652      	mov	r2, sl
   dbd92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dbd96:	ec43 2b10 	vmov	d0, r2, r3
   dbd9a:	b023      	add	sp, #140	; 0x8c
   dbd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbda0:	2a20      	cmp	r2, #32
   dbda2:	d1ce      	bne.n	dbd42 <_strtod_l+0x42>
   dbda4:	3301      	adds	r3, #1
   dbda6:	931d      	str	r3, [sp, #116]	; 0x74
   dbda8:	e7c0      	b.n	dbd2c <_strtod_l+0x2c>
   dbdaa:	2a2d      	cmp	r2, #45	; 0x2d
   dbdac:	d1c9      	bne.n	dbd42 <_strtod_l+0x42>
   dbdae:	2201      	movs	r2, #1
   dbdb0:	920e      	str	r2, [sp, #56]	; 0x38
   dbdb2:	1c5a      	adds	r2, r3, #1
   dbdb4:	921d      	str	r2, [sp, #116]	; 0x74
   dbdb6:	785b      	ldrb	r3, [r3, #1]
   dbdb8:	2b00      	cmp	r3, #0
   dbdba:	d1c4      	bne.n	dbd46 <_strtod_l+0x46>
   dbdbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dbdbe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbdc2:	2b00      	cmp	r3, #0
   dbdc4:	f040 8576 	bne.w	dc8b4 <_strtod_l+0xbb4>
   dbdc8:	4652      	mov	r2, sl
   dbdca:	465b      	mov	r3, fp
   dbdcc:	e7e3      	b.n	dbd96 <_strtod_l+0x96>
   dbdce:	2200      	movs	r2, #0
   dbdd0:	e7ee      	b.n	dbdb0 <_strtod_l+0xb0>
   dbdd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dbdd4:	b13a      	cbz	r2, dbde6 <_strtod_l+0xe6>
   dbdd6:	2135      	movs	r1, #53	; 0x35
   dbdd8:	a820      	add	r0, sp, #128	; 0x80
   dbdda:	f001 fde4 	bl	dd9a6 <__copybits>
   dbdde:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbde0:	4620      	mov	r0, r4
   dbde2:	f001 fa19 	bl	dd218 <_Bfree>
   dbde6:	3f01      	subs	r7, #1
   dbde8:	2f05      	cmp	r7, #5
   dbdea:	d807      	bhi.n	dbdfc <_strtod_l+0xfc>
   dbdec:	e8df f007 	tbb	[pc, r7]
   dbdf0:	1d180b0e 	.word	0x1d180b0e
   dbdf4:	030e      	.short	0x030e
   dbdf6:	f04f 0b00 	mov.w	fp, #0
   dbdfa:	46da      	mov	sl, fp
   dbdfc:	0728      	lsls	r0, r5, #28
   dbdfe:	d5c1      	bpl.n	dbd84 <_strtod_l+0x84>
   dbe00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dbe04:	e7be      	b.n	dbd84 <_strtod_l+0x84>
   dbe06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dbe0a:	e7f7      	b.n	dbdfc <_strtod_l+0xfc>
   dbe0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dbe10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dbe12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dbe16:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dbe1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dbe1e:	e7ed      	b.n	dbdfc <_strtod_l+0xfc>
   dbe20:	f8df b184 	ldr.w	fp, [pc, #388]	; dbfa8 <_strtod_l+0x2a8>
   dbe24:	f04f 0a00 	mov.w	sl, #0
   dbe28:	e7e8      	b.n	dbdfc <_strtod_l+0xfc>
   dbe2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dbe2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbe32:	e7e3      	b.n	dbdfc <_strtod_l+0xfc>
   dbe34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbe36:	1c5a      	adds	r2, r3, #1
   dbe38:	921d      	str	r2, [sp, #116]	; 0x74
   dbe3a:	785b      	ldrb	r3, [r3, #1]
   dbe3c:	2b30      	cmp	r3, #48	; 0x30
   dbe3e:	d0f9      	beq.n	dbe34 <_strtod_l+0x134>
   dbe40:	2b00      	cmp	r3, #0
   dbe42:	d09f      	beq.n	dbd84 <_strtod_l+0x84>
   dbe44:	2301      	movs	r3, #1
   dbe46:	f04f 0900 	mov.w	r9, #0
   dbe4a:	9304      	str	r3, [sp, #16]
   dbe4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbe4e:	930a      	str	r3, [sp, #40]	; 0x28
   dbe50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dbe54:	464f      	mov	r7, r9
   dbe56:	220a      	movs	r2, #10
   dbe58:	981d      	ldr	r0, [sp, #116]	; 0x74
   dbe5a:	7806      	ldrb	r6, [r0, #0]
   dbe5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dbe60:	b2d9      	uxtb	r1, r3
   dbe62:	2909      	cmp	r1, #9
   dbe64:	d92a      	bls.n	dbebc <_strtod_l+0x1bc>
   dbe66:	9907      	ldr	r1, [sp, #28]
   dbe68:	462a      	mov	r2, r5
   dbe6a:	f7ff fef4 	bl	dbc56 <strncmp>
   dbe6e:	b398      	cbz	r0, dbed8 <_strtod_l+0x1d8>
   dbe70:	2000      	movs	r0, #0
   dbe72:	4633      	mov	r3, r6
   dbe74:	463d      	mov	r5, r7
   dbe76:	9007      	str	r0, [sp, #28]
   dbe78:	4602      	mov	r2, r0
   dbe7a:	2b65      	cmp	r3, #101	; 0x65
   dbe7c:	d001      	beq.n	dbe82 <_strtod_l+0x182>
   dbe7e:	2b45      	cmp	r3, #69	; 0x45
   dbe80:	d118      	bne.n	dbeb4 <_strtod_l+0x1b4>
   dbe82:	b91d      	cbnz	r5, dbe8c <_strtod_l+0x18c>
   dbe84:	9b04      	ldr	r3, [sp, #16]
   dbe86:	4303      	orrs	r3, r0
   dbe88:	d098      	beq.n	dbdbc <_strtod_l+0xbc>
   dbe8a:	2500      	movs	r5, #0
   dbe8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dbe90:	f108 0301 	add.w	r3, r8, #1
   dbe94:	931d      	str	r3, [sp, #116]	; 0x74
   dbe96:	f898 3001 	ldrb.w	r3, [r8, #1]
   dbe9a:	2b2b      	cmp	r3, #43	; 0x2b
   dbe9c:	d075      	beq.n	dbf8a <_strtod_l+0x28a>
   dbe9e:	2b2d      	cmp	r3, #45	; 0x2d
   dbea0:	d07b      	beq.n	dbf9a <_strtod_l+0x29a>
   dbea2:	f04f 0c00 	mov.w	ip, #0
   dbea6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dbeaa:	2909      	cmp	r1, #9
   dbeac:	f240 8082 	bls.w	dbfb4 <_strtod_l+0x2b4>
   dbeb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dbeb4:	2600      	movs	r6, #0
   dbeb6:	e09d      	b.n	dbff4 <_strtod_l+0x2f4>
   dbeb8:	2300      	movs	r3, #0
   dbeba:	e7c4      	b.n	dbe46 <_strtod_l+0x146>
   dbebc:	2f08      	cmp	r7, #8
   dbebe:	bfd8      	it	le
   dbec0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dbec2:	f100 0001 	add.w	r0, r0, #1
   dbec6:	bfda      	itte	le
   dbec8:	fb02 3301 	mlale	r3, r2, r1, r3
   dbecc:	9309      	strle	r3, [sp, #36]	; 0x24
   dbece:	fb02 3909 	mlagt	r9, r2, r9, r3
   dbed2:	3701      	adds	r7, #1
   dbed4:	901d      	str	r0, [sp, #116]	; 0x74
   dbed6:	e7bf      	b.n	dbe58 <_strtod_l+0x158>
   dbed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbeda:	195a      	adds	r2, r3, r5
   dbedc:	921d      	str	r2, [sp, #116]	; 0x74
   dbede:	5d5b      	ldrb	r3, [r3, r5]
   dbee0:	2f00      	cmp	r7, #0
   dbee2:	d037      	beq.n	dbf54 <_strtod_l+0x254>
   dbee4:	9007      	str	r0, [sp, #28]
   dbee6:	463d      	mov	r5, r7
   dbee8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dbeec:	2a09      	cmp	r2, #9
   dbeee:	d912      	bls.n	dbf16 <_strtod_l+0x216>
   dbef0:	2201      	movs	r2, #1
   dbef2:	e7c2      	b.n	dbe7a <_strtod_l+0x17a>
   dbef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbef6:	1c5a      	adds	r2, r3, #1
   dbef8:	921d      	str	r2, [sp, #116]	; 0x74
   dbefa:	785b      	ldrb	r3, [r3, #1]
   dbefc:	3001      	adds	r0, #1
   dbefe:	2b30      	cmp	r3, #48	; 0x30
   dbf00:	d0f8      	beq.n	dbef4 <_strtod_l+0x1f4>
   dbf02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dbf06:	2a08      	cmp	r2, #8
   dbf08:	f200 84db 	bhi.w	dc8c2 <_strtod_l+0xbc2>
   dbf0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dbf0e:	9007      	str	r0, [sp, #28]
   dbf10:	2000      	movs	r0, #0
   dbf12:	920a      	str	r2, [sp, #40]	; 0x28
   dbf14:	4605      	mov	r5, r0
   dbf16:	3b30      	subs	r3, #48	; 0x30
   dbf18:	f100 0201 	add.w	r2, r0, #1
   dbf1c:	d014      	beq.n	dbf48 <_strtod_l+0x248>
   dbf1e:	9907      	ldr	r1, [sp, #28]
   dbf20:	4411      	add	r1, r2
   dbf22:	9107      	str	r1, [sp, #28]
   dbf24:	462a      	mov	r2, r5
   dbf26:	eb00 0e05 	add.w	lr, r0, r5
   dbf2a:	210a      	movs	r1, #10
   dbf2c:	4572      	cmp	r2, lr
   dbf2e:	d113      	bne.n	dbf58 <_strtod_l+0x258>
   dbf30:	182a      	adds	r2, r5, r0
   dbf32:	2a08      	cmp	r2, #8
   dbf34:	f105 0501 	add.w	r5, r5, #1
   dbf38:	4405      	add	r5, r0
   dbf3a:	dc1c      	bgt.n	dbf76 <_strtod_l+0x276>
   dbf3c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbf3e:	220a      	movs	r2, #10
   dbf40:	fb02 3301 	mla	r3, r2, r1, r3
   dbf44:	9309      	str	r3, [sp, #36]	; 0x24
   dbf46:	2200      	movs	r2, #0
   dbf48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbf4a:	1c59      	adds	r1, r3, #1
   dbf4c:	911d      	str	r1, [sp, #116]	; 0x74
   dbf4e:	785b      	ldrb	r3, [r3, #1]
   dbf50:	4610      	mov	r0, r2
   dbf52:	e7c9      	b.n	dbee8 <_strtod_l+0x1e8>
   dbf54:	4638      	mov	r0, r7
   dbf56:	e7d2      	b.n	dbefe <_strtod_l+0x1fe>
   dbf58:	2a08      	cmp	r2, #8
   dbf5a:	dc04      	bgt.n	dbf66 <_strtod_l+0x266>
   dbf5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dbf5e:	434e      	muls	r6, r1
   dbf60:	9609      	str	r6, [sp, #36]	; 0x24
   dbf62:	3201      	adds	r2, #1
   dbf64:	e7e2      	b.n	dbf2c <_strtod_l+0x22c>
   dbf66:	f102 0c01 	add.w	ip, r2, #1
   dbf6a:	f1bc 0f10 	cmp.w	ip, #16
   dbf6e:	bfd8      	it	le
   dbf70:	fb01 f909 	mulle.w	r9, r1, r9
   dbf74:	e7f5      	b.n	dbf62 <_strtod_l+0x262>
   dbf76:	2d10      	cmp	r5, #16
   dbf78:	bfdc      	itt	le
   dbf7a:	220a      	movle	r2, #10
   dbf7c:	fb02 3909 	mlale	r9, r2, r9, r3
   dbf80:	e7e1      	b.n	dbf46 <_strtod_l+0x246>
   dbf82:	2300      	movs	r3, #0
   dbf84:	9307      	str	r3, [sp, #28]
   dbf86:	2201      	movs	r2, #1
   dbf88:	e77c      	b.n	dbe84 <_strtod_l+0x184>
   dbf8a:	f04f 0c00 	mov.w	ip, #0
   dbf8e:	f108 0302 	add.w	r3, r8, #2
   dbf92:	931d      	str	r3, [sp, #116]	; 0x74
   dbf94:	f898 3002 	ldrb.w	r3, [r8, #2]
   dbf98:	e785      	b.n	dbea6 <_strtod_l+0x1a6>
   dbf9a:	f04f 0c01 	mov.w	ip, #1
   dbf9e:	e7f6      	b.n	dbf8e <_strtod_l+0x28e>
   dbfa0:	000de92c 	.word	0x000de92c
   dbfa4:	000de7d4 	.word	0x000de7d4
   dbfa8:	7ff00000 	.word	0x7ff00000
   dbfac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbfae:	1c59      	adds	r1, r3, #1
   dbfb0:	911d      	str	r1, [sp, #116]	; 0x74
   dbfb2:	785b      	ldrb	r3, [r3, #1]
   dbfb4:	2b30      	cmp	r3, #48	; 0x30
   dbfb6:	d0f9      	beq.n	dbfac <_strtod_l+0x2ac>
   dbfb8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dbfbc:	2908      	cmp	r1, #8
   dbfbe:	f63f af79 	bhi.w	dbeb4 <_strtod_l+0x1b4>
   dbfc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dbfc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbfc8:	9308      	str	r3, [sp, #32]
   dbfca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbfcc:	1c59      	adds	r1, r3, #1
   dbfce:	911d      	str	r1, [sp, #116]	; 0x74
   dbfd0:	785b      	ldrb	r3, [r3, #1]
   dbfd2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dbfd6:	2e09      	cmp	r6, #9
   dbfd8:	d937      	bls.n	dc04a <_strtod_l+0x34a>
   dbfda:	9e08      	ldr	r6, [sp, #32]
   dbfdc:	1b89      	subs	r1, r1, r6
   dbfde:	2908      	cmp	r1, #8
   dbfe0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dbfe4:	dc02      	bgt.n	dbfec <_strtod_l+0x2ec>
   dbfe6:	4576      	cmp	r6, lr
   dbfe8:	bfa8      	it	ge
   dbfea:	4676      	movge	r6, lr
   dbfec:	f1bc 0f00 	cmp.w	ip, #0
   dbff0:	d000      	beq.n	dbff4 <_strtod_l+0x2f4>
   dbff2:	4276      	negs	r6, r6
   dbff4:	2d00      	cmp	r5, #0
   dbff6:	d14f      	bne.n	dc098 <_strtod_l+0x398>
   dbff8:	9904      	ldr	r1, [sp, #16]
   dbffa:	4301      	orrs	r1, r0
   dbffc:	f47f aec2 	bne.w	dbd84 <_strtod_l+0x84>
   dc000:	2a00      	cmp	r2, #0
   dc002:	f47f aedb 	bne.w	dbdbc <_strtod_l+0xbc>
   dc006:	2b69      	cmp	r3, #105	; 0x69
   dc008:	d027      	beq.n	dc05a <_strtod_l+0x35a>
   dc00a:	dc24      	bgt.n	dc056 <_strtod_l+0x356>
   dc00c:	2b49      	cmp	r3, #73	; 0x49
   dc00e:	d024      	beq.n	dc05a <_strtod_l+0x35a>
   dc010:	2b4e      	cmp	r3, #78	; 0x4e
   dc012:	f47f aed3 	bne.w	dbdbc <_strtod_l+0xbc>
   dc016:	499e      	ldr	r1, [pc, #632]	; (dc290 <_strtod_l+0x590>)
   dc018:	a81d      	add	r0, sp, #116	; 0x74
   dc01a:	f001 f807 	bl	dd02c <__match>
   dc01e:	2800      	cmp	r0, #0
   dc020:	f43f aecc 	beq.w	dbdbc <_strtod_l+0xbc>
   dc024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc026:	781b      	ldrb	r3, [r3, #0]
   dc028:	2b28      	cmp	r3, #40	; 0x28
   dc02a:	d12d      	bne.n	dc088 <_strtod_l+0x388>
   dc02c:	4999      	ldr	r1, [pc, #612]	; (dc294 <_strtod_l+0x594>)
   dc02e:	aa20      	add	r2, sp, #128	; 0x80
   dc030:	a81d      	add	r0, sp, #116	; 0x74
   dc032:	f001 f80f 	bl	dd054 <__hexnan>
   dc036:	2805      	cmp	r0, #5
   dc038:	d126      	bne.n	dc088 <_strtod_l+0x388>
   dc03a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dc03c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dc040:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dc044:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dc048:	e69c      	b.n	dbd84 <_strtod_l+0x84>
   dc04a:	210a      	movs	r1, #10
   dc04c:	fb01 3e0e 	mla	lr, r1, lr, r3
   dc050:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dc054:	e7b9      	b.n	dbfca <_strtod_l+0x2ca>
   dc056:	2b6e      	cmp	r3, #110	; 0x6e
   dc058:	e7db      	b.n	dc012 <_strtod_l+0x312>
   dc05a:	498f      	ldr	r1, [pc, #572]	; (dc298 <_strtod_l+0x598>)
   dc05c:	a81d      	add	r0, sp, #116	; 0x74
   dc05e:	f000 ffe5 	bl	dd02c <__match>
   dc062:	2800      	cmp	r0, #0
   dc064:	f43f aeaa 	beq.w	dbdbc <_strtod_l+0xbc>
   dc068:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc06a:	498c      	ldr	r1, [pc, #560]	; (dc29c <_strtod_l+0x59c>)
   dc06c:	3b01      	subs	r3, #1
   dc06e:	a81d      	add	r0, sp, #116	; 0x74
   dc070:	931d      	str	r3, [sp, #116]	; 0x74
   dc072:	f000 ffdb 	bl	dd02c <__match>
   dc076:	b910      	cbnz	r0, dc07e <_strtod_l+0x37e>
   dc078:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc07a:	3301      	adds	r3, #1
   dc07c:	931d      	str	r3, [sp, #116]	; 0x74
   dc07e:	f8df b22c 	ldr.w	fp, [pc, #556]	; dc2ac <_strtod_l+0x5ac>
   dc082:	f04f 0a00 	mov.w	sl, #0
   dc086:	e67d      	b.n	dbd84 <_strtod_l+0x84>
   dc088:	4885      	ldr	r0, [pc, #532]	; (dc2a0 <_strtod_l+0x5a0>)
   dc08a:	f001 fce1 	bl	dda50 <nan>
   dc08e:	ed8d 0b04 	vstr	d0, [sp, #16]
   dc092:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dc096:	e675      	b.n	dbd84 <_strtod_l+0x84>
   dc098:	9b07      	ldr	r3, [sp, #28]
   dc09a:	9809      	ldr	r0, [sp, #36]	; 0x24
   dc09c:	1af3      	subs	r3, r6, r3
   dc09e:	2f00      	cmp	r7, #0
   dc0a0:	bf08      	it	eq
   dc0a2:	462f      	moveq	r7, r5
   dc0a4:	2d10      	cmp	r5, #16
   dc0a6:	9308      	str	r3, [sp, #32]
   dc0a8:	46a8      	mov	r8, r5
   dc0aa:	bfa8      	it	ge
   dc0ac:	f04f 0810 	movge.w	r8, #16
   dc0b0:	f7ff f8d0 	bl	db254 <__aeabi_ui2d>
   dc0b4:	2d09      	cmp	r5, #9
   dc0b6:	4682      	mov	sl, r0
   dc0b8:	468b      	mov	fp, r1
   dc0ba:	dd13      	ble.n	dc0e4 <_strtod_l+0x3e4>
   dc0bc:	4b79      	ldr	r3, [pc, #484]	; (dc2a4 <_strtod_l+0x5a4>)
   dc0be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dc0c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dc0c6:	f7ff f93f 	bl	db348 <__aeabi_dmul>
   dc0ca:	4682      	mov	sl, r0
   dc0cc:	4648      	mov	r0, r9
   dc0ce:	468b      	mov	fp, r1
   dc0d0:	f7ff f8c0 	bl	db254 <__aeabi_ui2d>
   dc0d4:	4602      	mov	r2, r0
   dc0d6:	460b      	mov	r3, r1
   dc0d8:	4650      	mov	r0, sl
   dc0da:	4659      	mov	r1, fp
   dc0dc:	f7fe ff7e 	bl	dafdc <__adddf3>
   dc0e0:	4682      	mov	sl, r0
   dc0e2:	468b      	mov	fp, r1
   dc0e4:	2d0f      	cmp	r5, #15
   dc0e6:	dc38      	bgt.n	dc15a <_strtod_l+0x45a>
   dc0e8:	9b08      	ldr	r3, [sp, #32]
   dc0ea:	2b00      	cmp	r3, #0
   dc0ec:	f43f ae4a 	beq.w	dbd84 <_strtod_l+0x84>
   dc0f0:	dd24      	ble.n	dc13c <_strtod_l+0x43c>
   dc0f2:	2b16      	cmp	r3, #22
   dc0f4:	dc0b      	bgt.n	dc10e <_strtod_l+0x40e>
   dc0f6:	4d6b      	ldr	r5, [pc, #428]	; (dc2a4 <_strtod_l+0x5a4>)
   dc0f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dc0fc:	e9d5 0100 	ldrd	r0, r1, [r5]
   dc100:	4652      	mov	r2, sl
   dc102:	465b      	mov	r3, fp
   dc104:	f7ff f920 	bl	db348 <__aeabi_dmul>
   dc108:	4682      	mov	sl, r0
   dc10a:	468b      	mov	fp, r1
   dc10c:	e63a      	b.n	dbd84 <_strtod_l+0x84>
   dc10e:	9a08      	ldr	r2, [sp, #32]
   dc110:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dc114:	4293      	cmp	r3, r2
   dc116:	db20      	blt.n	dc15a <_strtod_l+0x45a>
   dc118:	4c62      	ldr	r4, [pc, #392]	; (dc2a4 <_strtod_l+0x5a4>)
   dc11a:	f1c5 050f 	rsb	r5, r5, #15
   dc11e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dc122:	4652      	mov	r2, sl
   dc124:	465b      	mov	r3, fp
   dc126:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc12a:	f7ff f90d 	bl	db348 <__aeabi_dmul>
   dc12e:	9b08      	ldr	r3, [sp, #32]
   dc130:	1b5d      	subs	r5, r3, r5
   dc132:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dc136:	e9d4 2300 	ldrd	r2, r3, [r4]
   dc13a:	e7e3      	b.n	dc104 <_strtod_l+0x404>
   dc13c:	9b08      	ldr	r3, [sp, #32]
   dc13e:	3316      	adds	r3, #22
   dc140:	db0b      	blt.n	dc15a <_strtod_l+0x45a>
   dc142:	9b07      	ldr	r3, [sp, #28]
   dc144:	4a57      	ldr	r2, [pc, #348]	; (dc2a4 <_strtod_l+0x5a4>)
   dc146:	1b9e      	subs	r6, r3, r6
   dc148:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dc14c:	e9d6 2300 	ldrd	r2, r3, [r6]
   dc150:	4650      	mov	r0, sl
   dc152:	4659      	mov	r1, fp
   dc154:	f7ff fa22 	bl	db59c <__aeabi_ddiv>
   dc158:	e7d6      	b.n	dc108 <_strtod_l+0x408>
   dc15a:	9b08      	ldr	r3, [sp, #32]
   dc15c:	eba5 0808 	sub.w	r8, r5, r8
   dc160:	4498      	add	r8, r3
   dc162:	f1b8 0f00 	cmp.w	r8, #0
   dc166:	dd71      	ble.n	dc24c <_strtod_l+0x54c>
   dc168:	f018 030f 	ands.w	r3, r8, #15
   dc16c:	d00a      	beq.n	dc184 <_strtod_l+0x484>
   dc16e:	494d      	ldr	r1, [pc, #308]	; (dc2a4 <_strtod_l+0x5a4>)
   dc170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dc174:	4652      	mov	r2, sl
   dc176:	465b      	mov	r3, fp
   dc178:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc17c:	f7ff f8e4 	bl	db348 <__aeabi_dmul>
   dc180:	4682      	mov	sl, r0
   dc182:	468b      	mov	fp, r1
   dc184:	f038 080f 	bics.w	r8, r8, #15
   dc188:	d04d      	beq.n	dc226 <_strtod_l+0x526>
   dc18a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dc18e:	dd22      	ble.n	dc1d6 <_strtod_l+0x4d6>
   dc190:	2500      	movs	r5, #0
   dc192:	462e      	mov	r6, r5
   dc194:	9509      	str	r5, [sp, #36]	; 0x24
   dc196:	9507      	str	r5, [sp, #28]
   dc198:	2322      	movs	r3, #34	; 0x22
   dc19a:	f8df b110 	ldr.w	fp, [pc, #272]	; dc2ac <_strtod_l+0x5ac>
   dc19e:	6023      	str	r3, [r4, #0]
   dc1a0:	f04f 0a00 	mov.w	sl, #0
   dc1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc1a6:	2b00      	cmp	r3, #0
   dc1a8:	f43f adec 	beq.w	dbd84 <_strtod_l+0x84>
   dc1ac:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc1ae:	4620      	mov	r0, r4
   dc1b0:	f001 f832 	bl	dd218 <_Bfree>
   dc1b4:	9907      	ldr	r1, [sp, #28]
   dc1b6:	4620      	mov	r0, r4
   dc1b8:	f001 f82e 	bl	dd218 <_Bfree>
   dc1bc:	4631      	mov	r1, r6
   dc1be:	4620      	mov	r0, r4
   dc1c0:	f001 f82a 	bl	dd218 <_Bfree>
   dc1c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc1c6:	4620      	mov	r0, r4
   dc1c8:	f001 f826 	bl	dd218 <_Bfree>
   dc1cc:	4629      	mov	r1, r5
   dc1ce:	4620      	mov	r0, r4
   dc1d0:	f001 f822 	bl	dd218 <_Bfree>
   dc1d4:	e5d6      	b.n	dbd84 <_strtod_l+0x84>
   dc1d6:	2300      	movs	r3, #0
   dc1d8:	ea4f 1828 	mov.w	r8, r8, asr #4
   dc1dc:	4650      	mov	r0, sl
   dc1de:	4659      	mov	r1, fp
   dc1e0:	4699      	mov	r9, r3
   dc1e2:	f1b8 0f01 	cmp.w	r8, #1
   dc1e6:	dc21      	bgt.n	dc22c <_strtod_l+0x52c>
   dc1e8:	b10b      	cbz	r3, dc1ee <_strtod_l+0x4ee>
   dc1ea:	4682      	mov	sl, r0
   dc1ec:	468b      	mov	fp, r1
   dc1ee:	4b2e      	ldr	r3, [pc, #184]	; (dc2a8 <_strtod_l+0x5a8>)
   dc1f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dc1f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dc1f8:	4652      	mov	r2, sl
   dc1fa:	465b      	mov	r3, fp
   dc1fc:	e9d9 0100 	ldrd	r0, r1, [r9]
   dc200:	f7ff f8a2 	bl	db348 <__aeabi_dmul>
   dc204:	4b29      	ldr	r3, [pc, #164]	; (dc2ac <_strtod_l+0x5ac>)
   dc206:	460a      	mov	r2, r1
   dc208:	400b      	ands	r3, r1
   dc20a:	4929      	ldr	r1, [pc, #164]	; (dc2b0 <_strtod_l+0x5b0>)
   dc20c:	428b      	cmp	r3, r1
   dc20e:	4682      	mov	sl, r0
   dc210:	d8be      	bhi.n	dc190 <_strtod_l+0x490>
   dc212:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dc216:	428b      	cmp	r3, r1
   dc218:	bf86      	itte	hi
   dc21a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dc2b4 <_strtod_l+0x5b4>
   dc21e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dc222:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dc226:	2300      	movs	r3, #0
   dc228:	9304      	str	r3, [sp, #16]
   dc22a:	e081      	b.n	dc330 <_strtod_l+0x630>
   dc22c:	f018 0f01 	tst.w	r8, #1
   dc230:	d007      	beq.n	dc242 <_strtod_l+0x542>
   dc232:	4b1d      	ldr	r3, [pc, #116]	; (dc2a8 <_strtod_l+0x5a8>)
   dc234:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dc238:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc23c:	f7ff f884 	bl	db348 <__aeabi_dmul>
   dc240:	2301      	movs	r3, #1
   dc242:	f109 0901 	add.w	r9, r9, #1
   dc246:	ea4f 0868 	mov.w	r8, r8, asr #1
   dc24a:	e7ca      	b.n	dc1e2 <_strtod_l+0x4e2>
   dc24c:	d0eb      	beq.n	dc226 <_strtod_l+0x526>
   dc24e:	f1c8 0800 	rsb	r8, r8, #0
   dc252:	f018 020f 	ands.w	r2, r8, #15
   dc256:	d00a      	beq.n	dc26e <_strtod_l+0x56e>
   dc258:	4b12      	ldr	r3, [pc, #72]	; (dc2a4 <_strtod_l+0x5a4>)
   dc25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dc25e:	4650      	mov	r0, sl
   dc260:	4659      	mov	r1, fp
   dc262:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc266:	f7ff f999 	bl	db59c <__aeabi_ddiv>
   dc26a:	4682      	mov	sl, r0
   dc26c:	468b      	mov	fp, r1
   dc26e:	ea5f 1828 	movs.w	r8, r8, asr #4
   dc272:	d0d8      	beq.n	dc226 <_strtod_l+0x526>
   dc274:	f1b8 0f1f 	cmp.w	r8, #31
   dc278:	dd1e      	ble.n	dc2b8 <_strtod_l+0x5b8>
   dc27a:	2500      	movs	r5, #0
   dc27c:	462e      	mov	r6, r5
   dc27e:	9509      	str	r5, [sp, #36]	; 0x24
   dc280:	9507      	str	r5, [sp, #28]
   dc282:	2322      	movs	r3, #34	; 0x22
   dc284:	f04f 0a00 	mov.w	sl, #0
   dc288:	f04f 0b00 	mov.w	fp, #0
   dc28c:	6023      	str	r3, [r4, #0]
   dc28e:	e789      	b.n	dc1a4 <_strtod_l+0x4a4>
   dc290:	000de7cf 	.word	0x000de7cf
   dc294:	000de7e8 	.word	0x000de7e8
   dc298:	000de7c6 	.word	0x000de7c6
   dc29c:	000de7c9 	.word	0x000de7c9
   dc2a0:	000de5e9 	.word	0x000de5e9
   dc2a4:	000de968 	.word	0x000de968
   dc2a8:	000de940 	.word	0x000de940
   dc2ac:	7ff00000 	.word	0x7ff00000
   dc2b0:	7ca00000 	.word	0x7ca00000
   dc2b4:	7fefffff 	.word	0x7fefffff
   dc2b8:	f018 0310 	ands.w	r3, r8, #16
   dc2bc:	bf18      	it	ne
   dc2be:	236a      	movne	r3, #106	; 0x6a
   dc2c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dc678 <_strtod_l+0x978>
   dc2c4:	9304      	str	r3, [sp, #16]
   dc2c6:	4650      	mov	r0, sl
   dc2c8:	4659      	mov	r1, fp
   dc2ca:	2300      	movs	r3, #0
   dc2cc:	f018 0f01 	tst.w	r8, #1
   dc2d0:	d004      	beq.n	dc2dc <_strtod_l+0x5dc>
   dc2d2:	e9d9 2300 	ldrd	r2, r3, [r9]
   dc2d6:	f7ff f837 	bl	db348 <__aeabi_dmul>
   dc2da:	2301      	movs	r3, #1
   dc2dc:	ea5f 0868 	movs.w	r8, r8, asr #1
   dc2e0:	f109 0908 	add.w	r9, r9, #8
   dc2e4:	d1f2      	bne.n	dc2cc <_strtod_l+0x5cc>
   dc2e6:	b10b      	cbz	r3, dc2ec <_strtod_l+0x5ec>
   dc2e8:	4682      	mov	sl, r0
   dc2ea:	468b      	mov	fp, r1
   dc2ec:	9b04      	ldr	r3, [sp, #16]
   dc2ee:	b1bb      	cbz	r3, dc320 <_strtod_l+0x620>
   dc2f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dc2f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dc2f8:	2b00      	cmp	r3, #0
   dc2fa:	4659      	mov	r1, fp
   dc2fc:	dd10      	ble.n	dc320 <_strtod_l+0x620>
   dc2fe:	2b1f      	cmp	r3, #31
   dc300:	f340 8128 	ble.w	dc554 <_strtod_l+0x854>
   dc304:	2b34      	cmp	r3, #52	; 0x34
   dc306:	bfde      	ittt	le
   dc308:	3b20      	suble	r3, #32
   dc30a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dc30e:	fa02 f303 	lslle.w	r3, r2, r3
   dc312:	f04f 0a00 	mov.w	sl, #0
   dc316:	bfcc      	ite	gt
   dc318:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dc31c:	ea03 0b01 	andle.w	fp, r3, r1
   dc320:	2200      	movs	r2, #0
   dc322:	2300      	movs	r3, #0
   dc324:	4650      	mov	r0, sl
   dc326:	4659      	mov	r1, fp
   dc328:	f7ff fa76 	bl	db818 <__aeabi_dcmpeq>
   dc32c:	2800      	cmp	r0, #0
   dc32e:	d1a4      	bne.n	dc27a <_strtod_l+0x57a>
   dc330:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc332:	9300      	str	r3, [sp, #0]
   dc334:	990a      	ldr	r1, [sp, #40]	; 0x28
   dc336:	462b      	mov	r3, r5
   dc338:	463a      	mov	r2, r7
   dc33a:	4620      	mov	r0, r4
   dc33c:	f000 ffc1 	bl	dd2c2 <__s2b>
   dc340:	9009      	str	r0, [sp, #36]	; 0x24
   dc342:	2800      	cmp	r0, #0
   dc344:	f43f af24 	beq.w	dc190 <_strtod_l+0x490>
   dc348:	9b07      	ldr	r3, [sp, #28]
   dc34a:	1b9e      	subs	r6, r3, r6
   dc34c:	9b08      	ldr	r3, [sp, #32]
   dc34e:	2b00      	cmp	r3, #0
   dc350:	bfb4      	ite	lt
   dc352:	4633      	movlt	r3, r6
   dc354:	2300      	movge	r3, #0
   dc356:	9310      	str	r3, [sp, #64]	; 0x40
   dc358:	9b08      	ldr	r3, [sp, #32]
   dc35a:	2500      	movs	r5, #0
   dc35c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dc360:	9318      	str	r3, [sp, #96]	; 0x60
   dc362:	462e      	mov	r6, r5
   dc364:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc366:	4620      	mov	r0, r4
   dc368:	6859      	ldr	r1, [r3, #4]
   dc36a:	f000 ff21 	bl	dd1b0 <_Balloc>
   dc36e:	9007      	str	r0, [sp, #28]
   dc370:	2800      	cmp	r0, #0
   dc372:	f43f af11 	beq.w	dc198 <_strtod_l+0x498>
   dc376:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc378:	691a      	ldr	r2, [r3, #16]
   dc37a:	3202      	adds	r2, #2
   dc37c:	f103 010c 	add.w	r1, r3, #12
   dc380:	0092      	lsls	r2, r2, #2
   dc382:	300c      	adds	r0, #12
   dc384:	f7ff fbc4 	bl	dbb10 <memcpy>
   dc388:	ec4b ab10 	vmov	d0, sl, fp
   dc38c:	aa20      	add	r2, sp, #128	; 0x80
   dc38e:	a91f      	add	r1, sp, #124	; 0x7c
   dc390:	4620      	mov	r0, r4
   dc392:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dc396:	f001 fa83 	bl	dd8a0 <__d2b>
   dc39a:	901e      	str	r0, [sp, #120]	; 0x78
   dc39c:	2800      	cmp	r0, #0
   dc39e:	f43f aefb 	beq.w	dc198 <_strtod_l+0x498>
   dc3a2:	2101      	movs	r1, #1
   dc3a4:	4620      	mov	r0, r4
   dc3a6:	f001 f81a 	bl	dd3de <__i2b>
   dc3aa:	4606      	mov	r6, r0
   dc3ac:	2800      	cmp	r0, #0
   dc3ae:	f43f aef3 	beq.w	dc198 <_strtod_l+0x498>
   dc3b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dc3b4:	9904      	ldr	r1, [sp, #16]
   dc3b6:	2b00      	cmp	r3, #0
   dc3b8:	bfab      	itete	ge
   dc3ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dc3bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dc3be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dc3c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dc3c4:	bfac      	ite	ge
   dc3c6:	eb03 0902 	addge.w	r9, r3, r2
   dc3ca:	1ad7      	sublt	r7, r2, r3
   dc3cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dc3ce:	eba3 0801 	sub.w	r8, r3, r1
   dc3d2:	4490      	add	r8, r2
   dc3d4:	4ba3      	ldr	r3, [pc, #652]	; (dc664 <_strtod_l+0x964>)
   dc3d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc3da:	4598      	cmp	r8, r3
   dc3dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dc3e0:	f280 80cc 	bge.w	dc57c <_strtod_l+0x87c>
   dc3e4:	eba3 0308 	sub.w	r3, r3, r8
   dc3e8:	2b1f      	cmp	r3, #31
   dc3ea:	eba2 0203 	sub.w	r2, r2, r3
   dc3ee:	f04f 0101 	mov.w	r1, #1
   dc3f2:	f300 80b6 	bgt.w	dc562 <_strtod_l+0x862>
   dc3f6:	fa01 f303 	lsl.w	r3, r1, r3
   dc3fa:	9311      	str	r3, [sp, #68]	; 0x44
   dc3fc:	2300      	movs	r3, #0
   dc3fe:	930c      	str	r3, [sp, #48]	; 0x30
   dc400:	eb09 0802 	add.w	r8, r9, r2
   dc404:	9b04      	ldr	r3, [sp, #16]
   dc406:	45c1      	cmp	r9, r8
   dc408:	4417      	add	r7, r2
   dc40a:	441f      	add	r7, r3
   dc40c:	464b      	mov	r3, r9
   dc40e:	bfa8      	it	ge
   dc410:	4643      	movge	r3, r8
   dc412:	42bb      	cmp	r3, r7
   dc414:	bfa8      	it	ge
   dc416:	463b      	movge	r3, r7
   dc418:	2b00      	cmp	r3, #0
   dc41a:	bfc2      	ittt	gt
   dc41c:	eba8 0803 	subgt.w	r8, r8, r3
   dc420:	1aff      	subgt	r7, r7, r3
   dc422:	eba9 0903 	subgt.w	r9, r9, r3
   dc426:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dc428:	2b00      	cmp	r3, #0
   dc42a:	dd17      	ble.n	dc45c <_strtod_l+0x75c>
   dc42c:	4631      	mov	r1, r6
   dc42e:	461a      	mov	r2, r3
   dc430:	4620      	mov	r0, r4
   dc432:	f001 f879 	bl	dd528 <__pow5mult>
   dc436:	4606      	mov	r6, r0
   dc438:	2800      	cmp	r0, #0
   dc43a:	f43f aead 	beq.w	dc198 <_strtod_l+0x498>
   dc43e:	4601      	mov	r1, r0
   dc440:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dc442:	4620      	mov	r0, r4
   dc444:	f000 ffd4 	bl	dd3f0 <__multiply>
   dc448:	900f      	str	r0, [sp, #60]	; 0x3c
   dc44a:	2800      	cmp	r0, #0
   dc44c:	f43f aea4 	beq.w	dc198 <_strtod_l+0x498>
   dc450:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc452:	4620      	mov	r0, r4
   dc454:	f000 fee0 	bl	dd218 <_Bfree>
   dc458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc45a:	931e      	str	r3, [sp, #120]	; 0x78
   dc45c:	f1b8 0f00 	cmp.w	r8, #0
   dc460:	f300 8091 	bgt.w	dc586 <_strtod_l+0x886>
   dc464:	9b08      	ldr	r3, [sp, #32]
   dc466:	2b00      	cmp	r3, #0
   dc468:	dd08      	ble.n	dc47c <_strtod_l+0x77c>
   dc46a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dc46c:	9907      	ldr	r1, [sp, #28]
   dc46e:	4620      	mov	r0, r4
   dc470:	f001 f85a 	bl	dd528 <__pow5mult>
   dc474:	9007      	str	r0, [sp, #28]
   dc476:	2800      	cmp	r0, #0
   dc478:	f43f ae8e 	beq.w	dc198 <_strtod_l+0x498>
   dc47c:	2f00      	cmp	r7, #0
   dc47e:	dd08      	ble.n	dc492 <_strtod_l+0x792>
   dc480:	9907      	ldr	r1, [sp, #28]
   dc482:	463a      	mov	r2, r7
   dc484:	4620      	mov	r0, r4
   dc486:	f001 f89d 	bl	dd5c4 <__lshift>
   dc48a:	9007      	str	r0, [sp, #28]
   dc48c:	2800      	cmp	r0, #0
   dc48e:	f43f ae83 	beq.w	dc198 <_strtod_l+0x498>
   dc492:	f1b9 0f00 	cmp.w	r9, #0
   dc496:	dd08      	ble.n	dc4aa <_strtod_l+0x7aa>
   dc498:	4631      	mov	r1, r6
   dc49a:	464a      	mov	r2, r9
   dc49c:	4620      	mov	r0, r4
   dc49e:	f001 f891 	bl	dd5c4 <__lshift>
   dc4a2:	4606      	mov	r6, r0
   dc4a4:	2800      	cmp	r0, #0
   dc4a6:	f43f ae77 	beq.w	dc198 <_strtod_l+0x498>
   dc4aa:	9a07      	ldr	r2, [sp, #28]
   dc4ac:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc4ae:	4620      	mov	r0, r4
   dc4b0:	f001 f903 	bl	dd6ba <__mdiff>
   dc4b4:	4605      	mov	r5, r0
   dc4b6:	2800      	cmp	r0, #0
   dc4b8:	f43f ae6e 	beq.w	dc198 <_strtod_l+0x498>
   dc4bc:	68c3      	ldr	r3, [r0, #12]
   dc4be:	930f      	str	r3, [sp, #60]	; 0x3c
   dc4c0:	2300      	movs	r3, #0
   dc4c2:	60c3      	str	r3, [r0, #12]
   dc4c4:	4631      	mov	r1, r6
   dc4c6:	f001 f8dc 	bl	dd682 <__mcmp>
   dc4ca:	2800      	cmp	r0, #0
   dc4cc:	da65      	bge.n	dc59a <_strtod_l+0x89a>
   dc4ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc4d0:	ea53 030a 	orrs.w	r3, r3, sl
   dc4d4:	f040 8087 	bne.w	dc5e6 <_strtod_l+0x8e6>
   dc4d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc4dc:	2b00      	cmp	r3, #0
   dc4de:	f040 8082 	bne.w	dc5e6 <_strtod_l+0x8e6>
   dc4e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc4e6:	0d1b      	lsrs	r3, r3, #20
   dc4e8:	051b      	lsls	r3, r3, #20
   dc4ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dc4ee:	d97a      	bls.n	dc5e6 <_strtod_l+0x8e6>
   dc4f0:	696b      	ldr	r3, [r5, #20]
   dc4f2:	b913      	cbnz	r3, dc4fa <_strtod_l+0x7fa>
   dc4f4:	692b      	ldr	r3, [r5, #16]
   dc4f6:	2b01      	cmp	r3, #1
   dc4f8:	dd75      	ble.n	dc5e6 <_strtod_l+0x8e6>
   dc4fa:	4629      	mov	r1, r5
   dc4fc:	2201      	movs	r2, #1
   dc4fe:	4620      	mov	r0, r4
   dc500:	f001 f860 	bl	dd5c4 <__lshift>
   dc504:	4631      	mov	r1, r6
   dc506:	4605      	mov	r5, r0
   dc508:	f001 f8bb 	bl	dd682 <__mcmp>
   dc50c:	2800      	cmp	r0, #0
   dc50e:	dd6a      	ble.n	dc5e6 <_strtod_l+0x8e6>
   dc510:	9904      	ldr	r1, [sp, #16]
   dc512:	4a55      	ldr	r2, [pc, #340]	; (dc668 <_strtod_l+0x968>)
   dc514:	465b      	mov	r3, fp
   dc516:	2900      	cmp	r1, #0
   dc518:	f000 8085 	beq.w	dc626 <_strtod_l+0x926>
   dc51c:	ea02 010b 	and.w	r1, r2, fp
   dc520:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dc524:	dc7f      	bgt.n	dc626 <_strtod_l+0x926>
   dc526:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dc52a:	f77f aeaa 	ble.w	dc282 <_strtod_l+0x582>
   dc52e:	4a4f      	ldr	r2, [pc, #316]	; (dc66c <_strtod_l+0x96c>)
   dc530:	2300      	movs	r3, #0
   dc532:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dc536:	4650      	mov	r0, sl
   dc538:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dc53c:	4659      	mov	r1, fp
   dc53e:	f7fe ff03 	bl	db348 <__aeabi_dmul>
   dc542:	460b      	mov	r3, r1
   dc544:	4303      	orrs	r3, r0
   dc546:	bf08      	it	eq
   dc548:	2322      	moveq	r3, #34	; 0x22
   dc54a:	4682      	mov	sl, r0
   dc54c:	468b      	mov	fp, r1
   dc54e:	bf08      	it	eq
   dc550:	6023      	streq	r3, [r4, #0]
   dc552:	e62b      	b.n	dc1ac <_strtod_l+0x4ac>
   dc554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc558:	fa02 f303 	lsl.w	r3, r2, r3
   dc55c:	ea03 0a0a 	and.w	sl, r3, sl
   dc560:	e6de      	b.n	dc320 <_strtod_l+0x620>
   dc562:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dc566:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dc56a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dc56e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dc572:	fa01 f308 	lsl.w	r3, r1, r8
   dc576:	930c      	str	r3, [sp, #48]	; 0x30
   dc578:	9111      	str	r1, [sp, #68]	; 0x44
   dc57a:	e741      	b.n	dc400 <_strtod_l+0x700>
   dc57c:	2300      	movs	r3, #0
   dc57e:	930c      	str	r3, [sp, #48]	; 0x30
   dc580:	2301      	movs	r3, #1
   dc582:	9311      	str	r3, [sp, #68]	; 0x44
   dc584:	e73c      	b.n	dc400 <_strtod_l+0x700>
   dc586:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc588:	4642      	mov	r2, r8
   dc58a:	4620      	mov	r0, r4
   dc58c:	f001 f81a 	bl	dd5c4 <__lshift>
   dc590:	901e      	str	r0, [sp, #120]	; 0x78
   dc592:	2800      	cmp	r0, #0
   dc594:	f47f af66 	bne.w	dc464 <_strtod_l+0x764>
   dc598:	e5fe      	b.n	dc198 <_strtod_l+0x498>
   dc59a:	465f      	mov	r7, fp
   dc59c:	d16e      	bne.n	dc67c <_strtod_l+0x97c>
   dc59e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc5a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc5a4:	b342      	cbz	r2, dc5f8 <_strtod_l+0x8f8>
   dc5a6:	4a32      	ldr	r2, [pc, #200]	; (dc670 <_strtod_l+0x970>)
   dc5a8:	4293      	cmp	r3, r2
   dc5aa:	d128      	bne.n	dc5fe <_strtod_l+0x8fe>
   dc5ac:	9b04      	ldr	r3, [sp, #16]
   dc5ae:	4650      	mov	r0, sl
   dc5b0:	b1eb      	cbz	r3, dc5ee <_strtod_l+0x8ee>
   dc5b2:	4a2d      	ldr	r2, [pc, #180]	; (dc668 <_strtod_l+0x968>)
   dc5b4:	403a      	ands	r2, r7
   dc5b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dc5ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dc5be:	d819      	bhi.n	dc5f4 <_strtod_l+0x8f4>
   dc5c0:	0d12      	lsrs	r2, r2, #20
   dc5c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dc5c6:	fa01 f303 	lsl.w	r3, r1, r3
   dc5ca:	4298      	cmp	r0, r3
   dc5cc:	d117      	bne.n	dc5fe <_strtod_l+0x8fe>
   dc5ce:	4b29      	ldr	r3, [pc, #164]	; (dc674 <_strtod_l+0x974>)
   dc5d0:	429f      	cmp	r7, r3
   dc5d2:	d102      	bne.n	dc5da <_strtod_l+0x8da>
   dc5d4:	3001      	adds	r0, #1
   dc5d6:	f43f addf 	beq.w	dc198 <_strtod_l+0x498>
   dc5da:	4b23      	ldr	r3, [pc, #140]	; (dc668 <_strtod_l+0x968>)
   dc5dc:	403b      	ands	r3, r7
   dc5de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dc5e2:	f04f 0a00 	mov.w	sl, #0
   dc5e6:	9b04      	ldr	r3, [sp, #16]
   dc5e8:	2b00      	cmp	r3, #0
   dc5ea:	d1a0      	bne.n	dc52e <_strtod_l+0x82e>
   dc5ec:	e5de      	b.n	dc1ac <_strtod_l+0x4ac>
   dc5ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc5f2:	e7ea      	b.n	dc5ca <_strtod_l+0x8ca>
   dc5f4:	460b      	mov	r3, r1
   dc5f6:	e7e8      	b.n	dc5ca <_strtod_l+0x8ca>
   dc5f8:	ea53 030a 	orrs.w	r3, r3, sl
   dc5fc:	d088      	beq.n	dc510 <_strtod_l+0x810>
   dc5fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dc600:	b1db      	cbz	r3, dc63a <_strtod_l+0x93a>
   dc602:	423b      	tst	r3, r7
   dc604:	d0ef      	beq.n	dc5e6 <_strtod_l+0x8e6>
   dc606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc608:	9a04      	ldr	r2, [sp, #16]
   dc60a:	4650      	mov	r0, sl
   dc60c:	4659      	mov	r1, fp
   dc60e:	b1c3      	cbz	r3, dc642 <_strtod_l+0x942>
   dc610:	f7ff fb5a 	bl	dbcc8 <sulp>
   dc614:	4602      	mov	r2, r0
   dc616:	460b      	mov	r3, r1
   dc618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc61c:	f7fe fcde 	bl	dafdc <__adddf3>
   dc620:	4682      	mov	sl, r0
   dc622:	468b      	mov	fp, r1
   dc624:	e7df      	b.n	dc5e6 <_strtod_l+0x8e6>
   dc626:	4013      	ands	r3, r2
   dc628:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dc62c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dc630:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dc634:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc638:	e7d5      	b.n	dc5e6 <_strtod_l+0x8e6>
   dc63a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc63c:	ea13 0f0a 	tst.w	r3, sl
   dc640:	e7e0      	b.n	dc604 <_strtod_l+0x904>
   dc642:	f7ff fb41 	bl	dbcc8 <sulp>
   dc646:	4602      	mov	r2, r0
   dc648:	460b      	mov	r3, r1
   dc64a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dc64e:	f7fe fcc3 	bl	dafd8 <__aeabi_dsub>
   dc652:	2200      	movs	r2, #0
   dc654:	2300      	movs	r3, #0
   dc656:	4682      	mov	sl, r0
   dc658:	468b      	mov	fp, r1
   dc65a:	f7ff f8dd 	bl	db818 <__aeabi_dcmpeq>
   dc65e:	2800      	cmp	r0, #0
   dc660:	d0c1      	beq.n	dc5e6 <_strtod_l+0x8e6>
   dc662:	e60e      	b.n	dc282 <_strtod_l+0x582>
   dc664:	fffffc02 	.word	0xfffffc02
   dc668:	7ff00000 	.word	0x7ff00000
   dc66c:	39500000 	.word	0x39500000
   dc670:	000fffff 	.word	0x000fffff
   dc674:	7fefffff 	.word	0x7fefffff
   dc678:	000de800 	.word	0x000de800
   dc67c:	4631      	mov	r1, r6
   dc67e:	4628      	mov	r0, r5
   dc680:	f001 f95e 	bl	dd940 <__ratio>
   dc684:	ec59 8b10 	vmov	r8, r9, d0
   dc688:	ee10 0a10 	vmov	r0, s0
   dc68c:	2200      	movs	r2, #0
   dc68e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc692:	4649      	mov	r1, r9
   dc694:	f7ff f8d4 	bl	db840 <__aeabi_dcmple>
   dc698:	2800      	cmp	r0, #0
   dc69a:	d07c      	beq.n	dc796 <_strtod_l+0xa96>
   dc69c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc69e:	2b00      	cmp	r3, #0
   dc6a0:	d04c      	beq.n	dc73c <_strtod_l+0xa3c>
   dc6a2:	4b95      	ldr	r3, [pc, #596]	; (dc8f8 <_strtod_l+0xbf8>)
   dc6a4:	2200      	movs	r2, #0
   dc6a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc6aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; dc8f8 <_strtod_l+0xbf8>
   dc6ae:	f04f 0800 	mov.w	r8, #0
   dc6b2:	4b92      	ldr	r3, [pc, #584]	; (dc8fc <_strtod_l+0xbfc>)
   dc6b4:	403b      	ands	r3, r7
   dc6b6:	9311      	str	r3, [sp, #68]	; 0x44
   dc6b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc6ba:	4b91      	ldr	r3, [pc, #580]	; (dc900 <_strtod_l+0xc00>)
   dc6bc:	429a      	cmp	r2, r3
   dc6be:	f040 80b2 	bne.w	dc826 <_strtod_l+0xb26>
   dc6c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc6c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc6ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dc6ce:	ec4b ab10 	vmov	d0, sl, fp
   dc6d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dc6d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc6da:	f001 f865 	bl	dd7a8 <__ulp>
   dc6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc6e2:	ec53 2b10 	vmov	r2, r3, d0
   dc6e6:	f7fe fe2f 	bl	db348 <__aeabi_dmul>
   dc6ea:	4652      	mov	r2, sl
   dc6ec:	465b      	mov	r3, fp
   dc6ee:	f7fe fc75 	bl	dafdc <__adddf3>
   dc6f2:	460b      	mov	r3, r1
   dc6f4:	4981      	ldr	r1, [pc, #516]	; (dc8fc <_strtod_l+0xbfc>)
   dc6f6:	4a83      	ldr	r2, [pc, #524]	; (dc904 <_strtod_l+0xc04>)
   dc6f8:	4019      	ands	r1, r3
   dc6fa:	4291      	cmp	r1, r2
   dc6fc:	4682      	mov	sl, r0
   dc6fe:	d95e      	bls.n	dc7be <_strtod_l+0xabe>
   dc700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc702:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dc706:	4293      	cmp	r3, r2
   dc708:	d103      	bne.n	dc712 <_strtod_l+0xa12>
   dc70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc70c:	3301      	adds	r3, #1
   dc70e:	f43f ad43 	beq.w	dc198 <_strtod_l+0x498>
   dc712:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dc910 <_strtod_l+0xc10>
   dc716:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dc71a:	991e      	ldr	r1, [sp, #120]	; 0x78
   dc71c:	4620      	mov	r0, r4
   dc71e:	f000 fd7b 	bl	dd218 <_Bfree>
   dc722:	9907      	ldr	r1, [sp, #28]
   dc724:	4620      	mov	r0, r4
   dc726:	f000 fd77 	bl	dd218 <_Bfree>
   dc72a:	4631      	mov	r1, r6
   dc72c:	4620      	mov	r0, r4
   dc72e:	f000 fd73 	bl	dd218 <_Bfree>
   dc732:	4629      	mov	r1, r5
   dc734:	4620      	mov	r0, r4
   dc736:	f000 fd6f 	bl	dd218 <_Bfree>
   dc73a:	e613      	b.n	dc364 <_strtod_l+0x664>
   dc73c:	f1ba 0f00 	cmp.w	sl, #0
   dc740:	d11b      	bne.n	dc77a <_strtod_l+0xa7a>
   dc742:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc746:	b9f3      	cbnz	r3, dc786 <_strtod_l+0xa86>
   dc748:	4b6b      	ldr	r3, [pc, #428]	; (dc8f8 <_strtod_l+0xbf8>)
   dc74a:	2200      	movs	r2, #0
   dc74c:	4640      	mov	r0, r8
   dc74e:	4649      	mov	r1, r9
   dc750:	f7ff f86c 	bl	db82c <__aeabi_dcmplt>
   dc754:	b9d0      	cbnz	r0, dc78c <_strtod_l+0xa8c>
   dc756:	4640      	mov	r0, r8
   dc758:	4649      	mov	r1, r9
   dc75a:	4b6b      	ldr	r3, [pc, #428]	; (dc908 <_strtod_l+0xc08>)
   dc75c:	2200      	movs	r2, #0
   dc75e:	f7fe fdf3 	bl	db348 <__aeabi_dmul>
   dc762:	4680      	mov	r8, r0
   dc764:	4689      	mov	r9, r1
   dc766:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dc76a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dc76e:	931b      	str	r3, [sp, #108]	; 0x6c
   dc770:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dc774:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc778:	e79b      	b.n	dc6b2 <_strtod_l+0x9b2>
   dc77a:	f1ba 0f01 	cmp.w	sl, #1
   dc77e:	d102      	bne.n	dc786 <_strtod_l+0xa86>
   dc780:	2f00      	cmp	r7, #0
   dc782:	f43f ad7e 	beq.w	dc282 <_strtod_l+0x582>
   dc786:	4b61      	ldr	r3, [pc, #388]	; (dc90c <_strtod_l+0xc0c>)
   dc788:	2200      	movs	r2, #0
   dc78a:	e78c      	b.n	dc6a6 <_strtod_l+0x9a6>
   dc78c:	f8df 9178 	ldr.w	r9, [pc, #376]	; dc908 <_strtod_l+0xc08>
   dc790:	f04f 0800 	mov.w	r8, #0
   dc794:	e7e7      	b.n	dc766 <_strtod_l+0xa66>
   dc796:	4b5c      	ldr	r3, [pc, #368]	; (dc908 <_strtod_l+0xc08>)
   dc798:	4640      	mov	r0, r8
   dc79a:	4649      	mov	r1, r9
   dc79c:	2200      	movs	r2, #0
   dc79e:	f7fe fdd3 	bl	db348 <__aeabi_dmul>
   dc7a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc7a4:	4680      	mov	r8, r0
   dc7a6:	4689      	mov	r9, r1
   dc7a8:	b933      	cbnz	r3, dc7b8 <_strtod_l+0xab8>
   dc7aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc7ae:	9012      	str	r0, [sp, #72]	; 0x48
   dc7b0:	9313      	str	r3, [sp, #76]	; 0x4c
   dc7b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dc7b6:	e7dd      	b.n	dc774 <_strtod_l+0xa74>
   dc7b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dc7bc:	e7f9      	b.n	dc7b2 <_strtod_l+0xab2>
   dc7be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dc7c2:	9b04      	ldr	r3, [sp, #16]
   dc7c4:	2b00      	cmp	r3, #0
   dc7c6:	d1a8      	bne.n	dc71a <_strtod_l+0xa1a>
   dc7c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dc7cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc7ce:	0d1b      	lsrs	r3, r3, #20
   dc7d0:	051b      	lsls	r3, r3, #20
   dc7d2:	429a      	cmp	r2, r3
   dc7d4:	d1a1      	bne.n	dc71a <_strtod_l+0xa1a>
   dc7d6:	4640      	mov	r0, r8
   dc7d8:	4649      	mov	r1, r9
   dc7da:	f001 f955 	bl	dda88 <__aeabi_d2lz>
   dc7de:	f7fe fd85 	bl	db2ec <__aeabi_l2d>
   dc7e2:	4602      	mov	r2, r0
   dc7e4:	460b      	mov	r3, r1
   dc7e6:	4640      	mov	r0, r8
   dc7e8:	4649      	mov	r1, r9
   dc7ea:	f7fe fbf5 	bl	dafd8 <__aeabi_dsub>
   dc7ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dc7f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc7f4:	ea43 030a 	orr.w	r3, r3, sl
   dc7f8:	4313      	orrs	r3, r2
   dc7fa:	4680      	mov	r8, r0
   dc7fc:	4689      	mov	r9, r1
   dc7fe:	d053      	beq.n	dc8a8 <_strtod_l+0xba8>
   dc800:	a335      	add	r3, pc, #212	; (adr r3, dc8d8 <_strtod_l+0xbd8>)
   dc802:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc806:	f7ff f811 	bl	db82c <__aeabi_dcmplt>
   dc80a:	2800      	cmp	r0, #0
   dc80c:	f47f acce 	bne.w	dc1ac <_strtod_l+0x4ac>
   dc810:	a333      	add	r3, pc, #204	; (adr r3, dc8e0 <_strtod_l+0xbe0>)
   dc812:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc816:	4640      	mov	r0, r8
   dc818:	4649      	mov	r1, r9
   dc81a:	f7ff f825 	bl	db868 <__aeabi_dcmpgt>
   dc81e:	2800      	cmp	r0, #0
   dc820:	f43f af7b 	beq.w	dc71a <_strtod_l+0xa1a>
   dc824:	e4c2      	b.n	dc1ac <_strtod_l+0x4ac>
   dc826:	9b04      	ldr	r3, [sp, #16]
   dc828:	b333      	cbz	r3, dc878 <_strtod_l+0xb78>
   dc82a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dc82c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dc830:	d822      	bhi.n	dc878 <_strtod_l+0xb78>
   dc832:	a32d      	add	r3, pc, #180	; (adr r3, dc8e8 <_strtod_l+0xbe8>)
   dc834:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc838:	4640      	mov	r0, r8
   dc83a:	4649      	mov	r1, r9
   dc83c:	f7ff f800 	bl	db840 <__aeabi_dcmple>
   dc840:	b1a0      	cbz	r0, dc86c <_strtod_l+0xb6c>
   dc842:	4649      	mov	r1, r9
   dc844:	4640      	mov	r0, r8
   dc846:	f7ff f857 	bl	db8f8 <__aeabi_d2uiz>
   dc84a:	2801      	cmp	r0, #1
   dc84c:	bf38      	it	cc
   dc84e:	2001      	movcc	r0, #1
   dc850:	f7fe fd00 	bl	db254 <__aeabi_ui2d>
   dc854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc856:	4680      	mov	r8, r0
   dc858:	4689      	mov	r9, r1
   dc85a:	bb13      	cbnz	r3, dc8a2 <_strtod_l+0xba2>
   dc85c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc860:	9014      	str	r0, [sp, #80]	; 0x50
   dc862:	9315      	str	r3, [sp, #84]	; 0x54
   dc864:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dc868:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dc86c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dc86e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dc870:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dc874:	1a9b      	subs	r3, r3, r2
   dc876:	930d      	str	r3, [sp, #52]	; 0x34
   dc878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc87c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dc880:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc884:	f000 ff90 	bl	dd7a8 <__ulp>
   dc888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dc88c:	ec53 2b10 	vmov	r2, r3, d0
   dc890:	f7fe fd5a 	bl	db348 <__aeabi_dmul>
   dc894:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dc898:	f7fe fba0 	bl	dafdc <__adddf3>
   dc89c:	4682      	mov	sl, r0
   dc89e:	468b      	mov	fp, r1
   dc8a0:	e78f      	b.n	dc7c2 <_strtod_l+0xac2>
   dc8a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dc8a6:	e7dd      	b.n	dc864 <_strtod_l+0xb64>
   dc8a8:	a311      	add	r3, pc, #68	; (adr r3, dc8f0 <_strtod_l+0xbf0>)
   dc8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc8ae:	f7fe ffbd 	bl	db82c <__aeabi_dcmplt>
   dc8b2:	e7b4      	b.n	dc81e <_strtod_l+0xb1e>
   dc8b4:	2300      	movs	r3, #0
   dc8b6:	930e      	str	r3, [sp, #56]	; 0x38
   dc8b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dc8ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc8bc:	6013      	str	r3, [r2, #0]
   dc8be:	f7ff ba65 	b.w	dbd8c <_strtod_l+0x8c>
   dc8c2:	2b65      	cmp	r3, #101	; 0x65
   dc8c4:	f43f ab5d 	beq.w	dbf82 <_strtod_l+0x282>
   dc8c8:	2b45      	cmp	r3, #69	; 0x45
   dc8ca:	f43f ab5a 	beq.w	dbf82 <_strtod_l+0x282>
   dc8ce:	2201      	movs	r2, #1
   dc8d0:	f7ff bb92 	b.w	dbff8 <_strtod_l+0x2f8>
   dc8d4:	f3af 8000 	nop.w
   dc8d8:	94a03595 	.word	0x94a03595
   dc8dc:	3fdfffff 	.word	0x3fdfffff
   dc8e0:	35afe535 	.word	0x35afe535
   dc8e4:	3fe00000 	.word	0x3fe00000
   dc8e8:	ffc00000 	.word	0xffc00000
   dc8ec:	41dfffff 	.word	0x41dfffff
   dc8f0:	94a03595 	.word	0x94a03595
   dc8f4:	3fcfffff 	.word	0x3fcfffff
   dc8f8:	3ff00000 	.word	0x3ff00000
   dc8fc:	7ff00000 	.word	0x7ff00000
   dc900:	7fe00000 	.word	0x7fe00000
   dc904:	7c9fffff 	.word	0x7c9fffff
   dc908:	3fe00000 	.word	0x3fe00000
   dc90c:	bff00000 	.word	0xbff00000
   dc910:	7fefffff 	.word	0x7fefffff

000dc914 <strtof>:
   dc914:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   dc918:	4e26      	ldr	r6, [pc, #152]	; (dc9b4 <strtof+0xa0>)
   dc91a:	4b27      	ldr	r3, [pc, #156]	; (dc9b8 <strtof+0xa4>)
   dc91c:	460a      	mov	r2, r1
   dc91e:	ed2d 8b02 	vpush	{d8}
   dc922:	4601      	mov	r1, r0
   dc924:	6830      	ldr	r0, [r6, #0]
   dc926:	f7ff f9eb 	bl	dbd00 <_strtod_l>
   dc92a:	ec55 4b10 	vmov	r4, r5, d0
   dc92e:	ee10 2a10 	vmov	r2, s0
   dc932:	ee10 0a10 	vmov	r0, s0
   dc936:	462b      	mov	r3, r5
   dc938:	4629      	mov	r1, r5
   dc93a:	f7fe ff9f 	bl	db87c <__aeabi_dcmpun>
   dc93e:	b190      	cbz	r0, dc966 <strtof+0x52>
   dc940:	2d00      	cmp	r5, #0
   dc942:	481e      	ldr	r0, [pc, #120]	; (dc9bc <strtof+0xa8>)
   dc944:	da09      	bge.n	dc95a <strtof+0x46>
   dc946:	f001 f88b 	bl	dda60 <nanf>
   dc94a:	eeb1 8a40 	vneg.f32	s16, s0
   dc94e:	eeb0 0a48 	vmov.f32	s0, s16
   dc952:	ecbd 8b02 	vpop	{d8}
   dc956:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   dc95a:	ecbd 8b02 	vpop	{d8}
   dc95e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   dc962:	f001 b87d 	b.w	dda60 <nanf>
   dc966:	4620      	mov	r0, r4
   dc968:	4629      	mov	r1, r5
   dc96a:	f7fe ffe5 	bl	db938 <__aeabi_d2f>
   dc96e:	ee08 0a10 	vmov	s16, r0
   dc972:	eddf 7a13 	vldr	s15, [pc, #76]	; dc9c0 <strtof+0xac>
   dc976:	eeb0 7ac8 	vabs.f32	s14, s16
   dc97a:	eeb4 7a67 	vcmp.f32	s14, s15
   dc97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc982:	dde4      	ble.n	dc94e <strtof+0x3a>
   dc984:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
   dc988:	4b0e      	ldr	r3, [pc, #56]	; (dc9c4 <strtof+0xb0>)
   dc98a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc98e:	4620      	mov	r0, r4
   dc990:	4649      	mov	r1, r9
   dc992:	f7fe ff73 	bl	db87c <__aeabi_dcmpun>
   dc996:	b940      	cbnz	r0, dc9aa <strtof+0x96>
   dc998:	4b0a      	ldr	r3, [pc, #40]	; (dc9c4 <strtof+0xb0>)
   dc99a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc99e:	4620      	mov	r0, r4
   dc9a0:	4649      	mov	r1, r9
   dc9a2:	f7fe ff4d 	bl	db840 <__aeabi_dcmple>
   dc9a6:	2800      	cmp	r0, #0
   dc9a8:	d0d1      	beq.n	dc94e <strtof+0x3a>
   dc9aa:	6833      	ldr	r3, [r6, #0]
   dc9ac:	2222      	movs	r2, #34	; 0x22
   dc9ae:	601a      	str	r2, [r3, #0]
   dc9b0:	e7cd      	b.n	dc94e <strtof+0x3a>
   dc9b2:	bf00      	nop
   dc9b4:	2003e1d8 	.word	0x2003e1d8
   dc9b8:	2003e240 	.word	0x2003e240
   dc9bc:	000de5e9 	.word	0x000de5e9
   dc9c0:	7f7fffff 	.word	0x7f7fffff
   dc9c4:	7fefffff 	.word	0x7fefffff

000dc9c8 <_strtol_l.isra.0>:
   dc9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc9cc:	4e3a      	ldr	r6, [pc, #232]	; (dcab8 <_strtol_l.isra.0+0xf0>)
   dc9ce:	4686      	mov	lr, r0
   dc9d0:	468c      	mov	ip, r1
   dc9d2:	4660      	mov	r0, ip
   dc9d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc9d8:	5da5      	ldrb	r5, [r4, r6]
   dc9da:	f015 0508 	ands.w	r5, r5, #8
   dc9de:	d1f8      	bne.n	dc9d2 <_strtol_l.isra.0+0xa>
   dc9e0:	2c2d      	cmp	r4, #45	; 0x2d
   dc9e2:	d133      	bne.n	dca4c <_strtol_l.isra.0+0x84>
   dc9e4:	f89c 4000 	ldrb.w	r4, [ip]
   dc9e8:	f04f 0801 	mov.w	r8, #1
   dc9ec:	f100 0c02 	add.w	ip, r0, #2
   dc9f0:	2b00      	cmp	r3, #0
   dc9f2:	d05c      	beq.n	dcaae <_strtol_l.isra.0+0xe6>
   dc9f4:	2b10      	cmp	r3, #16
   dc9f6:	d10c      	bne.n	dca12 <_strtol_l.isra.0+0x4a>
   dc9f8:	2c30      	cmp	r4, #48	; 0x30
   dc9fa:	d10a      	bne.n	dca12 <_strtol_l.isra.0+0x4a>
   dc9fc:	f89c 0000 	ldrb.w	r0, [ip]
   dca00:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dca04:	2858      	cmp	r0, #88	; 0x58
   dca06:	d14d      	bne.n	dcaa4 <_strtol_l.isra.0+0xdc>
   dca08:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dca0c:	2310      	movs	r3, #16
   dca0e:	f10c 0c02 	add.w	ip, ip, #2
   dca12:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dca16:	3f01      	subs	r7, #1
   dca18:	2600      	movs	r6, #0
   dca1a:	fbb7 f9f3 	udiv	r9, r7, r3
   dca1e:	4630      	mov	r0, r6
   dca20:	fb03 7a19 	mls	sl, r3, r9, r7
   dca24:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dca28:	2d09      	cmp	r5, #9
   dca2a:	d818      	bhi.n	dca5e <_strtol_l.isra.0+0x96>
   dca2c:	462c      	mov	r4, r5
   dca2e:	42a3      	cmp	r3, r4
   dca30:	dd24      	ble.n	dca7c <_strtol_l.isra.0+0xb4>
   dca32:	1c75      	adds	r5, r6, #1
   dca34:	d007      	beq.n	dca46 <_strtol_l.isra.0+0x7e>
   dca36:	4581      	cmp	r9, r0
   dca38:	d31d      	bcc.n	dca76 <_strtol_l.isra.0+0xae>
   dca3a:	d101      	bne.n	dca40 <_strtol_l.isra.0+0x78>
   dca3c:	45a2      	cmp	sl, r4
   dca3e:	db1a      	blt.n	dca76 <_strtol_l.isra.0+0xae>
   dca40:	fb00 4003 	mla	r0, r0, r3, r4
   dca44:	2601      	movs	r6, #1
   dca46:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dca4a:	e7eb      	b.n	dca24 <_strtol_l.isra.0+0x5c>
   dca4c:	2c2b      	cmp	r4, #43	; 0x2b
   dca4e:	bf08      	it	eq
   dca50:	f89c 4000 	ldrbeq.w	r4, [ip]
   dca54:	46a8      	mov	r8, r5
   dca56:	bf08      	it	eq
   dca58:	f100 0c02 	addeq.w	ip, r0, #2
   dca5c:	e7c8      	b.n	dc9f0 <_strtol_l.isra.0+0x28>
   dca5e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dca62:	2d19      	cmp	r5, #25
   dca64:	d801      	bhi.n	dca6a <_strtol_l.isra.0+0xa2>
   dca66:	3c37      	subs	r4, #55	; 0x37
   dca68:	e7e1      	b.n	dca2e <_strtol_l.isra.0+0x66>
   dca6a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dca6e:	2d19      	cmp	r5, #25
   dca70:	d804      	bhi.n	dca7c <_strtol_l.isra.0+0xb4>
   dca72:	3c57      	subs	r4, #87	; 0x57
   dca74:	e7db      	b.n	dca2e <_strtol_l.isra.0+0x66>
   dca76:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dca7a:	e7e4      	b.n	dca46 <_strtol_l.isra.0+0x7e>
   dca7c:	1c73      	adds	r3, r6, #1
   dca7e:	d106      	bne.n	dca8e <_strtol_l.isra.0+0xc6>
   dca80:	2322      	movs	r3, #34	; 0x22
   dca82:	f8ce 3000 	str.w	r3, [lr]
   dca86:	4638      	mov	r0, r7
   dca88:	b942      	cbnz	r2, dca9c <_strtol_l.isra.0+0xd4>
   dca8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dca8e:	f1b8 0f00 	cmp.w	r8, #0
   dca92:	d000      	beq.n	dca96 <_strtol_l.isra.0+0xce>
   dca94:	4240      	negs	r0, r0
   dca96:	2a00      	cmp	r2, #0
   dca98:	d0f7      	beq.n	dca8a <_strtol_l.isra.0+0xc2>
   dca9a:	b10e      	cbz	r6, dcaa0 <_strtol_l.isra.0+0xd8>
   dca9c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dcaa0:	6011      	str	r1, [r2, #0]
   dcaa2:	e7f2      	b.n	dca8a <_strtol_l.isra.0+0xc2>
   dcaa4:	2430      	movs	r4, #48	; 0x30
   dcaa6:	2b00      	cmp	r3, #0
   dcaa8:	d1b3      	bne.n	dca12 <_strtol_l.isra.0+0x4a>
   dcaaa:	2308      	movs	r3, #8
   dcaac:	e7b1      	b.n	dca12 <_strtol_l.isra.0+0x4a>
   dcaae:	2c30      	cmp	r4, #48	; 0x30
   dcab0:	d0a4      	beq.n	dc9fc <_strtol_l.isra.0+0x34>
   dcab2:	230a      	movs	r3, #10
   dcab4:	e7ad      	b.n	dca12 <_strtol_l.isra.0+0x4a>
   dcab6:	bf00      	nop
   dcab8:	000de829 	.word	0x000de829

000dcabc <strtol>:
   dcabc:	4613      	mov	r3, r2
   dcabe:	460a      	mov	r2, r1
   dcac0:	4601      	mov	r1, r0
   dcac2:	4802      	ldr	r0, [pc, #8]	; (dcacc <strtol+0x10>)
   dcac4:	6800      	ldr	r0, [r0, #0]
   dcac6:	f7ff bf7f 	b.w	dc9c8 <_strtol_l.isra.0>
   dcaca:	bf00      	nop
   dcacc:	2003e1d8 	.word	0x2003e1d8

000dcad0 <rshift>:
   dcad0:	6903      	ldr	r3, [r0, #16]
   dcad2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dcad6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcada:	ea4f 1261 	mov.w	r2, r1, asr #5
   dcade:	f100 0414 	add.w	r4, r0, #20
   dcae2:	dd45      	ble.n	dcb70 <rshift+0xa0>
   dcae4:	f011 011f 	ands.w	r1, r1, #31
   dcae8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dcaec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dcaf0:	d10c      	bne.n	dcb0c <rshift+0x3c>
   dcaf2:	f100 0710 	add.w	r7, r0, #16
   dcaf6:	4629      	mov	r1, r5
   dcaf8:	42b1      	cmp	r1, r6
   dcafa:	d334      	bcc.n	dcb66 <rshift+0x96>
   dcafc:	1a9b      	subs	r3, r3, r2
   dcafe:	009b      	lsls	r3, r3, #2
   dcb00:	1eea      	subs	r2, r5, #3
   dcb02:	4296      	cmp	r6, r2
   dcb04:	bf38      	it	cc
   dcb06:	2300      	movcc	r3, #0
   dcb08:	4423      	add	r3, r4
   dcb0a:	e015      	b.n	dcb38 <rshift+0x68>
   dcb0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dcb10:	f1c1 0820 	rsb	r8, r1, #32
   dcb14:	40cf      	lsrs	r7, r1
   dcb16:	f105 0e04 	add.w	lr, r5, #4
   dcb1a:	46a1      	mov	r9, r4
   dcb1c:	4576      	cmp	r6, lr
   dcb1e:	46f4      	mov	ip, lr
   dcb20:	d815      	bhi.n	dcb4e <rshift+0x7e>
   dcb22:	1a9b      	subs	r3, r3, r2
   dcb24:	009a      	lsls	r2, r3, #2
   dcb26:	3a04      	subs	r2, #4
   dcb28:	3501      	adds	r5, #1
   dcb2a:	42ae      	cmp	r6, r5
   dcb2c:	bf38      	it	cc
   dcb2e:	2200      	movcc	r2, #0
   dcb30:	18a3      	adds	r3, r4, r2
   dcb32:	50a7      	str	r7, [r4, r2]
   dcb34:	b107      	cbz	r7, dcb38 <rshift+0x68>
   dcb36:	3304      	adds	r3, #4
   dcb38:	1b1a      	subs	r2, r3, r4
   dcb3a:	42a3      	cmp	r3, r4
   dcb3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dcb40:	bf08      	it	eq
   dcb42:	2300      	moveq	r3, #0
   dcb44:	6102      	str	r2, [r0, #16]
   dcb46:	bf08      	it	eq
   dcb48:	6143      	streq	r3, [r0, #20]
   dcb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcb4e:	f8dc c000 	ldr.w	ip, [ip]
   dcb52:	fa0c fc08 	lsl.w	ip, ip, r8
   dcb56:	ea4c 0707 	orr.w	r7, ip, r7
   dcb5a:	f849 7b04 	str.w	r7, [r9], #4
   dcb5e:	f85e 7b04 	ldr.w	r7, [lr], #4
   dcb62:	40cf      	lsrs	r7, r1
   dcb64:	e7da      	b.n	dcb1c <rshift+0x4c>
   dcb66:	f851 cb04 	ldr.w	ip, [r1], #4
   dcb6a:	f847 cf04 	str.w	ip, [r7, #4]!
   dcb6e:	e7c3      	b.n	dcaf8 <rshift+0x28>
   dcb70:	4623      	mov	r3, r4
   dcb72:	e7e1      	b.n	dcb38 <rshift+0x68>

000dcb74 <__hexdig_fun>:
   dcb74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dcb78:	2b09      	cmp	r3, #9
   dcb7a:	d802      	bhi.n	dcb82 <__hexdig_fun+0xe>
   dcb7c:	3820      	subs	r0, #32
   dcb7e:	b2c0      	uxtb	r0, r0
   dcb80:	4770      	bx	lr
   dcb82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dcb86:	2b05      	cmp	r3, #5
   dcb88:	d801      	bhi.n	dcb8e <__hexdig_fun+0x1a>
   dcb8a:	3847      	subs	r0, #71	; 0x47
   dcb8c:	e7f7      	b.n	dcb7e <__hexdig_fun+0xa>
   dcb8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dcb92:	2b05      	cmp	r3, #5
   dcb94:	d801      	bhi.n	dcb9a <__hexdig_fun+0x26>
   dcb96:	3827      	subs	r0, #39	; 0x27
   dcb98:	e7f1      	b.n	dcb7e <__hexdig_fun+0xa>
   dcb9a:	2000      	movs	r0, #0
   dcb9c:	4770      	bx	lr
	...

000dcba0 <__gethex>:
   dcba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcba4:	ed2d 8b02 	vpush	{d8}
   dcba8:	b089      	sub	sp, #36	; 0x24
   dcbaa:	ee08 0a10 	vmov	s16, r0
   dcbae:	9304      	str	r3, [sp, #16]
   dcbb0:	4bbc      	ldr	r3, [pc, #752]	; (dcea4 <__gethex+0x304>)
   dcbb2:	681b      	ldr	r3, [r3, #0]
   dcbb4:	9301      	str	r3, [sp, #4]
   dcbb6:	4618      	mov	r0, r3
   dcbb8:	468b      	mov	fp, r1
   dcbba:	4690      	mov	r8, r2
   dcbbc:	f7ff f843 	bl	dbc46 <strlen>
   dcbc0:	9b01      	ldr	r3, [sp, #4]
   dcbc2:	f8db 2000 	ldr.w	r2, [fp]
   dcbc6:	4403      	add	r3, r0
   dcbc8:	4682      	mov	sl, r0
   dcbca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dcbce:	9305      	str	r3, [sp, #20]
   dcbd0:	1c93      	adds	r3, r2, #2
   dcbd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dcbd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dcbda:	32fe      	adds	r2, #254	; 0xfe
   dcbdc:	18d1      	adds	r1, r2, r3
   dcbde:	461f      	mov	r7, r3
   dcbe0:	f813 0b01 	ldrb.w	r0, [r3], #1
   dcbe4:	9100      	str	r1, [sp, #0]
   dcbe6:	2830      	cmp	r0, #48	; 0x30
   dcbe8:	d0f8      	beq.n	dcbdc <__gethex+0x3c>
   dcbea:	f7ff ffc3 	bl	dcb74 <__hexdig_fun>
   dcbee:	4604      	mov	r4, r0
   dcbf0:	2800      	cmp	r0, #0
   dcbf2:	d13a      	bne.n	dcc6a <__gethex+0xca>
   dcbf4:	9901      	ldr	r1, [sp, #4]
   dcbf6:	4652      	mov	r2, sl
   dcbf8:	4638      	mov	r0, r7
   dcbfa:	f7ff f82c 	bl	dbc56 <strncmp>
   dcbfe:	4605      	mov	r5, r0
   dcc00:	2800      	cmp	r0, #0
   dcc02:	d168      	bne.n	dccd6 <__gethex+0x136>
   dcc04:	f817 000a 	ldrb.w	r0, [r7, sl]
   dcc08:	eb07 060a 	add.w	r6, r7, sl
   dcc0c:	f7ff ffb2 	bl	dcb74 <__hexdig_fun>
   dcc10:	2800      	cmp	r0, #0
   dcc12:	d062      	beq.n	dccda <__gethex+0x13a>
   dcc14:	4633      	mov	r3, r6
   dcc16:	7818      	ldrb	r0, [r3, #0]
   dcc18:	2830      	cmp	r0, #48	; 0x30
   dcc1a:	461f      	mov	r7, r3
   dcc1c:	f103 0301 	add.w	r3, r3, #1
   dcc20:	d0f9      	beq.n	dcc16 <__gethex+0x76>
   dcc22:	f7ff ffa7 	bl	dcb74 <__hexdig_fun>
   dcc26:	2301      	movs	r3, #1
   dcc28:	fab0 f480 	clz	r4, r0
   dcc2c:	0964      	lsrs	r4, r4, #5
   dcc2e:	4635      	mov	r5, r6
   dcc30:	9300      	str	r3, [sp, #0]
   dcc32:	463a      	mov	r2, r7
   dcc34:	4616      	mov	r6, r2
   dcc36:	3201      	adds	r2, #1
   dcc38:	7830      	ldrb	r0, [r6, #0]
   dcc3a:	f7ff ff9b 	bl	dcb74 <__hexdig_fun>
   dcc3e:	2800      	cmp	r0, #0
   dcc40:	d1f8      	bne.n	dcc34 <__gethex+0x94>
   dcc42:	9901      	ldr	r1, [sp, #4]
   dcc44:	4652      	mov	r2, sl
   dcc46:	4630      	mov	r0, r6
   dcc48:	f7ff f805 	bl	dbc56 <strncmp>
   dcc4c:	b980      	cbnz	r0, dcc70 <__gethex+0xd0>
   dcc4e:	b94d      	cbnz	r5, dcc64 <__gethex+0xc4>
   dcc50:	eb06 050a 	add.w	r5, r6, sl
   dcc54:	462a      	mov	r2, r5
   dcc56:	4616      	mov	r6, r2
   dcc58:	3201      	adds	r2, #1
   dcc5a:	7830      	ldrb	r0, [r6, #0]
   dcc5c:	f7ff ff8a 	bl	dcb74 <__hexdig_fun>
   dcc60:	2800      	cmp	r0, #0
   dcc62:	d1f8      	bne.n	dcc56 <__gethex+0xb6>
   dcc64:	1bad      	subs	r5, r5, r6
   dcc66:	00ad      	lsls	r5, r5, #2
   dcc68:	e004      	b.n	dcc74 <__gethex+0xd4>
   dcc6a:	2400      	movs	r4, #0
   dcc6c:	4625      	mov	r5, r4
   dcc6e:	e7e0      	b.n	dcc32 <__gethex+0x92>
   dcc70:	2d00      	cmp	r5, #0
   dcc72:	d1f7      	bne.n	dcc64 <__gethex+0xc4>
   dcc74:	7833      	ldrb	r3, [r6, #0]
   dcc76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dcc7a:	2b50      	cmp	r3, #80	; 0x50
   dcc7c:	d13b      	bne.n	dccf6 <__gethex+0x156>
   dcc7e:	7873      	ldrb	r3, [r6, #1]
   dcc80:	2b2b      	cmp	r3, #43	; 0x2b
   dcc82:	d02c      	beq.n	dccde <__gethex+0x13e>
   dcc84:	2b2d      	cmp	r3, #45	; 0x2d
   dcc86:	d02e      	beq.n	dcce6 <__gethex+0x146>
   dcc88:	1c71      	adds	r1, r6, #1
   dcc8a:	f04f 0900 	mov.w	r9, #0
   dcc8e:	7808      	ldrb	r0, [r1, #0]
   dcc90:	f7ff ff70 	bl	dcb74 <__hexdig_fun>
   dcc94:	1e43      	subs	r3, r0, #1
   dcc96:	b2db      	uxtb	r3, r3
   dcc98:	2b18      	cmp	r3, #24
   dcc9a:	d82c      	bhi.n	dccf6 <__gethex+0x156>
   dcc9c:	f1a0 0210 	sub.w	r2, r0, #16
   dcca0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dcca4:	f7ff ff66 	bl	dcb74 <__hexdig_fun>
   dcca8:	1e43      	subs	r3, r0, #1
   dccaa:	b2db      	uxtb	r3, r3
   dccac:	2b18      	cmp	r3, #24
   dccae:	d91d      	bls.n	dccec <__gethex+0x14c>
   dccb0:	f1b9 0f00 	cmp.w	r9, #0
   dccb4:	d000      	beq.n	dccb8 <__gethex+0x118>
   dccb6:	4252      	negs	r2, r2
   dccb8:	4415      	add	r5, r2
   dccba:	f8cb 1000 	str.w	r1, [fp]
   dccbe:	b1e4      	cbz	r4, dccfa <__gethex+0x15a>
   dccc0:	9b00      	ldr	r3, [sp, #0]
   dccc2:	2b00      	cmp	r3, #0
   dccc4:	bf14      	ite	ne
   dccc6:	2700      	movne	r7, #0
   dccc8:	2706      	moveq	r7, #6
   dccca:	4638      	mov	r0, r7
   dcccc:	b009      	add	sp, #36	; 0x24
   dccce:	ecbd 8b02 	vpop	{d8}
   dccd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dccd6:	463e      	mov	r6, r7
   dccd8:	4625      	mov	r5, r4
   dccda:	2401      	movs	r4, #1
   dccdc:	e7ca      	b.n	dcc74 <__gethex+0xd4>
   dccde:	f04f 0900 	mov.w	r9, #0
   dcce2:	1cb1      	adds	r1, r6, #2
   dcce4:	e7d3      	b.n	dcc8e <__gethex+0xee>
   dcce6:	f04f 0901 	mov.w	r9, #1
   dccea:	e7fa      	b.n	dcce2 <__gethex+0x142>
   dccec:	230a      	movs	r3, #10
   dccee:	fb03 0202 	mla	r2, r3, r2, r0
   dccf2:	3a10      	subs	r2, #16
   dccf4:	e7d4      	b.n	dcca0 <__gethex+0x100>
   dccf6:	4631      	mov	r1, r6
   dccf8:	e7df      	b.n	dccba <__gethex+0x11a>
   dccfa:	1bf3      	subs	r3, r6, r7
   dccfc:	3b01      	subs	r3, #1
   dccfe:	4621      	mov	r1, r4
   dcd00:	2b07      	cmp	r3, #7
   dcd02:	dc52      	bgt.n	dcdaa <__gethex+0x20a>
   dcd04:	ee18 0a10 	vmov	r0, s16
   dcd08:	f000 fa52 	bl	dd1b0 <_Balloc>
   dcd0c:	f04f 0b00 	mov.w	fp, #0
   dcd10:	f100 0914 	add.w	r9, r0, #20
   dcd14:	f1ca 0301 	rsb	r3, sl, #1
   dcd18:	4604      	mov	r4, r0
   dcd1a:	f8cd 9008 	str.w	r9, [sp, #8]
   dcd1e:	f8cd b000 	str.w	fp, [sp]
   dcd22:	9306      	str	r3, [sp, #24]
   dcd24:	42b7      	cmp	r7, r6
   dcd26:	d343      	bcc.n	dcdb0 <__gethex+0x210>
   dcd28:	9802      	ldr	r0, [sp, #8]
   dcd2a:	9b00      	ldr	r3, [sp, #0]
   dcd2c:	f840 3b04 	str.w	r3, [r0], #4
   dcd30:	eba0 0009 	sub.w	r0, r0, r9
   dcd34:	1080      	asrs	r0, r0, #2
   dcd36:	0146      	lsls	r6, r0, #5
   dcd38:	6120      	str	r0, [r4, #16]
   dcd3a:	4618      	mov	r0, r3
   dcd3c:	f000 faff 	bl	dd33e <__hi0bits>
   dcd40:	1a30      	subs	r0, r6, r0
   dcd42:	f8d8 6000 	ldr.w	r6, [r8]
   dcd46:	42b0      	cmp	r0, r6
   dcd48:	dd66      	ble.n	dce18 <__gethex+0x278>
   dcd4a:	1b87      	subs	r7, r0, r6
   dcd4c:	4639      	mov	r1, r7
   dcd4e:	4620      	mov	r0, r4
   dcd50:	f000 fe4c 	bl	dd9ec <__any_on>
   dcd54:	4682      	mov	sl, r0
   dcd56:	b1a8      	cbz	r0, dcd84 <__gethex+0x1e4>
   dcd58:	1e7b      	subs	r3, r7, #1
   dcd5a:	1159      	asrs	r1, r3, #5
   dcd5c:	f003 021f 	and.w	r2, r3, #31
   dcd60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dcd64:	f04f 0a01 	mov.w	sl, #1
   dcd68:	fa0a f202 	lsl.w	r2, sl, r2
   dcd6c:	420a      	tst	r2, r1
   dcd6e:	d009      	beq.n	dcd84 <__gethex+0x1e4>
   dcd70:	4553      	cmp	r3, sl
   dcd72:	dd05      	ble.n	dcd80 <__gethex+0x1e0>
   dcd74:	1eb9      	subs	r1, r7, #2
   dcd76:	4620      	mov	r0, r4
   dcd78:	f000 fe38 	bl	dd9ec <__any_on>
   dcd7c:	2800      	cmp	r0, #0
   dcd7e:	d148      	bne.n	dce12 <__gethex+0x272>
   dcd80:	f04f 0a02 	mov.w	sl, #2
   dcd84:	4639      	mov	r1, r7
   dcd86:	4620      	mov	r0, r4
   dcd88:	f7ff fea2 	bl	dcad0 <rshift>
   dcd8c:	443d      	add	r5, r7
   dcd8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dcd92:	42ab      	cmp	r3, r5
   dcd94:	da4f      	bge.n	dce36 <__gethex+0x296>
   dcd96:	ee18 0a10 	vmov	r0, s16
   dcd9a:	4621      	mov	r1, r4
   dcd9c:	f000 fa3c 	bl	dd218 <_Bfree>
   dcda0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dcda2:	2300      	movs	r3, #0
   dcda4:	6013      	str	r3, [r2, #0]
   dcda6:	27a3      	movs	r7, #163	; 0xa3
   dcda8:	e78f      	b.n	dccca <__gethex+0x12a>
   dcdaa:	3101      	adds	r1, #1
   dcdac:	105b      	asrs	r3, r3, #1
   dcdae:	e7a7      	b.n	dcd00 <__gethex+0x160>
   dcdb0:	1e73      	subs	r3, r6, #1
   dcdb2:	9a05      	ldr	r2, [sp, #20]
   dcdb4:	9303      	str	r3, [sp, #12]
   dcdb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dcdba:	4293      	cmp	r3, r2
   dcdbc:	d019      	beq.n	dcdf2 <__gethex+0x252>
   dcdbe:	f1bb 0f20 	cmp.w	fp, #32
   dcdc2:	d107      	bne.n	dcdd4 <__gethex+0x234>
   dcdc4:	9b02      	ldr	r3, [sp, #8]
   dcdc6:	9a00      	ldr	r2, [sp, #0]
   dcdc8:	f843 2b04 	str.w	r2, [r3], #4
   dcdcc:	9302      	str	r3, [sp, #8]
   dcdce:	2300      	movs	r3, #0
   dcdd0:	9300      	str	r3, [sp, #0]
   dcdd2:	469b      	mov	fp, r3
   dcdd4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dcdd8:	f7ff fecc 	bl	dcb74 <__hexdig_fun>
   dcddc:	9b00      	ldr	r3, [sp, #0]
   dcdde:	f000 000f 	and.w	r0, r0, #15
   dcde2:	fa00 f00b 	lsl.w	r0, r0, fp
   dcde6:	4303      	orrs	r3, r0
   dcde8:	9300      	str	r3, [sp, #0]
   dcdea:	f10b 0b04 	add.w	fp, fp, #4
   dcdee:	9b03      	ldr	r3, [sp, #12]
   dcdf0:	e00d      	b.n	dce0e <__gethex+0x26e>
   dcdf2:	9b03      	ldr	r3, [sp, #12]
   dcdf4:	9a06      	ldr	r2, [sp, #24]
   dcdf6:	4413      	add	r3, r2
   dcdf8:	42bb      	cmp	r3, r7
   dcdfa:	d3e0      	bcc.n	dcdbe <__gethex+0x21e>
   dcdfc:	4618      	mov	r0, r3
   dcdfe:	9901      	ldr	r1, [sp, #4]
   dce00:	9307      	str	r3, [sp, #28]
   dce02:	4652      	mov	r2, sl
   dce04:	f7fe ff27 	bl	dbc56 <strncmp>
   dce08:	9b07      	ldr	r3, [sp, #28]
   dce0a:	2800      	cmp	r0, #0
   dce0c:	d1d7      	bne.n	dcdbe <__gethex+0x21e>
   dce0e:	461e      	mov	r6, r3
   dce10:	e788      	b.n	dcd24 <__gethex+0x184>
   dce12:	f04f 0a03 	mov.w	sl, #3
   dce16:	e7b5      	b.n	dcd84 <__gethex+0x1e4>
   dce18:	da0a      	bge.n	dce30 <__gethex+0x290>
   dce1a:	1a37      	subs	r7, r6, r0
   dce1c:	4621      	mov	r1, r4
   dce1e:	ee18 0a10 	vmov	r0, s16
   dce22:	463a      	mov	r2, r7
   dce24:	f000 fbce 	bl	dd5c4 <__lshift>
   dce28:	1bed      	subs	r5, r5, r7
   dce2a:	4604      	mov	r4, r0
   dce2c:	f100 0914 	add.w	r9, r0, #20
   dce30:	f04f 0a00 	mov.w	sl, #0
   dce34:	e7ab      	b.n	dcd8e <__gethex+0x1ee>
   dce36:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dce3a:	42a8      	cmp	r0, r5
   dce3c:	dd6d      	ble.n	dcf1a <__gethex+0x37a>
   dce3e:	1b45      	subs	r5, r0, r5
   dce40:	42ae      	cmp	r6, r5
   dce42:	dc31      	bgt.n	dcea8 <__gethex+0x308>
   dce44:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dce48:	2b02      	cmp	r3, #2
   dce4a:	d023      	beq.n	dce94 <__gethex+0x2f4>
   dce4c:	2b03      	cmp	r3, #3
   dce4e:	d025      	beq.n	dce9c <__gethex+0x2fc>
   dce50:	2b01      	cmp	r3, #1
   dce52:	d115      	bne.n	dce80 <__gethex+0x2e0>
   dce54:	42ae      	cmp	r6, r5
   dce56:	d113      	bne.n	dce80 <__gethex+0x2e0>
   dce58:	2e01      	cmp	r6, #1
   dce5a:	d10b      	bne.n	dce74 <__gethex+0x2d4>
   dce5c:	9a04      	ldr	r2, [sp, #16]
   dce5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dce62:	6013      	str	r3, [r2, #0]
   dce64:	2301      	movs	r3, #1
   dce66:	6123      	str	r3, [r4, #16]
   dce68:	f8c9 3000 	str.w	r3, [r9]
   dce6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dce6e:	2762      	movs	r7, #98	; 0x62
   dce70:	601c      	str	r4, [r3, #0]
   dce72:	e72a      	b.n	dccca <__gethex+0x12a>
   dce74:	1e71      	subs	r1, r6, #1
   dce76:	4620      	mov	r0, r4
   dce78:	f000 fdb8 	bl	dd9ec <__any_on>
   dce7c:	2800      	cmp	r0, #0
   dce7e:	d1ed      	bne.n	dce5c <__gethex+0x2bc>
   dce80:	ee18 0a10 	vmov	r0, s16
   dce84:	4621      	mov	r1, r4
   dce86:	f000 f9c7 	bl	dd218 <_Bfree>
   dce8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dce8c:	2300      	movs	r3, #0
   dce8e:	6013      	str	r3, [r2, #0]
   dce90:	2750      	movs	r7, #80	; 0x50
   dce92:	e71a      	b.n	dccca <__gethex+0x12a>
   dce94:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dce96:	2b00      	cmp	r3, #0
   dce98:	d1f2      	bne.n	dce80 <__gethex+0x2e0>
   dce9a:	e7df      	b.n	dce5c <__gethex+0x2bc>
   dce9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dce9e:	2b00      	cmp	r3, #0
   dcea0:	d1dc      	bne.n	dce5c <__gethex+0x2bc>
   dcea2:	e7ed      	b.n	dce80 <__gethex+0x2e0>
   dcea4:	000de92c 	.word	0x000de92c
   dcea8:	1e6f      	subs	r7, r5, #1
   dceaa:	f1ba 0f00 	cmp.w	sl, #0
   dceae:	d131      	bne.n	dcf14 <__gethex+0x374>
   dceb0:	b127      	cbz	r7, dcebc <__gethex+0x31c>
   dceb2:	4639      	mov	r1, r7
   dceb4:	4620      	mov	r0, r4
   dceb6:	f000 fd99 	bl	dd9ec <__any_on>
   dceba:	4682      	mov	sl, r0
   dcebc:	117b      	asrs	r3, r7, #5
   dcebe:	2101      	movs	r1, #1
   dcec0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dcec4:	f007 071f 	and.w	r7, r7, #31
   dcec8:	fa01 f707 	lsl.w	r7, r1, r7
   dcecc:	421f      	tst	r7, r3
   dcece:	4629      	mov	r1, r5
   dced0:	4620      	mov	r0, r4
   dced2:	bf18      	it	ne
   dced4:	f04a 0a02 	orrne.w	sl, sl, #2
   dced8:	1b76      	subs	r6, r6, r5
   dceda:	f7ff fdf9 	bl	dcad0 <rshift>
   dcede:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dcee2:	2702      	movs	r7, #2
   dcee4:	f1ba 0f00 	cmp.w	sl, #0
   dcee8:	d048      	beq.n	dcf7c <__gethex+0x3dc>
   dceea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dceee:	2b02      	cmp	r3, #2
   dcef0:	d015      	beq.n	dcf1e <__gethex+0x37e>
   dcef2:	2b03      	cmp	r3, #3
   dcef4:	d017      	beq.n	dcf26 <__gethex+0x386>
   dcef6:	2b01      	cmp	r3, #1
   dcef8:	d109      	bne.n	dcf0e <__gethex+0x36e>
   dcefa:	f01a 0f02 	tst.w	sl, #2
   dcefe:	d006      	beq.n	dcf0e <__gethex+0x36e>
   dcf00:	f8d9 0000 	ldr.w	r0, [r9]
   dcf04:	ea4a 0a00 	orr.w	sl, sl, r0
   dcf08:	f01a 0f01 	tst.w	sl, #1
   dcf0c:	d10e      	bne.n	dcf2c <__gethex+0x38c>
   dcf0e:	f047 0710 	orr.w	r7, r7, #16
   dcf12:	e033      	b.n	dcf7c <__gethex+0x3dc>
   dcf14:	f04f 0a01 	mov.w	sl, #1
   dcf18:	e7d0      	b.n	dcebc <__gethex+0x31c>
   dcf1a:	2701      	movs	r7, #1
   dcf1c:	e7e2      	b.n	dcee4 <__gethex+0x344>
   dcf1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcf20:	f1c3 0301 	rsb	r3, r3, #1
   dcf24:	9315      	str	r3, [sp, #84]	; 0x54
   dcf26:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dcf28:	2b00      	cmp	r3, #0
   dcf2a:	d0f0      	beq.n	dcf0e <__gethex+0x36e>
   dcf2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dcf30:	f104 0314 	add.w	r3, r4, #20
   dcf34:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dcf38:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dcf3c:	f04f 0c00 	mov.w	ip, #0
   dcf40:	4618      	mov	r0, r3
   dcf42:	f853 2b04 	ldr.w	r2, [r3], #4
   dcf46:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dcf4a:	d01c      	beq.n	dcf86 <__gethex+0x3e6>
   dcf4c:	3201      	adds	r2, #1
   dcf4e:	6002      	str	r2, [r0, #0]
   dcf50:	2f02      	cmp	r7, #2
   dcf52:	f104 0314 	add.w	r3, r4, #20
   dcf56:	d13a      	bne.n	dcfce <__gethex+0x42e>
   dcf58:	f8d8 2000 	ldr.w	r2, [r8]
   dcf5c:	3a01      	subs	r2, #1
   dcf5e:	42b2      	cmp	r2, r6
   dcf60:	d10a      	bne.n	dcf78 <__gethex+0x3d8>
   dcf62:	1171      	asrs	r1, r6, #5
   dcf64:	2201      	movs	r2, #1
   dcf66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dcf6a:	f006 061f 	and.w	r6, r6, #31
   dcf6e:	fa02 f606 	lsl.w	r6, r2, r6
   dcf72:	421e      	tst	r6, r3
   dcf74:	bf18      	it	ne
   dcf76:	4617      	movne	r7, r2
   dcf78:	f047 0720 	orr.w	r7, r7, #32
   dcf7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dcf7e:	601c      	str	r4, [r3, #0]
   dcf80:	9b04      	ldr	r3, [sp, #16]
   dcf82:	601d      	str	r5, [r3, #0]
   dcf84:	e6a1      	b.n	dccca <__gethex+0x12a>
   dcf86:	4299      	cmp	r1, r3
   dcf88:	f843 cc04 	str.w	ip, [r3, #-4]
   dcf8c:	d8d8      	bhi.n	dcf40 <__gethex+0x3a0>
   dcf8e:	68a3      	ldr	r3, [r4, #8]
   dcf90:	4599      	cmp	r9, r3
   dcf92:	db14      	blt.n	dcfbe <__gethex+0x41e>
   dcf94:	6861      	ldr	r1, [r4, #4]
   dcf96:	ee18 0a10 	vmov	r0, s16
   dcf9a:	3101      	adds	r1, #1
   dcf9c:	f000 f908 	bl	dd1b0 <_Balloc>
   dcfa0:	6922      	ldr	r2, [r4, #16]
   dcfa2:	3202      	adds	r2, #2
   dcfa4:	f104 010c 	add.w	r1, r4, #12
   dcfa8:	4682      	mov	sl, r0
   dcfaa:	0092      	lsls	r2, r2, #2
   dcfac:	300c      	adds	r0, #12
   dcfae:	f7fe fdaf 	bl	dbb10 <memcpy>
   dcfb2:	4621      	mov	r1, r4
   dcfb4:	ee18 0a10 	vmov	r0, s16
   dcfb8:	f000 f92e 	bl	dd218 <_Bfree>
   dcfbc:	4654      	mov	r4, sl
   dcfbe:	6923      	ldr	r3, [r4, #16]
   dcfc0:	1c5a      	adds	r2, r3, #1
   dcfc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dcfc6:	6122      	str	r2, [r4, #16]
   dcfc8:	2201      	movs	r2, #1
   dcfca:	615a      	str	r2, [r3, #20]
   dcfcc:	e7c0      	b.n	dcf50 <__gethex+0x3b0>
   dcfce:	6922      	ldr	r2, [r4, #16]
   dcfd0:	454a      	cmp	r2, r9
   dcfd2:	dd0b      	ble.n	dcfec <__gethex+0x44c>
   dcfd4:	2101      	movs	r1, #1
   dcfd6:	4620      	mov	r0, r4
   dcfd8:	f7ff fd7a 	bl	dcad0 <rshift>
   dcfdc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dcfe0:	3501      	adds	r5, #1
   dcfe2:	42ab      	cmp	r3, r5
   dcfe4:	f6ff aed7 	blt.w	dcd96 <__gethex+0x1f6>
   dcfe8:	2701      	movs	r7, #1
   dcfea:	e7c5      	b.n	dcf78 <__gethex+0x3d8>
   dcfec:	f016 061f 	ands.w	r6, r6, #31
   dcff0:	d0fa      	beq.n	dcfe8 <__gethex+0x448>
   dcff2:	449b      	add	fp, r3
   dcff4:	f1c6 0620 	rsb	r6, r6, #32
   dcff8:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dcffc:	f000 f99f 	bl	dd33e <__hi0bits>
   dd000:	42b0      	cmp	r0, r6
   dd002:	dbe7      	blt.n	dcfd4 <__gethex+0x434>
   dd004:	e7f0      	b.n	dcfe8 <__gethex+0x448>
   dd006:	bf00      	nop

000dd008 <L_shift>:
   dd008:	f1c2 0208 	rsb	r2, r2, #8
   dd00c:	0092      	lsls	r2, r2, #2
   dd00e:	b570      	push	{r4, r5, r6, lr}
   dd010:	f1c2 0620 	rsb	r6, r2, #32
   dd014:	6843      	ldr	r3, [r0, #4]
   dd016:	6804      	ldr	r4, [r0, #0]
   dd018:	fa03 f506 	lsl.w	r5, r3, r6
   dd01c:	432c      	orrs	r4, r5
   dd01e:	40d3      	lsrs	r3, r2
   dd020:	6004      	str	r4, [r0, #0]
   dd022:	f840 3f04 	str.w	r3, [r0, #4]!
   dd026:	4288      	cmp	r0, r1
   dd028:	d3f4      	bcc.n	dd014 <L_shift+0xc>
   dd02a:	bd70      	pop	{r4, r5, r6, pc}

000dd02c <__match>:
   dd02c:	b530      	push	{r4, r5, lr}
   dd02e:	6803      	ldr	r3, [r0, #0]
   dd030:	3301      	adds	r3, #1
   dd032:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd036:	b914      	cbnz	r4, dd03e <__match+0x12>
   dd038:	6003      	str	r3, [r0, #0]
   dd03a:	2001      	movs	r0, #1
   dd03c:	bd30      	pop	{r4, r5, pc}
   dd03e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd042:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dd046:	2d19      	cmp	r5, #25
   dd048:	bf98      	it	ls
   dd04a:	3220      	addls	r2, #32
   dd04c:	42a2      	cmp	r2, r4
   dd04e:	d0f0      	beq.n	dd032 <__match+0x6>
   dd050:	2000      	movs	r0, #0
   dd052:	e7f3      	b.n	dd03c <__match+0x10>

000dd054 <__hexnan>:
   dd054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd058:	680b      	ldr	r3, [r1, #0]
   dd05a:	6801      	ldr	r1, [r0, #0]
   dd05c:	115e      	asrs	r6, r3, #5
   dd05e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dd062:	f013 031f 	ands.w	r3, r3, #31
   dd066:	b087      	sub	sp, #28
   dd068:	bf18      	it	ne
   dd06a:	3604      	addne	r6, #4
   dd06c:	2500      	movs	r5, #0
   dd06e:	1f37      	subs	r7, r6, #4
   dd070:	4682      	mov	sl, r0
   dd072:	4690      	mov	r8, r2
   dd074:	9301      	str	r3, [sp, #4]
   dd076:	f846 5c04 	str.w	r5, [r6, #-4]
   dd07a:	46b9      	mov	r9, r7
   dd07c:	463c      	mov	r4, r7
   dd07e:	9502      	str	r5, [sp, #8]
   dd080:	46ab      	mov	fp, r5
   dd082:	784a      	ldrb	r2, [r1, #1]
   dd084:	1c4b      	adds	r3, r1, #1
   dd086:	9303      	str	r3, [sp, #12]
   dd088:	b342      	cbz	r2, dd0dc <__hexnan+0x88>
   dd08a:	4610      	mov	r0, r2
   dd08c:	9105      	str	r1, [sp, #20]
   dd08e:	9204      	str	r2, [sp, #16]
   dd090:	f7ff fd70 	bl	dcb74 <__hexdig_fun>
   dd094:	2800      	cmp	r0, #0
   dd096:	d14f      	bne.n	dd138 <__hexnan+0xe4>
   dd098:	9a04      	ldr	r2, [sp, #16]
   dd09a:	9905      	ldr	r1, [sp, #20]
   dd09c:	2a20      	cmp	r2, #32
   dd09e:	d818      	bhi.n	dd0d2 <__hexnan+0x7e>
   dd0a0:	9b02      	ldr	r3, [sp, #8]
   dd0a2:	459b      	cmp	fp, r3
   dd0a4:	dd13      	ble.n	dd0ce <__hexnan+0x7a>
   dd0a6:	454c      	cmp	r4, r9
   dd0a8:	d206      	bcs.n	dd0b8 <__hexnan+0x64>
   dd0aa:	2d07      	cmp	r5, #7
   dd0ac:	dc04      	bgt.n	dd0b8 <__hexnan+0x64>
   dd0ae:	462a      	mov	r2, r5
   dd0b0:	4649      	mov	r1, r9
   dd0b2:	4620      	mov	r0, r4
   dd0b4:	f7ff ffa8 	bl	dd008 <L_shift>
   dd0b8:	4544      	cmp	r4, r8
   dd0ba:	d950      	bls.n	dd15e <__hexnan+0x10a>
   dd0bc:	2300      	movs	r3, #0
   dd0be:	f1a4 0904 	sub.w	r9, r4, #4
   dd0c2:	f844 3c04 	str.w	r3, [r4, #-4]
   dd0c6:	f8cd b008 	str.w	fp, [sp, #8]
   dd0ca:	464c      	mov	r4, r9
   dd0cc:	461d      	mov	r5, r3
   dd0ce:	9903      	ldr	r1, [sp, #12]
   dd0d0:	e7d7      	b.n	dd082 <__hexnan+0x2e>
   dd0d2:	2a29      	cmp	r2, #41	; 0x29
   dd0d4:	d156      	bne.n	dd184 <__hexnan+0x130>
   dd0d6:	3102      	adds	r1, #2
   dd0d8:	f8ca 1000 	str.w	r1, [sl]
   dd0dc:	f1bb 0f00 	cmp.w	fp, #0
   dd0e0:	d050      	beq.n	dd184 <__hexnan+0x130>
   dd0e2:	454c      	cmp	r4, r9
   dd0e4:	d206      	bcs.n	dd0f4 <__hexnan+0xa0>
   dd0e6:	2d07      	cmp	r5, #7
   dd0e8:	dc04      	bgt.n	dd0f4 <__hexnan+0xa0>
   dd0ea:	462a      	mov	r2, r5
   dd0ec:	4649      	mov	r1, r9
   dd0ee:	4620      	mov	r0, r4
   dd0f0:	f7ff ff8a 	bl	dd008 <L_shift>
   dd0f4:	4544      	cmp	r4, r8
   dd0f6:	d934      	bls.n	dd162 <__hexnan+0x10e>
   dd0f8:	f1a8 0204 	sub.w	r2, r8, #4
   dd0fc:	4623      	mov	r3, r4
   dd0fe:	f853 1b04 	ldr.w	r1, [r3], #4
   dd102:	f842 1f04 	str.w	r1, [r2, #4]!
   dd106:	429f      	cmp	r7, r3
   dd108:	d2f9      	bcs.n	dd0fe <__hexnan+0xaa>
   dd10a:	1b3b      	subs	r3, r7, r4
   dd10c:	f023 0303 	bic.w	r3, r3, #3
   dd110:	3304      	adds	r3, #4
   dd112:	3401      	adds	r4, #1
   dd114:	3e03      	subs	r6, #3
   dd116:	42b4      	cmp	r4, r6
   dd118:	bf88      	it	hi
   dd11a:	2304      	movhi	r3, #4
   dd11c:	4443      	add	r3, r8
   dd11e:	2200      	movs	r2, #0
   dd120:	f843 2b04 	str.w	r2, [r3], #4
   dd124:	429f      	cmp	r7, r3
   dd126:	d2fb      	bcs.n	dd120 <__hexnan+0xcc>
   dd128:	683b      	ldr	r3, [r7, #0]
   dd12a:	b91b      	cbnz	r3, dd134 <__hexnan+0xe0>
   dd12c:	4547      	cmp	r7, r8
   dd12e:	d127      	bne.n	dd180 <__hexnan+0x12c>
   dd130:	2301      	movs	r3, #1
   dd132:	603b      	str	r3, [r7, #0]
   dd134:	2005      	movs	r0, #5
   dd136:	e026      	b.n	dd186 <__hexnan+0x132>
   dd138:	3501      	adds	r5, #1
   dd13a:	2d08      	cmp	r5, #8
   dd13c:	f10b 0b01 	add.w	fp, fp, #1
   dd140:	dd06      	ble.n	dd150 <__hexnan+0xfc>
   dd142:	4544      	cmp	r4, r8
   dd144:	d9c3      	bls.n	dd0ce <__hexnan+0x7a>
   dd146:	2300      	movs	r3, #0
   dd148:	f844 3c04 	str.w	r3, [r4, #-4]
   dd14c:	2501      	movs	r5, #1
   dd14e:	3c04      	subs	r4, #4
   dd150:	6822      	ldr	r2, [r4, #0]
   dd152:	f000 000f 	and.w	r0, r0, #15
   dd156:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dd15a:	6022      	str	r2, [r4, #0]
   dd15c:	e7b7      	b.n	dd0ce <__hexnan+0x7a>
   dd15e:	2508      	movs	r5, #8
   dd160:	e7b5      	b.n	dd0ce <__hexnan+0x7a>
   dd162:	9b01      	ldr	r3, [sp, #4]
   dd164:	2b00      	cmp	r3, #0
   dd166:	d0df      	beq.n	dd128 <__hexnan+0xd4>
   dd168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd16c:	f1c3 0320 	rsb	r3, r3, #32
   dd170:	fa22 f303 	lsr.w	r3, r2, r3
   dd174:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dd178:	401a      	ands	r2, r3
   dd17a:	f846 2c04 	str.w	r2, [r6, #-4]
   dd17e:	e7d3      	b.n	dd128 <__hexnan+0xd4>
   dd180:	3f04      	subs	r7, #4
   dd182:	e7d1      	b.n	dd128 <__hexnan+0xd4>
   dd184:	2004      	movs	r0, #4
   dd186:	b007      	add	sp, #28
   dd188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd18c <__ascii_mbtowc>:
   dd18c:	b082      	sub	sp, #8
   dd18e:	b901      	cbnz	r1, dd192 <__ascii_mbtowc+0x6>
   dd190:	a901      	add	r1, sp, #4
   dd192:	b142      	cbz	r2, dd1a6 <__ascii_mbtowc+0x1a>
   dd194:	b14b      	cbz	r3, dd1aa <__ascii_mbtowc+0x1e>
   dd196:	7813      	ldrb	r3, [r2, #0]
   dd198:	600b      	str	r3, [r1, #0]
   dd19a:	7812      	ldrb	r2, [r2, #0]
   dd19c:	1e10      	subs	r0, r2, #0
   dd19e:	bf18      	it	ne
   dd1a0:	2001      	movne	r0, #1
   dd1a2:	b002      	add	sp, #8
   dd1a4:	4770      	bx	lr
   dd1a6:	4610      	mov	r0, r2
   dd1a8:	e7fb      	b.n	dd1a2 <__ascii_mbtowc+0x16>
   dd1aa:	f06f 0001 	mvn.w	r0, #1
   dd1ae:	e7f8      	b.n	dd1a2 <__ascii_mbtowc+0x16>

000dd1b0 <_Balloc>:
   dd1b0:	b570      	push	{r4, r5, r6, lr}
   dd1b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd1b4:	4604      	mov	r4, r0
   dd1b6:	460d      	mov	r5, r1
   dd1b8:	b93e      	cbnz	r6, dd1ca <_Balloc+0x1a>
   dd1ba:	2010      	movs	r0, #16
   dd1bc:	f7fa fd44 	bl	d7c48 <malloc>
   dd1c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd1c4:	6260      	str	r0, [r4, #36]	; 0x24
   dd1c6:	6006      	str	r6, [r0, #0]
   dd1c8:	60c6      	str	r6, [r0, #12]
   dd1ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dd1cc:	68f3      	ldr	r3, [r6, #12]
   dd1ce:	b183      	cbz	r3, dd1f2 <_Balloc+0x42>
   dd1d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd1d2:	68db      	ldr	r3, [r3, #12]
   dd1d4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dd1d8:	b9b8      	cbnz	r0, dd20a <_Balloc+0x5a>
   dd1da:	2101      	movs	r1, #1
   dd1dc:	fa01 f605 	lsl.w	r6, r1, r5
   dd1e0:	1d72      	adds	r2, r6, #5
   dd1e2:	0092      	lsls	r2, r2, #2
   dd1e4:	4620      	mov	r0, r4
   dd1e6:	f000 fc22 	bl	dda2e <_calloc_r>
   dd1ea:	b160      	cbz	r0, dd206 <_Balloc+0x56>
   dd1ec:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dd1f0:	e00e      	b.n	dd210 <_Balloc+0x60>
   dd1f2:	2221      	movs	r2, #33	; 0x21
   dd1f4:	2104      	movs	r1, #4
   dd1f6:	4620      	mov	r0, r4
   dd1f8:	f000 fc19 	bl	dda2e <_calloc_r>
   dd1fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dd1fe:	60f0      	str	r0, [r6, #12]
   dd200:	68db      	ldr	r3, [r3, #12]
   dd202:	2b00      	cmp	r3, #0
   dd204:	d1e4      	bne.n	dd1d0 <_Balloc+0x20>
   dd206:	2000      	movs	r0, #0
   dd208:	bd70      	pop	{r4, r5, r6, pc}
   dd20a:	6802      	ldr	r2, [r0, #0]
   dd20c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dd210:	2300      	movs	r3, #0
   dd212:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dd216:	e7f7      	b.n	dd208 <_Balloc+0x58>

000dd218 <_Bfree>:
   dd218:	b570      	push	{r4, r5, r6, lr}
   dd21a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dd21c:	4605      	mov	r5, r0
   dd21e:	460c      	mov	r4, r1
   dd220:	b93e      	cbnz	r6, dd232 <_Bfree+0x1a>
   dd222:	2010      	movs	r0, #16
   dd224:	f7fa fd10 	bl	d7c48 <malloc>
   dd228:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dd22c:	6268      	str	r0, [r5, #36]	; 0x24
   dd22e:	6006      	str	r6, [r0, #0]
   dd230:	60c6      	str	r6, [r0, #12]
   dd232:	b13c      	cbz	r4, dd244 <_Bfree+0x2c>
   dd234:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dd236:	6862      	ldr	r2, [r4, #4]
   dd238:	68db      	ldr	r3, [r3, #12]
   dd23a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dd23e:	6021      	str	r1, [r4, #0]
   dd240:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dd244:	bd70      	pop	{r4, r5, r6, pc}

000dd246 <__multadd>:
   dd246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd24a:	690e      	ldr	r6, [r1, #16]
   dd24c:	4607      	mov	r7, r0
   dd24e:	4698      	mov	r8, r3
   dd250:	460c      	mov	r4, r1
   dd252:	f101 0014 	add.w	r0, r1, #20
   dd256:	2300      	movs	r3, #0
   dd258:	6805      	ldr	r5, [r0, #0]
   dd25a:	b2a9      	uxth	r1, r5
   dd25c:	fb02 8101 	mla	r1, r2, r1, r8
   dd260:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dd264:	0c2d      	lsrs	r5, r5, #16
   dd266:	fb02 c505 	mla	r5, r2, r5, ip
   dd26a:	b289      	uxth	r1, r1
   dd26c:	3301      	adds	r3, #1
   dd26e:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dd272:	429e      	cmp	r6, r3
   dd274:	f840 1b04 	str.w	r1, [r0], #4
   dd278:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dd27c:	dcec      	bgt.n	dd258 <__multadd+0x12>
   dd27e:	f1b8 0f00 	cmp.w	r8, #0
   dd282:	d01b      	beq.n	dd2bc <__multadd+0x76>
   dd284:	68a3      	ldr	r3, [r4, #8]
   dd286:	42b3      	cmp	r3, r6
   dd288:	dc12      	bgt.n	dd2b0 <__multadd+0x6a>
   dd28a:	6861      	ldr	r1, [r4, #4]
   dd28c:	4638      	mov	r0, r7
   dd28e:	3101      	adds	r1, #1
   dd290:	f7ff ff8e 	bl	dd1b0 <_Balloc>
   dd294:	6922      	ldr	r2, [r4, #16]
   dd296:	3202      	adds	r2, #2
   dd298:	f104 010c 	add.w	r1, r4, #12
   dd29c:	4605      	mov	r5, r0
   dd29e:	0092      	lsls	r2, r2, #2
   dd2a0:	300c      	adds	r0, #12
   dd2a2:	f7fe fc35 	bl	dbb10 <memcpy>
   dd2a6:	4621      	mov	r1, r4
   dd2a8:	4638      	mov	r0, r7
   dd2aa:	f7ff ffb5 	bl	dd218 <_Bfree>
   dd2ae:	462c      	mov	r4, r5
   dd2b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dd2b4:	3601      	adds	r6, #1
   dd2b6:	f8c3 8014 	str.w	r8, [r3, #20]
   dd2ba:	6126      	str	r6, [r4, #16]
   dd2bc:	4620      	mov	r0, r4
   dd2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dd2c2 <__s2b>:
   dd2c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd2c6:	460c      	mov	r4, r1
   dd2c8:	4615      	mov	r5, r2
   dd2ca:	461f      	mov	r7, r3
   dd2cc:	2209      	movs	r2, #9
   dd2ce:	3308      	adds	r3, #8
   dd2d0:	4606      	mov	r6, r0
   dd2d2:	fb93 f3f2 	sdiv	r3, r3, r2
   dd2d6:	2100      	movs	r1, #0
   dd2d8:	2201      	movs	r2, #1
   dd2da:	429a      	cmp	r2, r3
   dd2dc:	db20      	blt.n	dd320 <__s2b+0x5e>
   dd2de:	4630      	mov	r0, r6
   dd2e0:	f7ff ff66 	bl	dd1b0 <_Balloc>
   dd2e4:	9b08      	ldr	r3, [sp, #32]
   dd2e6:	6143      	str	r3, [r0, #20]
   dd2e8:	2d09      	cmp	r5, #9
   dd2ea:	f04f 0301 	mov.w	r3, #1
   dd2ee:	6103      	str	r3, [r0, #16]
   dd2f0:	dd19      	ble.n	dd326 <__s2b+0x64>
   dd2f2:	f104 0909 	add.w	r9, r4, #9
   dd2f6:	46c8      	mov	r8, r9
   dd2f8:	442c      	add	r4, r5
   dd2fa:	f818 3b01 	ldrb.w	r3, [r8], #1
   dd2fe:	4601      	mov	r1, r0
   dd300:	3b30      	subs	r3, #48	; 0x30
   dd302:	220a      	movs	r2, #10
   dd304:	4630      	mov	r0, r6
   dd306:	f7ff ff9e 	bl	dd246 <__multadd>
   dd30a:	45a0      	cmp	r8, r4
   dd30c:	d1f5      	bne.n	dd2fa <__s2b+0x38>
   dd30e:	f1a5 0408 	sub.w	r4, r5, #8
   dd312:	444c      	add	r4, r9
   dd314:	1b2d      	subs	r5, r5, r4
   dd316:	1963      	adds	r3, r4, r5
   dd318:	42bb      	cmp	r3, r7
   dd31a:	db07      	blt.n	dd32c <__s2b+0x6a>
   dd31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd320:	0052      	lsls	r2, r2, #1
   dd322:	3101      	adds	r1, #1
   dd324:	e7d9      	b.n	dd2da <__s2b+0x18>
   dd326:	340a      	adds	r4, #10
   dd328:	2509      	movs	r5, #9
   dd32a:	e7f3      	b.n	dd314 <__s2b+0x52>
   dd32c:	f814 3b01 	ldrb.w	r3, [r4], #1
   dd330:	4601      	mov	r1, r0
   dd332:	3b30      	subs	r3, #48	; 0x30
   dd334:	220a      	movs	r2, #10
   dd336:	4630      	mov	r0, r6
   dd338:	f7ff ff85 	bl	dd246 <__multadd>
   dd33c:	e7eb      	b.n	dd316 <__s2b+0x54>

000dd33e <__hi0bits>:
   dd33e:	0c03      	lsrs	r3, r0, #16
   dd340:	041b      	lsls	r3, r3, #16
   dd342:	b9d3      	cbnz	r3, dd37a <__hi0bits+0x3c>
   dd344:	0400      	lsls	r0, r0, #16
   dd346:	2310      	movs	r3, #16
   dd348:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dd34c:	bf04      	itt	eq
   dd34e:	0200      	lsleq	r0, r0, #8
   dd350:	3308      	addeq	r3, #8
   dd352:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dd356:	bf04      	itt	eq
   dd358:	0100      	lsleq	r0, r0, #4
   dd35a:	3304      	addeq	r3, #4
   dd35c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dd360:	bf04      	itt	eq
   dd362:	0080      	lsleq	r0, r0, #2
   dd364:	3302      	addeq	r3, #2
   dd366:	2800      	cmp	r0, #0
   dd368:	db05      	blt.n	dd376 <__hi0bits+0x38>
   dd36a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dd36e:	f103 0301 	add.w	r3, r3, #1
   dd372:	bf08      	it	eq
   dd374:	2320      	moveq	r3, #32
   dd376:	4618      	mov	r0, r3
   dd378:	4770      	bx	lr
   dd37a:	2300      	movs	r3, #0
   dd37c:	e7e4      	b.n	dd348 <__hi0bits+0xa>

000dd37e <__lo0bits>:
   dd37e:	6803      	ldr	r3, [r0, #0]
   dd380:	f013 0207 	ands.w	r2, r3, #7
   dd384:	4601      	mov	r1, r0
   dd386:	d00b      	beq.n	dd3a0 <__lo0bits+0x22>
   dd388:	07da      	lsls	r2, r3, #31
   dd38a:	d424      	bmi.n	dd3d6 <__lo0bits+0x58>
   dd38c:	0798      	lsls	r0, r3, #30
   dd38e:	bf49      	itett	mi
   dd390:	085b      	lsrmi	r3, r3, #1
   dd392:	089b      	lsrpl	r3, r3, #2
   dd394:	2001      	movmi	r0, #1
   dd396:	600b      	strmi	r3, [r1, #0]
   dd398:	bf5c      	itt	pl
   dd39a:	600b      	strpl	r3, [r1, #0]
   dd39c:	2002      	movpl	r0, #2
   dd39e:	4770      	bx	lr
   dd3a0:	b298      	uxth	r0, r3
   dd3a2:	b9b0      	cbnz	r0, dd3d2 <__lo0bits+0x54>
   dd3a4:	0c1b      	lsrs	r3, r3, #16
   dd3a6:	2010      	movs	r0, #16
   dd3a8:	f013 0fff 	tst.w	r3, #255	; 0xff
   dd3ac:	bf04      	itt	eq
   dd3ae:	0a1b      	lsreq	r3, r3, #8
   dd3b0:	3008      	addeq	r0, #8
   dd3b2:	071a      	lsls	r2, r3, #28
   dd3b4:	bf04      	itt	eq
   dd3b6:	091b      	lsreq	r3, r3, #4
   dd3b8:	3004      	addeq	r0, #4
   dd3ba:	079a      	lsls	r2, r3, #30
   dd3bc:	bf04      	itt	eq
   dd3be:	089b      	lsreq	r3, r3, #2
   dd3c0:	3002      	addeq	r0, #2
   dd3c2:	07da      	lsls	r2, r3, #31
   dd3c4:	d403      	bmi.n	dd3ce <__lo0bits+0x50>
   dd3c6:	085b      	lsrs	r3, r3, #1
   dd3c8:	f100 0001 	add.w	r0, r0, #1
   dd3cc:	d005      	beq.n	dd3da <__lo0bits+0x5c>
   dd3ce:	600b      	str	r3, [r1, #0]
   dd3d0:	4770      	bx	lr
   dd3d2:	4610      	mov	r0, r2
   dd3d4:	e7e8      	b.n	dd3a8 <__lo0bits+0x2a>
   dd3d6:	2000      	movs	r0, #0
   dd3d8:	4770      	bx	lr
   dd3da:	2020      	movs	r0, #32
   dd3dc:	4770      	bx	lr

000dd3de <__i2b>:
   dd3de:	b510      	push	{r4, lr}
   dd3e0:	460c      	mov	r4, r1
   dd3e2:	2101      	movs	r1, #1
   dd3e4:	f7ff fee4 	bl	dd1b0 <_Balloc>
   dd3e8:	2201      	movs	r2, #1
   dd3ea:	6144      	str	r4, [r0, #20]
   dd3ec:	6102      	str	r2, [r0, #16]
   dd3ee:	bd10      	pop	{r4, pc}

000dd3f0 <__multiply>:
   dd3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd3f4:	4615      	mov	r5, r2
   dd3f6:	690a      	ldr	r2, [r1, #16]
   dd3f8:	692b      	ldr	r3, [r5, #16]
   dd3fa:	429a      	cmp	r2, r3
   dd3fc:	bfb8      	it	lt
   dd3fe:	460b      	movlt	r3, r1
   dd400:	460c      	mov	r4, r1
   dd402:	bfbc      	itt	lt
   dd404:	462c      	movlt	r4, r5
   dd406:	461d      	movlt	r5, r3
   dd408:	6927      	ldr	r7, [r4, #16]
   dd40a:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dd40e:	68a3      	ldr	r3, [r4, #8]
   dd410:	6861      	ldr	r1, [r4, #4]
   dd412:	eb07 0609 	add.w	r6, r7, r9
   dd416:	42b3      	cmp	r3, r6
   dd418:	bfb8      	it	lt
   dd41a:	3101      	addlt	r1, #1
   dd41c:	b085      	sub	sp, #20
   dd41e:	f7ff fec7 	bl	dd1b0 <_Balloc>
   dd422:	f100 0114 	add.w	r1, r0, #20
   dd426:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dd42a:	460b      	mov	r3, r1
   dd42c:	2200      	movs	r2, #0
   dd42e:	4543      	cmp	r3, r8
   dd430:	d31d      	bcc.n	dd46e <__multiply+0x7e>
   dd432:	f104 0314 	add.w	r3, r4, #20
   dd436:	f105 0214 	add.w	r2, r5, #20
   dd43a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dd43e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dd442:	9302      	str	r3, [sp, #8]
   dd444:	1b3b      	subs	r3, r7, r4
   dd446:	3b15      	subs	r3, #21
   dd448:	f023 0303 	bic.w	r3, r3, #3
   dd44c:	3304      	adds	r3, #4
   dd44e:	f104 0515 	add.w	r5, r4, #21
   dd452:	42af      	cmp	r7, r5
   dd454:	bf38      	it	cc
   dd456:	2304      	movcc	r3, #4
   dd458:	9301      	str	r3, [sp, #4]
   dd45a:	9b02      	ldr	r3, [sp, #8]
   dd45c:	9203      	str	r2, [sp, #12]
   dd45e:	4293      	cmp	r3, r2
   dd460:	d808      	bhi.n	dd474 <__multiply+0x84>
   dd462:	2e00      	cmp	r6, #0
   dd464:	dc5a      	bgt.n	dd51c <__multiply+0x12c>
   dd466:	6106      	str	r6, [r0, #16]
   dd468:	b005      	add	sp, #20
   dd46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd46e:	f843 2b04 	str.w	r2, [r3], #4
   dd472:	e7dc      	b.n	dd42e <__multiply+0x3e>
   dd474:	f8b2 a000 	ldrh.w	sl, [r2]
   dd478:	f1ba 0f00 	cmp.w	sl, #0
   dd47c:	d024      	beq.n	dd4c8 <__multiply+0xd8>
   dd47e:	f104 0e14 	add.w	lr, r4, #20
   dd482:	4689      	mov	r9, r1
   dd484:	f04f 0c00 	mov.w	ip, #0
   dd488:	f85e 5b04 	ldr.w	r5, [lr], #4
   dd48c:	f8d9 b000 	ldr.w	fp, [r9]
   dd490:	b2ab      	uxth	r3, r5
   dd492:	fa1f fb8b 	uxth.w	fp, fp
   dd496:	fb0a b303 	mla	r3, sl, r3, fp
   dd49a:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dd49e:	f8d9 5000 	ldr.w	r5, [r9]
   dd4a2:	4463      	add	r3, ip
   dd4a4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd4a8:	fb0a c50b 	mla	r5, sl, fp, ip
   dd4ac:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dd4b0:	b29b      	uxth	r3, r3
   dd4b2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dd4b6:	4577      	cmp	r7, lr
   dd4b8:	f849 3b04 	str.w	r3, [r9], #4
   dd4bc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dd4c0:	d8e2      	bhi.n	dd488 <__multiply+0x98>
   dd4c2:	9b01      	ldr	r3, [sp, #4]
   dd4c4:	f841 c003 	str.w	ip, [r1, r3]
   dd4c8:	9b03      	ldr	r3, [sp, #12]
   dd4ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dd4ce:	3204      	adds	r2, #4
   dd4d0:	f1b9 0f00 	cmp.w	r9, #0
   dd4d4:	d020      	beq.n	dd518 <__multiply+0x128>
   dd4d6:	680b      	ldr	r3, [r1, #0]
   dd4d8:	f104 0c14 	add.w	ip, r4, #20
   dd4dc:	468e      	mov	lr, r1
   dd4de:	f04f 0a00 	mov.w	sl, #0
   dd4e2:	f8bc 5000 	ldrh.w	r5, [ip]
   dd4e6:	f8be b002 	ldrh.w	fp, [lr, #2]
   dd4ea:	fb09 b505 	mla	r5, r9, r5, fp
   dd4ee:	44aa      	add	sl, r5
   dd4f0:	b29b      	uxth	r3, r3
   dd4f2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dd4f6:	f84e 3b04 	str.w	r3, [lr], #4
   dd4fa:	f85c 3b04 	ldr.w	r3, [ip], #4
   dd4fe:	f8be 5000 	ldrh.w	r5, [lr]
   dd502:	0c1b      	lsrs	r3, r3, #16
   dd504:	fb09 5303 	mla	r3, r9, r3, r5
   dd508:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dd50c:	4567      	cmp	r7, ip
   dd50e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dd512:	d8e6      	bhi.n	dd4e2 <__multiply+0xf2>
   dd514:	9d01      	ldr	r5, [sp, #4]
   dd516:	514b      	str	r3, [r1, r5]
   dd518:	3104      	adds	r1, #4
   dd51a:	e79e      	b.n	dd45a <__multiply+0x6a>
   dd51c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dd520:	2b00      	cmp	r3, #0
   dd522:	d1a0      	bne.n	dd466 <__multiply+0x76>
   dd524:	3e01      	subs	r6, #1
   dd526:	e79c      	b.n	dd462 <__multiply+0x72>

000dd528 <__pow5mult>:
   dd528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd52c:	4615      	mov	r5, r2
   dd52e:	f012 0203 	ands.w	r2, r2, #3
   dd532:	4606      	mov	r6, r0
   dd534:	460f      	mov	r7, r1
   dd536:	d007      	beq.n	dd548 <__pow5mult+0x20>
   dd538:	4c21      	ldr	r4, [pc, #132]	; (dd5c0 <__pow5mult+0x98>)
   dd53a:	3a01      	subs	r2, #1
   dd53c:	2300      	movs	r3, #0
   dd53e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dd542:	f7ff fe80 	bl	dd246 <__multadd>
   dd546:	4607      	mov	r7, r0
   dd548:	10ad      	asrs	r5, r5, #2
   dd54a:	d035      	beq.n	dd5b8 <__pow5mult+0x90>
   dd54c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dd54e:	b93c      	cbnz	r4, dd560 <__pow5mult+0x38>
   dd550:	2010      	movs	r0, #16
   dd552:	f7fa fb79 	bl	d7c48 <malloc>
   dd556:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dd55a:	6270      	str	r0, [r6, #36]	; 0x24
   dd55c:	6004      	str	r4, [r0, #0]
   dd55e:	60c4      	str	r4, [r0, #12]
   dd560:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dd564:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dd568:	b94c      	cbnz	r4, dd57e <__pow5mult+0x56>
   dd56a:	f240 2171 	movw	r1, #625	; 0x271
   dd56e:	4630      	mov	r0, r6
   dd570:	f7ff ff35 	bl	dd3de <__i2b>
   dd574:	2300      	movs	r3, #0
   dd576:	f8c8 0008 	str.w	r0, [r8, #8]
   dd57a:	4604      	mov	r4, r0
   dd57c:	6003      	str	r3, [r0, #0]
   dd57e:	f04f 0900 	mov.w	r9, #0
   dd582:	07eb      	lsls	r3, r5, #31
   dd584:	d50a      	bpl.n	dd59c <__pow5mult+0x74>
   dd586:	4639      	mov	r1, r7
   dd588:	4622      	mov	r2, r4
   dd58a:	4630      	mov	r0, r6
   dd58c:	f7ff ff30 	bl	dd3f0 <__multiply>
   dd590:	4639      	mov	r1, r7
   dd592:	4680      	mov	r8, r0
   dd594:	4630      	mov	r0, r6
   dd596:	f7ff fe3f 	bl	dd218 <_Bfree>
   dd59a:	4647      	mov	r7, r8
   dd59c:	106d      	asrs	r5, r5, #1
   dd59e:	d00b      	beq.n	dd5b8 <__pow5mult+0x90>
   dd5a0:	6820      	ldr	r0, [r4, #0]
   dd5a2:	b938      	cbnz	r0, dd5b4 <__pow5mult+0x8c>
   dd5a4:	4622      	mov	r2, r4
   dd5a6:	4621      	mov	r1, r4
   dd5a8:	4630      	mov	r0, r6
   dd5aa:	f7ff ff21 	bl	dd3f0 <__multiply>
   dd5ae:	6020      	str	r0, [r4, #0]
   dd5b0:	f8c0 9000 	str.w	r9, [r0]
   dd5b4:	4604      	mov	r4, r0
   dd5b6:	e7e4      	b.n	dd582 <__pow5mult+0x5a>
   dd5b8:	4638      	mov	r0, r7
   dd5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd5be:	bf00      	nop
   dd5c0:	000dea30 	.word	0x000dea30

000dd5c4 <__lshift>:
   dd5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd5c8:	460c      	mov	r4, r1
   dd5ca:	6849      	ldr	r1, [r1, #4]
   dd5cc:	6923      	ldr	r3, [r4, #16]
   dd5ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dd5d2:	68a3      	ldr	r3, [r4, #8]
   dd5d4:	4607      	mov	r7, r0
   dd5d6:	4691      	mov	r9, r2
   dd5d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dd5dc:	f108 0601 	add.w	r6, r8, #1
   dd5e0:	42b3      	cmp	r3, r6
   dd5e2:	db3f      	blt.n	dd664 <__lshift+0xa0>
   dd5e4:	4638      	mov	r0, r7
   dd5e6:	f7ff fde3 	bl	dd1b0 <_Balloc>
   dd5ea:	2300      	movs	r3, #0
   dd5ec:	4605      	mov	r5, r0
   dd5ee:	f100 0114 	add.w	r1, r0, #20
   dd5f2:	f100 0210 	add.w	r2, r0, #16
   dd5f6:	4618      	mov	r0, r3
   dd5f8:	4553      	cmp	r3, sl
   dd5fa:	db36      	blt.n	dd66a <__lshift+0xa6>
   dd5fc:	6920      	ldr	r0, [r4, #16]
   dd5fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dd602:	f104 0314 	add.w	r3, r4, #20
   dd606:	f019 091f 	ands.w	r9, r9, #31
   dd60a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dd60e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dd612:	d02e      	beq.n	dd672 <__lshift+0xae>
   dd614:	f1c9 0e20 	rsb	lr, r9, #32
   dd618:	468a      	mov	sl, r1
   dd61a:	2200      	movs	r2, #0
   dd61c:	6818      	ldr	r0, [r3, #0]
   dd61e:	fa00 f009 	lsl.w	r0, r0, r9
   dd622:	4302      	orrs	r2, r0
   dd624:	f84a 2b04 	str.w	r2, [sl], #4
   dd628:	f853 2b04 	ldr.w	r2, [r3], #4
   dd62c:	459c      	cmp	ip, r3
   dd62e:	fa22 f20e 	lsr.w	r2, r2, lr
   dd632:	d8f3      	bhi.n	dd61c <__lshift+0x58>
   dd634:	ebac 0304 	sub.w	r3, ip, r4
   dd638:	3b15      	subs	r3, #21
   dd63a:	f023 0303 	bic.w	r3, r3, #3
   dd63e:	3304      	adds	r3, #4
   dd640:	f104 0015 	add.w	r0, r4, #21
   dd644:	4560      	cmp	r0, ip
   dd646:	bf88      	it	hi
   dd648:	2304      	movhi	r3, #4
   dd64a:	50ca      	str	r2, [r1, r3]
   dd64c:	b10a      	cbz	r2, dd652 <__lshift+0x8e>
   dd64e:	f108 0602 	add.w	r6, r8, #2
   dd652:	3e01      	subs	r6, #1
   dd654:	4638      	mov	r0, r7
   dd656:	612e      	str	r6, [r5, #16]
   dd658:	4621      	mov	r1, r4
   dd65a:	f7ff fddd 	bl	dd218 <_Bfree>
   dd65e:	4628      	mov	r0, r5
   dd660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd664:	3101      	adds	r1, #1
   dd666:	005b      	lsls	r3, r3, #1
   dd668:	e7ba      	b.n	dd5e0 <__lshift+0x1c>
   dd66a:	f842 0f04 	str.w	r0, [r2, #4]!
   dd66e:	3301      	adds	r3, #1
   dd670:	e7c2      	b.n	dd5f8 <__lshift+0x34>
   dd672:	3904      	subs	r1, #4
   dd674:	f853 2b04 	ldr.w	r2, [r3], #4
   dd678:	f841 2f04 	str.w	r2, [r1, #4]!
   dd67c:	459c      	cmp	ip, r3
   dd67e:	d8f9      	bhi.n	dd674 <__lshift+0xb0>
   dd680:	e7e7      	b.n	dd652 <__lshift+0x8e>

000dd682 <__mcmp>:
   dd682:	b530      	push	{r4, r5, lr}
   dd684:	6902      	ldr	r2, [r0, #16]
   dd686:	690c      	ldr	r4, [r1, #16]
   dd688:	1b12      	subs	r2, r2, r4
   dd68a:	d10e      	bne.n	dd6aa <__mcmp+0x28>
   dd68c:	f100 0314 	add.w	r3, r0, #20
   dd690:	3114      	adds	r1, #20
   dd692:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dd696:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dd69a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dd69e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dd6a2:	42a5      	cmp	r5, r4
   dd6a4:	d003      	beq.n	dd6ae <__mcmp+0x2c>
   dd6a6:	d305      	bcc.n	dd6b4 <__mcmp+0x32>
   dd6a8:	2201      	movs	r2, #1
   dd6aa:	4610      	mov	r0, r2
   dd6ac:	bd30      	pop	{r4, r5, pc}
   dd6ae:	4283      	cmp	r3, r0
   dd6b0:	d3f3      	bcc.n	dd69a <__mcmp+0x18>
   dd6b2:	e7fa      	b.n	dd6aa <__mcmp+0x28>
   dd6b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd6b8:	e7f7      	b.n	dd6aa <__mcmp+0x28>

000dd6ba <__mdiff>:
   dd6ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd6be:	460c      	mov	r4, r1
   dd6c0:	4606      	mov	r6, r0
   dd6c2:	4611      	mov	r1, r2
   dd6c4:	4620      	mov	r0, r4
   dd6c6:	4617      	mov	r7, r2
   dd6c8:	f7ff ffdb 	bl	dd682 <__mcmp>
   dd6cc:	1e05      	subs	r5, r0, #0
   dd6ce:	d108      	bne.n	dd6e2 <__mdiff+0x28>
   dd6d0:	4629      	mov	r1, r5
   dd6d2:	4630      	mov	r0, r6
   dd6d4:	f7ff fd6c 	bl	dd1b0 <_Balloc>
   dd6d8:	2301      	movs	r3, #1
   dd6da:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dd6de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd6e2:	bfa4      	itt	ge
   dd6e4:	463b      	movge	r3, r7
   dd6e6:	4627      	movge	r7, r4
   dd6e8:	4630      	mov	r0, r6
   dd6ea:	6879      	ldr	r1, [r7, #4]
   dd6ec:	bfa6      	itte	ge
   dd6ee:	461c      	movge	r4, r3
   dd6f0:	2500      	movge	r5, #0
   dd6f2:	2501      	movlt	r5, #1
   dd6f4:	f7ff fd5c 	bl	dd1b0 <_Balloc>
   dd6f8:	693e      	ldr	r6, [r7, #16]
   dd6fa:	60c5      	str	r5, [r0, #12]
   dd6fc:	6925      	ldr	r5, [r4, #16]
   dd6fe:	f107 0114 	add.w	r1, r7, #20
   dd702:	f104 0914 	add.w	r9, r4, #20
   dd706:	f100 0e14 	add.w	lr, r0, #20
   dd70a:	f107 0210 	add.w	r2, r7, #16
   dd70e:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dd712:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dd716:	46f2      	mov	sl, lr
   dd718:	2700      	movs	r7, #0
   dd71a:	f859 3b04 	ldr.w	r3, [r9], #4
   dd71e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dd722:	fa1f f883 	uxth.w	r8, r3
   dd726:	fa17 f78b 	uxtah	r7, r7, fp
   dd72a:	0c1b      	lsrs	r3, r3, #16
   dd72c:	eba7 0808 	sub.w	r8, r7, r8
   dd730:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dd734:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dd738:	fa1f f888 	uxth.w	r8, r8
   dd73c:	141f      	asrs	r7, r3, #16
   dd73e:	454d      	cmp	r5, r9
   dd740:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dd744:	f84a 3b04 	str.w	r3, [sl], #4
   dd748:	d8e7      	bhi.n	dd71a <__mdiff+0x60>
   dd74a:	1b2b      	subs	r3, r5, r4
   dd74c:	3b15      	subs	r3, #21
   dd74e:	f023 0303 	bic.w	r3, r3, #3
   dd752:	3304      	adds	r3, #4
   dd754:	3415      	adds	r4, #21
   dd756:	42a5      	cmp	r5, r4
   dd758:	bf38      	it	cc
   dd75a:	2304      	movcc	r3, #4
   dd75c:	4419      	add	r1, r3
   dd75e:	4473      	add	r3, lr
   dd760:	469e      	mov	lr, r3
   dd762:	460d      	mov	r5, r1
   dd764:	4565      	cmp	r5, ip
   dd766:	d30e      	bcc.n	dd786 <__mdiff+0xcc>
   dd768:	f10c 0203 	add.w	r2, ip, #3
   dd76c:	1a52      	subs	r2, r2, r1
   dd76e:	f022 0203 	bic.w	r2, r2, #3
   dd772:	3903      	subs	r1, #3
   dd774:	458c      	cmp	ip, r1
   dd776:	bf38      	it	cc
   dd778:	2200      	movcc	r2, #0
   dd77a:	441a      	add	r2, r3
   dd77c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dd780:	b17b      	cbz	r3, dd7a2 <__mdiff+0xe8>
   dd782:	6106      	str	r6, [r0, #16]
   dd784:	e7ab      	b.n	dd6de <__mdiff+0x24>
   dd786:	f855 8b04 	ldr.w	r8, [r5], #4
   dd78a:	fa17 f488 	uxtah	r4, r7, r8
   dd78e:	1422      	asrs	r2, r4, #16
   dd790:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dd794:	b2a4      	uxth	r4, r4
   dd796:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dd79a:	f84e 4b04 	str.w	r4, [lr], #4
   dd79e:	1417      	asrs	r7, r2, #16
   dd7a0:	e7e0      	b.n	dd764 <__mdiff+0xaa>
   dd7a2:	3e01      	subs	r6, #1
   dd7a4:	e7ea      	b.n	dd77c <__mdiff+0xc2>
	...

000dd7a8 <__ulp>:
   dd7a8:	b082      	sub	sp, #8
   dd7aa:	ed8d 0b00 	vstr	d0, [sp]
   dd7ae:	9b01      	ldr	r3, [sp, #4]
   dd7b0:	4912      	ldr	r1, [pc, #72]	; (dd7fc <__ulp+0x54>)
   dd7b2:	4019      	ands	r1, r3
   dd7b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dd7b8:	2900      	cmp	r1, #0
   dd7ba:	dd05      	ble.n	dd7c8 <__ulp+0x20>
   dd7bc:	2200      	movs	r2, #0
   dd7be:	460b      	mov	r3, r1
   dd7c0:	ec43 2b10 	vmov	d0, r2, r3
   dd7c4:	b002      	add	sp, #8
   dd7c6:	4770      	bx	lr
   dd7c8:	4249      	negs	r1, r1
   dd7ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dd7ce:	ea4f 5021 	mov.w	r0, r1, asr #20
   dd7d2:	f04f 0200 	mov.w	r2, #0
   dd7d6:	f04f 0300 	mov.w	r3, #0
   dd7da:	da04      	bge.n	dd7e6 <__ulp+0x3e>
   dd7dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dd7e0:	fa41 f300 	asr.w	r3, r1, r0
   dd7e4:	e7ec      	b.n	dd7c0 <__ulp+0x18>
   dd7e6:	f1a0 0114 	sub.w	r1, r0, #20
   dd7ea:	291e      	cmp	r1, #30
   dd7ec:	bfda      	itte	le
   dd7ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dd7f2:	fa20 f101 	lsrle.w	r1, r0, r1
   dd7f6:	2101      	movgt	r1, #1
   dd7f8:	460a      	mov	r2, r1
   dd7fa:	e7e1      	b.n	dd7c0 <__ulp+0x18>
   dd7fc:	7ff00000 	.word	0x7ff00000

000dd800 <__b2d>:
   dd800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd802:	6905      	ldr	r5, [r0, #16]
   dd804:	f100 0714 	add.w	r7, r0, #20
   dd808:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dd80c:	1f2e      	subs	r6, r5, #4
   dd80e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dd812:	4620      	mov	r0, r4
   dd814:	f7ff fd93 	bl	dd33e <__hi0bits>
   dd818:	f1c0 0320 	rsb	r3, r0, #32
   dd81c:	280a      	cmp	r0, #10
   dd81e:	f8df c07c 	ldr.w	ip, [pc, #124]	; dd89c <__b2d+0x9c>
   dd822:	600b      	str	r3, [r1, #0]
   dd824:	dc14      	bgt.n	dd850 <__b2d+0x50>
   dd826:	f1c0 0e0b 	rsb	lr, r0, #11
   dd82a:	fa24 f10e 	lsr.w	r1, r4, lr
   dd82e:	42b7      	cmp	r7, r6
   dd830:	ea41 030c 	orr.w	r3, r1, ip
   dd834:	bf34      	ite	cc
   dd836:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd83a:	2100      	movcs	r1, #0
   dd83c:	3015      	adds	r0, #21
   dd83e:	fa04 f000 	lsl.w	r0, r4, r0
   dd842:	fa21 f10e 	lsr.w	r1, r1, lr
   dd846:	ea40 0201 	orr.w	r2, r0, r1
   dd84a:	ec43 2b10 	vmov	d0, r2, r3
   dd84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd850:	42b7      	cmp	r7, r6
   dd852:	bf3a      	itte	cc
   dd854:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dd858:	f1a5 0608 	subcc.w	r6, r5, #8
   dd85c:	2100      	movcs	r1, #0
   dd85e:	380b      	subs	r0, #11
   dd860:	d017      	beq.n	dd892 <__b2d+0x92>
   dd862:	f1c0 0c20 	rsb	ip, r0, #32
   dd866:	fa04 f500 	lsl.w	r5, r4, r0
   dd86a:	42be      	cmp	r6, r7
   dd86c:	fa21 f40c 	lsr.w	r4, r1, ip
   dd870:	ea45 0504 	orr.w	r5, r5, r4
   dd874:	bf8c      	ite	hi
   dd876:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dd87a:	2400      	movls	r4, #0
   dd87c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dd880:	fa01 f000 	lsl.w	r0, r1, r0
   dd884:	fa24 f40c 	lsr.w	r4, r4, ip
   dd888:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dd88c:	ea40 0204 	orr.w	r2, r0, r4
   dd890:	e7db      	b.n	dd84a <__b2d+0x4a>
   dd892:	ea44 030c 	orr.w	r3, r4, ip
   dd896:	460a      	mov	r2, r1
   dd898:	e7d7      	b.n	dd84a <__b2d+0x4a>
   dd89a:	bf00      	nop
   dd89c:	3ff00000 	.word	0x3ff00000

000dd8a0 <__d2b>:
   dd8a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd8a4:	4689      	mov	r9, r1
   dd8a6:	2101      	movs	r1, #1
   dd8a8:	ec57 6b10 	vmov	r6, r7, d0
   dd8ac:	4690      	mov	r8, r2
   dd8ae:	f7ff fc7f 	bl	dd1b0 <_Balloc>
   dd8b2:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dd8b6:	4604      	mov	r4, r0
   dd8b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dd8bc:	bb35      	cbnz	r5, dd90c <__d2b+0x6c>
   dd8be:	2e00      	cmp	r6, #0
   dd8c0:	9301      	str	r3, [sp, #4]
   dd8c2:	d028      	beq.n	dd916 <__d2b+0x76>
   dd8c4:	4668      	mov	r0, sp
   dd8c6:	9600      	str	r6, [sp, #0]
   dd8c8:	f7ff fd59 	bl	dd37e <__lo0bits>
   dd8cc:	9900      	ldr	r1, [sp, #0]
   dd8ce:	b300      	cbz	r0, dd912 <__d2b+0x72>
   dd8d0:	9a01      	ldr	r2, [sp, #4]
   dd8d2:	f1c0 0320 	rsb	r3, r0, #32
   dd8d6:	fa02 f303 	lsl.w	r3, r2, r3
   dd8da:	430b      	orrs	r3, r1
   dd8dc:	40c2      	lsrs	r2, r0
   dd8de:	6163      	str	r3, [r4, #20]
   dd8e0:	9201      	str	r2, [sp, #4]
   dd8e2:	9b01      	ldr	r3, [sp, #4]
   dd8e4:	61a3      	str	r3, [r4, #24]
   dd8e6:	2b00      	cmp	r3, #0
   dd8e8:	bf14      	ite	ne
   dd8ea:	2202      	movne	r2, #2
   dd8ec:	2201      	moveq	r2, #1
   dd8ee:	6122      	str	r2, [r4, #16]
   dd8f0:	b1d5      	cbz	r5, dd928 <__d2b+0x88>
   dd8f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dd8f6:	4405      	add	r5, r0
   dd8f8:	f8c9 5000 	str.w	r5, [r9]
   dd8fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dd900:	f8c8 0000 	str.w	r0, [r8]
   dd904:	4620      	mov	r0, r4
   dd906:	b003      	add	sp, #12
   dd908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd90c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dd910:	e7d5      	b.n	dd8be <__d2b+0x1e>
   dd912:	6161      	str	r1, [r4, #20]
   dd914:	e7e5      	b.n	dd8e2 <__d2b+0x42>
   dd916:	a801      	add	r0, sp, #4
   dd918:	f7ff fd31 	bl	dd37e <__lo0bits>
   dd91c:	9b01      	ldr	r3, [sp, #4]
   dd91e:	6163      	str	r3, [r4, #20]
   dd920:	2201      	movs	r2, #1
   dd922:	6122      	str	r2, [r4, #16]
   dd924:	3020      	adds	r0, #32
   dd926:	e7e3      	b.n	dd8f0 <__d2b+0x50>
   dd928:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dd92c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dd930:	f8c9 0000 	str.w	r0, [r9]
   dd934:	6918      	ldr	r0, [r3, #16]
   dd936:	f7ff fd02 	bl	dd33e <__hi0bits>
   dd93a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dd93e:	e7df      	b.n	dd900 <__d2b+0x60>

000dd940 <__ratio>:
   dd940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd944:	4688      	mov	r8, r1
   dd946:	4669      	mov	r1, sp
   dd948:	4681      	mov	r9, r0
   dd94a:	f7ff ff59 	bl	dd800 <__b2d>
   dd94e:	a901      	add	r1, sp, #4
   dd950:	4640      	mov	r0, r8
   dd952:	ec55 4b10 	vmov	r4, r5, d0
   dd956:	f7ff ff53 	bl	dd800 <__b2d>
   dd95a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dd95e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dd962:	eba3 0c02 	sub.w	ip, r3, r2
   dd966:	e9dd 3200 	ldrd	r3, r2, [sp]
   dd96a:	1a9b      	subs	r3, r3, r2
   dd96c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dd970:	ec51 0b10 	vmov	r0, r1, d0
   dd974:	2b00      	cmp	r3, #0
   dd976:	bfd6      	itet	le
   dd978:	460a      	movle	r2, r1
   dd97a:	462a      	movgt	r2, r5
   dd97c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dd980:	468b      	mov	fp, r1
   dd982:	462f      	mov	r7, r5
   dd984:	bfd4      	ite	le
   dd986:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dd98a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dd98e:	4620      	mov	r0, r4
   dd990:	ee10 2a10 	vmov	r2, s0
   dd994:	465b      	mov	r3, fp
   dd996:	4639      	mov	r1, r7
   dd998:	f7fd fe00 	bl	db59c <__aeabi_ddiv>
   dd99c:	ec41 0b10 	vmov	d0, r0, r1
   dd9a0:	b003      	add	sp, #12
   dd9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dd9a6 <__copybits>:
   dd9a6:	3901      	subs	r1, #1
   dd9a8:	b570      	push	{r4, r5, r6, lr}
   dd9aa:	1149      	asrs	r1, r1, #5
   dd9ac:	6914      	ldr	r4, [r2, #16]
   dd9ae:	3101      	adds	r1, #1
   dd9b0:	f102 0314 	add.w	r3, r2, #20
   dd9b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dd9b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dd9bc:	1f05      	subs	r5, r0, #4
   dd9be:	42a3      	cmp	r3, r4
   dd9c0:	d30c      	bcc.n	dd9dc <__copybits+0x36>
   dd9c2:	1aa3      	subs	r3, r4, r2
   dd9c4:	3b11      	subs	r3, #17
   dd9c6:	f023 0303 	bic.w	r3, r3, #3
   dd9ca:	3211      	adds	r2, #17
   dd9cc:	42a2      	cmp	r2, r4
   dd9ce:	bf88      	it	hi
   dd9d0:	2300      	movhi	r3, #0
   dd9d2:	4418      	add	r0, r3
   dd9d4:	2300      	movs	r3, #0
   dd9d6:	4288      	cmp	r0, r1
   dd9d8:	d305      	bcc.n	dd9e6 <__copybits+0x40>
   dd9da:	bd70      	pop	{r4, r5, r6, pc}
   dd9dc:	f853 6b04 	ldr.w	r6, [r3], #4
   dd9e0:	f845 6f04 	str.w	r6, [r5, #4]!
   dd9e4:	e7eb      	b.n	dd9be <__copybits+0x18>
   dd9e6:	f840 3b04 	str.w	r3, [r0], #4
   dd9ea:	e7f4      	b.n	dd9d6 <__copybits+0x30>

000dd9ec <__any_on>:
   dd9ec:	f100 0214 	add.w	r2, r0, #20
   dd9f0:	6900      	ldr	r0, [r0, #16]
   dd9f2:	114b      	asrs	r3, r1, #5
   dd9f4:	4298      	cmp	r0, r3
   dd9f6:	b510      	push	{r4, lr}
   dd9f8:	db11      	blt.n	dda1e <__any_on+0x32>
   dd9fa:	dd0a      	ble.n	dda12 <__any_on+0x26>
   dd9fc:	f011 011f 	ands.w	r1, r1, #31
   dda00:	d007      	beq.n	dda12 <__any_on+0x26>
   dda02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dda06:	fa24 f001 	lsr.w	r0, r4, r1
   dda0a:	fa00 f101 	lsl.w	r1, r0, r1
   dda0e:	428c      	cmp	r4, r1
   dda10:	d10b      	bne.n	dda2a <__any_on+0x3e>
   dda12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dda16:	4293      	cmp	r3, r2
   dda18:	d803      	bhi.n	dda22 <__any_on+0x36>
   dda1a:	2000      	movs	r0, #0
   dda1c:	bd10      	pop	{r4, pc}
   dda1e:	4603      	mov	r3, r0
   dda20:	e7f7      	b.n	dda12 <__any_on+0x26>
   dda22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dda26:	2900      	cmp	r1, #0
   dda28:	d0f5      	beq.n	dda16 <__any_on+0x2a>
   dda2a:	2001      	movs	r0, #1
   dda2c:	e7f6      	b.n	dda1c <__any_on+0x30>

000dda2e <_calloc_r>:
   dda2e:	b513      	push	{r0, r1, r4, lr}
   dda30:	434a      	muls	r2, r1
   dda32:	4611      	mov	r1, r2
   dda34:	9201      	str	r2, [sp, #4]
   dda36:	f7fa f93f 	bl	d7cb8 <_malloc_r>
   dda3a:	4604      	mov	r4, r0
   dda3c:	b118      	cbz	r0, dda46 <_calloc_r+0x18>
   dda3e:	9a01      	ldr	r2, [sp, #4]
   dda40:	2100      	movs	r1, #0
   dda42:	f7fe f88d 	bl	dbb60 <memset>
   dda46:	4620      	mov	r0, r4
   dda48:	b002      	add	sp, #8
   dda4a:	bd10      	pop	{r4, pc}
   dda4c:	0000      	movs	r0, r0
	...

000dda50 <nan>:
   dda50:	ed9f 0b01 	vldr	d0, [pc, #4]	; dda58 <nan+0x8>
   dda54:	4770      	bx	lr
   dda56:	bf00      	nop
   dda58:	00000000 	.word	0x00000000
   dda5c:	7ff80000 	.word	0x7ff80000

000dda60 <nanf>:
   dda60:	ed9f 0a01 	vldr	s0, [pc, #4]	; dda68 <nanf+0x8>
   dda64:	4770      	bx	lr
   dda66:	bf00      	nop
   dda68:	7fc00000 	.word	0x7fc00000

000dda6c <__ascii_wctomb>:
   dda6c:	b149      	cbz	r1, dda82 <__ascii_wctomb+0x16>
   dda6e:	2aff      	cmp	r2, #255	; 0xff
   dda70:	bf85      	ittet	hi
   dda72:	238a      	movhi	r3, #138	; 0x8a
   dda74:	6003      	strhi	r3, [r0, #0]
   dda76:	700a      	strbls	r2, [r1, #0]
   dda78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dda7c:	bf98      	it	ls
   dda7e:	2001      	movls	r0, #1
   dda80:	4770      	bx	lr
   dda82:	4608      	mov	r0, r1
   dda84:	4770      	bx	lr
	...

000dda88 <__aeabi_d2lz>:
   dda88:	b538      	push	{r3, r4, r5, lr}
   dda8a:	2200      	movs	r2, #0
   dda8c:	2300      	movs	r3, #0
   dda8e:	4604      	mov	r4, r0
   dda90:	460d      	mov	r5, r1
   dda92:	f7fd fecb 	bl	db82c <__aeabi_dcmplt>
   dda96:	b928      	cbnz	r0, ddaa4 <__aeabi_d2lz+0x1c>
   dda98:	4620      	mov	r0, r4
   dda9a:	4629      	mov	r1, r5
   dda9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ddaa0:	f7fd bfce 	b.w	dba40 <__aeabi_d2ulz>
   ddaa4:	4620      	mov	r0, r4
   ddaa6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   ddaaa:	f7fd ffc9 	bl	dba40 <__aeabi_d2ulz>
   ddaae:	4240      	negs	r0, r0
   ddab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddab4:	bd38      	pop	{r3, r4, r5, pc}
   ddab6:	bf00      	nop

000ddab8 <dynalib_user>:
   ddab8:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   ddac8:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   ddad8:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   ddae8:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   ddaf8:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   ddb08:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   ddb18:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   ddb28:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   ddb38:	4400 6369 6e6f 656e 7463 6465 4e00 206f     .Diconnected.No 
   ddb48:	6144 6174 5200 7365 6f70 736e 2065 6552     Data.Response Re
   ddb58:	6563 7669 6465 5500 6b6e 6f6e 6e77 7220     ceived.Unknown r
   ddb68:	7365 6f70 736e 2065 6572 6563 6976 6465     esponse recevied
   ddb78:	2520 0069 6255 6469 746f 2073 6f48 6b6f      %i.Ubidots Hook
   ddb88:	4800 7261 2064 6552 6573 2074 6e69 3220     .Hard Reset in 2
   ddb98:	7320 6365 6e6f 7364 5300 7465 5620 7265      seconds.Set Ver
   ddba8:	6f62 6573 4d20 646f 0065 6c43 6165 6572     bose Mode.Cleare
   ddbb8:	2064 6556 6272 736f 2065 6f4d 6564 4f00     d Verbose Mode.O
   ddbc8:	6570 206e 6974 656d 7320 7465 7420 206f     pen time set to 
   ddbd8:	6925 4c00 776f 5020 776f 7265 4d20 646f     %i.Low Power Mod
   ddbe8:	0065 6f4e 6d72 6c61 4f20 6570 6172 6974     e.Normal Operati
   ddbf8:	6e6f 0073 6f4e 2074 6f4c 2077 6f50 6577     ons.Not Low Powe
   ddc08:	0072 3225 312e 2066 2525 7b00 7322 696f     r.%2.1f %%.{"soi
   ddc18:	4d6c 696f 7473 7275 2265 253a 2c69 2220     lMoisture":%i, "
   ddc28:	6177 6574 6972 676e 3a22 6925 202c 6222     watering":%i, "b
   ddc38:	7461 6574 7972 3a22 6925 222c 656b 3179     attery":%i,"key1
   ddc48:	3a22 2522 2273 222c 6574 706d 3a22 6925     ":"%s","temp":%i
   ddc58:	202c 7222 7365 7465 2273 253a 2c69 2220     , "resets":%i, "
   ddc68:	6c61 7265 7374 3a22 6925 202c 6322 6e6f     alerts":%i, "con
   ddc78:	656e 7463 6974 656d 3a22 6925 222c 6974     necttime":%i,"ti
   ddc88:	656d 7473 6d61 2270 253a 756c 3030 7d30     mestamp":%lu000}
   ddc98:	5500 6962 6f64 7374 412d 7571 4d61 7361     .Ubidots-AquaMas
   ddca8:	6574 2d72 6147 6472 6e65 762d 0031 7325     ter-Garden-v1.%s
   ddcb8:	5320 253a 2e32 6630 2525 202c 3a51 3225      S:%2.0f%%, Q:%2
   ddcc8:	302e 2566 2025 5300 7465 5320 6c6f 7261     .0f%% .Set Solar
   ddcd8:	5020 776f 7265 6465 4d20 646f 0065 6c43      Powered Mode.Cl
   ddce8:	6165 6572 2064 6f53 616c 2072 6f50 6577     eared Solar Powe
   ddcf8:	6572 2064 6f4d 6564 4c00 616f 6964 676e     red Mode.Loading
   ddd08:	5320 7379 6574 206d 6544 6166 6c75 7374      System Defaults
   ddd18:	4e00 0041 6925 303a 0030 6c43 736f 6e69     .NA.%i:00.Closin
   ddd28:	2067 6974 656d 7320 7465 7420 206f 6925     g time set to %i
   ddd38:	4600 6f72 206d 7325 7420 206f 7325 5300     .From %s to %s.S
   ddd48:	6174 6574 5420 6172 736e 7469 6f69 006e     tate Transition.
   ddd58:	7552 6e6e 6e69 0067 6144 6c69 2079 6c43     Running.Daily Cl
   ddd68:	6165 756e 0070 6c63 756f 2064 6f63 6e6e     eanup.cloud conn
   ddd78:	6365 6974 6e6f 7520 736e 6375 6563 7373     ection unsuccess
   ddd88:	7566 006c 6f43 6e6e 6365 6574 2064 6e69     ful.Connected in
   ddd98:	2520 2069 6573 7363 4300 6c65 756c 616c      %i secs.Cellula
   ddda8:	0072 6f44 656e 7720 7469 2068 6177 6574     r.Done with wate
   dddb8:	6972 676e 6320 6379 656c 5700 7461 7265     ring cycle.Water
   dddc8:	6e69 0067 6f4e 2074 6974 656d 7420 206f     ing.Not time to 
   dddd8:	6177 6574 0072 6157 6574 6972 676e 4e20     water.Watering N
   ddde8:	6565 6564 2064 7562 2074 6162 7474 7265     eeded but batter
   dddf8:	2079 6f74 206f 6f6c 0077 6157 6574 6972     y too low.Wateri
   dde08:	676e 6e20 6565 6564 2064 202d 7473 7261     ng needed - star
   dde18:	6974 676e 7720 7461 7265 6e69 2067 7963     ting watering cy
   dde28:	6c63 0065 6157 6574 6972 676e 6e20 746f     cle.Watering not
   dde38:	6e20 6565 6564 0064 6166 6c69 6465 7420      needed.failed t
   dde48:	206f 6f63 6e6e 6365 2074 6f74 6320 6f6c     o connect to clo
   dde58:	6475 202c 6f64 6e69 2067 6564 7065 7220     ud, doing deep r
   dde68:	7365 7465 4500 7272 726f 5320 6174 6574     eset.Error State
   dde78:	2d20 5220 7365 7465 5300 6174 6574 4500      - Reset.State.E
   dde88:	7272 726f 5320 6174 6574 2d20 5020 776f     rror State - Pow
   dde98:	7265 4320 6379 656c 4500 7272 726f 5320     er Cycle.Error S
   ddea8:	6174 6574 2d20 4620 6c75 206c 6f4d 6564     tate - Full Mode
   ddeb8:	206d 6552 6573 0074 754f 2074 666f 6d20     m Reset.Out of m
   ddec8:	6d65 726f 2079 636f 7563 7272 6465 7320     emory occurred s
   dded8:	7a69 3d65 6425 4d00 6d65 726f 0079 6f53     ize=%d.Memory.So
   ddee8:	6c69 6f4d 7369 7574 6572 5300 6769 616e     ilMoisture.Signa
   ddef8:	006c 6552 6573 4374 756f 746e 5400 6d65     l.ResetCount.Tem
   ddf08:	6570 6172 7574 6572 5200 6c65 6165 6573     perature.Release
   ddf18:	7300 6174 6574 664f 6843 0067 6f6c 5077     .stateOfChg.lowP
   ddf28:	776f 7265 6f4d 6564 4300 6f6c 6573 6954     owerMode.CloseTi
   ddf38:	656d 4100 656c 7472 0073 6954 656d 664f     me.Alerts.TimeOf
   ddf48:	7366 7465 4200 7461 6574 7972 6f43 746e     fset.BatteryCont
   ddf58:	7865 0074 6157 6574 6972 676e 6350 0074     ext.WateringPct.
   ddf68:	6572 6573 4374 756f 746e 0073 6148 6472     resetCounts.Hard
   ddf78:	6552 6573 0074 6553 646e 6f4e 0077 6f4c     Reset.SendNow.Lo
   ddf88:	5077 776f 7265 6f4d 6564 5300 6c6f 7261     wPowerMode.Solar
   ddf98:	4d2d 646f 0065 6556 6272 736f 2d65 6f4d     -Mode.Verbose-Mo
   ddfa8:	6564 5300 7465 542d 6d69 7a65 6e6f 0065     de.Set-Timezone.
   ddfb8:	6553 2d74 5344 4f54 6666 6573 0074 6553     Set-DSTOffset.Se
   ddfc8:	2d74 704f 6e65 6954 656d 5300 7465 432d     t-OpenTime.Set-C
   ddfd8:	6f6c 6573 5300 7465 6157 6574 5472 7268     lose.SetWaterThr
   ddfe8:	7365 6f68 646c 2500 2e32 6631 5520 4354     eshold.%2.1f UTC
   ddff8:	0000 0000                                   ....

000ddffc <_ZTV5Timer>:
	...
   de004:	4319 000d 436d 000d 4171 000d               .C..mC..qA..

000de010 <_ZTVN5spark10LogHandlerE>:
	...
   de020:	40a5 000d 40c9 000d                         .@...@..

000de028 <_ZTVN5spark16SerialLogHandlerE>:
	...
   de030:	42a1 000d 42d5 000d 9a91 000d 40cb 000d     .B...B.......@..

000de040 <_ZTV8MB85RC64>:
	...
   de048:	41a5 000d 41b9 000d 6d4d 000d 6de3 000d     .A...A..Mm...m..
   de058:	6e65 000d                                   en..

000de05c <_ZTV17PublishQueueAsync>:
	...
   de064:	417d 000d 4191 000d 6f7d 000d 7109 000d     }A...A..}o...q..
   de074:	70c9 000d 70a7 000d 724f 000d 70ef 000d     .p...p..Or...p..
   de084:	dacc 000d dad4 000d dad9 000d dade 000d     ................
   de094:	dae2 000d dae7 000d daec 000d daf0 000d     ................
   de0a4:	dafb 000d db06 000d                         ........

000de0ac <_ZL17FRAMversionNumber>:
   de0ac:	0001 0000 6954 656d 7a20 6e6f 2065 666f     ....Time zone of
   de0bc:	7366 7465 2520 0069 5344 2054 666f 7366     fset %i.DST offs
   de0cc:	7465 2520 2e32 6631 6600 6961 656c 2064     et %2.1f.failed 
   de0dc:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   de0ec:	3025 7832 6320 756f 746e 253d 0075 6166     %02x count=%u.fa
   de0fc:	6c69 6465 7420 206f 6572 6461 7220 6765     iled to read reg
   de10c:	6441 7264 253d 3230 2078 7473 7461 253d     Addr=%02x stat=%
   de11c:	0064 4f46 5455 6420 6469 6e20 746f 6720     d.FOUT did not g
   de12c:	206f 4948 4847 6e00 746f 6420 7465 6365     o HIGH.not detec
   de13c:	6574 0064 6166 6c69 6465 7420 206f 7277     ted.failed to wr
   de14c:	7469 2065 6572 4167 6464 3d72 3025 7832     ite regAddr=%02x
   de15c:	7320 6174 3d74 6425 7300 7465 4457 2054      stat=%d.setWDT 
   de16c:	6425 7700 7461 6863 6f64 2067 6c63 6165     %d.watchdog clea
   de17c:	6572 2064 5262 7365 6c75 3d74 6425 7700     red bResult=%d.w
   de18c:	7461 6863 6f64 2067 6573 2074 6f66 7275     atchdog set four
   de19c:	6553 7363 253d 2064 5262 7365 6c75 3d74     Secs=%d bResult=
   de1ac:	6425 5700 5441 4843 4f44 0047 4544 5045     %d.WATCHDOG.DEEP
   de1bc:	505f 574f 5245 445f 574f 004e 4f43 4e55     _POWER_DOWN.COUN
   de1cc:	4454 574f 5f4e 4954 454d 0052 4c41 5241     TDOWN_TIMER.ALAR
   de1dc:	004d 6166 6c69 7275 2065 6e69 7520 6470     M.failure in upd
   de1ec:	7461 5765 6b61 5265 6165 6f73 206e 6425     ateWakeReason %d
   de1fc:	7700 6b61 2065 6572 7361 6e6f 3d20 2520     .wake reason = %
   de20c:	0073 6166 6c69 7275 2065 6e69 7320 7465     s.failure in set
   de21c:	6f43 6e75 6474 776f 546e 6d69 7265 2520     CountdownTimer %
   de22c:	0064 6166 6c69 7275 2065 6e69 6420 6565     d.failure in dee
   de23c:	5070 776f 7265 6f44 6e77 2520 0064 4552     pPowerDown %d.RE
   de24c:	5f47 4c53 4545 5f50 5443 4c52 303d 2578     G_SLEEP_CTRL=0x%
   de25c:	7832 6400 6469 276e 2074 6f70 6577 2072     2x.didn't power 
   de26c:	6f64 6e77 2500 3430 2d64 3025 6432 252d     down.%04d-%02d-%
   de27c:	3230 2064 3025 6432 253a 3230 3a64 3025     02d %02d:%02d:%0
   de28c:	6432 6700 7465 7452 4163 5473 206d 7325     2d.getRtcAsTm %s
   de29c:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   de2ac:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   de2bc:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   de2cc:	3142 3038 0035 6573 5274 6374 7341 6d54     B1805.setRtcAsTm
   de2dc:	2520 0073 6166 6c69 7275 2065 6e69 7320      %s.failure in s
   de2ec:	7465 7452 4663 6f72 546d 206d 6425 7300     etRtcFromTm %d.s
   de2fc:	7465 5220 4354 6620 6f72 206d 6c63 756f     et RTC from clou
   de30c:	2064 7325 6100 7070 612e 3162 3038 0035     d %s.app.ab1805.

000de31c <_ZTV6AB1805>:
	...
   de324:	6195 000d 6197 000d 680d 000d 6893 000d     .a...a...h...h..
   de334:	7277 7469 4465 7461 2061 6166 6c69 6465     writeData failed
   de344:	6420 7275 6e69 2067 7265 7361 2065 7266      during erase fr
   de354:	6d61 6441 7264 253d 0075 0000               amAddr=%u...

000de360 <_ZTV6MB85RC>:
	...
   de368:	6c9d 000d 6c9f 000d 6d4d 000d 6de3 000d     .l...l..Mm...m..
   de378:	6e65 000d 7550 6c62 7369 5168 6575 6575     en..PublishQueue
   de388:	7341 6e79 0063 7571 7565 6965 676e 6520     Async.queueing e
   de398:	6576 746e 614e 656d 253d 2073 6164 6174     ventName=%s data
   de3a8:	253d 2073 7474 3d6c 6425 6620 616c 7367     =%s ttl=%d flags
   de3b8:	3d31 6425 6620 616c 7367 3d32 6425 7320     1=%d flags2=%d s
   de3c8:	7a69 3d65 6425 7000 6275 696c 6873 6e69     ize=%d.publishin
   de3d8:	2067 7325 2520 2073 7474 3d6c 6425 6620     g %s %s ttl=%d f
   de3e8:	616c 7367 253d 0078 7570 6c62 7369 6568     lags=%x.publishe
   de3f8:	2064 7573 6363 7365 6673 6c75 796c 7000     d successfully.p
   de408:	6275 696c 6873 6465 6620 6961 656c 2c64     ublished failed,
   de418:	7720 6c69 206c 6572 7274 2079 6e69 2520      will retry in %
   de428:	756c 6d20 0073 7061 2e70 7570 7162 0000     lu ms.app.pubq..

000de438 <_ZTV21PublishQueueAsyncBase>:
	...
   de448:	6f7d 000d 40a5 000d 40a5 000d 40a5 000d     }o...@...@...@..
   de458:	40a5 000d 40a5 000d                         .@...@..

000de460 <_ZTV25PublishQueueAsyncRetained>:
	...
   de468:	7065 000d 7079 000d 6f7d 000d 7109 000d     ep..yp..}o...q..
   de478:	70c9 000d 70a7 000d 724f 000d 70ef 000d     .p...p..Or...p..

000de488 <_ZTVN5spark13CellularClassE>:
	...
   de490:	7e2f 000d 7e25 000d 7e1b 000d 7ddd 000d     /~..%~...~...}..
   de4a0:	7e0f 000d 42f9 000d 9de9 000d 9df1 000d     .~...B..........
   de4b0:	7e03 000d 7dfb 000d 7df1 000d 7de7 000d     .~...}...}...}..
   de4c0:	9e21 000d                                   !...

000de4c4 <_ZTV14CellularSignal>:
	...
   de4cc:	7edd 000d 7ee3 000d 7edf 000d 7ef1 000d     .~...~...~...~..
   de4dc:	7f25 000d 7f51 000d 7f85 000d 7fd5 000d     %...Q...........
   de4ec:	fffc ffff 0000 0000 7ffb 000d               ............

000de4f8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de500:	801b 000d 8021 000d 805f 000d 802f 000d     ....!..._.../...
   de510:	801d 000d                                   ....

000de514 <_ZTVN5spark13EthernetClassE>:
	...
   de51c:	868f 000d 8685 000d 867b 000d 8671 000d     ........{...q...
   de52c:	8665 000d 8659 000d 9de9 000d 9df1 000d     e...Y...........
   de53c:	864d 000d 8645 000d 863b 000d 8631 000d     M...E...;...1...
   de54c:	9e21 000d                                   !...

000de550 <_ZTV7TwoWire>:
	...
   de558:	8841 000d 888b 000d 8863 000d 8843 000d     A.......c...C...
   de568:	886b 000d 8873 000d 887b 000d 8883 000d     k...s...{.......

000de578 <_ZTV9IPAddress>:
	...
   de580:	8995 000d 8985 000d 8987 000d 2575 3430     ............u%04
   de590:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   de5a0:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   de5b0:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   de5c0:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   de5d0:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   de5e0:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   de5f0:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000de600 <_ZTVN5spark16JSONStreamWriterE>:
	...
   de608:	8e4f 000d 8e75 000d 8e35 000d 8a95 000d     O...u...5.......

000de618 <_ZTVN5spark16StreamLogHandlerE>:
	...
   de620:	92b9 000d 92d1 000d 9a91 000d 40cb 000d     .............@..

000de630 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   de638:	92e5 000d 92f9 000d 9c35 000d 8e3d 000d     ........5...=...

000de648 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   de650:	8e4d 000d 8e83 000d 99cd 000d 8e3f 000d     M...........?...

000de660 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   de668:	8e4b 000d 8e91 000d 9201 000d 8ead 000d     K...............

000de678 <_ZTVN5spark12NetworkClassE>:
	...
   de680:	9da9 000d 9db3 000d 9dbd 000d 9dc7 000d     ................
   de690:	9dd1 000d 9ddd 000d 9de9 000d 9df1 000d     ................
   de6a0:	9df9 000d 9e05 000d 9e0d 000d 9e17 000d     ................
   de6b0:	9e21 000d 6977 6972 676e 5300 7379 6574     !...wiring.Syste
   de6c0:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   de6d0:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   de6e0:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   de6f0:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   de700:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000de70c <_ZTV11USARTSerial>:
	...
   de714:	aa15 000d aa81 000d aa59 000d a067 000d     ........Y...g...
   de724:	aa29 000d aa45 000d aa37 000d aa53 000d     )...E...7...S...
   de734:	aa17 000d aa1b 000d                         ........

000de73c <_ZTV9USBSerial>:
	...
   de744:	ab29 000d ab91 000d ab67 000d a067 000d     ).......g...g...
   de754:	ab59 000d ab2b 000d ab3b 000d ab8b 000d     Y...+...;.......
   de764:	ab4b 000d ab25 000d                         K...%...

000de76c <_ZSt7nothrow>:
   de76c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   de77c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000de78d <day_name.6145>:
   de78d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   de79d:	6972 6153                                    riSat

000de7a2 <mon_name.6146>:
   de7a2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   de7b2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   de7c2:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000de7d4 <fpi.7566>:
   de7d4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   de7e4:	0000 0000                                   ....

000de7e8 <fpinan.7602>:
   de7e8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000de800 <tinytens>:
   de800:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   de810:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   de820:	6f43 64ac 0628 1168                         Co.d(.h.

000de828 <_ctype_>:
   de828:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   de838:	2020 2020 2020 2020 2020 2020 2020 2020                     
   de848:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   de858:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   de868:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   de878:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   de888:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   de898:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   de8a8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000de92c <_C_numeric_locale>:
   de92c:	e6e0 000d e5e9 000d e23c 2003 4f50 4953     ........<.. POSI
   de93c:	0058 0000                                   X...

000de940 <__mprec_bigtens>:
   de940:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de950:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de960:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de968 <__mprec_tens>:
   de968:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de978:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de988:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de998:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de9a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de9b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de9c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de9d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de9e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de9f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dea08:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dea18:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dea28:	9db4 79d9 7843 44ea                         ...yCx.D

000dea30 <p05.7490>:
   dea30:	0005 0000 0019 0000 007d 0000               ........}...

000dea3c <link_const_variable_data_end>:
   dea3c:	000d5c95 	.word	0x000d5c95
   dea40:	000d6189 	.word	0x000d6189
   dea44:	000d6c8d 	.word	0x000d6c8d
   dea48:	000d74e1 	.word	0x000d74e1
   dea4c:	000d7db5 	.word	0x000d7db5
   dea50:	000d7ead 	.word	0x000d7ead
   dea54:	000d8699 	.word	0x000d8699
   dea58:	000d9a81 	.word	0x000d9a81
   dea5c:	000d9ef5 	.word	0x000d9ef5
   dea60:	000da195 	.word	0x000da195
   dea64:	000da595 	.word	0x000da595
   dea68:	000daa01 	.word	0x000daa01

000dea6c <link_constructors_end>:
   dea6c:	00000000 	.word	0x00000000

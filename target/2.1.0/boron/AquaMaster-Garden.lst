
/Users/chipmc/Documents/Maker/Particle/Projects/AquaMaster-Garden/target/2.1.0/boron/AquaMaster-Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000092c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dd2e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002dc  2003e128  000ddae4  0001e128  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003f0  2003e408  2003e408  0002e408  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dddc0  000dddc0  0002ddc0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dddec  000dddec  0002ddec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001bd055  00000000  00000000  0002ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001c6f8  00000000  00000000  001eae45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003677e  00000000  00000000  0020753d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003228  00000000  00000000  0023dcbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009898  00000000  00000000  00240ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e566  00000000  00000000  0024a77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00048f4a  00000000  00000000  00288ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001140d9  00000000  00000000  002d1c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000092d4  00000000  00000000  003e5d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fa51 	bl	da4d8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fa73 	bl	da528 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e128 	.word	0x2003e128
   d404c:	000ddae4 	.word	0x000ddae4
   d4050:	2003e404 	.word	0x2003e404
   d4054:	2003e408 	.word	0x2003e408
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 fb2f 	bl	d96c4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dd2ac 	.word	0x000dd2ac
   d4080:	000dd2dc 	.word	0x000dd2dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 bb68 	b.w	d5758 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ffe1 	bl	d5050 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 bad9 	b.w	d9648 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bcbf 	b.w	d7a18 <malloc>

000d409a <_Znaj>:
   d409a:	f003 bcbd 	b.w	d7a18 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bcc3 	b.w	d7a28 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fb40 	bl	d7730 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7471 	.word	0x000d7471

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z18outOfMemoryHandleryi+0x8>)
   d40ca:	601a      	str	r2, [r3, #0]
}
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	2003e160 	.word	0x2003e160

000d40d4 <_Z16wateringTimerISRv>:

void wateringTimerISR() {
  wateringTimerFlag = true;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z16wateringTimerISRv+0x8>)
   d40d6:	2201      	movs	r2, #1
   d40d8:	701a      	strb	r2, [r3, #0]
}
   d40da:	4770      	bx	lr
   d40dc:	2003e5b4 	.word	0x2003e5b4

000d40e0 <_Z13awakeTimerISRv>:

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d40e0:	4a02      	ldr	r2, [pc, #8]	; (d40ec <_Z13awakeTimerISRv+0xc>)
   d40e2:	2301      	movs	r3, #1
   d40e4:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d40e6:	4a02      	ldr	r2, [pc, #8]	; (d40f0 <_Z13awakeTimerISRv+0x10>)
   d40e8:	7013      	strb	r3, [r2, #0]
}
   d40ea:	4770      	bx	lr
   d40ec:	2003e55c 	.word	0x2003e55c
   d40f0:	2003e58c 	.word	0x2003e58c

000d40f4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40f4:	6803      	ldr	r3, [r0, #0]
   d40f6:	4718      	bx	r3

000d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40f8:	2a01      	cmp	r2, #1
   d40fa:	d003      	beq.n	d4104 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40fc:	2a02      	cmp	r2, #2
   d40fe:	d003      	beq.n	d4108 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d4100:	2000      	movs	r0, #0
   d4102:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4104:	6001      	str	r1, [r0, #0]
	      break;
   d4106:	e7fb      	b.n	d4100 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4108:	680b      	ldr	r3, [r1, #0]
   d410a:	6003      	str	r3, [r0, #0]
	}
   d410c:	e7f8      	b.n	d4100 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d4110 <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d4110:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d4112:	4b05      	ldr	r3, [pc, #20]	; (d4128 <_Z21batteryContextMessagev+0x18>)
   d4114:	7b1a      	ldrb	r2, [r3, #12]
   d4116:	4b05      	ldr	r3, [pc, #20]	; (d412c <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d4118:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d411a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d411e:	f004 fdba 	bl	d8c96 <_ZN6StringC1EPKc>
}
   d4122:	4620      	mov	r0, r4
   d4124:	bd10      	pop	{r4, pc}
   d4126:	bf00      	nop
   d4128:	2003e55c 	.word	0x2003e55c
   d412c:	2003e128 	.word	0x2003e128

000d4130 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4130:	b538      	push	{r3, r4, r5, lr}
   d4132:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4134:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4136:	b128      	cbz	r0, d4144 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4138:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d413a:	210c      	movs	r1, #12
   d413c:	f005 fc23 	bl	d9986 <_ZdlPvj>
            wakeupSource = next;
   d4140:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4142:	e7f8      	b.n	d4136 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4144:	4620      	mov	r0, r4
   d4146:	bd38      	pop	{r3, r4, r5, pc}

000d4148 <_Z7sendNow6String>:
{
   d4148:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d414a:	4904      	ldr	r1, [pc, #16]	; (d415c <_Z7sendNow6String+0x14>)
   d414c:	f004 fdd1 	bl	d8cf2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4150:	b118      	cbz	r0, d415a <_Z7sendNow6String+0x12>
    state = MEASURING_STATE;
   d4152:	4b03      	ldr	r3, [pc, #12]	; (d4160 <_Z7sendNow6String+0x18>)
   d4154:	2203      	movs	r2, #3
   d4156:	701a      	strb	r2, [r3, #0]
    return 1;
   d4158:	2001      	movs	r0, #1
}
   d415a:	bd08      	pop	{r3, pc}
   d415c:	000dc480 	.word	0x000dc480
   d4160:	2003e550 	.word	0x2003e550

000d4164 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4164:	6943      	ldr	r3, [r0, #20]
   d4166:	b113      	cbz	r3, d416e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4168:	6983      	ldr	r3, [r0, #24]
   d416a:	300c      	adds	r0, #12
   d416c:	4718      	bx	r3
            callback();
        }
    }
   d416e:	4770      	bx	lr

000d4170 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4170:	b510      	push	{r4, lr}
   d4172:	4b03      	ldr	r3, [pc, #12]	; (d4180 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4174:	6003      	str	r3, [r0, #0]
   d4176:	4604      	mov	r4, r0
   d4178:	f002 fe9c 	bl	d6eb4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}
   d4180:	000dc9bc 	.word	0x000dc9bc

000d4184 <_ZN17PublishQueueAsyncD0Ev>:
   d4184:	b510      	push	{r4, lr}
   d4186:	4604      	mov	r4, r0
   d4188:	f7ff fff2 	bl	d4170 <_ZN17PublishQueueAsyncD1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	2138      	movs	r1, #56	; 0x38
   d4190:	f005 fbf9 	bl	d9986 <_ZdlPvj>
   d4194:	4620      	mov	r0, r4
   d4196:	bd10      	pop	{r4, pc}

000d4198 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4198:	b510      	push	{r4, lr}
   d419a:	4b03      	ldr	r3, [pc, #12]	; (d41a8 <_ZN8MB85RC64D1Ev+0x10>)
   d419c:	6003      	str	r3, [r0, #0]
   d419e:	4604      	mov	r4, r0
   d41a0:	f002 fca4 	bl	d6aec <_ZN6MB85RCD1Ev>
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}
   d41a8:	000dc9a0 	.word	0x000dc9a0

000d41ac <_ZN8MB85RC64D0Ev>:
   d41ac:	b510      	push	{r4, lr}
   d41ae:	4604      	mov	r4, r0
   d41b0:	f7ff fff2 	bl	d4198 <_ZN8MB85RC64D1Ev>
   d41b4:	4620      	mov	r0, r4
   d41b6:	2110      	movs	r1, #16
   d41b8:	f005 fbe5 	bl	d9986 <_ZdlPvj>
   d41bc:	4620      	mov	r0, r4
   d41be:	bd10      	pop	{r4, pc}

000d41c0 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41c0:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41c2:	2100      	movs	r1, #0
   d41c4:	4604      	mov	r4, r0
   d41c6:	4608      	mov	r0, r1
   d41c8:	f003 f8d2 	bl	d7370 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41cc:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41ce:	4620      	mov	r0, r4
   d41d0:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41d2:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41d4:	f003 f8e4 	bl	d73a0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41d8:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41da:	b10c      	cbz	r4, d41e0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d41dc:	2301      	movs	r3, #1
   d41de:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41e0:	2100      	movs	r1, #0
   d41e2:	2001      	movs	r0, #1
   d41e4:	f003 f8c4 	bl	d7370 <os_thread_scheduling>
            }
        }
        if (t) {
   d41e8:	b12c      	cbz	r4, d41f6 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d41ea:	6823      	ldr	r3, [r4, #0]
   d41ec:	4620      	mov	r0, r4
   d41ee:	689b      	ldr	r3, [r3, #8]
   d41f0:	4798      	blx	r3
            t->running = false;
   d41f2:	2300      	movs	r3, #0
   d41f4:	7123      	strb	r3, [r4, #4]
        }
    }
   d41f6:	b002      	add	sp, #8
   d41f8:	bd10      	pop	{r4, pc}
	...

000d41fc <_Z11resetCounts6String>:
{
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4908      	ldr	r1, [pc, #32]	; (d4220 <_Z11resetCounts6String+0x24>)
   d4200:	f004 fd77 	bl	d8cf2 <_ZNK6String6equalsEPKc>
   d4204:	2300      	movs	r3, #0
  if (command == "1")
   d4206:	b150      	cbz	r0, d421e <_Z11resetCounts6String+0x22>
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d4208:	4a06      	ldr	r2, [pc, #24]	; (d4224 <_Z11resetCounts6String+0x28>)
   d420a:	6113      	str	r3, [r2, #16]
    current.alertCount = 0;                                           // Reset count variables
   d420c:	4a06      	ldr	r2, [pc, #24]	; (d4228 <_Z11resetCounts6String+0x2c>)
   d420e:	6113      	str	r3, [r2, #16]
    dataInFlight = false;
   d4210:	4a06      	ldr	r2, [pc, #24]	; (d422c <_Z11resetCounts6String+0x30>)
   d4212:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d4214:	4b06      	ldr	r3, [pc, #24]	; (d4230 <_Z11resetCounts6String+0x34>)
   d4216:	2001      	movs	r0, #1
   d4218:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d421a:	4b06      	ldr	r3, [pc, #24]	; (d4234 <_Z11resetCounts6String+0x38>)
   d421c:	7018      	strb	r0, [r3, #0]
}
   d421e:	bd08      	pop	{r3, pc}
   d4220:	000dc480 	.word	0x000dc480
   d4224:	2003e55c 	.word	0x2003e55c
   d4228:	2003e4b8 	.word	0x2003e4b8
   d422c:	2003e4e3 	.word	0x2003e4e3
   d4230:	2003e4d8 	.word	0x2003e4d8
   d4234:	2003e58c 	.word	0x2003e58c

000d4238 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4238:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d423a:	2000      	movs	r0, #0
   d423c:	f003 fb64 	bl	d7908 <spark_sync_time_pending>
   d4240:	b128      	cbz	r0, d424e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4242:	f003 fb39 	bl	d78b8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4246:	f080 0001 	eor.w	r0, r0, #1
   d424a:	b2c0      	uxtb	r0, r0
    }
   d424c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d424e:	2001      	movs	r0, #1
   d4250:	e7fc      	b.n	d424c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4252:	2300      	movs	r3, #0
   d4254:	2204      	movs	r2, #4
   d4256:	f003 bb0f 	b.w	d7878 <spark_variable>
	...

000d425c <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d425c:	b530      	push	{r4, r5, lr}
   d425e:	b085      	sub	sp, #20
   d4260:	4603      	mov	r3, r0
   d4262:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4264:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4266:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4268:	4798      	blx	r3
        size = str.length();
   d426a:	9802      	ldr	r0, [sp, #8]
   d426c:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d426e:	f003 fbd3 	bl	d7a18 <malloc>
   d4272:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4274:	b150      	cbz	r0, d428c <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d4276:	6822      	ldr	r2, [r4, #0]
   d4278:	9900      	ldr	r1, [sp, #0]
   d427a:	f006 f92d 	bl	da4d8 <memcpy>
        return 0;
   d427e:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4280:	4668      	mov	r0, sp
   d4282:	f004 fcbd 	bl	d8c00 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4286:	4620      	mov	r0, r4
   d4288:	b005      	add	sp, #20
   d428a:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d428c:	4c00      	ldr	r4, [pc, #0]	; (d4290 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d428e:	e7f7      	b.n	d4280 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4290:	fffffefc 	.word	0xfffffefc

000d4294 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4294:	b510      	push	{r4, lr}
   d4296:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4298:	6800      	ldr	r0, [r0, #0]
   d429a:	b108      	cbz	r0, d42a0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d429c:	f003 fbc4 	bl	d7a28 <free>
class SystemClass {
   d42a0:	4620      	mov	r0, r4
   d42a2:	bd10      	pop	{r4, pc}

000d42a4 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d42a4:	2300      	movs	r3, #0
   d42a6:	6840      	ldr	r0, [r0, #4]
   d42a8:	461a      	mov	r2, r3
   d42aa:	4619      	mov	r1, r3
   d42ac:	f003 bb7c 	b.w	d79a8 <network_off>

000d42b0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42b0:	b510      	push	{r4, lr}
      if (_M_manager)
   d42b2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42b4:	4604      	mov	r4, r0
      if (_M_manager)
   d42b6:	b113      	cbz	r3, d42be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42b8:	2203      	movs	r2, #3
   d42ba:	4601      	mov	r1, r0
   d42bc:	4798      	blx	r3
    }
   d42be:	4620      	mov	r0, r4
   d42c0:	bd10      	pop	{r4, pc}
	...

000d42c4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d42c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42c6:	4b13      	ldr	r3, [pc, #76]	; (d4314 <_ZN5TimerD1Ev+0x50>)
   d42c8:	6003      	str	r3, [r0, #0]
   d42ca:	4604      	mov	r4, r0
        if (handle) {
   d42cc:	6880      	ldr	r0, [r0, #8]
   d42ce:	b1c8      	cbz	r0, d4304 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42d0:	2500      	movs	r5, #0
   d42d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d42d6:	e9cd 3500 	strd	r3, r5, [sp]
   d42da:	2102      	movs	r1, #2
   d42dc:	462b      	mov	r3, r5
   d42de:	462a      	mov	r2, r5
   d42e0:	f003 f866 	bl	d73b0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d42e4:	68a0      	ldr	r0, [r4, #8]
   d42e6:	4629      	mov	r1, r5
   d42e8:	f003 f89a 	bl	d7420 <os_timer_set_id>
            while (running) {
   d42ec:	7923      	ldrb	r3, [r4, #4]
   d42ee:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42f2:	b113      	cbz	r3, d42fa <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d42f4:	f003 f834 	bl	d7360 <os_thread_yield>
            while (running) {
   d42f8:	e7f8      	b.n	d42ec <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d42fa:	68a0      	ldr	r0, [r4, #8]
   d42fc:	4629      	mov	r1, r5
   d42fe:	f003 f847 	bl	d7390 <os_timer_destroy>
            handle = nullptr;
   d4302:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4304:	f104 000c 	add.w	r0, r4, #12
   d4308:	f7ff ffd2 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
    }
   d430c:	4620      	mov	r0, r4
   d430e:	b003      	add	sp, #12
   d4310:	bd30      	pop	{r4, r5, pc}
   d4312:	bf00      	nop
   d4314:	000dc98c 	.word	0x000dc98c

000d4318 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4318:	b510      	push	{r4, lr}
   d431a:	4604      	mov	r4, r0
    }
   d431c:	f7ff ffd2 	bl	d42c4 <_ZN5TimerD1Ev>
   d4320:	4620      	mov	r0, r4
   d4322:	211c      	movs	r1, #28
   d4324:	f005 fb2f 	bl	d9986 <_ZdlPvj>
   d4328:	4620      	mov	r0, r4
   d432a:	bd10      	pop	{r4, pc}

000d432c <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d432c:	b538      	push	{r3, r4, r5, lr}
   d432e:	4604      	mov	r4, r0
            : conf_{} {
   d4330:	2520      	movs	r5, #32
   d4332:	462a      	mov	r2, r5
   d4334:	2100      	movs	r1, #0
   d4336:	f006 f8f7 	bl	da528 <memset>
        conf_.size = sizeof(conf_);
   d433a:	7165      	strb	r5, [r4, #5]
    }
   d433c:	4620      	mov	r0, r4
   d433e:	bd38      	pop	{r3, r4, r5, pc}

000d4340 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4342:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4344:	4605      	mov	r5, r0
   d4346:	460f      	mov	r7, r1
   d4348:	4616      	mov	r6, r2
        if (valid_) {
   d434a:	b18b      	cbz	r3, d4370 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d434c:	6803      	ldr	r3, [r0, #0]
   d434e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4350:	b183      	cbz	r3, d4374 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4352:	889a      	ldrh	r2, [r3, #4]
   d4354:	2a01      	cmp	r2, #1
   d4356:	d006      	beq.n	d4366 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4358:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d435a:	e7f9      	b.n	d4350 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d435c:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d435e:	b14b      	cbz	r3, d4374 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4360:	889a      	ldrh	r2, [r3, #4]
   d4362:	2a01      	cmp	r2, #1
   d4364:	d1fa      	bne.n	d435c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4366:	b12b      	cbz	r3, d4374 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4368:	899a      	ldrh	r2, [r3, #12]
   d436a:	42ba      	cmp	r2, r7
   d436c:	d1f6      	bne.n	d435c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d436e:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4370:	4628      	mov	r0, r5
   d4372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4374:	490a      	ldr	r1, [pc, #40]	; (d43a0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4376:	2010      	movs	r0, #16
   d4378:	f005 fb07 	bl	d998a <_ZnwjRKSt9nothrow_t>
   d437c:	4604      	mov	r4, r0
   d437e:	b168      	cbz	r0, d439c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4380:	2210      	movs	r2, #16
   d4382:	2100      	movs	r1, #0
   d4384:	f006 f8d0 	bl	da528 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4388:	4b06      	ldr	r3, [pc, #24]	; (d43a4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d438a:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d438c:	2301      	movs	r3, #1
   d438e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4390:	692b      	ldr	r3, [r5, #16]
   d4392:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4394:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4396:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4398:	612c      	str	r4, [r5, #16]
   d439a:	e7e9      	b.n	d4370 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d439c:	7528      	strb	r0, [r5, #20]
                return *this;
   d439e:	e7e7      	b.n	d4370 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d43a0:	000dcfdc 	.word	0x000dcfdc
   d43a4:	00030010 	.word	0x00030010

000d43a8 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d43a8:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d43aa:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d43ac:	4605      	mov	r5, r0
   d43ae:	460e      	mov	r6, r1
        if (valid_) {
   d43b0:	b1cb      	cbz	r3, d43e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d43b2:	6803      	ldr	r3, [r0, #0]
   d43b4:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d43b6:	b123      	cbz	r3, d43c2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d43b8:	889a      	ldrh	r2, [r3, #4]
   d43ba:	2a04      	cmp	r2, #4
   d43bc:	d017      	beq.n	d43ee <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d43be:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d43c0:	e7f9      	b.n	d43b6 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d43c2:	490c      	ldr	r1, [pc, #48]	; (d43f4 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d43c4:	2010      	movs	r0, #16
   d43c6:	f005 fae0 	bl	d998a <_ZnwjRKSt9nothrow_t>
   d43ca:	4604      	mov	r4, r0
   d43cc:	b168      	cbz	r0, d43ea <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d43ce:	2210      	movs	r2, #16
   d43d0:	2100      	movs	r1, #0
   d43d2:	f006 f8a9 	bl	da528 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d43d6:	4b08      	ldr	r3, [pc, #32]	; (d43f8 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d43d8:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d43da:	2304      	movs	r3, #4
   d43dc:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d43de:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d43e0:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d43e2:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d43e6:	4628      	mov	r0, r5
   d43e8:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d43ea:	7528      	strb	r0, [r5, #20]
                return *this;
   d43ec:	e7fb      	b.n	d43e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d43ee:	60de      	str	r6, [r3, #12]
                return *this;
   d43f0:	e7f9      	b.n	d43e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d43f2:	bf00      	nop
   d43f4:	000dcfdc 	.word	0x000dcfdc
   d43f8:	00030010 	.word	0x00030010

000d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d43fc:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d43fe:	4801      	ldr	r0, [pc, #4]	; (d4404 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4400:	f003 bd4e 	b.w	d7ea0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4404:	000d7e75 	.word	0x000d7e75

000d4408 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4408:	b5f0      	push	{r4, r5, r6, r7, lr}
   d440a:	468c      	mov	ip, r1
   d440c:	2500      	movs	r5, #0
   d440e:	4914      	ldr	r1, [pc, #80]	; (d4460 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   d4410:	7105      	strb	r5, [r0, #4]
   d4412:	4604      	mov	r4, r0
   d4414:	6085      	str	r5, [r0, #8]
   d4416:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4418:	e892 0003 	ldmia.w	r2, {r0, r1}
   d441c:	b085      	sub	sp, #20
   d441e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4420:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4424:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4428:	e896 0003 	ldmia.w	r6, {r0, r1}
   d442c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4430:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4434:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4438:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d443a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d443c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d443e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4440:	6095      	str	r5, [r2, #8]
   d4442:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4444:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4446:	e9cd 3500 	strd	r3, r5, [sp]
   d444a:	4a06      	ldr	r2, [pc, #24]	; (d4464 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d444c:	4623      	mov	r3, r4
   d444e:	4661      	mov	r1, ip
   d4450:	f104 0008 	add.w	r0, r4, #8
   d4454:	f002 ff94 	bl	d7380 <os_timer_create>
    }
   d4458:	4620      	mov	r0, r4
   d445a:	b005      	add	sp, #20
   d445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d445e:	bf00      	nop
   d4460:	000dc98c 	.word	0x000dc98c
   d4464:	000d41c1 	.word	0x000d41c1

000d4468 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4468:	b40e      	push	{r1, r2, r3}
   d446a:	b510      	push	{r4, lr}
   d446c:	b08d      	sub	sp, #52	; 0x34
   d446e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4470:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4472:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4476:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4478:	2300      	movs	r3, #0
   d447a:	2020      	movs	r0, #32
   d447c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4480:	e9cd 4200 	strd	r4, r2, [sp]
   d4484:	201e      	movs	r0, #30
   d4486:	aa04      	add	r2, sp, #16
   d4488:	f003 f962 	bl	d7750 <log_message_v>
}
   d448c:	b00d      	add	sp, #52	; 0x34
   d448e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4492:	b003      	add	sp, #12
   d4494:	4770      	bx	lr

000d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4496:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4498:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d449a:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d449e:	f88d 3000 	strb.w	r3, [sp]
   d44a2:	f88d 5004 	strb.w	r5, [sp, #4]
   d44a6:	68e4      	ldr	r4, [r4, #12]
   d44a8:	233c      	movs	r3, #60	; 0x3c
   d44aa:	47a0      	blx	r4
	}
   d44ac:	b003      	add	sp, #12
   d44ae:	bd30      	pop	{r4, r5, pc}

000d44b0 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d44b0:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d44b2:	780b      	ldrb	r3, [r1, #0]
   d44b4:	4d1c      	ldr	r5, [pc, #112]	; (d4528 <_Z14UbidotsHandlerPKcS0_+0x78>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d44b6:	b093      	sub	sp, #76	; 0x4c
   d44b8:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d44ba:	b993      	cbnz	r3, d44e2 <_Z14UbidotsHandlerPKcS0_+0x32>
    snprintf(responseString, sizeof(responseString),"No Data");
   d44bc:	491b      	ldr	r1, [pc, #108]	; (d452c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d44be:	a802      	add	r0, sp, #8
   d44c0:	f006 f868 	bl	da594 <strcpy>
  if (sysStatus.verboseMode) publishQueue.publish("Ubidots Hook", responseString, PRIVATE, WITH_ACK);
   d44c4:	792b      	ldrb	r3, [r5, #4]
   d44c6:	b153      	cbz	r3, d44de <_Z14UbidotsHandlerPKcS0_+0x2e>
inline particle::Flag<TagT, ValueT>::operator ValueT() const {
    return val_;
}

template<typename TagT, typename ValueT>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d44c8:	4b19      	ldr	r3, [pc, #100]	; (d4530 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d44ca:	491a      	ldr	r1, [pc, #104]	; (d4534 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d44cc:	781b      	ldrb	r3, [r3, #0]
   d44ce:	f88d 3000 	strb.w	r3, [sp]
   d44d2:	4b19      	ldr	r3, [pc, #100]	; (d4538 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d44d4:	4819      	ldr	r0, [pc, #100]	; (d453c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d44d6:	781b      	ldrb	r3, [r3, #0]
   d44d8:	aa02      	add	r2, sp, #8
   d44da:	f7ff ffdc 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d44de:	b013      	add	sp, #76	; 0x4c
   d44e0:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d44e2:	4608      	mov	r0, r1
   d44e4:	f005 ffd4 	bl	da490 <atoi>
   d44e8:	28c8      	cmp	r0, #200	; 0xc8
   d44ea:	d10d      	bne.n	d4508 <_Z14UbidotsHandlerPKcS0_+0x58>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d44ec:	4914      	ldr	r1, [pc, #80]	; (d4540 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d44ee:	a802      	add	r0, sp, #8
   d44f0:	f006 f850 	bl	da594 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d44f4:	f004 ff33 	bl	d935e <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d44f8:	4b12      	ldr	r3, [pc, #72]	; (d4544 <_Z14UbidotsHandlerPKcS0_+0x94>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d44fa:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d44fc:	2201      	movs	r2, #1
   d44fe:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4500:	4b11      	ldr	r3, [pc, #68]	; (d4548 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4502:	2200      	movs	r2, #0
   d4504:	701a      	strb	r2, [r3, #0]
   d4506:	e7dd      	b.n	d44c4 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4508:	4620      	mov	r0, r4
   d450a:	f005 ffc1 	bl	da490 <atoi>
   d450e:	28c9      	cmp	r0, #201	; 0xc9
   d4510:	d0ec      	beq.n	d44ec <_Z14UbidotsHandlerPKcS0_+0x3c>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4512:	4620      	mov	r0, r4
   d4514:	f005 ffbc 	bl	da490 <atoi>
   d4518:	4a0c      	ldr	r2, [pc, #48]	; (d454c <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d451a:	4603      	mov	r3, r0
   d451c:	2140      	movs	r1, #64	; 0x40
   d451e:	a802      	add	r0, sp, #8
   d4520:	f003 fa9a 	bl	d7a58 <snprintf>
   d4524:	e7ce      	b.n	d44c4 <_Z14UbidotsHandlerPKcS0_+0x14>
   d4526:	bf00      	nop
   d4528:	2003e55c 	.word	0x2003e55c
   d452c:	000dc4b5 	.word	0x000dc4b5
   d4530:	2003e45d 	.word	0x2003e45d
   d4534:	000dc4ec 	.word	0x000dc4ec
   d4538:	2003e45c 	.word	0x2003e45c
   d453c:	2003e514 	.word	0x2003e514
   d4540:	000dc4bd 	.word	0x000dc4bd
   d4544:	2003e58c 	.word	0x2003e58c
   d4548:	2003e4e3 	.word	0x2003e4e3
   d454c:	000dc4cf 	.word	0x000dc4cf

000d4550 <_Z12hardResetNow6String>:
{
   d4550:	b507      	push	{r0, r1, r2, lr}
   d4552:	490b      	ldr	r1, [pc, #44]	; (d4580 <_Z12hardResetNow6String+0x30>)
   d4554:	f004 fbcd 	bl	d8cf2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4558:	b170      	cbz	r0, d4578 <_Z12hardResetNow6String+0x28>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d455a:	2300      	movs	r3, #0
   d455c:	f88d 3000 	strb.w	r3, [sp]
   d4560:	4b08      	ldr	r3, [pc, #32]	; (d4584 <_Z12hardResetNow6String+0x34>)
   d4562:	4a09      	ldr	r2, [pc, #36]	; (d4588 <_Z12hardResetNow6String+0x38>)
   d4564:	781b      	ldrb	r3, [r3, #0]
   d4566:	4909      	ldr	r1, [pc, #36]	; (d458c <_Z12hardResetNow6String+0x3c>)
   d4568:	4809      	ldr	r0, [pc, #36]	; (d4590 <_Z12hardResetNow6String+0x40>)
   d456a:	f7ff ff94 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    ab1805.deepPowerDown(10);
   d456e:	4809      	ldr	r0, [pc, #36]	; (d4594 <_Z12hardResetNow6String+0x44>)
   d4570:	210a      	movs	r1, #10
   d4572:	f001 ffc5 	bl	d6500 <_ZN6AB180513deepPowerDownEi>
   d4576:	2001      	movs	r0, #1
}
   d4578:	b003      	add	sp, #12
   d457a:	f85d fb04 	ldr.w	pc, [sp], #4
   d457e:	bf00      	nop
   d4580:	000dc480 	.word	0x000dc480
   d4584:	2003e45c 	.word	0x2003e45c
   d4588:	000dc4f9 	.word	0x000dc4f9
   d458c:	000dc804 	.word	0x000dc804
   d4590:	2003e514 	.word	0x2003e514
   d4594:	2003e464 	.word	0x2003e464

000d4598 <_Z14setVerboseMode6String>:
{
   d4598:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d459a:	4919      	ldr	r1, [pc, #100]	; (d4600 <_Z14setVerboseMode6String+0x68>)
   d459c:	4605      	mov	r5, r0
   d459e:	f004 fba8 	bl	d8cf2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45a2:	4604      	mov	r4, r0
   d45a4:	b1b0      	cbz	r0, d45d4 <_Z14setVerboseMode6String+0x3c>
    sysStatus.verboseMode = true;
   d45a6:	4b17      	ldr	r3, [pc, #92]	; (d4604 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d45a8:	4a17      	ldr	r2, [pc, #92]	; (d4608 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = true;
   d45aa:	2401      	movs	r4, #1
   d45ac:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d45ae:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d45b0:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d45b2:	b913      	cbnz	r3, d45ba <_Z14setVerboseMode6String+0x22>
    return 1;
   d45b4:	2001      	movs	r0, #1
}
   d45b6:	b003      	add	sp, #12
   d45b8:	bd30      	pop	{r4, r5, pc}
   d45ba:	4b14      	ldr	r3, [pc, #80]	; (d460c <_Z14setVerboseMode6String+0x74>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d45bc:	4a14      	ldr	r2, [pc, #80]	; (d4610 <_Z14setVerboseMode6String+0x78>)
   d45be:	781b      	ldrb	r3, [r3, #0]
   d45c0:	f88d 3000 	strb.w	r3, [sp]
   d45c4:	4b13      	ldr	r3, [pc, #76]	; (d4614 <_Z14setVerboseMode6String+0x7c>)
   d45c6:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d45c8:	4913      	ldr	r1, [pc, #76]	; (d4618 <_Z14setVerboseMode6String+0x80>)
   d45ca:	4814      	ldr	r0, [pc, #80]	; (d461c <_Z14setVerboseMode6String+0x84>)
   d45cc:	f7ff ff63 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45d0:	4620      	mov	r0, r4
   d45d2:	e7f0      	b.n	d45b6 <_Z14setVerboseMode6String+0x1e>
   d45d4:	4912      	ldr	r1, [pc, #72]	; (d4620 <_Z14setVerboseMode6String+0x88>)
   d45d6:	4628      	mov	r0, r5
   d45d8:	f004 fb8b 	bl	d8cf2 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d45dc:	2800      	cmp	r0, #0
   d45de:	d0ea      	beq.n	d45b6 <_Z14setVerboseMode6String+0x1e>
    sysStatus.verboseMode = false;
   d45e0:	4b08      	ldr	r3, [pc, #32]	; (d4604 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d45e2:	4a09      	ldr	r2, [pc, #36]	; (d4608 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = false;
   d45e4:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d45e6:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d45e8:	2401      	movs	r4, #1
   d45ea:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d45ec:	2b00      	cmp	r3, #0
   d45ee:	d0e1      	beq.n	d45b4 <_Z14setVerboseMode6String+0x1c>
   d45f0:	4b06      	ldr	r3, [pc, #24]	; (d460c <_Z14setVerboseMode6String+0x74>)
   d45f2:	4a0c      	ldr	r2, [pc, #48]	; (d4624 <_Z14setVerboseMode6String+0x8c>)
   d45f4:	781b      	ldrb	r3, [r3, #0]
   d45f6:	f88d 3000 	strb.w	r3, [sp]
   d45fa:	4b06      	ldr	r3, [pc, #24]	; (d4614 <_Z14setVerboseMode6String+0x7c>)
   d45fc:	781b      	ldrb	r3, [r3, #0]
   d45fe:	e7e3      	b.n	d45c8 <_Z14setVerboseMode6String+0x30>
   d4600:	000dc480 	.word	0x000dc480
   d4604:	2003e55c 	.word	0x2003e55c
   d4608:	2003e58c 	.word	0x2003e58c
   d460c:	2003e45d 	.word	0x2003e45d
   d4610:	000dc511 	.word	0x000dc511
   d4614:	2003e45c 	.word	0x2003e45c
   d4618:	000dc66c 	.word	0x000dc66c
   d461c:	2003e514 	.word	0x2003e514
   d4620:	000dc690 	.word	0x000dc690
   d4624:	000dc522 	.word	0x000dc522

000d4628 <_Z11setOpenTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setOpenTime(String command)
   d4628:	b500      	push	{lr}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  makeUpParkHourStrings();                                                    // Create the strings for the console
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (sysStatus.connectedStatus) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d462a:	4b0c      	ldr	r3, [pc, #48]	; (d465c <_Z11setOpenTime6String.part.0+0x34>)
   d462c:	4a0c      	ldr	r2, [pc, #48]	; (d4660 <_Z11setOpenTime6String.part.0+0x38>)
   d462e:	7f1b      	ldrb	r3, [r3, #28]
int setOpenTime(String command)
   d4630:	b0c3      	sub	sp, #268	; 0x10c
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4632:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4636:	a802      	add	r0, sp, #8
   d4638:	f003 fa0e 	bl	d7a58 <snprintf>
   d463c:	4b09      	ldr	r3, [pc, #36]	; (d4664 <_Z11setOpenTime6String.part.0+0x3c>)
    publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d463e:	490a      	ldr	r1, [pc, #40]	; (d4668 <_Z11setOpenTime6String.part.0+0x40>)
   d4640:	781b      	ldrb	r3, [r3, #0]
   d4642:	f88d 3000 	strb.w	r3, [sp]
   d4646:	4b09      	ldr	r3, [pc, #36]	; (d466c <_Z11setOpenTime6String.part.0+0x44>)
   d4648:	4809      	ldr	r0, [pc, #36]	; (d4670 <_Z11setOpenTime6String.part.0+0x48>)
   d464a:	781b      	ldrb	r3, [r3, #0]
   d464c:	aa02      	add	r2, sp, #8
   d464e:	f7ff ff22 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d4652:	2001      	movs	r0, #1
   d4654:	b043      	add	sp, #268	; 0x10c
   d4656:	f85d fb04 	ldr.w	pc, [sp], #4
   d465a:	bf00      	nop
   d465c:	2003e55c 	.word	0x2003e55c
   d4660:	000dc537 	.word	0x000dc537
   d4664:	2003e45d 	.word	0x2003e45d
   d4668:	000dc8bf 	.word	0x000dc8bf
   d466c:	2003e45c 	.word	0x2003e45c
   d4670:	2003e514 	.word	0x2003e514

000d4674 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4674:	b513      	push	{r0, r1, r4, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4676:	4925      	ldr	r1, [pc, #148]	; (d470c <_Z15setLowPowerMode6String+0x98>)
   d4678:	4604      	mov	r4, r0
   d467a:	f004 fb3a 	bl	d8cf2 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d467e:	b320      	cbz	r0, d46ca <_Z15setLowPowerMode6String+0x56>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4680:	4922      	ldr	r1, [pc, #136]	; (d470c <_Z15setLowPowerMode6String+0x98>)
   d4682:	4620      	mov	r0, r4
   d4684:	f004 fb35 	bl	d8cf2 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4688:	bb38      	cbnz	r0, d46da <_Z15setLowPowerMode6String+0x66>
   d468a:	4921      	ldr	r1, [pc, #132]	; (d4710 <_Z15setLowPowerMode6String+0x9c>)
   d468c:	4620      	mov	r0, r4
   d468e:	f004 fb30 	bl	d8cf2 <_ZNK6String6equalsEPKc>
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
    }
    sysStatus.lowPowerMode = true;
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4692:	2800      	cmp	r0, #0
   d4694:	d036      	beq.n	d4704 <_Z15setLowPowerMode6String+0x90>
  {
    if (!sysStatus.connectedStatus) {                                      // In case we are not connected, we will do so now.
   d4696:	4c1f      	ldr	r4, [pc, #124]	; (d4714 <_Z15setLowPowerMode6String+0xa0>)
   d4698:	78e2      	ldrb	r2, [r4, #3]
   d469a:	b912      	cbnz	r2, d46a2 <_Z15setLowPowerMode6String+0x2e>
      particleConnectionNeeded = true;
   d469c:	4b1e      	ldr	r3, [pc, #120]	; (d4718 <_Z15setLowPowerMode6String+0xa4>)
   d469e:	2201      	movs	r2, #1
   d46a0:	701a      	strb	r2, [r3, #0]
   d46a2:	4b1e      	ldr	r3, [pc, #120]	; (d471c <_Z15setLowPowerMode6String+0xa8>)
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE, WITH_ACK);
   d46a4:	4a1e      	ldr	r2, [pc, #120]	; (d4720 <_Z15setLowPowerMode6String+0xac>)
   d46a6:	781b      	ldrb	r3, [r3, #0]
   d46a8:	f88d 3000 	strb.w	r3, [sp]
   d46ac:	4b1d      	ldr	r3, [pc, #116]	; (d4724 <_Z15setLowPowerMode6String+0xb0>)
   d46ae:	491e      	ldr	r1, [pc, #120]	; (d4728 <_Z15setLowPowerMode6String+0xb4>)
   d46b0:	781b      	ldrb	r3, [r3, #0]
   d46b2:	481e      	ldr	r0, [pc, #120]	; (d472c <_Z15setLowPowerMode6String+0xb8>)
   d46b4:	f7ff feef 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d46b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d46bc:	f003 fa20 	bl	d7b00 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d46c0:	2300      	movs	r3, #0
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d46c2:	491b      	ldr	r1, [pc, #108]	; (d4730 <_Z15setLowPowerMode6String+0xbc>)
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d46c4:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d46c6:	2210      	movs	r2, #16
   d46c8:	e019      	b.n	d46fe <_Z15setLowPowerMode6String+0x8a>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d46ca:	4911      	ldr	r1, [pc, #68]	; (d4710 <_Z15setLowPowerMode6String+0x9c>)
   d46cc:	4620      	mov	r0, r4
   d46ce:	f004 fb10 	bl	d8cf2 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d46d2:	2800      	cmp	r0, #0
   d46d4:	d1d4      	bne.n	d4680 <_Z15setLowPowerMode6String+0xc>
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d46d6:	b002      	add	sp, #8
   d46d8:	bd10      	pop	{r4, pc}
    if (sysStatus.connectedStatus) {
   d46da:	4c0e      	ldr	r4, [pc, #56]	; (d4714 <_Z15setLowPowerMode6String+0xa0>)
   d46dc:	78e2      	ldrb	r2, [r4, #3]
   d46de:	b152      	cbz	r2, d46f6 <_Z15setLowPowerMode6String+0x82>
   d46e0:	4b0e      	ldr	r3, [pc, #56]	; (d471c <_Z15setLowPowerMode6String+0xa8>)
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
   d46e2:	4a14      	ldr	r2, [pc, #80]	; (d4734 <_Z15setLowPowerMode6String+0xc0>)
   d46e4:	781b      	ldrb	r3, [r3, #0]
   d46e6:	f88d 3000 	strb.w	r3, [sp]
   d46ea:	4b0e      	ldr	r3, [pc, #56]	; (d4724 <_Z15setLowPowerMode6String+0xb0>)
   d46ec:	490e      	ldr	r1, [pc, #56]	; (d4728 <_Z15setLowPowerMode6String+0xb4>)
   d46ee:	781b      	ldrb	r3, [r3, #0]
   d46f0:	480e      	ldr	r0, [pc, #56]	; (d472c <_Z15setLowPowerMode6String+0xb8>)
   d46f2:	f7ff fed0 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lowPowerMode = true;
   d46f6:	2301      	movs	r3, #1
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d46f8:	490f      	ldr	r1, [pc, #60]	; (d4738 <_Z15setLowPowerMode6String+0xc4>)
    sysStatus.lowPowerMode = true;
   d46fa:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d46fc:	2210      	movs	r2, #16
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d46fe:	480f      	ldr	r0, [pc, #60]	; (d473c <_Z15setLowPowerMode6String+0xc8>)
   d4700:	f005 ff87 	bl	da612 <strncpy>
  systemStatusWriteNeeded = true;
   d4704:	4b0e      	ldr	r3, [pc, #56]	; (d4740 <_Z15setLowPowerMode6String+0xcc>)
   d4706:	2001      	movs	r0, #1
   d4708:	7018      	strb	r0, [r3, #0]
  return 1;
   d470a:	e7e4      	b.n	d46d6 <_Z15setLowPowerMode6String+0x62>
   d470c:	000dc480 	.word	0x000dc480
   d4710:	000dc690 	.word	0x000dc690
   d4714:	2003e55c 	.word	0x2003e55c
   d4718:	2003e511 	.word	0x2003e511
   d471c:	2003e45d 	.word	0x2003e45d
   d4720:	000dc55a 	.word	0x000dc55a
   d4724:	2003e45c 	.word	0x2003e45c
   d4728:	000dc66c 	.word	0x000dc66c
   d472c:	2003e514 	.word	0x2003e514
   d4730:	000dc56c 	.word	0x000dc56c
   d4734:	000dc54b 	.word	0x000dc54b
   d4738:	000dc570 	.word	0x000dc570
   d473c:	2003e500 	.word	0x2003e500
   d4740:	2003e58c 	.word	0x2003e58c

000d4744 <_Z17setWaterThreshold6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setWaterThreshold(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4746:	6800      	ldr	r0, [r0, #0]
   d4748:	a903      	add	r1, sp, #12
   d474a:	f006 fd9b 	bl	db284 <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d474e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4756:	d42a      	bmi.n	d47ae <_Z17setWaterThreshold6String+0x6a>
   d4758:	eddf 7a16 	vldr	s15, [pc, #88]	; d47b4 <_Z17setWaterThreshold6String+0x70>
   d475c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4764:	bfcc      	ite	gt
   d4766:	2601      	movgt	r6, #1
   d4768:	2600      	movle	r6, #0
   d476a:	dc20      	bgt.n	d47ae <_Z17setWaterThreshold6String+0x6a>
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
  systemStatusWriteNeeded = true;
   d476c:	4b12      	ldr	r3, [pc, #72]	; (d47b8 <_Z17setWaterThreshold6String+0x74>)
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d476e:	4d13      	ldr	r5, [pc, #76]	; (d47bc <_Z17setWaterThreshold6String+0x78>)
  systemStatusWriteNeeded = true;
   d4770:	2401      	movs	r4, #1
   d4772:	701c      	strb	r4, [r3, #0]
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4774:	ee10 0a10 	vmov	r0, s0
  sysStatus.wateringThresholdPct = tempThreshold;                          // debounce is how long we must space events to prevent overcounting
   d4778:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d477c:	f005 fa70 	bl	d9c60 <__aeabi_f2d>
   d4780:	4a0f      	ldr	r2, [pc, #60]	; (d47c0 <_Z17setWaterThreshold6String+0x7c>)
   d4782:	e9cd 0100 	strd	r0, r1, [sp]
   d4786:	480f      	ldr	r0, [pc, #60]	; (d47c4 <_Z17setWaterThreshold6String+0x80>)
   d4788:	2108      	movs	r1, #8
   d478a:	f003 f965 	bl	d7a58 <snprintf>
  if (sysStatus.verboseMode && sysStatus.connectedStatus) {                                                  // Publish result if feeling verbose
   d478e:	792b      	ldrb	r3, [r5, #4]
   d4790:	b153      	cbz	r3, d47a8 <_Z17setWaterThreshold6String+0x64>
   d4792:	78eb      	ldrb	r3, [r5, #3]
   d4794:	b143      	cbz	r3, d47a8 <_Z17setWaterThreshold6String+0x64>
    publishQueue.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d4796:	4b0c      	ldr	r3, [pc, #48]	; (d47c8 <_Z17setWaterThreshold6String+0x84>)
   d4798:	f88d 6000 	strb.w	r6, [sp]
   d479c:	781b      	ldrb	r3, [r3, #0]
   d479e:	4a09      	ldr	r2, [pc, #36]	; (d47c4 <_Z17setWaterThreshold6String+0x80>)
   d47a0:	490a      	ldr	r1, [pc, #40]	; (d47cc <_Z17setWaterThreshold6String+0x88>)
   d47a2:	480b      	ldr	r0, [pc, #44]	; (d47d0 <_Z17setWaterThreshold6String+0x8c>)
   d47a4:	f7ff fe77 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
}
   d47a8:	4620      	mov	r0, r4
   d47aa:	b004      	add	sp, #16
   d47ac:	bd70      	pop	{r4, r5, r6, pc}
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d47ae:	2400      	movs	r4, #0
   d47b0:	e7fa      	b.n	d47a8 <_Z17setWaterThreshold6String+0x64>
   d47b2:	bf00      	nop
   d47b4:	42c80000 	.word	0x42c80000
   d47b8:	2003e58c 	.word	0x2003e58c
   d47bc:	2003e55c 	.word	0x2003e55c
   d47c0:	000dc57a 	.word	0x000dc57a
   d47c4:	2003e58d 	.word	0x2003e58d
   d47c8:	2003e45c 	.word	0x2003e45c
   d47cc:	000dc96e 	.word	0x000dc96e
   d47d0:	2003e514 	.word	0x2003e514

000d47d4 <_Z9sendEventv>:
void sendEvent() {
   d47d4:	b500      	push	{lr}
   d47d6:	b0c9      	sub	sp, #292	; 0x124
  unsigned long timeStampValue = Time.now();                                       // Going to start sending timestamps - and will modify for midnight to fix reporting issue
   d47d8:	f004 fdc1 	bl	d935e <_ZN9TimeClass3nowEv>
  snprintf(data, sizeof(data), "{\"soilMoisture\":%i, \"watering\":%i, \"battery\":%i,\"key1\":\"%s\",\"temp\":%i, \"resets\":%i, \"alerts\":%i, \"connecttime\":%i,\"timestamp\":%lu000}",current.soilMoisture, current.solenoidState, sysStatus.stateOfCharge, batteryContext[sysStatus.batteryState], current.temperature, sysStatus.resetCount, current.alertCount, sysStatus.lastConnectionDuration, timeStampValue);
   d47dc:	4a15      	ldr	r2, [pc, #84]	; (d4834 <_Z9sendEventv+0x60>)
   d47de:	9007      	str	r0, [sp, #28]
   d47e0:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   d47e2:	4b15      	ldr	r3, [pc, #84]	; (d4838 <_Z9sendEventv+0x64>)
   d47e4:	9106      	str	r1, [sp, #24]
   d47e6:	6919      	ldr	r1, [r3, #16]
   d47e8:	9105      	str	r1, [sp, #20]
   d47ea:	6911      	ldr	r1, [r2, #16]
   d47ec:	9104      	str	r1, [sp, #16]
   d47ee:	68d9      	ldr	r1, [r3, #12]
   d47f0:	9103      	str	r1, [sp, #12]
   d47f2:	7b10      	ldrb	r0, [r2, #12]
   d47f4:	4911      	ldr	r1, [pc, #68]	; (d483c <_Z9sendEventv+0x68>)
   d47f6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d47fa:	9102      	str	r1, [sp, #8]
   d47fc:	6892      	ldr	r2, [r2, #8]
   d47fe:	9201      	str	r2, [sp, #4]
   d4800:	689a      	ldr	r2, [r3, #8]
   d4802:	9200      	str	r2, [sp, #0]
   d4804:	685b      	ldr	r3, [r3, #4]
   d4806:	4a0e      	ldr	r2, [pc, #56]	; (d4840 <_Z9sendEventv+0x6c>)
   d4808:	f44f 7180 	mov.w	r1, #256	; 0x100
   d480c:	a808      	add	r0, sp, #32
   d480e:	f003 f923 	bl	d7a58 <snprintf>
   d4812:	4b0c      	ldr	r3, [pc, #48]	; (d4844 <_Z9sendEventv+0x70>)
  publishQueue.publish("Ubidots-AquaMaster-Garden-v1", data, PRIVATE, WITH_ACK);
   d4814:	490c      	ldr	r1, [pc, #48]	; (d4848 <_Z9sendEventv+0x74>)
   d4816:	781b      	ldrb	r3, [r3, #0]
   d4818:	f88d 3000 	strb.w	r3, [sp]
   d481c:	4b0b      	ldr	r3, [pc, #44]	; (d484c <_Z9sendEventv+0x78>)
   d481e:	480c      	ldr	r0, [pc, #48]	; (d4850 <_Z9sendEventv+0x7c>)
   d4820:	781b      	ldrb	r3, [r3, #0]
   d4822:	aa08      	add	r2, sp, #32
   d4824:	f7ff fe37 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4828:	4b0a      	ldr	r3, [pc, #40]	; (d4854 <_Z9sendEventv+0x80>)
   d482a:	2201      	movs	r2, #1
   d482c:	701a      	strb	r2, [r3, #0]
}
   d482e:	b049      	add	sp, #292	; 0x124
   d4830:	f85d fb04 	ldr.w	pc, [sp], #4
   d4834:	2003e55c 	.word	0x2003e55c
   d4838:	2003e4b8 	.word	0x2003e4b8
   d483c:	2003e128 	.word	0x2003e128
   d4840:	000dc583 	.word	0x000dc583
   d4844:	2003e45d 	.word	0x2003e45d
   d4848:	000dc609 	.word	0x000dc609
   d484c:	2003e45c 	.word	0x2003e45c
   d4850:	2003e514 	.word	0x2003e514
   d4854:	2003e4e3 	.word	0x2003e4e3

000d4858 <_Z16isItSafeToChargev>:
{         
   d4858:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);                                 
   d485a:	2101      	movs	r1, #1
   d485c:	a801      	add	r0, sp, #4
   d485e:	f004 f8aa 	bl	d89b6 <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4862:	4b0b      	ldr	r3, [pc, #44]	; (d4890 <_Z16isItSafeToChargev+0x38>)
   d4864:	68db      	ldr	r3, [r3, #12]
   d4866:	3b24      	subs	r3, #36	; 0x24
   d4868:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d486a:	a801      	add	r0, sp, #4
   d486c:	f04f 0401 	mov.w	r4, #1
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4870:	d90a      	bls.n	d4888 <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4872:	f004 f933 	bl	d8adc <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d4876:	4b07      	ldr	r3, [pc, #28]	; (d4894 <_Z16isItSafeToChargev+0x3c>)
   d4878:	731c      	strb	r4, [r3, #12]
    return false;
   d487a:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d487c:	a801      	add	r0, sp, #4
   d487e:	f004 f8a9 	bl	d89d4 <_ZN4PMICD1Ev>
}
   d4882:	4620      	mov	r0, r4
   d4884:	b002      	add	sp, #8
   d4886:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                                            // It is safe to charge the battery
   d4888:	f004 f911 	bl	d8aae <_ZN4PMIC14enableChargingEv>
    return true;
   d488c:	e7f6      	b.n	d487c <_Z16isItSafeToChargev+0x24>
   d488e:	bf00      	nop
   d4890:	2003e4b8 	.word	0x2003e4b8
   d4894:	2003e55c 	.word	0x2003e55c

000d4898 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d4898:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d489a:	4d19      	ldr	r5, [pc, #100]	; (d4900 <_Z17getSignalStrengthv+0x68>)
   d489c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d489e:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d48a0:	ac04      	add	r4, sp, #16
   d48a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48a8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d48ac:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d48b0:	4914      	ldr	r1, [pc, #80]	; (d4904 <_Z17getSignalStrengthv+0x6c>)
   d48b2:	a80e      	add	r0, sp, #56	; 0x38
   d48b4:	f003 f9a8 	bl	d7c08 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d48b8:	a80e      	add	r0, sp, #56	; 0x38
   d48ba:	f003 f9f8 	bl	d7cae <_ZNK14CellularSignal19getAccessTechnologyEv>
   d48be:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d48c0:	a80e      	add	r0, sp, #56	; 0x38
   d48c2:	f003 f9fd 	bl	d7cc0 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d48c6:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d48c8:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d48cc:	f003 fa28 	bl	d7d20 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d48d0:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d48d2:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d48d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d48da:	f005 f9c1 	bl	d9c60 <__aeabi_f2d>
   d48de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d48e2:	4628      	mov	r0, r5
   d48e4:	f005 f9bc 	bl	d9c60 <__aeabi_f2d>
   d48e8:	e9cd 0100 	strd	r0, r1, [sp]
   d48ec:	4a06      	ldr	r2, [pc, #24]	; (d4908 <_Z17getSignalStrengthv+0x70>)
   d48ee:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d48f2:	4806      	ldr	r0, [pc, #24]	; (d490c <_Z17getSignalStrengthv+0x74>)
   d48f4:	2140      	movs	r1, #64	; 0x40
   d48f6:	f003 f8af 	bl	d7a58 <snprintf>
}
   d48fa:	b019      	add	sp, #100	; 0x64
   d48fc:	bd30      	pop	{r4, r5, pc}
   d48fe:	bf00      	nop
   d4900:	000dc9dc 	.word	0x000dc9dc
   d4904:	2003e5d0 	.word	0x2003e5d0
   d4908:	000dc626 	.word	0x000dc626
   d490c:	2003e40c 	.word	0x2003e40c

000d4910 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d4910:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d4912:	200f      	movs	r0, #15
   d4914:	f004 ff9b 	bl	d984e <analogRead>
  if (reading < 400) {                                                // This ocrresponds to 0 degrees - less than this and we should take another reading to be sure
   d4918:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d491c:	da05      	bge.n	d492a <_Z14getTemperaturev+0x1a>
    delay(50);
   d491e:	2032      	movs	r0, #50	; 0x32
   d4920:	f003 f8ee 	bl	d7b00 <delay>
    reading = analogRead(tmp36Pin);
   d4924:	200f      	movs	r0, #15
   d4926:	f004 ff92 	bl	d984e <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d492a:	f005 f987 	bl	d9c3c <__aeabi_i2d>
   d492e:	a320      	add	r3, pc, #128	; (adr r3, d49b0 <_Z14getTemperaturev+0xa0>)
   d4930:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4934:	f005 f9ec 	bl	d9d10 <__aeabi_dmul>
   d4938:	f005 fce2 	bl	da300 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d493c:	eddf 7a14 	vldr	s15, [pc, #80]	; d4990 <_Z14getTemperaturev+0x80>
   d4940:	ee07 0a10 	vmov	s14, r0
   d4944:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4948:	ee17 0a90 	vmov	r0, s15
   d494c:	f005 f988 	bl	d9c60 <__aeabi_f2d>
   d4950:	4b10      	ldr	r3, [pc, #64]	; (d4994 <_Z14getTemperaturev+0x84>)
   d4952:	2200      	movs	r2, #0
   d4954:	f005 f824 	bl	d99a0 <__aeabi_dsub>
   d4958:	4b0f      	ldr	r3, [pc, #60]	; (d4998 <_Z14getTemperaturev+0x88>)
   d495a:	2200      	movs	r2, #0
   d495c:	f005 f9d8 	bl	d9d10 <__aeabi_dmul>
   d4960:	f005 fc86 	bl	da270 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d4964:	f005 f96a 	bl	d9c3c <__aeabi_i2d>
   d4968:	4b0c      	ldr	r3, [pc, #48]	; (d499c <_Z14getTemperaturev+0x8c>)
   d496a:	2200      	movs	r2, #0
   d496c:	f005 f9d0 	bl	d9d10 <__aeabi_dmul>
   d4970:	4b0b      	ldr	r3, [pc, #44]	; (d49a0 <_Z14getTemperaturev+0x90>)
   d4972:	2200      	movs	r2, #0
   d4974:	f005 faf6 	bl	d9f64 <__aeabi_ddiv>
   d4978:	4b0a      	ldr	r3, [pc, #40]	; (d49a4 <_Z14getTemperaturev+0x94>)
   d497a:	2200      	movs	r2, #0
   d497c:	f005 f812 	bl	d99a4 <__adddf3>
   d4980:	f005 fc76 	bl	da270 <__aeabi_d2iz>
   d4984:	4b08      	ldr	r3, [pc, #32]	; (d49a8 <_Z14getTemperaturev+0x98>)
   d4986:	60d8      	str	r0, [r3, #12]
  currentCountsWriteNeeded=true;
   d4988:	4b08      	ldr	r3, [pc, #32]	; (d49ac <_Z14getTemperaturev+0x9c>)
   d498a:	2201      	movs	r2, #1
   d498c:	701a      	strb	r2, [r3, #0]
}
   d498e:	bd08      	pop	{r3, pc}
   d4990:	39800000 	.word	0x39800000
   d4994:	3fe00000 	.word	0x3fe00000
   d4998:	40590000 	.word	0x40590000
   d499c:	40220000 	.word	0x40220000
   d49a0:	40140000 	.word	0x40140000
   d49a4:	40400000 	.word	0x40400000
   d49a8:	2003e4b8 	.word	0x2003e4b8
   d49ac:	2003e4d8 	.word	0x2003e4d8
   d49b0:	66666666 	.word	0x66666666
   d49b4:	400a6666 	.word	0x400a6666

000d49b8 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d49b8:	b500      	push	{lr}
   d49ba:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d49bc:	4668      	mov	r0, sp
   d49be:	f7ff fcb5 	bl	d432c <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d49c2:	a808      	add	r0, sp, #32
   d49c4:	f7ff fcb2 	bl	d432c <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d49c8:	2100      	movs	r1, #0
   d49ca:	a808      	add	r0, sp, #32
   d49cc:	f002 ff36 	bl	d783c <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d49d0:	4b13      	ldr	r3, [pc, #76]	; (d4a20 <_Z14setPowerConfigv+0x68>)
   d49d2:	7959      	ldrb	r1, [r3, #5]
   d49d4:	b1a1      	cbz	r1, d4a00 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d49d6:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d49da:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d49de:	4b11      	ldr	r3, [pc, #68]	; (d4a24 <_Z14setPowerConfigv+0x6c>)
   d49e0:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d49e2:	f241 0370 	movw	r3, #4208	; 0x1070
   d49e6:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d49ea:	9b00      	ldr	r3, [sp, #0]
   d49ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d49f0:	9300      	str	r3, [sp, #0]
   d49f2:	2100      	movs	r1, #0
   d49f4:	4668      	mov	r0, sp
   d49f6:	f002 ff21 	bl	d783c <system_power_management_set_config>
}
   d49fa:	b011      	add	sp, #68	; 0x44
   d49fc:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d4a00:	f241 0370 	movw	r3, #4208	; 0x1070
   d4a04:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4a08:	4b07      	ldr	r3, [pc, #28]	; (d4a28 <_Z14setPowerConfigv+0x70>)
   d4a0a:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4a0c:	f241 0310 	movw	r3, #4112	; 0x1010
   d4a10:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d4a14:	9b00      	ldr	r3, [sp, #0]
   d4a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4a1a:	9300      	str	r3, [sp, #0]
   d4a1c:	e7ea      	b.n	d49f4 <_Z14setPowerConfigv+0x3c>
   d4a1e:	bf00      	nop
   d4a20:	2003e55c 	.word	0x2003e55c
   d4a24:	04000384 	.word	0x04000384
   d4a28:	03840384 	.word	0x03840384

000d4a2c <_Z12setSolarMode6String>:
{
   d4a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4a2e:	491b      	ldr	r1, [pc, #108]	; (d4a9c <_Z12setSolarMode6String+0x70>)
   d4a30:	4605      	mov	r5, r0
   d4a32:	f004 f95e 	bl	d8cf2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4a36:	4604      	mov	r4, r0
   d4a38:	b1c0      	cbz	r0, d4a6c <_Z12setSolarMode6String+0x40>
    sysStatus.solarPowerMode = true;
   d4a3a:	4d19      	ldr	r5, [pc, #100]	; (d4aa0 <_Z12setSolarMode6String+0x74>)
   d4a3c:	2401      	movs	r4, #1
   d4a3e:	716c      	strb	r4, [r5, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4a40:	f7ff ffba 	bl	d49b8 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4a44:	4b17      	ldr	r3, [pc, #92]	; (d4aa4 <_Z12setSolarMode6String+0x78>)
   d4a46:	701c      	strb	r4, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4a48:	78eb      	ldrb	r3, [r5, #3]
   d4a4a:	b913      	cbnz	r3, d4a52 <_Z12setSolarMode6String+0x26>
    return 1;
   d4a4c:	2001      	movs	r0, #1
}
   d4a4e:	b003      	add	sp, #12
   d4a50:	bd30      	pop	{r4, r5, pc}
   d4a52:	4b15      	ldr	r3, [pc, #84]	; (d4aa8 <_Z12setSolarMode6String+0x7c>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4a54:	4a15      	ldr	r2, [pc, #84]	; (d4aac <_Z12setSolarMode6String+0x80>)
   d4a56:	781b      	ldrb	r3, [r3, #0]
   d4a58:	f88d 3000 	strb.w	r3, [sp]
   d4a5c:	4b14      	ldr	r3, [pc, #80]	; (d4ab0 <_Z12setSolarMode6String+0x84>)
   d4a5e:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4a60:	4914      	ldr	r1, [pc, #80]	; (d4ab4 <_Z12setSolarMode6String+0x88>)
   d4a62:	4815      	ldr	r0, [pc, #84]	; (d4ab8 <_Z12setSolarMode6String+0x8c>)
   d4a64:	f7ff fd17 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4a68:	4620      	mov	r0, r4
   d4a6a:	e7f0      	b.n	d4a4e <_Z12setSolarMode6String+0x22>
   d4a6c:	4913      	ldr	r1, [pc, #76]	; (d4abc <_Z12setSolarMode6String+0x90>)
   d4a6e:	4628      	mov	r0, r5
   d4a70:	f004 f93f 	bl	d8cf2 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4a74:	2800      	cmp	r0, #0
   d4a76:	d0ea      	beq.n	d4a4e <_Z12setSolarMode6String+0x22>
    sysStatus.solarPowerMode = false;
   d4a78:	4d09      	ldr	r5, [pc, #36]	; (d4aa0 <_Z12setSolarMode6String+0x74>)
    systemStatusWriteNeeded=true;
   d4a7a:	4b0a      	ldr	r3, [pc, #40]	; (d4aa4 <_Z12setSolarMode6String+0x78>)
    sysStatus.solarPowerMode = false;
   d4a7c:	716c      	strb	r4, [r5, #5]
    systemStatusWriteNeeded=true;
   d4a7e:	2401      	movs	r4, #1
   d4a80:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4a82:	f7ff ff99 	bl	d49b8 <_Z14setPowerConfigv>
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4a86:	78eb      	ldrb	r3, [r5, #3]
   d4a88:	2b00      	cmp	r3, #0
   d4a8a:	d0df      	beq.n	d4a4c <_Z12setSolarMode6String+0x20>
   d4a8c:	4b06      	ldr	r3, [pc, #24]	; (d4aa8 <_Z12setSolarMode6String+0x7c>)
   d4a8e:	4a0c      	ldr	r2, [pc, #48]	; (d4ac0 <_Z12setSolarMode6String+0x94>)
   d4a90:	781b      	ldrb	r3, [r3, #0]
   d4a92:	f88d 3000 	strb.w	r3, [sp]
   d4a96:	4b06      	ldr	r3, [pc, #24]	; (d4ab0 <_Z12setSolarMode6String+0x84>)
   d4a98:	781b      	ldrb	r3, [r3, #0]
   d4a9a:	e7e1      	b.n	d4a60 <_Z12setSolarMode6String+0x34>
   d4a9c:	000dc480 	.word	0x000dc480
   d4aa0:	2003e55c 	.word	0x2003e55c
   d4aa4:	2003e58c 	.word	0x2003e58c
   d4aa8:	2003e45d 	.word	0x2003e45d
   d4aac:	000dc63f 	.word	0x000dc63f
   d4ab0:	2003e45c 	.word	0x2003e45c
   d4ab4:	000dc66c 	.word	0x000dc66c
   d4ab8:	2003e514 	.word	0x2003e514
   d4abc:	000dc690 	.word	0x000dc690
   d4ac0:	000dc656 	.word	0x000dc656

000d4ac4 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4ac4:	b570      	push	{r4, r5, r6, lr}
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d4ac6:	4b1a      	ldr	r3, [pc, #104]	; (d4b30 <_Z18loadSystemDefaultsv+0x6c>)
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d4ac8:	4c1a      	ldr	r4, [pc, #104]	; (d4b34 <_Z18loadSystemDefaultsv+0x70>)
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d4aca:	2201      	movs	r2, #1
   d4acc:	701a      	strb	r2, [r3, #0]
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d4ace:	78e3      	ldrb	r3, [r4, #3]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4ad0:	b086      	sub	sp, #24
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d4ad2:	b153      	cbz	r3, d4aea <_Z18loadSystemDefaultsv+0x26>
   d4ad4:	4b18      	ldr	r3, [pc, #96]	; (d4b38 <_Z18loadSystemDefaultsv+0x74>)
   d4ad6:	4a19      	ldr	r2, [pc, #100]	; (d4b3c <_Z18loadSystemDefaultsv+0x78>)
   d4ad8:	781b      	ldrb	r3, [r3, #0]
   d4ada:	f88d 3000 	strb.w	r3, [sp]
   d4ade:	4b18      	ldr	r3, [pc, #96]	; (d4b40 <_Z18loadSystemDefaultsv+0x7c>)
   d4ae0:	4918      	ldr	r1, [pc, #96]	; (d4b44 <_Z18loadSystemDefaultsv+0x80>)
   d4ae2:	781b      	ldrb	r3, [r3, #0]
   d4ae4:	4818      	ldr	r0, [pc, #96]	; (d4b48 <_Z18loadSystemDefaultsv+0x84>)
   d4ae6:	f7ff fcd6 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4aea:	2500      	movs	r5, #0
  setLowPowerMode("1");
   d4aec:	4917      	ldr	r1, [pc, #92]	; (d4b4c <_Z18loadSystemDefaultsv+0x88>)
  sysStatus.verboseMode = false;
   d4aee:	7125      	strb	r5, [r4, #4]
  sysStatus.structuresVersion = 1;
   d4af0:	2601      	movs	r6, #1
  setLowPowerMode("1");
   d4af2:	a802      	add	r0, sp, #8
  sysStatus.structuresVersion = 1;
   d4af4:	7026      	strb	r6, [r4, #0]
  sysStatus.clockSet = false;
   d4af6:	70a5      	strb	r5, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d4af8:	71e5      	strb	r5, [r4, #7]
  setLowPowerMode("1");
   d4afa:	f004 f8cc 	bl	d8c96 <_ZN6StringC1EPKc>
   d4afe:	a802      	add	r0, sp, #8
   d4b00:	f7ff fdb8 	bl	d4674 <_Z15setLowPowerMode6String>
   d4b04:	a802      	add	r0, sp, #8
   d4b06:	f004 f87b 	bl	d8c00 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d4b0a:	4b11      	ldr	r3, [pc, #68]	; (d4b50 <_Z18loadSystemDefaultsv+0x8c>)
   d4b0c:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d4b0e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d4b12:	61a3      	str	r3, [r4, #24]
  sysStatus.openTime = 6;
   d4b14:	f241 5306 	movw	r3, #5382	; 0x1506
   d4b18:	83a3      	strh	r3, [r4, #28]
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4b1a:	4a06      	ldr	r2, [pc, #24]	; (d4b34 <_Z18loadSystemDefaultsv+0x70>)
   d4b1c:	480d      	ldr	r0, [pc, #52]	; (d4b54 <_Z18loadSystemDefaultsv+0x90>)
  sysStatus.solarPowerMode = true;  
   d4b1e:	7166      	strb	r6, [r4, #5]
   d4b20:	2330      	movs	r3, #48	; 0x30
   d4b22:	4631      	mov	r1, r6
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d4b24:	8525      	strh	r5, [r4, #40]	; 0x28
   d4b26:	f002 f884 	bl	d6c32 <_ZN6MB85RC9writeDataEjPKhj>
}
   d4b2a:	b006      	add	sp, #24
   d4b2c:	bd70      	pop	{r4, r5, r6, pc}
   d4b2e:	bf00      	nop
   d4b30:	2003e511 	.word	0x2003e511
   d4b34:	2003e55c 	.word	0x2003e55c
   d4b38:	2003e45d 	.word	0x2003e45d
   d4b3c:	000dc671 	.word	0x000dc671
   d4b40:	2003e45c 	.word	0x2003e45c
   d4b44:	000dc66c 	.word	0x000dc66c
   d4b48:	2003e514 	.word	0x2003e514
   d4b4c:	000dc480 	.word	0x000dc480
   d4b50:	c0a00000 	.word	0xc0a00000
   d4b54:	2003e4e4 	.word	0x2003e4e4

000d4b58 <_Z17checkSystemValuesv>:
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4b58:	4b24      	ldr	r3, [pc, #144]	; (d4bec <_Z17checkSystemValuesv+0x94>)
   d4b5a:	691a      	ldr	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4b5c:	edd3 7a05 	vldr	s15, [r3, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4b60:	2aff      	cmp	r2, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4b62:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4b66:	bf88      	it	hi
   d4b68:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4b6e:	bf88      	it	hi
   d4b70:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b76:	d406      	bmi.n	d4b86 <_Z17checkSystemValuesv+0x2e>
   d4b78:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b84:	dd01      	ble.n	d4b8a <_Z17checkSystemValuesv+0x32>
   d4b86:	4a1a      	ldr	r2, [pc, #104]	; (d4bf0 <_Z17checkSystemValuesv+0x98>)
   d4b88:	615a      	str	r2, [r3, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4b8a:	edd3 7a06 	vldr	s15, [r3, #24]
   d4b8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b96:	d406      	bmi.n	d4ba6 <_Z17checkSystemValuesv+0x4e>
   d4b98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ba4:	dd02      	ble.n	d4bac <_Z17checkSystemValuesv+0x54>
   d4ba6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d4baa:	619a      	str	r2, [r3, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d4bac:	7f1a      	ldrb	r2, [r3, #28]
   d4bae:	2a0c      	cmp	r2, #12
   d4bb0:	bf84      	itt	hi
   d4bb2:	2200      	movhi	r2, #0
   d4bb4:	771a      	strbhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4bb6:	7f5a      	ldrb	r2, [r3, #29]
   d4bb8:	3a0c      	subs	r2, #12
   d4bba:	2a0c      	cmp	r2, #12
   d4bbc:	bf84      	itt	hi
   d4bbe:	2218      	movhi	r2, #24
   d4bc0:	775a      	strbhi	r2, [r3, #29]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4bc2:	4a0c      	ldr	r2, [pc, #48]	; (d4bf4 <_Z17checkSystemValuesv+0x9c>)
   d4bc4:	6811      	ldr	r1, [r2, #0]
   d4bc6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   d4bc8:	428a      	cmp	r2, r1
   d4bca:	bf84      	itt	hi
   d4bcc:	2200      	movhi	r2, #0
   d4bce:	851a      	strhhi	r2, [r3, #40]	; 0x28
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4bd0:	2201      	movs	r2, #1
   d4bd2:	715a      	strb	r2, [r3, #5]
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4bd4:	4b08      	ldr	r3, [pc, #32]	; (d4bf8 <_Z17checkSystemValuesv+0xa0>)
   d4bd6:	8b18      	ldrh	r0, [r3, #24]
   d4bd8:	4281      	cmp	r1, r0
    current.maxConnectTime = 0;
   d4bda:	bf3f      	itttt	cc
   d4bdc:	2100      	movcc	r1, #0
   d4bde:	8319      	strhcc	r1, [r3, #24]
    currentCountsWriteNeeded = true;
   d4be0:	4b06      	ldrcc	r3, [pc, #24]	; (d4bfc <_Z17checkSystemValuesv+0xa4>)
   d4be2:	701a      	strbcc	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   d4be4:	4b06      	ldr	r3, [pc, #24]	; (d4c00 <_Z17checkSystemValuesv+0xa8>)
   d4be6:	2201      	movs	r2, #1
   d4be8:	701a      	strb	r2, [r3, #0]
}
   d4bea:	4770      	bx	lr
   d4bec:	2003e55c 	.word	0x2003e55c
   d4bf0:	c0a00000 	.word	0xc0a00000
   d4bf4:	2003e14c 	.word	0x2003e14c
   d4bf8:	2003e4b8 	.word	0x2003e4b8
   d4bfc:	2003e4d8 	.word	0x2003e4d8
   d4c00:	2003e58c 	.word	0x2003e58c

000d4c04 <_Z21makeUpParkHourStringsv>:
void makeUpParkHourStrings() {
   d4c04:	b510      	push	{r4, lr}
  if (sysStatus.openTime == 0 && sysStatus.closeTime == 24) {
   d4c06:	4c0e      	ldr	r4, [pc, #56]	; (d4c40 <_Z21makeUpParkHourStringsv+0x3c>)
   d4c08:	8ba3      	ldrh	r3, [r4, #28]
   d4c0a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4c0e:	d109      	bne.n	d4c24 <_Z21makeUpParkHourStringsv+0x20>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   d4c10:	490c      	ldr	r1, [pc, #48]	; (d4c44 <_Z21makeUpParkHourStringsv+0x40>)
   d4c12:	480d      	ldr	r0, [pc, #52]	; (d4c48 <_Z21makeUpParkHourStringsv+0x44>)
   d4c14:	f005 fcbe 	bl	da594 <strcpy>
}
   d4c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   d4c1c:	4909      	ldr	r1, [pc, #36]	; (d4c44 <_Z21makeUpParkHourStringsv+0x40>)
   d4c1e:	480b      	ldr	r0, [pc, #44]	; (d4c4c <_Z21makeUpParkHourStringsv+0x48>)
   d4c20:	f005 bcb8 	b.w	da594 <strcpy>
  snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.openTime);
   d4c24:	7f23      	ldrb	r3, [r4, #28]
   d4c26:	4a0a      	ldr	r2, [pc, #40]	; (d4c50 <_Z21makeUpParkHourStringsv+0x4c>)
   d4c28:	4807      	ldr	r0, [pc, #28]	; (d4c48 <_Z21makeUpParkHourStringsv+0x44>)
   d4c2a:	2108      	movs	r1, #8
   d4c2c:	f002 ff14 	bl	d7a58 <snprintf>
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4c30:	7f63      	ldrb	r3, [r4, #29]
   d4c32:	4a07      	ldr	r2, [pc, #28]	; (d4c50 <_Z21makeUpParkHourStringsv+0x4c>)
   d4c34:	4805      	ldr	r0, [pc, #20]	; (d4c4c <_Z21makeUpParkHourStringsv+0x48>)
}
   d4c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4c3a:	2108      	movs	r1, #8
   d4c3c:	f002 bf0c 	b.w	d7a58 <snprintf>
   d4c40:	2003e55c 	.word	0x2003e55c
   d4c44:	000dc689 	.word	0x000dc689
   d4c48:	2003e156 	.word	0x2003e156
   d4c4c:	2003e144 	.word	0x2003e144
   d4c50:	000dc68c 	.word	0x000dc68c

000d4c54 <_Z11setOpenTime6String>:
{
   d4c54:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4c56:	220a      	movs	r2, #10
   d4c58:	6800      	ldr	r0, [r0, #0]
   d4c5a:	a901      	add	r1, sp, #4
   d4c5c:	f006 fbe6 	bl	db42c <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4c60:	2817      	cmp	r0, #23
   d4c62:	d80c      	bhi.n	d4c7e <_Z11setOpenTime6String+0x2a>
  sysStatus.openTime = tempTime;
   d4c64:	4c07      	ldr	r4, [pc, #28]	; (d4c84 <_Z11setOpenTime6String+0x30>)
   d4c66:	7720      	strb	r0, [r4, #28]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4c68:	f7ff ffcc 	bl	d4c04 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4c6c:	4b06      	ldr	r3, [pc, #24]	; (d4c88 <_Z11setOpenTime6String+0x34>)
   d4c6e:	2001      	movs	r0, #1
   d4c70:	7018      	strb	r0, [r3, #0]
  if (sysStatus.connectedStatus) {
   d4c72:	78e3      	ldrb	r3, [r4, #3]
   d4c74:	b10b      	cbz	r3, d4c7a <_Z11setOpenTime6String+0x26>
   d4c76:	f7ff fcd7 	bl	d4628 <_Z11setOpenTime6String.part.0>
}
   d4c7a:	b002      	add	sp, #8
   d4c7c:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4c7e:	2000      	movs	r0, #0
   d4c80:	e7fb      	b.n	d4c7a <_Z11setOpenTime6String+0x26>
   d4c82:	bf00      	nop
   d4c84:	2003e55c 	.word	0x2003e55c
   d4c88:	2003e58c 	.word	0x2003e58c

000d4c8c <_Z12setCloseTime6String>:
{
   d4c8c:	b530      	push	{r4, r5, lr}
   d4c8e:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4c90:	6800      	ldr	r0, [r0, #0]
   d4c92:	220a      	movs	r2, #10
   d4c94:	a903      	add	r1, sp, #12
   d4c96:	f006 fbc9 	bl	db42c <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4c9a:	2818      	cmp	r0, #24
   d4c9c:	d81c      	bhi.n	d4cd8 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
   d4c9e:	4d10      	ldr	r5, [pc, #64]	; (d4ce0 <_Z12setCloseTime6String+0x54>)
   d4ca0:	7768      	strb	r0, [r5, #29]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4ca2:	f7ff ffaf 	bl	d4c04 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4ca6:	4b0f      	ldr	r3, [pc, #60]	; (d4ce4 <_Z12setCloseTime6String+0x58>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4ca8:	4a0f      	ldr	r2, [pc, #60]	; (d4ce8 <_Z12setCloseTime6String+0x5c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4caa:	2401      	movs	r4, #1
   d4cac:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4cae:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4cb2:	7f6b      	ldrb	r3, [r5, #29]
   d4cb4:	a804      	add	r0, sp, #16
   d4cb6:	f002 fecf 	bl	d7a58 <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4cba:	78eb      	ldrb	r3, [r5, #3]
   d4cbc:	b153      	cbz	r3, d4cd4 <_Z12setCloseTime6String+0x48>
   d4cbe:	4b0b      	ldr	r3, [pc, #44]	; (d4cec <_Z12setCloseTime6String+0x60>)
   d4cc0:	490b      	ldr	r1, [pc, #44]	; (d4cf0 <_Z12setCloseTime6String+0x64>)
   d4cc2:	781b      	ldrb	r3, [r3, #0]
   d4cc4:	f88d 3000 	strb.w	r3, [sp]
   d4cc8:	4b0a      	ldr	r3, [pc, #40]	; (d4cf4 <_Z12setCloseTime6String+0x68>)
   d4cca:	480b      	ldr	r0, [pc, #44]	; (d4cf8 <_Z12setCloseTime6String+0x6c>)
   d4ccc:	781b      	ldrb	r3, [r3, #0]
   d4cce:	aa04      	add	r2, sp, #16
   d4cd0:	f7ff fbe1 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	e000      	b.n	d4cda <_Z12setCloseTime6String+0x4e>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4cd8:	2000      	movs	r0, #0
}
   d4cda:	b045      	add	sp, #276	; 0x114
   d4cdc:	bd30      	pop	{r4, r5, pc}
   d4cde:	bf00      	nop
   d4ce0:	2003e55c 	.word	0x2003e55c
   d4ce4:	2003e58c 	.word	0x2003e58c
   d4ce8:	000dc692 	.word	0x000dc692
   d4cec:	2003e45d 	.word	0x2003e45d
   d4cf0:	000dc8bf 	.word	0x000dc8bf
   d4cf4:	2003e45c 	.word	0x2003e45c
   d4cf8:	2003e514 	.word	0x2003e514

000d4cfc <_Z22disconnectFromParticlev>:
{
   d4cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d00:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d4d02:	2400      	movs	r4, #0
  Particle.disconnect();
   d4d04:	a801      	add	r0, sp, #4
   d4d06:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4d0a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4d0e:	f003 f8d8 	bl	d7ec2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d4d12:	4620      	mov	r0, r4
   d4d14:	f002 fbc4 	bl	d74a0 <hal_timer_millis>
        while (_while() && !_condition()) {
   d4d18:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d4d1c:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d4d1e:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4d22:	2000      	movs	r0, #0
   d4d24:	f002 fbbc 	bl	d74a0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4d28:	1b46      	subs	r6, r0, r5
   d4d2a:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4d2e:	45b9      	cmp	r9, r7
   d4d30:	bf08      	it	eq
   d4d32:	45b0      	cmpeq	r8, r6
   d4d34:	d305      	bcc.n	d4d42 <_Z22disconnectFromParticlev+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d36:	f002 fdbf 	bl	d78b8 <spark_cloud_flag_connected>
   d4d3a:	b110      	cbz	r0, d4d42 <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d4d3c:	f002 fdac 	bl	d7898 <spark_process>
        while (_while() && !_condition()) {
   d4d40:	e7ef      	b.n	d4d22 <_Z22disconnectFromParticlev+0x26>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d42:	4c0a      	ldr	r4, [pc, #40]	; (d4d6c <_Z22disconnectFromParticlev+0x70>)
   d4d44:	f002 fdb8 	bl	d78b8 <spark_cloud_flag_connected>
   d4d48:	6860      	ldr	r0, [r4, #4]
   d4d4a:	2200      	movs	r2, #0
   d4d4c:	2102      	movs	r1, #2
   d4d4e:	f002 fe13 	bl	d7978 <network_disconnect>
  Cellular.off();                                                 // Turn off the cellular modem
   d4d52:	4620      	mov	r0, r4
   d4d54:	f7ff faa6 	bl	d42a4 <_ZN5spark13CellularClass3offEv>
  sysStatus.connectedStatus = false;
   d4d58:	4b05      	ldr	r3, [pc, #20]	; (d4d70 <_Z22disconnectFromParticlev+0x74>)
   d4d5a:	2200      	movs	r2, #0
   d4d5c:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4d5e:	4b05      	ldr	r3, [pc, #20]	; (d4d74 <_Z22disconnectFromParticlev+0x78>)
   d4d60:	2001      	movs	r0, #1
   d4d62:	7018      	strb	r0, [r3, #0]
}
   d4d64:	b005      	add	sp, #20
   d4d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4d6a:	bf00      	nop
   d4d6c:	2003e5d0 	.word	0x2003e5d0
   d4d70:	2003e55c 	.word	0x2003e55c
   d4d74:	2003e58c 	.word	0x2003e58c

000d4d78 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d4d78:	b508      	push	{r3, lr}
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d4d7a:	f004 faf0 	bl	d935e <_ZN9TimeClass3nowEv>
   d4d7e:	4b07      	ldr	r3, [pc, #28]	; (d4d9c <_Z15resetEverythingv+0x24>)
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4d80:	4907      	ldr	r1, [pc, #28]	; (d4da0 <_Z15resetEverythingv+0x28>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d4d82:	6018      	str	r0, [r3, #0]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4d84:	2200      	movs	r2, #0
   d4d86:	611a      	str	r2, [r3, #16]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d4d88:	831a      	strh	r2, [r3, #24]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4d8a:	610a      	str	r2, [r1, #16]
  current.minBatteryLevel = 100;
   d4d8c:	2264      	movs	r2, #100	; 0x64
   d4d8e:	61da      	str	r2, [r3, #28]
  currentCountsWriteNeeded = true;
   d4d90:	4a04      	ldr	r2, [pc, #16]	; (d4da4 <_Z15resetEverythingv+0x2c>)
   d4d92:	2301      	movs	r3, #1
   d4d94:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d4d96:	4a04      	ldr	r2, [pc, #16]	; (d4da8 <_Z15resetEverythingv+0x30>)
   d4d98:	7013      	strb	r3, [r2, #0]
}
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	2003e4b8 	.word	0x2003e4b8
   d4da0:	2003e55c 	.word	0x2003e55c
   d4da4:	2003e4d8 	.word	0x2003e4d8
   d4da8:	2003e58c 	.word	0x2003e58c

000d4dac <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition over serial and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d4dac:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4dae:	4c15      	ldr	r4, [pc, #84]	; (d4e04 <_Z22publishStateTransitionv+0x58>)
   d4db0:	4d15      	ldr	r5, [pc, #84]	; (d4e08 <_Z22publishStateTransitionv+0x5c>)
   d4db2:	7822      	ldrb	r2, [r4, #0]
   d4db4:	4915      	ldr	r1, [pc, #84]	; (d4e0c <_Z22publishStateTransitionv+0x60>)
   d4db6:	eb02 1302 	add.w	r3, r2, r2, lsl #4
   d4dba:	782a      	ldrb	r2, [r5, #0]
{
   d4dbc:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4dbe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
   d4dc2:	440a      	add	r2, r1
   d4dc4:	440b      	add	r3, r1
   d4dc6:	9200      	str	r2, [sp, #0]
   d4dc8:	2128      	movs	r1, #40	; 0x28
   d4dca:	4a11      	ldr	r2, [pc, #68]	; (d4e10 <_Z22publishStateTransitionv+0x64>)
   d4dcc:	a802      	add	r0, sp, #8
   d4dce:	f002 fe43 	bl	d7a58 <snprintf>
  oldState = state;
   d4dd2:	782b      	ldrb	r3, [r5, #0]
   d4dd4:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) {
   d4dd6:	4b0f      	ldr	r3, [pc, #60]	; (d4e14 <_Z22publishStateTransitionv+0x68>)
   d4dd8:	791a      	ldrb	r2, [r3, #4]
   d4dda:	b18a      	cbz	r2, d4e00 <_Z22publishStateTransitionv+0x54>
    if (sysStatus.connectedStatus) publishQueue.publish("State Transition",stateTransitionString, PRIVATE, WITH_ACK);
   d4ddc:	78db      	ldrb	r3, [r3, #3]
   d4dde:	b153      	cbz	r3, d4df6 <_Z22publishStateTransitionv+0x4a>
   d4de0:	4b0d      	ldr	r3, [pc, #52]	; (d4e18 <_Z22publishStateTransitionv+0x6c>)
   d4de2:	490e      	ldr	r1, [pc, #56]	; (d4e1c <_Z22publishStateTransitionv+0x70>)
   d4de4:	781b      	ldrb	r3, [r3, #0]
   d4de6:	f88d 3000 	strb.w	r3, [sp]
   d4dea:	4b0d      	ldr	r3, [pc, #52]	; (d4e20 <_Z22publishStateTransitionv+0x74>)
   d4dec:	480d      	ldr	r0, [pc, #52]	; (d4e24 <_Z22publishStateTransitionv+0x78>)
   d4dee:	781b      	ldrb	r3, [r3, #0]
   d4df0:	aa02      	add	r2, sp, #8
   d4df2:	f7ff fb50 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    Serial.println(stateTransitionString);
   d4df6:	f004 fbdb 	bl	d95b0 <_Z16_fetch_usbserialv>
   d4dfa:	a902      	add	r1, sp, #8
   d4dfc:	f003 feba 	bl	d8b74 <_ZN5Print7printlnEPKc>
  }
}
   d4e00:	b00d      	add	sp, #52	; 0x34
   d4e02:	bd30      	pop	{r4, r5, pc}
   d4e04:	2003e510 	.word	0x2003e510
   d4e08:	2003e550 	.word	0x2003e550
   d4e0c:	2003e164 	.word	0x2003e164
   d4e10:	000dc6a9 	.word	0x000dc6a9
   d4e14:	2003e55c 	.word	0x2003e55c
   d4e18:	2003e45d 	.word	0x2003e45d
   d4e1c:	000dc6b7 	.word	0x000dc6b7
   d4e20:	2003e45c 	.word	0x2003e45c
   d4e24:	2003e514 	.word	0x2003e514

000d4e28 <_Z14fullModemResetv>:
 * @brief Fully resets modem.
 * 
 * @details Disconnects from the cloud, resets modem and SIM, and deep sleeps for 10 seconds.
 * Adapted form Rikkas7's https://github.com/rickkas7/electronsample.
 */
void fullModemReset() {  // 
   d4e28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        clearSession_(clearSession) {
   d4e2a:	2300      	movs	r3, #0
	Particle.disconnect(); 	                                         // Disconnect from the cloud
   d4e2c:	a801      	add	r0, sp, #4
   d4e2e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4e32:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4e36:	f003 f844 	bl	d7ec2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4e3a:	f002 fb21 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(sysStatus.connectedStatus && millis() - startTime < 15000) {
   d4e3e:	4d0f      	ldr	r5, [pc, #60]	; (d4e7c <_Z14fullModemResetv+0x54>)
   d4e40:	4604      	mov	r4, r0
   d4e42:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4e46:	78eb      	ldrb	r3, [r5, #3]
   d4e48:	b143      	cbz	r3, d4e5c <_Z14fullModemResetv+0x34>
   d4e4a:	f002 fb19 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
   d4e4e:	1b00      	subs	r0, r0, r4
   d4e50:	42b0      	cmp	r0, r6
   d4e52:	d803      	bhi.n	d4e5c <_Z14fullModemResetv+0x34>
		delay(100);
   d4e54:	2064      	movs	r0, #100	; 0x64
   d4e56:	f002 fe53 	bl	d7b00 <delay>
	while(sysStatus.connectedStatus && millis() - startTime < 15000) {
   d4e5a:	e7f4      	b.n	d4e46 <_Z14fullModemResetv+0x1e>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.off();
   d4e5c:	4808      	ldr	r0, [pc, #32]	; (d4e80 <_Z14fullModemResetv+0x58>)
   d4e5e:	f7ff fa21 	bl	d42a4 <_ZN5spark13CellularClass3offEv>
	delay(1000);
   d4e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4e66:	f002 fe4b 	bl	d7b00 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4e6a:	4b06      	ldr	r3, [pc, #24]	; (d4e84 <_Z14fullModemResetv+0x5c>)
   d4e6c:	220a      	movs	r2, #10
   d4e6e:	681b      	ldr	r3, [r3, #0]
   d4e70:	2101      	movs	r1, #1
   d4e72:	a801      	add	r0, sp, #4
   d4e74:	f004 f85e 	bl	d8f34 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4e78:	b004      	add	sp, #16
   d4e7a:	bd70      	pop	{r4, r5, r6, pc}
   d4e7c:	2003e55c 	.word	0x2003e55c
   d4e80:	2003e5d0 	.word	0x2003e5d0
   d4e84:	2003e458 	.word	0x2003e458

000d4e88 <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details Syncs time with remote service and sets low power mode. Called from Reporting State ONLY.
 * Clean house at the end of the day
 */
void dailyCleanup() {
   d4e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4e8c:	4b23      	ldr	r3, [pc, #140]	; (d4f1c <_Z12dailyCleanupv+0x94>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
  sysStatus.verboseMode = false;
   d4e8e:	4c24      	ldr	r4, [pc, #144]	; (d4f20 <_Z12dailyCleanupv+0x98>)
   d4e90:	781b      	ldrb	r3, [r3, #0]
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d4e92:	4a24      	ldr	r2, [pc, #144]	; (d4f24 <_Z12dailyCleanupv+0x9c>)
   d4e94:	4924      	ldr	r1, [pc, #144]	; (d4f28 <_Z12dailyCleanupv+0xa0>)
   d4e96:	4825      	ldr	r0, [pc, #148]	; (d4f2c <_Z12dailyCleanupv+0xa4>)
void dailyCleanup() {
   d4e98:	b086      	sub	sp, #24
  sysStatus.verboseMode = false;
   d4e9a:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d4e9c:	f88d 3000 	strb.w	r3, [sp]
   d4ea0:	4b23      	ldr	r3, [pc, #140]	; (d4f30 <_Z12dailyCleanupv+0xa8>)
   d4ea2:	781b      	ldrb	r3, [r3, #0]
   d4ea4:	f7ff faf7 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4ea8:	7125      	strb	r5, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4eaa:	f002 fd05 	bl	d78b8 <spark_cloud_flag_connected>
        if (!connected()) {
   d4eae:	b110      	cbz	r0, d4eb6 <_Z12dailyCleanupv+0x2e>
        return spark_sync_time(NULL);
   d4eb0:	4628      	mov	r0, r5
   d4eb2:	f002 fd21 	bl	d78f8 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d4eb6:	2000      	movs	r0, #0
   d4eb8:	f002 faf2 	bl	d74a0 <hal_timer_millis>
   d4ebc:	f04f 0a00 	mov.w	sl, #0
   d4ec0:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d4ec2:	f247 582f 	movw	r8, #29999	; 0x752f
   d4ec6:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4eca:	2000      	movs	r0, #0
   d4ecc:	f002 fae8 	bl	d74a0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4ed0:	1b46      	subs	r6, r0, r5
   d4ed2:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d4ed6:	45b9      	cmp	r9, r7
   d4ed8:	bf08      	it	eq
   d4eda:	45b0      	cmpeq	r8, r6
   d4edc:	d305      	bcc.n	d4eea <_Z12dailyCleanupv+0x62>
  Particle.syncTime();                                                 // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                // Wait for up to 30 seconds for the SyncTime to complete
   d4ede:	f7ff f9ab 	bl	d4238 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4ee2:	b910      	cbnz	r0, d4eea <_Z12dailyCleanupv+0x62>
            spark_process();
   d4ee4:	f002 fcd8 	bl	d7898 <spark_process>
        while (_while() && !_condition()) {
   d4ee8:	e7ef      	b.n	d4eca <_Z12dailyCleanupv+0x42>
   d4eea:	f7ff f9a5 	bl	d4238 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {     // If Solar or if the battery is being discharged
   d4eee:	7963      	ldrb	r3, [r4, #5]
   d4ef0:	b913      	cbnz	r3, d4ef8 <_Z12dailyCleanupv+0x70>
   d4ef2:	68a3      	ldr	r3, [r4, #8]
   d4ef4:	2b46      	cmp	r3, #70	; 0x46
   d4ef6:	dc09      	bgt.n	d4f0c <_Z12dailyCleanupv+0x84>
    setLowPowerMode("1");
   d4ef8:	490e      	ldr	r1, [pc, #56]	; (d4f34 <_Z12dailyCleanupv+0xac>)
   d4efa:	a802      	add	r0, sp, #8
   d4efc:	f003 fecb 	bl	d8c96 <_ZN6StringC1EPKc>
   d4f00:	a802      	add	r0, sp, #8
   d4f02:	f7ff fbb7 	bl	d4674 <_Z15setLowPowerMode6String>
   d4f06:	a802      	add	r0, sp, #8
   d4f08:	f003 fe7a 	bl	d8c00 <_ZN6StringD1Ev>
  }

  resetEverything();                                               // If so, we need to Zero the counts for the new day
   d4f0c:	f7ff ff34 	bl	d4d78 <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d4f10:	4b09      	ldr	r3, [pc, #36]	; (d4f38 <_Z12dailyCleanupv+0xb0>)
   d4f12:	2201      	movs	r2, #1
   d4f14:	701a      	strb	r2, [r3, #0]
   d4f16:	b006      	add	sp, #24
   d4f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f1c:	2003e45d 	.word	0x2003e45d
   d4f20:	2003e55c 	.word	0x2003e55c
   d4f24:	000dc6c8 	.word	0x000dc6c8
   d4f28:	000dc6d0 	.word	0x000dc6d0
   d4f2c:	2003e514 	.word	0x2003e514
   d4f30:	2003e45c 	.word	0x2003e45c
   d4f34:	000dc480 	.word	0x000dc480
   d4f38:	2003e58c 	.word	0x2003e58c

000d4f3c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4f3c:	b530      	push	{r4, r5, lr}
   d4f3e:	b085      	sub	sp, #20
   d4f40:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4f42:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4f44:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4f46:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4f48:	f002 fc0a 	bl	d7760 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4f4c:	b9b0      	cbnz	r0, d4f7c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4f4e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4f50:	b10c      	cbz	r4, d4f56 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4f52:	6923      	ldr	r3, [r4, #16]
   d4f54:	b923      	cbnz	r3, d4f60 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4f56:	4a0a      	ldr	r2, [pc, #40]	; (d4f80 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4f58:	2100      	movs	r1, #0
   d4f5a:	200a      	movs	r0, #10
   d4f5c:	f002 fbe8 	bl	d7730 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4f60:	2300      	movs	r3, #0
   d4f62:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4f66:	230c      	movs	r3, #12
   d4f68:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4f6c:	2304      	movs	r3, #4
   d4f6e:	9303      	str	r3, [sp, #12]
   d4f70:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4f72:	6923      	ldr	r3, [r4, #16]
   d4f74:	aa01      	add	r2, sp, #4
   d4f76:	2101      	movs	r1, #1
   d4f78:	4620      	mov	r0, r4
   d4f7a:	4798      	blx	r3
}
   d4f7c:	b005      	add	sp, #20
   d4f7e:	bd30      	pop	{r4, r5, pc}
   d4f80:	000d7471 	.word	0x000d7471

000d4f84 <_Z16takeMeasurementsv>:
{
   d4f84:	b530      	push	{r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4f86:	4b2d      	ldr	r3, [pc, #180]	; (d503c <_Z16takeMeasurementsv+0xb8>)
   d4f88:	2200      	movs	r2, #0
   d4f8a:	b08b      	sub	sp, #44	; 0x2c
   d4f8c:	6858      	ldr	r0, [r3, #4]
   d4f8e:	4611      	mov	r1, r2
   d4f90:	f002 fcfa 	bl	d7988 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4f94:	b108      	cbz	r0, d4f9a <_Z16takeMeasurementsv+0x16>
   d4f96:	f7ff fc7f 	bl	d4898 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d4f9a:	f7ff fcb9 	bl	d4910 <_Z14getTemperaturev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4f9e:	a902      	add	r1, sp, #8
   d4fa0:	2007      	movs	r0, #7
   d4fa2:	f7ff ffcb 	bl	d4f3c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
  sysStatus.batteryState = System.batteryState();                     // Call before isItSafeToCharge() as it may overwrite the context
   d4fa6:	4c26      	ldr	r4, [pc, #152]	; (d5040 <_Z16takeMeasurementsv+0xbc>)
   d4fa8:	4d26      	ldr	r5, [pc, #152]	; (d5044 <_Z16takeMeasurementsv+0xc0>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4faa:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4fac:	bfa8      	it	ge
   d4fae:	9802      	ldrge	r0, [sp, #8]
   d4fb0:	7320      	strb	r0, [r4, #12]
  if (!isItSafeToCharge()) current.alertCount++;                      // Increment the alert count
   d4fb2:	f7ff fc51 	bl	d4858 <_Z16isItSafeToChargev>
   d4fb6:	b910      	cbnz	r0, d4fbe <_Z16takeMeasurementsv+0x3a>
   d4fb8:	692b      	ldr	r3, [r5, #16]
   d4fba:	3301      	adds	r3, #1
   d4fbc:	612b      	str	r3, [r5, #16]
   d4fbe:	a902      	add	r1, sp, #8
   d4fc0:	2003      	movs	r0, #3
   d4fc2:	f7ff ffbb 	bl	d4f3c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4fc6:	2800      	cmp	r0, #0
   d4fc8:	d134      	bne.n	d5034 <_Z16takeMeasurementsv+0xb0>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4fca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d4fce:	ee07 3a90 	vmov	s15, r3
   d4fd2:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d4fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4fda:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d4fde:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d4fe0:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d4fe4:	dc09      	bgt.n	d4ffa <_Z16takeMeasurementsv+0x76>
   d4fe6:	7b23      	ldrb	r3, [r4, #12]
   d4fe8:	2b01      	cmp	r3, #1
   d4fea:	d106      	bne.n	d4ffa <_Z16takeMeasurementsv+0x76>
    System.setPowerConfiguration(SystemPowerConfiguration());         // Reset the PMIC
   d4fec:	a802      	add	r0, sp, #8
   d4fee:	f7ff f99d 	bl	d432c <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d4ff2:	2100      	movs	r1, #0
   d4ff4:	a802      	add	r0, sp, #8
   d4ff6:	f002 fc21 	bl	d783c <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) current.minBatteryLevel = sysStatus.stateOfCharge; // Keep track of lowest value for the day
   d4ffa:	68a3      	ldr	r3, [r4, #8]
   d4ffc:	69ea      	ldr	r2, [r5, #28]
   d4ffe:	4293      	cmp	r3, r2
   d5000:	bfb8      	it	lt
   d5002:	61eb      	strlt	r3, [r5, #28]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d5004:	2b1d      	cmp	r3, #29
   d5006:	bfcc      	ite	gt
   d5008:	2300      	movgt	r3, #0
   d500a:	2301      	movle	r3, #1
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d500c:	2013      	movs	r0, #19
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d500e:	71e3      	strb	r3, [r4, #7]
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d5010:	f004 fc1d 	bl	d984e <analogRead>
   d5014:	2364      	movs	r3, #100	; 0x64
   d5016:	9300      	str	r3, [sp, #0]
   d5018:	2300      	movs	r3, #0
   d501a:	4619      	mov	r1, r3
   d501c:	f640 628a 	movw	r2, #3722	; 0xe8a
   d5020:	f002 fd62 	bl	d7ae8 <_Z3mapiiiii>
  systemStatusWriteNeeded = true;
   d5024:	4a08      	ldr	r2, [pc, #32]	; (d5048 <_Z16takeMeasurementsv+0xc4>)
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d5026:	6068      	str	r0, [r5, #4]
  systemStatusWriteNeeded = true;
   d5028:	2301      	movs	r3, #1
   d502a:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d502c:	4a07      	ldr	r2, [pc, #28]	; (d504c <_Z16takeMeasurementsv+0xc8>)
   d502e:	7013      	strb	r3, [r2, #0]
}
   d5030:	b00b      	add	sp, #44	; 0x2c
   d5032:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d5034:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d5038:	e7cd      	b.n	d4fd6 <_Z16takeMeasurementsv+0x52>
   d503a:	bf00      	nop
   d503c:	2003e5d0 	.word	0x2003e5d0
   d5040:	2003e55c 	.word	0x2003e55c
   d5044:	2003e4b8 	.word	0x2003e4b8
   d5048:	2003e58c 	.word	0x2003e58c
   d504c:	2003e4d8 	.word	0x2003e4d8

000d5050 <loop>:
{
   d5050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d5054:	4ca4      	ldr	r4, [pc, #656]	; (d52e8 <loop+0x298>)
   d5056:	4ea5      	ldr	r6, [pc, #660]	; (d52ec <loop+0x29c>)
   d5058:	7823      	ldrb	r3, [r4, #0]
   d505a:	4fa5      	ldr	r7, [pc, #660]	; (d52f0 <loop+0x2a0>)
   d505c:	3b01      	subs	r3, #1
{
   d505e:	b097      	sub	sp, #92	; 0x5c
   d5060:	2b08      	cmp	r3, #8
   d5062:	f200 80af 	bhi.w	d51c4 <loop+0x174>
   d5066:	e8df f013 	tbh	[pc, r3, lsl #1]
   d506a:	02e1      	.short	0x02e1
   d506c:	01cb0009 	.word	0x01cb0009
   d5070:	016d01f9 	.word	0x016d01f9
   d5074:	02710247 	.word	0x02710247
   d5078:	004500e7 	.word	0x004500e7
    if (state != oldState) publishStateTransition();
   d507c:	4b9d      	ldr	r3, [pc, #628]	; (d52f4 <loop+0x2a4>)
   d507e:	781b      	ldrb	r3, [r3, #0]
   d5080:	2b02      	cmp	r3, #2
   d5082:	d001      	beq.n	d5088 <loop+0x38>
   d5084:	f7ff fe92 	bl	d4dac <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d5088:	4d9b      	ldr	r5, [pc, #620]	; (d52f8 <loop+0x2a8>)
   d508a:	79ab      	ldrb	r3, [r5, #6]
   d508c:	b16b      	cbz	r3, d50aa <loop+0x5a>
   d508e:	f002 f9f7 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
   d5092:	4b9a      	ldr	r3, [pc, #616]	; (d52fc <loop+0x2ac>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	1ac0      	subs	r0, r0, r3
   d5098:	4b99      	ldr	r3, [pc, #612]	; (d5300 <loop+0x2b0>)
   d509a:	681b      	ldr	r3, [r3, #0]
   d509c:	4298      	cmp	r0, r3
   d509e:	d904      	bls.n	d50aa <loop+0x5a>
   d50a0:	4b98      	ldr	r3, [pc, #608]	; (d5304 <loop+0x2b4>)
   d50a2:	689b      	ldr	r3, [r3, #8]
   d50a4:	b90b      	cbnz	r3, d50aa <loop+0x5a>
   d50a6:	2308      	movs	r3, #8
   d50a8:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = MEASURING_STATE;                                                            // We want to report on the hour but not after bedtime
   d50aa:	f004 f969 	bl	d9380 <_ZN9TimeClass4hourEv>
   d50ae:	4b96      	ldr	r3, [pc, #600]	; (d5308 <loop+0x2b8>)
   d50b0:	4680      	mov	r8, r0
   d50b2:	2100      	movs	r1, #0
   d50b4:	6818      	ldr	r0, [r3, #0]
   d50b6:	f003 ffc5 	bl	d9044 <_ZN9TimeClass4hourEx>
   d50ba:	4580      	cmp	r8, r0
   d50bc:	bf1c      	itt	ne
   d50be:	2303      	movne	r3, #3
   d50c0:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;                             // The park is closed - sleep
   d50c2:	f004 f95d 	bl	d9380 <_ZN9TimeClass4hourEv>
   d50c6:	7f6b      	ldrb	r3, [r5, #29]
   d50c8:	4298      	cmp	r0, r3
   d50ca:	db0d      	blt.n	d50e8 <loop+0x98>
   d50cc:	2309      	movs	r3, #9
   d50ce:	7023      	strb	r3, [r4, #0]
    if (particleConnectionNeeded) state = CONNECTING_STATE;
   d50d0:	4b8e      	ldr	r3, [pc, #568]	; (d530c <loop+0x2bc>)
   d50d2:	781b      	ldrb	r3, [r3, #0]
   d50d4:	b10b      	cbz	r3, d50da <loop+0x8a>
   d50d6:	2305      	movs	r3, #5
   d50d8:	7023      	strb	r3, [r4, #0]
    if (wateringTimerFlag) state = WATERING_STATE;                                                                                      // Most important - turn off water when done!
   d50da:	4b8d      	ldr	r3, [pc, #564]	; (d5310 <loop+0x2c0>)
   d50dc:	781b      	ldrb	r3, [r3, #0]
   d50de:	2b00      	cmp	r3, #0
   d50e0:	d070      	beq.n	d51c4 <loop+0x174>
    state = WATERING_STATE;
   d50e2:	2304      	movs	r3, #4
   d50e4:	7023      	strb	r3, [r4, #0]
    break;
   d50e6:	e06d      	b.n	d51c4 <loop+0x174>
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;                             // The park is closed - sleep
   d50e8:	f004 f94a 	bl	d9380 <_ZN9TimeClass4hourEv>
   d50ec:	7f2b      	ldrb	r3, [r5, #28]
   d50ee:	4298      	cmp	r0, r3
   d50f0:	dbec      	blt.n	d50cc <loop+0x7c>
   d50f2:	e7ed      	b.n	d50d0 <loop+0x80>
    if (state != oldState) publishStateTransition();
   d50f4:	4b7f      	ldr	r3, [pc, #508]	; (d52f4 <loop+0x2a4>)
   d50f6:	781b      	ldrb	r3, [r3, #0]
   d50f8:	2b09      	cmp	r3, #9
   d50fa:	d001      	beq.n	d5100 <loop+0xb0>
   d50fc:	f7ff fe56 	bl	d4dac <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5100:	4b7d      	ldr	r3, [pc, #500]	; (d52f8 <loop+0x2a8>)
   d5102:	78da      	ldrb	r2, [r3, #3]
   d5104:	4698      	mov	r8, r3
   d5106:	b10a      	cbz	r2, d510c <loop+0xbc>
   d5108:	f7ff fdf8 	bl	d4cfc <_Z22disconnectFromParticlev>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d510c:	2100      	movs	r1, #0
   d510e:	4881      	ldr	r0, [pc, #516]	; (d5314 <loop+0x2c4>)
   d5110:	f001 f89c 	bl	d624c <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d5114:	f004 f923 	bl	d935e <_ZN9TimeClass3nowEv>
   d5118:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d511c:	fb90 f3f5 	sdiv	r3, r0, r5
   d5120:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d5124:	4b7c      	ldr	r3, [pc, #496]	; (d5318 <loop+0x2c8>)
   d5126:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d512a:	7d1a      	ldrb	r2, [r3, #20]
   d512c:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d5130:	bfa8      	it	ge
   d5132:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d5136:	b10a      	cbz	r2, d513c <loop+0xec>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5138:	2202      	movs	r2, #2
   d513a:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d513c:	2200      	movs	r2, #0
   d513e:	2104      	movs	r1, #4
   d5140:	4875      	ldr	r0, [pc, #468]	; (d5318 <loop+0x2c8>)
   d5142:	f7ff f8fd 	bl	d4340 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5146:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d514a:	4369      	muls	r1, r5
   d514c:	f7ff f92c 	bl	d43a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d5150:	4971      	ldr	r1, [pc, #452]	; (d5318 <loop+0x2c8>)
   d5152:	a803      	add	r0, sp, #12
   d5154:	f003 fe8a 	bl	d8e6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d5158:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d515c:	486d      	ldr	r0, [pc, #436]	; (d5314 <loop+0x2c4>)
   d515e:	f001 f875 	bl	d624c <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d5162:	486e      	ldr	r0, [pc, #440]	; (d531c <loop+0x2cc>)
   d5164:	f003 fa30 	bl	d85c8 <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d5168:	486c      	ldr	r0, [pc, #432]	; (d531c <loop+0x2cc>)
   d516a:	f003 fa24 	bl	d85b6 <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d516e:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5170:	b19b      	cbz	r3, d519a <loop+0x14a>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5172:	889a      	ldrh	r2, [r3, #4]
   d5174:	2a01      	cmp	r2, #1
   d5176:	d110      	bne.n	d519a <loop+0x14a>
    if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   d5178:	899b      	ldrh	r3, [r3, #12]
   d517a:	2b04      	cmp	r3, #4
   d517c:	d10d      	bne.n	d519a <loop+0x14a>
      setLowPowerMode("0");
   d517e:	4968      	ldr	r1, [pc, #416]	; (d5320 <loop+0x2d0>)
   d5180:	a806      	add	r0, sp, #24
   d5182:	f003 fd88 	bl	d8c96 <_ZN6StringC1EPKc>
   d5186:	a806      	add	r0, sp, #24
   d5188:	f7ff fa74 	bl	d4674 <_Z15setLowPowerMode6String>
   d518c:	a806      	add	r0, sp, #24
   d518e:	f003 fd37 	bl	d8c00 <_ZN6StringD1Ev>
      sysStatus.openTime = 0;
   d5192:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d5196:	f8a8 301c 	strh.w	r3, [r8, #28]
    if (Time.hour() < sysStatus.closeTime && Time.hour() >= sysStatus.openTime) { // We might wake up and find it is opening time.  Park is open let's get ready for the day
   d519a:	f004 f8f1 	bl	d9380 <_ZN9TimeClass4hourEv>
   d519e:	f898 301d 	ldrb.w	r3, [r8, #29]
   d51a2:	4298      	cmp	r0, r3
   d51a4:	da08      	bge.n	d51b8 <loop+0x168>
   d51a6:	f004 f8eb 	bl	d9380 <_ZN9TimeClass4hourEv>
   d51aa:	f898 301c 	ldrb.w	r3, [r8, #28]
   d51ae:	4298      	cmp	r0, r3
   d51b0:	db02      	blt.n	d51b8 <loop+0x168>
      stayAwake = stayAwakeLong;                                       // Keeps Boron awake after deep sleep - may not be needed
   d51b2:	4b53      	ldr	r3, [pc, #332]	; (d5300 <loop+0x2b0>)
   d51b4:	4a5b      	ldr	r2, [pc, #364]	; (d5324 <loop+0x2d4>)
   d51b6:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d51b8:	2302      	movs	r3, #2
   d51ba:	7023      	strb	r3, [r4, #0]
        if (wakeupSource_) {
   d51bc:	9803      	ldr	r0, [sp, #12]
   d51be:	b108      	cbz	r0, d51c4 <loop+0x174>
            free(wakeupSource_);
   d51c0:	f002 fc32 	bl	d7a28 <free>
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d51c4:	4853      	ldr	r0, [pc, #332]	; (d5314 <loop+0x2c4>)
   d51c6:	f001 fc39 	bl	d6a3c <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d51ca:	7833      	ldrb	r3, [r6, #0]
   d51cc:	b13b      	cbz	r3, d51de <loop+0x18e>
   d51ce:	2330      	movs	r3, #48	; 0x30
   d51d0:	4a49      	ldr	r2, [pc, #292]	; (d52f8 <loop+0x2a8>)
   d51d2:	4855      	ldr	r0, [pc, #340]	; (d5328 <loop+0x2d8>)
   d51d4:	2101      	movs	r1, #1
   d51d6:	f001 fd2c 	bl	d6c32 <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
   d51da:	2300      	movs	r3, #0
   d51dc:	7033      	strb	r3, [r6, #0]
  if (currentCountsWriteNeeded) {
   d51de:	783b      	ldrb	r3, [r7, #0]
   d51e0:	b13b      	cbz	r3, d51f2 <loop+0x1a2>
   d51e2:	2320      	movs	r3, #32
   d51e4:	4a47      	ldr	r2, [pc, #284]	; (d5304 <loop+0x2b4>)
   d51e6:	4850      	ldr	r0, [pc, #320]	; (d5328 <loop+0x2d8>)
   d51e8:	2150      	movs	r1, #80	; 0x50
   d51ea:	f001 fd22 	bl	d6c32 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d51ee:	2300      	movs	r3, #0
   d51f0:	703b      	strb	r3, [r7, #0]
  if (outOfMemory >= 0) {                                             // In this function we are going to reset the system if there is an out of memory error
   d51f2:	4b4e      	ldr	r3, [pc, #312]	; (d532c <loop+0x2dc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	2b00      	cmp	r3, #0
   d51f8:	db1b      	blt.n	d5232 <loop+0x1e2>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d51fa:	4a4d      	ldr	r2, [pc, #308]	; (d5330 <loop+0x2e0>)
   d51fc:	2140      	movs	r1, #64	; 0x40
   d51fe:	a806      	add	r0, sp, #24
   d5200:	f002 fc2a 	bl	d7a58 <snprintf>
    Log.info(message);
   d5204:	a906      	add	r1, sp, #24
   d5206:	484b      	ldr	r0, [pc, #300]	; (d5334 <loop+0x2e4>)
   d5208:	f7ff f92e 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d520c:	2064      	movs	r0, #100	; 0x64
   d520e:	f002 fc77 	bl	d7b00 <delay>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5212:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);                   // Publish to the console - this is important so we will not filter on verboseMod
   d5214:	f88d 3000 	strb.w	r3, [sp]
   d5218:	4b47      	ldr	r3, [pc, #284]	; (d5338 <loop+0x2e8>)
   d521a:	4948      	ldr	r1, [pc, #288]	; (d533c <loop+0x2ec>)
   d521c:	781b      	ldrb	r3, [r3, #0]
   d521e:	4848      	ldr	r0, [pc, #288]	; (d5340 <loop+0x2f0>)
   d5220:	aa06      	add	r2, sp, #24
   d5222:	f7ff f938 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d5226:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d522a:	f002 fc69 	bl	d7b00 <delay>
    System.reset();                                                   // An out of memory condition occurred - reset device.
   d522e:	f003 fe19 	bl	d8e64 <_ZN11SystemClass5resetEv>
}
   d5232:	b017      	add	sp, #92	; 0x5c
   d5234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (state != oldState) publishStateTransition();
   d5238:	4b2e      	ldr	r3, [pc, #184]	; (d52f4 <loop+0x2a4>)
   d523a:	781b      	ldrb	r3, [r3, #0]
   d523c:	2b08      	cmp	r3, #8
   d523e:	d001      	beq.n	d5244 <loop+0x1f4>
   d5240:	f7ff fdb4 	bl	d4dac <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d5244:	4b2c      	ldr	r3, [pc, #176]	; (d52f8 <loop+0x2a8>)
   d5246:	78db      	ldrb	r3, [r3, #3]
   d5248:	b10b      	cbz	r3, d524e <loop+0x1fe>
   d524a:	f7ff fd57 	bl	d4cfc <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                 // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d524e:	4b2c      	ldr	r3, [pc, #176]	; (d5300 <loop+0x2b0>)
    bool stopWDT() { return setWDT(0); };
   d5250:	4830      	ldr	r0, [pc, #192]	; (d5314 <loop+0x2c4>)
   d5252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5256:	2100      	movs	r1, #0
   d5258:	601a      	str	r2, [r3, #0]
   d525a:	f000 fff7 	bl	d624c <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d525e:	f004 f87e 	bl	d935e <_ZN9TimeClass3nowEv>
   d5262:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d5266:	fb90 f3f5 	sdiv	r3, r0, r5
   d526a:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d526e:	4b2a      	ldr	r3, [pc, #168]	; (d5318 <loop+0x2c8>)
   d5270:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d5274:	7d1a      	ldrb	r2, [r3, #20]
   d5276:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d527a:	bfa8      	it	ge
   d527c:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d5280:	b10a      	cbz	r2, d5286 <loop+0x236>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5282:	2202      	movs	r2, #2
   d5284:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5286:	2200      	movs	r2, #0
   d5288:	2104      	movs	r1, #4
   d528a:	4823      	ldr	r0, [pc, #140]	; (d5318 <loop+0x2c8>)
   d528c:	f7ff f858 	bl	d4340 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5290:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5294:	4369      	muls	r1, r5
   d5296:	f7ff f887 	bl	d43a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d529a:	491f      	ldr	r1, [pc, #124]	; (d5318 <loop+0x2c8>)
   d529c:	a803      	add	r0, sp, #12
   d529e:	f003 fde5 	bl	d8e6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d52a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d52a6:	481b      	ldr	r0, [pc, #108]	; (d5314 <loop+0x2c4>)
   d52a8:	f000 ffd0 	bl	d624c <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d52ac:	481b      	ldr	r0, [pc, #108]	; (d531c <loop+0x2cc>)
   d52ae:	f003 f98b 	bl	d85c8 <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d52b2:	481a      	ldr	r0, [pc, #104]	; (d531c <loop+0x2cc>)
   d52b4:	f003 f97f 	bl	d85b6 <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d52b8:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d52ba:	2b00      	cmp	r3, #0
   d52bc:	f43f af7c 	beq.w	d51b8 <loop+0x168>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d52c0:	889a      	ldrh	r2, [r3, #4]
   d52c2:	2a01      	cmp	r2, #1
   d52c4:	f47f af78 	bne.w	d51b8 <loop+0x168>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d52c8:	899b      	ldrh	r3, [r3, #12]
   d52ca:	2b04      	cmp	r3, #4
   d52cc:	f47f af74 	bne.w	d51b8 <loop+0x168>
   d52d0:	4913      	ldr	r1, [pc, #76]	; (d5320 <loop+0x2d0>)
   d52d2:	a806      	add	r0, sp, #24
   d52d4:	f003 fcdf 	bl	d8c96 <_ZN6StringC1EPKc>
   d52d8:	a806      	add	r0, sp, #24
   d52da:	f7ff f9cb 	bl	d4674 <_Z15setLowPowerMode6String>
   d52de:	a806      	add	r0, sp, #24
   d52e0:	f003 fc8e 	bl	d8c00 <_ZN6StringD1Ev>
   d52e4:	e768      	b.n	d51b8 <loop+0x168>
   d52e6:	bf00      	nop
   d52e8:	2003e550 	.word	0x2003e550
   d52ec:	2003e58c 	.word	0x2003e58c
   d52f0:	2003e4d8 	.word	0x2003e4d8
   d52f4:	2003e510 	.word	0x2003e510
   d52f8:	2003e55c 	.word	0x2003e55c
   d52fc:	2003e558 	.word	0x2003e558
   d5300:	2003e554 	.word	0x2003e554
   d5304:	2003e4b8 	.word	0x2003e4b8
   d5308:	2003e4fc 	.word	0x2003e4fc
   d530c:	2003e511 	.word	0x2003e511
   d5310:	2003e5b4 	.word	0x2003e5b4
   d5314:	2003e464 	.word	0x2003e464
   d5318:	2003e4a0 	.word	0x2003e4a0
   d531c:	2003e4f4 	.word	0x2003e4f4
   d5320:	000dc690 	.word	0x000dc690
   d5324:	00015f90 	.word	0x00015f90
   d5328:	2003e4e4 	.word	0x2003e4e4
   d532c:	2003e160 	.word	0x2003e160
   d5330:	000dc849 	.word	0x000dc849
   d5334:	2003e608 	.word	0x2003e608
   d5338:	2003e45c 	.word	0x2003e45c
   d533c:	000dc868 	.word	0x000dc868
   d5340:	2003e514 	.word	0x2003e514
    if (state != oldState) {
   d5344:	4b9a      	ldr	r3, [pc, #616]	; (d55b0 <loop+0x560>)
   d5346:	781b      	ldrb	r3, [r3, #0]
   d5348:	2b05      	cmp	r3, #5
   d534a:	d013      	beq.n	d5374 <loop+0x324>
      if (oldState == REPORTING_STATE) returnToReporting = true;
   d534c:	1f9a      	subs	r2, r3, #6
   d534e:	4253      	negs	r3, r2
   d5350:	4153      	adcs	r3, r2
   d5352:	4a98      	ldr	r2, [pc, #608]	; (d55b4 <loop+0x564>)
   d5354:	7013      	strb	r3, [r2, #0]
      publishStateTransition();
   d5356:	f7ff fd29 	bl	d4dac <_Z22publishStateTransitionv>
      connectionStartTime = Time.now();                 // Start the clock first time we enter the state
   d535a:	f004 f800 	bl	d935e <_ZN9TimeClass3nowEv>
   d535e:	4b96      	ldr	r3, [pc, #600]	; (d55b8 <loop+0x568>)
   d5360:	6018      	str	r0, [r3, #0]
        network_on(*this, 0, 0, NULL);
   d5362:	4896      	ldr	r0, [pc, #600]	; (d55bc <loop+0x56c>)
   d5364:	2300      	movs	r3, #0
   d5366:	6840      	ldr	r0, [r0, #4]
   d5368:	461a      	mov	r2, r3
   d536a:	4619      	mov	r1, r3
   d536c:	f002 fb14 	bl	d7998 <network_on>
        spark_cloud_flag_connect();
   d5370:	f002 fa9a 	bl	d78a8 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5374:	f002 faa0 	bl	d78b8 <spark_cloud_flag_connected>
   d5378:	4d91      	ldr	r5, [pc, #580]	; (d55c0 <loop+0x570>)
   d537a:	f8df 8288 	ldr.w	r8, [pc, #648]	; d5604 <loop+0x5b4>
    if (Particle.connected()) {
   d537e:	4681      	mov	r9, r0
   d5380:	2800      	cmp	r0, #0
   d5382:	d04a      	beq.n	d541a <loop+0x3ca>
      particleConnectionNeeded = false;                               // Connected so we don't need this flag
   d5384:	2300      	movs	r3, #0
   d5386:	f888 3000 	strb.w	r3, [r8]
      sysStatus.connectedStatus = true;
   d538a:	2301      	movs	r3, #1
   d538c:	70eb      	strb	r3, [r5, #3]
      sysStatus.lastConnection = Time.now();                          // This is the last time we attempted to connect
   d538e:	f003 ffe6 	bl	d935e <_ZN9TimeClass3nowEv>
   d5392:	6268      	str	r0, [r5, #36]	; 0x24
    if (!particleConnectionNeeded) {                                  // Whether the connection was successful or not, we will collect and publish metrics
   d5394:	f898 3000 	ldrb.w	r3, [r8]
   d5398:	2b00      	cmp	r3, #0
   d539a:	d131      	bne.n	d5400 <loop+0x3b0>
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d539c:	f003 ffdf 	bl	d935e <_ZN9TimeClass3nowEv>
   d53a0:	4b85      	ldr	r3, [pc, #532]	; (d55b8 <loop+0x568>)
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d53a2:	4a88      	ldr	r2, [pc, #544]	; (d55c4 <loop+0x574>)
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d53a4:	681b      	ldr	r3, [r3, #0]
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d53a6:	8b11      	ldrh	r1, [r2, #24]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d53a8:	1ac0      	subs	r0, r0, r3
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d53aa:	4b87      	ldr	r3, [pc, #540]	; (d55c8 <loop+0x578>)
   d53ac:	681b      	ldr	r3, [r3, #0]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d53ae:	b280      	uxth	r0, r0
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d53b0:	4298      	cmp	r0, r3
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d53b2:	8528      	strh	r0, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d53b4:	bf88      	it	hi
   d53b6:	852b      	strhhi	r3, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d53b8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   d53ba:	4299      	cmp	r1, r3
   d53bc:	bf38      	it	cc
   d53be:	8313      	strhcc	r3, [r2, #24]
      snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d53c0:	2120      	movs	r1, #32
   d53c2:	4a82      	ldr	r2, [pc, #520]	; (d55cc <loop+0x57c>)
   d53c4:	a806      	add	r0, sp, #24
   d53c6:	f002 fb47 	bl	d7a58 <snprintf>
      Log.info(connectionStr);
   d53ca:	4881      	ldr	r0, [pc, #516]	; (d55d0 <loop+0x580>)
   d53cc:	a906      	add	r1, sp, #24
   d53ce:	f7ff f84b 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
      if (sysStatus.verboseMode) publishQueue.publish("Cellular",connectionStr,PRIVATE);
   d53d2:	792b      	ldrb	r3, [r5, #4]
   d53d4:	b14b      	cbz	r3, d53ea <loop+0x39a>
   d53d6:	2300      	movs	r3, #0
   d53d8:	f88d 3000 	strb.w	r3, [sp]
   d53dc:	4b7d      	ldr	r3, [pc, #500]	; (d55d4 <loop+0x584>)
   d53de:	497e      	ldr	r1, [pc, #504]	; (d55d8 <loop+0x588>)
   d53e0:	781b      	ldrb	r3, [r3, #0]
   d53e2:	487e      	ldr	r0, [pc, #504]	; (d55dc <loop+0x58c>)
   d53e4:	aa06      	add	r2, sp, #24
   d53e6:	f7ff f856 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      systemStatusWriteNeeded = true;
   d53ea:	2301      	movs	r3, #1
   d53ec:	7033      	strb	r3, [r6, #0]
      currentCountsWriteNeeded = true;
   d53ee:	703b      	strb	r3, [r7, #0]
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d53f0:	78eb      	ldrb	r3, [r5, #3]
   d53f2:	2b00      	cmp	r3, #0
   d53f4:	d030      	beq.n	d5458 <loop+0x408>
   d53f6:	4b6f      	ldr	r3, [pc, #444]	; (d55b4 <loop+0x564>)
   d53f8:	781b      	ldrb	r3, [r3, #0]
   d53fa:	b36b      	cbz	r3, d5458 <loop+0x408>
   d53fc:	2306      	movs	r3, #6
      else state = IDLE_STATE;                                             // We are connected so, we can go to the IDLE state
   d53fe:	7023      	strb	r3, [r4, #0]
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5400:	4b6f      	ldr	r3, [pc, #444]	; (d55c0 <loop+0x570>)
   d5402:	791b      	ldrb	r3, [r3, #4]
   d5404:	b133      	cbz	r3, d5414 <loop+0x3c4>
   d5406:	4b6a      	ldr	r3, [pc, #424]	; (d55b0 <loop+0x560>)
   d5408:	7822      	ldrb	r2, [r4, #0]
   d540a:	781b      	ldrb	r3, [r3, #0]
   d540c:	429a      	cmp	r2, r3
   d540e:	d001      	beq.n	d5414 <loop+0x3c4>
   d5410:	f7ff fccc 	bl	d4dac <_Z22publishStateTransitionv>
    takeMeasurements();
   d5414:	f7ff fdb6 	bl	d4f84 <_Z16takeMeasurementsv>
   d5418:	e663      	b.n	d50e2 <loop+0x92>
    else if ((Time.now() - connectionStartTime) > connectMaxTimeSec) {
   d541a:	f003 ffa0 	bl	d935e <_ZN9TimeClass3nowEv>
   d541e:	4b66      	ldr	r3, [pc, #408]	; (d55b8 <loop+0x568>)
   d5420:	4a69      	ldr	r2, [pc, #420]	; (d55c8 <loop+0x578>)
   d5422:	681b      	ldr	r3, [r3, #0]
   d5424:	6812      	ldr	r2, [r2, #0]
   d5426:	1ac3      	subs	r3, r0, r3
   d5428:	4293      	cmp	r3, r2
   d542a:	d9b3      	bls.n	d5394 <loop+0x344>
      particleConnectionNeeded = false;                               // Timed out so we will give up until the next hour
   d542c:	f888 9000 	strb.w	r9, [r8]
      if ((Time.now() - sysStatus.lastConnection) > 7200) {             // Only sends to ERROR_STATE if it has been over 2 hours
   d5430:	f003 ff95 	bl	d935e <_ZN9TimeClass3nowEv>
   d5434:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5436:	1ac0      	subs	r0, r0, r3
   d5438:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d543c:	d905      	bls.n	d544a <loop+0x3fa>
        state = ERROR_STATE;     
   d543e:	2301      	movs	r3, #1
   d5440:	7023      	strb	r3, [r4, #0]
   d5442:	f002 f81d 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   d5446:	4b66      	ldr	r3, [pc, #408]	; (d55e0 <loop+0x590>)
   d5448:	6018      	str	r0, [r3, #0]
      sysStatus.connectedStatus = false;
   d544a:	2300      	movs	r3, #0
      Log.info("cloud connection unsuccessful");
   d544c:	4965      	ldr	r1, [pc, #404]	; (d55e4 <loop+0x594>)
   d544e:	4860      	ldr	r0, [pc, #384]	; (d55d0 <loop+0x580>)
      sysStatus.connectedStatus = false;
   d5450:	70eb      	strb	r3, [r5, #3]
      Log.info("cloud connection unsuccessful");
   d5452:	f7ff f809 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
   d5456:	e79d      	b.n	d5394 <loop+0x344>
      else state = IDLE_STATE;                                             // We are connected so, we can go to the IDLE state
   d5458:	2302      	movs	r3, #2
   d545a:	e7d0      	b.n	d53fe <loop+0x3ae>
    if (wateringTimerFlag) {                                              // Already watering - time to turn off the tap
   d545c:	4d62      	ldr	r5, [pc, #392]	; (d55e8 <loop+0x598>)
   d545e:	f8df 9174 	ldr.w	r9, [pc, #372]	; d55d4 <loop+0x584>
   d5462:	782b      	ldrb	r3, [r5, #0]
   d5464:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   d5468:	b173      	cbz	r3, d5488 <loop+0x438>
   d546a:	f04f 0800 	mov.w	r8, #0
      publishQueue.publish("Watering","Done with watering cycle",PRIVATE);
   d546e:	f88d 8000 	strb.w	r8, [sp]
   d5472:	f899 3000 	ldrb.w	r3, [r9]
   d5476:	4a5d      	ldr	r2, [pc, #372]	; (d55ec <loop+0x59c>)
   d5478:	495d      	ldr	r1, [pc, #372]	; (d55f0 <loop+0x5a0>)
   d547a:	4858      	ldr	r0, [pc, #352]	; (d55dc <loop+0x58c>)
   d547c:	f7ff f80b 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      wateringTimerFlag = false;
   d5480:	f885 8000 	strb.w	r8, [r5]
    state = REPORTING_STATE;
   d5484:	2306      	movs	r3, #6
   d5486:	e62d      	b.n	d50e4 <loop+0x94>
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
   d5488:	f003 ff7a 	bl	d9380 <_ZN9TimeClass4hourEv>
   d548c:	2808      	cmp	r0, #8
   d548e:	d10a      	bne.n	d54a6 <loop+0x456>
    else if (sysStatus.stateOfCharge < 50) {
   d5490:	494b      	ldr	r1, [pc, #300]	; (d55c0 <loop+0x570>)
   d5492:	f899 3000 	ldrb.w	r3, [r9]
   d5496:	688a      	ldr	r2, [r1, #8]
   d5498:	2a31      	cmp	r2, #49	; 0x31
   d549a:	dc16      	bgt.n	d54ca <loop+0x47a>
   d549c:	2200      	movs	r2, #0
      publishQueue.publish("Watering","Watering Needed but battery too low",PRIVATE);
   d549e:	f88d 2000 	strb.w	r2, [sp]
   d54a2:	4a54      	ldr	r2, [pc, #336]	; (d55f4 <loop+0x5a4>)
   d54a4:	e00c      	b.n	d54c0 <loop+0x470>
    else if (Time.hour() != 8 && Time.hour() != 12 && Time.hour() != 17) {
   d54a6:	f003 ff6b 	bl	d9380 <_ZN9TimeClass4hourEv>
   d54aa:	280c      	cmp	r0, #12
   d54ac:	d0f0      	beq.n	d5490 <loop+0x440>
   d54ae:	f003 ff67 	bl	d9380 <_ZN9TimeClass4hourEv>
   d54b2:	2811      	cmp	r0, #17
   d54b4:	d0ec      	beq.n	d5490 <loop+0x440>
      publishQueue.publish("Watering","Not time to water",PRIVATE);
   d54b6:	f88d 8000 	strb.w	r8, [sp]
   d54ba:	f899 3000 	ldrb.w	r3, [r9]
   d54be:	4a4e      	ldr	r2, [pc, #312]	; (d55f8 <loop+0x5a8>)
      publishQueue.publish("Watering","Watering not needed",PRIVATE);
   d54c0:	494b      	ldr	r1, [pc, #300]	; (d55f0 <loop+0x5a0>)
   d54c2:	4846      	ldr	r0, [pc, #280]	; (d55dc <loop+0x58c>)
   d54c4:	f7fe ffe7 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d54c8:	e7dc      	b.n	d5484 <loop+0x434>
    else if (current.soilMoisture < sysStatus.wateringThresholdPct && !current.solenoidState) {  // Water if dry and if we are not already watering
   d54ca:	4a3e      	ldr	r2, [pc, #248]	; (d55c4 <loop+0x574>)
   d54cc:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
   d54d0:	edd2 7a01 	vldr	s15, [r2, #4]
   d54d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d54d8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d54dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d54e0:	d505      	bpl.n	d54ee <loop+0x49e>
   d54e2:	6892      	ldr	r2, [r2, #8]
   d54e4:	b91a      	cbnz	r2, d54ee <loop+0x49e>
      publishQueue.publish("Watering","Watering needed - starting watering cycle",PRIVATE);
   d54e6:	f88d 2000 	strb.w	r2, [sp]
   d54ea:	4a44      	ldr	r2, [pc, #272]	; (d55fc <loop+0x5ac>)
   d54ec:	e7e8      	b.n	d54c0 <loop+0x470>
   d54ee:	2200      	movs	r2, #0
      publishQueue.publish("Watering","Watering not needed",PRIVATE);
   d54f0:	f88d 2000 	strb.w	r2, [sp]
   d54f4:	4a42      	ldr	r2, [pc, #264]	; (d5600 <loop+0x5b0>)
   d54f6:	e7e3      	b.n	d54c0 <loop+0x470>
    if (state != oldState) publishStateTransition();
   d54f8:	4b2d      	ldr	r3, [pc, #180]	; (d55b0 <loop+0x560>)
   d54fa:	781b      	ldrb	r3, [r3, #0]
   d54fc:	2b06      	cmp	r3, #6
   d54fe:	d001      	beq.n	d5504 <loop+0x4b4>
   d5500:	f7ff fc54 	bl	d4dac <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) {
   d5504:	4d2e      	ldr	r5, [pc, #184]	; (d55c0 <loop+0x570>)
   d5506:	78eb      	ldrb	r3, [r5, #3]
   d5508:	b923      	cbnz	r3, d5514 <loop+0x4c4>
      particleConnectionNeeded = true;                                   // Go to connect state to connect and will return from there
   d550a:	4b3e      	ldr	r3, [pc, #248]	; (d5604 <loop+0x5b4>)
   d550c:	2201      	movs	r2, #1
   d550e:	701a      	strb	r2, [r3, #0]
      state = CONNECTING_STATE;                                          // Go straight to the connecting state
   d5510:	2305      	movs	r3, #5
   d5512:	e5e7      	b.n	d50e4 <loop+0x94>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house and publish to Google Sheets
   d5514:	f003 ff34 	bl	d9380 <_ZN9TimeClass4hourEv>
   d5518:	7f2b      	ldrb	r3, [r5, #28]
   d551a:	4298      	cmp	r0, r3
   d551c:	d113      	bne.n	d5546 <loop+0x4f6>
   d551e:	f7ff fcb3 	bl	d4e88 <_Z12dailyCleanupv>
      if (Time.hour() == sysStatus.openTime && sysStatus.openTime==0) sendEvent();    // Need this so we can get 24 hour reporting for non-sleeping devices
   d5522:	f003 ff2d 	bl	d9380 <_ZN9TimeClass4hourEv>
   d5526:	7f2b      	ldrb	r3, [r5, #28]
   d5528:	4298      	cmp	r0, r3
   d552a:	d102      	bne.n	d5532 <loop+0x4e2>
   d552c:	b908      	cbnz	r0, d5532 <loop+0x4e2>
   d552e:	f7ff f951 	bl	d47d4 <_Z9sendEventv>
   d5532:	f001 ffa5 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();
   d5536:	4b34      	ldr	r3, [pc, #208]	; (d5608 <loop+0x5b8>)
   d5538:	6018      	str	r0, [r3, #0]
      lastReportedTime = Time.now();
   d553a:	f003 ff10 	bl	d935e <_ZN9TimeClass3nowEv>
   d553e:	4b33      	ldr	r3, [pc, #204]	; (d560c <loop+0x5bc>)
   d5540:	6018      	str	r0, [r3, #0]
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d5542:	2307      	movs	r3, #7
   d5544:	e5ce      	b.n	d50e4 <loop+0x94>
      else sendEvent();                                               // Send data to Ubidots but not at opening time as there is nothing to publish
   d5546:	f7ff f945 	bl	d47d4 <_Z9sendEventv>
   d554a:	e7ea      	b.n	d5522 <loop+0x4d2>
    if (state != oldState) publishStateTransition();
   d554c:	4b18      	ldr	r3, [pc, #96]	; (d55b0 <loop+0x560>)
   d554e:	781b      	ldrb	r3, [r3, #0]
   d5550:	2b07      	cmp	r3, #7
   d5552:	d001      	beq.n	d5558 <loop+0x508>
   d5554:	f7ff fc2a 	bl	d4dac <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   d5558:	4b2d      	ldr	r3, [pc, #180]	; (d5610 <loop+0x5c0>)
   d555a:	781d      	ldrb	r5, [r3, #0]
   d555c:	b96d      	cbnz	r5, d557a <loop+0x52a>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d555e:	4b2d      	ldr	r3, [pc, #180]	; (d5614 <loop+0x5c4>)
   d5560:	4a2d      	ldr	r2, [pc, #180]	; (d5618 <loop+0x5c8>)
   d5562:	601a      	str	r2, [r3, #0]
   d5564:	f001 ff8c 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5568:	4b2c      	ldr	r3, [pc, #176]	; (d561c <loop+0x5cc>)
   d556a:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d556c:	2302      	movs	r3, #2
   d556e:	7023      	strb	r3, [r4, #0]
      current.alertCount = 0; // Zero out the counts until next reporting period
   d5570:	4b14      	ldr	r3, [pc, #80]	; (d55c4 <loop+0x574>)
   d5572:	611d      	str	r5, [r3, #16]
      currentCountsWriteNeeded=true;
   d5574:	2301      	movs	r3, #1
   d5576:	703b      	strb	r3, [r7, #0]
   d5578:	e624      	b.n	d51c4 <loop+0x174>
   d557a:	f001 ff81 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d557e:	4b22      	ldr	r3, [pc, #136]	; (d5608 <loop+0x5b8>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	1ac0      	subs	r0, r0, r3
   d5584:	f247 5330 	movw	r3, #30000	; 0x7530
   d5588:	4298      	cmp	r0, r3
   d558a:	f67f ae1b 	bls.w	d51c4 <loop+0x174>
   d558e:	f001 ff77 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5592:	4b13      	ldr	r3, [pc, #76]	; (d55e0 <loop+0x590>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE, WITH_ACK);  // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5594:	4a22      	ldr	r2, [pc, #136]	; (d5620 <loop+0x5d0>)
      resetTimeStamp = millis();
   d5596:	6018      	str	r0, [r3, #0]
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d5598:	4b22      	ldr	r3, [pc, #136]	; (d5624 <loop+0x5d4>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE, WITH_ACK);  // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d559a:	4923      	ldr	r1, [pc, #140]	; (d5628 <loop+0x5d8>)
   d559c:	781b      	ldrb	r3, [r3, #0]
   d559e:	f88d 3000 	strb.w	r3, [sp]
   d55a2:	4b0c      	ldr	r3, [pc, #48]	; (d55d4 <loop+0x584>)
   d55a4:	480d      	ldr	r0, [pc, #52]	; (d55dc <loop+0x58c>)
   d55a6:	781b      	ldrb	r3, [r3, #0]
   d55a8:	f7fe ff75 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
   d55ac:	2301      	movs	r3, #1
   d55ae:	e599      	b.n	d50e4 <loop+0x94>
   d55b0:	2003e510 	.word	0x2003e510
   d55b4:	2003e45e 	.word	0x2003e45e
   d55b8:	2003e460 	.word	0x2003e460
   d55bc:	2003e5d0 	.word	0x2003e5d0
   d55c0:	2003e55c 	.word	0x2003e55c
   d55c4:	2003e4b8 	.word	0x2003e4b8
   d55c8:	2003e14c 	.word	0x2003e14c
   d55cc:	000dc6fc 	.word	0x000dc6fc
   d55d0:	2003e608 	.word	0x2003e608
   d55d4:	2003e45c 	.word	0x2003e45c
   d55d8:	000dc711 	.word	0x000dc711
   d55dc:	2003e514 	.word	0x2003e514
   d55e0:	2003e54c 	.word	0x2003e54c
   d55e4:	000dc6de 	.word	0x000dc6de
   d55e8:	2003e5b4 	.word	0x2003e5b4
   d55ec:	000dc71a 	.word	0x000dc71a
   d55f0:	000dc733 	.word	0x000dc733
   d55f4:	000dc74e 	.word	0x000dc74e
   d55f8:	000dc73c 	.word	0x000dc73c
   d55fc:	000dc772 	.word	0x000dc772
   d5600:	000dc79c 	.word	0x000dc79c
   d5604:	2003e511 	.word	0x2003e511
   d5608:	2003e5b8 	.word	0x2003e5b8
   d560c:	2003e4fc 	.word	0x2003e4fc
   d5610:	2003e4e3 	.word	0x2003e4e3
   d5614:	2003e554 	.word	0x2003e554
   d5618:	00015f90 	.word	0x00015f90
   d561c:	2003e558 	.word	0x2003e558
   d5620:	000dcffc 	.word	0x000dcffc
   d5624:	2003e45d 	.word	0x2003e45d
   d5628:	000dc7b0 	.word	0x000dc7b0
    if (state != oldState) publishStateTransition();
   d562c:	4b3b      	ldr	r3, [pc, #236]	; (d571c <loop+0x6cc>)
   d562e:	781b      	ldrb	r3, [r3, #0]
   d5630:	2b01      	cmp	r3, #1
   d5632:	d001      	beq.n	d5638 <loop+0x5e8>
   d5634:	f7ff fbba 	bl	d4dac <_Z22publishStateTransitionv>
   d5638:	f001 ff22 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d563c:	4b38      	ldr	r3, [pc, #224]	; (d5720 <loop+0x6d0>)
   d563e:	681b      	ldr	r3, [r3, #0]
   d5640:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5644:	3330      	adds	r3, #48	; 0x30
   d5646:	4283      	cmp	r3, r0
   d5648:	f4bf adbc 	bcs.w	d51c4 <loop+0x174>
      if ((Time.now() - sysStatus.lastConnection) > 7200) {         // It is been over two hours since we last connected to the cloud - time for a reset
   d564c:	4c35      	ldr	r4, [pc, #212]	; (d5724 <loop+0x6d4>)
   d564e:	f003 fe86 	bl	d935e <_ZN9TimeClass3nowEv>
   d5652:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5654:	1ac0      	subs	r0, r0, r3
   d5656:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d565a:	d910      	bls.n	d567e <loop+0x62e>
   d565c:	2330      	movs	r3, #48	; 0x30
   d565e:	4622      	mov	r2, r4
   d5660:	2101      	movs	r1, #1
   d5662:	4831      	ldr	r0, [pc, #196]	; (d5728 <loop+0x6d8>)
   d5664:	f001 fae5 	bl	d6c32 <_ZN6MB85RC9writeDataEjPKhj>
        Log.info("failed to connect to cloud, doing deep reset");
   d5668:	4930      	ldr	r1, [pc, #192]	; (d572c <loop+0x6dc>)
   d566a:	4831      	ldr	r0, [pc, #196]	; (d5730 <loop+0x6e0>)
   d566c:	f7fe fefc 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
        delay(100);
   d5670:	2064      	movs	r0, #100	; 0x64
   d5672:	f002 fa45 	bl	d7b00 <delay>
        ab1805.deepPowerDown();                                       // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d5676:	482f      	ldr	r0, [pc, #188]	; (d5734 <loop+0x6e4>)
   d5678:	211e      	movs	r1, #30
   d567a:	f000 ff41 	bl	d6500 <_ZN6AB180513deepPowerDownEi>
      if (sysStatus.resetCount <= 3) {                                // First try simple reset
   d567e:	6923      	ldr	r3, [r4, #16]
   d5680:	2b03      	cmp	r3, #3
   d5682:	dc13      	bgt.n	d56ac <loop+0x65c>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d5684:	78e3      	ldrb	r3, [r4, #3]
   d5686:	b153      	cbz	r3, d569e <loop+0x64e>
   d5688:	4b2b      	ldr	r3, [pc, #172]	; (d5738 <loop+0x6e8>)
   d568a:	4a2c      	ldr	r2, [pc, #176]	; (d573c <loop+0x6ec>)
   d568c:	781b      	ldrb	r3, [r3, #0]
   d568e:	f88d 3000 	strb.w	r3, [sp]
   d5692:	4b2b      	ldr	r3, [pc, #172]	; (d5740 <loop+0x6f0>)
   d5694:	492b      	ldr	r1, [pc, #172]	; (d5744 <loop+0x6f4>)
   d5696:	781b      	ldrb	r3, [r3, #0]
   d5698:	482b      	ldr	r0, [pc, #172]	; (d5748 <loop+0x6f8>)
   d569a:	f7fe fefc 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d569e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d56a2:	f002 fa2d 	bl	d7b00 <delay>
        System.reset();
   d56a6:	f003 fbdd 	bl	d8e64 <_ZN11SystemClass5resetEv>
   d56aa:	e58b      	b.n	d51c4 <loop+0x174>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d56ac:	f003 fe57 	bl	d935e <_ZN9TimeClass3nowEv>
   d56b0:	6a23      	ldr	r3, [r4, #32]
   d56b2:	1ac0      	subs	r0, r0, r3
   d56b4:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d56b8:	78e3      	ldrb	r3, [r4, #3]
   d56ba:	d918      	bls.n	d56ee <loop+0x69e>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Power Cycle", PRIVATE, WITH_ACK);  // Broadcast Reset Action
   d56bc:	b153      	cbz	r3, d56d4 <loop+0x684>
   d56be:	4b1e      	ldr	r3, [pc, #120]	; (d5738 <loop+0x6e8>)
   d56c0:	4a22      	ldr	r2, [pc, #136]	; (d574c <loop+0x6fc>)
   d56c2:	781b      	ldrb	r3, [r3, #0]
   d56c4:	f88d 3000 	strb.w	r3, [sp]
   d56c8:	4b1d      	ldr	r3, [pc, #116]	; (d5740 <loop+0x6f0>)
   d56ca:	491e      	ldr	r1, [pc, #120]	; (d5744 <loop+0x6f4>)
   d56cc:	781b      	ldrb	r3, [r3, #0]
   d56ce:	481e      	ldr	r0, [pc, #120]	; (d5748 <loop+0x6f8>)
   d56d0:	f7fe fee1 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d56d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d56d8:	f002 fa12 	bl	d7b00 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d56dc:	2300      	movs	r3, #0
   d56de:	6123      	str	r3, [r4, #16]
        ab1805.deepPowerDown(10);
   d56e0:	210a      	movs	r1, #10
        systemStatusWriteNeeded=true;
   d56e2:	2301      	movs	r3, #1
        ab1805.deepPowerDown(10);
   d56e4:	4813      	ldr	r0, [pc, #76]	; (d5734 <loop+0x6e4>)
        systemStatusWriteNeeded=true;
   d56e6:	7033      	strb	r3, [r6, #0]
        ab1805.deepPowerDown(10);
   d56e8:	f000 ff0a 	bl	d6500 <_ZN6AB180513deepPowerDownEi>
   d56ec:	e56a      	b.n	d51c4 <loop+0x174>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcase Reset Action
   d56ee:	b153      	cbz	r3, d5706 <loop+0x6b6>
   d56f0:	4b11      	ldr	r3, [pc, #68]	; (d5738 <loop+0x6e8>)
   d56f2:	4a17      	ldr	r2, [pc, #92]	; (d5750 <loop+0x700>)
   d56f4:	781b      	ldrb	r3, [r3, #0]
   d56f6:	f88d 3000 	strb.w	r3, [sp]
   d56fa:	4b11      	ldr	r3, [pc, #68]	; (d5740 <loop+0x6f0>)
   d56fc:	4911      	ldr	r1, [pc, #68]	; (d5744 <loop+0x6f4>)
   d56fe:	781b      	ldrb	r3, [r3, #0]
   d5700:	4811      	ldr	r0, [pc, #68]	; (d5748 <loop+0x6f8>)
   d5702:	f7fe fec8 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5706:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d570a:	f002 f9f9 	bl	d7b00 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d570e:	2300      	movs	r3, #0
   d5710:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d5712:	2301      	movs	r3, #1
   d5714:	7033      	strb	r3, [r6, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d5716:	f7ff fb87 	bl	d4e28 <_Z14fullModemResetv>
   d571a:	e553      	b.n	d51c4 <loop+0x174>
   d571c:	2003e510 	.word	0x2003e510
   d5720:	2003e54c 	.word	0x2003e54c
   d5724:	2003e55c 	.word	0x2003e55c
   d5728:	2003e4e4 	.word	0x2003e4e4
   d572c:	000dc7c9 	.word	0x000dc7c9
   d5730:	2003e608 	.word	0x2003e608
   d5734:	2003e464 	.word	0x2003e464
   d5738:	2003e45d 	.word	0x2003e45d
   d573c:	000dc7f6 	.word	0x000dc7f6
   d5740:	2003e45c 	.word	0x2003e45c
   d5744:	000dc80a 	.word	0x000dc80a
   d5748:	2003e514 	.word	0x2003e514
   d574c:	000dc810 	.word	0x000dc810
   d5750:	000dc82a 	.word	0x000dc82a
   d5754:	00000000 	.word	0x00000000

000d5758 <setup>:
{
   d5758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d575c:	2100      	movs	r1, #0
{
   d575e:	b0aa      	sub	sp, #168	; 0xa8
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5760:	2008      	movs	r0, #8
   d5762:	f004 f837 	bl	d97d4 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5766:	2100      	movs	r1, #0
   d5768:	2004      	movs	r0, #4
   d576a:	f004 f833 	bl	d97d4 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d576e:	2101      	movs	r1, #1
   d5770:	2007      	movs	r0, #7
   d5772:	f004 f82f 	bl	d97d4 <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d5776:	2101      	movs	r1, #1
   d5778:	2007      	movs	r0, #7
   d577a:	f004 f83c 	bl	d97f6 <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d577e:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5780:	2400      	movs	r4, #0
   d5782:	f002 f8a1 	bl	d78c8 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5786:	2300      	movs	r3, #0
   d5788:	227d      	movs	r2, #125	; 0x7d
   d578a:	a90a      	add	r1, sp, #40	; 0x28
   d578c:	a806      	add	r0, sp, #24
   d578e:	f003 fac2 	bl	d8d16 <_ZNK6String8getBytesEPhjj>
   d5792:	49b7      	ldr	r1, [pc, #732]	; (d5a70 <setup+0x318>)
   d5794:	f8df 83d8 	ldr.w	r8, [pc, #984]	; d5b70 <setup+0x418>
   d5798:	4db6      	ldr	r5, [pc, #728]	; (d5a74 <setup+0x31c>)
   d579a:	4fb7      	ldr	r7, [pc, #732]	; (d5a78 <setup+0x320>)
   d579c:	4623      	mov	r3, r4
   d579e:	4622      	mov	r2, r4
   d57a0:	e9cd 4400 	strd	r4, r4, [sp]
   d57a4:	a80a      	add	r0, sp, #40	; 0x28
   d57a6:	f002 f89f 	bl	d78e8 <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d57aa:	4623      	mov	r3, r4
   d57ac:	2202      	movs	r2, #2
   d57ae:	49b3      	ldr	r1, [pc, #716]	; (d5a7c <setup+0x324>)
   d57b0:	48b3      	ldr	r0, [pc, #716]	; (d5a80 <setup+0x328>)
   d57b2:	f002 f861 	bl	d7878 <spark_variable>
        return _variable(varKey, var, STRING);
   d57b6:	49b3      	ldr	r1, [pc, #716]	; (d5a84 <setup+0x32c>)
   d57b8:	48b3      	ldr	r0, [pc, #716]	; (d5a88 <setup+0x330>)
   d57ba:	f7fe fd4a 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d57be:	49b3      	ldr	r1, [pc, #716]	; (d5a8c <setup+0x334>)
   d57c0:	48b3      	ldr	r0, [pc, #716]	; (d5a90 <setup+0x338>)
   d57c2:	4623      	mov	r3, r4
   d57c4:	2202      	movs	r2, #2
   d57c6:	f002 f857 	bl	d7878 <spark_variable>
   d57ca:	4623      	mov	r3, r4
   d57cc:	2202      	movs	r2, #2
   d57ce:	49b1      	ldr	r1, [pc, #708]	; (d5a94 <setup+0x33c>)
   d57d0:	48b1      	ldr	r0, [pc, #708]	; (d5a98 <setup+0x340>)
   d57d2:	f002 f851 	bl	d7878 <spark_variable>
        return _variable(varKey, var, STRING);
   d57d6:	49b1      	ldr	r1, [pc, #708]	; (d5a9c <setup+0x344>)
   d57d8:	48b1      	ldr	r0, [pc, #708]	; (d5aa0 <setup+0x348>)
   d57da:	f7fe fd3a 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d57de:	4623      	mov	r3, r4
   d57e0:	2202      	movs	r2, #2
   d57e2:	49b0      	ldr	r1, [pc, #704]	; (d5aa4 <setup+0x34c>)
   d57e4:	48b0      	ldr	r0, [pc, #704]	; (d5aa8 <setup+0x350>)
   d57e6:	f002 f847 	bl	d7878 <spark_variable>
        return _variable(varKey, var, STRING);
   d57ea:	49b0      	ldr	r1, [pc, #704]	; (d5aac <setup+0x354>)
   d57ec:	48b0      	ldr	r0, [pc, #704]	; (d5ab0 <setup+0x358>)
   d57ee:	f7fe fd30 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d57f2:	49b0      	ldr	r1, [pc, #704]	; (d5ab4 <setup+0x35c>)
   d57f4:	48b0      	ldr	r0, [pc, #704]	; (d5ab8 <setup+0x360>)
   d57f6:	f7fe fd2c 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d57fa:	49b0      	ldr	r1, [pc, #704]	; (d5abc <setup+0x364>)
   d57fc:	48b0      	ldr	r0, [pc, #704]	; (d5ac0 <setup+0x368>)
   d57fe:	f7fe fd28 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5802:	4623      	mov	r3, r4
   d5804:	2202      	movs	r2, #2
   d5806:	49af      	ldr	r1, [pc, #700]	; (d5ac4 <setup+0x36c>)
   d5808:	48af      	ldr	r0, [pc, #700]	; (d5ac8 <setup+0x370>)
   d580a:	f002 f835 	bl	d7878 <spark_variable>
        return _variable(varKey, var, STRING);
   d580e:	49af      	ldr	r1, [pc, #700]	; (d5acc <setup+0x374>)
   d5810:	48af      	ldr	r0, [pc, #700]	; (d5ad0 <setup+0x378>)
   d5812:	f7fe fd1e 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d5816:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d5818:	e9cd 4403 	strd	r4, r4, [sp, #12]
        extra.size = sizeof(extra);
   d581c:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d5820:	4bac      	ldr	r3, [pc, #688]	; (d5ad4 <setup+0x37c>)
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d5822:	49ad      	ldr	r1, [pc, #692]	; (d5ad8 <setup+0x380>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d5824:	9305      	str	r3, [sp, #20]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d5826:	2204      	movs	r2, #4
   d5828:	ab03      	add	r3, sp, #12
   d582a:	48ac      	ldr	r0, [pc, #688]	; (d5adc <setup+0x384>)
   d582c:	f002 f824 	bl	d7878 <spark_variable>
        return _variable(varKey, var, STRING);
   d5830:	49ab      	ldr	r1, [pc, #684]	; (d5ae0 <setup+0x388>)
   d5832:	48ac      	ldr	r0, [pc, #688]	; (d5ae4 <setup+0x38c>)
   d5834:	f7fe fd0d 	bl	d4252 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d5838:	49ab      	ldr	r1, [pc, #684]	; (d5ae8 <setup+0x390>)
   d583a:	48ac      	ldr	r0, [pc, #688]	; (d5aec <setup+0x394>)
   d583c:	f7fe fdde 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5840:	49ab      	ldr	r1, [pc, #684]	; (d5af0 <setup+0x398>)
   d5842:	48ac      	ldr	r0, [pc, #688]	; (d5af4 <setup+0x39c>)
   d5844:	f7fe fdda 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5848:	49ab      	ldr	r1, [pc, #684]	; (d5af8 <setup+0x3a0>)
   d584a:	48ac      	ldr	r0, [pc, #688]	; (d5afc <setup+0x3a4>)
   d584c:	f7fe fdd6 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5850:	49ab      	ldr	r1, [pc, #684]	; (d5b00 <setup+0x3a8>)
   d5852:	48ac      	ldr	r0, [pc, #688]	; (d5b04 <setup+0x3ac>)
   d5854:	f7fe fdd2 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5858:	49ab      	ldr	r1, [pc, #684]	; (d5b08 <setup+0x3b0>)
   d585a:	48ac      	ldr	r0, [pc, #688]	; (d5b0c <setup+0x3b4>)
   d585c:	f7fe fdce 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5860:	49ab      	ldr	r1, [pc, #684]	; (d5b10 <setup+0x3b8>)
   d5862:	48ac      	ldr	r0, [pc, #688]	; (d5b14 <setup+0x3bc>)
   d5864:	f7fe fdca 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5868:	49ab      	ldr	r1, [pc, #684]	; (d5b18 <setup+0x3c0>)
   d586a:	48ac      	ldr	r0, [pc, #688]	; (d5b1c <setup+0x3c4>)
   d586c:	f7fe fdc6 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5870:	49ab      	ldr	r1, [pc, #684]	; (d5b20 <setup+0x3c8>)
   d5872:	48ac      	ldr	r0, [pc, #688]	; (d5b24 <setup+0x3cc>)
   d5874:	f7fe fdc2 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5878:	49ab      	ldr	r1, [pc, #684]	; (d5b28 <setup+0x3d0>)
   d587a:	48ac      	ldr	r0, [pc, #688]	; (d5b2c <setup+0x3d4>)
   d587c:	f7fe fdbe 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5880:	49ab      	ldr	r1, [pc, #684]	; (d5b30 <setup+0x3d8>)
   d5882:	48ac      	ldr	r0, [pc, #688]	; (d5b34 <setup+0x3dc>)
   d5884:	f7fe fdba 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5888:	49ab      	ldr	r1, [pc, #684]	; (d5b38 <setup+0x3e0>)
   d588a:	48ac      	ldr	r0, [pc, #688]	; (d5b3c <setup+0x3e4>)
   d588c:	f7fe fdb6 	bl	d43fc <_ZN10CloudClass9_functionEPKcPFi6StringE>
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d5890:	2601      	movs	r6, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d5892:	2203      	movs	r2, #3
   d5894:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d5898:	a803      	add	r0, sp, #12
   d589a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    graceful_ = enabled;
   d589e:	f8ad 6014 	strh.w	r6, [sp, #20]
   d58a2:	f002 fb28 	bl	d7ef6 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  fram.begin();                                                       // Initialize the FRAM module
   d58a6:	48a6      	ldr	r0, [pc, #664]	; (d5b40 <setup+0x3e8>)
   d58a8:	f001 f936 	bl	d6b18 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d58ac:	4621      	mov	r1, r4
   d58ae:	48a4      	ldr	r0, [pc, #656]	; (d5b40 <setup+0x3e8>)
   d58b0:	4633      	mov	r3, r6
   d58b2:	f10d 020b 	add.w	r2, sp, #11
   d58b6:	f001 f971 	bl	d6b9c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d58ba:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d58be:	42b1      	cmp	r1, r6
   d58c0:	f000 80b5 	beq.w	d5a2e <setup+0x2d6>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d58c4:	489e      	ldr	r0, [pc, #632]	; (d5b40 <setup+0x3e8>)
   d58c6:	f001 f931 	bl	d6b2c <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d58ca:	4a9e      	ldr	r2, [pc, #632]	; (d5b44 <setup+0x3ec>)
   d58cc:	489c      	ldr	r0, [pc, #624]	; (d5b40 <setup+0x3e8>)
   d58ce:	2304      	movs	r3, #4
   d58d0:	4621      	mov	r1, r4
   d58d2:	f001 f9ae 	bl	d6c32 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d58d6:	4633      	mov	r3, r6
   d58d8:	4899      	ldr	r0, [pc, #612]	; (d5b40 <setup+0x3e8>)
   d58da:	f10d 020b 	add.w	r2, sp, #11
   d58de:	4621      	mov	r1, r4
   d58e0:	f001 f95c 	bl	d6b9c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d58e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d58e8:	42b3      	cmp	r3, r6
   d58ea:	f000 809d 	beq.w	d5a28 <setup+0x2d0>
   d58ee:	703e      	strb	r6, [r7, #0]
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d58f0:	4c95      	ldr	r4, [pc, #596]	; (d5b48 <setup+0x3f0>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d58f2:	f7ff f931 	bl	d4b58 <_Z17checkSystemValuesv>
  makeUpParkHourStrings();                                            // Create the strings for the console
   d58f6:	f7ff f985 	bl	d4c04 <_Z21makeUpParkHourStringsv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d58fa:	4a94      	ldr	r2, [pc, #592]	; (d5b4c <setup+0x3f4>)
   d58fc:	2300      	movs	r3, #0
   d58fe:	2100      	movs	r1, #0
   d5900:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d5904:	f001 ff56 	bl	d77b4 <system_subscribe_event>
   d5908:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();
   d590a:	2101      	movs	r1, #1
   d590c:	4620      	mov	r0, r4
   d590e:	8163      	strh	r3, [r4, #10]
   d5910:	f000 ffb4 	bl	d687c <_ZN6AB18055setupEb>
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d5914:	2301      	movs	r3, #1
   d5916:	461a      	mov	r2, r3
   d5918:	2110      	movs	r1, #16
   d591a:	4620      	mov	r0, r4
   d591c:	f000 fd19 	bl	d6352 <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d5920:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet = ab1805.isRTCSet();
   d5922:	70a8      	strb	r0, [r5, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d5924:	4620      	mov	r0, r4
   d5926:	f000 fc91 	bl	d624c <_ZN6AB18056setWDTEi>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d592a:	ed95 0a06 	vldr	s0, [r5, #24]
   d592e:	f003 fbcd 	bl	d90cc <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d5932:	f000 faad 	bl	d5e90 <_Z8isDSTusav>
   d5936:	2800      	cmp	r0, #0
   d5938:	f000 8085 	beq.w	d5a46 <setup+0x2ee>
   d593c:	f003 fbe4 	bl	d9108 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d5940:	ed95 0a05 	vldr	s0, [r5, #20]
   d5944:	f003 fba2 	bl	d908c <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5948:	f003 fd42 	bl	d93d0 <_ZN9TimeClass5localEv>
   d594c:	4604      	mov	r4, r0
   d594e:	f003 fd06 	bl	d935e <_ZN9TimeClass3nowEv>
   d5952:	1a20      	subs	r0, r4, r0
   d5954:	f004 f972 	bl	d9c3c <__aeabi_i2d>
   d5958:	a343      	add	r3, pc, #268	; (adr r3, d5a68 <setup+0x310>)
   d595a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d595e:	f004 fb01 	bl	d9f64 <__aeabi_ddiv>
   d5962:	4a7b      	ldr	r2, [pc, #492]	; (d5b50 <setup+0x3f8>)
   d5964:	e9cd 0100 	strd	r0, r1, [sp]
   d5968:	210a      	movs	r1, #10
   d596a:	4858      	ldr	r0, [pc, #352]	; (d5acc <setup+0x374>)
   d596c:	f002 f874 	bl	d7a58 <snprintf>
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d5970:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   d5972:	f004 f975 	bl	d9c60 <__aeabi_f2d>
   d5976:	4a77      	ldr	r2, [pc, #476]	; (d5b54 <setup+0x3fc>)
   d5978:	e9cd 0100 	strd	r0, r1, [sp]
   d597c:	4858      	ldr	r0, [pc, #352]	; (d5ae0 <setup+0x388>)
   d597e:	2108      	movs	r1, #8
   d5980:	f002 f86a 	bl	d7a58 <snprintf>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d5984:	79ab      	ldrb	r3, [r5, #6]
   d5986:	2210      	movs	r2, #16
   d5988:	2b00      	cmp	r3, #0
   d598a:	d05f      	beq.n	d5a4c <setup+0x2f4>
   d598c:	4972      	ldr	r1, [pc, #456]	; (d5b58 <setup+0x400>)
   d598e:	4847      	ldr	r0, [pc, #284]	; (d5aac <setup+0x354>)
   d5990:	f004 fe3f 	bl	da612 <strncpy>
        int reason = RESET_REASON_NONE;
   d5994:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5996:	4611      	mov	r1, r2
   d5998:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d599a:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d599c:	f001 fd50 	bl	d7440 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d59a0:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d59a2:	2b14      	cmp	r3, #20
   d59a4:	f04f 0200 	mov.w	r2, #0
   d59a8:	d152      	bne.n	d5a50 <setup+0x2f8>
    sysStatus.resetCount++;
   d59aa:	692b      	ldr	r3, [r5, #16]
   d59ac:	3301      	adds	r3, #1
   d59ae:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d59b0:	4b6a      	ldr	r3, [pc, #424]	; (d5b5c <setup+0x404>)
   d59b2:	2201      	movs	r2, #1
   d59b4:	701a      	strb	r2, [r3, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d59b6:	f7fe ffff 	bl	d49b8 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d59ba:	2004      	movs	r0, #4
   d59bc:	f003 ff34 	bl	d9828 <digitalRead>
   d59c0:	b908      	cbnz	r0, d59c6 <setup+0x26e>
   d59c2:	f7ff f87f 	bl	d4ac4 <_Z18loadSystemDefaultsv>
  if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   d59c6:	f003 fce7 	bl	d9398 <_ZN9TimeClass3dayEv>
   d59ca:	2100      	movs	r1, #0
   d59cc:	4604      	mov	r4, r0
   d59ce:	f8d8 0000 	ldr.w	r0, [r8]
   d59d2:	f003 fb3f 	bl	d9054 <_ZN9TimeClass3dayEx>
   d59d6:	4284      	cmp	r4, r0
   d59d8:	d001      	beq.n	d59de <setup+0x286>
    resetEverything();                                                 // Zero the counts for the new day
   d59da:	f7ff f9cd 	bl	d4d78 <_Z15resetEverythingv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d59de:	f003 fccf 	bl	d9380 <_ZN9TimeClass4hourEv>
   d59e2:	7f2b      	ldrb	r3, [r5, #28]
   d59e4:	4298      	cmp	r0, r3
   d59e6:	db11      	blt.n	d5a0c <setup+0x2b4>
   d59e8:	f003 fcca 	bl	d9380 <_ZN9TimeClass4hourEv>
   d59ec:	7f6b      	ldrb	r3, [r5, #29]
   d59ee:	4298      	cmp	r0, r3
   d59f0:	da0c      	bge.n	d5a0c <setup+0x2b4>
    if (sysStatus.connectedStatus && !Particle.connected()) {         // If the system thinks we are connected, let's make sure that we are
   d59f2:	78eb      	ldrb	r3, [r5, #3]
   d59f4:	b12b      	cbz	r3, d5a02 <setup+0x2aa>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d59f6:	f001 ff5f 	bl	d78b8 <spark_cloud_flag_connected>
   d59fa:	b910      	cbnz	r0, d5a02 <setup+0x2aa>
      particleConnectionNeeded = true;                                    // This may happen if there was an unexpected reset during park open hours
   d59fc:	4b58      	ldr	r3, [pc, #352]	; (d5b60 <setup+0x408>)
   d59fe:	2201      	movs	r2, #1
   d5a00:	701a      	strb	r2, [r3, #0]
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d5a02:	f7ff fabf 	bl	d4f84 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Boron awake after reboot - helps with recovery
   d5a06:	4b57      	ldr	r3, [pc, #348]	; (d5b64 <setup+0x40c>)
   d5a08:	4a57      	ldr	r2, [pc, #348]	; (d5b68 <setup+0x410>)
   d5a0a:	601a      	str	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5a0c:	783b      	ldrb	r3, [r7, #0]
   d5a0e:	b90b      	cbnz	r3, d5a14 <setup+0x2bc>
   d5a10:	2302      	movs	r3, #2
   d5a12:	703b      	strb	r3, [r7, #0]
  digitalWrite(blueLED,LOW);                                          // Signal the end of startup
   d5a14:	2100      	movs	r1, #0
   d5a16:	2007      	movs	r0, #7
   d5a18:	f003 feed 	bl	d97f6 <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5a1c:	a806      	add	r0, sp, #24
   d5a1e:	f003 f8ef 	bl	d8c00 <_ZN6StringD1Ev>
}
   d5a22:	b02a      	add	sp, #168	; 0xa8
   d5a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5a28:	f7ff f84c 	bl	d4ac4 <_Z18loadSystemDefaultsv>
   d5a2c:	e760      	b.n	d58f0 <setup+0x198>
   d5a2e:	462a      	mov	r2, r5
   d5a30:	2330      	movs	r3, #48	; 0x30
   d5a32:	4843      	ldr	r0, [pc, #268]	; (d5b40 <setup+0x3e8>)
   d5a34:	f001 f8b2 	bl	d6b9c <_ZN6MB85RC8readDataEjPhj>
   d5a38:	2320      	movs	r3, #32
   d5a3a:	4642      	mov	r2, r8
   d5a3c:	2150      	movs	r1, #80	; 0x50
   d5a3e:	4840      	ldr	r0, [pc, #256]	; (d5b40 <setup+0x3e8>)
   d5a40:	f001 f8ac 	bl	d6b9c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5a44:	e754      	b.n	d58f0 <setup+0x198>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d5a46:	f003 fb6b 	bl	d9120 <_ZN9TimeClass6endDSTEv>
   d5a4a:	e779      	b.n	d5940 <setup+0x1e8>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d5a4c:	4947      	ldr	r1, [pc, #284]	; (d5b6c <setup+0x414>)
   d5a4e:	e79e      	b.n	d598e <setup+0x236>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a50:	4611      	mov	r1, r2
   d5a52:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5a54:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a56:	f001 fcf3 	bl	d7440 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5a5a:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5a5c:	2b8c      	cmp	r3, #140	; 0x8c
   d5a5e:	d1aa      	bne.n	d59b6 <setup+0x25e>
   d5a60:	e7a3      	b.n	d59aa <setup+0x252>
   d5a62:	bf00      	nop
   d5a64:	f3af 8000 	nop.w
   d5a68:	00000000 	.word	0x00000000
   d5a6c:	40ac2000 	.word	0x40ac2000
   d5a70:	000d44b1 	.word	0x000d44b1
   d5a74:	2003e55c 	.word	0x2003e55c
   d5a78:	2003e550 	.word	0x2003e550
   d5a7c:	2003e4bc 	.word	0x2003e4bc
   d5a80:	000dc86f 	.word	0x000dc86f
   d5a84:	2003e40c 	.word	0x2003e40c
   d5a88:	000dc87c 	.word	0x000dc87c
   d5a8c:	2003e56c 	.word	0x2003e56c
   d5a90:	000dc883 	.word	0x000dc883
   d5a94:	2003e4c4 	.word	0x2003e4c4
   d5a98:	000dc88e 	.word	0x000dc88e
   d5a9c:	2003e150 	.word	0x2003e150
   d5aa0:	000dc89a 	.word	0x000dc89a
   d5aa4:	2003e564 	.word	0x2003e564
   d5aa8:	000dc8a2 	.word	0x000dc8a2
   d5aac:	2003e500 	.word	0x2003e500
   d5ab0:	000dc8ad 	.word	0x000dc8ad
   d5ab4:	2003e156 	.word	0x2003e156
   d5ab8:	000dc953 	.word	0x000dc953
   d5abc:	2003e144 	.word	0x2003e144
   d5ac0:	000dc8ba 	.word	0x000dc8ba
   d5ac4:	2003e4c8 	.word	0x2003e4c8
   d5ac8:	000dc8c4 	.word	0x000dc8c4
   d5acc:	2003e4d9 	.word	0x2003e4d9
   d5ad0:	000dc8cb 	.word	0x000dc8cb
   d5ad4:	000d425d 	.word	0x000d425d
   d5ad8:	000d4111 	.word	0x000d4111
   d5adc:	000dc8d6 	.word	0x000dc8d6
   d5ae0:	2003e58d 	.word	0x2003e58d
   d5ae4:	000dc8e5 	.word	0x000dc8e5
   d5ae8:	000d41fd 	.word	0x000d41fd
   d5aec:	000dc8f1 	.word	0x000dc8f1
   d5af0:	000d4551 	.word	0x000d4551
   d5af4:	000dc8fd 	.word	0x000dc8fd
   d5af8:	000d4149 	.word	0x000d4149
   d5afc:	000dc907 	.word	0x000dc907
   d5b00:	000d4675 	.word	0x000d4675
   d5b04:	000dc90f 	.word	0x000dc90f
   d5b08:	000d4a2d 	.word	0x000d4a2d
   d5b0c:	000dc91c 	.word	0x000dc91c
   d5b10:	000d4599 	.word	0x000d4599
   d5b14:	000dc927 	.word	0x000dc927
   d5b18:	000d5d69 	.word	0x000d5d69
   d5b1c:	000dc934 	.word	0x000dc934
   d5b20:	000d5ed1 	.word	0x000d5ed1
   d5b24:	000dc941 	.word	0x000dc941
   d5b28:	000d4c55 	.word	0x000d4c55
   d5b2c:	000dc94f 	.word	0x000dc94f
   d5b30:	000d4c8d 	.word	0x000d4c8d
   d5b34:	000dc95c 	.word	0x000dc95c
   d5b38:	000d4745 	.word	0x000d4745
   d5b3c:	000dc966 	.word	0x000dc966
   d5b40:	2003e4e4 	.word	0x2003e4e4
   d5b44:	000dca04 	.word	0x000dca04
   d5b48:	2003e464 	.word	0x2003e464
   d5b4c:	000d40c9 	.word	0x000d40c9
   d5b50:	000dc978 	.word	0x000dc978
   d5b54:	000dc57a 	.word	0x000dc57a
   d5b58:	000dc570 	.word	0x000dc570
   d5b5c:	2003e58c 	.word	0x2003e58c
   d5b60:	2003e511 	.word	0x2003e511
   d5b64:	2003e554 	.word	0x2003e554
   d5b68:	00015f90 	.word	0x00015f90
   d5b6c:	000dc56c 	.word	0x000dc56c
   d5b70:	2003e4b8 	.word	0x2003e4b8

000d5b74 <_GLOBAL__sub_I___appProductID>:
        val_(val) {
   d5b74:	4b55      	ldr	r3, [pc, #340]	; (d5ccc <_GLOBAL__sub_I___appProductID+0x158>)
   d5b76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5b7a:	2400      	movs	r4, #0
   d5b7c:	601c      	str	r4, [r3, #0]
   d5b7e:	4b54      	ldr	r3, [pc, #336]	; (d5cd0 <_GLOBAL__sub_I___appProductID+0x15c>)
              error_(SYSTEM_ERROR_NONE) {
   d5b80:	4f54      	ldr	r7, [pc, #336]	; (d5cd4 <_GLOBAL__sub_I___appProductID+0x160>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5b82:	4d55      	ldr	r5, [pc, #340]	; (d5cd8 <_GLOBAL__sub_I___appProductID+0x164>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5b84:	f8df 91b8 	ldr.w	r9, [pc, #440]	; d5d40 <_GLOBAL__sub_I___appProductID+0x1cc>
	    _M_invoker = &_My_handler::_M_invoke;
   d5b88:	f8df 81b8 	ldr.w	r8, [pc, #440]	; d5d44 <_GLOBAL__sub_I___appProductID+0x1d0>
   d5b8c:	2601      	movs	r6, #1
   d5b8e:	701e      	strb	r6, [r3, #0]
   d5b90:	4b52      	ldr	r3, [pc, #328]	; (d5cdc <_GLOBAL__sub_I___appProductID+0x168>)
   d5b92:	2208      	movs	r2, #8
   d5b94:	b085      	sub	sp, #20
   d5b96:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5b98:	f003 fdc6 	bl	d9728 <spark_protocol_instance>
   d5b9c:	4623      	mov	r3, r4
   d5b9e:	4622      	mov	r2, r4
   d5ba0:	210d      	movs	r1, #13
   d5ba2:	f003 fdc9 	bl	d9738 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5ba6:	f003 fdbf 	bl	d9728 <spark_protocol_instance>
   d5baa:	4623      	mov	r3, r4
   d5bac:	4622      	mov	r2, r4
   d5bae:	2102      	movs	r1, #2
   d5bb0:	f003 fdca 	bl	d9748 <spark_protocol_set_product_firmware_version>
struct currentStatus_structure {                    // currently 10 bytes long
   d5bb4:	4b4a      	ldr	r3, [pc, #296]	; (d5ce0 <_GLOBAL__sub_I___appProductID+0x16c>)
   d5bb6:	603c      	str	r4, [r7, #0]
   d5bb8:	2264      	movs	r2, #100	; 0x64
   d5bba:	831c      	strh	r4, [r3, #24]
   d5bbc:	61da      	str	r2, [r3, #28]
    SleepResult() {}
   d5bbe:	4b49      	ldr	r3, [pc, #292]	; (d5ce4 <_GLOBAL__sub_I___appProductID+0x170>)
   d5bc0:	60bb      	str	r3, [r7, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5bc2:	80bc      	strh	r4, [r7, #4]
    SleepResult() {}
   d5bc4:	71bc      	strb	r4, [r7, #6]
        set_system_mode(mode);
   d5bc6:	2002      	movs	r0, #2
   d5bc8:	f001 fddc 	bl	d7784 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5bcc:	462a      	mov	r2, r5
   d5bce:	4946      	ldr	r1, [pc, #280]	; (d5ce8 <_GLOBAL__sub_I___appProductID+0x174>)
   d5bd0:	4638      	mov	r0, r7
   d5bd2:	f003 fed3 	bl	d997c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5bd6:	4621      	mov	r1, r4
   d5bd8:	4630      	mov	r0, r6
   d5bda:	f001 fdf3 	bl	d77c4 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5bde:	4631      	mov	r1, r6
   d5be0:	2004      	movs	r0, #4
   d5be2:	f001 fc25 	bl	d7430 <HAL_Feature_Set>
        : config_(config) {
   d5be6:	4841      	ldr	r0, [pc, #260]	; (d5cec <_GLOBAL__sub_I___appProductID+0x178>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5be8:	4941      	ldr	r1, [pc, #260]	; (d5cf0 <_GLOBAL__sub_I___appProductID+0x17c>)
              valid_(true) {
   d5bea:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5bee:	4603      	mov	r3, r0
   d5bf0:	1d02      	adds	r2, r0, #4
   d5bf2:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5bf6:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5bf8:	4b3e      	ldr	r3, [pc, #248]	; (d5cf4 <_GLOBAL__sub_I___appProductID+0x180>)
   d5bfa:	6043      	str	r3, [r0, #4]
   d5bfc:	462a      	mov	r2, r5
        config_.wakeup_sources = nullptr;
   d5bfe:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d5c02:	7506      	strb	r6, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5c04:	7204      	strb	r4, [r0, #8]
   d5c06:	f003 feb9 	bl	d997c <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5c0a:	f003 fe67 	bl	d98dc <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5c0e:	4f3a      	ldr	r7, [pc, #232]	; (d5cf8 <_GLOBAL__sub_I___appProductID+0x184>)
   d5c10:	4601      	mov	r1, r0
   d5c12:	4623      	mov	r3, r4
   d5c14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5c18:	4638      	mov	r0, r7
   d5c1a:	f000 ff73 	bl	d6b04 <_ZN6MB85RCC1ER7TwoWireji>
   d5c1e:	4b37      	ldr	r3, [pc, #220]	; (d5cfc <_GLOBAL__sub_I___appProductID+0x188>)
   d5c20:	603b      	str	r3, [r7, #0]
   d5c22:	4638      	mov	r0, r7
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5c24:	4f36      	ldr	r7, [pc, #216]	; (d5d00 <_GLOBAL__sub_I___appProductID+0x18c>)
   d5c26:	4937      	ldr	r1, [pc, #220]	; (d5d04 <_GLOBAL__sub_I___appProductID+0x190>)
   d5c28:	462a      	mov	r2, r5
   d5c2a:	f003 fea7 	bl	d997c <__aeabi_atexit>
   d5c2e:	4936      	ldr	r1, [pc, #216]	; (d5d08 <_GLOBAL__sub_I___appProductID+0x194>)
   d5c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5c34:	4638      	mov	r0, r7
   d5c36:	f001 fa65 	bl	d7104 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5c3a:	4b34      	ldr	r3, [pc, #208]	; (d5d0c <_GLOBAL__sub_I___appProductID+0x198>)
   d5c3c:	603b      	str	r3, [r7, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5c3e:	462a      	mov	r2, r5
   d5c40:	4933      	ldr	r1, [pc, #204]	; (d5d10 <_GLOBAL__sub_I___appProductID+0x19c>)
   d5c42:	4638      	mov	r0, r7
   d5c44:	f003 fe9a 	bl	d997c <__aeabi_atexit>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d5c48:	f003 fe48 	bl	d98dc <_Z19__fetch_global_Wirev>
   d5c4c:	4f31      	ldr	r7, [pc, #196]	; (d5d14 <_GLOBAL__sub_I___appProductID+0x1a0>)
   d5c4e:	4601      	mov	r1, r0
   d5c50:	2269      	movs	r2, #105	; 0x69
   d5c52:	4638      	mov	r0, r7
   d5c54:	f000 f9fc 	bl	d6050 <_ZN6AB1805C1ER7TwoWireh>
   d5c58:	4638      	mov	r0, r7
FuelGauge fuel;                                     // Enable the fuel gauge API                        
   d5c5a:	4f2f      	ldr	r7, [pc, #188]	; (d5d18 <_GLOBAL__sub_I___appProductID+0x1a4>)
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d5c5c:	492f      	ldr	r1, [pc, #188]	; (d5d1c <_GLOBAL__sub_I___appProductID+0x1a8>)
   d5c5e:	462a      	mov	r2, r5
   d5c60:	f003 fe8c 	bl	d997c <__aeabi_atexit>
FuelGauge fuel;                                     // Enable the fuel gauge API                        
   d5c64:	4621      	mov	r1, r4
   d5c66:	4638      	mov	r0, r7
   d5c68:	f002 fc14 	bl	d8494 <_ZN9FuelGaugeC1Eb>
   d5c6c:	462a      	mov	r2, r5
   d5c6e:	492c      	ldr	r1, [pc, #176]	; (d5d20 <_GLOBAL__sub_I___appProductID+0x1ac>)
	    _M_manager = &_My_handler::_M_manager;
   d5c70:	4c2c      	ldr	r4, [pc, #176]	; (d5d24 <_GLOBAL__sub_I___appProductID+0x1b0>)
   d5c72:	4638      	mov	r0, r7
   d5c74:	f003 fe82 	bl	d997c <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5c78:	4b2b      	ldr	r3, [pc, #172]	; (d5d28 <_GLOBAL__sub_I___appProductID+0x1b4>)
Timer wateringTimer(1200000, wateringTimerISR, true);     // Watering timer, calls the WateringTimerISR and is a one-shot timer
   d5c7a:	492c      	ldr	r1, [pc, #176]	; (d5d2c <_GLOBAL__sub_I___appProductID+0x1b8>)
   d5c7c:	4f2c      	ldr	r7, [pc, #176]	; (d5d30 <_GLOBAL__sub_I___appProductID+0x1bc>)
   d5c7e:	9300      	str	r3, [sp, #0]
   d5c80:	466a      	mov	r2, sp
   d5c82:	4633      	mov	r3, r6
   d5c84:	4648      	mov	r0, r9
	    _M_manager = &_My_handler::_M_manager;
   d5c86:	9402      	str	r4, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d5c88:	f8cd 800c 	str.w	r8, [sp, #12]
   d5c8c:	f7fe fbbc 	bl	d4408 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d5c90:	4668      	mov	r0, sp
   d5c92:	f7fe fb0d 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
   d5c96:	462a      	mov	r2, r5
   d5c98:	4639      	mov	r1, r7
   d5c9a:	4648      	mov	r0, r9
   d5c9c:	f003 fe6e 	bl	d997c <__aeabi_atexit>
	    _M_manager = &_My_handler::_M_manager;
   d5ca0:	e9cd 4802 	strd	r4, r8, [sp, #8]
Timer awakeTimer(1800000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d5ca4:	4c23      	ldr	r4, [pc, #140]	; (d5d34 <_GLOBAL__sub_I___appProductID+0x1c0>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5ca6:	4b24      	ldr	r3, [pc, #144]	; (d5d38 <_GLOBAL__sub_I___appProductID+0x1c4>)
   d5ca8:	4924      	ldr	r1, [pc, #144]	; (d5d3c <_GLOBAL__sub_I___appProductID+0x1c8>)
   d5caa:	9300      	str	r3, [sp, #0]
   d5cac:	466a      	mov	r2, sp
   d5cae:	4633      	mov	r3, r6
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	f7fe fba9 	bl	d4408 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d5cb6:	4668      	mov	r0, sp
   d5cb8:	f7fe fafa 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
   d5cbc:	462a      	mov	r2, r5
   d5cbe:	4639      	mov	r1, r7
   d5cc0:	4620      	mov	r0, r4
   d5cc2:	f003 fe5b 	bl	d997c <__aeabi_atexit>
   d5cc6:	b005      	add	sp, #20
   d5cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5ccc:	2003e458 	.word	0x2003e458
   d5cd0:	2003e45c 	.word	0x2003e45c
   d5cd4:	2003e44c 	.word	0x2003e44c
   d5cd8:	2003e408 	.word	0x2003e408
   d5cdc:	2003e45d 	.word	0x2003e45d
   d5ce0:	2003e4b8 	.word	0x2003e4b8
   d5ce4:	ffff0000 	.word	0xffff0000
   d5ce8:	000d4295 	.word	0x000d4295
   d5cec:	2003e4a0 	.word	0x2003e4a0
   d5cf0:	000d4131 	.word	0x000d4131
   d5cf4:	00030010 	.word	0x00030010
   d5cf8:	2003e4e4 	.word	0x2003e4e4
   d5cfc:	000dc9a0 	.word	0x000dc9a0
   d5d00:	2003e514 	.word	0x2003e514
   d5d04:	000d4199 	.word	0x000d4199
   d5d08:	2003f400 	.word	0x2003f400
   d5d0c:	000dc9bc 	.word	0x000dc9bc
   d5d10:	000d4171 	.word	0x000d4171
   d5d14:	2003e464 	.word	0x2003e464
   d5d18:	2003e4f4 	.word	0x2003e4f4
   d5d1c:	000d5fe5 	.word	0x000d5fe5
   d5d20:	000d84b5 	.word	0x000d84b5
   d5d24:	000d40f9 	.word	0x000d40f9
   d5d28:	000d40d5 	.word	0x000d40d5
   d5d2c:	00124f80 	.word	0x00124f80
   d5d30:	000d42c5 	.word	0x000d42c5
   d5d34:	2003e484 	.word	0x2003e484
   d5d38:	000d40e1 	.word	0x000d40e1
   d5d3c:	001b7740 	.word	0x001b7740
   d5d40:	2003e598 	.word	0x2003e598
   d5d44:	000d40f5 	.word	0x000d40f5

000d5d48 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d5d48:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5d4a:	2000      	movs	r0, #0
   d5d4c:	f001 fddc 	bl	d7908 <spark_sync_time_pending>
   d5d50:	b128      	cbz	r0, d5d5e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5d52:	f001 fdb1 	bl	d78b8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5d56:	f080 0001 	eor.w	r0, r0, #1
   d5d5a:	b2c0      	uxtb	r0, r0
    }
   d5d5c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5d5e:	2001      	movs	r0, #1
   d5d60:	e7fc      	b.n	d5d5c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
   d5d62:	0000      	movs	r0, r0
   d5d64:	0000      	movs	r0, r0
	...

000d5d68 <_Z11setTimeZone6String>:
 * Values outside this range will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if successful, 0 if invalid command
 */
int setTimeZone(String command)
{
   d5d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5d6c:	b0c8      	sub	sp, #288	; 0x120
   d5d6e:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5d70:	f001 fda2 	bl	d78b8 <spark_cloud_flag_connected>
        if (!connected()) {
   d5d74:	b110      	cbz	r0, d5d7c <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d5d76:	2000      	movs	r0, #0
   d5d78:	f001 fdbe 	bl	d78f8 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d5d7c:	2000      	movs	r0, #0
   d5d7e:	f001 fb8f 	bl	d74a0 <hal_timer_millis>
   d5d82:	f04f 0a00 	mov.w	sl, #0
   d5d86:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d5d88:	f247 562f 	movw	r6, #29999	; 0x752f
   d5d8c:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d5d8e:	2000      	movs	r0, #0
   d5d90:	f001 fb86 	bl	d74a0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5d94:	ebb0 0409 	subs.w	r4, r0, r9
   d5d98:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d5d9c:	42af      	cmp	r7, r5
   d5d9e:	bf08      	it	eq
   d5da0:	42a6      	cmpeq	r6, r4
   d5da2:	d305      	bcc.n	d5db0 <_Z11setTimeZone6String+0x48>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d5da4:	f7ff ffd0 	bl	d5d48 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5da8:	b910      	cbnz	r0, d5db0 <_Z11setTimeZone6String+0x48>
            spark_process();
   d5daa:	f001 fd75 	bl	d7898 <spark_process>
        while (_while() && !_condition()) {
   d5dae:	e7ee      	b.n	d5d8e <_Z11setTimeZone6String+0x26>
   d5db0:	f7ff ffca 	bl	d5d48 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d5db4:	f8d8 0000 	ldr.w	r0, [r8]
   d5db8:	220a      	movs	r2, #10
   d5dba:	a903      	add	r1, sp, #12
   d5dbc:	f005 fb36 	bl	db42c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d5dc0:	f100 030c 	add.w	r3, r0, #12
   d5dc4:	b2db      	uxtb	r3, r3
   d5dc6:	2b18      	cmp	r3, #24
   d5dc8:	d848      	bhi.n	d5e5c <_Z11setTimeZone6String+0xf4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d5dca:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d5dcc:	ee07 5a90 	vmov	s15, r5
   d5dd0:	4b27      	ldr	r3, [pc, #156]	; (d5e70 <_Z11setTimeZone6String+0x108>)
   d5dd2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d5dd6:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d5dd8:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d5ddc:	f003 f956 	bl	d908c <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d5de0:	4b24      	ldr	r3, [pc, #144]	; (d5e74 <_Z11setTimeZone6String+0x10c>)
   d5de2:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d5de4:	f003 faf4 	bl	d93d0 <_ZN9TimeClass5localEv>
   d5de8:	4606      	mov	r6, r0
   d5dea:	f003 fab8 	bl	d935e <_ZN9TimeClass3nowEv>
   d5dee:	1a30      	subs	r0, r6, r0
   d5df0:	f003 ff24 	bl	d9c3c <__aeabi_i2d>
   d5df4:	a31c      	add	r3, pc, #112	; (adr r3, d5e68 <_Z11setTimeZone6String+0x100>)
   d5df6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5dfa:	f004 f8b3 	bl	d9f64 <__aeabi_ddiv>
   d5dfe:	4a1e      	ldr	r2, [pc, #120]	; (d5e78 <_Z11setTimeZone6String+0x110>)
   d5e00:	e9cd 0100 	strd	r0, r1, [sp]
   d5e04:	210a      	movs	r1, #10
   d5e06:	481d      	ldr	r0, [pc, #116]	; (d5e7c <_Z11setTimeZone6String+0x114>)
   d5e08:	f001 fe26 	bl	d7a58 <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e0c:	f001 fd54 	bl	d78b8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d5e10:	b310      	cbz	r0, d5e58 <_Z11setTimeZone6String+0xf0>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d5e12:	462b      	mov	r3, r5
   d5e14:	4a1a      	ldr	r2, [pc, #104]	; (d5e80 <_Z11setTimeZone6String+0x118>)
   d5e16:	4d1b      	ldr	r5, [pc, #108]	; (d5e84 <_Z11setTimeZone6String+0x11c>)
   d5e18:	f44f 7180 	mov.w	r1, #256	; 0x100
        val_(0) {
   d5e1c:	2600      	movs	r6, #0
   d5e1e:	a808      	add	r0, sp, #32
   d5e20:	f001 fe1a 	bl	d7a58 <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d5e24:	f88d 6000 	strb.w	r6, [sp]
   d5e28:	4917      	ldr	r1, [pc, #92]	; (d5e88 <_Z11setTimeZone6String+0x120>)
   d5e2a:	782b      	ldrb	r3, [r5, #0]
   d5e2c:	4817      	ldr	r0, [pc, #92]	; (d5e8c <_Z11setTimeZone6String+0x124>)
   d5e2e:	aa08      	add	r2, sp, #32
   d5e30:	f7fe fb31 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d5e34:	f003 fa93 	bl	d935e <_ZN9TimeClass3nowEv>
   d5e38:	4602      	mov	r2, r0
   d5e3a:	17c3      	asrs	r3, r0, #31
   d5e3c:	a804      	add	r0, sp, #16
   d5e3e:	f003 f98b 	bl	d9158 <_ZN9TimeClass7timeStrEx>
   d5e42:	f88d 6000 	strb.w	r6, [sp]
   d5e46:	782b      	ldrb	r3, [r5, #0]
   d5e48:	9a04      	ldr	r2, [sp, #16]
   d5e4a:	490f      	ldr	r1, [pc, #60]	; (d5e88 <_Z11setTimeZone6String+0x120>)
   d5e4c:	480f      	ldr	r0, [pc, #60]	; (d5e8c <_Z11setTimeZone6String+0x124>)
   d5e4e:	f7fe fb22 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5e52:	a804      	add	r0, sp, #16
   d5e54:	f002 fed4 	bl	d8c00 <_ZN6StringD1Ev>
  }

  return 1;
   d5e58:	4620      	mov	r0, r4
   d5e5a:	e000      	b.n	d5e5e <_Z11setTimeZone6String+0xf6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d5e5c:	2000      	movs	r0, #0
}
   d5e5e:	b048      	add	sp, #288	; 0x120
   d5e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5e64:	f3af 8000 	nop.w
   d5e68:	00000000 	.word	0x00000000
   d5e6c:	40ac2000 	.word	0x40ac2000
   d5e70:	2003e55c 	.word	0x2003e55c
   d5e74:	2003e58c 	.word	0x2003e58c
   d5e78:	000dc978 	.word	0x000dc978
   d5e7c:	2003e4d9 	.word	0x2003e4d9
   d5e80:	000dca08 	.word	0x000dca08
   d5e84:	2003e5bc 	.word	0x2003e5bc
   d5e88:	000dc8bf 	.word	0x000dc8bf
   d5e8c:	2003e514 	.word	0x2003e514

000d5e90 <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d5e90:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d5e92:	f003 fa81 	bl	d9398 <_ZN9TimeClass3dayEv>
   d5e96:	4605      	mov	r5, r0
  int month = Time.month();
   d5e98:	f003 fa92 	bl	d93c0 <_ZN9TimeClass5monthEv>
   d5e9c:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d5e9e:	f003 fa87 	bl	d93b0 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d5ea2:	1f23      	subs	r3, r4, #4
   d5ea4:	2b06      	cmp	r3, #6
   d5ea6:	d90e      	bls.n	d5ec6 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d5ea8:	1ee3      	subs	r3, r4, #3
   d5eaa:	2b08      	cmp	r3, #8
   d5eac:	d80d      	bhi.n	d5eca <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d5eae:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d5eb0:	1a2d      	subs	r5, r5, r0
   d5eb2:	d504      	bpl.n	d5ebe <_Z8isDSTusav+0x2e>
   d5eb4:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d5eb6:	bf14      	ite	ne
   d5eb8:	2000      	movne	r0, #0
   d5eba:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5ebc:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d5ebe:	2d07      	cmp	r5, #7
   d5ec0:	dd03      	ble.n	d5eca <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d5ec2:	2c03      	cmp	r4, #3
   d5ec4:	e7f7      	b.n	d5eb6 <_Z8isDSTusav+0x26>
    return true;
   d5ec6:	2001      	movs	r0, #1
   d5ec8:	e7f8      	b.n	d5ebc <_Z8isDSTusav+0x2c>
    return false;
   d5eca:	2000      	movs	r0, #0
   d5ecc:	e7f6      	b.n	d5ebc <_Z8isDSTusav+0x2c>
	...

000d5ed0 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d5ed0:	b570      	push	{r4, r5, r6, lr}
   d5ed2:	ed2d 8b02 	vpush	{d8}
   d5ed6:	b0c8      	sub	sp, #288	; 0x120
   d5ed8:	4605      	mov	r5, r0
  time_t t = Time.now();
   d5eda:	f003 fa40 	bl	d935e <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d5ede:	220a      	movs	r2, #10
  time_t t = Time.now();
   d5ee0:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d5ee2:	a903      	add	r1, sp, #12
   d5ee4:	6828      	ldr	r0, [r5, #0]
   d5ee6:	f005 faa1 	bl	db42c <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d5eea:	b2c3      	uxtb	r3, r0
   d5eec:	2b02      	cmp	r3, #2
   d5eee:	d859      	bhi.n	d5fa4 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d5ef0:	b243      	sxtb	r3, r0
   d5ef2:	ee08 3a10 	vmov	s16, r3
   d5ef6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d5efa:	eeb0 0a48 	vmov.f32	s0, s16
   d5efe:	f003 f8e5 	bl	d90cc <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d5f02:	4b2d      	ldr	r3, [pc, #180]	; (d5fb8 <_Z12setDSTOffset6String+0xe8>)
   d5f04:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d5f08:	4b2c      	ldr	r3, [pc, #176]	; (d5fbc <_Z12setDSTOffset6String+0xec>)
   d5f0a:	2201      	movs	r2, #1
   d5f0c:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d5f0e:	ee18 0a10 	vmov	r0, s16
   d5f12:	f003 fea5 	bl	d9c60 <__aeabi_f2d>
   d5f16:	4a2a      	ldr	r2, [pc, #168]	; (d5fc0 <_Z12setDSTOffset6String+0xf0>)
   d5f18:	e9cd 0100 	strd	r0, r1, [sp]
   d5f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5f20:	a808      	add	r0, sp, #32
   d5f22:	f001 fd99 	bl	d7a58 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d5f26:	f003 f9fd 	bl	d9324 <_ZN9TimeClass7isValidEv>
   d5f2a:	b128      	cbz	r0, d5f38 <_Z12setDSTOffset6String+0x68>
   d5f2c:	f7ff ffb0 	bl	d5e90 <_Z8isDSTusav>
   d5f30:	2800      	cmp	r0, #0
   d5f32:	d034      	beq.n	d5f9e <_Z12setDSTOffset6String+0xce>
   d5f34:	f003 f8e8 	bl	d9108 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d5f38:	f003 fa4a 	bl	d93d0 <_ZN9TimeClass5localEv>
   d5f3c:	4605      	mov	r5, r0
   d5f3e:	f003 fa0e 	bl	d935e <_ZN9TimeClass3nowEv>
   d5f42:	1a28      	subs	r0, r5, r0
   d5f44:	f003 fe7a 	bl	d9c3c <__aeabi_i2d>
   d5f48:	a319      	add	r3, pc, #100	; (adr r3, d5fb0 <_Z12setDSTOffset6String+0xe0>)
   d5f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f4e:	f004 f809 	bl	d9f64 <__aeabi_ddiv>
   d5f52:	4a1c      	ldr	r2, [pc, #112]	; (d5fc4 <_Z12setDSTOffset6String+0xf4>)
   d5f54:	e9cd 0100 	strd	r0, r1, [sp]
   d5f58:	210a      	movs	r1, #10
   d5f5a:	481b      	ldr	r0, [pc, #108]	; (d5fc8 <_Z12setDSTOffset6String+0xf8>)
   d5f5c:	f001 fd7c 	bl	d7a58 <snprintf>
   d5f60:	f001 fcaa 	bl	d78b8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d5f64:	b1c8      	cbz	r0, d5f9a <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d5f66:	4d19      	ldr	r5, [pc, #100]	; (d5fcc <_Z12setDSTOffset6String+0xfc>)
   d5f68:	4919      	ldr	r1, [pc, #100]	; (d5fd0 <_Z12setDSTOffset6String+0x100>)
   d5f6a:	481a      	ldr	r0, [pc, #104]	; (d5fd4 <_Z12setDSTOffset6String+0x104>)
   d5f6c:	2600      	movs	r6, #0
   d5f6e:	f88d 6000 	strb.w	r6, [sp]
   d5f72:	782b      	ldrb	r3, [r5, #0]
   d5f74:	aa08      	add	r2, sp, #32
   d5f76:	f7fe fa8e 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d5f7a:	4622      	mov	r2, r4
   d5f7c:	17e3      	asrs	r3, r4, #31
   d5f7e:	a804      	add	r0, sp, #16
   d5f80:	f003 f8ea 	bl	d9158 <_ZN9TimeClass7timeStrEx>
   d5f84:	f88d 6000 	strb.w	r6, [sp]
   d5f88:	782b      	ldrb	r3, [r5, #0]
   d5f8a:	9a04      	ldr	r2, [sp, #16]
   d5f8c:	4910      	ldr	r1, [pc, #64]	; (d5fd0 <_Z12setDSTOffset6String+0x100>)
   d5f8e:	4811      	ldr	r0, [pc, #68]	; (d5fd4 <_Z12setDSTOffset6String+0x104>)
   d5f90:	f7fe fa81 	bl	d4496 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5f94:	a804      	add	r0, sp, #16
   d5f96:	f002 fe33 	bl	d8c00 <_ZN6StringD1Ev>
  return 1;
   d5f9a:	2001      	movs	r0, #1
   d5f9c:	e003      	b.n	d5fa6 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d5f9e:	f003 f8bf 	bl	d9120 <_ZN9TimeClass6endDSTEv>
   d5fa2:	e7c9      	b.n	d5f38 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d5fa4:	2000      	movs	r0, #0
}
   d5fa6:	b048      	add	sp, #288	; 0x120
   d5fa8:	ecbd 8b02 	vpop	{d8}
   d5fac:	bd70      	pop	{r4, r5, r6, pc}
   d5fae:	bf00      	nop
   d5fb0:	00000000 	.word	0x00000000
   d5fb4:	40ac2000 	.word	0x40ac2000
   d5fb8:	2003e55c 	.word	0x2003e55c
   d5fbc:	2003e58c 	.word	0x2003e58c
   d5fc0:	000dca1c 	.word	0x000dca1c
   d5fc4:	000dc978 	.word	0x000dc978
   d5fc8:	2003e4d9 	.word	0x2003e4d9
   d5fcc:	2003e5bc 	.word	0x2003e5bc
   d5fd0:	000dc8bf 	.word	0x000dc8bf
   d5fd4:	2003e514 	.word	0x2003e514

000d5fd8 <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d5fd8:	4b01      	ldr	r3, [pc, #4]	; (d5fe0 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d5fda:	2201      	movs	r2, #1
   d5fdc:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5fde:	4770      	bx	lr
   d5fe0:	2003e5bc 	.word	0x2003e5bc

000d5fe4 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d5fe4:	4770      	bx	lr

000d5fe6 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d5fe6:	b510      	push	{r4, lr}
}
   d5fe8:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d5fea:	4604      	mov	r4, r0
}
   d5fec:	f003 fccb 	bl	d9986 <_ZdlPvj>
   d5ff0:	4620      	mov	r0, r4
   d5ff2:	bd10      	pop	{r4, pc}

000d5ff4 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5ff4:	b40e      	push	{r1, r2, r3}
   d5ff6:	b510      	push	{r4, lr}
   d5ff8:	b08d      	sub	sp, #52	; 0x34
   d5ffa:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d5ffc:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5ffe:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d6002:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d6004:	2300      	movs	r3, #0
   d6006:	2020      	movs	r0, #32
   d6008:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d600c:	e9cd 4200 	strd	r4, r2, [sp]
   d6010:	2001      	movs	r0, #1
   d6012:	aa04      	add	r2, sp, #16
   d6014:	f001 fb9c 	bl	d7750 <log_message_v>
}
   d6018:	b00d      	add	sp, #52	; 0x34
   d601a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d601e:	b003      	add	sp, #12
   d6020:	4770      	bx	lr

000d6022 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d6022:	b40e      	push	{r1, r2, r3}
   d6024:	b510      	push	{r4, lr}
   d6026:	b08d      	sub	sp, #52	; 0x34
   d6028:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d602a:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d602c:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d6030:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d6032:	2300      	movs	r3, #0
   d6034:	2020      	movs	r0, #32
   d6036:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d603a:	e9cd 4200 	strd	r4, r2, [sp]
   d603e:	2032      	movs	r0, #50	; 0x32
   d6040:	aa04      	add	r2, sp, #16
   d6042:	f001 fb85 	bl	d7750 <log_message_v>
}
   d6046:	b00d      	add	sp, #52	; 0x34
   d6048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d604c:	b003      	add	sp, #12
   d604e:	4770      	bx	lr

000d6050 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6050:	b510      	push	{r4, lr}
   d6052:	7202      	strb	r2, [r0, #8]
   d6054:	22ff      	movs	r2, #255	; 0xff
   d6056:	8142      	strh	r2, [r0, #10]
   d6058:	2200      	movs	r2, #0
   d605a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d605e:	6142      	str	r2, [r0, #20]
   d6060:	7602      	strb	r2, [r0, #24]
   d6062:	61c2      	str	r2, [r0, #28]
    instance = this;
   d6064:	4a02      	ldr	r2, [pc, #8]	; (d6070 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6066:	4c03      	ldr	r4, [pc, #12]	; (d6074 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d6068:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d606a:	e9c0 4100 	strd	r4, r1, [r0]
}
   d606e:	bd10      	pop	{r4, pc}
   d6070:	2003e5c4 	.word	0x2003e5c4
   d6074:	000dcc7c 	.word	0x000dcc7c

000d6078 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d6078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d607c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d6080:	4604      	mov	r4, r0
   d6082:	4689      	mov	r9, r1
   d6084:	4616      	mov	r6, r2
   d6086:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d6088:	f1b8 0f00 	cmp.w	r8, #0
   d608c:	d002      	beq.n	d6094 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d608e:	6840      	ldr	r0, [r0, #4]
   d6090:	f002 fb4e 	bl	d8730 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6094:	7a21      	ldrb	r1, [r4, #8]
   d6096:	6860      	ldr	r0, [r4, #4]
   d6098:	f002 fb27 	bl	d86ea <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d609c:	6860      	ldr	r0, [r4, #4]
   d609e:	6803      	ldr	r3, [r0, #0]
   d60a0:	4649      	mov	r1, r9
   d60a2:	689b      	ldr	r3, [r3, #8]
   d60a4:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d60a6:	6860      	ldr	r0, [r4, #4]
   d60a8:	2100      	movs	r1, #0
   d60aa:	f002 fb3d 	bl	d8728 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d60ae:	4605      	mov	r5, r0
   d60b0:	bb00      	cbnz	r0, d60f4 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d60b2:	2301      	movs	r3, #1
   d60b4:	7a21      	ldrb	r1, [r4, #8]
   d60b6:	6860      	ldr	r0, [r4, #4]
   d60b8:	463a      	mov	r2, r7
   d60ba:	f002 fb04 	bl	d86c6 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d60be:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d60c0:	4603      	mov	r3, r0
        if (count == num) {
   d60c2:	d109      	bne.n	d60d8 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d60c4:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d60c6:	42be      	cmp	r6, r7
   d60c8:	d01c      	beq.n	d6104 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d60ca:	6860      	ldr	r0, [r4, #4]
   d60cc:	6803      	ldr	r3, [r0, #0]
   d60ce:	695b      	ldr	r3, [r3, #20]
   d60d0:	4798      	blx	r3
   d60d2:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d60d6:	e7f6      	b.n	d60c6 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d60d8:	490b      	ldr	r1, [pc, #44]	; (d6108 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d60da:	480c      	ldr	r0, [pc, #48]	; (d610c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d60dc:	464a      	mov	r2, r9
   d60de:	f7ff ffa0 	bl	d6022 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d60e2:	f1b8 0f00 	cmp.w	r8, #0
   d60e6:	d002      	beq.n	d60ee <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d60e8:	6860      	ldr	r0, [r4, #4]
   d60ea:	f002 fb2a 	bl	d8742 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d60ee:	4628      	mov	r0, r5
   d60f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d60f4:	4603      	mov	r3, r0
   d60f6:	4906      	ldr	r1, [pc, #24]	; (d6110 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d60f8:	4804      	ldr	r0, [pc, #16]	; (d610c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d60fa:	464a      	mov	r2, r9
   d60fc:	f7ff ff91 	bl	d6022 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d6100:	2500      	movs	r5, #0
   d6102:	e7ee      	b.n	d60e2 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d6104:	2501      	movs	r5, #1
   d6106:	e7ec      	b.n	d60e2 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d6108:	000dca2d 	.word	0x000dca2d
   d610c:	2003e5c0 	.word	0x2003e5c0
   d6110:	000dca52 	.word	0x000dca52

000d6114 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d6114:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d6116:	9300      	str	r3, [sp, #0]
   d6118:	2301      	movs	r3, #1
   d611a:	f7ff ffad 	bl	d6078 <_ZN6AB180513readRegistersEhPhjb>
}
   d611e:	b003      	add	sp, #12
   d6120:	f85d fb04 	ldr.w	pc, [sp], #4

000d6124 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d6124:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d6126:	8943      	ldrh	r3, [r0, #10]
   d6128:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d612a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d612c:	d010      	beq.n	d6150 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d612e:	4e19      	ldr	r6, [pc, #100]	; (d6194 <_ZN6AB180510detectChipEv+0x70>)
   d6130:	4d19      	ldr	r5, [pc, #100]	; (d6198 <_ZN6AB180510detectChipEv+0x74>)
   d6132:	f001 f9a5 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d6136:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d613a:	d209      	bcs.n	d6150 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d613c:	8960      	ldrh	r0, [r4, #10]
   d613e:	f003 fb73 	bl	d9828 <digitalRead>
   d6142:	2801      	cmp	r0, #1
   d6144:	d004      	beq.n	d6150 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d6146:	4631      	mov	r1, r6
   d6148:	4628      	mov	r0, r5
   d614a:	f7fe f98d 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
   d614e:	e7f0      	b.n	d6132 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d6150:	2301      	movs	r3, #1
   d6152:	f10d 0207 	add.w	r2, sp, #7
   d6156:	2128      	movs	r1, #40	; 0x28
   d6158:	4620      	mov	r0, r4
   d615a:	f7ff ffdb 	bl	d6114 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d615e:	b930      	cbnz	r0, d616e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d6160:	480d      	ldr	r0, [pc, #52]	; (d6198 <_ZN6AB180510detectChipEv+0x74>)
   d6162:	490e      	ldr	r1, [pc, #56]	; (d619c <_ZN6AB180510detectChipEv+0x78>)
   d6164:	f7fe f980 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
   d6168:	2000      	movs	r0, #0
}
   d616a:	b002      	add	sp, #8
   d616c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d616e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6172:	2b18      	cmp	r3, #24
   d6174:	d1f4      	bne.n	d6160 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d6176:	2301      	movs	r3, #1
   d6178:	f10d 0207 	add.w	r2, sp, #7
   d617c:	2129      	movs	r1, #41	; 0x29
   d617e:	4620      	mov	r0, r4
   d6180:	f7ff ffc8 	bl	d6114 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d6184:	2800      	cmp	r0, #0
   d6186:	d0eb      	beq.n	d6160 <_ZN6AB180510detectChipEv+0x3c>
   d6188:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d618c:	2b05      	cmp	r3, #5
   d618e:	d1e7      	bne.n	d6160 <_ZN6AB180510detectChipEv+0x3c>
   d6190:	e7eb      	b.n	d616a <_ZN6AB180510detectChipEv+0x46>
   d6192:	bf00      	nop
   d6194:	000dca76 	.word	0x000dca76
   d6198:	2003e5c0 	.word	0x2003e5c0
   d619c:	000dca8b 	.word	0x000dca8b

000d61a0 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d61a0:	b507      	push	{r0, r1, r2, lr}
   d61a2:	4613      	mov	r3, r2
    uint8_t value = 0;
   d61a4:	2200      	movs	r2, #0
   d61a6:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d61aa:	f10d 0207 	add.w	r2, sp, #7
   d61ae:	f7ff ffb1 	bl	d6114 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d61b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d61b6:	b003      	add	sp, #12
   d61b8:	f85d fb04 	ldr.w	pc, [sp], #4

000d61bc <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d61bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61c0:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d61c4:	4604      	mov	r4, r0
   d61c6:	460f      	mov	r7, r1
   d61c8:	4615      	mov	r5, r2
   d61ca:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d61cc:	f1b8 0f00 	cmp.w	r8, #0
   d61d0:	d002      	beq.n	d61d8 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d61d2:	6840      	ldr	r0, [r0, #4]
   d61d4:	f002 faac 	bl	d8730 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d61d8:	7a21      	ldrb	r1, [r4, #8]
   d61da:	6860      	ldr	r0, [r4, #4]
   d61dc:	f002 fa85 	bl	d86ea <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d61e0:	6860      	ldr	r0, [r4, #4]
   d61e2:	6803      	ldr	r3, [r0, #0]
   d61e4:	4639      	mov	r1, r7
   d61e6:	689b      	ldr	r3, [r3, #8]
   d61e8:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d61ea:	442e      	add	r6, r5
   d61ec:	42b5      	cmp	r5, r6
   d61ee:	6860      	ldr	r0, [r4, #4]
   d61f0:	d005      	beq.n	d61fe <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d61f2:	6803      	ldr	r3, [r0, #0]
   d61f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d61f8:	689b      	ldr	r3, [r3, #8]
   d61fa:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d61fc:	e7f6      	b.n	d61ec <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d61fe:	2101      	movs	r1, #1
   d6200:	f002 fa92 	bl	d8728 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6204:	4603      	mov	r3, r0
   d6206:	b170      	cbz	r0, d6226 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d6208:	4908      	ldr	r1, [pc, #32]	; (d622c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d620a:	4809      	ldr	r0, [pc, #36]	; (d6230 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d620c:	463a      	mov	r2, r7
   d620e:	f7ff ff08 	bl	d6022 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d6212:	2500      	movs	r5, #0
    }

    if (lock) {
   d6214:	f1b8 0f00 	cmp.w	r8, #0
   d6218:	d002      	beq.n	d6220 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d621a:	6860      	ldr	r0, [r4, #4]
   d621c:	f002 fa91 	bl	d8742 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d6220:	4628      	mov	r0, r5
   d6222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d6226:	2501      	movs	r5, #1
   d6228:	e7f4      	b.n	d6214 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d622a:	bf00      	nop
   d622c:	000dca98 	.word	0x000dca98
   d6230:	2003e5c0 	.word	0x2003e5c0

000d6234 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d6234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6236:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d623a:	9300      	str	r3, [sp, #0]
   d623c:	f10d 020f 	add.w	r2, sp, #15
   d6240:	2301      	movs	r3, #1
   d6242:	f7ff ffbb 	bl	d61bc <_ZN6AB180514writeRegistersEhPKhjb>
}
   d6246:	b005      	add	sp, #20
   d6248:	f85d fb04 	ldr.w	pc, [sp], #4

000d624c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d624e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d6250:	460c      	mov	r4, r1
   d6252:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d6254:	491a      	ldr	r1, [pc, #104]	; (d62c0 <_ZN6AB18056setWDTEi+0x74>)
   d6256:	481b      	ldr	r0, [pc, #108]	; (d62c4 <_ZN6AB18056setWDTEi+0x78>)
   d6258:	f7fe f906 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d625c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d625e:	bfb8      	it	lt
   d6260:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d6262:	b97c      	cbnz	r4, d6284 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d6264:	2301      	movs	r3, #1
   d6266:	4622      	mov	r2, r4
   d6268:	211b      	movs	r1, #27
   d626a:	4628      	mov	r0, r5
   d626c:	f7ff ffe2 	bl	d6234 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6270:	4915      	ldr	r1, [pc, #84]	; (d62c8 <_ZN6AB18056setWDTEi+0x7c>)
   d6272:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d6274:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6276:	4813      	ldr	r0, [pc, #76]	; (d62c4 <_ZN6AB18056setWDTEi+0x78>)
   d6278:	f7ff febc 	bl	d5ff4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d627c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d627e:	616c      	str	r4, [r5, #20]
}
   d6280:	4630      	mov	r0, r6
   d6282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d6284:	2c03      	cmp	r4, #3
   d6286:	dd19      	ble.n	d62bc <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d6288:	10a7      	asrs	r7, r4, #2
   d628a:	2f1f      	cmp	r7, #31
   d628c:	bfa8      	it	ge
   d628e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6290:	00ba      	lsls	r2, r7, #2
   d6292:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d6296:	2301      	movs	r3, #1
   d6298:	b2d2      	uxtb	r2, r2
   d629a:	211b      	movs	r1, #27
   d629c:	4628      	mov	r0, r5
   d629e:	f7ff ffc9 	bl	d6234 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d62a2:	463a      	mov	r2, r7
   d62a4:	4603      	mov	r3, r0
   d62a6:	4909      	ldr	r1, [pc, #36]	; (d62cc <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d62a8:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d62aa:	4806      	ldr	r0, [pc, #24]	; (d62c4 <_ZN6AB18056setWDTEi+0x78>)
   d62ac:	f7ff fea2 	bl	d5ff4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d62b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d62b4:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d62b6:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d62b8:	616f      	str	r7, [r5, #20]
   d62ba:	e7e1      	b.n	d6280 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d62bc:	2701      	movs	r7, #1
   d62be:	e7e7      	b.n	d6290 <_ZN6AB18056setWDTEi+0x44>
   d62c0:	000dcabd 	.word	0x000dcabd
   d62c4:	2003e5c0 	.word	0x2003e5c0
   d62c8:	000dcac7 	.word	0x000dcac7
   d62cc:	000dcae3 	.word	0x000dcae3

000d62d0 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d62d0:	460b      	mov	r3, r1
    if (instance) {
   d62d2:	4907      	ldr	r1, [pc, #28]	; (d62f0 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d62d4:	4602      	mov	r2, r0
    if (instance) {
   d62d6:	6808      	ldr	r0, [r1, #0]
   d62d8:	b148      	cbz	r0, d62ee <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d62da:	2b00      	cmp	r3, #0
   d62dc:	bf08      	it	eq
   d62de:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d62e2:	d104      	bne.n	d62ee <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d62e4:	68c3      	ldr	r3, [r0, #12]
   d62e6:	b113      	cbz	r3, d62ee <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d62e8:	2100      	movs	r1, #0
   d62ea:	f7ff bfaf 	b.w	d624c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d62ee:	4770      	bx	lr
   d62f0:	2003e5c4 	.word	0x2003e5c4

000d62f4 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d62f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d62f8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d62fc:	4605      	mov	r5, r0
   d62fe:	4616      	mov	r6, r2
   d6300:	461f      	mov	r7, r3
    if (lock) {
   d6302:	f1b8 0f00 	cmp.w	r8, #0
   d6306:	d004      	beq.n	d6312 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d6308:	6840      	ldr	r0, [r0, #4]
   d630a:	9101      	str	r1, [sp, #4]
   d630c:	f002 fa10 	bl	d8730 <_ZN7TwoWire4lockEv>
   d6310:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d6312:	9101      	str	r1, [sp, #4]
   d6314:	2300      	movs	r3, #0
   d6316:	f10d 020f 	add.w	r2, sp, #15
   d631a:	4628      	mov	r0, r5
   d631c:	f7ff fefa 	bl	d6114 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d6320:	4604      	mov	r4, r0
   d6322:	b160      	cbz	r0, d633e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d6324:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6328:	ea03 0206 	and.w	r2, r3, r6
   d632c:	433a      	orrs	r2, r7
        if (newValue != value) {
   d632e:	4293      	cmp	r3, r2
   d6330:	d005      	beq.n	d633e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d6332:	9901      	ldr	r1, [sp, #4]
   d6334:	2300      	movs	r3, #0
   d6336:	4628      	mov	r0, r5
   d6338:	f7ff ff7c 	bl	d6234 <_ZN6AB180513writeRegisterEhhb>
   d633c:	4604      	mov	r4, r0
    if (lock) {
   d633e:	f1b8 0f00 	cmp.w	r8, #0
   d6342:	d002      	beq.n	d634a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d6344:	6868      	ldr	r0, [r5, #4]
   d6346:	f002 f9fc 	bl	d8742 <_ZN7TwoWire6unlockEv>
}
   d634a:	4620      	mov	r0, r4
   d634c:	b004      	add	sp, #16
   d634e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6352 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6352:	b513      	push	{r0, r1, r4, lr}
   d6354:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6356:	f10d 0207 	add.w	r2, sp, #7
   d635a:	f7ff fedb 	bl	d6114 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d635e:	b128      	cbz	r0, d636c <_ZN6AB180510isBitClearEhhb+0x1a>
   d6360:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6364:	421c      	tst	r4, r3
   d6366:	bf0c      	ite	eq
   d6368:	2001      	moveq	r0, #1
   d636a:	2000      	movne	r0, #0
}
   d636c:	b002      	add	sp, #8
   d636e:	bd10      	pop	{r4, pc}

000d6370 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6370:	b513      	push	{r0, r1, r4, lr}
   d6372:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6374:	f10d 0207 	add.w	r2, sp, #7
   d6378:	f7ff fecc 	bl	d6114 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d637c:	b128      	cbz	r0, d638a <_ZN6AB18058isBitSetEhhb+0x1a>
   d637e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6382:	421c      	tst	r4, r3
   d6384:	bf14      	ite	ne
   d6386:	2001      	movne	r0, #1
   d6388:	2000      	moveq	r0, #0
}
   d638a:	b002      	add	sp, #8
   d638c:	bd10      	pop	{r4, pc}

000d638e <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d638e:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d6390:	43d2      	mvns	r2, r2
   d6392:	9300      	str	r3, [sp, #0]
   d6394:	b2d2      	uxtb	r2, r2
   d6396:	2300      	movs	r3, #0
   d6398:	f7ff ffac 	bl	d62f4 <_ZN6AB180512maskRegisterEhhhb>
}
   d639c:	b003      	add	sp, #12
   d639e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d63a4 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d63a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d63a6:	2301      	movs	r3, #1
   d63a8:	f10d 0207 	add.w	r2, sp, #7
   d63ac:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d63ae:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d63b0:	f7ff feb0 	bl	d6114 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d63b4:	4605      	mov	r5, r0
   d63b6:	b938      	cbnz	r0, d63c8 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d63b8:	491e      	ldr	r1, [pc, #120]	; (d6434 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d63ba:	481f      	ldr	r0, [pc, #124]	; (d6438 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d63bc:	22ad      	movs	r2, #173	; 0xad
   d63be:	f7ff fe30 	bl	d6022 <_ZNK5spark6Logger5errorEPKcz>
}
   d63c2:	4628      	mov	r0, r5
   d63c4:	b003      	add	sp, #12
   d63c6:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d63c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d63cc:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d63d0:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d63d4:	d00b      	beq.n	d63ee <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d63d6:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d63d8:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d63da:	210f      	movs	r1, #15
   d63dc:	4620      	mov	r0, r4
   d63de:	f7ff ffd6 	bl	d638e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d63e2:	4a16      	ldr	r2, [pc, #88]	; (d643c <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d63e4:	4916      	ldr	r1, [pc, #88]	; (d6440 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d63e6:	4814      	ldr	r0, [pc, #80]	; (d6438 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d63e8:	f7fe f83e 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
   d63ec:	e7e9      	b.n	d63c2 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d63ee:	2208      	movs	r2, #8
   d63f0:	2117      	movs	r1, #23
   d63f2:	4620      	mov	r0, r4
   d63f4:	f7ff ffbc 	bl	d6370 <_ZN6AB18058isBitSetEhhb>
   d63f8:	b118      	cbz	r0, d6402 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d63fa:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d63fc:	4a11      	ldr	r2, [pc, #68]	; (d6444 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d63fe:	61e3      	str	r3, [r4, #28]
   d6400:	e7f0      	b.n	d63e4 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d6402:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6406:	071a      	lsls	r2, r3, #28
   d6408:	d509      	bpl.n	d641e <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d640a:	2303      	movs	r3, #3
   d640c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d640e:	2208      	movs	r2, #8
   d6410:	2301      	movs	r3, #1
   d6412:	210f      	movs	r1, #15
   d6414:	4620      	mov	r0, r4
   d6416:	f7ff ffba 	bl	d638e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d641a:	4a0b      	ldr	r2, [pc, #44]	; (d6448 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d641c:	e7e2      	b.n	d63e4 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d641e:	075b      	lsls	r3, r3, #29
   d6420:	d5cf      	bpl.n	d63c2 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d6422:	2204      	movs	r2, #4
   d6424:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d6426:	2301      	movs	r3, #1
   d6428:	210f      	movs	r1, #15
   d642a:	4620      	mov	r0, r4
   d642c:	f7ff ffaf 	bl	d638e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d6430:	4a06      	ldr	r2, [pc, #24]	; (d644c <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d6432:	e7d7      	b.n	d63e4 <_ZN6AB180516updateWakeReasonEv+0x40>
   d6434:	000dcb36 	.word	0x000dcb36
   d6438:	2003e5c0 	.word	0x2003e5c0
   d643c:	000dcb07 	.word	0x000dcb07
   d6440:	000dcb55 	.word	0x000dcb55
   d6444:	000dcb10 	.word	0x000dcb10
   d6448:	000dcb20 	.word	0x000dcb20
   d644c:	000dcb30 	.word	0x000dcb30

000d6450 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6450:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d6452:	9300      	str	r3, [sp, #0]
   d6454:	4613      	mov	r3, r2
   d6456:	22ff      	movs	r2, #255	; 0xff
   d6458:	f7ff ff4c 	bl	d62f4 <_ZN6AB180512maskRegisterEhhhb>
}
   d645c:	b003      	add	sp, #12
   d645e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6464 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6466:	460f      	mov	r7, r1
   d6468:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d646a:	2301      	movs	r3, #1
   d646c:	2200      	movs	r2, #0
   d646e:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6470:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6472:	f7ff fedf 	bl	d6234 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6476:	4604      	mov	r4, r0
   d6478:	b938      	cbnz	r0, d648a <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d647a:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d647e:	491e      	ldr	r1, [pc, #120]	; (d64f8 <_ZN6AB180517setCountdownTimerEib+0x94>)
   d6480:	481e      	ldr	r0, [pc, #120]	; (d64fc <_ZN6AB180517setCountdownTimerEib+0x98>)
   d6482:	f7ff fdce 	bl	d6022 <_ZNK5spark6Logger5errorEPKcz>
}
   d6486:	4620      	mov	r0, r4
   d6488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d648a:	2301      	movs	r3, #1
   d648c:	2223      	movs	r2, #35	; 0x23
   d648e:	2118      	movs	r1, #24
   d6490:	4628      	mov	r0, r5
   d6492:	f7ff fecf 	bl	d6234 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6496:	4604      	mov	r4, r0
   d6498:	b910      	cbnz	r0, d64a0 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d649a:	f240 229b 	movw	r2, #667	; 0x29b
   d649e:	e7ee      	b.n	d647e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d64a0:	2fff      	cmp	r7, #255	; 0xff
   d64a2:	bfa8      	it	ge
   d64a4:	27ff      	movge	r7, #255	; 0xff
   d64a6:	2f01      	cmp	r7, #1
   d64a8:	bfb8      	it	lt
   d64aa:	2701      	movlt	r7, #1
   d64ac:	2301      	movs	r3, #1
   d64ae:	b2fa      	uxtb	r2, r7
   d64b0:	2119      	movs	r1, #25
   d64b2:	4628      	mov	r0, r5
   d64b4:	f7ff febe 	bl	d6234 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d64b8:	4604      	mov	r4, r0
   d64ba:	b910      	cbnz	r0, d64c2 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d64bc:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d64c0:	e7dd      	b.n	d647e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d64c2:	2301      	movs	r3, #1
   d64c4:	2208      	movs	r2, #8
   d64c6:	2112      	movs	r1, #18
   d64c8:	4628      	mov	r0, r5
   d64ca:	f7ff ffc1 	bl	d6450 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d64ce:	4604      	mov	r4, r0
   d64d0:	b910      	cbnz	r0, d64d8 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d64d2:	f240 22af 	movw	r2, #687	; 0x2af
   d64d6:	e7d2      	b.n	d647e <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d64d8:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d64da:	f04f 0301 	mov.w	r3, #1
   d64de:	bf14      	ite	ne
   d64e0:	2283      	movne	r2, #131	; 0x83
   d64e2:	2282      	moveq	r2, #130	; 0x82
   d64e4:	2118      	movs	r1, #24
   d64e6:	4628      	mov	r0, r5
   d64e8:	f7ff fea4 	bl	d6234 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d64ec:	4604      	mov	r4, r0
   d64ee:	2800      	cmp	r0, #0
   d64f0:	d1c9      	bne.n	d6486 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d64f2:	f240 22b9 	movw	r2, #697	; 0x2b9
   d64f6:	e7c2      	b.n	d647e <_ZN6AB180517setCountdownTimerEib+0x1a>
   d64f8:	000dcb66 	.word	0x000dcb66
   d64fc:	2003e5c0 	.word	0x2003e5c0

000d6500 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d6500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d6504:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d6506:	4605      	mov	r5, r0
   d6508:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d650a:	484f      	ldr	r0, [pc, #316]	; (d6648 <_ZN6AB180513deepPowerDownEi+0x148>)
   d650c:	494f      	ldr	r1, [pc, #316]	; (d664c <_ZN6AB180513deepPowerDownEi+0x14c>)
   d650e:	f7fd ffab 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d6512:	2100      	movs	r1, #0
   d6514:	4628      	mov	r0, r5
   d6516:	f7ff fe99 	bl	d624c <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d651a:	4604      	mov	r4, r0
   d651c:	b948      	cbnz	r0, d6532 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d651e:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d6522:	494b      	ldr	r1, [pc, #300]	; (d6650 <_ZN6AB180513deepPowerDownEi+0x150>)
   d6524:	4848      	ldr	r0, [pc, #288]	; (d6648 <_ZN6AB180513deepPowerDownEi+0x148>)
   d6526:	f7ff fd7c 	bl	d6022 <_ZNK5spark6Logger5errorEPKcz>
}
   d652a:	4620      	mov	r0, r4
   d652c:	b003      	add	sp, #12
   d652e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d6532:	2301      	movs	r3, #1
   d6534:	461a      	mov	r2, r3
   d6536:	2130      	movs	r1, #48	; 0x30
   d6538:	4628      	mov	r0, r5
   d653a:	f7ff ff89 	bl	d6450 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d653e:	4604      	mov	r4, r0
   d6540:	b910      	cbnz	r0, d6548 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d6542:	f240 2205 	movw	r2, #517	; 0x205
   d6546:	e7ec      	b.n	d6522 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d6548:	2210      	movs	r2, #16
   d654a:	2301      	movs	r3, #1
   d654c:	4611      	mov	r1, r2
   d654e:	4628      	mov	r0, r5
   d6550:	f7ff ff1d 	bl	d638e <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d6554:	4604      	mov	r4, r0
   d6556:	b910      	cbnz	r0, d655e <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d6558:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d655c:	e7e1      	b.n	d6522 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d655e:	2301      	movs	r3, #1
   d6560:	2226      	movs	r2, #38	; 0x26
   d6562:	2113      	movs	r1, #19
   d6564:	4628      	mov	r0, r5
   d6566:	f7ff fe65 	bl	d6234 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d656a:	4604      	mov	r4, r0
   d656c:	b910      	cbnz	r0, d6574 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d656e:	f240 2213 	movw	r2, #531	; 0x213
   d6572:	e7d6      	b.n	d6522 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d6574:	2601      	movs	r6, #1
   d6576:	9600      	str	r6, [sp, #0]
   d6578:	4633      	mov	r3, r6
   d657a:	22fc      	movs	r2, #252	; 0xfc
   d657c:	2111      	movs	r1, #17
   d657e:	4628      	mov	r0, r5
   d6580:	f7ff feb8 	bl	d62f4 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6584:	4604      	mov	r4, r0
   d6586:	b910      	cbnz	r0, d658e <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d6588:	f240 221b 	movw	r2, #539	; 0x21b
   d658c:	e7c9      	b.n	d6522 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d658e:	2200      	movs	r2, #0
   d6590:	4639      	mov	r1, r7
   d6592:	4628      	mov	r0, r5
   d6594:	f7ff ff66 	bl	d6464 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d6598:	4604      	mov	r4, r0
   d659a:	b910      	cbnz	r0, d65a2 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d659c:	f240 2222 	movw	r2, #546	; 0x222
   d65a0:	e7bf      	b.n	d6522 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d65a2:	9600      	str	r6, [sp, #0]
   d65a4:	2302      	movs	r3, #2
   d65a6:	2277      	movs	r2, #119	; 0x77
   d65a8:	2110      	movs	r1, #16
   d65aa:	4628      	mov	r0, r5
   d65ac:	f7ff fea2 	bl	d62f4 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d65b0:	4604      	mov	r4, r0
   d65b2:	b910      	cbnz	r0, d65ba <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d65b4:	f240 222b 	movw	r2, #555	; 0x22b
   d65b8:	e7b3      	b.n	d6522 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d65ba:	4633      	mov	r3, r6
   d65bc:	2204      	movs	r2, #4
   d65be:	211c      	movs	r1, #28
   d65c0:	4628      	mov	r0, r5
   d65c2:	f7ff ff45 	bl	d6450 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d65c6:	4604      	mov	r4, r0
   d65c8:	b910      	cbnz	r0, d65d0 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d65ca:	f240 2232 	movw	r2, #562	; 0x232
   d65ce:	e7a8      	b.n	d6522 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d65d0:	9600      	str	r6, [sp, #0]
   d65d2:	2318      	movs	r3, #24
   d65d4:	22e3      	movs	r2, #227	; 0xe3
   d65d6:	2111      	movs	r1, #17
   d65d8:	4628      	mov	r0, r5
   d65da:	f7ff fe8b 	bl	d62f4 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d65de:	4604      	mov	r4, r0
   d65e0:	b910      	cbnz	r0, d65e8 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d65e2:	f240 2239 	movw	r2, #569	; 0x239
   d65e6:	e79c      	b.n	d6522 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d65e8:	4633      	mov	r3, r6
   d65ea:	22c0      	movs	r2, #192	; 0xc0
   d65ec:	2117      	movs	r1, #23
   d65ee:	4628      	mov	r0, r5
   d65f0:	f7ff fe20 	bl	d6234 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d65f4:	4604      	mov	r4, r0
   d65f6:	b910      	cbnz	r0, d65fe <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d65f8:	f44f 7210 	mov.w	r2, #576	; 0x240
   d65fc:	e791      	b.n	d6522 <_ZN6AB180513deepPowerDownEi+0x22>
   d65fe:	f000 ff3f 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6602:	f8df 9054 	ldr.w	r9, [pc, #84]	; d6658 <_ZN6AB180513deepPowerDownEi+0x158>
   d6606:	f8df 8040 	ldr.w	r8, [pc, #64]	; d6648 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d660a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d660e:	4606      	mov	r6, r0
   d6610:	434f      	muls	r7, r1
   d6612:	f000 ff35 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
   d6616:	1b80      	subs	r0, r0, r6
   d6618:	42b8      	cmp	r0, r7
   d661a:	d20e      	bcs.n	d663a <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d661c:	2201      	movs	r2, #1
   d661e:	2117      	movs	r1, #23
   d6620:	4628      	mov	r0, r5
   d6622:	f7ff fdbd 	bl	d61a0 <_ZN6AB180512readRegisterEhb>
   d6626:	4649      	mov	r1, r9
   d6628:	4602      	mov	r2, r0
   d662a:	4640      	mov	r0, r8
   d662c:	f7fd ff1c 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d6630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6634:	f001 fa64 	bl	d7b00 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6638:	e7eb      	b.n	d6612 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d663a:	4906      	ldr	r1, [pc, #24]	; (d6654 <_ZN6AB180513deepPowerDownEi+0x154>)
   d663c:	4802      	ldr	r0, [pc, #8]	; (d6648 <_ZN6AB180513deepPowerDownEi+0x148>)
   d663e:	f7ff fcf0 	bl	d6022 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d6642:	f002 fc0f 	bl	d8e64 <_ZN11SystemClass5resetEv>
    return true;
   d6646:	e770      	b.n	d652a <_ZN6AB180513deepPowerDownEi+0x2a>
   d6648:	2003e5c0 	.word	0x2003e5c0
   d664c:	000dcb91 	.word	0x000dcb91
   d6650:	000dcb86 	.word	0x000dcb86
   d6654:	000dcbb7 	.word	0x000dcbb7
   d6658:	000dcba2 	.word	0x000dcba2

000d665c <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d665c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6660:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6664:	4605      	mov	r5, r0
   d6666:	460c      	mov	r4, r1
   d6668:	4691      	mov	r9, r2
   d666a:	461f      	mov	r7, r3
    if (lock) {
   d666c:	f1ba 0f00 	cmp.w	sl, #0
   d6670:	d002      	beq.n	d6678 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6672:	6840      	ldr	r0, [r0, #4]
   d6674:	f002 f85c 	bl	d8730 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6678:	b307      	cbz	r7, d66bc <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d667a:	2f20      	cmp	r7, #32
   d667c:	463e      	mov	r6, r7
   d667e:	bf28      	it	cs
   d6680:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6682:	2c7f      	cmp	r4, #127	; 0x7f
   d6684:	d826      	bhi.n	d66d4 <_ZN6AB18057readRamEjPhjb+0x78>
   d6686:	1933      	adds	r3, r6, r4
   d6688:	2b80      	cmp	r3, #128	; 0x80
   d668a:	d901      	bls.n	d6690 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d668c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6690:	2301      	movs	r3, #1
   d6692:	2204      	movs	r2, #4
   d6694:	213f      	movs	r1, #63	; 0x3f
   d6696:	4628      	mov	r0, r5
   d6698:	f7ff fe79 	bl	d638e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d669c:	2300      	movs	r3, #0
   d669e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d66a2:	9300      	str	r3, [sp, #0]
   d66a4:	464a      	mov	r2, r9
   d66a6:	4633      	mov	r3, r6
   d66a8:	b2c9      	uxtb	r1, r1
   d66aa:	4628      	mov	r0, r5
   d66ac:	f7ff fce4 	bl	d6078 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d66b0:	4680      	mov	r8, r0
   d66b2:	b128      	cbz	r0, d66c0 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d66b4:	4434      	add	r4, r6
        dataLen -= count;
   d66b6:	1bbf      	subs	r7, r7, r6
        data += count;
   d66b8:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d66ba:	e7dd      	b.n	d6678 <_ZN6AB18057readRamEjPhjb+0x1c>
   d66bc:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d66c0:	f1ba 0f00 	cmp.w	sl, #0
   d66c4:	d002      	beq.n	d66cc <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d66c6:	6868      	ldr	r0, [r5, #4]
   d66c8:	f002 f83b 	bl	d8742 <_ZN7TwoWire6unlockEv>
}
   d66cc:	4640      	mov	r0, r8
   d66ce:	b002      	add	sp, #8
   d66d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d66d4:	2301      	movs	r3, #1
   d66d6:	2204      	movs	r2, #4
   d66d8:	213f      	movs	r1, #63	; 0x3f
   d66da:	4628      	mov	r0, r5
   d66dc:	f7ff feb8 	bl	d6450 <_ZN6AB180514setRegisterBitEhhb>
   d66e0:	e7dc      	b.n	d669c <_ZN6AB18057readRamEjPhjb+0x40>

000d66e2 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d66e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d66e6:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d66ea:	4605      	mov	r5, r0
   d66ec:	460c      	mov	r4, r1
   d66ee:	4691      	mov	r9, r2
   d66f0:	461f      	mov	r7, r3
    if (lock) {
   d66f2:	f1ba 0f00 	cmp.w	sl, #0
   d66f6:	d002      	beq.n	d66fe <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d66f8:	6840      	ldr	r0, [r0, #4]
   d66fa:	f002 f819 	bl	d8730 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d66fe:	b307      	cbz	r7, d6742 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6700:	2f1f      	cmp	r7, #31
   d6702:	463e      	mov	r6, r7
   d6704:	bf28      	it	cs
   d6706:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6708:	2c7f      	cmp	r4, #127	; 0x7f
   d670a:	d826      	bhi.n	d675a <_ZN6AB18058writeRamEjPKhjb+0x78>
   d670c:	1933      	adds	r3, r6, r4
   d670e:	2b80      	cmp	r3, #128	; 0x80
   d6710:	d901      	bls.n	d6716 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6712:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6716:	2301      	movs	r3, #1
   d6718:	2204      	movs	r2, #4
   d671a:	213f      	movs	r1, #63	; 0x3f
   d671c:	4628      	mov	r0, r5
   d671e:	f7ff fe36 	bl	d638e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6722:	2300      	movs	r3, #0
   d6724:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6728:	9300      	str	r3, [sp, #0]
   d672a:	464a      	mov	r2, r9
   d672c:	4633      	mov	r3, r6
   d672e:	b2c9      	uxtb	r1, r1
   d6730:	4628      	mov	r0, r5
   d6732:	f7ff fd43 	bl	d61bc <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d6736:	4680      	mov	r8, r0
   d6738:	b128      	cbz	r0, d6746 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d673a:	4434      	add	r4, r6
        dataLen -= count;
   d673c:	1bbf      	subs	r7, r7, r6
        data += count;
   d673e:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6740:	e7dd      	b.n	d66fe <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d6742:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6746:	f1ba 0f00 	cmp.w	sl, #0
   d674a:	d002      	beq.n	d6752 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d674c:	6868      	ldr	r0, [r5, #4]
   d674e:	f001 fff8 	bl	d8742 <_ZN7TwoWire6unlockEv>
}
   d6752:	4640      	mov	r0, r8
   d6754:	b002      	add	sp, #8
   d6756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d675a:	2301      	movs	r3, #1
   d675c:	2204      	movs	r2, #4
   d675e:	213f      	movs	r1, #63	; 0x3f
   d6760:	4628      	mov	r0, r5
   d6762:	f7ff fe75 	bl	d6450 <_ZN6AB180514setRegisterBitEhhb>
   d6766:	e7dc      	b.n	d6722 <_ZN6AB18058writeRamEjPKhjb+0x40>

000d6768 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d6768:	b530      	push	{r4, r5, lr}
   d676a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d676c:	680d      	ldr	r5, [r1, #0]
   d676e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6772:	9503      	str	r5, [sp, #12]
   d6774:	684d      	ldr	r5, [r1, #4]
   d6776:	9502      	str	r5, [sp, #8]
   d6778:	688d      	ldr	r5, [r1, #8]
   d677a:	9501      	str	r5, [sp, #4]
   d677c:	68c9      	ldr	r1, [r1, #12]
   d677e:	9100      	str	r1, [sp, #0]
   d6780:	3301      	adds	r3, #1
   d6782:	4904      	ldr	r1, [pc, #16]	; (d6794 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6784:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d6788:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d678a:	f002 fadd 	bl	d8d48 <_ZN6String6formatEPKcz>
}
   d678e:	4620      	mov	r0, r4
   d6790:	b005      	add	sp, #20
   d6792:	bd30      	pop	{r4, r5, pc}
   d6794:	000dcbc9 	.word	0x000dcbc9

000d6798 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6798:	1103      	asrs	r3, r0, #4
}
   d679a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d679c:	f000 000f 	and.w	r0, r0, #15
}
   d67a0:	fb02 0003 	mla	r0, r2, r3, r0
   d67a4:	4770      	bx	lr

000d67a6 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d67a6:	b538      	push	{r3, r4, r5, lr}
   d67a8:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d67aa:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d67ac:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d67ae:	f7ff fff3 	bl	d6798 <_ZN6AB180510bcdToValueEh>
   d67b2:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d67b4:	7860      	ldrb	r0, [r4, #1]
   d67b6:	f7ff ffef 	bl	d6798 <_ZN6AB180510bcdToValueEh>
   d67ba:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d67bc:	78a0      	ldrb	r0, [r4, #2]
   d67be:	f7ff ffeb 	bl	d6798 <_ZN6AB180510bcdToValueEh>
   d67c2:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d67c4:	78e0      	ldrb	r0, [r4, #3]
   d67c6:	f7ff ffe7 	bl	d6798 <_ZN6AB180510bcdToValueEh>
   d67ca:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d67cc:	7920      	ldrb	r0, [r4, #4]
   d67ce:	f7ff ffe3 	bl	d6798 <_ZN6AB180510bcdToValueEh>
   d67d2:	3801      	subs	r0, #1
   d67d4:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d67d6:	b92d      	cbnz	r5, d67e4 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d67d8:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d67da:	7828      	ldrb	r0, [r5, #0]
   d67dc:	f7ff ffdc 	bl	d6798 <_ZN6AB180510bcdToValueEh>
   d67e0:	6188      	str	r0, [r1, #24]
}
   d67e2:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d67e4:	7960      	ldrb	r0, [r4, #5]
   d67e6:	f7ff ffd7 	bl	d6798 <_ZN6AB180510bcdToValueEh>
   d67ea:	3064      	adds	r0, #100	; 0x64
   d67ec:	1da5      	adds	r5, r4, #6
   d67ee:	6148      	str	r0, [r1, #20]
   d67f0:	e7f3      	b.n	d67da <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d67f4 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d67f4:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d67f6:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d67f8:	b088      	sub	sp, #32
   d67fa:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d67fc:	461a      	mov	r2, r3
   d67fe:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6800:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6802:	f7ff fda6 	bl	d6352 <_ZN6AB180510isBitClearEhhb>
   d6806:	b1f0      	cbz	r0, d6846 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6808:	2308      	movs	r3, #8
   d680a:	2601      	movs	r6, #1
   d680c:	4620      	mov	r0, r4
   d680e:	9600      	str	r6, [sp, #0]
   d6810:	eb0d 0203 	add.w	r2, sp, r3
   d6814:	2100      	movs	r1, #0
   d6816:	f7ff fc2f 	bl	d6078 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d681a:	4604      	mov	r4, r0
   d681c:	b198      	cbz	r0, d6846 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d681e:	4632      	mov	r2, r6
   d6820:	4629      	mov	r1, r5
   d6822:	f10d 0009 	add.w	r0, sp, #9
   d6826:	f7ff ffbe 	bl	d67a6 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d682a:	a804      	add	r0, sp, #16
   d682c:	f7ff ff9c 	bl	d6768 <_ZN6AB180510tmToStringEPK2tm>
   d6830:	4808      	ldr	r0, [pc, #32]	; (d6854 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d6832:	9a04      	ldr	r2, [sp, #16]
   d6834:	4908      	ldr	r1, [pc, #32]	; (d6858 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d6836:	f7fd fe17 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
   d683a:	a804      	add	r0, sp, #16
   d683c:	f002 f9e0 	bl	d8c00 <_ZN6StringD1Ev>
}
   d6840:	4620      	mov	r0, r4
   d6842:	b008      	add	sp, #32
   d6844:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d6846:	2224      	movs	r2, #36	; 0x24
   d6848:	2100      	movs	r1, #0
   d684a:	4628      	mov	r0, r5
   d684c:	f003 fe6c 	bl	da528 <memset>
   d6850:	2400      	movs	r4, #0
   d6852:	e7f5      	b.n	d6840 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d6854:	2003e5c0 	.word	0x2003e5c0
   d6858:	000dcbe7 	.word	0x000dcbe7

000d685c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d685c:	b530      	push	{r4, r5, lr}
   d685e:	b08b      	sub	sp, #44	; 0x2c
   d6860:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6862:	a901      	add	r1, sp, #4
   d6864:	f7ff ffc6 	bl	d67f4 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d6868:	4604      	mov	r4, r0
   d686a:	b120      	cbz	r0, d6876 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d686c:	a801      	add	r0, sp, #4
   d686e:	f001 f933 	bl	d7ad8 <mktime>
   d6872:	e9c5 0100 	strd	r0, r1, [r5]
}
   d6876:	4620      	mov	r0, r4
   d6878:	b00b      	add	sp, #44	; 0x2c
   d687a:	bd30      	pop	{r4, r5, pc}

000d687c <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d687c:	b510      	push	{r4, lr}
   d687e:	4604      	mov	r4, r0
   d6880:	b088      	sub	sp, #32
    if (callBegin) {
   d6882:	b111      	cbz	r1, d688a <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d6884:	6840      	ldr	r0, [r0, #4]
   d6886:	f001 ff01 	bl	d868c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d688a:	4620      	mov	r0, r4
   d688c:	f7ff fc4a 	bl	d6124 <_ZN6AB180510detectChipEv>
   d6890:	b370      	cbz	r0, d68f0 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6892:	4620      	mov	r0, r4
   d6894:	f7ff fd86 	bl	d63a4 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6898:	2301      	movs	r3, #1
   d689a:	461a      	mov	r2, r3
   d689c:	2110      	movs	r1, #16
   d689e:	4620      	mov	r0, r4
   d68a0:	f7ff fd57 	bl	d6352 <_ZN6AB180510isBitClearEhhb>
   d68a4:	b1d8      	cbz	r0, d68de <_ZN6AB18055setupEb+0x62>
   d68a6:	f002 fd3d 	bl	d9324 <_ZN9TimeClass7isValidEv>
   d68aa:	b9c0      	cbnz	r0, d68de <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d68ac:	a902      	add	r1, sp, #8
   d68ae:	4620      	mov	r0, r4
   d68b0:	f7ff ffd4 	bl	d685c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d68b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d68b8:	f002 fc3a 	bl	d9130 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d68bc:	4b0f      	ldr	r3, [pc, #60]	; (d68fc <_ZN6AB18055setupEb+0x80>)
   d68be:	4910      	ldr	r1, [pc, #64]	; (d6900 <_ZN6AB18055setupEb+0x84>)
   d68c0:	681b      	ldr	r3, [r3, #0]
   d68c2:	9300      	str	r3, [sp, #0]
   d68c4:	a804      	add	r0, sp, #16
   d68c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d68ca:	f002 fce9 	bl	d92a0 <_ZN9TimeClass6formatExPKc>
   d68ce:	480d      	ldr	r0, [pc, #52]	; (d6904 <_ZN6AB18055setupEb+0x88>)
   d68d0:	9a04      	ldr	r2, [sp, #16]
   d68d2:	490d      	ldr	r1, [pc, #52]	; (d6908 <_ZN6AB18055setupEb+0x8c>)
   d68d4:	f7fd fdc8 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
   d68d8:	a804      	add	r0, sp, #16
   d68da:	f002 f991 	bl	d8c00 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d68de:	4a0b      	ldr	r2, [pc, #44]	; (d690c <_ZN6AB18055setupEb+0x90>)
   d68e0:	2300      	movs	r3, #0
   d68e2:	2100      	movs	r1, #0
   d68e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d68e8:	f000 ff64 	bl	d77b4 <system_subscribe_event>
}
   d68ec:	b008      	add	sp, #32
   d68ee:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d68f0:	4907      	ldr	r1, [pc, #28]	; (d6910 <_ZN6AB18055setupEb+0x94>)
   d68f2:	4804      	ldr	r0, [pc, #16]	; (d6904 <_ZN6AB18055setupEb+0x88>)
   d68f4:	f7ff fb95 	bl	d6022 <_ZNK5spark6Logger5errorEPKcz>
   d68f8:	e7f1      	b.n	d68de <_ZN6AB18055setupEb+0x62>
   d68fa:	bf00      	nop
   d68fc:	2003e220 	.word	0x2003e220
   d6900:	2003e634 	.word	0x2003e634
   d6904:	2003e5c0 	.word	0x2003e5c0
   d6908:	000dcbf5 	.word	0x000dcbf5
   d690c:	000d62d1 	.word	0x000d62d1
   d6910:	000dcc12 	.word	0x000dcc12

000d6914 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6914:	220a      	movs	r2, #10
   d6916:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d691a:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d691e:	fb93 f1f2 	sdiv	r1, r3, r2
   d6922:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6926:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d692a:	b2c0      	uxtb	r0, r0
   d692c:	4770      	bx	lr

000d692e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d692e:	b570      	push	{r4, r5, r6, lr}
   d6930:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6932:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6934:	460c      	mov	r4, r1
   d6936:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6938:	f7ff ffec 	bl	d6914 <_ZN6AB180510valueToBcdEi>
   d693c:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d693e:	6868      	ldr	r0, [r5, #4]
   d6940:	f7ff ffe8 	bl	d6914 <_ZN6AB180510valueToBcdEi>
   d6944:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d6946:	68a8      	ldr	r0, [r5, #8]
   d6948:	f7ff ffe4 	bl	d6914 <_ZN6AB180510valueToBcdEi>
   d694c:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d694e:	68e8      	ldr	r0, [r5, #12]
   d6950:	f7ff ffe0 	bl	d6914 <_ZN6AB180510valueToBcdEi>
   d6954:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6956:	6928      	ldr	r0, [r5, #16]
   d6958:	3001      	adds	r0, #1
   d695a:	f7ff ffdb 	bl	d6914 <_ZN6AB180510valueToBcdEi>
   d695e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d6960:	b92e      	cbnz	r6, d696e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6962:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d6964:	69a8      	ldr	r0, [r5, #24]
   d6966:	f7ff ffd5 	bl	d6914 <_ZN6AB180510valueToBcdEi>
   d696a:	7030      	strb	r0, [r6, #0]
}
   d696c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d696e:	696a      	ldr	r2, [r5, #20]
   d6970:	2364      	movs	r3, #100	; 0x64
   d6972:	fb92 f0f3 	sdiv	r0, r2, r3
   d6976:	fb03 2010 	mls	r0, r3, r0, r2
   d697a:	f7ff ffcb 	bl	d6914 <_ZN6AB180510valueToBcdEi>
   d697e:	1da6      	adds	r6, r4, #6
   d6980:	7160      	strb	r0, [r4, #5]
   d6982:	e7ef      	b.n	d6964 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d6984 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6984:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6986:	b087      	sub	sp, #28
   d6988:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d698a:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d698c:	4616      	mov	r6, r2
   d698e:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6990:	f7ff feea 	bl	d6768 <_ZN6AB180510tmToStringEPK2tm>
   d6994:	481e      	ldr	r0, [pc, #120]	; (d6a10 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6996:	9a02      	ldr	r2, [sp, #8]
   d6998:	491e      	ldr	r1, [pc, #120]	; (d6a14 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d699a:	f7fd fd65 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
   d699e:	a802      	add	r0, sp, #8
   d69a0:	f002 f92e 	bl	d8c00 <_ZN6StringD1Ev>
    if (lock) {
   d69a4:	b116      	cbz	r6, d69ac <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d69a6:	6868      	ldr	r0, [r5, #4]
   d69a8:	f001 fec2 	bl	d8730 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d69ac:	4620      	mov	r0, r4
   d69ae:	2201      	movs	r2, #1
   d69b0:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d69b4:	2700      	movs	r7, #0
   d69b6:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d69ba:	f7ff ffb8 	bl	d692e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d69be:	2301      	movs	r3, #1
   d69c0:	461a      	mov	r2, r3
   d69c2:	2110      	movs	r1, #16
   d69c4:	4628      	mov	r0, r5
   d69c6:	f7ff fd43 	bl	d6450 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d69ca:	4604      	mov	r4, r0
   d69cc:	b1e8      	cbz	r0, d6a0a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d69ce:	2308      	movs	r3, #8
   d69d0:	9700      	str	r7, [sp, #0]
   d69d2:	eb0d 0203 	add.w	r2, sp, r3
   d69d6:	4639      	mov	r1, r7
   d69d8:	4628      	mov	r0, r5
   d69da:	f7ff fbef 	bl	d61bc <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d69de:	4604      	mov	r4, r0
   d69e0:	b160      	cbz	r0, d69fc <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d69e2:	2301      	movs	r3, #1
   d69e4:	461a      	mov	r2, r3
   d69e6:	2110      	movs	r1, #16
   d69e8:	4628      	mov	r0, r5
   d69ea:	f7ff fcd0 	bl	d638e <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d69ee:	b116      	cbz	r6, d69f6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d69f0:	6868      	ldr	r0, [r5, #4]
   d69f2:	f001 fea6 	bl	d8742 <_ZN7TwoWire6unlockEv>
}
   d69f6:	4620      	mov	r0, r4
   d69f8:	b007      	add	sp, #28
   d69fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d69fc:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d6a00:	4905      	ldr	r1, [pc, #20]	; (d6a18 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d6a02:	4803      	ldr	r0, [pc, #12]	; (d6a10 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6a04:	f7ff fb0d 	bl	d6022 <_ZNK5spark6Logger5errorEPKcz>
   d6a08:	e7f1      	b.n	d69ee <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d6a0a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d6a0e:	e7f7      	b.n	d6a00 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d6a10:	2003e5c0 	.word	0x2003e5c0
   d6a14:	000dcc2a 	.word	0x000dcc2a
   d6a18:	000dcc38 	.word	0x000dcc38

000d6a1c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6a1c:	b513      	push	{r0, r1, r4, lr}
   d6a1e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d6a20:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6a22:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d6a26:	f003 fd45 	bl	da4b4 <gmtime>
    return setRtcFromTm(tm, lock);
   d6a2a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d6a2e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d6a30:	4620      	mov	r0, r4
   d6a32:	f7ff ffa7 	bl	d6984 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d6a36:	b002      	add	sp, #8
   d6a38:	bd10      	pop	{r4, pc}
	...

000d6a3c <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d6a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6a3e:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d6a40:	b089      	sub	sp, #36	; 0x24
   d6a42:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6a44:	bb75      	cbnz	r5, d6aa4 <_ZN6AB18054loopEv+0x68>
   d6a46:	f002 fc6d 	bl	d9324 <_ZN9TimeClass7isValidEv>
   d6a4a:	b358      	cbz	r0, d6aa4 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d6a4c:	2600      	movs	r6, #0
   d6a4e:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d6a50:	a904      	add	r1, sp, #16
   d6a52:	4628      	mov	r0, r5
        tm = 0;
   d6a54:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d6a58:	f000 ff5e 	bl	d7918 <spark_sync_time_last>
   d6a5c:	b310      	cbz	r0, d6aa4 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d6a5e:	2501      	movs	r5, #1
   d6a60:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d6a62:	f002 fc7c 	bl	d935e <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d6a66:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d6a68:	4602      	mov	r2, r0
   d6a6a:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d6a6c:	4620      	mov	r0, r4
        time_t time = Time.now();
   d6a6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d6a72:	f7ff ffd3 	bl	d6a1c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d6a76:	a902      	add	r1, sp, #8
   d6a78:	4620      	mov	r0, r4
        time = 0;
   d6a7a:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d6a7e:	f7ff feed 	bl	d685c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6a82:	4b12      	ldr	r3, [pc, #72]	; (d6acc <_ZN6AB18054loopEv+0x90>)
   d6a84:	4912      	ldr	r1, [pc, #72]	; (d6ad0 <_ZN6AB18054loopEv+0x94>)
   d6a86:	681b      	ldr	r3, [r3, #0]
   d6a88:	9300      	str	r3, [sp, #0]
   d6a8a:	a804      	add	r0, sp, #16
   d6a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6a90:	f002 fc06 	bl	d92a0 <_ZN9TimeClass6formatExPKc>
   d6a94:	480f      	ldr	r0, [pc, #60]	; (d6ad4 <_ZN6AB18054loopEv+0x98>)
   d6a96:	9a04      	ldr	r2, [sp, #16]
   d6a98:	490f      	ldr	r1, [pc, #60]	; (d6ad8 <_ZN6AB18054loopEv+0x9c>)
   d6a9a:	f7fd fce5 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
   d6a9e:	a804      	add	r0, sp, #16
   d6aa0:	f002 f8ae 	bl	d8c00 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6aa4:	6963      	ldr	r3, [r4, #20]
   d6aa6:	b173      	cbz	r3, d6ac6 <_ZN6AB18054loopEv+0x8a>
   d6aa8:	f000 fcea 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d6aac:	6923      	ldr	r3, [r4, #16]
   d6aae:	1ac0      	subs	r0, r0, r3
   d6ab0:	6963      	ldr	r3, [r4, #20]
   d6ab2:	4298      	cmp	r0, r3
   d6ab4:	d307      	bcc.n	d6ac6 <_ZN6AB18054loopEv+0x8a>
   d6ab6:	f000 fce3 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d6aba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d6abe:	6120      	str	r0, [r4, #16]
            setWDT();
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	f7ff fbc3 	bl	d624c <_ZN6AB18056setWDTEi>
}
   d6ac6:	b009      	add	sp, #36	; 0x24
   d6ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6aca:	bf00      	nop
   d6acc:	2003e220 	.word	0x2003e220
   d6ad0:	2003e634 	.word	0x2003e634
   d6ad4:	2003e5c0 	.word	0x2003e5c0
   d6ad8:	000dcc53 	.word	0x000dcc53

000d6adc <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d6adc:	4b01      	ldr	r3, [pc, #4]	; (d6ae4 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d6ade:	4a02      	ldr	r2, [pc, #8]	; (d6ae8 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6ae0:	601a      	str	r2, [r3, #0]
}
   d6ae2:	4770      	bx	lr
   d6ae4:	2003e5c0 	.word	0x2003e5c0
   d6ae8:	000dcc69 	.word	0x000dcc69

000d6aec <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d6aec:	4770      	bx	lr

000d6aee <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d6aee:	b510      	push	{r4, lr}
}
   d6af0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d6af2:	4604      	mov	r4, r0
}
   d6af4:	f002 ff47 	bl	d9986 <_ZdlPvj>
   d6af8:	4620      	mov	r0, r4
   d6afa:	bd10      	pop	{r4, pc}

000d6afc <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d6afc:	6803      	ldr	r3, [r0, #0]
   d6afe:	b2c9      	uxtb	r1, r1
   d6b00:	689b      	ldr	r3, [r3, #8]
   d6b02:	4718      	bx	r3

000d6b04 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d6b04:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d6b06:	4d03      	ldr	r5, [pc, #12]	; (d6b14 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d6b08:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d6b0c:	e9c0 5100 	strd	r5, r1, [r0]
}
   d6b10:	bd30      	pop	{r4, r5, pc}
   d6b12:	bf00      	nop
   d6b14:	000dccc0 	.word	0x000dccc0

000d6b18 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d6b18:	6840      	ldr	r0, [r0, #4]
   d6b1a:	f001 bdb7 	b.w	d868c <_ZN7TwoWire5beginEv>

000d6b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6b1e:	b510      	push	{r4, lr}
   d6b20:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6b22:	6800      	ldr	r0, [r0, #0]
   d6b24:	f001 fe0d 	bl	d8742 <_ZN7TwoWire6unlockEv>
   d6b28:	4620      	mov	r0, r4
   d6b2a:	bd10      	pop	{r4, pc}

000d6b2c <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d6b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b30:	b08a      	sub	sp, #40	; 0x28
   d6b32:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d6b34:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6b36:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6b38:	f001 fdfa 	bl	d8730 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d6b3c:	221e      	movs	r2, #30
   d6b3e:	2100      	movs	r1, #0
   d6b40:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d6b42:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d6b44:	f003 fcf0 	bl	da528 <memset>
		size_t framAddr = 0;
   d6b48:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d6b4a:	b1ef      	cbz	r7, d6b88 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d6b4c:	6823      	ldr	r3, [r4, #0]
   d6b4e:	2f1e      	cmp	r7, #30
   d6b50:	46b8      	mov	r8, r7
   d6b52:	bf28      	it	cs
   d6b54:	f04f 081e 	movcs.w	r8, #30
   d6b58:	68dd      	ldr	r5, [r3, #12]
   d6b5a:	aa02      	add	r2, sp, #8
   d6b5c:	4643      	mov	r3, r8
   d6b5e:	4631      	mov	r1, r6
   d6b60:	4620      	mov	r0, r4
   d6b62:	47a8      	blx	r5
			if (!result) {
   d6b64:	4605      	mov	r5, r0
   d6b66:	b958      	cbnz	r0, d6b80 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d6b68:	480a      	ldr	r0, [pc, #40]	; (d6b94 <_ZN6MB85RC5eraseEv+0x68>)
   d6b6a:	490b      	ldr	r1, [pc, #44]	; (d6b98 <_ZN6MB85RC5eraseEv+0x6c>)
   d6b6c:	4632      	mov	r2, r6
   d6b6e:	f7fd fc7b 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d6b72:	a801      	add	r0, sp, #4
   d6b74:	f7ff ffd3 	bl	d6b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d6b78:	4628      	mov	r0, r5
   d6b7a:	b00a      	add	sp, #40	; 0x28
   d6b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d6b80:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d6b84:	4446      	add	r6, r8
		while(totalLen > 0) {
   d6b86:	e7e0      	b.n	d6b4a <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d6b88:	a801      	add	r0, sp, #4
   d6b8a:	f7ff ffc8 	bl	d6b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d6b8e:	2501      	movs	r5, #1
   d6b90:	e7f2      	b.n	d6b78 <_ZN6MB85RC5eraseEv+0x4c>
   d6b92:	bf00      	nop
   d6b94:	2003e608 	.word	0x2003e608
   d6b98:	000dcc8c 	.word	0x000dcc8c

000d6b9c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6ba0:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6ba2:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6ba4:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6ba6:	460d      	mov	r5, r1
   d6ba8:	4616      	mov	r6, r2
   d6baa:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d6bac:	f001 fdc0 	bl	d8730 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d6bb0:	b1a7      	cbz	r7, d6bdc <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6bb2:	68e1      	ldr	r1, [r4, #12]
   d6bb4:	6860      	ldr	r0, [r4, #4]
   d6bb6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6bba:	f001 fd9a 	bl	d86f2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6bbe:	0a29      	lsrs	r1, r5, #8
   d6bc0:	6860      	ldr	r0, [r4, #4]
   d6bc2:	f7ff ff9b 	bl	d6afc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6bc6:	4629      	mov	r1, r5
   d6bc8:	6860      	ldr	r0, [r4, #4]
   d6bca:	f7ff ff97 	bl	d6afc <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d6bce:	6860      	ldr	r0, [r4, #4]
   d6bd0:	2100      	movs	r1, #0
   d6bd2:	f001 fda9 	bl	d8728 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6bd6:	b148      	cbz	r0, d6bec <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d6bd8:	2400      	movs	r4, #0
   d6bda:	e000      	b.n	d6bde <_ZN6MB85RC8readDataEjPhj+0x42>
   d6bdc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6bde:	a801      	add	r0, sp, #4
   d6be0:	f7ff ff9d 	bl	d6b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d6be4:	4620      	mov	r0, r4
   d6be6:	b003      	add	sp, #12
   d6be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d6bec:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d6bee:	7b21      	ldrb	r1, [r4, #12]
   d6bf0:	6860      	ldr	r0, [r4, #4]
   d6bf2:	46b8      	mov	r8, r7
   d6bf4:	bf28      	it	cs
   d6bf6:	f04f 0820 	movcs.w	r8, #32
   d6bfa:	2301      	movs	r3, #1
   d6bfc:	4642      	mov	r2, r8
   d6bfe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6c02:	f001 fd60 	bl	d86c6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d6c06:	f002 fe69 	bl	d98dc <_Z19__fetch_global_Wirev>
   d6c0a:	6803      	ldr	r3, [r0, #0]
   d6c0c:	691b      	ldr	r3, [r3, #16]
   d6c0e:	4798      	blx	r3
   d6c10:	4540      	cmp	r0, r8
   d6c12:	dbe1      	blt.n	d6bd8 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d6c14:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d6c18:	f002 fe60 	bl	d98dc <_Z19__fetch_global_Wirev>
   d6c1c:	6803      	ldr	r3, [r0, #0]
   d6c1e:	695b      	ldr	r3, [r3, #20]
   d6c20:	4798      	blx	r3
   d6c22:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d6c26:	454e      	cmp	r6, r9
   d6c28:	d1f6      	bne.n	d6c18 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d6c2a:	4445      	add	r5, r8
   d6c2c:	eba7 0708 	sub.w	r7, r7, r8
   d6c30:	e7be      	b.n	d6bb0 <_ZN6MB85RC8readDataEjPhj+0x14>

000d6c32 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c36:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6c38:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c3a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6c3c:	460e      	mov	r6, r1
   d6c3e:	4690      	mov	r8, r2
   d6c40:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d6c42:	f001 fd75 	bl	d8730 <_ZN7TwoWire4lockEv>
   d6c46:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d6c4a:	f1b9 0f00 	cmp.w	r9, #0
   d6c4e:	d02a      	beq.n	d6ca6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d6c50:	b34d      	cbz	r5, d6ca6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6c52:	68e1      	ldr	r1, [r4, #12]
   d6c54:	6860      	ldr	r0, [r4, #4]
   d6c56:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6c5a:	f001 fd4a 	bl	d86f2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6c5e:	0a31      	lsrs	r1, r6, #8
   d6c60:	6860      	ldr	r0, [r4, #4]
   d6c62:	f7ff ff4b 	bl	d6afc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6c66:	6860      	ldr	r0, [r4, #4]
   d6c68:	4631      	mov	r1, r6
   d6c6a:	f7ff ff47 	bl	d6afc <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6c6e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d6c72:	4647      	mov	r7, r8
   d6c74:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d6c78:	6860      	ldr	r0, [r4, #4]
   d6c7a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d6c7e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d6c80:	3d01      	subs	r5, #1
				wire.write(*data);
   d6c82:	689b      	ldr	r3, [r3, #8]
   d6c84:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6c86:	4555      	cmp	r5, sl
   d6c88:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d6c8c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6c8e:	d001      	beq.n	d6c94 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d6c90:	2d00      	cmp	r5, #0
   d6c92:	d1f1      	bne.n	d6c78 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d6c94:	6860      	ldr	r0, [r4, #4]
   d6c96:	2101      	movs	r1, #1
   d6c98:	f001 fd46 	bl	d8728 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6c9c:	2800      	cmp	r0, #0
   d6c9e:	d0d7      	beq.n	d6c50 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d6ca0:	f04f 0900 	mov.w	r9, #0
   d6ca4:	e7d1      	b.n	d6c4a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d6ca6:	a801      	add	r0, sp, #4
   d6ca8:	f7ff ff39 	bl	d6b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d6cac:	4648      	mov	r0, r9
   d6cae:	b003      	add	sp, #12
   d6cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6cb4 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6cb8:	b08b      	sub	sp, #44	; 0x2c
   d6cba:	460e      	mov	r6, r1
   d6cbc:	4615      	mov	r5, r2
   d6cbe:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d6cc0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6cc2:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6cc4:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d6cc6:	f001 fd33 	bl	d8730 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d6cca:	42ae      	cmp	r6, r5
   d6ccc:	d229      	bcs.n	d6d22 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d6cce:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d6cd0:	4425      	add	r5, r4
			while(numBytes > 0) {
   d6cd2:	b18c      	cbz	r4, d6cf8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d6cd4:	2c1e      	cmp	r4, #30
   d6cd6:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6cd8:	f8d8 3000 	ldr.w	r3, [r8]
   d6cdc:	bf28      	it	cs
   d6cde:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d6ce0:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d6ce2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6ce6:	aa02      	add	r2, sp, #8
   d6ce8:	463b      	mov	r3, r7
   d6cea:	4631      	mov	r1, r6
   d6cec:	4640      	mov	r0, r8
				framAddrTo -= count;
   d6cee:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d6cf0:	47c8      	blx	r9
				if (!result) {
   d6cf2:	b948      	cbnz	r0, d6d08 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6cf4:	2400      	movs	r4, #0
   d6cf6:	e000      	b.n	d6cfa <_ZN6MB85RC8moveDataEjjj+0x46>
   d6cf8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6cfa:	a801      	add	r0, sp, #4
   d6cfc:	f7ff ff0f 	bl	d6b1e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d6d00:	4620      	mov	r0, r4
   d6d02:	b00b      	add	sp, #44	; 0x2c
   d6d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d6d08:	f8d8 3000 	ldr.w	r3, [r8]
   d6d0c:	aa02      	add	r2, sp, #8
   d6d0e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6d12:	4629      	mov	r1, r5
   d6d14:	463b      	mov	r3, r7
   d6d16:	4640      	mov	r0, r8
   d6d18:	47c8      	blx	r9
				if (!result) {
   d6d1a:	2800      	cmp	r0, #0
   d6d1c:	d0ea      	beq.n	d6cf4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d6d1e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6d20:	e7d7      	b.n	d6cd2 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d6d22:	d9e9      	bls.n	d6cf8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d6d24:	2c00      	cmp	r4, #0
   d6d26:	d0e7      	beq.n	d6cf8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d6d28:	f8d8 3000 	ldr.w	r3, [r8]
   d6d2c:	2c1e      	cmp	r4, #30
   d6d2e:	4627      	mov	r7, r4
   d6d30:	bf28      	it	cs
   d6d32:	271e      	movcs	r7, #30
   d6d34:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6d38:	aa02      	add	r2, sp, #8
   d6d3a:	463b      	mov	r3, r7
   d6d3c:	4631      	mov	r1, r6
   d6d3e:	4640      	mov	r0, r8
   d6d40:	47c8      	blx	r9
				if (!result) {
   d6d42:	2800      	cmp	r0, #0
   d6d44:	d0d6      	beq.n	d6cf4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d6d46:	f8d8 3000 	ldr.w	r3, [r8]
   d6d4a:	aa02      	add	r2, sp, #8
   d6d4c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6d50:	4629      	mov	r1, r5
   d6d52:	463b      	mov	r3, r7
   d6d54:	4640      	mov	r0, r8
   d6d56:	47c8      	blx	r9
				if (!result) {
   d6d58:	2800      	cmp	r0, #0
   d6d5a:	d0cb      	beq.n	d6cf4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d6d5c:	443e      	add	r6, r7
				framAddrTo += count;
   d6d5e:	443d      	add	r5, r7
				numBytes -= count;
   d6d60:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6d62:	e7df      	b.n	d6d24 <_ZN6MB85RC8moveDataEjjj+0x70>

000d6d64 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6d64:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6d66:	4603      	mov	r3, r0
	switch (__op)
   d6d68:	d102      	bne.n	d6d70 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d6d6a:	6001      	str	r1, [r0, #0]
      }
   d6d6c:	2000      	movs	r0, #0
   d6d6e:	4770      	bx	lr
	  switch (__op)
   d6d70:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6d72:	bf04      	itt	eq
   d6d74:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6d78:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d6d7c:	e7f6      	b.n	d6d6c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d6d7e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6d7e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6d80:	2301      	movs	r3, #1
   d6d82:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6d84:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d6d86:	4604      	mov	r4, r0
        if (th->func) {
   d6d88:	b143      	cbz	r3, d6d9c <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d6d8a:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d8c:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d6d8e:	2301      	movs	r3, #1
   d6d90:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6d92:	2000      	movs	r0, #0
    }
   d6d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6d98:	f000 bb3a 	b.w	d7410 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6d9c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6d9e:	2800      	cmp	r0, #0
   d6da0:	d0f5      	beq.n	d6d8e <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d6da2:	6883      	ldr	r3, [r0, #8]
   d6da4:	b90b      	cbnz	r3, d6daa <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d6da6:	f002 fdf4 	bl	d9992 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6daa:	68c3      	ldr	r3, [r0, #12]
   d6dac:	e7ee      	b.n	d6d8c <_ZN6Thread3runEPv+0xe>

000d6dae <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6dae:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6db0:	6842      	ldr	r2, [r0, #4]
   d6db2:	4603      	mov	r3, r0
   d6db4:	1054      	asrs	r4, r2, #1
   d6db6:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6dba:	07d2      	lsls	r2, r2, #31
   d6dbc:	bf48      	it	mi
   d6dbe:	590a      	ldrmi	r2, [r1, r4]
   d6dc0:	681b      	ldr	r3, [r3, #0]
      }
   d6dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6dc6:	bf48      	it	mi
   d6dc8:	58d3      	ldrmi	r3, [r2, r3]
   d6dca:	4718      	bx	r3

000d6dcc <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d6dcc:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d6dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6dd0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d6dd4:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d6dd6:	3008      	adds	r0, #8
   d6dd8:	f000 faf2 	bl	d73c0 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6ddc:	2004      	movs	r0, #4
   d6dde:	f7fd f95a 	bl	d4096 <_Znwj>
   d6de2:	4605      	mov	r5, r0
   d6de4:	b398      	cbz	r0, d6e4e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d6de6:	491b      	ldr	r1, [pc, #108]	; (d6e54 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d6de8:	2014      	movs	r0, #20
   d6dea:	f002 fdce 	bl	d998a <_ZnwjRKSt9nothrow_t>
   d6dee:	b130      	cbz	r0, d6dfe <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6df0:	2300      	movs	r3, #0
            exited(false) {
   d6df2:	e9c0 3300 	strd	r3, r3, [r0]
   d6df6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6dfa:	7403      	strb	r3, [r0, #16]
   d6dfc:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6dfe:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6e00:	b1a0      	cbz	r0, d6e2c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d6e02:	4b15      	ldr	r3, [pc, #84]	; (d6e58 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6e04:	4915      	ldr	r1, [pc, #84]	; (d6e5c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d6e06:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6e0e:	e9cd 0300 	strd	r0, r3, [sp]
   d6e12:	2202      	movs	r2, #2
   d6e14:	4b12      	ldr	r3, [pc, #72]	; (d6e60 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d6e16:	3004      	adds	r0, #4
   d6e18:	f000 fa9a 	bl	d7350 <os_thread_create>
   d6e1c:	b930      	cbnz	r0, d6e2c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6e1e:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d6e20:	7c1b      	ldrb	r3, [r3, #16]
   d6e22:	b9a3      	cbnz	r3, d6e4e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d6e24:	2001      	movs	r0, #1
   d6e26:	f000 fb1b 	bl	d7460 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d6e2a:	e7f8      	b.n	d6e1e <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e2c:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6e2e:	2300      	movs	r3, #0
   d6e30:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d6e32:	b164      	cbz	r4, d6e4e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d6e34:	6827      	ldr	r7, [r4, #0]
   d6e36:	b137      	cbz	r7, d6e46 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d6e38:	4638      	mov	r0, r7
   d6e3a:	f7fd fa39 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6e3e:	2110      	movs	r1, #16
   d6e40:	4638      	mov	r0, r7
   d6e42:	f002 fda0 	bl	d9986 <_ZdlPvj>
   d6e46:	2114      	movs	r1, #20
   d6e48:	4620      	mov	r0, r4
   d6e4a:	f002 fd9c 	bl	d9986 <_ZdlPvj>
   d6e4e:	6075      	str	r5, [r6, #4]
}
   d6e50:	b003      	add	sp, #12
   d6e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e54:	000dcfdc 	.word	0x000dcfdc
   d6e58:	000d706b 	.word	0x000d706b
   d6e5c:	000dccd4 	.word	0x000dccd4
   d6e60:	000d6d7f 	.word	0x000d6d7f

000d6e64 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d6e64:	f247 5130 	movw	r1, #30000	; 0x7530
   d6e68:	4a08      	ldr	r2, [pc, #32]	; (d6e8c <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d6e6a:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6e6c:	4908      	ldr	r1, [pc, #32]	; (d6e90 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d6e6e:	6002      	str	r2, [r0, #0]
   d6e70:	2200      	movs	r2, #0
   d6e72:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6e76:	4907      	ldr	r1, [pc, #28]	; (d6e94 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d6e78:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d6e7a:	4907      	ldr	r1, [pc, #28]	; (d6e98 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d6e7c:	6042      	str	r2, [r0, #4]
   d6e7e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d6e82:	6181      	str	r1, [r0, #24]
   d6e84:	8502      	strh	r2, [r0, #40]	; 0x28
   d6e86:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d6e8a:	4770      	bx	lr
   d6e8c:	000dcd98 	.word	0x000dcd98
   d6e90:	000d71d5 	.word	0x000d71d5
   d6e94:	000d6daf 	.word	0x000d6daf
   d6e98:	000d6d65 	.word	0x000d6d65

000d6e9c <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d6e9c:	b510      	push	{r4, lr}
   d6e9e:	4b04      	ldr	r3, [pc, #16]	; (d6eb0 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d6ea0:	4604      	mov	r4, r0
   d6ea2:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d6ea6:	f7fd fa03 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
}
   d6eaa:	4620      	mov	r0, r4
   d6eac:	bd10      	pop	{r4, pc}
   d6eae:	bf00      	nop
   d6eb0:	000dcd98 	.word	0x000dcd98

000d6eb4 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6eb4:	b510      	push	{r4, lr}
   d6eb6:	4b03      	ldr	r3, [pc, #12]	; (d6ec4 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d6eb8:	6003      	str	r3, [r0, #0]
   d6eba:	4604      	mov	r4, r0
   d6ebc:	f7ff ffee 	bl	d6e9c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d6ec0:	4620      	mov	r0, r4
   d6ec2:	bd10      	pop	{r4, pc}
   d6ec4:	000dcdc0 	.word	0x000dcdc0

000d6ec8 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6ec8:	b510      	push	{r4, lr}
   d6eca:	4604      	mov	r4, r0
}
   d6ecc:	f7ff fff2 	bl	d6eb4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	2138      	movs	r1, #56	; 0x38
   d6ed4:	f002 fd57 	bl	d9986 <_ZdlPvj>
   d6ed8:	4620      	mov	r0, r4
   d6eda:	bd10      	pop	{r4, pc}

000d6edc <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d6edc:	6880      	ldr	r0, [r0, #8]
   d6ede:	f000 ba77 	b.w	d73d0 <os_mutex_lock>

000d6ee2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d6ee2:	6880      	ldr	r0, [r0, #8]
   d6ee4:	f000 ba7c 	b.w	d73e0 <os_mutex_unlock>

000d6ee8 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6ee8:	b510      	push	{r4, lr}
   d6eea:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d6eec:	6800      	ldr	r0, [r0, #0]
   d6eee:	f7ff fff8 	bl	d6ee2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d6ef2:	4620      	mov	r0, r4
   d6ef4:	bd10      	pop	{r4, pc}

000d6ef6 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d6ef6:	b513      	push	{r0, r1, r4, lr}
   d6ef8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6efa:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6efc:	f7ff ffee 	bl	d6edc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6f00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d6f02:	88dc      	ldrh	r4, [r3, #6]
   d6f04:	b2a4      	uxth	r4, r4
   d6f06:	b10c      	cbz	r4, d6f0c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6f08:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d6f0c:	a801      	add	r0, sp, #4
   d6f0e:	f7ff ffeb 	bl	d6ee8 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d6f12:	4620      	mov	r0, r4
   d6f14:	b002      	add	sp, #8
   d6f16:	bd10      	pop	{r4, pc}

000d6f18 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6f18:	b513      	push	{r0, r1, r4, lr}
   d6f1a:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6f1c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6f1e:	f7ff ffdd 	bl	d6edc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d6f22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6f26:	b943      	cbnz	r3, d6f3a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6f28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d6f2a:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d6f2c:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d6f2e:	a801      	add	r0, sp, #4
   d6f30:	f7ff ffda 	bl	d6ee8 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d6f34:	4620      	mov	r0, r4
   d6f36:	b002      	add	sp, #8
   d6f38:	bd10      	pop	{r4, pc}
	bool result = false;
   d6f3a:	2400      	movs	r4, #0
   d6f3c:	e7f7      	b.n	d6f2e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d6f3e <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d6f3e:	b513      	push	{r0, r1, r4, lr}
   d6f40:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6f42:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6f44:	f7ff ffca 	bl	d6edc <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d6f4a:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d6f4c:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d6f4e:	f7ff ffcb 	bl	d6ee8 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d6f52:	4620      	mov	r0, r4
   d6f54:	b002      	add	sp, #8
   d6f56:	bd10      	pop	{r4, pc}

000d6f58 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f5c:	4699      	mov	r9, r3
   d6f5e:	b086      	sub	sp, #24
	if (!haveSetup) {
   d6f60:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6f64:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6f68:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6f6c:	4604      	mov	r4, r0
   d6f6e:	460f      	mov	r7, r1
   d6f70:	4616      	mov	r6, r2
	if (!haveSetup) {
   d6f72:	b913      	cbnz	r3, d6f7a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6f74:	6803      	ldr	r3, [r0, #0]
   d6f76:	689b      	ldr	r3, [r3, #8]
   d6f78:	4798      	blx	r3
		data = "";
   d6f7a:	4b31      	ldr	r3, [pc, #196]	; (d7040 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6f7c:	4638      	mov	r0, r7
		data = "";
   d6f7e:	2e00      	cmp	r6, #0
   d6f80:	bf08      	it	eq
   d6f82:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6f84:	f003 fb2b 	bl	da5de <strlen>
   d6f88:	4605      	mov	r5, r0
   d6f8a:	4630      	mov	r0, r6
   d6f8c:	f003 fb27 	bl	da5de <strlen>
   d6f90:	4428      	add	r0, r5
   d6f92:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d6f96:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d6f98:	bf1c      	itt	ne
   d6f9a:	f025 0503 	bicne.w	r5, r5, #3
   d6f9e:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d6fa0:	4633      	mov	r3, r6
   d6fa2:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d6fa6:	e9cd 9a00 	strd	r9, sl, [sp]
   d6faa:	4926      	ldr	r1, [pc, #152]	; (d7044 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d6fac:	4826      	ldr	r0, [pc, #152]	; (d7048 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d6fae:	463a      	mov	r2, r7
   d6fb0:	f7fd fa5a 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d6fb4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6fb6:	3b08      	subs	r3, #8
   d6fb8:	42ab      	cmp	r3, r5
   d6fba:	d212      	bcs.n	d6fe2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d6fbc:	2400      	movs	r4, #0
}
   d6fbe:	4620      	mov	r0, r4
   d6fc0:	b006      	add	sp, #24
   d6fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d6fc6:	88cb      	ldrh	r3, [r1, #6]
   d6fc8:	2b01      	cmp	r3, #1
   d6fca:	d036      	beq.n	d703a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d6fcc:	a805      	add	r0, sp, #20
   d6fce:	f7ff ff8b 	bl	d6ee8 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d6fd2:	6823      	ldr	r3, [r4, #0]
   d6fd4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6fd8:	699b      	ldr	r3, [r3, #24]
   d6fda:	4620      	mov	r0, r4
   d6fdc:	4798      	blx	r3
   d6fde:	2800      	cmp	r0, #0
   d6fe0:	d0ec      	beq.n	d6fbc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d6fe2:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6fe4:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6fe6:	f7ff ff79 	bl	d6edc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6fea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d6fec:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d6fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6ff0:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d6ff2:	1ad2      	subs	r2, r2, r3
   d6ff4:	42aa      	cmp	r2, r5
   d6ff6:	d3e6      	bcc.n	d6fc6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d6ff8:	ea48 080a 	orr.w	r8, r8, sl
   d6ffc:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d7000:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d7004:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d7006:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d700a:	4639      	mov	r1, r7
   d700c:	4640      	mov	r0, r8
   d700e:	f003 fac1 	bl	da594 <strcpy>
				cp += strlen(cp) + 1;
   d7012:	4640      	mov	r0, r8
   d7014:	f003 fae3 	bl	da5de <strlen>
   d7018:	3001      	adds	r0, #1
				strcpy(cp, data);
   d701a:	4631      	mov	r1, r6
   d701c:	4440      	add	r0, r8
   d701e:	f003 fab9 	bl	da594 <strcpy>
				nextFree += size;
   d7022:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7024:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d7026:	441d      	add	r5, r3
   d7028:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d702a:	88d3      	ldrh	r3, [r2, #6]
   d702c:	3301      	adds	r3, #1
   d702e:	80d3      	strh	r3, [r2, #6]
				return true;
   d7030:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d7032:	a805      	add	r0, sp, #20
   d7034:	f7ff ff58 	bl	d6ee8 <_ZN11StMutexLockD1Ev>
   d7038:	e7c1      	b.n	d6fbe <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d703a:	2400      	movs	r4, #0
   d703c:	e7f9      	b.n	d7032 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d703e:	bf00      	nop
   d7040:	000dcffc 	.word	0x000dcffc
   d7044:	000dcce6 	.word	0x000dcce6
   d7048:	2003e5c8 	.word	0x2003e5c8

000d704c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d704c:	b508      	push	{r3, lr}
   d704e:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7050:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7054:	69a3      	ldr	r3, [r4, #24]
   d7056:	b90b      	cbnz	r3, d705c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d7058:	f002 fc9b 	bl	d9992 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d705c:	69e3      	ldr	r3, [r4, #28]
   d705e:	4621      	mov	r1, r4
   d7060:	4628      	mov	r0, r5
   d7062:	4798      	blx	r3
		os_thread_yield();
   d7064:	f000 f97c 	bl	d7360 <os_thread_yield>
	while(true) {
   d7068:	e7f4      	b.n	d7054 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d706a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d706a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d706c:	f7ff ffee 	bl	d704c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7070 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7070:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7072:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7076:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7078:	4628      	mov	r0, r5
   d707a:	f003 fab0 	bl	da5de <strlen>
   d707e:	3001      	adds	r0, #1
   d7080:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7082:	4628      	mov	r0, r5
   d7084:	f003 faab 	bl	da5de <strlen>
	size_t offset = start - retainedBuffer;
   d7088:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d708a:	3001      	adds	r0, #1
   d708c:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d708e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7090:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7094:	bf1c      	itt	ne
   d7096:	f1c3 0304 	rsbne	r3, r3, #4
   d709a:	18c0      	addne	r0, r0, r3
}
   d709c:	bd68      	pop	{r3, r5, r6, pc}

000d709e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d709e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d70a0:	4604      	mov	r4, r0
   d70a2:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d70a4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d70a6:	f7ff ff19 	bl	d6edc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d70aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d70ac:	88fb      	ldrh	r3, [r7, #6]
   d70ae:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d70b2:	b1e6      	cbz	r6, d70ee <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d70b4:	2b01      	cmp	r3, #1
   d70b6:	d922      	bls.n	d70fe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d70b8:	4629      	mov	r1, r5
   d70ba:	4620      	mov	r0, r4
   d70bc:	f7ff ffd8 	bl	d7070 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d70c0:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d70c2:	4629      	mov	r1, r5
   d70c4:	4620      	mov	r0, r4
   d70c6:	f7ff ffd3 	bl	d7070 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d70ca:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d70cc:	443a      	add	r2, r7
	if (after > 0) {
   d70ce:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d70d0:	4601      	mov	r1, r0
	size_t len = next - start;
   d70d2:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d70d6:	d002      	beq.n	d70de <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d70d8:	4628      	mov	r0, r5
   d70da:	f003 fa0b 	bl	da4f4 <memmove>
	nextFree -= len;
   d70de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d70e0:	1b9b      	subs	r3, r3, r6
   d70e2:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d70e4:	88fb      	ldrh	r3, [r7, #6]
   d70e6:	3b01      	subs	r3, #1
   d70e8:	80fb      	strh	r3, [r7, #6]
	return true;
   d70ea:	2601      	movs	r6, #1
   d70ec:	e001      	b.n	d70f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d70ee:	2b00      	cmp	r3, #0
   d70f0:	d1e7      	bne.n	d70c2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d70f2:	a801      	add	r0, sp, #4
   d70f4:	f7ff fef8 	bl	d6ee8 <_ZN11StMutexLockD1Ev>
}
   d70f8:	4630      	mov	r0, r6
   d70fa:	b003      	add	sp, #12
   d70fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d70fe:	2600      	movs	r6, #0
   d7100:	e7f7      	b.n	d70f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d7104 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7108:	460d      	mov	r5, r1
   d710a:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d710c:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d710e:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7110:	f7ff fea8 	bl	d6e64 <_ZN21PublishQueueAsyncBaseC1Ev>
   d7114:	4b15      	ldr	r3, [pc, #84]	; (d716c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7116:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d711a:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d711c:	4b14      	ldr	r3, [pc, #80]	; (d7170 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d711e:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7120:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7122:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7124:	4698      	mov	r8, r3
   d7126:	d117      	bne.n	d7158 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d7128:	88ab      	ldrh	r3, [r5, #4]
   d712a:	b29b      	uxth	r3, r3
   d712c:	42b3      	cmp	r3, r6
   d712e:	d113      	bne.n	d7158 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7130:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7134:	6367      	str	r7, [r4, #52]	; 0x34
   d7136:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d713a:	88eb      	ldrh	r3, [r5, #6]
   d713c:	fa1f f289 	uxth.w	r2, r9
   d7140:	b29b      	uxth	r3, r3
   d7142:	429a      	cmp	r2, r3
   d7144:	d20e      	bcs.n	d7164 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d7146:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d7148:	4620      	mov	r0, r4
   d714a:	f7ff ff91 	bl	d7070 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d714e:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d7150:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7152:	f109 0901 	add.w	r9, r9, #1
   d7156:	d9f0      	bls.n	d713a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d7158:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d715a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d715e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7160:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7162:	80eb      	strh	r3, [r5, #6]
}
   d7164:	4620      	mov	r0, r4
   d7166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d716a:	bf00      	nop
   d716c:	000dcdc0 	.word	0x000dcdc0
   d7170:	d19cab61 	.word	0xd19cab61

000d7174 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7174:	b510      	push	{r4, lr}
   d7176:	e9d1 2300 	ldrd	r2, r3, [r1]
   d717a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d717c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d717e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7180:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7182:	b90a      	cbnz	r2, d7188 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7184:	07d9      	lsls	r1, r3, #31
   d7186:	d505      	bpl.n	d7194 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7188:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d718c:	4b0f      	ldr	r3, [pc, #60]	; (d71cc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d718e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7190:	4b0f      	ldr	r3, [pc, #60]	; (d71d0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7192:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7194:	ab02      	add	r3, sp, #8
   d7196:	e893 0003 	ldmia.w	r3, {r0, r1}
   d719a:	466a      	mov	r2, sp
   d719c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d71a0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d71a4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d71a8:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71ac:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d71ae:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d71b2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d71b4:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71b6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d71b8:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d71ba:	4618      	mov	r0, r3
   d71bc:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d71be:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d71c0:	9105      	str	r1, [sp, #20]
   d71c2:	f7fd f875 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
	}
   d71c6:	4620      	mov	r0, r4
   d71c8:	b006      	add	sp, #24
   d71ca:	bd10      	pop	{r4, pc}
   d71cc:	000d6daf 	.word	0x000d6daf
   d71d0:	000d6d65 	.word	0x000d6d65

000d71d4 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d71d4:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d71d6:	4b05      	ldr	r3, [pc, #20]	; (d71ec <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d71d8:	9300      	str	r3, [sp, #0]
   d71da:	4669      	mov	r1, sp
   d71dc:	2300      	movs	r3, #0
   d71de:	3010      	adds	r0, #16
   d71e0:	9301      	str	r3, [sp, #4]
   d71e2:	f7ff ffc7 	bl	d7174 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d71e6:	b003      	add	sp, #12
   d71e8:	f85d fb04 	ldr.w	pc, [sp], #4
   d71ec:	000d721d 	.word	0x000d721d

000d71f0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d71f0:	b513      	push	{r0, r1, r4, lr}
   d71f2:	4604      	mov	r4, r0
   d71f4:	f000 f944 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d71f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d71fa:	1ac0      	subs	r0, r0, r3
   d71fc:	68e3      	ldr	r3, [r4, #12]
   d71fe:	4298      	cmp	r0, r3
   d7200:	d308      	bcc.n	d7214 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7202:	4b05      	ldr	r3, [pc, #20]	; (d7218 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7204:	9300      	str	r3, [sp, #0]
   d7206:	4669      	mov	r1, sp
   d7208:	2300      	movs	r3, #0
   d720a:	f104 0010 	add.w	r0, r4, #16
   d720e:	9301      	str	r3, [sp, #4]
   d7210:	f7ff ffb0 	bl	d7174 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7214:	b002      	add	sp, #8
   d7216:	bd10      	pop	{r4, pc}
   d7218:	000d721d 	.word	0x000d721d

000d721c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7220:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7224:	b086      	sub	sp, #24
   d7226:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7228:	2b00      	cmp	r3, #0
   d722a:	d164      	bne.n	d72f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d722c:	f000 fb44 	bl	d78b8 <spark_cloud_flag_connected>
   d7230:	2800      	cmp	r0, #0
   d7232:	d060      	beq.n	d72f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7234:	f000 f924 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
   d7238:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d723a:	1ac0      	subs	r0, r0, r3
   d723c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7240:	4298      	cmp	r0, r3
   d7242:	d958      	bls.n	d72f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7244:	6823      	ldr	r3, [r4, #0]
   d7246:	4620      	mov	r0, r4
   d7248:	695b      	ldr	r3, [r3, #20]
   d724a:	4798      	blx	r3
		if (data) {
   d724c:	4605      	mov	r5, r0
   d724e:	2800      	cmp	r0, #0
   d7250:	d051      	beq.n	d72f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7252:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7256:	2301      	movs	r3, #1
   d7258:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d725c:	4638      	mov	r0, r7
   d725e:	f003 f9be 	bl	da5de <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7262:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7266:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d726a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d726c:	682b      	ldr	r3, [r5, #0]
   d726e:	492b      	ldr	r1, [pc, #172]	; (d731c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7270:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7272:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7274:	4633      	mov	r3, r6
   d7276:	482a      	ldr	r0, [pc, #168]	; (d7320 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7278:	463a      	mov	r2, r7
   d727a:	f7fd f8f5 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d727e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7280:	f88d 8000 	strb.w	r8, [sp]
   d7284:	4632      	mov	r2, r6
   d7286:	4639      	mov	r1, r7
   d7288:	a802      	add	r0, sp, #8
   d728a:	f000 ff43 	bl	d8114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d728e:	9d02      	ldr	r5, [sp, #8]
   d7290:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7292:	b91b      	cbnz	r3, d729c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7294:	2001      	movs	r0, #1
   d7296:	f000 fc33 	bl	d7b00 <delay>
			while(!request.isDone()) {
   d729a:	e7f8      	b.n	d728e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d729c:	2000      	movs	r0, #0
   d729e:	f000 fa99 	bl	d77d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d72a2:	b120      	cbz	r0, d72ae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d72a4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d72a6:	b913      	cbnz	r3, d72ae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d72a8:	f000 faf6 	bl	d7898 <spark_process>
    }
   d72ac:	e7fa      	b.n	d72a4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d72ae:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d72b0:	2b01      	cmp	r3, #1
   d72b2:	d123      	bne.n	d72fc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d72b4:	491b      	ldr	r1, [pc, #108]	; (d7324 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d72b6:	481a      	ldr	r0, [pc, #104]	; (d7320 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d72b8:	f7fd f8d6 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d72bc:	6823      	ldr	r3, [r4, #0]
   d72be:	2100      	movs	r1, #0
   d72c0:	699b      	ldr	r3, [r3, #24]
   d72c2:	4620      	mov	r0, r4
   d72c4:	4798      	blx	r3
			isSending = false;
   d72c6:	2300      	movs	r3, #0
   d72c8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d72cc:	f000 f8d8 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d72d0:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d72d2:	9c03      	ldr	r4, [sp, #12]
   d72d4:	b17c      	cbz	r4, d72f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d72d6:	6863      	ldr	r3, [r4, #4]
   d72d8:	3b01      	subs	r3, #1
   d72da:	6063      	str	r3, [r4, #4]
   d72dc:	b95b      	cbnz	r3, d72f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d72de:	6823      	ldr	r3, [r4, #0]
   d72e0:	4620      	mov	r0, r4
   d72e2:	689b      	ldr	r3, [r3, #8]
   d72e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d72e6:	68a3      	ldr	r3, [r4, #8]
   d72e8:	3b01      	subs	r3, #1
   d72ea:	60a3      	str	r3, [r4, #8]
   d72ec:	b91b      	cbnz	r3, d72f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d72ee:	6823      	ldr	r3, [r4, #0]
   d72f0:	4620      	mov	r0, r4
   d72f2:	68db      	ldr	r3, [r3, #12]
   d72f4:	4798      	blx	r3
}
   d72f6:	b006      	add	sp, #24
   d72f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d72fc:	68e2      	ldr	r2, [r4, #12]
   d72fe:	490a      	ldr	r1, [pc, #40]	; (d7328 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7300:	4807      	ldr	r0, [pc, #28]	; (d7320 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7302:	f7fd f8b1 	bl	d4468 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7306:	4b09      	ldr	r3, [pc, #36]	; (d732c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7308:	9304      	str	r3, [sp, #16]
   d730a:	a904      	add	r1, sp, #16
   d730c:	2300      	movs	r3, #0
   d730e:	f104 0010 	add.w	r0, r4, #16
   d7312:	9305      	str	r3, [sp, #20]
   d7314:	f7ff ff2e 	bl	d7174 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7318:	e7d5      	b.n	d72c6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d731a:	bf00      	nop
   d731c:	000dcd27 	.word	0x000dcd27
   d7320:	2003e5c8 	.word	0x2003e5c8
   d7324:	000dcd48 	.word	0x000dcd48
   d7328:	000dcd5f 	.word	0x000dcd5f
   d732c:	000d71f1 	.word	0x000d71f1

000d7330 <_GLOBAL__sub_I_pubqLogger>:
   d7330:	4b01      	ldr	r3, [pc, #4]	; (d7338 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7332:	4a02      	ldr	r2, [pc, #8]	; (d733c <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7334:	601a      	str	r2, [r3, #0]
}
   d7336:	4770      	bx	lr
   d7338:	2003e5c8 	.word	0x2003e5c8
   d733c:	000dcd86 	.word	0x000dcd86

000d7340 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7340:	b508      	push	{r3, lr}
   d7342:	4b02      	ldr	r3, [pc, #8]	; (d734c <cellular_signal+0xc>)
   d7344:	681b      	ldr	r3, [r3, #0]
   d7346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7348:	9301      	str	r3, [sp, #4]
   d734a:	bd08      	pop	{r3, pc}
   d734c:	00030274 	.word	0x00030274

000d7350 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7350:	b508      	push	{r3, lr}
   d7352:	4b02      	ldr	r3, [pc, #8]	; (d735c <os_thread_create+0xc>)
   d7354:	681b      	ldr	r3, [r3, #0]
   d7356:	685b      	ldr	r3, [r3, #4]
   d7358:	9301      	str	r3, [sp, #4]
   d735a:	bd08      	pop	{r3, pc}
   d735c:	00030248 	.word	0x00030248

000d7360 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7360:	b508      	push	{r3, lr}
   d7362:	4b02      	ldr	r3, [pc, #8]	; (d736c <os_thread_yield+0xc>)
   d7364:	681b      	ldr	r3, [r3, #0]
   d7366:	68db      	ldr	r3, [r3, #12]
   d7368:	9301      	str	r3, [sp, #4]
   d736a:	bd08      	pop	{r3, pc}
   d736c:	00030248 	.word	0x00030248

000d7370 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7370:	b508      	push	{r3, lr}
   d7372:	4b02      	ldr	r3, [pc, #8]	; (d737c <os_thread_scheduling+0xc>)
   d7374:	681b      	ldr	r3, [r3, #0]
   d7376:	69db      	ldr	r3, [r3, #28]
   d7378:	9301      	str	r3, [sp, #4]
   d737a:	bd08      	pop	{r3, pc}
   d737c:	00030248 	.word	0x00030248

000d7380 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7380:	b508      	push	{r3, lr}
   d7382:	4b02      	ldr	r3, [pc, #8]	; (d738c <os_timer_create+0xc>)
   d7384:	681b      	ldr	r3, [r3, #0]
   d7386:	6a1b      	ldr	r3, [r3, #32]
   d7388:	9301      	str	r3, [sp, #4]
   d738a:	bd08      	pop	{r3, pc}
   d738c:	00030248 	.word	0x00030248

000d7390 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7390:	b508      	push	{r3, lr}
   d7392:	4b02      	ldr	r3, [pc, #8]	; (d739c <os_timer_destroy+0xc>)
   d7394:	681b      	ldr	r3, [r3, #0]
   d7396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7398:	9301      	str	r3, [sp, #4]
   d739a:	bd08      	pop	{r3, pc}
   d739c:	00030248 	.word	0x00030248

000d73a0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d73a0:	b508      	push	{r3, lr}
   d73a2:	4b02      	ldr	r3, [pc, #8]	; (d73ac <os_timer_get_id+0xc>)
   d73a4:	681b      	ldr	r3, [r3, #0]
   d73a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d73a8:	9301      	str	r3, [sp, #4]
   d73aa:	bd08      	pop	{r3, pc}
   d73ac:	00030248 	.word	0x00030248

000d73b0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d73b0:	b508      	push	{r3, lr}
   d73b2:	4b02      	ldr	r3, [pc, #8]	; (d73bc <os_timer_change+0xc>)
   d73b4:	681b      	ldr	r3, [r3, #0]
   d73b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d73b8:	9301      	str	r3, [sp, #4]
   d73ba:	bd08      	pop	{r3, pc}
   d73bc:	00030248 	.word	0x00030248

000d73c0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d73c0:	b508      	push	{r3, lr}
   d73c2:	4b02      	ldr	r3, [pc, #8]	; (d73cc <os_mutex_create+0xc>)
   d73c4:	681b      	ldr	r3, [r3, #0]
   d73c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d73c8:	9301      	str	r3, [sp, #4]
   d73ca:	bd08      	pop	{r3, pc}
   d73cc:	00030248 	.word	0x00030248

000d73d0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d73d0:	b508      	push	{r3, lr}
   d73d2:	4b02      	ldr	r3, [pc, #8]	; (d73dc <os_mutex_lock+0xc>)
   d73d4:	681b      	ldr	r3, [r3, #0]
   d73d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d73d8:	9301      	str	r3, [sp, #4]
   d73da:	bd08      	pop	{r3, pc}
   d73dc:	00030248 	.word	0x00030248

000d73e0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d73e0:	b508      	push	{r3, lr}
   d73e2:	4b02      	ldr	r3, [pc, #8]	; (d73ec <os_mutex_unlock+0xc>)
   d73e4:	681b      	ldr	r3, [r3, #0]
   d73e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d73e8:	9301      	str	r3, [sp, #4]
   d73ea:	bd08      	pop	{r3, pc}
   d73ec:	00030248 	.word	0x00030248

000d73f0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d73f0:	b508      	push	{r3, lr}
   d73f2:	4b02      	ldr	r3, [pc, #8]	; (d73fc <os_mutex_recursive_create+0xc>)
   d73f4:	681b      	ldr	r3, [r3, #0]
   d73f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d73f8:	9301      	str	r3, [sp, #4]
   d73fa:	bd08      	pop	{r3, pc}
   d73fc:	00030248 	.word	0x00030248

000d7400 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7400:	b508      	push	{r3, lr}
   d7402:	4b02      	ldr	r3, [pc, #8]	; (d740c <os_mutex_recursive_destroy+0xc>)
   d7404:	681b      	ldr	r3, [r3, #0]
   d7406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7408:	9301      	str	r3, [sp, #4]
   d740a:	bd08      	pop	{r3, pc}
   d740c:	00030248 	.word	0x00030248

000d7410 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7410:	b508      	push	{r3, lr}
   d7412:	4b02      	ldr	r3, [pc, #8]	; (d741c <os_thread_exit+0xc>)
   d7414:	681b      	ldr	r3, [r3, #0]
   d7416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7418:	9301      	str	r3, [sp, #4]
   d741a:	bd08      	pop	{r3, pc}
   d741c:	00030248 	.word	0x00030248

000d7420 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7420:	b508      	push	{r3, lr}
   d7422:	4b02      	ldr	r3, [pc, #8]	; (d742c <os_timer_set_id+0xc>)
   d7424:	681b      	ldr	r3, [r3, #0]
   d7426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7428:	9301      	str	r3, [sp, #4]
   d742a:	bd08      	pop	{r3, pc}
   d742c:	00030248 	.word	0x00030248

000d7430 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7430:	b508      	push	{r3, lr}
   d7432:	4b02      	ldr	r3, [pc, #8]	; (d743c <HAL_Feature_Set+0xc>)
   d7434:	681b      	ldr	r3, [r3, #0]
   d7436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7438:	9301      	str	r3, [sp, #4]
   d743a:	bd08      	pop	{r3, pc}
   d743c:	00030234 	.word	0x00030234

000d7440 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7440:	b508      	push	{r3, lr}
   d7442:	4b02      	ldr	r3, [pc, #8]	; (d744c <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7444:	681b      	ldr	r3, [r3, #0]
   d7446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7448:	9301      	str	r3, [sp, #4]
   d744a:	bd08      	pop	{r3, pc}
   d744c:	00030234 	.word	0x00030234

000d7450 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7450:	b508      	push	{r3, lr}
   d7452:	4b02      	ldr	r3, [pc, #8]	; (d745c <HAL_RNG_GetRandomNumber+0xc>)
   d7454:	681b      	ldr	r3, [r3, #0]
   d7456:	685b      	ldr	r3, [r3, #4]
   d7458:	9301      	str	r3, [sp, #4]
   d745a:	bd08      	pop	{r3, pc}
   d745c:	00030218 	.word	0x00030218

000d7460 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7460:	b508      	push	{r3, lr}
   d7462:	4b02      	ldr	r3, [pc, #8]	; (d746c <HAL_Delay_Milliseconds+0xc>)
   d7464:	681b      	ldr	r3, [r3, #0]
   d7466:	689b      	ldr	r3, [r3, #8]
   d7468:	9301      	str	r3, [sp, #4]
   d746a:	bd08      	pop	{r3, pc}
   d746c:	00030218 	.word	0x00030218

000d7470 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7470:	b508      	push	{r3, lr}
   d7472:	4b02      	ldr	r3, [pc, #8]	; (d747c <HAL_Delay_Microseconds+0xc>)
   d7474:	681b      	ldr	r3, [r3, #0]
   d7476:	68db      	ldr	r3, [r3, #12]
   d7478:	9301      	str	r3, [sp, #4]
   d747a:	bd08      	pop	{r3, pc}
   d747c:	00030218 	.word	0x00030218

000d7480 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7480:	b508      	push	{r3, lr}
   d7482:	4b02      	ldr	r3, [pc, #8]	; (d748c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7484:	681b      	ldr	r3, [r3, #0]
   d7486:	695b      	ldr	r3, [r3, #20]
   d7488:	9301      	str	r3, [sp, #4]
   d748a:	bd08      	pop	{r3, pc}
   d748c:	00030218 	.word	0x00030218

000d7490 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7490:	b508      	push	{r3, lr}
   d7492:	4b02      	ldr	r3, [pc, #8]	; (d749c <hal_rtc_time_is_valid+0xc>)
   d7494:	681b      	ldr	r3, [r3, #0]
   d7496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7498:	9301      	str	r3, [sp, #4]
   d749a:	bd08      	pop	{r3, pc}
   d749c:	00030218 	.word	0x00030218

000d74a0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d74a0:	b508      	push	{r3, lr}
   d74a2:	4b02      	ldr	r3, [pc, #8]	; (d74ac <hal_timer_millis+0xc>)
   d74a4:	681b      	ldr	r3, [r3, #0]
   d74a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d74a8:	9301      	str	r3, [sp, #4]
   d74aa:	bd08      	pop	{r3, pc}
   d74ac:	00030218 	.word	0x00030218

000d74b0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d74b0:	b508      	push	{r3, lr}
   d74b2:	4b02      	ldr	r3, [pc, #8]	; (d74bc <hal_rtc_get_time+0xc>)
   d74b4:	681b      	ldr	r3, [r3, #0]
   d74b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d74b8:	9301      	str	r3, [sp, #4]
   d74ba:	bd08      	pop	{r3, pc}
   d74bc:	00030218 	.word	0x00030218

000d74c0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d74c0:	b508      	push	{r3, lr}
   d74c2:	4b02      	ldr	r3, [pc, #8]	; (d74cc <hal_rtc_set_time+0xc>)
   d74c4:	681b      	ldr	r3, [r3, #0]
   d74c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d74c8:	9301      	str	r3, [sp, #4]
   d74ca:	bd08      	pop	{r3, pc}
   d74cc:	00030218 	.word	0x00030218

000d74d0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d74d0:	b508      	push	{r3, lr}
   d74d2:	4b02      	ldr	r3, [pc, #8]	; (d74dc <HAL_Validate_Pin_Function+0xc>)
   d74d4:	681b      	ldr	r3, [r3, #0]
   d74d6:	685b      	ldr	r3, [r3, #4]
   d74d8:	9301      	str	r3, [sp, #4]
   d74da:	bd08      	pop	{r3, pc}
   d74dc:	0003022c 	.word	0x0003022c

000d74e0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d74e0:	b508      	push	{r3, lr}
   d74e2:	4b02      	ldr	r3, [pc, #8]	; (d74ec <HAL_Pin_Mode+0xc>)
   d74e4:	681b      	ldr	r3, [r3, #0]
   d74e6:	689b      	ldr	r3, [r3, #8]
   d74e8:	9301      	str	r3, [sp, #4]
   d74ea:	bd08      	pop	{r3, pc}
   d74ec:	0003022c 	.word	0x0003022c

000d74f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d74f0:	b508      	push	{r3, lr}
   d74f2:	4b02      	ldr	r3, [pc, #8]	; (d74fc <HAL_Get_Pin_Mode+0xc>)
   d74f4:	681b      	ldr	r3, [r3, #0]
   d74f6:	68db      	ldr	r3, [r3, #12]
   d74f8:	9301      	str	r3, [sp, #4]
   d74fa:	bd08      	pop	{r3, pc}
   d74fc:	0003022c 	.word	0x0003022c

000d7500 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7500:	b508      	push	{r3, lr}
   d7502:	4b02      	ldr	r3, [pc, #8]	; (d750c <HAL_GPIO_Write+0xc>)
   d7504:	681b      	ldr	r3, [r3, #0]
   d7506:	691b      	ldr	r3, [r3, #16]
   d7508:	9301      	str	r3, [sp, #4]
   d750a:	bd08      	pop	{r3, pc}
   d750c:	0003022c 	.word	0x0003022c

000d7510 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7510:	b508      	push	{r3, lr}
   d7512:	4b02      	ldr	r3, [pc, #8]	; (d751c <HAL_GPIO_Read+0xc>)
   d7514:	681b      	ldr	r3, [r3, #0]
   d7516:	695b      	ldr	r3, [r3, #20]
   d7518:	9301      	str	r3, [sp, #4]
   d751a:	bd08      	pop	{r3, pc}
   d751c:	0003022c 	.word	0x0003022c

000d7520 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7520:	b508      	push	{r3, lr}
   d7522:	4b02      	ldr	r3, [pc, #8]	; (d752c <hal_adc_read+0xc>)
   d7524:	681b      	ldr	r3, [r3, #0]
   d7526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7528:	9301      	str	r3, [sp, #4]
   d752a:	bd08      	pop	{r3, pc}
   d752c:	0003022c 	.word	0x0003022c

000d7530 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7530:	b508      	push	{r3, lr}
   d7532:	4b02      	ldr	r3, [pc, #8]	; (d753c <hal_i2c_begin+0xc>)
   d7534:	681b      	ldr	r3, [r3, #0]
   d7536:	68db      	ldr	r3, [r3, #12]
   d7538:	9301      	str	r3, [sp, #4]
   d753a:	bd08      	pop	{r3, pc}
   d753c:	00030228 	.word	0x00030228

000d7540 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7540:	b508      	push	{r3, lr}
   d7542:	4b02      	ldr	r3, [pc, #8]	; (d754c <hal_i2c_begin_transmission+0xc>)
   d7544:	681b      	ldr	r3, [r3, #0]
   d7546:	699b      	ldr	r3, [r3, #24]
   d7548:	9301      	str	r3, [sp, #4]
   d754a:	bd08      	pop	{r3, pc}
   d754c:	00030228 	.word	0x00030228

000d7550 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7550:	b508      	push	{r3, lr}
   d7552:	4b02      	ldr	r3, [pc, #8]	; (d755c <hal_i2c_end_transmission+0xc>)
   d7554:	681b      	ldr	r3, [r3, #0]
   d7556:	69db      	ldr	r3, [r3, #28]
   d7558:	9301      	str	r3, [sp, #4]
   d755a:	bd08      	pop	{r3, pc}
   d755c:	00030228 	.word	0x00030228

000d7560 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7560:	b508      	push	{r3, lr}
   d7562:	4b02      	ldr	r3, [pc, #8]	; (d756c <hal_i2c_write+0xc>)
   d7564:	681b      	ldr	r3, [r3, #0]
   d7566:	6a1b      	ldr	r3, [r3, #32]
   d7568:	9301      	str	r3, [sp, #4]
   d756a:	bd08      	pop	{r3, pc}
   d756c:	00030228 	.word	0x00030228

000d7570 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7570:	b508      	push	{r3, lr}
   d7572:	4b02      	ldr	r3, [pc, #8]	; (d757c <hal_i2c_available+0xc>)
   d7574:	681b      	ldr	r3, [r3, #0]
   d7576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7578:	9301      	str	r3, [sp, #4]
   d757a:	bd08      	pop	{r3, pc}
   d757c:	00030228 	.word	0x00030228

000d7580 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7580:	b508      	push	{r3, lr}
   d7582:	4b02      	ldr	r3, [pc, #8]	; (d758c <hal_i2c_read+0xc>)
   d7584:	681b      	ldr	r3, [r3, #0]
   d7586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7588:	9301      	str	r3, [sp, #4]
   d758a:	bd08      	pop	{r3, pc}
   d758c:	00030228 	.word	0x00030228

000d7590 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7590:	b508      	push	{r3, lr}
   d7592:	4b02      	ldr	r3, [pc, #8]	; (d759c <hal_i2c_peek+0xc>)
   d7594:	681b      	ldr	r3, [r3, #0]
   d7596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7598:	9301      	str	r3, [sp, #4]
   d759a:	bd08      	pop	{r3, pc}
   d759c:	00030228 	.word	0x00030228

000d75a0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d75a0:	b508      	push	{r3, lr}
   d75a2:	4b02      	ldr	r3, [pc, #8]	; (d75ac <hal_i2c_flush+0xc>)
   d75a4:	681b      	ldr	r3, [r3, #0]
   d75a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d75a8:	9301      	str	r3, [sp, #4]
   d75aa:	bd08      	pop	{r3, pc}
   d75ac:	00030228 	.word	0x00030228

000d75b0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d75b0:	b508      	push	{r3, lr}
   d75b2:	4b02      	ldr	r3, [pc, #8]	; (d75bc <hal_i2c_is_enabled+0xc>)
   d75b4:	681b      	ldr	r3, [r3, #0]
   d75b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d75b8:	9301      	str	r3, [sp, #4]
   d75ba:	bd08      	pop	{r3, pc}
   d75bc:	00030228 	.word	0x00030228

000d75c0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d75c0:	b508      	push	{r3, lr}
   d75c2:	4b02      	ldr	r3, [pc, #8]	; (d75cc <hal_i2c_init+0xc>)
   d75c4:	681b      	ldr	r3, [r3, #0]
   d75c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d75c8:	9301      	str	r3, [sp, #4]
   d75ca:	bd08      	pop	{r3, pc}
   d75cc:	00030228 	.word	0x00030228

000d75d0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d75d0:	b508      	push	{r3, lr}
   d75d2:	4b02      	ldr	r3, [pc, #8]	; (d75dc <hal_i2c_lock+0xc>)
   d75d4:	681b      	ldr	r3, [r3, #0]
   d75d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d75d8:	9301      	str	r3, [sp, #4]
   d75da:	bd08      	pop	{r3, pc}
   d75dc:	00030228 	.word	0x00030228

000d75e0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d75e0:	b508      	push	{r3, lr}
   d75e2:	4b02      	ldr	r3, [pc, #8]	; (d75ec <hal_i2c_unlock+0xc>)
   d75e4:	681b      	ldr	r3, [r3, #0]
   d75e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d75e8:	9301      	str	r3, [sp, #4]
   d75ea:	bd08      	pop	{r3, pc}
   d75ec:	00030228 	.word	0x00030228

000d75f0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d75f0:	b508      	push	{r3, lr}
   d75f2:	4b02      	ldr	r3, [pc, #8]	; (d75fc <hal_i2c_request_ex+0xc>)
   d75f4:	681b      	ldr	r3, [r3, #0]
   d75f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d75f8:	9301      	str	r3, [sp, #4]
   d75fa:	bd08      	pop	{r3, pc}
   d75fc:	00030228 	.word	0x00030228

000d7600 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7600:	b508      	push	{r3, lr}
   d7602:	4b02      	ldr	r3, [pc, #8]	; (d760c <inet_inet_ntop+0xc>)
   d7604:	681b      	ldr	r3, [r3, #0]
   d7606:	695b      	ldr	r3, [r3, #20]
   d7608:	9301      	str	r3, [sp, #4]
   d760a:	bd08      	pop	{r3, pc}
   d760c:	00030264 	.word	0x00030264

000d7610 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7610:	b508      	push	{r3, lr}
   d7612:	4b02      	ldr	r3, [pc, #8]	; (d761c <netdb_freeaddrinfo+0xc>)
   d7614:	681b      	ldr	r3, [r3, #0]
   d7616:	689b      	ldr	r3, [r3, #8]
   d7618:	9301      	str	r3, [sp, #4]
   d761a:	bd08      	pop	{r3, pc}
   d761c:	00030268 	.word	0x00030268

000d7620 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7620:	b508      	push	{r3, lr}
   d7622:	4b02      	ldr	r3, [pc, #8]	; (d762c <netdb_getaddrinfo+0xc>)
   d7624:	681b      	ldr	r3, [r3, #0]
   d7626:	68db      	ldr	r3, [r3, #12]
   d7628:	9301      	str	r3, [sp, #4]
   d762a:	bd08      	pop	{r3, pc}
   d762c:	00030268 	.word	0x00030268

000d7630 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7630:	b508      	push	{r3, lr}
   d7632:	4b02      	ldr	r3, [pc, #8]	; (d763c <hal_spi_init+0xc>)
   d7634:	681b      	ldr	r3, [r3, #0]
   d7636:	69db      	ldr	r3, [r3, #28]
   d7638:	9301      	str	r3, [sp, #4]
   d763a:	bd08      	pop	{r3, pc}
   d763c:	00030230 	.word	0x00030230

000d7640 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7640:	b508      	push	{r3, lr}
   d7642:	4b02      	ldr	r3, [pc, #8]	; (d764c <hal_spi_is_enabled+0xc>)
   d7644:	681b      	ldr	r3, [r3, #0]
   d7646:	6a1b      	ldr	r3, [r3, #32]
   d7648:	9301      	str	r3, [sp, #4]
   d764a:	bd08      	pop	{r3, pc}
   d764c:	00030230 	.word	0x00030230

000d7650 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7650:	b508      	push	{r3, lr}
   d7652:	4b02      	ldr	r3, [pc, #8]	; (d765c <hal_usart_init+0xc>)
   d7654:	681b      	ldr	r3, [r3, #0]
   d7656:	681b      	ldr	r3, [r3, #0]
   d7658:	9301      	str	r3, [sp, #4]
   d765a:	bd08      	pop	{r3, pc}
   d765c:	0003023c 	.word	0x0003023c

000d7660 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7660:	b508      	push	{r3, lr}
   d7662:	4b02      	ldr	r3, [pc, #8]	; (d766c <hal_usart_write+0xc>)
   d7664:	681b      	ldr	r3, [r3, #0]
   d7666:	68db      	ldr	r3, [r3, #12]
   d7668:	9301      	str	r3, [sp, #4]
   d766a:	bd08      	pop	{r3, pc}
   d766c:	0003023c 	.word	0x0003023c

000d7670 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7670:	b508      	push	{r3, lr}
   d7672:	4b02      	ldr	r3, [pc, #8]	; (d767c <hal_usart_available+0xc>)
   d7674:	681b      	ldr	r3, [r3, #0]
   d7676:	691b      	ldr	r3, [r3, #16]
   d7678:	9301      	str	r3, [sp, #4]
   d767a:	bd08      	pop	{r3, pc}
   d767c:	0003023c 	.word	0x0003023c

000d7680 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7680:	b508      	push	{r3, lr}
   d7682:	4b02      	ldr	r3, [pc, #8]	; (d768c <hal_usart_read+0xc>)
   d7684:	681b      	ldr	r3, [r3, #0]
   d7686:	695b      	ldr	r3, [r3, #20]
   d7688:	9301      	str	r3, [sp, #4]
   d768a:	bd08      	pop	{r3, pc}
   d768c:	0003023c 	.word	0x0003023c

000d7690 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7690:	b508      	push	{r3, lr}
   d7692:	4b02      	ldr	r3, [pc, #8]	; (d769c <hal_usart_peek+0xc>)
   d7694:	681b      	ldr	r3, [r3, #0]
   d7696:	699b      	ldr	r3, [r3, #24]
   d7698:	9301      	str	r3, [sp, #4]
   d769a:	bd08      	pop	{r3, pc}
   d769c:	0003023c 	.word	0x0003023c

000d76a0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d76a0:	b508      	push	{r3, lr}
   d76a2:	4b02      	ldr	r3, [pc, #8]	; (d76ac <hal_usart_flush+0xc>)
   d76a4:	681b      	ldr	r3, [r3, #0]
   d76a6:	69db      	ldr	r3, [r3, #28]
   d76a8:	9301      	str	r3, [sp, #4]
   d76aa:	bd08      	pop	{r3, pc}
   d76ac:	0003023c 	.word	0x0003023c

000d76b0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d76b0:	b508      	push	{r3, lr}
   d76b2:	4b02      	ldr	r3, [pc, #8]	; (d76bc <hal_usart_is_enabled+0xc>)
   d76b4:	681b      	ldr	r3, [r3, #0]
   d76b6:	6a1b      	ldr	r3, [r3, #32]
   d76b8:	9301      	str	r3, [sp, #4]
   d76ba:	bd08      	pop	{r3, pc}
   d76bc:	0003023c 	.word	0x0003023c

000d76c0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d76c0:	b508      	push	{r3, lr}
   d76c2:	4b02      	ldr	r3, [pc, #8]	; (d76cc <hal_usart_available_data_for_write+0xc>)
   d76c4:	681b      	ldr	r3, [r3, #0]
   d76c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d76c8:	9301      	str	r3, [sp, #4]
   d76ca:	bd08      	pop	{r3, pc}
   d76cc:	0003023c 	.word	0x0003023c

000d76d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d76d0:	b508      	push	{r3, lr}
   d76d2:	4b02      	ldr	r3, [pc, #8]	; (d76dc <HAL_USB_USART_Init+0xc>)
   d76d4:	681b      	ldr	r3, [r3, #0]
   d76d6:	681b      	ldr	r3, [r3, #0]
   d76d8:	9301      	str	r3, [sp, #4]
   d76da:	bd08      	pop	{r3, pc}
   d76dc:	0003024c 	.word	0x0003024c

000d76e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d76e0:	b508      	push	{r3, lr}
   d76e2:	4b02      	ldr	r3, [pc, #8]	; (d76ec <HAL_USB_USART_Available_Data+0xc>)
   d76e4:	681b      	ldr	r3, [r3, #0]
   d76e6:	691b      	ldr	r3, [r3, #16]
   d76e8:	9301      	str	r3, [sp, #4]
   d76ea:	bd08      	pop	{r3, pc}
   d76ec:	0003024c 	.word	0x0003024c

000d76f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d76f0:	b508      	push	{r3, lr}
   d76f2:	4b02      	ldr	r3, [pc, #8]	; (d76fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d76f4:	681b      	ldr	r3, [r3, #0]
   d76f6:	695b      	ldr	r3, [r3, #20]
   d76f8:	9301      	str	r3, [sp, #4]
   d76fa:	bd08      	pop	{r3, pc}
   d76fc:	0003024c 	.word	0x0003024c

000d7700 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7700:	b508      	push	{r3, lr}
   d7702:	4b02      	ldr	r3, [pc, #8]	; (d770c <HAL_USB_USART_Receive_Data+0xc>)
   d7704:	681b      	ldr	r3, [r3, #0]
   d7706:	699b      	ldr	r3, [r3, #24]
   d7708:	9301      	str	r3, [sp, #4]
   d770a:	bd08      	pop	{r3, pc}
   d770c:	0003024c 	.word	0x0003024c

000d7710 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7710:	b508      	push	{r3, lr}
   d7712:	4b02      	ldr	r3, [pc, #8]	; (d771c <HAL_USB_USART_Send_Data+0xc>)
   d7714:	681b      	ldr	r3, [r3, #0]
   d7716:	69db      	ldr	r3, [r3, #28]
   d7718:	9301      	str	r3, [sp, #4]
   d771a:	bd08      	pop	{r3, pc}
   d771c:	0003024c 	.word	0x0003024c

000d7720 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7720:	b508      	push	{r3, lr}
   d7722:	4b02      	ldr	r3, [pc, #8]	; (d772c <HAL_USB_USART_Flush_Data+0xc>)
   d7724:	681b      	ldr	r3, [r3, #0]
   d7726:	6a1b      	ldr	r3, [r3, #32]
   d7728:	9301      	str	r3, [sp, #4]
   d772a:	bd08      	pop	{r3, pc}
   d772c:	0003024c 	.word	0x0003024c

000d7730 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7730:	b508      	push	{r3, lr}
   d7732:	4b02      	ldr	r3, [pc, #8]	; (d773c <panic_+0xc>)
   d7734:	681b      	ldr	r3, [r3, #0]
   d7736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7738:	9301      	str	r3, [sp, #4]
   d773a:	bd08      	pop	{r3, pc}
   d773c:	00030260 	.word	0x00030260

000d7740 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7740:	b508      	push	{r3, lr}
   d7742:	4b02      	ldr	r3, [pc, #8]	; (d774c <log_message+0xc>)
   d7744:	681b      	ldr	r3, [r3, #0]
   d7746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7748:	9301      	str	r3, [sp, #4]
   d774a:	bd08      	pop	{r3, pc}
   d774c:	00030260 	.word	0x00030260

000d7750 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d7750:	b508      	push	{r3, lr}
   d7752:	4b02      	ldr	r3, [pc, #8]	; (d775c <log_message_v+0xc>)
   d7754:	681b      	ldr	r3, [r3, #0]
   d7756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7758:	9301      	str	r3, [sp, #4]
   d775a:	bd08      	pop	{r3, pc}
   d775c:	00030260 	.word	0x00030260

000d7760 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d7760:	b508      	push	{r3, lr}
   d7762:	4b03      	ldr	r3, [pc, #12]	; (d7770 <diag_get_source+0x10>)
   d7764:	681b      	ldr	r3, [r3, #0]
   d7766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d776a:	9301      	str	r3, [sp, #4]
   d776c:	bd08      	pop	{r3, pc}
   d776e:	0000      	.short	0x0000
   d7770:	00030260 	.word	0x00030260

000d7774 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7774:	b508      	push	{r3, lr}
   d7776:	4b02      	ldr	r3, [pc, #8]	; (d7780 <system_mode+0xc>)
   d7778:	681b      	ldr	r3, [r3, #0]
   d777a:	681b      	ldr	r3, [r3, #0]
   d777c:	9301      	str	r3, [sp, #4]
   d777e:	bd08      	pop	{r3, pc}
   d7780:	00030220 	.word	0x00030220

000d7784 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7784:	b508      	push	{r3, lr}
   d7786:	4b02      	ldr	r3, [pc, #8]	; (d7790 <set_system_mode+0xc>)
   d7788:	681b      	ldr	r3, [r3, #0]
   d778a:	685b      	ldr	r3, [r3, #4]
   d778c:	9301      	str	r3, [sp, #4]
   d778e:	bd08      	pop	{r3, pc}
   d7790:	00030220 	.word	0x00030220

000d7794 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7794:	b508      	push	{r3, lr}
   d7796:	4b02      	ldr	r3, [pc, #8]	; (d77a0 <system_delay_ms+0xc>)
   d7798:	681b      	ldr	r3, [r3, #0]
   d779a:	695b      	ldr	r3, [r3, #20]
   d779c:	9301      	str	r3, [sp, #4]
   d779e:	bd08      	pop	{r3, pc}
   d77a0:	00030220 	.word	0x00030220

000d77a4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d77a4:	b508      	push	{r3, lr}
   d77a6:	4b02      	ldr	r3, [pc, #8]	; (d77b0 <system_sleep+0xc>)
   d77a8:	681b      	ldr	r3, [r3, #0]
   d77aa:	699b      	ldr	r3, [r3, #24]
   d77ac:	9301      	str	r3, [sp, #4]
   d77ae:	bd08      	pop	{r3, pc}
   d77b0:	00030220 	.word	0x00030220

000d77b4 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d77b4:	b508      	push	{r3, lr}
   d77b6:	4b02      	ldr	r3, [pc, #8]	; (d77c0 <system_subscribe_event+0xc>)
   d77b8:	681b      	ldr	r3, [r3, #0]
   d77ba:	6a1b      	ldr	r3, [r3, #32]
   d77bc:	9301      	str	r3, [sp, #4]
   d77be:	bd08      	pop	{r3, pc}
   d77c0:	00030220 	.word	0x00030220

000d77c4 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d77c4:	b508      	push	{r3, lr}
   d77c6:	4b02      	ldr	r3, [pc, #8]	; (d77d0 <system_thread_set_state+0xc>)
   d77c8:	681b      	ldr	r3, [r3, #0]
   d77ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d77cc:	9301      	str	r3, [sp, #4]
   d77ce:	bd08      	pop	{r3, pc}
   d77d0:	00030220 	.word	0x00030220

000d77d4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d77d4:	b508      	push	{r3, lr}
   d77d6:	4b02      	ldr	r3, [pc, #8]	; (d77e0 <application_thread_current+0xc>)
   d77d8:	681b      	ldr	r3, [r3, #0]
   d77da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d77dc:	9301      	str	r3, [sp, #4]
   d77de:	bd08      	pop	{r3, pc}
   d77e0:	00030220 	.word	0x00030220

000d77e4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d77e4:	b508      	push	{r3, lr}
   d77e6:	4b02      	ldr	r3, [pc, #8]	; (d77f0 <application_thread_invoke+0xc>)
   d77e8:	681b      	ldr	r3, [r3, #0]
   d77ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d77ec:	9301      	str	r3, [sp, #4]
   d77ee:	bd08      	pop	{r3, pc}
   d77f0:	00030220 	.word	0x00030220

000d77f4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d77f4:	b508      	push	{r3, lr}
   d77f6:	4b02      	ldr	r3, [pc, #8]	; (d7800 <system_thread_get_state+0xc>)
   d77f8:	681b      	ldr	r3, [r3, #0]
   d77fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d77fc:	9301      	str	r3, [sp, #4]
   d77fe:	bd08      	pop	{r3, pc}
   d7800:	00030220 	.word	0x00030220

000d7804 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d7804:	b508      	push	{r3, lr}
   d7806:	4b02      	ldr	r3, [pc, #8]	; (d7810 <system_notify_time_changed+0xc>)
   d7808:	681b      	ldr	r3, [r3, #0]
   d780a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d780c:	9301      	str	r3, [sp, #4]
   d780e:	bd08      	pop	{r3, pc}
   d7810:	00030220 	.word	0x00030220

000d7814 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7814:	b508      	push	{r3, lr}
   d7816:	4b03      	ldr	r3, [pc, #12]	; (d7824 <system_ctrl_set_app_request_handler+0x10>)
   d7818:	681b      	ldr	r3, [r3, #0]
   d781a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d781e:	9301      	str	r3, [sp, #4]
   d7820:	bd08      	pop	{r3, pc}
   d7822:	0000      	.short	0x0000
   d7824:	00030220 	.word	0x00030220

000d7828 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7828:	b508      	push	{r3, lr}
   d782a:	4b03      	ldr	r3, [pc, #12]	; (d7838 <system_ctrl_set_result+0x10>)
   d782c:	681b      	ldr	r3, [r3, #0]
   d782e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7832:	9301      	str	r3, [sp, #4]
   d7834:	bd08      	pop	{r3, pc}
   d7836:	0000      	.short	0x0000
   d7838:	00030220 	.word	0x00030220

000d783c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d783c:	b508      	push	{r3, lr}
   d783e:	4b03      	ldr	r3, [pc, #12]	; (d784c <system_power_management_set_config+0x10>)
   d7840:	681b      	ldr	r3, [r3, #0]
   d7842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7846:	9301      	str	r3, [sp, #4]
   d7848:	bd08      	pop	{r3, pc}
   d784a:	0000      	.short	0x0000
   d784c:	00030220 	.word	0x00030220

000d7850 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d7850:	b508      	push	{r3, lr}
   d7852:	4b03      	ldr	r3, [pc, #12]	; (d7860 <system_sleep_ext+0x10>)
   d7854:	681b      	ldr	r3, [r3, #0]
   d7856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d785a:	9301      	str	r3, [sp, #4]
   d785c:	bd08      	pop	{r3, pc}
   d785e:	0000      	.short	0x0000
   d7860:	00030220 	.word	0x00030220

000d7864 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d7864:	b508      	push	{r3, lr}
   d7866:	4b03      	ldr	r3, [pc, #12]	; (d7874 <system_reset+0x10>)
   d7868:	681b      	ldr	r3, [r3, #0]
   d786a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d786e:	9301      	str	r3, [sp, #4]
   d7870:	bd08      	pop	{r3, pc}
   d7872:	0000      	.short	0x0000
   d7874:	00030220 	.word	0x00030220

000d7878 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7878:	b508      	push	{r3, lr}
   d787a:	4b02      	ldr	r3, [pc, #8]	; (d7884 <spark_variable+0xc>)
   d787c:	681b      	ldr	r3, [r3, #0]
   d787e:	681b      	ldr	r3, [r3, #0]
   d7880:	9301      	str	r3, [sp, #4]
   d7882:	bd08      	pop	{r3, pc}
   d7884:	00030244 	.word	0x00030244

000d7888 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d7888:	b508      	push	{r3, lr}
   d788a:	4b02      	ldr	r3, [pc, #8]	; (d7894 <spark_function+0xc>)
   d788c:	681b      	ldr	r3, [r3, #0]
   d788e:	685b      	ldr	r3, [r3, #4]
   d7890:	9301      	str	r3, [sp, #4]
   d7892:	bd08      	pop	{r3, pc}
   d7894:	00030244 	.word	0x00030244

000d7898 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7898:	b508      	push	{r3, lr}
   d789a:	4b02      	ldr	r3, [pc, #8]	; (d78a4 <spark_process+0xc>)
   d789c:	681b      	ldr	r3, [r3, #0]
   d789e:	689b      	ldr	r3, [r3, #8]
   d78a0:	9301      	str	r3, [sp, #4]
   d78a2:	bd08      	pop	{r3, pc}
   d78a4:	00030244 	.word	0x00030244

000d78a8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d78a8:	b508      	push	{r3, lr}
   d78aa:	4b02      	ldr	r3, [pc, #8]	; (d78b4 <spark_cloud_flag_connect+0xc>)
   d78ac:	681b      	ldr	r3, [r3, #0]
   d78ae:	68db      	ldr	r3, [r3, #12]
   d78b0:	9301      	str	r3, [sp, #4]
   d78b2:	bd08      	pop	{r3, pc}
   d78b4:	00030244 	.word	0x00030244

000d78b8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d78b8:	b508      	push	{r3, lr}
   d78ba:	4b02      	ldr	r3, [pc, #8]	; (d78c4 <spark_cloud_flag_connected+0xc>)
   d78bc:	681b      	ldr	r3, [r3, #0]
   d78be:	695b      	ldr	r3, [r3, #20]
   d78c0:	9301      	str	r3, [sp, #4]
   d78c2:	bd08      	pop	{r3, pc}
   d78c4:	00030244 	.word	0x00030244

000d78c8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d78c8:	b508      	push	{r3, lr}
   d78ca:	4b02      	ldr	r3, [pc, #8]	; (d78d4 <spark_deviceID+0xc>)
   d78cc:	681b      	ldr	r3, [r3, #0]
   d78ce:	69db      	ldr	r3, [r3, #28]
   d78d0:	9301      	str	r3, [sp, #4]
   d78d2:	bd08      	pop	{r3, pc}
   d78d4:	00030244 	.word	0x00030244

000d78d8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d78d8:	b508      	push	{r3, lr}
   d78da:	4b02      	ldr	r3, [pc, #8]	; (d78e4 <spark_send_event+0xc>)
   d78dc:	681b      	ldr	r3, [r3, #0]
   d78de:	6a1b      	ldr	r3, [r3, #32]
   d78e0:	9301      	str	r3, [sp, #4]
   d78e2:	bd08      	pop	{r3, pc}
   d78e4:	00030244 	.word	0x00030244

000d78e8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d78e8:	b508      	push	{r3, lr}
   d78ea:	4b02      	ldr	r3, [pc, #8]	; (d78f4 <spark_subscribe+0xc>)
   d78ec:	681b      	ldr	r3, [r3, #0]
   d78ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d78f0:	9301      	str	r3, [sp, #4]
   d78f2:	bd08      	pop	{r3, pc}
   d78f4:	00030244 	.word	0x00030244

000d78f8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d78f8:	b508      	push	{r3, lr}
   d78fa:	4b02      	ldr	r3, [pc, #8]	; (d7904 <spark_sync_time+0xc>)
   d78fc:	681b      	ldr	r3, [r3, #0]
   d78fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7900:	9301      	str	r3, [sp, #4]
   d7902:	bd08      	pop	{r3, pc}
   d7904:	00030244 	.word	0x00030244

000d7908 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7908:	b508      	push	{r3, lr}
   d790a:	4b02      	ldr	r3, [pc, #8]	; (d7914 <spark_sync_time_pending+0xc>)
   d790c:	681b      	ldr	r3, [r3, #0]
   d790e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7910:	9301      	str	r3, [sp, #4]
   d7912:	bd08      	pop	{r3, pc}
   d7914:	00030244 	.word	0x00030244

000d7918 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d7918:	b508      	push	{r3, lr}
   d791a:	4b02      	ldr	r3, [pc, #8]	; (d7924 <spark_sync_time_last+0xc>)
   d791c:	681b      	ldr	r3, [r3, #0]
   d791e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7920:	9301      	str	r3, [sp, #4]
   d7922:	bd08      	pop	{r3, pc}
   d7924:	00030244 	.word	0x00030244

000d7928 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d7928:	b508      	push	{r3, lr}
   d792a:	4b02      	ldr	r3, [pc, #8]	; (d7934 <spark_set_connection_property+0xc>)
   d792c:	681b      	ldr	r3, [r3, #0]
   d792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7930:	9301      	str	r3, [sp, #4]
   d7932:	bd08      	pop	{r3, pc}
   d7934:	00030244 	.word	0x00030244

000d7938 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7938:	b508      	push	{r3, lr}
   d793a:	4b02      	ldr	r3, [pc, #8]	; (d7944 <spark_set_random_seed_from_cloud_handler+0xc>)
   d793c:	681b      	ldr	r3, [r3, #0]
   d793e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7940:	9301      	str	r3, [sp, #4]
   d7942:	bd08      	pop	{r3, pc}
   d7944:	00030244 	.word	0x00030244

000d7948 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d7948:	b508      	push	{r3, lr}
   d794a:	4b02      	ldr	r3, [pc, #8]	; (d7954 <spark_cloud_disconnect+0xc>)
   d794c:	681b      	ldr	r3, [r3, #0]
   d794e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7950:	9301      	str	r3, [sp, #4]
   d7952:	bd08      	pop	{r3, pc}
   d7954:	00030244 	.word	0x00030244

000d7958 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7958:	b508      	push	{r3, lr}
   d795a:	4b02      	ldr	r3, [pc, #8]	; (d7964 <network_connect+0xc>)
   d795c:	681b      	ldr	r3, [r3, #0]
   d795e:	685b      	ldr	r3, [r3, #4]
   d7960:	9301      	str	r3, [sp, #4]
   d7962:	bd08      	pop	{r3, pc}
   d7964:	00030240 	.word	0x00030240

000d7968 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7968:	b508      	push	{r3, lr}
   d796a:	4b02      	ldr	r3, [pc, #8]	; (d7974 <network_connecting+0xc>)
   d796c:	681b      	ldr	r3, [r3, #0]
   d796e:	689b      	ldr	r3, [r3, #8]
   d7970:	9301      	str	r3, [sp, #4]
   d7972:	bd08      	pop	{r3, pc}
   d7974:	00030240 	.word	0x00030240

000d7978 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7978:	b508      	push	{r3, lr}
   d797a:	4b02      	ldr	r3, [pc, #8]	; (d7984 <network_disconnect+0xc>)
   d797c:	681b      	ldr	r3, [r3, #0]
   d797e:	68db      	ldr	r3, [r3, #12]
   d7980:	9301      	str	r3, [sp, #4]
   d7982:	bd08      	pop	{r3, pc}
   d7984:	00030240 	.word	0x00030240

000d7988 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7988:	b508      	push	{r3, lr}
   d798a:	4b02      	ldr	r3, [pc, #8]	; (d7994 <network_ready+0xc>)
   d798c:	681b      	ldr	r3, [r3, #0]
   d798e:	691b      	ldr	r3, [r3, #16]
   d7990:	9301      	str	r3, [sp, #4]
   d7992:	bd08      	pop	{r3, pc}
   d7994:	00030240 	.word	0x00030240

000d7998 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7998:	b508      	push	{r3, lr}
   d799a:	4b02      	ldr	r3, [pc, #8]	; (d79a4 <network_on+0xc>)
   d799c:	681b      	ldr	r3, [r3, #0]
   d799e:	695b      	ldr	r3, [r3, #20]
   d79a0:	9301      	str	r3, [sp, #4]
   d79a2:	bd08      	pop	{r3, pc}
   d79a4:	00030240 	.word	0x00030240

000d79a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d79a8:	b508      	push	{r3, lr}
   d79aa:	4b02      	ldr	r3, [pc, #8]	; (d79b4 <network_off+0xc>)
   d79ac:	681b      	ldr	r3, [r3, #0]
   d79ae:	699b      	ldr	r3, [r3, #24]
   d79b0:	9301      	str	r3, [sp, #4]
   d79b2:	bd08      	pop	{r3, pc}
   d79b4:	00030240 	.word	0x00030240

000d79b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d79b8:	b508      	push	{r3, lr}
   d79ba:	4b02      	ldr	r3, [pc, #8]	; (d79c4 <network_listen+0xc>)
   d79bc:	681b      	ldr	r3, [r3, #0]
   d79be:	69db      	ldr	r3, [r3, #28]
   d79c0:	9301      	str	r3, [sp, #4]
   d79c2:	bd08      	pop	{r3, pc}
   d79c4:	00030240 	.word	0x00030240

000d79c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d79c8:	b508      	push	{r3, lr}
   d79ca:	4b02      	ldr	r3, [pc, #8]	; (d79d4 <network_listening+0xc>)
   d79cc:	681b      	ldr	r3, [r3, #0]
   d79ce:	6a1b      	ldr	r3, [r3, #32]
   d79d0:	9301      	str	r3, [sp, #4]
   d79d2:	bd08      	pop	{r3, pc}
   d79d4:	00030240 	.word	0x00030240

000d79d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d79d8:	b508      	push	{r3, lr}
   d79da:	4b02      	ldr	r3, [pc, #8]	; (d79e4 <network_set_listen_timeout+0xc>)
   d79dc:	681b      	ldr	r3, [r3, #0]
   d79de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d79e0:	9301      	str	r3, [sp, #4]
   d79e2:	bd08      	pop	{r3, pc}
   d79e4:	00030240 	.word	0x00030240

000d79e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d79e8:	b508      	push	{r3, lr}
   d79ea:	4b02      	ldr	r3, [pc, #8]	; (d79f4 <network_get_listen_timeout+0xc>)
   d79ec:	681b      	ldr	r3, [r3, #0]
   d79ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d79f0:	9301      	str	r3, [sp, #4]
   d79f2:	bd08      	pop	{r3, pc}
   d79f4:	00030240 	.word	0x00030240

000d79f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d79f8:	b508      	push	{r3, lr}
   d79fa:	4b02      	ldr	r3, [pc, #8]	; (d7a04 <network_is_on+0xc>)
   d79fc:	681b      	ldr	r3, [r3, #0]
   d79fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7a00:	9301      	str	r3, [sp, #4]
   d7a02:	bd08      	pop	{r3, pc}
   d7a04:	00030240 	.word	0x00030240

000d7a08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7a08:	b508      	push	{r3, lr}
   d7a0a:	4b02      	ldr	r3, [pc, #8]	; (d7a14 <network_is_off+0xc>)
   d7a0c:	681b      	ldr	r3, [r3, #0]
   d7a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7a10:	9301      	str	r3, [sp, #4]
   d7a12:	bd08      	pop	{r3, pc}
   d7a14:	00030240 	.word	0x00030240

000d7a18 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7a18:	b508      	push	{r3, lr}
   d7a1a:	4b02      	ldr	r3, [pc, #8]	; (d7a24 <malloc+0xc>)
   d7a1c:	681b      	ldr	r3, [r3, #0]
   d7a1e:	681b      	ldr	r3, [r3, #0]
   d7a20:	9301      	str	r3, [sp, #4]
   d7a22:	bd08      	pop	{r3, pc}
   d7a24:	0003021c 	.word	0x0003021c

000d7a28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7a28:	b508      	push	{r3, lr}
   d7a2a:	4b02      	ldr	r3, [pc, #8]	; (d7a34 <free+0xc>)
   d7a2c:	681b      	ldr	r3, [r3, #0]
   d7a2e:	685b      	ldr	r3, [r3, #4]
   d7a30:	9301      	str	r3, [sp, #4]
   d7a32:	bd08      	pop	{r3, pc}
   d7a34:	0003021c 	.word	0x0003021c

000d7a38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7a38:	b508      	push	{r3, lr}
   d7a3a:	4b02      	ldr	r3, [pc, #8]	; (d7a44 <realloc+0xc>)
   d7a3c:	681b      	ldr	r3, [r3, #0]
   d7a3e:	689b      	ldr	r3, [r3, #8]
   d7a40:	9301      	str	r3, [sp, #4]
   d7a42:	bd08      	pop	{r3, pc}
   d7a44:	0003021c 	.word	0x0003021c

000d7a48 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7a48:	b508      	push	{r3, lr}
   d7a4a:	4b02      	ldr	r3, [pc, #8]	; (d7a54 <siprintf+0xc>)
   d7a4c:	681b      	ldr	r3, [r3, #0]
   d7a4e:	691b      	ldr	r3, [r3, #16]
   d7a50:	9301      	str	r3, [sp, #4]
   d7a52:	bd08      	pop	{r3, pc}
   d7a54:	0003021c 	.word	0x0003021c

000d7a58 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7a58:	b508      	push	{r3, lr}
   d7a5a:	4b02      	ldr	r3, [pc, #8]	; (d7a64 <snprintf+0xc>)
   d7a5c:	681b      	ldr	r3, [r3, #0]
   d7a5e:	69db      	ldr	r3, [r3, #28]
   d7a60:	9301      	str	r3, [sp, #4]
   d7a62:	bd08      	pop	{r3, pc}
   d7a64:	0003021c 	.word	0x0003021c

000d7a68 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7a68:	b508      	push	{r3, lr}
   d7a6a:	4b02      	ldr	r3, [pc, #8]	; (d7a74 <vsnprintf+0xc>)
   d7a6c:	681b      	ldr	r3, [r3, #0]
   d7a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7a70:	9301      	str	r3, [sp, #4]
   d7a72:	bd08      	pop	{r3, pc}
   d7a74:	0003021c 	.word	0x0003021c

000d7a78 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7a78:	b508      	push	{r3, lr}
   d7a7a:	4b02      	ldr	r3, [pc, #8]	; (d7a84 <abort+0xc>)
   d7a7c:	681b      	ldr	r3, [r3, #0]
   d7a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7a80:	9301      	str	r3, [sp, #4]
   d7a82:	bd08      	pop	{r3, pc}
   d7a84:	0003021c 	.word	0x0003021c

000d7a88 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7a88:	b508      	push	{r3, lr}
   d7a8a:	4b02      	ldr	r3, [pc, #8]	; (d7a94 <_malloc_r+0xc>)
   d7a8c:	681b      	ldr	r3, [r3, #0]
   d7a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a90:	9301      	str	r3, [sp, #4]
   d7a92:	bd08      	pop	{r3, pc}
   d7a94:	0003021c 	.word	0x0003021c

000d7a98 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7a98:	b508      	push	{r3, lr}
   d7a9a:	4b02      	ldr	r3, [pc, #8]	; (d7aa4 <newlib_impure_ptr_callback+0xc>)
   d7a9c:	681b      	ldr	r3, [r3, #0]
   d7a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7aa0:	9301      	str	r3, [sp, #4]
   d7aa2:	bd08      	pop	{r3, pc}
   d7aa4:	0003021c 	.word	0x0003021c

000d7aa8 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d7aa8:	b508      	push	{r3, lr}
   d7aaa:	4b02      	ldr	r3, [pc, #8]	; (d7ab4 <strftime+0xc>)
   d7aac:	681b      	ldr	r3, [r3, #0]
   d7aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7ab0:	9301      	str	r3, [sp, #4]
   d7ab2:	bd08      	pop	{r3, pc}
   d7ab4:	0003021c 	.word	0x0003021c

000d7ab8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7ab8:	b508      	push	{r3, lr}
   d7aba:	4b02      	ldr	r3, [pc, #8]	; (d7ac4 <localtime_r+0xc>)
   d7abc:	681b      	ldr	r3, [r3, #0]
   d7abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7ac0:	9301      	str	r3, [sp, #4]
   d7ac2:	bd08      	pop	{r3, pc}
   d7ac4:	0003021c 	.word	0x0003021c

000d7ac8 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7ac8:	b508      	push	{r3, lr}
   d7aca:	4b02      	ldr	r3, [pc, #8]	; (d7ad4 <gmtime_r+0xc>)
   d7acc:	681b      	ldr	r3, [r3, #0]
   d7ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7ad0:	9301      	str	r3, [sp, #4]
   d7ad2:	bd08      	pop	{r3, pc}
   d7ad4:	0003021c 	.word	0x0003021c

000d7ad8 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d7ad8:	b508      	push	{r3, lr}
   d7ada:	4b02      	ldr	r3, [pc, #8]	; (d7ae4 <mktime+0xc>)
   d7adc:	681b      	ldr	r3, [r3, #0]
   d7ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7ae0:	9301      	str	r3, [sp, #4]
   d7ae2:	bd08      	pop	{r3, pc}
   d7ae4:	0003021c 	.word	0x0003021c

000d7ae8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d7ae8:	428a      	cmp	r2, r1
{
   d7aea:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d7aec:	d007      	beq.n	d7afe <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d7aee:	9c02      	ldr	r4, [sp, #8]
   d7af0:	1a40      	subs	r0, r0, r1
   d7af2:	1ae4      	subs	r4, r4, r3
   d7af4:	4360      	muls	r0, r4
   d7af6:	1a52      	subs	r2, r2, r1
   d7af8:	fb90 f0f2 	sdiv	r0, r0, r2
   d7afc:	4418      	add	r0, r3
}
   d7afe:	bd10      	pop	{r4, pc}

000d7b00 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7b00:	2100      	movs	r1, #0
   d7b02:	f7ff be47 	b.w	d7794 <system_delay_ms>

000d7b06 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7b06:	b510      	push	{r4, lr}
      if (_M_empty())
   d7b08:	6883      	ldr	r3, [r0, #8]
   d7b0a:	4604      	mov	r4, r0
   d7b0c:	b90b      	cbnz	r3, d7b12 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7b0e:	f001 ff40 	bl	d9992 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7b12:	68c3      	ldr	r3, [r0, #12]
   d7b14:	4798      	blx	r3
      if (_M_manager)
   d7b16:	68a3      	ldr	r3, [r4, #8]
   d7b18:	b11b      	cbz	r3, d7b22 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7b1a:	2203      	movs	r2, #3
   d7b1c:	4621      	mov	r1, r4
   d7b1e:	4620      	mov	r0, r4
   d7b20:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7b22:	4620      	mov	r0, r4
   d7b24:	2110      	movs	r1, #16
}
   d7b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7b2a:	f001 bf2c 	b.w	d9986 <_ZdlPvj>

000d7b2e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7b2e:	b510      	push	{r4, lr}
          _M_dispose();
   d7b30:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7b32:	4604      	mov	r4, r0
          _M_dispose();
   d7b34:	689b      	ldr	r3, [r3, #8]
   d7b36:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7b38:	68a3      	ldr	r3, [r4, #8]
   d7b3a:	3b01      	subs	r3, #1
   d7b3c:	60a3      	str	r3, [r4, #8]
   d7b3e:	b92b      	cbnz	r3, d7b4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d7b40:	6823      	ldr	r3, [r4, #0]
   d7b42:	4620      	mov	r0, r4
   d7b44:	68db      	ldr	r3, [r3, #12]
    }
   d7b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7b4a:	4718      	bx	r3
    }
   d7b4c:	bd10      	pop	{r4, pc}

000d7b4e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7b4e:	b510      	push	{r4, lr}
   d7b50:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7b52:	6800      	ldr	r0, [r0, #0]
   d7b54:	b108      	cbz	r0, d7b5a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7b56:	f7ff fc53 	bl	d7400 <os_mutex_recursive_destroy>
    }
   d7b5a:	4620      	mov	r0, r4
   d7b5c:	bd10      	pop	{r4, pc}

000d7b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7b5e:	680b      	ldr	r3, [r1, #0]
   d7b60:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7b62:	b113      	cbz	r3, d7b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7b64:	685a      	ldr	r2, [r3, #4]
   d7b66:	3201      	adds	r2, #1
   d7b68:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d7b6a:	4770      	bx	lr

000d7b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d7b6c:	b510      	push	{r4, lr}
   d7b6e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d7b70:	6800      	ldr	r0, [r0, #0]
   d7b72:	b128      	cbz	r0, d7b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d7b74:	6843      	ldr	r3, [r0, #4]
   d7b76:	3b01      	subs	r3, #1
   d7b78:	6043      	str	r3, [r0, #4]
   d7b7a:	b90b      	cbnz	r3, d7b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7b7c:	f7ff ffd7 	bl	d7b2e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d7b80:	4620      	mov	r0, r4
   d7b82:	bd10      	pop	{r4, pc}

000d7b84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7b84:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7b86:	4c06      	ldr	r4, [pc, #24]	; (d7ba0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7b88:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7b8a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7b8c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7b8e:	f7ff fc2f 	bl	d73f0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7b92:	4620      	mov	r0, r4
   d7b94:	4a03      	ldr	r2, [pc, #12]	; (d7ba4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7b96:	4904      	ldr	r1, [pc, #16]	; (d7ba8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7b9c:	f001 beee 	b.w	d997c <__aeabi_atexit>
   d7ba0:	2003e5cc 	.word	0x2003e5cc
   d7ba4:	2003e408 	.word	0x2003e408
   d7ba8:	000d7b4f 	.word	0x000d7b4f

000d7bac <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7bac:	2200      	movs	r2, #0
   d7bae:	6840      	ldr	r0, [r0, #4]
   d7bb0:	4611      	mov	r1, r2
   d7bb2:	f7ff bee9 	b.w	d7988 <network_ready>

000d7bb6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7bb6:	2200      	movs	r2, #0
   d7bb8:	6840      	ldr	r0, [r0, #4]
   d7bba:	4611      	mov	r1, r2
   d7bbc:	f7ff bf04 	b.w	d79c8 <network_listening>

000d7bc0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7bc0:	2200      	movs	r2, #0
   d7bc2:	6840      	ldr	r0, [r0, #4]
   d7bc4:	4611      	mov	r1, r2
   d7bc6:	f7ff bf0f 	b.w	d79e8 <network_get_listen_timeout>

000d7bca <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7bca:	6840      	ldr	r0, [r0, #4]
   d7bcc:	2200      	movs	r2, #0
   d7bce:	f7ff bf03 	b.w	d79d8 <network_set_listen_timeout>

000d7bd2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7bd2:	6840      	ldr	r0, [r0, #4]
   d7bd4:	2200      	movs	r2, #0
   d7bd6:	f081 0101 	eor.w	r1, r1, #1
   d7bda:	f7ff beed 	b.w	d79b8 <network_listen>

000d7bde <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7bde:	2300      	movs	r3, #0
   d7be0:	6840      	ldr	r0, [r0, #4]
   d7be2:	461a      	mov	r2, r3
   d7be4:	4619      	mov	r1, r3
   d7be6:	f7ff bed7 	b.w	d7998 <network_on>

000d7bea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7bea:	2200      	movs	r2, #0
   d7bec:	6840      	ldr	r0, [r0, #4]
   d7bee:	4611      	mov	r1, r2
   d7bf0:	f7ff beba 	b.w	d7968 <network_connecting>

000d7bf4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7bf4:	6840      	ldr	r0, [r0, #4]
   d7bf6:	2200      	movs	r2, #0
   d7bf8:	2102      	movs	r1, #2
   d7bfa:	f7ff bebd 	b.w	d7978 <network_disconnect>

000d7bfe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7bfe:	2300      	movs	r3, #0
   d7c00:	6840      	ldr	r0, [r0, #4]
   d7c02:	461a      	mov	r2, r3
   d7c04:	f7ff bea8 	b.w	d7958 <network_connect>

000d7c08 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d7c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d7c0a:	4b1b      	ldr	r3, [pc, #108]	; (d7c78 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d7c0c:	6003      	str	r3, [r0, #0]
   d7c0e:	2500      	movs	r5, #0
   d7c10:	460f      	mov	r7, r1
   d7c12:	3328      	adds	r3, #40	; 0x28
   d7c14:	2618      	movs	r6, #24
   d7c16:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7c1a:	b089      	sub	sp, #36	; 0x24
   d7c1c:	6043      	str	r3, [r0, #4]
   d7c1e:	4632      	mov	r2, r6
   d7c20:	4629      	mov	r1, r5
   d7c22:	4604      	mov	r4, r0
   d7c24:	3010      	adds	r0, #16
   d7c26:	f002 fc7f 	bl	da528 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7c2a:	6878      	ldr	r0, [r7, #4]
   d7c2c:	462a      	mov	r2, r5
   d7c2e:	4629      	mov	r1, r5
   d7c30:	f7ff feaa 	bl	d7988 <network_ready>
   d7c34:	b918      	cbnz	r0, d7c3e <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d7c36:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d7c38:	4620      	mov	r0, r4
   d7c3a:	b009      	add	sp, #36	; 0x24
   d7c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d7c3e:	4629      	mov	r1, r5
   d7c40:	4632      	mov	r2, r6
   d7c42:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d7c44:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d7c48:	f002 fc6e 	bl	da528 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7c4c:	a902      	add	r1, sp, #8
   d7c4e:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d7c50:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7c54:	f7ff fb74 	bl	d7340 <cellular_signal>
   d7c58:	b110      	cbz	r0, d7c60 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d7c5a:	2301      	movs	r3, #1
   d7c5c:	60a3      	str	r3, [r4, #8]
            return sig;
   d7c5e:	e7eb      	b.n	d7c38 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d7c60:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d7c62:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d7c64:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d7c66:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d7c68:	b90b      	cbnz	r3, d7c6e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d7c6a:	2302      	movs	r3, #2
   d7c6c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d7c6e:	a902      	add	r1, sp, #8
   d7c70:	4620      	mov	r0, r4
   d7c72:	f000 f8ae 	bl	d7dd2 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d7c76:	e7df      	b.n	d7c38 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d7c78:	000dce24 	.word	0x000dce24

000d7c7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7c7c:	4b08      	ldr	r3, [pc, #32]	; (d7ca0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7c7e:	b510      	push	{r4, lr}
   d7c80:	2428      	movs	r4, #40	; 0x28
   d7c82:	4622      	mov	r2, r4
   d7c84:	4618      	mov	r0, r3
   d7c86:	2100      	movs	r1, #0
   d7c88:	f002 fc4e 	bl	da528 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7c8c:	4b05      	ldr	r3, [pc, #20]	; (d7ca4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7c8e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7c94:	6042      	str	r2, [r0, #4]
   d7c96:	2204      	movs	r2, #4
   d7c98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7c9a:	4a03      	ldr	r2, [pc, #12]	; (d7ca8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7c9c:	601a      	str	r2, [r3, #0]
   d7c9e:	bd10      	pop	{r4, pc}
   d7ca0:	2003e5d8 	.word	0x2003e5d8
   d7ca4:	2003e5d0 	.word	0x2003e5d0
   d7ca8:	000dcde8 	.word	0x000dcde8

000d7cac <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d7cac:	4770      	bx	lr

000d7cae <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7cae:	7d00      	ldrb	r0, [r0, #20]
   d7cb0:	4770      	bx	lr

000d7cb2 <_ZN14CellularSignalD0Ev>:
   d7cb2:	b510      	push	{r4, lr}
   d7cb4:	2128      	movs	r1, #40	; 0x28
   d7cb6:	4604      	mov	r4, r0
   d7cb8:	f001 fe65 	bl	d9986 <_ZdlPvj>
   d7cbc:	4620      	mov	r0, r4
   d7cbe:	bd10      	pop	{r4, pc}

000d7cc0 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d7cc0:	7d03      	ldrb	r3, [r0, #20]
   d7cc2:	b17b      	cbz	r3, d7ce4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d7cc4:	69c3      	ldr	r3, [r0, #28]
   d7cc6:	2b00      	cmp	r3, #0
   d7cc8:	db0c      	blt.n	d7ce4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d7cca:	ee07 3a90 	vmov	s15, r3
   d7cce:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7cec <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d7cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7cd6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7cda:	eddf 7a05 	vldr	s15, [pc, #20]	; d7cf0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d7cde:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7ce2:	4770      	bx	lr
    }

    return -1.0f;
   d7ce4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7ce8:	4770      	bx	lr
   d7cea:	bf00      	nop
   d7cec:	477fff00 	.word	0x477fff00
   d7cf0:	42c80000 	.word	0x42c80000

000d7cf4 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d7cf4:	7d03      	ldrb	r3, [r0, #20]
   d7cf6:	b163      	cbz	r3, d7d12 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d7cf8:	6983      	ldr	r3, [r0, #24]
   d7cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7cfe:	d008      	beq.n	d7d12 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d7d00:	ee07 3a90 	vmov	s15, r3
   d7d04:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7d18 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7d0c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7d10:	4770      	bx	lr
    }

    return 0.0f;
   d7d12:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7d1c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d7d16:	4770      	bx	lr
   d7d18:	42c80000 	.word	0x42c80000
   d7d1c:	00000000 	.word	0x00000000

000d7d20 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7d20:	7d03      	ldrb	r3, [r0, #20]
   d7d22:	b17b      	cbz	r3, d7d44 <_ZNK14CellularSignal10getQualityEv+0x24>
   d7d24:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d7d26:	2b00      	cmp	r3, #0
   d7d28:	db0c      	blt.n	d7d44 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d7d2a:	ee07 3a90 	vmov	s15, r3
   d7d2e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7d4c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d7d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7d36:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7d3a:	eddf 7a05 	vldr	s15, [pc, #20]	; d7d50 <_ZNK14CellularSignal10getQualityEv+0x30>
   d7d3e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7d42:	4770      	bx	lr
    }

    return -1.0f;
   d7d44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7d48:	4770      	bx	lr
   d7d4a:	bf00      	nop
   d7d4c:	477fff00 	.word	0x477fff00
   d7d50:	42c80000 	.word	0x42c80000

000d7d54 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7d54:	7d03      	ldrb	r3, [r0, #20]
   d7d56:	b163      	cbz	r3, d7d72 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d7d58:	6a03      	ldr	r3, [r0, #32]
   d7d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7d5e:	d008      	beq.n	d7d72 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d7d60:	ee07 3a90 	vmov	s15, r3
   d7d64:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7d78 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7d6c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7d70:	4770      	bx	lr
    }

    return 0.0f;
   d7d72:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7d7c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d7d76:	4770      	bx	lr
   d7d78:	42c80000 	.word	0x42c80000
   d7d7c:	00000000 	.word	0x00000000

000d7d80 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d7d80:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d7d82:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d7d84:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d7d86:	da0a      	bge.n	d7d9e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d7d88:	212d      	movs	r1, #45	; 0x2d
   d7d8a:	f000 fee4 	bl	d8b56 <_ZN5Print5printEc>
            val = -n;
   d7d8e:	4261      	negs	r1, r4
            t = print('-');
   d7d90:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7d92:	220a      	movs	r2, #10
   d7d94:	4630      	mov	r0, r6
   d7d96:	f000 fef7 	bl	d8b88 <_ZN5Print11printNumberEmh>
    }
}
   d7d9a:	4428      	add	r0, r5
   d7d9c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d7d9e:	4621      	mov	r1, r4
        size_t t = 0;
   d7da0:	2500      	movs	r5, #0
   d7da2:	e7f6      	b.n	d7d92 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d7da4 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d7da4:	b570      	push	{r4, r5, r6, lr}
   d7da6:	460c      	mov	r4, r1
   d7da8:	4605      	mov	r5, r0
   d7daa:	6881      	ldr	r1, [r0, #8]
   d7dac:	4620      	mov	r0, r4
   d7dae:	f7ff ffe7 	bl	d7d80 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d7db2:	212c      	movs	r1, #44	; 0x2c
   d7db4:	4606      	mov	r6, r0
   d7db6:	4620      	mov	r0, r4
   d7db8:	f000 fecd 	bl	d8b56 <_ZN5Print5printEc>
   d7dbc:	68e9      	ldr	r1, [r5, #12]
   d7dbe:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d7dc0:	4620      	mov	r0, r4
   d7dc2:	f7ff ffdd 	bl	d7d80 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d7dc6:	4430      	add	r0, r6
   d7dc8:	bd70      	pop	{r4, r5, r6, pc}

000d7dca <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d7dca:	f1a0 0004 	sub.w	r0, r0, #4
   d7dce:	f7ff bfe9 	b.w	d7da4 <_ZNK14CellularSignal7printToER5Print>

000d7dd2 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d7dd2:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d7dd4:	460d      	mov	r5, r1
   d7dd6:	f100 0410 	add.w	r4, r0, #16
   d7dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7dde:	e895 0003 	ldmia.w	r5, {r0, r1}
   d7de2:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d7de6:	2001      	movs	r0, #1
   d7de8:	bd30      	pop	{r4, r5, pc}

000d7dea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7dea:	4770      	bx	lr

000d7dec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7dec:	2000      	movs	r0, #0
   d7dee:	4770      	bx	lr

000d7df0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7df0:	b510      	push	{r4, lr}
   d7df2:	2110      	movs	r1, #16
   d7df4:	4604      	mov	r4, r0
   d7df6:	f001 fdc6 	bl	d9986 <_ZdlPvj>
   d7dfa:	4620      	mov	r0, r4
   d7dfc:	bd10      	pop	{r4, pc}

000d7dfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7dfe:	b508      	push	{r3, lr}
      { delete this; }
   d7e00:	f7ff fff6 	bl	d7df0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7e04:	bd08      	pop	{r3, pc}

000d7e06 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7e06:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7e08:	2200      	movs	r2, #0
   d7e0a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7e0e:	6002      	str	r2, [r0, #0]
   d7e10:	8084      	strh	r4, [r0, #4]
   d7e12:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e14:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7e16:	680c      	ldr	r4, [r1, #0]
   d7e18:	8085      	strh	r5, [r0, #4]
   d7e1a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e1c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7e1e:	bd30      	pop	{r4, r5, pc}

000d7e20 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7e20:	b510      	push	{r4, lr}
   d7e22:	4604      	mov	r4, r0
    free((void*)msg_);
   d7e24:	6800      	ldr	r0, [r0, #0]
   d7e26:	f7ff fdff 	bl	d7a28 <free>
}
   d7e2a:	4620      	mov	r0, r4
   d7e2c:	bd10      	pop	{r4, pc}

000d7e2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7e2e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7e30:	68c4      	ldr	r4, [r0, #12]
   d7e32:	b1f4      	cbz	r4, d7e72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7e34:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7e36:	2b02      	cmp	r3, #2
   d7e38:	d103      	bne.n	d7e42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7e3a:	f104 000c 	add.w	r0, r4, #12
   d7e3e:	f7ff ffef 	bl	d7e20 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7e42:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7e44:	b135      	cbz	r5, d7e54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7e46:	4628      	mov	r0, r5
   d7e48:	f7fc fa32 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
   d7e4c:	2110      	movs	r1, #16
   d7e4e:	4628      	mov	r0, r5
   d7e50:	f001 fd99 	bl	d9986 <_ZdlPvj>
   d7e54:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7e56:	b135      	cbz	r5, d7e66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7e58:	4628      	mov	r0, r5
   d7e5a:	f7fc fa29 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
   d7e5e:	2110      	movs	r1, #16
   d7e60:	4628      	mov	r0, r5
   d7e62:	f001 fd90 	bl	d9986 <_ZdlPvj>
   d7e66:	4620      	mov	r0, r4
   d7e68:	2114      	movs	r1, #20
   d7e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7e6e:	f001 bd8a 	b.w	d9986 <_ZdlPvj>
   d7e72:	bd38      	pop	{r3, r4, r5, pc}

000d7e74 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d7e74:	b510      	push	{r4, lr}
   d7e76:	b088      	sub	sp, #32
   d7e78:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7e7a:	4668      	mov	r0, sp
   d7e7c:	f000 ff0b 	bl	d8c96 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d7e80:	4669      	mov	r1, sp
   d7e82:	a804      	add	r0, sp, #16
   d7e84:	f000 ff2a 	bl	d8cdc <_ZN6StringC1ERKS_>
   d7e88:	a804      	add	r0, sp, #16
   d7e8a:	47a0      	blx	r4
   d7e8c:	4604      	mov	r4, r0
   d7e8e:	a804      	add	r0, sp, #16
   d7e90:	f000 feb6 	bl	d8c00 <_ZN6StringD1Ev>
    String p(param);
   d7e94:	4668      	mov	r0, sp
   d7e96:	f000 feb3 	bl	d8c00 <_ZN6StringD1Ev>
}
   d7e9a:	4620      	mov	r0, r4
   d7e9c:	b008      	add	sp, #32
   d7e9e:	bd10      	pop	{r4, pc}

000d7ea0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7ea2:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d7ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d7ea8:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d7eaa:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7eac:	461a      	mov	r2, r3
   d7eae:	4669      	mov	r1, sp
   d7eb0:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d7eb2:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d7eb6:	f8ad 4000 	strh.w	r4, [sp]
   d7eba:	f7ff fce5 	bl	d7888 <spark_function>
}
   d7ebe:	b004      	add	sp, #16
   d7ec0:	bd10      	pop	{r4, pc}

000d7ec2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d7ec2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d7ec4:	230c      	movs	r3, #12
   d7ec6:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d7eca:	6803      	ldr	r3, [r0, #0]
   d7ecc:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d7ed0:	7a03      	ldrb	r3, [r0, #8]
   d7ed2:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d7ed6:	6843      	ldr	r3, [r0, #4]
   d7ed8:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d7eda:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d7edc:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d7ede:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7ee2:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d7ee4:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d7ee8:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7eec:	f7ff fd2c 	bl	d7948 <spark_cloud_disconnect>
}
   d7ef0:	b005      	add	sp, #20
   d7ef2:	f85d fb04 	ldr.w	pc, [sp], #4

000d7ef6 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d7ef6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d7ef8:	220c      	movs	r2, #12
   d7efa:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   d7efe:	6802      	ldr	r2, [r0, #0]
   d7f00:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   d7f04:	7a02      	ldrb	r2, [r0, #8]
   d7f06:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   d7f0a:	6842      	ldr	r2, [r0, #4]
   d7f0c:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d7f0e:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   d7f10:	7a42      	ldrb	r2, [r0, #9]
   d7f12:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d7f16:	4619      	mov	r1, r3
   d7f18:	aa01      	add	r2, sp, #4
   d7f1a:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   d7f1c:	f8ad 300d 	strh.w	r3, [sp, #13]
   d7f20:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d7f24:	f7ff fd00 	bl	d7928 <spark_set_connection_property>
}
   d7f28:	b005      	add	sp, #20
   d7f2a:	f85d fb04 	ldr.w	pc, [sp], #4

000d7f2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7f30:	460e      	mov	r6, r1
   d7f32:	4604      	mov	r4, r0
   d7f34:	f856 3b04 	ldr.w	r3, [r6], #4
   d7f38:	9300      	str	r3, [sp, #0]
   d7f3a:	460d      	mov	r5, r1
   d7f3c:	a801      	add	r0, sp, #4
   d7f3e:	4631      	mov	r1, r6
   d7f40:	f7ff fe0d 	bl	d7b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7f44:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7f46:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d7f48:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7f4a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7f4c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7f4e:	2300      	movs	r3, #0
   d7f50:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7f52:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d7f54:	f7ff fe0a 	bl	d7b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f58:	4630      	mov	r0, r6
   d7f5a:	f7ff fe07 	bl	d7b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7f5e:	4628      	mov	r0, r5
   d7f60:	2108      	movs	r1, #8
   d7f62:	f001 fd10 	bl	d9986 <_ZdlPvj>
        return p;
    }
   d7f66:	4620      	mov	r0, r4
   d7f68:	b002      	add	sp, #8
   d7f6a:	bd70      	pop	{r4, r5, r6, pc}

000d7f6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7f6c:	b513      	push	{r0, r1, r4, lr}
   d7f6e:	460b      	mov	r3, r1
   d7f70:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f72:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7f76:	466c      	mov	r4, sp
   d7f78:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7f80:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7f84:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7f88:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7f8c:	b002      	add	sp, #8
   d7f8e:	bd10      	pop	{r4, pc}

000d7f90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7f90:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7f92:	b510      	push	{r4, lr}
      if (_M_empty())
   d7f94:	b90a      	cbnz	r2, d7f9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7f96:	f001 fcfc 	bl	d9992 <_ZSt25__throw_bad_function_callv>
    }
   d7f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f9e:	68c3      	ldr	r3, [r0, #12]
   d7fa0:	4718      	bx	r3

000d7fa2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7fa2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7fa4:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7fa6:	f100 0110 	add.w	r1, r0, #16
   d7faa:	f7ff fff1 	bl	d7f90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7fae:	bd08      	pop	{r3, pc}

000d7fb0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7fb0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7fb2:	b510      	push	{r4, lr}
      if (_M_empty())
   d7fb4:	b90a      	cbnz	r2, d7fba <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7fb6:	f001 fcec 	bl	d9992 <_ZSt25__throw_bad_function_callv>
    }
   d7fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7fbe:	68c3      	ldr	r3, [r0, #12]
   d7fc0:	4718      	bx	r3

000d7fc2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7fc2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7fc4:	6800      	ldr	r0, [r0, #0]
   d7fc6:	f100 0110 	add.w	r1, r0, #16
   d7fca:	f7ff fff1 	bl	d7fb0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7fce:	bd08      	pop	{r3, pc}

000d7fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7fd0:	b538      	push	{r3, r4, r5, lr}
   d7fd2:	2300      	movs	r3, #0
   d7fd4:	4604      	mov	r4, r0
   d7fd6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7fd8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7fda:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7fdc:	f7fc f85b 	bl	d4096 <_Znwj>
   d7fe0:	b128      	cbz	r0, d7fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7fe2:	2301      	movs	r3, #1
   d7fe4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7fe8:	4b02      	ldr	r3, [pc, #8]	; (d7ff4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7fea:	6003      	str	r3, [r0, #0]
   d7fec:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7fee:	6020      	str	r0, [r4, #0]
	}
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	bd38      	pop	{r3, r4, r5, pc}
   d7ff4:	000dce58 	.word	0x000dce58

000d7ff8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7ff8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7ffa:	2300      	movs	r3, #0
   d7ffc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7ffe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8000:	4604      	mov	r4, r0
   d8002:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8004:	b12b      	cbz	r3, d8012 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8006:	2202      	movs	r2, #2
   d8008:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d800a:	68eb      	ldr	r3, [r5, #12]
   d800c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d800e:	68ab      	ldr	r3, [r5, #8]
   d8010:	60a3      	str	r3, [r4, #8]
    }
   d8012:	4620      	mov	r0, r4
   d8014:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8018:	b5f0      	push	{r4, r5, r6, r7, lr}
   d801a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d801c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d801e:	4668      	mov	r0, sp
   d8020:	f7ff fef1 	bl	d7e06 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8024:	f04f 0302 	mov.w	r3, #2
   d8028:	e8d4 2f4f 	ldrexb	r2, [r4]
   d802c:	2a00      	cmp	r2, #0
   d802e:	d103      	bne.n	d8038 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8030:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8034:	2900      	cmp	r1, #0
   d8036:	d1f7      	bne.n	d8028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8038:	d125      	bne.n	d8086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d803a:	f104 050c 	add.w	r5, r4, #12
   d803e:	4669      	mov	r1, sp
   d8040:	4628      	mov	r0, r5
   d8042:	f7ff fee0 	bl	d7e06 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8046:	f3bf 8f5b 	dmb	ish
   d804a:	2301      	movs	r3, #1
   d804c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d804e:	2000      	movs	r0, #0
   d8050:	f104 0308 	add.w	r3, r4, #8
   d8054:	f3bf 8f5b 	dmb	ish
   d8058:	e853 6f00 	ldrex	r6, [r3]
   d805c:	e843 0200 	strex	r2, r0, [r3]
   d8060:	2a00      	cmp	r2, #0
   d8062:	d1f9      	bne.n	d8058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8064:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8068:	b16e      	cbz	r6, d8086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d806a:	f7ff fbb3 	bl	d77d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d806e:	b178      	cbz	r0, d8090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8070:	4629      	mov	r1, r5
   d8072:	4630      	mov	r0, r6
   d8074:	f7ff ff8c 	bl	d7f90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8078:	4630      	mov	r0, r6
   d807a:	f7fc f919 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d807e:	2110      	movs	r1, #16
   d8080:	4630      	mov	r0, r6
   d8082:	f001 fc80 	bl	d9986 <_ZdlPvj>
        p_->setError(std::move(error));
   d8086:	4668      	mov	r0, sp
   d8088:	f7ff feca 	bl	d7e20 <_ZN8particle5ErrorD1Ev>
    }
   d808c:	b009      	add	sp, #36	; 0x24
   d808e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8090:	4631      	mov	r1, r6
   d8092:	a802      	add	r0, sp, #8
   d8094:	f7ff ffb0 	bl	d7ff8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8098:	68e0      	ldr	r0, [r4, #12]
   d809a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d809e:	b108      	cbz	r0, d80a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d80a0:	f002 fa80 	bl	da5a4 <strdup>
        type_(type) {
   d80a4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d80a6:	2010      	movs	r0, #16
   d80a8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d80ac:	f7fb fff3 	bl	d4096 <_Znwj>
   d80b0:	4605      	mov	r5, r0
   d80b2:	b1e8      	cbz	r0, d80f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d80b4:	2700      	movs	r7, #0
   d80b6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d80b8:	2018      	movs	r0, #24
   d80ba:	f7fb ffec 	bl	d4096 <_Znwj>
   d80be:	4604      	mov	r4, r0
   d80c0:	b188      	cbz	r0, d80e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d80c2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d80c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d80c6:	a802      	add	r0, sp, #8
   d80c8:	f7ff ff50 	bl	d7f6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d80cc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d80ce:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d80d0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d80d2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d80d4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d80d6:	a906      	add	r1, sp, #24
   d80d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d80da:	60e3      	str	r3, [r4, #12]
   d80dc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d80e0:	9205      	str	r2, [sp, #20]
   d80e2:	f7ff fe90 	bl	d7e06 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d80e6:	4b08      	ldr	r3, [pc, #32]	; (d8108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d80e8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d80ea:	4b08      	ldr	r3, [pc, #32]	; (d810c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d80ec:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d80ee:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d80f0:	a806      	add	r0, sp, #24
   d80f2:	f7ff fe95 	bl	d7e20 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d80f6:	a802      	add	r0, sp, #8
   d80f8:	f7fc f8da 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d80fc:	2200      	movs	r2, #0
   d80fe:	4629      	mov	r1, r5
   d8100:	4803      	ldr	r0, [pc, #12]	; (d8110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8102:	f7ff fb6f 	bl	d77e4 <application_thread_invoke>
   d8106:	e7b7      	b.n	d8078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8108:	000d7fa3 	.word	0x000d7fa3
   d810c:	000d8239 	.word	0x000d8239
   d8110:	000d7b07 	.word	0x000d7b07

000d8114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8118:	b08a      	sub	sp, #40	; 0x28
   d811a:	4605      	mov	r5, r0
   d811c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8120:	460c      	mov	r4, r1
   d8122:	4617      	mov	r7, r2
   d8124:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8126:	f7ff fbc7 	bl	d78b8 <spark_cloud_flag_connected>
   d812a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d812c:	4682      	mov	sl, r0
   d812e:	bb38      	cbnz	r0, d8180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8130:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8134:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8136:	a905      	add	r1, sp, #20
   d8138:	4630      	mov	r0, r6
   d813a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d813e:	f7ff fe62 	bl	d7e06 <_ZN8particle5ErrorC1EOS0_>
   d8142:	2014      	movs	r0, #20
   d8144:	f7fb ffa7 	bl	d4096 <_Znwj>
   d8148:	4604      	mov	r4, r0
   d814a:	b148      	cbz	r0, d8160 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d814c:	2302      	movs	r3, #2
   d814e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8150:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8152:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8156:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8158:	4631      	mov	r1, r6
   d815a:	300c      	adds	r0, #12
   d815c:	f7ff fe53 	bl	d7e06 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8160:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8162:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8164:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8168:	f7ff ff32 	bl	d7fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d816c:	4630      	mov	r0, r6
   d816e:	f7ff fe57 	bl	d7e20 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8172:	a805      	add	r0, sp, #20
   d8174:	f7ff fe54 	bl	d7e20 <_ZN8particle5ErrorD1Ev>
}
   d8178:	4628      	mov	r0, r5
   d817a:	b00a      	add	sp, #40	; 0x28
   d817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8180:	230c      	movs	r3, #12
   d8182:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8186:	2014      	movs	r0, #20
   d8188:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d818c:	9307      	str	r3, [sp, #28]
   d818e:	f7fb ff82 	bl	d4096 <_Znwj>
   d8192:	4601      	mov	r1, r0
   d8194:	b128      	cbz	r0, d81a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8196:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d819a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d819e:	f880 a001 	strb.w	sl, [r0, #1]
   d81a2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d81a4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d81a6:	f7ff ff13 	bl	d7fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d81aa:	4b22      	ldr	r3, [pc, #136]	; (d8234 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d81ac:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d81ae:	2008      	movs	r0, #8
   d81b0:	f7fb ff71 	bl	d4096 <_Znwj>
   d81b4:	4682      	mov	sl, r0
   d81b6:	b128      	cbz	r0, d81c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d81b8:	9b03      	ldr	r3, [sp, #12]
   d81ba:	f840 3b04 	str.w	r3, [r0], #4
   d81be:	a904      	add	r1, sp, #16
   d81c0:	f7ff fccd 	bl	d7b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d81c4:	9600      	str	r6, [sp, #0]
   d81c6:	fa5f f389 	uxtb.w	r3, r9
   d81ca:	4642      	mov	r2, r8
   d81cc:	4639      	mov	r1, r7
   d81ce:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d81d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d81d4:	f7ff fb80 	bl	d78d8 <spark_send_event>
   d81d8:	b9b8      	cbnz	r0, d820a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d81da:	9b03      	ldr	r3, [sp, #12]
   d81dc:	785b      	ldrb	r3, [r3, #1]
   d81de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d81e2:	b993      	cbnz	r3, d820a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d81e4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d81e8:	a905      	add	r1, sp, #20
   d81ea:	a803      	add	r0, sp, #12
   d81ec:	9205      	str	r2, [sp, #20]
   d81ee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d81f2:	f7ff ff11 	bl	d8018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d81f6:	a805      	add	r0, sp, #20
   d81f8:	f7ff fe12 	bl	d7e20 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d81fc:	a805      	add	r0, sp, #20
   d81fe:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8200:	f7ff fe95 	bl	d7f2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8204:	a806      	add	r0, sp, #24
   d8206:	f7ff fcb1 	bl	d7b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d820a:	9b03      	ldr	r3, [sp, #12]
   d820c:	9305      	str	r3, [sp, #20]
   d820e:	a904      	add	r1, sp, #16
   d8210:	a806      	add	r0, sp, #24
   d8212:	f7ff fca4 	bl	d7b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8216:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8218:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d821a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d821c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d821e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8220:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8222:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8224:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8226:	f7ff fca1 	bl	d7b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d822a:	a804      	add	r0, sp, #16
   d822c:	f7ff fc9e 	bl	d7b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8230:	e7a2      	b.n	d8178 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8232:	bf00      	nop
   d8234:	000d82fd 	.word	0x000d82fd

000d8238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8238:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d823a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d823c:	4605      	mov	r5, r0
	  switch (__op)
   d823e:	d007      	beq.n	d8250 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8240:	2a03      	cmp	r2, #3
   d8242:	d018      	beq.n	d8276 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8244:	2a01      	cmp	r2, #1
   d8246:	d101      	bne.n	d824c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8248:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d824a:	6003      	str	r3, [r0, #0]
	}
   d824c:	2000      	movs	r0, #0
   d824e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8250:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8252:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8254:	f7fb ff1f 	bl	d4096 <_Znwj>
   d8258:	4604      	mov	r4, r0
   d825a:	b150      	cbz	r0, d8272 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d825c:	4631      	mov	r1, r6
   d825e:	f7ff fecb 	bl	d7ff8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8262:	6930      	ldr	r0, [r6, #16]
   d8264:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8268:	b108      	cbz	r0, d826e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d826a:	f002 f99b 	bl	da5a4 <strdup>
        type_(type) {
   d826e:	6120      	str	r0, [r4, #16]
   d8270:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8272:	602c      	str	r4, [r5, #0]
	}
   d8274:	e7ea      	b.n	d824c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8276:	6804      	ldr	r4, [r0, #0]
   d8278:	2c00      	cmp	r4, #0
   d827a:	d0e7      	beq.n	d824c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d827c:	f104 0010 	add.w	r0, r4, #16
   d8280:	f7ff fdce 	bl	d7e20 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8284:	4620      	mov	r0, r4
   d8286:	f7fc f813 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d828a:	2118      	movs	r1, #24
   d828c:	4620      	mov	r0, r4
   d828e:	f001 fb7a 	bl	d9986 <_ZdlPvj>
   d8292:	e7db      	b.n	d824c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8294 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8294:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8296:	2300      	movs	r3, #0
   d8298:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d829a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d829c:	4604      	mov	r4, r0
   d829e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d82a0:	b12b      	cbz	r3, d82ae <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d82a2:	2202      	movs	r2, #2
   d82a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d82a6:	68eb      	ldr	r3, [r5, #12]
   d82a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d82aa:	68ab      	ldr	r3, [r5, #8]
   d82ac:	60a3      	str	r3, [r4, #8]
    }
   d82ae:	4620      	mov	r0, r4
   d82b0:	bd38      	pop	{r3, r4, r5, pc}

000d82b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d82b2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d82b4:	b570      	push	{r4, r5, r6, lr}
   d82b6:	4604      	mov	r4, r0
	  switch (__op)
   d82b8:	d007      	beq.n	d82ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d82ba:	2a03      	cmp	r2, #3
   d82bc:	d012      	beq.n	d82e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d82be:	2a01      	cmp	r2, #1
   d82c0:	d101      	bne.n	d82c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d82c2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d82c4:	6003      	str	r3, [r0, #0]
	}
   d82c6:	2000      	movs	r0, #0
   d82c8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d82ca:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d82cc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d82ce:	f7fb fee2 	bl	d4096 <_Znwj>
   d82d2:	4605      	mov	r5, r0
   d82d4:	b120      	cbz	r0, d82e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d82d6:	4631      	mov	r1, r6
   d82d8:	f7ff ffdc 	bl	d8294 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d82dc:	7c33      	ldrb	r3, [r6, #16]
   d82de:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d82e0:	6025      	str	r5, [r4, #0]
	}
   d82e2:	e7f0      	b.n	d82c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d82e4:	6804      	ldr	r4, [r0, #0]
   d82e6:	2c00      	cmp	r4, #0
   d82e8:	d0ed      	beq.n	d82c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d82ea:	4620      	mov	r0, r4
   d82ec:	f7fb ffe0 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d82f0:	2114      	movs	r1, #20
   d82f2:	4620      	mov	r0, r4
   d82f4:	f001 fb47 	bl	d9986 <_ZdlPvj>
   d82f8:	e7e5      	b.n	d82c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d82fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d82fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d82fe:	b089      	sub	sp, #36	; 0x24
   d8300:	4604      	mov	r4, r0
   d8302:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8304:	a801      	add	r0, sp, #4
   d8306:	4611      	mov	r1, r2
   d8308:	f7ff fe11 	bl	d7f2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d830c:	b1a4      	cbz	r4, d8338 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d830e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8310:	b11d      	cbz	r5, d831a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8312:	4628      	mov	r0, r5
   d8314:	f002 f946 	bl	da5a4 <strdup>
   d8318:	4605      	mov	r5, r0
   d831a:	a801      	add	r0, sp, #4
   d831c:	a903      	add	r1, sp, #12
        type_(type) {
   d831e:	9503      	str	r5, [sp, #12]
   d8320:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8324:	f7ff fe78 	bl	d8018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8328:	a803      	add	r0, sp, #12
   d832a:	f7ff fd79 	bl	d7e20 <_ZN8particle5ErrorD1Ev>
   d832e:	a802      	add	r0, sp, #8
   d8330:	f7ff fc1c 	bl	d7b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8334:	b009      	add	sp, #36	; 0x24
   d8336:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8338:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d833a:	2301      	movs	r3, #1
   d833c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8340:	2a00      	cmp	r2, #0
   d8342:	d103      	bne.n	d834c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8344:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8348:	2900      	cmp	r1, #0
   d834a:	d1f7      	bne.n	d833c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d834c:	d1ef      	bne.n	d832e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d834e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8350:	f3bf 8f5b 	dmb	ish
   d8354:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8356:	1d2b      	adds	r3, r5, #4
   d8358:	f3bf 8f5b 	dmb	ish
   d835c:	e853 6f00 	ldrex	r6, [r3]
   d8360:	e843 4200 	strex	r2, r4, [r3]
   d8364:	2a00      	cmp	r2, #0
   d8366:	d1f9      	bne.n	d835c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8368:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d836c:	2e00      	cmp	r6, #0
   d836e:	d0de      	beq.n	d832e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8370:	4620      	mov	r0, r4
   d8372:	f7ff fa2f 	bl	d77d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8376:	4607      	mov	r7, r0
   d8378:	b160      	cbz	r0, d8394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d837a:	f105 010c 	add.w	r1, r5, #12
   d837e:	4630      	mov	r0, r6
   d8380:	f7ff fe16 	bl	d7fb0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8384:	4630      	mov	r0, r6
   d8386:	f7fb ff93 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d838a:	2110      	movs	r1, #16
   d838c:	4630      	mov	r0, r6
   d838e:	f001 fafa 	bl	d9986 <_ZdlPvj>
   d8392:	e7cc      	b.n	d832e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8394:	4631      	mov	r1, r6
   d8396:	a803      	add	r0, sp, #12
   d8398:	f7ff ff7c 	bl	d8294 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d839c:	7b2b      	ldrb	r3, [r5, #12]
   d839e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d83a2:	2010      	movs	r0, #16
   d83a4:	f7fb fe77 	bl	d4096 <_Znwj>
   d83a8:	4605      	mov	r5, r0
   d83aa:	b1d0      	cbz	r0, d83e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d83ac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d83ae:	2014      	movs	r0, #20
   d83b0:	f7fb fe71 	bl	d4096 <_Znwj>
   d83b4:	4604      	mov	r4, r0
   d83b6:	b178      	cbz	r0, d83d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d83b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d83ba:	4601      	mov	r1, r0
   d83bc:	a803      	add	r0, sp, #12
   d83be:	f7ff fdd5 	bl	d7f6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d83c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d83c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d83c6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d83c8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d83ca:	9205      	str	r2, [sp, #20]
   d83cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d83ce:	60e3      	str	r3, [r4, #12]
   d83d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d83d4:	9206      	str	r2, [sp, #24]
   d83d6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d83d8:	4b06      	ldr	r3, [pc, #24]	; (d83f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d83da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d83dc:	4b06      	ldr	r3, [pc, #24]	; (d83f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d83de:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d83e0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d83e2:	a803      	add	r0, sp, #12
   d83e4:	f7fb ff64 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d83e8:	2200      	movs	r2, #0
   d83ea:	4629      	mov	r1, r5
   d83ec:	4803      	ldr	r0, [pc, #12]	; (d83fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d83ee:	f7ff f9f9 	bl	d77e4 <application_thread_invoke>
   d83f2:	e7c7      	b.n	d8384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d83f4:	000d7fc3 	.word	0x000d7fc3
   d83f8:	000d82b3 	.word	0x000d82b3
   d83fc:	000d7b07 	.word	0x000d7b07

000d8400 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8400:	2200      	movs	r2, #0
   d8402:	6840      	ldr	r0, [r0, #4]
   d8404:	4611      	mov	r1, r2
   d8406:	f7ff badf 	b.w	d79c8 <network_listening>

000d840a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d840a:	2200      	movs	r2, #0
   d840c:	6840      	ldr	r0, [r0, #4]
   d840e:	4611      	mov	r1, r2
   d8410:	f7ff baea 	b.w	d79e8 <network_get_listen_timeout>

000d8414 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8414:	6840      	ldr	r0, [r0, #4]
   d8416:	2200      	movs	r2, #0
   d8418:	f7ff bade 	b.w	d79d8 <network_set_listen_timeout>

000d841c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d841c:	6840      	ldr	r0, [r0, #4]
   d841e:	2200      	movs	r2, #0
   d8420:	f081 0101 	eor.w	r1, r1, #1
   d8424:	f7ff bac8 	b.w	d79b8 <network_listen>

000d8428 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8428:	2300      	movs	r3, #0
   d842a:	6840      	ldr	r0, [r0, #4]
   d842c:	461a      	mov	r2, r3
   d842e:	4619      	mov	r1, r3
   d8430:	f7ff baba 	b.w	d79a8 <network_off>

000d8434 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8434:	2300      	movs	r3, #0
   d8436:	6840      	ldr	r0, [r0, #4]
   d8438:	461a      	mov	r2, r3
   d843a:	4619      	mov	r1, r3
   d843c:	f7ff baac 	b.w	d7998 <network_on>

000d8440 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8440:	2200      	movs	r2, #0
   d8442:	6840      	ldr	r0, [r0, #4]
   d8444:	4611      	mov	r1, r2
   d8446:	f7ff ba9f 	b.w	d7988 <network_ready>

000d844a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d844a:	2200      	movs	r2, #0
   d844c:	6840      	ldr	r0, [r0, #4]
   d844e:	4611      	mov	r1, r2
   d8450:	f7ff ba8a 	b.w	d7968 <network_connecting>

000d8454 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8454:	6840      	ldr	r0, [r0, #4]
   d8456:	2200      	movs	r2, #0
   d8458:	2102      	movs	r1, #2
   d845a:	f7ff ba8d 	b.w	d7978 <network_disconnect>

000d845e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d845e:	2300      	movs	r3, #0
   d8460:	6840      	ldr	r0, [r0, #4]
   d8462:	461a      	mov	r2, r3
   d8464:	f7ff ba78 	b.w	d7958 <network_connect>

000d8468 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8468:	4b02      	ldr	r3, [pc, #8]	; (d8474 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d846a:	2203      	movs	r2, #3
   d846c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d846e:	4a02      	ldr	r2, [pc, #8]	; (d8478 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8470:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8472:	4770      	bx	lr
   d8474:	2003e600 	.word	0x2003e600
   d8478:	000dce74 	.word	0x000dce74

000d847c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d847c:	6800      	ldr	r0, [r0, #0]
   d847e:	f000 b957 	b.w	d8730 <_ZN7TwoWire4lockEv>

000d8482 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8482:	b510      	push	{r4, lr}
   d8484:	4604      	mov	r4, r0
      lock_(_lock) {
   d8486:	6001      	str	r1, [r0, #0]
   d8488:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d848a:	b10a      	cbz	r2, d8490 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d848c:	f7ff fff6 	bl	d847c <_ZN9FuelGauge4lockEv>
}
   d8490:	4620      	mov	r0, r4
   d8492:	bd10      	pop	{r4, pc}

000d8494 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d8494:	b513      	push	{r0, r1, r4, lr}
   d8496:	4604      	mov	r4, r0
   d8498:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d849a:	f001 fa47 	bl	d992c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d849e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d84a0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d84a2:	4620      	mov	r0, r4
   d84a4:	f7ff ffed 	bl	d8482 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d84a8:	4620      	mov	r0, r4
   d84aa:	b002      	add	sp, #8
   d84ac:	bd10      	pop	{r4, pc}

000d84ae <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d84ae:	6800      	ldr	r0, [r0, #0]
   d84b0:	f000 b947 	b.w	d8742 <_ZN7TwoWire6unlockEv>

000d84b4 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d84b4:	b510      	push	{r4, lr}
    if (lock_) {
   d84b6:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d84b8:	4604      	mov	r4, r0
    if (lock_) {
   d84ba:	b10b      	cbz	r3, d84c0 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d84bc:	f7ff fff7 	bl	d84ae <_ZN9FuelGauge6unlockEv>
}
   d84c0:	4620      	mov	r0, r4
   d84c2:	bd10      	pop	{r4, pc}

000d84c4 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d84c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d84c8:	4604      	mov	r4, r0
   d84ca:	460d      	mov	r5, r1
   d84cc:	4617      	mov	r7, r2
   d84ce:	461e      	mov	r6, r3
   d84d0:	f7ff ffd4 	bl	d847c <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d84d4:	2336      	movs	r3, #54	; 0x36
   d84d6:	f88d 3000 	strb.w	r3, [sp]
   d84da:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d84dc:	6820      	ldr	r0, [r4, #0]
   d84de:	9301      	str	r3, [sp, #4]
   d84e0:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d84e4:	230a      	movs	r3, #10
   d84e6:	4669      	mov	r1, sp
   d84e8:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d84ea:	f88d 8008 	strb.w	r8, [sp, #8]
   d84ee:	f000 f903 	bl	d86f8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d84f2:	6820      	ldr	r0, [r4, #0]
   d84f4:	6803      	ldr	r3, [r0, #0]
   d84f6:	4629      	mov	r1, r5
   d84f8:	689b      	ldr	r3, [r3, #8]
   d84fa:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d84fc:	6820      	ldr	r0, [r4, #0]
   d84fe:	4641      	mov	r1, r8
   d8500:	f000 f912 	bl	d8728 <_ZN7TwoWire15endTransmissionEh>
   d8504:	4605      	mov	r5, r0
   d8506:	b140      	cbz	r0, d851a <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d8508:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d850c:	4620      	mov	r0, r4
   d850e:	f7ff ffce 	bl	d84ae <_ZN9FuelGauge6unlockEv>
}
   d8512:	4628      	mov	r0, r5
   d8514:	b004      	add	sp, #16
   d8516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d851a:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d851c:	6820      	ldr	r0, [r4, #0]
   d851e:	9301      	str	r3, [sp, #4]
   d8520:	4669      	mov	r1, sp
   d8522:	f000 f8b9 	bl	d8698 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d8526:	2802      	cmp	r0, #2
   d8528:	d1ee      	bne.n	d8508 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d852a:	6820      	ldr	r0, [r4, #0]
   d852c:	6803      	ldr	r3, [r0, #0]
   d852e:	695b      	ldr	r3, [r3, #20]
   d8530:	4798      	blx	r3
   d8532:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d8534:	6820      	ldr	r0, [r4, #0]
   d8536:	6803      	ldr	r3, [r0, #0]
   d8538:	695b      	ldr	r3, [r3, #20]
   d853a:	4798      	blx	r3
   d853c:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d853e:	e7e5      	b.n	d850c <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d8540 <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   d8540:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   d8542:	460a      	mov	r2, r1
   d8544:	210c      	movs	r1, #12
   d8546:	f7ff bfbd 	b.w	d84c4 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d854a <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d854a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d854e:	4616      	mov	r6, r2
   d8550:	4604      	mov	r4, r0
   d8552:	461d      	mov	r5, r3
   d8554:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d8556:	f7ff ff91 	bl	d847c <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d855a:	2336      	movs	r3, #54	; 0x36
   d855c:	f88d 3000 	strb.w	r3, [sp]
   d8560:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8562:	6820      	ldr	r0, [r4, #0]
   d8564:	9301      	str	r3, [sp, #4]
   d8566:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d856a:	230a      	movs	r3, #10
   d856c:	4669      	mov	r1, sp
   d856e:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8570:	f88d 8008 	strb.w	r8, [sp, #8]
   d8574:	f000 f8c0 	bl	d86f8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d8578:	6820      	ldr	r0, [r4, #0]
   d857a:	6803      	ldr	r3, [r0, #0]
   d857c:	4639      	mov	r1, r7
   d857e:	689b      	ldr	r3, [r3, #8]
   d8580:	4798      	blx	r3
    i2c_.write(MSB);
   d8582:	6820      	ldr	r0, [r4, #0]
   d8584:	6803      	ldr	r3, [r0, #0]
   d8586:	4631      	mov	r1, r6
   d8588:	689b      	ldr	r3, [r3, #8]
   d858a:	4798      	blx	r3
    i2c_.write(LSB);
   d858c:	6820      	ldr	r0, [r4, #0]
   d858e:	6803      	ldr	r3, [r0, #0]
   d8590:	4629      	mov	r1, r5
   d8592:	689b      	ldr	r3, [r3, #8]
   d8594:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8596:	4641      	mov	r1, r8
   d8598:	6820      	ldr	r0, [r4, #0]
   d859a:	f000 f8c5 	bl	d8728 <_ZN7TwoWire15endTransmissionEh>
   d859e:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d85a0:	4620      	mov	r0, r4
   d85a2:	bf0c      	ite	eq
   d85a4:	2500      	moveq	r5, #0
   d85a6:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d85aa:	f7ff ff80 	bl	d84ae <_ZN9FuelGauge6unlockEv>
}
   d85ae:	4628      	mov	r0, r5
   d85b0:	b004      	add	sp, #16
   d85b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d85b6 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d85b6:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d85b8:	2240      	movs	r2, #64	; 0x40
   d85ba:	2300      	movs	r3, #0
   d85bc:	2106      	movs	r1, #6
   d85be:	f7ff ffc4 	bl	d854a <_ZN9FuelGauge13writeRegisterEhhh>
}
   d85c2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d85c6:	bd08      	pop	{r3, pc}

000d85c8 <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   d85c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d85ca:	4605      	mov	r5, r0
      { _M_device.lock(); }
   d85cc:	f7ff ff56 	bl	d847c <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   d85d0:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   d85d2:	f10d 0207 	add.w	r2, sp, #7
   d85d6:	f10d 0106 	add.w	r1, sp, #6
   d85da:	4628      	mov	r0, r5
    byte MSB = 0;
   d85dc:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d85e0:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   d85e4:	f7ff ffac 	bl	d8540 <_ZN9FuelGauge18readConfigRegisterERhS0_>
   d85e8:	1e04      	subs	r4, r0, #0
   d85ea:	db0b      	blt.n	d8604 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   d85ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d85f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d85f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d85f8:	210c      	movs	r1, #12
   d85fa:	4628      	mov	r0, r5
   d85fc:	f7ff ffa5 	bl	d854a <_ZN9FuelGauge13writeRegisterEhhh>
   d8600:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   d8604:	4628      	mov	r0, r5
   d8606:	f7ff ff52 	bl	d84ae <_ZN9FuelGauge6unlockEv>
}
   d860a:	4620      	mov	r0, r4
   d860c:	b003      	add	sp, #12
   d860e:	bd30      	pop	{r4, r5, pc}

000d8610 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8610:	4770      	bx	lr

000d8612 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8614:	4606      	mov	r6, r0
   d8616:	4615      	mov	r5, r2
   d8618:	460c      	mov	r4, r1
   d861a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d861c:	42bc      	cmp	r4, r7
   d861e:	d006      	beq.n	d862e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8620:	6833      	ldr	r3, [r6, #0]
   d8622:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8626:	689b      	ldr	r3, [r3, #8]
   d8628:	4630      	mov	r0, r6
   d862a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d862c:	e7f6      	b.n	d861c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d862e:	4628      	mov	r0, r5
   d8630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8632 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8632:	7c00      	ldrb	r0, [r0, #16]
   d8634:	2200      	movs	r2, #0
   d8636:	f7fe bf93 	b.w	d7560 <hal_i2c_write>

000d863a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d863a:	7c00      	ldrb	r0, [r0, #16]
   d863c:	2100      	movs	r1, #0
   d863e:	f7fe bf97 	b.w	d7570 <hal_i2c_available>

000d8642 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8642:	7c00      	ldrb	r0, [r0, #16]
   d8644:	2100      	movs	r1, #0
   d8646:	f7fe bf9b 	b.w	d7580 <hal_i2c_read>

000d864a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d864a:	7c00      	ldrb	r0, [r0, #16]
   d864c:	2100      	movs	r1, #0
   d864e:	f7fe bf9f 	b.w	d7590 <hal_i2c_peek>

000d8652 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8652:	7c00      	ldrb	r0, [r0, #16]
   d8654:	2100      	movs	r1, #0
   d8656:	f7fe bfa3 	b.w	d75a0 <hal_i2c_flush>

000d865a <_ZN7TwoWireD0Ev>:
   d865a:	b510      	push	{r4, lr}
   d865c:	2114      	movs	r1, #20
   d865e:	4604      	mov	r4, r0
   d8660:	f001 f991 	bl	d9986 <_ZdlPvj>
   d8664:	4620      	mov	r0, r4
   d8666:	bd10      	pop	{r4, pc}

000d8668 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8668:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d866a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d866e:	4604      	mov	r4, r0
   d8670:	4608      	mov	r0, r1
   d8672:	2100      	movs	r1, #0
   d8674:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8678:	4b03      	ldr	r3, [pc, #12]	; (d8688 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d867a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d867c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d867e:	4611      	mov	r1, r2
   d8680:	f7fe ff9e 	bl	d75c0 <hal_i2c_init>
}
   d8684:	4620      	mov	r0, r4
   d8686:	bd10      	pop	{r4, pc}
   d8688:	000dceb0 	.word	0x000dceb0

000d868c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d868c:	2300      	movs	r3, #0
   d868e:	7c00      	ldrb	r0, [r0, #16]
   d8690:	461a      	mov	r2, r3
   d8692:	4619      	mov	r1, r3
   d8694:	f7fe bf4c 	b.w	d7530 <hal_i2c_begin>

000d8698 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d869a:	2200      	movs	r2, #0
   d869c:	2314      	movs	r3, #20
   d869e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d86a2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d86a6:	780b      	ldrb	r3, [r1, #0]
   d86a8:	f88d 3008 	strb.w	r3, [sp, #8]
   d86ac:	684b      	ldr	r3, [r1, #4]
   d86ae:	9303      	str	r3, [sp, #12]
   d86b0:	68cb      	ldr	r3, [r1, #12]
   d86b2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d86b4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d86b6:	7a0b      	ldrb	r3, [r1, #8]
   d86b8:	9305      	str	r3, [sp, #20]
   d86ba:	a901      	add	r1, sp, #4
   d86bc:	f7fe ff98 	bl	d75f0 <hal_i2c_request_ex>
}
   d86c0:	b007      	add	sp, #28
   d86c2:	f85d fb04 	ldr.w	pc, [sp], #4

000d86c6 <_ZN7TwoWire11requestFromEhjh>:
{
   d86c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d86c8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d86ca:	f88d 1000 	strb.w	r1, [sp]
   d86ce:	f04f 0164 	mov.w	r1, #100	; 0x64
   d86d2:	9103      	str	r1, [sp, #12]
   d86d4:	bf18      	it	ne
   d86d6:	2301      	movne	r3, #1
   d86d8:	4669      	mov	r1, sp
    size_ = size;
   d86da:	9201      	str	r2, [sp, #4]
   d86dc:	f88d 3008 	strb.w	r3, [sp, #8]
   d86e0:	f7ff ffda 	bl	d8698 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d86e4:	b005      	add	sp, #20
   d86e6:	f85d fb04 	ldr.w	pc, [sp], #4

000d86ea <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d86ea:	7c00      	ldrb	r0, [r0, #16]
   d86ec:	2200      	movs	r2, #0
   d86ee:	f7fe bf27 	b.w	d7540 <hal_i2c_begin_transmission>

000d86f2 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d86f2:	b2c9      	uxtb	r1, r1
   d86f4:	f7ff bff9 	b.w	d86ea <_ZN7TwoWire17beginTransmissionEh>

000d86f8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d86f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d86fa:	2300      	movs	r3, #0
   d86fc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d8700:	684a      	ldr	r2, [r1, #4]
   d8702:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d8704:	2314      	movs	r3, #20
    };
   d8706:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8708:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d870c:	780b      	ldrb	r3, [r1, #0]
    };
   d870e:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8710:	7a0a      	ldrb	r2, [r1, #8]
   d8712:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d8714:	7c00      	ldrb	r0, [r0, #16]
    };
   d8716:	f88d 3008 	strb.w	r3, [sp, #8]
   d871a:	aa01      	add	r2, sp, #4
   d871c:	4619      	mov	r1, r3
   d871e:	f7fe ff0f 	bl	d7540 <hal_i2c_begin_transmission>
}
   d8722:	b007      	add	sp, #28
   d8724:	f85d fb04 	ldr.w	pc, [sp], #4

000d8728 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8728:	7c00      	ldrb	r0, [r0, #16]
   d872a:	2200      	movs	r2, #0
   d872c:	f7fe bf10 	b.w	d7550 <hal_i2c_end_transmission>

000d8730 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8730:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8732:	2100      	movs	r1, #0
   d8734:	7c00      	ldrb	r0, [r0, #16]
   d8736:	f7fe ff4b 	bl	d75d0 <hal_i2c_lock>
}
   d873a:	fab0 f080 	clz	r0, r0
   d873e:	0940      	lsrs	r0, r0, #5
   d8740:	bd08      	pop	{r3, pc}

000d8742 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8742:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8744:	2100      	movs	r1, #0
   d8746:	7c00      	ldrb	r0, [r0, #16]
   d8748:	f7fe ff4a 	bl	d75e0 <hal_i2c_unlock>
}
   d874c:	fab0 f080 	clz	r0, r0
   d8750:	0940      	lsrs	r0, r0, #5
   d8752:	bd08      	pop	{r3, pc}

000d8754 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8754:	4770      	bx	lr

000d8756 <_ZN9IPAddressD0Ev>:
   d8756:	b510      	push	{r4, lr}
   d8758:	2118      	movs	r1, #24
   d875a:	4604      	mov	r4, r0
   d875c:	f001 f913 	bl	d9986 <_ZdlPvj>
   d8760:	4620      	mov	r0, r4
   d8762:	bd10      	pop	{r4, pc}

000d8764 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8764:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8766:	7d03      	ldrb	r3, [r0, #20]
   d8768:	2b06      	cmp	r3, #6
{
   d876a:	b08d      	sub	sp, #52	; 0x34
   d876c:	460e      	mov	r6, r1
   d876e:	f100 0704 	add.w	r7, r0, #4
   d8772:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8776:	d012      	beq.n	d879e <_ZNK9IPAddress7printToER5Print+0x3a>
   d8778:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d877c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8780:	220a      	movs	r2, #10
   d8782:	4630      	mov	r0, r6
   d8784:	f000 fa00 	bl	d8b88 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8788:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d878a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d878c:	d019      	beq.n	d87c2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d878e:	2c00      	cmp	r4, #0
   d8790:	d0f4      	beq.n	d877c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8792:	212e      	movs	r1, #46	; 0x2e
   d8794:	4630      	mov	r0, r6
   d8796:	f000 f9de 	bl	d8b56 <_ZN5Print5printEc>
   d879a:	4404      	add	r4, r0
   d879c:	e7ee      	b.n	d877c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d879e:	232f      	movs	r3, #47	; 0x2f
   d87a0:	466a      	mov	r2, sp
   d87a2:	4639      	mov	r1, r7
   d87a4:	200a      	movs	r0, #10
		buf[0] = 0;
   d87a6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d87aa:	f7fe ff29 	bl	d7600 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d87ae:	4668      	mov	r0, sp
   d87b0:	f001 ff15 	bl	da5de <strlen>
   d87b4:	6833      	ldr	r3, [r6, #0]
   d87b6:	4602      	mov	r2, r0
   d87b8:	68db      	ldr	r3, [r3, #12]
   d87ba:	4669      	mov	r1, sp
   d87bc:	4630      	mov	r0, r6
   d87be:	4798      	blx	r3
   d87c0:	4604      	mov	r4, r0
    }
    return n;
}
   d87c2:	4620      	mov	r0, r4
   d87c4:	b00d      	add	sp, #52	; 0x34
   d87c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d87c8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d87c8:	b510      	push	{r4, lr}
   d87ca:	4b05      	ldr	r3, [pc, #20]	; (d87e0 <_ZN9IPAddressC1Ev+0x18>)
   d87cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d87ce:	2211      	movs	r2, #17
   d87d0:	f840 3b04 	str.w	r3, [r0], #4
   d87d4:	2100      	movs	r1, #0
   d87d6:	f001 fea7 	bl	da528 <memset>
}
   d87da:	4620      	mov	r0, r4
   d87dc:	bd10      	pop	{r4, pc}
   d87de:	bf00      	nop
   d87e0:	000dced8 	.word	0x000dced8

000d87e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d87e4:	4603      	mov	r3, r0
   d87e6:	4a07      	ldr	r2, [pc, #28]	; (d8804 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d87e8:	b510      	push	{r4, lr}
   d87ea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d87ee:	f101 0210 	add.w	r2, r1, #16
   d87f2:	f851 4b04 	ldr.w	r4, [r1], #4
   d87f6:	f843 4b04 	str.w	r4, [r3], #4
   d87fa:	4291      	cmp	r1, r2
   d87fc:	d1f9      	bne.n	d87f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d87fe:	780a      	ldrb	r2, [r1, #0]
   d8800:	701a      	strb	r2, [r3, #0]
}
   d8802:	bd10      	pop	{r4, pc}
   d8804:	000dced8 	.word	0x000dced8

000d8808 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8808:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d880a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d880e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8812:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8816:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d881a:	2304      	movs	r3, #4
   d881c:	6041      	str	r1, [r0, #4]
   d881e:	7503      	strb	r3, [r0, #20]
}
   d8820:	bd10      	pop	{r4, pc}

000d8822 <_ZN9IPAddressaSEPKh>:
{
   d8822:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8824:	78cb      	ldrb	r3, [r1, #3]
   d8826:	9300      	str	r3, [sp, #0]
   d8828:	788b      	ldrb	r3, [r1, #2]
   d882a:	784a      	ldrb	r2, [r1, #1]
   d882c:	7809      	ldrb	r1, [r1, #0]
   d882e:	f7ff ffeb 	bl	d8808 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8832:	b002      	add	sp, #8
   d8834:	bd10      	pop	{r4, pc}
	...

000d8838 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8838:	4b01      	ldr	r3, [pc, #4]	; (d8840 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d883a:	4a02      	ldr	r2, [pc, #8]	; (d8844 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d883c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d883e:	4770      	bx	lr
   d8840:	2003e608 	.word	0x2003e608
   d8844:	000dcee4 	.word	0x000dcee4

000d8848 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8848:	2300      	movs	r3, #0
   d884a:	6840      	ldr	r0, [r0, #4]
   d884c:	461a      	mov	r2, r3
   d884e:	f7ff b883 	b.w	d7958 <network_connect>

000d8852 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8852:	6840      	ldr	r0, [r0, #4]
   d8854:	2200      	movs	r2, #0
   d8856:	2102      	movs	r1, #2
   d8858:	f7ff b88e 	b.w	d7978 <network_disconnect>

000d885c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d885c:	2200      	movs	r2, #0
   d885e:	6840      	ldr	r0, [r0, #4]
   d8860:	4611      	mov	r1, r2
   d8862:	f7ff b881 	b.w	d7968 <network_connecting>

000d8866 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8866:	2200      	movs	r2, #0
   d8868:	6840      	ldr	r0, [r0, #4]
   d886a:	4611      	mov	r1, r2
   d886c:	f7ff b88c 	b.w	d7988 <network_ready>

000d8870 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8870:	2300      	movs	r3, #0
   d8872:	6840      	ldr	r0, [r0, #4]
   d8874:	461a      	mov	r2, r3
   d8876:	4619      	mov	r1, r3
   d8878:	f7ff b88e 	b.w	d7998 <network_on>

000d887c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d887c:	2300      	movs	r3, #0
   d887e:	6840      	ldr	r0, [r0, #4]
   d8880:	461a      	mov	r2, r3
   d8882:	4619      	mov	r1, r3
   d8884:	f7ff b890 	b.w	d79a8 <network_off>

000d8888 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8888:	6840      	ldr	r0, [r0, #4]
   d888a:	2100      	movs	r1, #0
   d888c:	f7ff b8b4 	b.w	d79f8 <network_is_on>

000d8890 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8890:	6840      	ldr	r0, [r0, #4]
   d8892:	2100      	movs	r1, #0
   d8894:	f7ff b8b8 	b.w	d7a08 <network_is_off>

000d8898 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8898:	6840      	ldr	r0, [r0, #4]
   d889a:	2200      	movs	r2, #0
   d889c:	f081 0101 	eor.w	r1, r1, #1
   d88a0:	f7ff b88a 	b.w	d79b8 <network_listen>

000d88a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d88a4:	6840      	ldr	r0, [r0, #4]
   d88a6:	2200      	movs	r2, #0
   d88a8:	f7ff b896 	b.w	d79d8 <network_set_listen_timeout>

000d88ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d88ac:	2200      	movs	r2, #0
   d88ae:	6840      	ldr	r0, [r0, #4]
   d88b0:	4611      	mov	r1, r2
   d88b2:	f7ff b899 	b.w	d79e8 <network_get_listen_timeout>

000d88b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d88b6:	2200      	movs	r2, #0
   d88b8:	6840      	ldr	r0, [r0, #4]
   d88ba:	4611      	mov	r1, r2
   d88bc:	f7ff b884 	b.w	d79c8 <network_listening>

000d88c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d88c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d88c4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d88c6:	b095      	sub	sp, #84	; 0x54
   d88c8:	4616      	mov	r6, r2
   d88ca:	460d      	mov	r5, r1
   d88cc:	4607      	mov	r7, r0
    IPAddress addr;
   d88ce:	f7ff ff7b 	bl	d87c8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d88d2:	4621      	mov	r1, r4
   d88d4:	2218      	movs	r2, #24
   d88d6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d88d8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d88da:	f001 fe25 	bl	da528 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d88de:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d88e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d88e4:	4621      	mov	r1, r4
   d88e6:	466b      	mov	r3, sp
   d88e8:	aa0c      	add	r2, sp, #48	; 0x30
   d88ea:	4630      	mov	r0, r6
   d88ec:	f7fe fe98 	bl	d7620 <netdb_getaddrinfo>
    if (!r) {
   d88f0:	4604      	mov	r4, r0
   d88f2:	2800      	cmp	r0, #0
   d88f4:	d146      	bne.n	d8984 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d88f6:	4602      	mov	r2, r0
   d88f8:	2101      	movs	r1, #1
   d88fa:	6868      	ldr	r0, [r5, #4]
   d88fc:	f7ff f844 	bl	d7988 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8900:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8902:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8904:	4622      	mov	r2, r4
   d8906:	6868      	ldr	r0, [r5, #4]
   d8908:	f7ff f83e 	bl	d7988 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d890c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d890e:	4681      	mov	r9, r0
        bool ok = false;
   d8910:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8912:	2e00      	cmp	r6, #0
   d8914:	d036      	beq.n	d8984 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8916:	2900      	cmp	r1, #0
   d8918:	d134      	bne.n	d8984 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d891a:	6873      	ldr	r3, [r6, #4]
   d891c:	2b02      	cmp	r3, #2
   d891e:	d003      	beq.n	d8928 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8920:	2b0a      	cmp	r3, #10
   d8922:	d00b      	beq.n	d893c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8924:	69f6      	ldr	r6, [r6, #28]
   d8926:	e7f4      	b.n	d8912 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8928:	f1b8 0f00 	cmp.w	r8, #0
   d892c:	d004      	beq.n	d8938 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d892e:	6971      	ldr	r1, [r6, #20]
   d8930:	4638      	mov	r0, r7
   d8932:	3104      	adds	r1, #4
   d8934:	f7ff ff75 	bl	d8822 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8938:	4641      	mov	r1, r8
   d893a:	e7f3      	b.n	d8924 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d893c:	f1b9 0f00 	cmp.w	r9, #0
   d8940:	d101      	bne.n	d8946 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8942:	4649      	mov	r1, r9
   d8944:	e7ee      	b.n	d8924 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8946:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8948:	2210      	movs	r2, #16
   d894a:	a801      	add	r0, sp, #4
   d894c:	f001 fdec 	bl	da528 <memset>
                    a.v = 6;
   d8950:	2306      	movs	r3, #6
   d8952:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8956:	ad01      	add	r5, sp, #4
   d8958:	f104 0308 	add.w	r3, r4, #8
   d895c:	3418      	adds	r4, #24
   d895e:	6818      	ldr	r0, [r3, #0]
   d8960:	6859      	ldr	r1, [r3, #4]
   d8962:	462a      	mov	r2, r5
   d8964:	c203      	stmia	r2!, {r0, r1}
   d8966:	3308      	adds	r3, #8
   d8968:	42a3      	cmp	r3, r4
   d896a:	4615      	mov	r5, r2
   d896c:	d1f7      	bne.n	d895e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d896e:	a901      	add	r1, sp, #4
   d8970:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8972:	ad07      	add	r5, sp, #28
   d8974:	f7ff ff36 	bl	d87e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d897a:	1d3c      	adds	r4, r7, #4
   d897c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d897e:	682b      	ldr	r3, [r5, #0]
   d8980:	7023      	strb	r3, [r4, #0]
   d8982:	e7de      	b.n	d8942 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8984:	9800      	ldr	r0, [sp, #0]
   d8986:	f7fe fe43 	bl	d7610 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d898a:	4638      	mov	r0, r7
   d898c:	b015      	add	sp, #84	; 0x54
   d898e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8994 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8994:	4b02      	ldr	r3, [pc, #8]	; (d89a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8996:	4a03      	ldr	r2, [pc, #12]	; (d89a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8998:	601a      	str	r2, [r3, #0]
   d899a:	2200      	movs	r2, #0
   d899c:	605a      	str	r2, [r3, #4]

} // spark
   d899e:	4770      	bx	lr
   d89a0:	2003e60c 	.word	0x2003e60c
   d89a4:	000dcef0 	.word	0x000dcef0

000d89a8 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d89a8:	b508      	push	{r3, lr}
            return &Wire1;
   d89aa:	f000 ffbf 	bl	d992c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d89ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d89b2:	f7ff bebd 	b.w	d8730 <_ZN7TwoWire4lockEv>

000d89b6 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d89b6:	b510      	push	{r4, lr}
   d89b8:	4604      	mov	r4, r0
    lock_(_lock)
   d89ba:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d89bc:	b109      	cbz	r1, d89c2 <_ZN4PMICC1Eb+0xc>
        lock();
   d89be:	f7ff fff3 	bl	d89a8 <_ZN4PMIC4lockEv.constprop.0>
}
   d89c2:	4620      	mov	r0, r4
   d89c4:	bd10      	pop	{r4, pc}

000d89c6 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d89c6:	b508      	push	{r3, lr}
            return &Wire1;
   d89c8:	f000 ffb0 	bl	d992c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d89cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d89d0:	f7ff beb7 	b.w	d8742 <_ZN7TwoWire6unlockEv>

000d89d4 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d89d4:	b510      	push	{r4, lr}
    if (lock_) {
   d89d6:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d89d8:	4604      	mov	r4, r0
    if (lock_) {
   d89da:	b10b      	cbz	r3, d89e0 <_ZN4PMICD1Ev+0xc>
        unlock();
   d89dc:	f7ff fff3 	bl	d89c6 <_ZN4PMIC6unlockEv>
}
   d89e0:	4620      	mov	r0, r4
   d89e2:	bd10      	pop	{r4, pc}

000d89e4 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d89e4:	b510      	push	{r4, lr}
   d89e6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d89e8:	6800      	ldr	r0, [r0, #0]
   d89ea:	f7ff ffec 	bl	d89c6 <_ZN4PMIC6unlockEv>
   d89ee:	4620      	mov	r0, r4
   d89f0:	bd10      	pop	{r4, pc}

000d89f2 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d89f2:	b530      	push	{r4, r5, lr}
   d89f4:	b087      	sub	sp, #28
   d89f6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d89f8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d89fa:	f7ff ffd5 	bl	d89a8 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d89fe:	236b      	movs	r3, #107	; 0x6b
   d8a00:	f88d 3008 	strb.w	r3, [sp, #8]
   d8a04:	2300      	movs	r3, #0
   d8a06:	2401      	movs	r4, #1
   d8a08:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d8a0a:	230a      	movs	r3, #10
   d8a0c:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8a0e:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d8a12:	f000 ff8b 	bl	d992c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d8a16:	a902      	add	r1, sp, #8
   d8a18:	f7ff fe6e 	bl	d86f8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d8a1c:	f000 ff86 	bl	d992c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d8a20:	6803      	ldr	r3, [r0, #0]
   d8a22:	4629      	mov	r1, r5
   d8a24:	689b      	ldr	r3, [r3, #8]
   d8a26:	4798      	blx	r3
            return &Wire1;
   d8a28:	f000 ff80 	bl	d992c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d8a2c:	4621      	mov	r1, r4
   d8a2e:	f7ff fe7b 	bl	d8728 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d8a32:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d8a34:	f000 ff7a 	bl	d992c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d8a38:	a902      	add	r1, sp, #8
   d8a3a:	f7ff fe2d 	bl	d8698 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d8a3e:	f000 ff75 	bl	d992c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d8a42:	6803      	ldr	r3, [r0, #0]
   d8a44:	695b      	ldr	r3, [r3, #20]
   d8a46:	4798      	blx	r3
   d8a48:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d8a4a:	a801      	add	r0, sp, #4
   d8a4c:	f7ff ffca 	bl	d89e4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d8a50:	b2e0      	uxtb	r0, r4
   d8a52:	b007      	add	sp, #28
   d8a54:	bd30      	pop	{r4, r5, pc}

000d8a56 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d8a56:	b570      	push	{r4, r5, r6, lr}
   d8a58:	b086      	sub	sp, #24
   d8a5a:	4614      	mov	r4, r2
   d8a5c:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8a5e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8a60:	f7ff ffa2 	bl	d89a8 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8a64:	236b      	movs	r3, #107	; 0x6b
   d8a66:	f88d 3008 	strb.w	r3, [sp, #8]
   d8a6a:	2300      	movs	r3, #0
   d8a6c:	9303      	str	r3, [sp, #12]
   d8a6e:	2601      	movs	r6, #1
    timeout_ = ms;
   d8a70:	230a      	movs	r3, #10
   d8a72:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8a74:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d8a78:	f000 ff58 	bl	d992c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d8a7c:	a902      	add	r1, sp, #8
   d8a7e:	f7ff fe3b 	bl	d86f8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d8a82:	f000 ff53 	bl	d992c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d8a86:	6803      	ldr	r3, [r0, #0]
   d8a88:	4629      	mov	r1, r5
   d8a8a:	689b      	ldr	r3, [r3, #8]
   d8a8c:	4798      	blx	r3
            return &Wire1;
   d8a8e:	f000 ff4d 	bl	d992c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d8a92:	6803      	ldr	r3, [r0, #0]
   d8a94:	4621      	mov	r1, r4
   d8a96:	689b      	ldr	r3, [r3, #8]
   d8a98:	4798      	blx	r3
            return &Wire1;
   d8a9a:	f000 ff47 	bl	d992c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d8a9e:	4631      	mov	r1, r6
   d8aa0:	f7ff fe42 	bl	d8728 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d8aa4:	a801      	add	r0, sp, #4
   d8aa6:	f7ff ff9d 	bl	d89e4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d8aaa:	b006      	add	sp, #24
   d8aac:	bd70      	pop	{r4, r5, r6, pc}

000d8aae <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d8aae:	b513      	push	{r0, r1, r4, lr}
   d8ab0:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8ab2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8ab4:	f7ff ff78 	bl	d89a8 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d8ab8:	2101      	movs	r1, #1
   d8aba:	4620      	mov	r0, r4
   d8abc:	f7ff ff99 	bl	d89f2 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d8ac0:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d8ac4:	f040 0210 	orr.w	r2, r0, #16
   d8ac8:	2101      	movs	r1, #1
   d8aca:	4620      	mov	r0, r4
   d8acc:	f7ff ffc3 	bl	d8a56 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d8ad0:	a801      	add	r0, sp, #4
   d8ad2:	f7ff ff87 	bl	d89e4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d8ad6:	2001      	movs	r0, #1
   d8ad8:	b002      	add	sp, #8
   d8ada:	bd10      	pop	{r4, pc}

000d8adc <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   d8adc:	b513      	push	{r0, r1, r4, lr}
   d8ade:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8ae0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8ae2:	f7ff ff61 	bl	d89a8 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d8ae6:	2101      	movs	r1, #1
   d8ae8:	4620      	mov	r0, r4
   d8aea:	f7ff ff82 	bl	d89f2 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d8aee:	2101      	movs	r1, #1
   d8af0:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d8af4:	4620      	mov	r0, r4
   d8af6:	f7ff ffae 	bl	d8a56 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d8afa:	a801      	add	r0, sp, #4
   d8afc:	f7ff ff72 	bl	d89e4 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d8b00:	2001      	movs	r0, #1
   d8b02:	b002      	add	sp, #8
   d8b04:	bd10      	pop	{r4, pc}

000d8b06 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8b08:	4606      	mov	r6, r0
   d8b0a:	460d      	mov	r5, r1
  size_t n = 0;
   d8b0c:	188f      	adds	r7, r1, r2
   d8b0e:	2400      	movs	r4, #0
  while (size--) {
   d8b10:	42bd      	cmp	r5, r7
   d8b12:	d00c      	beq.n	d8b2e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8b14:	6833      	ldr	r3, [r6, #0]
   d8b16:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8b1a:	689b      	ldr	r3, [r3, #8]
   d8b1c:	4630      	mov	r0, r6
   d8b1e:	4798      	blx	r3
     if (chunk>=0)
   d8b20:	1e03      	subs	r3, r0, #0
   d8b22:	db01      	blt.n	d8b28 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8b24:	441c      	add	r4, r3
  while (size--) {
   d8b26:	e7f3      	b.n	d8b10 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8b28:	2c00      	cmp	r4, #0
   d8b2a:	bf08      	it	eq
   d8b2c:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8b2e:	4620      	mov	r0, r4
   d8b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8b32 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d8b32:	b513      	push	{r0, r1, r4, lr}
   d8b34:	4604      	mov	r4, r0
    }
   d8b36:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8b38:	b159      	cbz	r1, d8b52 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8b3a:	9101      	str	r1, [sp, #4]
   d8b3c:	f001 fd4f 	bl	da5de <strlen>
   d8b40:	6823      	ldr	r3, [r4, #0]
   d8b42:	9901      	ldr	r1, [sp, #4]
   d8b44:	68db      	ldr	r3, [r3, #12]
   d8b46:	4602      	mov	r2, r0
   d8b48:	4620      	mov	r0, r4
    }
   d8b4a:	b002      	add	sp, #8
   d8b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d8b50:	4718      	bx	r3
    }
   d8b52:	b002      	add	sp, #8
   d8b54:	bd10      	pop	{r4, pc}

000d8b56 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8b56:	6803      	ldr	r3, [r0, #0]
   d8b58:	689b      	ldr	r3, [r3, #8]
   d8b5a:	4718      	bx	r3

000d8b5c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8b5c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8b5e:	210d      	movs	r1, #13
{
   d8b60:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8b62:	f7ff fff8 	bl	d8b56 <_ZN5Print5printEc>
  n += print('\n');
   d8b66:	210a      	movs	r1, #10
  size_t n = print('\r');
   d8b68:	4604      	mov	r4, r0
  n += print('\n');
   d8b6a:	4628      	mov	r0, r5
   d8b6c:	f7ff fff3 	bl	d8b56 <_ZN5Print5printEc>
  return n;
}
   d8b70:	4420      	add	r0, r4
   d8b72:	bd38      	pop	{r3, r4, r5, pc}

000d8b74 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8b74:	b538      	push	{r3, r4, r5, lr}
   d8b76:	4605      	mov	r5, r0
  return write(str);
   d8b78:	f7ff ffdb 	bl	d8b32 <_ZN5Print5writeEPKc>
   d8b7c:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8b7e:	4628      	mov	r0, r5
   d8b80:	f7ff ffec 	bl	d8b5c <_ZN5Print7printlnEv>
  return n;
}
   d8b84:	4420      	add	r0, r4
   d8b86:	bd38      	pop	{r3, r4, r5, pc}

000d8b88 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8b88:	b530      	push	{r4, r5, lr}
   d8b8a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8b8c:	2300      	movs	r3, #0
   d8b8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8b92:	2a01      	cmp	r2, #1
   d8b94:	bf98      	it	ls
   d8b96:	220a      	movls	r2, #10
   d8b98:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8b9a:	460d      	mov	r5, r1
   d8b9c:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8ba0:	fb01 5312 	mls	r3, r1, r2, r5
   d8ba4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8ba8:	2b09      	cmp	r3, #9
   d8baa:	bf94      	ite	ls
   d8bac:	3330      	addls	r3, #48	; 0x30
   d8bae:	3337      	addhi	r3, #55	; 0x37
   d8bb0:	b2db      	uxtb	r3, r3
  } while(n);
   d8bb2:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8bb4:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8bb8:	d9ef      	bls.n	d8b9a <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8bba:	4621      	mov	r1, r4
   d8bbc:	f7ff ffb9 	bl	d8b32 <_ZN5Print5writeEPKc>
}
   d8bc0:	b00b      	add	sp, #44	; 0x2c
   d8bc2:	bd30      	pop	{r4, r5, pc}

000d8bc4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8bc4:	b510      	push	{r4, lr}
   d8bc6:	4604      	mov	r4, r0
   d8bc8:	f7fb fb72 	bl	d42b0 <_ZNSt14_Function_baseD1Ev>
   d8bcc:	4620      	mov	r0, r4
   d8bce:	bd10      	pop	{r4, pc}

000d8bd0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d8bd0:	4803      	ldr	r0, [pc, #12]	; (d8be0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8bd2:	4a04      	ldr	r2, [pc, #16]	; (d8be4 <_GLOBAL__sub_I_RGB+0x14>)
   d8bd4:	4904      	ldr	r1, [pc, #16]	; (d8be8 <_GLOBAL__sub_I_RGB+0x18>)
   d8bd6:	2300      	movs	r3, #0
   d8bd8:	6083      	str	r3, [r0, #8]
   d8bda:	f000 becf 	b.w	d997c <__aeabi_atexit>
   d8bde:	bf00      	nop
   d8be0:	2003e614 	.word	0x2003e614
   d8be4:	2003e408 	.word	0x2003e408
   d8be8:	000d8bc5 	.word	0x000d8bc5

000d8bec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8bec:	b510      	push	{r4, lr}
   d8bee:	4604      	mov	r4, r0
   d8bf0:	4608      	mov	r0, r1
{
    _spi = spi;
   d8bf2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d8bf4:	f7fe fd1c 	bl	d7630 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8bf8:	2300      	movs	r3, #0
   d8bfa:	6063      	str	r3, [r4, #4]
}
   d8bfc:	4620      	mov	r0, r4
   d8bfe:	bd10      	pop	{r4, pc}

000d8c00 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8c00:	b510      	push	{r4, lr}
   d8c02:	4604      	mov	r4, r0
{
	free(buffer);
   d8c04:	6800      	ldr	r0, [r0, #0]
   d8c06:	f7fe ff0f 	bl	d7a28 <free>
}
   d8c0a:	4620      	mov	r0, r4
   d8c0c:	bd10      	pop	{r4, pc}

000d8c0e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8c0e:	b510      	push	{r4, lr}
   d8c10:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8c12:	6800      	ldr	r0, [r0, #0]
   d8c14:	b108      	cbz	r0, d8c1a <_ZN6String10invalidateEv+0xc>
   d8c16:	f7fe ff07 	bl	d7a28 <free>
	buffer = NULL;
   d8c1a:	2300      	movs	r3, #0
	capacity = len = 0;
   d8c1c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8c20:	6023      	str	r3, [r4, #0]
}
   d8c22:	bd10      	pop	{r4, pc}

000d8c24 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8c24:	b538      	push	{r3, r4, r5, lr}
   d8c26:	4604      	mov	r4, r0
   d8c28:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8c2a:	6800      	ldr	r0, [r0, #0]
   d8c2c:	3101      	adds	r1, #1
   d8c2e:	f7fe ff03 	bl	d7a38 <realloc>
	if (newbuffer) {
   d8c32:	b110      	cbz	r0, d8c3a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8c34:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d8c38:	2001      	movs	r0, #1
	}
	return 0;
}
   d8c3a:	bd38      	pop	{r3, r4, r5, pc}

000d8c3c <_ZN6String7reserveEj>:
{
   d8c3c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8c3e:	6803      	ldr	r3, [r0, #0]
{
   d8c40:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8c42:	b123      	cbz	r3, d8c4e <_ZN6String7reserveEj+0x12>
   d8c44:	6843      	ldr	r3, [r0, #4]
   d8c46:	428b      	cmp	r3, r1
   d8c48:	d301      	bcc.n	d8c4e <_ZN6String7reserveEj+0x12>
   d8c4a:	2001      	movs	r0, #1
}
   d8c4c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8c4e:	4620      	mov	r0, r4
   d8c50:	f7ff ffe8 	bl	d8c24 <_ZN6String12changeBufferEj>
   d8c54:	2800      	cmp	r0, #0
   d8c56:	d0f9      	beq.n	d8c4c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d8c58:	68a3      	ldr	r3, [r4, #8]
   d8c5a:	2b00      	cmp	r3, #0
   d8c5c:	d1f5      	bne.n	d8c4a <_ZN6String7reserveEj+0xe>
   d8c5e:	6822      	ldr	r2, [r4, #0]
   d8c60:	7013      	strb	r3, [r2, #0]
   d8c62:	e7f2      	b.n	d8c4a <_ZN6String7reserveEj+0xe>

000d8c64 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8c66:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d8c68:	4611      	mov	r1, r2
   d8c6a:	9201      	str	r2, [sp, #4]
{
   d8c6c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8c6e:	f7ff ffe5 	bl	d8c3c <_ZN6String7reserveEj>
   d8c72:	9a01      	ldr	r2, [sp, #4]
   d8c74:	b928      	cbnz	r0, d8c82 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d8c76:	4620      	mov	r0, r4
   d8c78:	f7ff ffc9 	bl	d8c0e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8c7c:	4620      	mov	r0, r4
   d8c7e:	b003      	add	sp, #12
   d8c80:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8c82:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8c84:	4629      	mov	r1, r5
   d8c86:	6820      	ldr	r0, [r4, #0]
   d8c88:	f001 fc26 	bl	da4d8 <memcpy>
	buffer[len] = 0;
   d8c8c:	6822      	ldr	r2, [r4, #0]
   d8c8e:	68a3      	ldr	r3, [r4, #8]
   d8c90:	2100      	movs	r1, #0
   d8c92:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8c94:	e7f2      	b.n	d8c7c <_ZN6String4copyEPKcj+0x18>

000d8c96 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d8c96:	2300      	movs	r3, #0
String::String(const char *cstr)
   d8c98:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d8c9a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d8c9e:	4604      	mov	r4, r0
	len = 0;
   d8ca0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8ca2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d8ca4:	b141      	cbz	r1, d8cb8 <_ZN6StringC1EPKc+0x22>
   d8ca6:	4608      	mov	r0, r1
   d8ca8:	9101      	str	r1, [sp, #4]
   d8caa:	f001 fc98 	bl	da5de <strlen>
   d8cae:	9901      	ldr	r1, [sp, #4]
   d8cb0:	4602      	mov	r2, r0
   d8cb2:	4620      	mov	r0, r4
   d8cb4:	f7ff ffd6 	bl	d8c64 <_ZN6String4copyEPKcj>
}
   d8cb8:	4620      	mov	r0, r4
   d8cba:	b002      	add	sp, #8
   d8cbc:	bd10      	pop	{r4, pc}

000d8cbe <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8cbe:	4288      	cmp	r0, r1
{
   d8cc0:	b510      	push	{r4, lr}
   d8cc2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8cc4:	d005      	beq.n	d8cd2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8cc6:	680b      	ldr	r3, [r1, #0]
   d8cc8:	b12b      	cbz	r3, d8cd6 <_ZN6StringaSERKS_+0x18>
   d8cca:	688a      	ldr	r2, [r1, #8]
   d8ccc:	4619      	mov	r1, r3
   d8cce:	f7ff ffc9 	bl	d8c64 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8cd2:	4620      	mov	r0, r4
   d8cd4:	bd10      	pop	{r4, pc}
	else invalidate();
   d8cd6:	f7ff ff9a 	bl	d8c0e <_ZN6String10invalidateEv>
   d8cda:	e7fa      	b.n	d8cd2 <_ZN6StringaSERKS_+0x14>

000d8cdc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d8cdc:	b510      	push	{r4, lr}
	buffer = NULL;
   d8cde:	2300      	movs	r3, #0
String::String(const String &value)
   d8ce0:	4604      	mov	r4, r0
	capacity = 0;
   d8ce2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d8ce6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8ce8:	7303      	strb	r3, [r0, #12]
	*this = value;
   d8cea:	f7ff ffe8 	bl	d8cbe <_ZN6StringaSERKS_>
}
   d8cee:	4620      	mov	r0, r4
   d8cf0:	bd10      	pop	{r4, pc}

000d8cf2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d8cf2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8cf4:	6882      	ldr	r2, [r0, #8]
   d8cf6:	b93a      	cbnz	r2, d8d08 <_ZNK6String6equalsEPKc+0x16>
   d8cf8:	b121      	cbz	r1, d8d04 <_ZNK6String6equalsEPKc+0x12>
   d8cfa:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d8cfc:	fab0 f080 	clz	r0, r0
   d8d00:	0940      	lsrs	r0, r0, #5
   d8d02:	e000      	b.n	d8d06 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8d04:	2001      	movs	r0, #1
}
   d8d06:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8d08:	6800      	ldr	r0, [r0, #0]
   d8d0a:	b909      	cbnz	r1, d8d10 <_ZNK6String6equalsEPKc+0x1e>
   d8d0c:	7800      	ldrb	r0, [r0, #0]
   d8d0e:	e7f5      	b.n	d8cfc <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d8d10:	f001 fc36 	bl	da580 <strcmp>
   d8d14:	e7f2      	b.n	d8cfc <_ZNK6String6equalsEPKc+0xa>

000d8d16 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d8d16:	b558      	push	{r3, r4, r6, lr}
   d8d18:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d8d1a:	b12a      	cbz	r2, d8d28 <_ZNK6String8getBytesEPhjj+0x12>
   d8d1c:	b121      	cbz	r1, d8d28 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d8d1e:	6884      	ldr	r4, [r0, #8]
   d8d20:	42a3      	cmp	r3, r4
   d8d22:	d302      	bcc.n	d8d2a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d8d24:	2300      	movs	r3, #0
   d8d26:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d8d28:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d8d2a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d8d2c:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d8d2e:	6801      	ldr	r1, [r0, #0]
   d8d30:	4294      	cmp	r4, r2
   d8d32:	bf28      	it	cs
   d8d34:	4614      	movcs	r4, r2
   d8d36:	4419      	add	r1, r3
   d8d38:	4622      	mov	r2, r4
   d8d3a:	4630      	mov	r0, r6
   d8d3c:	f001 fc69 	bl	da612 <strncpy>
	buf[n] = 0;
   d8d40:	2300      	movs	r3, #0
   d8d42:	5533      	strb	r3, [r6, r4]
   d8d44:	e7f0      	b.n	d8d28 <_ZNK6String8getBytesEPhjj+0x12>
	...

000d8d48 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d8d48:	b40e      	push	{r1, r2, r3}
   d8d4a:	b570      	push	{r4, r5, r6, lr}
   d8d4c:	b087      	sub	sp, #28
   d8d4e:	ad0b      	add	r5, sp, #44	; 0x2c
   d8d50:	4604      	mov	r4, r0
   d8d52:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8d56:	9201      	str	r2, [sp, #4]
   d8d58:	462b      	mov	r3, r5
   d8d5a:	2105      	movs	r1, #5
   d8d5c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d8d5e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8d60:	f7fe fe82 	bl	d7a68 <vsnprintf>
    va_end(marker);

    String result;
   d8d64:	490b      	ldr	r1, [pc, #44]	; (d8d94 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8d66:	4606      	mov	r6, r0
    String result;
   d8d68:	4620      	mov	r0, r4
   d8d6a:	f7ff ff94 	bl	d8c96 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d8d6e:	4631      	mov	r1, r6
   d8d70:	4620      	mov	r0, r4
   d8d72:	f7ff ff63 	bl	d8c3c <_ZN6String7reserveEj>
    if (result.buffer) {
   d8d76:	6820      	ldr	r0, [r4, #0]
   d8d78:	b130      	cbz	r0, d8d88 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d8d7a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d8d7c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d8d7e:	462b      	mov	r3, r5
   d8d80:	1c71      	adds	r1, r6, #1
   d8d82:	f7fe fe71 	bl	d7a68 <vsnprintf>
        va_end(marker);
        result.len = n;
   d8d86:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d8d88:	4620      	mov	r0, r4
   d8d8a:	b007      	add	sp, #28
   d8d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8d90:	b003      	add	sp, #12
   d8d92:	4770      	bx	lr
   d8d94:	000dcffc 	.word	0x000dcffc

000d8d98 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8d98:	b510      	push	{r4, lr}
   d8d9a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d8d9c:	6800      	ldr	r0, [r0, #0]
   d8d9e:	b118      	cbz	r0, d8da8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d8da0:	f7fe fe42 	bl	d7a28 <free>
            wakeupSource_ = nullptr;
   d8da4:	2300      	movs	r3, #0
   d8da6:	6023      	str	r3, [r4, #0]
        }
    }
   d8da8:	bd10      	pop	{r4, pc}

000d8daa <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8daa:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d8dac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d8db0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d8db2:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8db4:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d8db6:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d8dba:	f8c0 2006 	str.w	r2, [r0, #6]
   d8dbe:	889b      	ldrh	r3, [r3, #4]
   d8dc0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8dc2:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d8dc4:	f7ff ffe8 	bl	d8d98 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d8dc8:	682b      	ldr	r3, [r5, #0]
   d8dca:	b113      	cbz	r3, d8dd2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d8dcc:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d8dce:	2300      	movs	r3, #0
   d8dd0:	602b      	str	r3, [r5, #0]
    }
   d8dd2:	4620      	mov	r0, r4
   d8dd4:	bd38      	pop	{r3, r4, r5, pc}

000d8dd6 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   d8dd6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d8dda:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   d8ddc:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d8dde:	b933      	cbnz	r3, d8dee <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   d8de0:	b932      	cbnz	r2, d8df0 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   d8de2:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d8de6:	6003      	str	r3, [r0, #0]
   d8de8:	888b      	ldrh	r3, [r1, #4]
   d8dea:	8083      	strh	r3, [r0, #4]
    }
   d8dec:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   d8dee:	b122      	cbz	r2, d8dfa <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   d8df0:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   d8df2:	2c01      	cmp	r4, #1
   d8df4:	d003      	beq.n	d8dfe <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   d8df6:	2c04      	cmp	r4, #4
   d8df8:	d006      	beq.n	d8e08 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d8dfa:	2204      	movs	r2, #4
   d8dfc:	e005      	b.n	d8e0a <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d8dfe:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d8e00:	814a      	strh	r2, [r1, #10]
   d8e02:	718c      	strb	r4, [r1, #6]
   d8e04:	810b      	strh	r3, [r1, #8]
                    break;
   d8e06:	e7ec      	b.n	d8de2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d8e08:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d8e0a:	810b      	strh	r3, [r1, #8]
   d8e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8e10:	718a      	strb	r2, [r1, #6]
   d8e12:	814b      	strh	r3, [r1, #10]
                    break;
   d8e14:	e7e5      	b.n	d8de2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
	...

000d8e18 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d8e18:	b538      	push	{r3, r4, r5, lr}
   d8e1a:	460c      	mov	r4, r1
   d8e1c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d8e1e:	f7ff ffbb 	bl	d8d98 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d8e22:	b144      	cbz	r4, d8e36 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d8e24:	8820      	ldrh	r0, [r4, #0]
   d8e26:	f7fe fdf7 	bl	d7a18 <malloc>
   d8e2a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d8e2c:	b128      	cbz	r0, d8e3a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d8e2e:	8822      	ldrh	r2, [r4, #0]
   d8e30:	4621      	mov	r1, r4
   d8e32:	f001 fb51 	bl	da4d8 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d8e36:	2000      	movs	r0, #0
    }
   d8e38:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d8e3a:	4801      	ldr	r0, [pc, #4]	; (d8e40 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d8e3c:	e7fc      	b.n	d8e38 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d8e3e:	bf00      	nop
   d8e40:	fffffefc 	.word	0xfffffefc

000d8e44 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d8e44:	b507      	push	{r0, r1, r2, lr}
   d8e46:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d8e48:	2100      	movs	r1, #0
{
   d8e4a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d8e4c:	9100      	str	r1, [sp, #0]
   d8e4e:	2001      	movs	r0, #1
   d8e50:	218c      	movs	r1, #140	; 0x8c
   d8e52:	f7fe fd07 	bl	d7864 <system_reset>
}
   d8e56:	b003      	add	sp, #12
   d8e58:	f85d fb04 	ldr.w	pc, [sp], #4

000d8e5c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d8e5c:	4601      	mov	r1, r0
    reset(0, flags);
   d8e5e:	2000      	movs	r0, #0
   d8e60:	f7ff bff0 	b.w	d8e44 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d8e64 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d8e64:	2000      	movs	r0, #0
   d8e66:	f7ff bff9 	b.w	d8e5c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d8e6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d8e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8e6e:	4d2d      	ldr	r5, [pc, #180]	; (d8f24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d8e70:	7d0b      	ldrb	r3, [r1, #20]
   d8e72:	4604      	mov	r4, r0
   d8e74:	b08b      	sub	sp, #44	; 0x2c
   d8e76:	4608      	mov	r0, r1
   d8e78:	1daf      	adds	r7, r5, #6
   d8e7a:	2b00      	cmp	r3, #0
   d8e7c:	d038      	beq.n	d8ef0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d8e7e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d8e80:	791b      	ldrb	r3, [r3, #4]
   d8e82:	2b00      	cmp	r3, #0
   d8e84:	d034      	beq.n	d8ef0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d8e86:	2200      	movs	r2, #0
    SleepResult() {}
   d8e88:	4b27      	ldr	r3, [pc, #156]	; (d8f28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d8e8a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d8e8c:	a902      	add	r1, sp, #8
   d8e8e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d8e90:	9202      	str	r2, [sp, #8]
   d8e92:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d8e96:	f88d 200e 	strb.w	r2, [sp, #14]
   d8e9a:	f7fe fcd9 	bl	d7850 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d8e9e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d8ea2:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d8ea6:	b200      	sxth	r0, r0
   d8ea8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d8eac:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d8eb0:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d8eb2:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d8eb4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d8eb6:	4628      	mov	r0, r5
   d8eb8:	f7ff ffae 	bl	d8e18 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d8ebc:	a802      	add	r0, sp, #8
   d8ebe:	f7ff ff6b 	bl	d8d98 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d8ec2:	2300      	movs	r3, #0
   d8ec4:	6023      	str	r3, [r4, #0]
   d8ec6:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d8ec8:	71a3      	strb	r3, [r4, #6]
   d8eca:	8123      	strh	r3, [r4, #8]
   d8ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8ed0:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d8ed2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d8ed6:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d8ed8:	683b      	ldr	r3, [r7, #0]
   d8eda:	f8c4 3006 	str.w	r3, [r4, #6]
   d8ede:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d8ee0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d8ee2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d8ee4:	4620      	mov	r0, r4
   d8ee6:	f7ff ff97 	bl	d8e18 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d8eea:	4620      	mov	r0, r4
   d8eec:	b00b      	add	sp, #44	; 0x2c
   d8eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d8ef0:	2600      	movs	r6, #0
   d8ef2:	2320      	movs	r3, #32
   d8ef4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d8ef8:	4b0c      	ldr	r3, [pc, #48]	; (d8f2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d8efa:	9300      	str	r3, [sp, #0]
   d8efc:	490c      	ldr	r1, [pc, #48]	; (d8f30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d8efe:	4633      	mov	r3, r6
   d8f00:	aa02      	add	r2, sp, #8
   d8f02:	2032      	movs	r0, #50	; 0x32
   d8f04:	f7fe fc1c 	bl	d7740 <log_message>
    SleepResult() {}
   d8f08:	4b07      	ldr	r3, [pc, #28]	; (d8f28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d8f0a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d8f0c:	a902      	add	r1, sp, #8
        error_ = error;
   d8f0e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d8f12:	4804      	ldr	r0, [pc, #16]	; (d8f24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d8f14:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d8f16:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d8f1a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d8f1e:	f7ff ff44 	bl	d8daa <_ZN17SystemSleepResultaSEOS_>
   d8f22:	e7cb      	b.n	d8ebc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d8f24:	2003e624 	.word	0x2003e624
   d8f28:	ffff0000 	.word	0xffff0000
   d8f2c:	000dcf2b 	.word	0x000dcf2b
   d8f30:	000dcf24 	.word	0x000dcf24

000d8f34 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d8f34:	b530      	push	{r4, r5, lr}
   d8f36:	4604      	mov	r4, r0
   d8f38:	b085      	sub	sp, #20
   d8f3a:	4608      	mov	r0, r1
   d8f3c:	4611      	mov	r1, r2
   d8f3e:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d8f40:	2300      	movs	r3, #0
   d8f42:	f7fe fc2f 	bl	d77a4 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d8f46:	4d0d      	ldr	r5, [pc, #52]	; (d8f7c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d8f48:	f8ad 000c 	strh.w	r0, [sp, #12]
              compatResult_(r) {
   d8f4c:	2300      	movs	r3, #0
   d8f4e:	a901      	add	r1, sp, #4
   d8f50:	9301      	str	r3, [sp, #4]
   d8f52:	f8ad 3008 	strh.w	r3, [sp, #8]
   d8f56:	f88d 300a 	strb.w	r3, [sp, #10]
   d8f5a:	4628      	mov	r0, r5
   d8f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8f60:	f8ad 300e 	strh.w	r3, [sp, #14]
   d8f64:	f7ff ff21 	bl	d8daa <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   d8f68:	a801      	add	r0, sp, #4
   d8f6a:	f7ff ff15 	bl	d8d98 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   d8f6e:	4620      	mov	r0, r4
   d8f70:	4629      	mov	r1, r5
   d8f72:	f7ff ff30 	bl	d8dd6 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d8f76:	4620      	mov	r0, r4
   d8f78:	b005      	add	sp, #20
   d8f7a:	bd30      	pop	{r4, r5, pc}
   d8f7c:	2003e624 	.word	0x2003e624

000d8f80 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8f80:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8f82:	4b09      	ldr	r3, [pc, #36]	; (d8fa8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d8f84:	4c09      	ldr	r4, [pc, #36]	; (d8fac <_GLOBAL__sub_I_System+0x2c>)
   d8f86:	2202      	movs	r2, #2
   d8f88:	2000      	movs	r0, #0
   d8f8a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d8f8c:	4b08      	ldr	r3, [pc, #32]	; (d8fb0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d8f8e:	6020      	str	r0, [r4, #0]
   d8f90:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d8f92:	71a0      	strb	r0, [r4, #6]
   d8f94:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8f96:	f7fe fbf5 	bl	d7784 <set_system_mode>
SystemClass System;
   d8f9a:	4620      	mov	r0, r4
   d8f9c:	4a05      	ldr	r2, [pc, #20]	; (d8fb4 <_GLOBAL__sub_I_System+0x34>)
   d8f9e:	4906      	ldr	r1, [pc, #24]	; (d8fb8 <_GLOBAL__sub_I_System+0x38>)
   d8fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d8fa4:	f000 bcea 	b.w	d997c <__aeabi_atexit>
   d8fa8:	2003e630 	.word	0x2003e630
   d8fac:	2003e624 	.word	0x2003e624
   d8fb0:	ffff0000 	.word	0xffff0000
   d8fb4:	2003e408 	.word	0x2003e408
   d8fb8:	000d4295 	.word	0x000d4295

000d8fbc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d8fc0:	4a15      	ldr	r2, [pc, #84]	; (d9018 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d8fc2:	f8df 8060 	ldr.w	r8, [pc, #96]	; d9024 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d8fc6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d8fca:	18c0      	adds	r0, r0, r3
   d8fcc:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d8fd0:	4a12      	ldr	r2, [pc, #72]	; (d901c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d8fd2:	e9d2 3200 	ldrd	r3, r2, [r2]
   d8fd6:	18c6      	adds	r6, r0, r3
   d8fd8:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d8fdc:	e9d8 2300 	ldrd	r2, r3, [r8]
   d8fe0:	42bb      	cmp	r3, r7
   d8fe2:	bf08      	it	eq
   d8fe4:	42b2      	cmpeq	r2, r6
{
   d8fe6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d8fe8:	d013      	beq.n	d9012 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d8fea:	a903      	add	r1, sp, #12
   d8fec:	4668      	mov	r0, sp
   d8fee:	e9cd 6700 	strd	r6, r7, [sp]
   d8ff2:	f7fe fd61 	bl	d7ab8 <localtime_r>
	calendar_time.tm_year += 1900;
   d8ff6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8ff8:	4d09      	ldr	r5, [pc, #36]	; (d9020 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d8ffa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8ffe:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d9000:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d900a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d900e:	6823      	ldr	r3, [r4, #0]
   d9010:	602b      	str	r3, [r5, #0]
    }
}
   d9012:	b00c      	add	sp, #48	; 0x30
   d9014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9018:	2003e668 	.word	0x2003e668
   d901c:	2003e660 	.word	0x2003e660
   d9020:	2003e63c 	.word	0x2003e63c
   d9024:	2003e670 	.word	0x2003e670

000d9028 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d9028:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d902a:	2000      	movs	r0, #0
   d902c:	f7fe fc6c 	bl	d7908 <spark_sync_time_pending>
   d9030:	b128      	cbz	r0, d903e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9032:	f7fe fc41 	bl	d78b8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9036:	f080 0001 	eor.w	r0, r0, #1
   d903a:	b2c0      	uxtb	r0, r0
    }
   d903c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d903e:	2001      	movs	r0, #1
   d9040:	e7fc      	b.n	d903c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d9044 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d9044:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9046:	f7ff ffb9 	bl	d8fbc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   d904a:	4b01      	ldr	r3, [pc, #4]	; (d9050 <_ZN9TimeClass4hourEx+0xc>)
   d904c:	6898      	ldr	r0, [r3, #8]
   d904e:	bd08      	pop	{r3, pc}
   d9050:	2003e63c 	.word	0x2003e63c

000d9054 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d9054:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9056:	f7ff ffb1 	bl	d8fbc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   d905a:	4b01      	ldr	r3, [pc, #4]	; (d9060 <_ZN9TimeClass3dayEx+0xc>)
   d905c:	68d8      	ldr	r0, [r3, #12]
   d905e:	bd08      	pop	{r3, pc}
   d9060:	2003e63c 	.word	0x2003e63c

000d9064 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d9064:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9066:	f7ff ffa9 	bl	d8fbc <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d906a:	4b02      	ldr	r3, [pc, #8]	; (d9074 <_ZN9TimeClass7weekdayEx+0x10>)
   d906c:	6998      	ldr	r0, [r3, #24]
}
   d906e:	3001      	adds	r0, #1
   d9070:	bd08      	pop	{r3, pc}
   d9072:	bf00      	nop
   d9074:	2003e63c 	.word	0x2003e63c

000d9078 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9078:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d907a:	f7ff ff9f 	bl	d8fbc <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d907e:	4b02      	ldr	r3, [pc, #8]	; (d9088 <_ZN9TimeClass5monthEx+0x10>)
   d9080:	6918      	ldr	r0, [r3, #16]
}
   d9082:	3001      	adds	r0, #1
   d9084:	bd08      	pop	{r3, pc}
   d9086:	bf00      	nop
   d9088:	2003e63c 	.word	0x2003e63c

000d908c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d908c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d9090:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9098:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d909a:	d411      	bmi.n	d90c0 <_ZN9TimeClass4zoneEf+0x34>
   d909c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d90a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d90a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d90a8:	dc0a      	bgt.n	d90c0 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d90aa:	eddf 7a06 	vldr	s15, [pc, #24]	; d90c4 <_ZN9TimeClass4zoneEf+0x38>
   d90ae:	ee60 7a27 	vmul.f32	s15, s0, s15
   d90b2:	ee17 0a90 	vmov	r0, s15
   d90b6:	f001 f973 	bl	da3a0 <__aeabi_f2lz>
   d90ba:	4b03      	ldr	r3, [pc, #12]	; (d90c8 <_ZN9TimeClass4zoneEf+0x3c>)
   d90bc:	e9c3 0100 	strd	r0, r1, [r3]
}
   d90c0:	bd08      	pop	{r3, pc}
   d90c2:	bf00      	nop
   d90c4:	45610000 	.word	0x45610000
   d90c8:	2003e668 	.word	0x2003e668

000d90cc <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d90cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d90d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d90d4:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   d90d6:	d411      	bmi.n	d90fc <_ZN9TimeClass12setDSTOffsetEf+0x30>
   d90d8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d90dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d90e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d90e4:	dc0a      	bgt.n	d90fc <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   d90e6:	eddf 7a06 	vldr	s15, [pc, #24]	; d9100 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   d90ea:	ee60 7a27 	vmul.f32	s15, s0, s15
   d90ee:	ee17 0a90 	vmov	r0, s15
   d90f2:	f001 f955 	bl	da3a0 <__aeabi_f2lz>
   d90f6:	4b03      	ldr	r3, [pc, #12]	; (d9104 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   d90f8:	e9c3 0100 	strd	r0, r1, [r3]
}
   d90fc:	bd08      	pop	{r3, pc}
   d90fe:	bf00      	nop
   d9100:	45610000 	.word	0x45610000
   d9104:	2003e228 	.word	0x2003e228

000d9108 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d9108:	4b03      	ldr	r3, [pc, #12]	; (d9118 <_ZN9TimeClass8beginDSTEv+0x10>)
   d910a:	e9d3 0100 	ldrd	r0, r1, [r3]
   d910e:	4b03      	ldr	r3, [pc, #12]	; (d911c <_ZN9TimeClass8beginDSTEv+0x14>)
   d9110:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9114:	4770      	bx	lr
   d9116:	bf00      	nop
   d9118:	2003e228 	.word	0x2003e228
   d911c:	2003e660 	.word	0x2003e660

000d9120 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d9120:	4b02      	ldr	r3, [pc, #8]	; (d912c <_ZN9TimeClass6endDSTEv+0xc>)
   d9122:	2000      	movs	r0, #0
   d9124:	2100      	movs	r1, #0
   d9126:	e9c3 0100 	strd	r0, r1, [r3]
}
   d912a:	4770      	bx	lr
   d912c:	2003e660 	.word	0x2003e660

000d9130 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d9130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9132:	4602      	mov	r2, r0
   d9134:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d9136:	4668      	mov	r0, sp
    struct timeval tv = {
   d9138:	2100      	movs	r1, #0
    };
   d913a:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d913e:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d9142:	f7fe f9bd 	bl	d74c0 <hal_rtc_set_time>
   d9146:	4602      	mov	r2, r0
   d9148:	b910      	cbnz	r0, d9150 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d914a:	4601      	mov	r1, r0
   d914c:	f7fe fb5a 	bl	d7804 <system_notify_time_changed>
    }
}
   d9150:	b005      	add	sp, #20
   d9152:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9158 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9158:	b530      	push	{r4, r5, lr}
   d915a:	4604      	mov	r4, r0
    t += time_zone_cache;
   d915c:	4818      	ldr	r0, [pc, #96]	; (d91c0 <_ZN9TimeClass7timeStrEx+0x68>)
   d915e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9162:	1852      	adds	r2, r2, r1
   d9164:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d9168:	4816      	ldr	r0, [pc, #88]	; (d91c4 <_ZN9TimeClass7timeStrEx+0x6c>)
   d916a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d916e:	1852      	adds	r2, r2, r1
{
   d9170:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d9172:	eb40 0303 	adc.w	r3, r0, r3
   d9176:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d917a:	2224      	movs	r2, #36	; 0x24
   d917c:	eb0d 0002 	add.w	r0, sp, r2
   d9180:	2100      	movs	r1, #0
   d9182:	f001 f9d1 	bl	da528 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d9186:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d9188:	a909      	add	r1, sp, #36	; 0x24
   d918a:	4668      	mov	r0, sp
   d918c:	f7fe fc94 	bl	d7ab8 <localtime_r>
    char ascstr[26] = {};
   d9190:	2216      	movs	r2, #22
   d9192:	4629      	mov	r1, r5
   d9194:	a803      	add	r0, sp, #12
   d9196:	9502      	str	r5, [sp, #8]
   d9198:	f001 f9c6 	bl	da528 <memset>
    asctime_r(&calendar_time, ascstr);
   d919c:	a902      	add	r1, sp, #8
   d919e:	a809      	add	r0, sp, #36	; 0x24
   d91a0:	f001 f950 	bl	da444 <asctime_r>
    int len = strlen(ascstr);
   d91a4:	a802      	add	r0, sp, #8
   d91a6:	f001 fa1a 	bl	da5de <strlen>
    ascstr[len-1] = 0; // remove final newline
   d91aa:	ab12      	add	r3, sp, #72	; 0x48
   d91ac:	4418      	add	r0, r3
    return String(ascstr);
   d91ae:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d91b0:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d91b4:	4620      	mov	r0, r4
   d91b6:	f7ff fd6e 	bl	d8c96 <_ZN6StringC1EPKc>
}
   d91ba:	4620      	mov	r0, r4
   d91bc:	b013      	add	sp, #76	; 0x4c
   d91be:	bd30      	pop	{r4, r5, pc}
   d91c0:	2003e668 	.word	0x2003e668
   d91c4:	2003e660 	.word	0x2003e660

000d91c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d91c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d91cc:	b0a5      	sub	sp, #148	; 0x94
   d91ce:	4607      	mov	r7, r0
   d91d0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d91d2:	a814      	add	r0, sp, #80	; 0x50
{
   d91d4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d91d6:	223f      	movs	r2, #63	; 0x3f
{
   d91d8:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d91da:	f001 fa1a 	bl	da612 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d91de:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d91e0:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d91e2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d91e6:	f001 f9fa 	bl	da5de <strlen>
   d91ea:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d91ec:	bb5d      	cbnz	r5, d9246 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d91ee:	492a      	ldr	r1, [pc, #168]	; (d9298 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d91f0:	a803      	add	r0, sp, #12
   d91f2:	f001 f9cf 	bl	da594 <strcpy>
   d91f6:	ae14      	add	r6, sp, #80	; 0x50
{
   d91f8:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d91fa:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d91fe:	45ab      	cmp	fp, r5
   d9200:	d936      	bls.n	d9270 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9202:	46b1      	mov	r9, r6
   d9204:	f105 0a01 	add.w	sl, r5, #1
   d9208:	f819 3b01 	ldrb.w	r3, [r9], #1
   d920c:	2b25      	cmp	r3, #37	; 0x25
   d920e:	d117      	bne.n	d9240 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d9210:	7873      	ldrb	r3, [r6, #1]
   d9212:	2b7a      	cmp	r3, #122	; 0x7a
   d9214:	d114      	bne.n	d9240 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d9216:	a803      	add	r0, sp, #12
   d9218:	f001 f9e1 	bl	da5de <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d921c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d921e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9220:	1828      	adds	r0, r5, r0
   d9222:	4418      	add	r0, r3
   d9224:	ebab 0205 	sub.w	r2, fp, r5
   d9228:	1cb1      	adds	r1, r6, #2
   d922a:	f001 f955 	bl	da4d8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d922e:	4622      	mov	r2, r4
   d9230:	a903      	add	r1, sp, #12
   d9232:	4630      	mov	r0, r6
   d9234:	f001 f950 	bl	da4d8 <memcpy>
            len = strlen(format_str);
   d9238:	a814      	add	r0, sp, #80	; 0x50
   d923a:	f001 f9d0 	bl	da5de <strlen>
   d923e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d9240:	464e      	mov	r6, r9
   d9242:	4655      	mov	r5, sl
   d9244:	e7d9      	b.n	d91fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9246:	213c      	movs	r1, #60	; 0x3c
   d9248:	fb95 f3f1 	sdiv	r3, r5, r1
   d924c:	2b00      	cmp	r3, #0
   d924e:	bfb8      	it	lt
   d9250:	425b      	neglt	r3, r3
   d9252:	fbb3 f2f1 	udiv	r2, r3, r1
   d9256:	fb01 3312 	mls	r3, r1, r2, r3
   d925a:	9300      	str	r3, [sp, #0]
   d925c:	4a0f      	ldr	r2, [pc, #60]	; (d929c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d925e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9262:	2110      	movs	r1, #16
   d9264:	a803      	add	r0, sp, #12
   d9266:	fb95 f3f3 	sdiv	r3, r5, r3
   d926a:	f7fe fbf5 	bl	d7a58 <snprintf>
   d926e:	e7c2      	b.n	d91f6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d9270:	2100      	movs	r1, #0
   d9272:	222e      	movs	r2, #46	; 0x2e
   d9274:	a808      	add	r0, sp, #32
   d9276:	9107      	str	r1, [sp, #28]
   d9278:	f001 f956 	bl	da528 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d927c:	4643      	mov	r3, r8
   d927e:	aa14      	add	r2, sp, #80	; 0x50
   d9280:	2132      	movs	r1, #50	; 0x32
   d9282:	a807      	add	r0, sp, #28
   d9284:	f7fe fc10 	bl	d7aa8 <strftime>
    return String(buf);
   d9288:	a907      	add	r1, sp, #28
   d928a:	4638      	mov	r0, r7
   d928c:	f7ff fd03 	bl	d8c96 <_ZN6StringC1EPKc>
}
   d9290:	4638      	mov	r0, r7
   d9292:	b025      	add	sp, #148	; 0x94
   d9294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9298:	000dcf52 	.word	0x000dcf52
   d929c:	000dcf54 	.word	0x000dcf54

000d92a0 <_ZN9TimeClass6formatExPKc>:
{
   d92a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d92a2:	b08d      	sub	sp, #52	; 0x34
   d92a4:	e9cd 2300 	strd	r2, r3, [sp]
   d92a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d92aa:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d92ac:	b915      	cbnz	r5, d92b4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d92ae:	4b19      	ldr	r3, [pc, #100]	; (d9314 <_ZN9TimeClass6formatExPKc+0x74>)
   d92b0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d92b2:	b12d      	cbz	r5, d92c0 <_ZN9TimeClass6formatExPKc+0x20>
   d92b4:	4b18      	ldr	r3, [pc, #96]	; (d9318 <_ZN9TimeClass6formatExPKc+0x78>)
   d92b6:	4628      	mov	r0, r5
   d92b8:	6819      	ldr	r1, [r3, #0]
   d92ba:	f001 f961 	bl	da580 <strcmp>
   d92be:	b938      	cbnz	r0, d92d0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d92c0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d92c4:	4620      	mov	r0, r4
   d92c6:	f7ff ff47 	bl	d9158 <_ZN9TimeClass7timeStrEx>
}
   d92ca:	4620      	mov	r0, r4
   d92cc:	b00d      	add	sp, #52	; 0x34
   d92ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d92d0:	4e12      	ldr	r6, [pc, #72]	; (d931c <_ZN9TimeClass6formatExPKc+0x7c>)
   d92d2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d92d4:	4f12      	ldr	r7, [pc, #72]	; (d9320 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d92d6:	e9d6 3200 	ldrd	r3, r2, [r6]
   d92da:	185b      	adds	r3, r3, r1
   d92dc:	9901      	ldr	r1, [sp, #4]
   d92de:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d92e2:	e9d7 0100 	ldrd	r0, r1, [r7]
   d92e6:	181b      	adds	r3, r3, r0
   d92e8:	eb41 0202 	adc.w	r2, r1, r2
   d92ec:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d92f0:	2100      	movs	r1, #0
   d92f2:	2224      	movs	r2, #36	; 0x24
   d92f4:	a803      	add	r0, sp, #12
   d92f6:	f001 f917 	bl	da528 <memset>
    localtime_r(&t, &calendar_time);
   d92fa:	a903      	add	r1, sp, #12
   d92fc:	4668      	mov	r0, sp
   d92fe:	f7fe fbdb 	bl	d7ab8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9302:	6832      	ldr	r2, [r6, #0]
   d9304:	683b      	ldr	r3, [r7, #0]
   d9306:	a903      	add	r1, sp, #12
   d9308:	4413      	add	r3, r2
   d930a:	4620      	mov	r0, r4
   d930c:	462a      	mov	r2, r5
   d930e:	f7ff ff5b 	bl	d91c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d9312:	e7da      	b.n	d92ca <_ZN9TimeClass6formatExPKc+0x2a>
   d9314:	2003e638 	.word	0x2003e638
   d9318:	2003e220 	.word	0x2003e220
   d931c:	2003e668 	.word	0x2003e668
   d9320:	2003e660 	.word	0x2003e660

000d9324 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d9324:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d9326:	2000      	movs	r0, #0
   d9328:	f7fe f8b2 	bl	d7490 <hal_rtc_time_is_valid>
    if (rtcstate)
   d932c:	4604      	mov	r4, r0
   d932e:	b9a0      	cbnz	r0, d935a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9330:	f7fe fa20 	bl	d7774 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9334:	2801      	cmp	r0, #1
   d9336:	d110      	bne.n	d935a <_ZN9TimeClass7isValidEv+0x36>
   d9338:	4620      	mov	r0, r4
   d933a:	f7fe fa5b 	bl	d77f4 <system_thread_get_state>
   d933e:	b960      	cbnz	r0, d935a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d9340:	f7ff fe72 	bl	d9028 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9344:	b910      	cbnz	r0, d934c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d9346:	f7fe faa7 	bl	d7898 <spark_process>
        while (_while() && !_condition()) {
   d934a:	e7f9      	b.n	d9340 <_ZN9TimeClass7isValidEv+0x1c>
   d934c:	f7ff fe6c 	bl	d9028 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d9350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d9354:	2000      	movs	r0, #0
   d9356:	f7fe b89b 	b.w	d7490 <hal_rtc_time_is_valid>
}
   d935a:	4620      	mov	r0, r4
   d935c:	bd10      	pop	{r4, pc}

000d935e <_ZN9TimeClass3nowEv>:
{
   d935e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d9360:	f7ff ffe0 	bl	d9324 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d9364:	2210      	movs	r2, #16
   d9366:	2100      	movs	r1, #0
   d9368:	4668      	mov	r0, sp
   d936a:	f001 f8dd 	bl	da528 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d936e:	2100      	movs	r1, #0
   d9370:	4668      	mov	r0, sp
   d9372:	f7fe f89d 	bl	d74b0 <hal_rtc_get_time>
}
   d9376:	9800      	ldr	r0, [sp, #0]
   d9378:	b005      	add	sp, #20
   d937a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9380 <_ZN9TimeClass4hourEv>:
{
   d9380:	b508      	push	{r3, lr}
	return hour(now());
   d9382:	f7ff ffec 	bl	d935e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9386:	17c1      	asrs	r1, r0, #31
   d9388:	f7ff fe18 	bl	d8fbc <_ZL22Refresh_UnixTime_Cachex>
}
   d938c:	4b01      	ldr	r3, [pc, #4]	; (d9394 <_ZN9TimeClass4hourEv+0x14>)
   d938e:	6898      	ldr	r0, [r3, #8]
   d9390:	bd08      	pop	{r3, pc}
   d9392:	bf00      	nop
   d9394:	2003e63c 	.word	0x2003e63c

000d9398 <_ZN9TimeClass3dayEv>:
{
   d9398:	b508      	push	{r3, lr}
	return day(now());
   d939a:	f7ff ffe0 	bl	d935e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d939e:	17c1      	asrs	r1, r0, #31
   d93a0:	f7ff fe0c 	bl	d8fbc <_ZL22Refresh_UnixTime_Cachex>
}
   d93a4:	4b01      	ldr	r3, [pc, #4]	; (d93ac <_ZN9TimeClass3dayEv+0x14>)
   d93a6:	68d8      	ldr	r0, [r3, #12]
   d93a8:	bd08      	pop	{r3, pc}
   d93aa:	bf00      	nop
   d93ac:	2003e63c 	.word	0x2003e63c

000d93b0 <_ZN9TimeClass7weekdayEv>:
{
   d93b0:	b508      	push	{r3, lr}
	return weekday(now());
   d93b2:	f7ff ffd4 	bl	d935e <_ZN9TimeClass3nowEv>
}
   d93b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   d93ba:	17c1      	asrs	r1, r0, #31
   d93bc:	f7ff be52 	b.w	d9064 <_ZN9TimeClass7weekdayEx>

000d93c0 <_ZN9TimeClass5monthEv>:
{
   d93c0:	b508      	push	{r3, lr}
	return month(now());
   d93c2:	f7ff ffcc 	bl	d935e <_ZN9TimeClass3nowEv>
}
   d93c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d93ca:	17c1      	asrs	r1, r0, #31
   d93cc:	f7ff be54 	b.w	d9078 <_ZN9TimeClass5monthEx>

000d93d0 <_ZN9TimeClass5localEv>:
{
   d93d0:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   d93d2:	f7ff ffc4 	bl	d935e <_ZN9TimeClass3nowEv>
   d93d6:	4b03      	ldr	r3, [pc, #12]	; (d93e4 <_ZN9TimeClass5localEv+0x14>)
   d93d8:	4a03      	ldr	r2, [pc, #12]	; (d93e8 <_ZN9TimeClass5localEv+0x18>)
   d93da:	681b      	ldr	r3, [r3, #0]
   d93dc:	6812      	ldr	r2, [r2, #0]
   d93de:	4413      	add	r3, r2
}
   d93e0:	4418      	add	r0, r3
   d93e2:	bd08      	pop	{r3, pc}
   d93e4:	2003e668 	.word	0x2003e668
   d93e8:	2003e660 	.word	0x2003e660

000d93ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d93ec:	4b02      	ldr	r3, [pc, #8]	; (d93f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d93ee:	681a      	ldr	r2, [r3, #0]
   d93f0:	4b02      	ldr	r3, [pc, #8]	; (d93fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d93f2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d93f4:	4770      	bx	lr
   d93f6:	bf00      	nop
   d93f8:	2003e220 	.word	0x2003e220
   d93fc:	2003e638 	.word	0x2003e638

000d9400 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9400:	4770      	bx	lr

000d9402 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9402:	7441      	strb	r1, [r0, #17]
}
   d9404:	4770      	bx	lr

000d9406 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d9406:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9408:	7c00      	ldrb	r0, [r0, #16]
   d940a:	f7fe f959 	bl	d76c0 <hal_usart_available_data_for_write>
}
   d940e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9412:	bd08      	pop	{r3, pc}

000d9414 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9414:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9416:	7c00      	ldrb	r0, [r0, #16]
   d9418:	f7fe f92a 	bl	d7670 <hal_usart_available>
}
   d941c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9420:	bd08      	pop	{r3, pc}

000d9422 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9422:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9424:	7c00      	ldrb	r0, [r0, #16]
   d9426:	f7fe f933 	bl	d7690 <hal_usart_peek>
}
   d942a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d942e:	bd08      	pop	{r3, pc}

000d9430 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9430:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9432:	7c00      	ldrb	r0, [r0, #16]
   d9434:	f7fe f924 	bl	d7680 <hal_usart_read>
}
   d9438:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d943c:	bd08      	pop	{r3, pc}

000d943e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d943e:	7c00      	ldrb	r0, [r0, #16]
   d9440:	f7fe b92e 	b.w	d76a0 <hal_usart_flush>

000d9444 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9444:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9446:	7c45      	ldrb	r5, [r0, #17]
{
   d9448:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d944a:	b12d      	cbz	r5, d9458 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d944c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d944e:	b003      	add	sp, #12
   d9450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9454:	f7fe b904 	b.w	d7660 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9458:	7c00      	ldrb	r0, [r0, #16]
   d945a:	9101      	str	r1, [sp, #4]
   d945c:	f7fe f930 	bl	d76c0 <hal_usart_available_data_for_write>
   d9460:	2800      	cmp	r0, #0
   d9462:	9901      	ldr	r1, [sp, #4]
   d9464:	dcf2      	bgt.n	d944c <_ZN11USARTSerial5writeEh+0x8>
}
   d9466:	4628      	mov	r0, r5
   d9468:	b003      	add	sp, #12
   d946a:	bd30      	pop	{r4, r5, pc}

000d946c <_ZN11USARTSerialD0Ev>:
   d946c:	b510      	push	{r4, lr}
   d946e:	2114      	movs	r1, #20
   d9470:	4604      	mov	r4, r0
   d9472:	f000 fa88 	bl	d9986 <_ZdlPvj>
   d9476:	4620      	mov	r0, r4
   d9478:	bd10      	pop	{r4, pc}
	...

000d947c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d947c:	b510      	push	{r4, lr}
   d947e:	f04f 0c00 	mov.w	ip, #0
   d9482:	4604      	mov	r4, r0
   d9484:	4608      	mov	r0, r1
   d9486:	4611      	mov	r1, r2
   d9488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d948c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9490:	4a04      	ldr	r2, [pc, #16]	; (d94a4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9492:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9494:	2201      	movs	r2, #1
  _serial = serial;
   d9496:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9498:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d949a:	461a      	mov	r2, r3
   d949c:	f7fe f8d8 	bl	d7650 <hal_usart_init>
}
   d94a0:	4620      	mov	r0, r4
   d94a2:	bd10      	pop	{r4, pc}
   d94a4:	000dcf84 	.word	0x000dcf84

000d94a8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d94a8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d94aa:	4c0e      	ldr	r4, [pc, #56]	; (d94e4 <_Z22__fetch_global_Serial1v+0x3c>)
   d94ac:	7821      	ldrb	r1, [r4, #0]
   d94ae:	f3bf 8f5b 	dmb	ish
   d94b2:	f011 0101 	ands.w	r1, r1, #1
   d94b6:	d112      	bne.n	d94de <_Z22__fetch_global_Serial1v+0x36>
   d94b8:	4620      	mov	r0, r4
   d94ba:	9101      	str	r1, [sp, #4]
   d94bc:	f7fa fdfc 	bl	d40b8 <__cxa_guard_acquire>
   d94c0:	9901      	ldr	r1, [sp, #4]
   d94c2:	b160      	cbz	r0, d94de <_Z22__fetch_global_Serial1v+0x36>
   d94c4:	4a08      	ldr	r2, [pc, #32]	; (d94e8 <_Z22__fetch_global_Serial1v+0x40>)
   d94c6:	4b09      	ldr	r3, [pc, #36]	; (d94ec <_Z22__fetch_global_Serial1v+0x44>)
   d94c8:	4809      	ldr	r0, [pc, #36]	; (d94f0 <_Z22__fetch_global_Serial1v+0x48>)
   d94ca:	f7ff ffd7 	bl	d947c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d94ce:	4620      	mov	r0, r4
   d94d0:	f7fa fdf7 	bl	d40c2 <__cxa_guard_release>
   d94d4:	4a07      	ldr	r2, [pc, #28]	; (d94f4 <_Z22__fetch_global_Serial1v+0x4c>)
   d94d6:	4908      	ldr	r1, [pc, #32]	; (d94f8 <_Z22__fetch_global_Serial1v+0x50>)
   d94d8:	4805      	ldr	r0, [pc, #20]	; (d94f0 <_Z22__fetch_global_Serial1v+0x48>)
   d94da:	f000 fa4f 	bl	d997c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d94de:	4804      	ldr	r0, [pc, #16]	; (d94f0 <_Z22__fetch_global_Serial1v+0x48>)
   d94e0:	b002      	add	sp, #8
   d94e2:	bd10      	pop	{r4, pc}
   d94e4:	2003e678 	.word	0x2003e678
   d94e8:	2003e67c 	.word	0x2003e67c
   d94ec:	2003e700 	.word	0x2003e700
   d94f0:	2003e784 	.word	0x2003e784
   d94f4:	2003e408 	.word	0x2003e408
   d94f8:	000d9401 	.word	0x000d9401

000d94fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d94fc:	7441      	strb	r1, [r0, #17]
}
   d94fe:	4770      	bx	lr

000d9500 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9500:	4770      	bx	lr

000d9502 <_ZN9USBSerial4readEv>:
{
   d9502:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9504:	2100      	movs	r1, #0
   d9506:	7c00      	ldrb	r0, [r0, #16]
   d9508:	f7fe f8fa 	bl	d7700 <HAL_USB_USART_Receive_Data>
}
   d950c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9510:	bd08      	pop	{r3, pc}

000d9512 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d9512:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9514:	2101      	movs	r1, #1
   d9516:	7c00      	ldrb	r0, [r0, #16]
   d9518:	f7fe f8f2 	bl	d7700 <HAL_USB_USART_Receive_Data>
}
   d951c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9520:	bd08      	pop	{r3, pc}

000d9522 <_ZN9USBSerial17availableForWriteEv>:
{
   d9522:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9524:	7c00      	ldrb	r0, [r0, #16]
   d9526:	f7fe f8e3 	bl	d76f0 <HAL_USB_USART_Available_Data_For_Write>
}
   d952a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d952e:	bd08      	pop	{r3, pc}

000d9530 <_ZN9USBSerial9availableEv>:
{
   d9530:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9532:	7c00      	ldrb	r0, [r0, #16]
   d9534:	f7fe f8d4 	bl	d76e0 <HAL_USB_USART_Available_Data>
}
   d9538:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d953c:	bd08      	pop	{r3, pc}

000d953e <_ZN9USBSerial5writeEh>:
{
   d953e:	b513      	push	{r0, r1, r4, lr}
   d9540:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9542:	7c00      	ldrb	r0, [r0, #16]
{
   d9544:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9546:	f7fe f8d3 	bl	d76f0 <HAL_USB_USART_Available_Data_For_Write>
   d954a:	2800      	cmp	r0, #0
   d954c:	9901      	ldr	r1, [sp, #4]
   d954e:	dc01      	bgt.n	d9554 <_ZN9USBSerial5writeEh+0x16>
   d9550:	7c60      	ldrb	r0, [r4, #17]
   d9552:	b120      	cbz	r0, d955e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9554:	7c20      	ldrb	r0, [r4, #16]
   d9556:	f7fe f8db 	bl	d7710 <HAL_USB_USART_Send_Data>
   d955a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d955e:	b002      	add	sp, #8
   d9560:	bd10      	pop	{r4, pc}

000d9562 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9562:	7c00      	ldrb	r0, [r0, #16]
   d9564:	f7fe b8dc 	b.w	d7720 <HAL_USB_USART_Flush_Data>

000d9568 <_ZN9USBSerialD0Ev>:
   d9568:	b510      	push	{r4, lr}
   d956a:	2114      	movs	r1, #20
   d956c:	4604      	mov	r4, r0
   d956e:	f000 fa0a 	bl	d9986 <_ZdlPvj>
   d9572:	4620      	mov	r0, r4
   d9574:	bd10      	pop	{r4, pc}
	...

000d9578 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9578:	b510      	push	{r4, lr}
   d957a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d957e:	4604      	mov	r4, r0
   d9580:	4608      	mov	r0, r1
   d9582:	2100      	movs	r1, #0
   d9584:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9588:	4b04      	ldr	r3, [pc, #16]	; (d959c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d958a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d958c:	2301      	movs	r3, #1
  _serial = serial;
   d958e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9590:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9592:	4611      	mov	r1, r2
   d9594:	f7fe f89c 	bl	d76d0 <HAL_USB_USART_Init>
}
   d9598:	4620      	mov	r0, r4
   d959a:	bd10      	pop	{r4, pc}
   d959c:	000dcfb4 	.word	0x000dcfb4

000d95a0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d95a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d95a2:	2214      	movs	r2, #20
{
   d95a4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d95a6:	2100      	movs	r1, #0
   d95a8:	f000 ffbe 	bl	da528 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d95ac:	4620      	mov	r0, r4
   d95ae:	bd10      	pop	{r4, pc}

000d95b0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d95b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d95b2:	4c10      	ldr	r4, [pc, #64]	; (d95f4 <_Z16_fetch_usbserialv+0x44>)
{
   d95b4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d95b6:	a803      	add	r0, sp, #12
   d95b8:	f7ff fff2 	bl	d95a0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d95bc:	7821      	ldrb	r1, [r4, #0]
   d95be:	f3bf 8f5b 	dmb	ish
   d95c2:	f011 0101 	ands.w	r1, r1, #1
   d95c6:	d111      	bne.n	d95ec <_Z16_fetch_usbserialv+0x3c>
   d95c8:	4620      	mov	r0, r4
   d95ca:	9101      	str	r1, [sp, #4]
   d95cc:	f7fa fd74 	bl	d40b8 <__cxa_guard_acquire>
   d95d0:	9901      	ldr	r1, [sp, #4]
   d95d2:	b158      	cbz	r0, d95ec <_Z16_fetch_usbserialv+0x3c>
   d95d4:	aa03      	add	r2, sp, #12
   d95d6:	4808      	ldr	r0, [pc, #32]	; (d95f8 <_Z16_fetch_usbserialv+0x48>)
   d95d8:	f7ff ffce 	bl	d9578 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d95dc:	4620      	mov	r0, r4
   d95de:	f7fa fd70 	bl	d40c2 <__cxa_guard_release>
   d95e2:	4a06      	ldr	r2, [pc, #24]	; (d95fc <_Z16_fetch_usbserialv+0x4c>)
   d95e4:	4906      	ldr	r1, [pc, #24]	; (d9600 <_Z16_fetch_usbserialv+0x50>)
   d95e6:	4804      	ldr	r0, [pc, #16]	; (d95f8 <_Z16_fetch_usbserialv+0x48>)
   d95e8:	f000 f9c8 	bl	d997c <__aeabi_atexit>
	return _usbserial;
}
   d95ec:	4802      	ldr	r0, [pc, #8]	; (d95f8 <_Z16_fetch_usbserialv+0x48>)
   d95ee:	b008      	add	sp, #32
   d95f0:	bd10      	pop	{r4, pc}
   d95f2:	bf00      	nop
   d95f4:	2003e798 	.word	0x2003e798
   d95f8:	2003e79c 	.word	0x2003e79c
   d95fc:	2003e408 	.word	0x2003e408
   d9600:	000d9501 	.word	0x000d9501

000d9604 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9604:	4b01      	ldr	r3, [pc, #4]	; (d960c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9606:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9608:	4770      	bx	lr
   d960a:	bf00      	nop
   d960c:	2003e230 	.word	0x2003e230

000d9610 <serialEventRun>:
{
   d9610:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9612:	4b0b      	ldr	r3, [pc, #44]	; (d9640 <serialEventRun+0x30>)
   d9614:	b143      	cbz	r3, d9628 <serialEventRun+0x18>
   d9616:	f7ff ffcb 	bl	d95b0 <_Z16_fetch_usbserialv>
   d961a:	6803      	ldr	r3, [r0, #0]
   d961c:	691b      	ldr	r3, [r3, #16]
   d961e:	4798      	blx	r3
   d9620:	2800      	cmp	r0, #0
   d9622:	dd01      	ble.n	d9628 <serialEventRun+0x18>
        serialEvent();
   d9624:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9628:	4b06      	ldr	r3, [pc, #24]	; (d9644 <serialEventRun+0x34>)
   d962a:	b143      	cbz	r3, d963e <serialEventRun+0x2e>
   d962c:	f7ff ff3c 	bl	d94a8 <_Z22__fetch_global_Serial1v>
   d9630:	6803      	ldr	r3, [r0, #0]
   d9632:	691b      	ldr	r3, [r3, #16]
   d9634:	4798      	blx	r3
   d9636:	2800      	cmp	r0, #0
   d9638:	dd01      	ble.n	d963e <serialEventRun+0x2e>
        serialEvent1();
   d963a:	f3af 8000 	nop.w
}
   d963e:	bd08      	pop	{r3, pc}
	...

000d9648 <_post_loop>:
{
   d9648:	b508      	push	{r3, lr}
	serialEventRun();
   d964a:	f7ff ffe1 	bl	d9610 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d964e:	f7fd ff17 	bl	d7480 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9652:	4b01      	ldr	r3, [pc, #4]	; (d9658 <_post_loop+0x10>)
   d9654:	6018      	str	r0, [r3, #0]
}
   d9656:	bd08      	pop	{r3, pc}
   d9658:	2003e7c4 	.word	0x2003e7c4

000d965c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d965c:	4802      	ldr	r0, [pc, #8]	; (d9668 <_Z33system_initialize_user_backup_ramv+0xc>)
   d965e:	4a03      	ldr	r2, [pc, #12]	; (d966c <_Z33system_initialize_user_backup_ramv+0x10>)
   d9660:	4903      	ldr	r1, [pc, #12]	; (d9670 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9662:	1a12      	subs	r2, r2, r0
   d9664:	f000 bf38 	b.w	da4d8 <memcpy>
   d9668:	2003f400 	.word	0x2003f400
   d966c:	2003fc04 	.word	0x2003fc04
   d9670:	000dd2e0 	.word	0x000dd2e0

000d9674 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9674:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9676:	2300      	movs	r3, #0
   d9678:	9300      	str	r3, [sp, #0]
   d967a:	461a      	mov	r2, r3
   d967c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9680:	f7fe f8d2 	bl	d7828 <system_ctrl_set_result>
}
   d9684:	b003      	add	sp, #12
   d9686:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d968c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d968c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d968e:	8843      	ldrh	r3, [r0, #2]
   d9690:	2b0a      	cmp	r3, #10
   d9692:	d008      	beq.n	d96a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9694:	2b50      	cmp	r3, #80	; 0x50
   d9696:	d10b      	bne.n	d96b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9698:	4b09      	ldr	r3, [pc, #36]	; (d96c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d969a:	681b      	ldr	r3, [r3, #0]
   d969c:	b14b      	cbz	r3, d96b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d969e:	b003      	add	sp, #12
   d96a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d96a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d96a6:	f7ff ffe5 	bl	d9674 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d96aa:	b003      	add	sp, #12
   d96ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d96b0:	2300      	movs	r3, #0
   d96b2:	9300      	str	r3, [sp, #0]
   d96b4:	461a      	mov	r2, r3
   d96b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d96ba:	f7fe f8b5 	bl	d7828 <system_ctrl_set_result>
}
   d96be:	e7f4      	b.n	d96aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d96c0:	2003e7b4 	.word	0x2003e7b4

000d96c4 <module_user_init_hook>:
{
   d96c4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d96c6:	4c12      	ldr	r4, [pc, #72]	; (d9710 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d96c8:	4812      	ldr	r0, [pc, #72]	; (d9714 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d96ca:	4d13      	ldr	r5, [pc, #76]	; (d9718 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d96cc:	2100      	movs	r1, #0
   d96ce:	f7fe f9e3 	bl	d7a98 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d96d2:	6823      	ldr	r3, [r4, #0]
   d96d4:	42ab      	cmp	r3, r5
   d96d6:	4b11      	ldr	r3, [pc, #68]	; (d971c <module_user_init_hook+0x58>)
   d96d8:	bf0c      	ite	eq
   d96da:	2201      	moveq	r2, #1
   d96dc:	2200      	movne	r2, #0
   d96de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d96e0:	d002      	beq.n	d96e8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d96e2:	f7ff ffbb 	bl	d965c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d96e6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d96e8:	f7fd feb2 	bl	d7450 <HAL_RNG_GetRandomNumber>
   d96ec:	4604      	mov	r4, r0
    srand(seed);
   d96ee:	f000 ff23 	bl	da538 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d96f2:	4b0b      	ldr	r3, [pc, #44]	; (d9720 <module_user_init_hook+0x5c>)
   d96f4:	b113      	cbz	r3, d96fc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d96f6:	4620      	mov	r0, r4
   d96f8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d96fc:	2100      	movs	r1, #0
   d96fe:	4808      	ldr	r0, [pc, #32]	; (d9720 <module_user_init_hook+0x5c>)
   d9700:	f7fe f91a 	bl	d7938 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9708:	4806      	ldr	r0, [pc, #24]	; (d9724 <module_user_init_hook+0x60>)
   d970a:	2100      	movs	r1, #0
   d970c:	f7fe b882 	b.w	d7814 <system_ctrl_set_app_request_handler>
   d9710:	2003fc00 	.word	0x2003fc00
   d9714:	000d9605 	.word	0x000d9605
   d9718:	9a271c1e 	.word	0x9a271c1e
   d971c:	2003e7b0 	.word	0x2003e7b0
   d9720:	00000000 	.word	0x00000000
   d9724:	000d968d 	.word	0x000d968d

000d9728 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d9728:	b508      	push	{r3, lr}
   d972a:	4b02      	ldr	r3, [pc, #8]	; (d9734 <spark_protocol_instance+0xc>)
   d972c:	681b      	ldr	r3, [r3, #0]
   d972e:	681b      	ldr	r3, [r3, #0]
   d9730:	9301      	str	r3, [sp, #4]
   d9732:	bd08      	pop	{r3, pc}
   d9734:	0003025c 	.word	0x0003025c

000d9738 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d9738:	b508      	push	{r3, lr}
   d973a:	4b02      	ldr	r3, [pc, #8]	; (d9744 <spark_protocol_set_product_id+0xc>)
   d973c:	681b      	ldr	r3, [r3, #0]
   d973e:	685b      	ldr	r3, [r3, #4]
   d9740:	9301      	str	r3, [sp, #4]
   d9742:	bd08      	pop	{r3, pc}
   d9744:	0003025c 	.word	0x0003025c

000d9748 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d9748:	b508      	push	{r3, lr}
   d974a:	4b02      	ldr	r3, [pc, #8]	; (d9754 <spark_protocol_set_product_firmware_version+0xc>)
   d974c:	681b      	ldr	r3, [r3, #0]
   d974e:	689b      	ldr	r3, [r3, #8]
   d9750:	9301      	str	r3, [sp, #4]
   d9752:	bd08      	pop	{r3, pc}
   d9754:	0003025c 	.word	0x0003025c

000d9758 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9758:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d975a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d975c:	d902      	bls.n	d9764 <pinAvailable+0xc>
    return false;
   d975e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9760:	b002      	add	sp, #8
   d9762:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9764:	f1a0 030b 	sub.w	r3, r0, #11
   d9768:	2b02      	cmp	r3, #2
   d976a:	d81a      	bhi.n	d97a2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d976c:	4c17      	ldr	r4, [pc, #92]	; (d97cc <pinAvailable+0x74>)
   d976e:	7821      	ldrb	r1, [r4, #0]
   d9770:	f3bf 8f5b 	dmb	ish
   d9774:	f011 0101 	ands.w	r1, r1, #1
   d9778:	d10b      	bne.n	d9792 <pinAvailable+0x3a>
   d977a:	4620      	mov	r0, r4
   d977c:	9101      	str	r1, [sp, #4]
   d977e:	f7fa fc9b 	bl	d40b8 <__cxa_guard_acquire>
   d9782:	9901      	ldr	r1, [sp, #4]
   d9784:	b128      	cbz	r0, d9792 <pinAvailable+0x3a>
   d9786:	4812      	ldr	r0, [pc, #72]	; (d97d0 <pinAvailable+0x78>)
   d9788:	f7ff fa30 	bl	d8bec <_ZN8SPIClassC1E19hal_spi_interface_t>
   d978c:	4620      	mov	r0, r4
   d978e:	f7fa fc98 	bl	d40c2 <__cxa_guard_release>
   d9792:	4b0f      	ldr	r3, [pc, #60]	; (d97d0 <pinAvailable+0x78>)
   d9794:	7818      	ldrb	r0, [r3, #0]
   d9796:	f7fd ff53 	bl	d7640 <hal_spi_is_enabled>
   d979a:	2800      	cmp	r0, #0
   d979c:	d1df      	bne.n	d975e <pinAvailable+0x6>
  return true; // 'pin' is available
   d979e:	2001      	movs	r0, #1
   d97a0:	e7de      	b.n	d9760 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d97a2:	2801      	cmp	r0, #1
   d97a4:	d809      	bhi.n	d97ba <pinAvailable+0x62>
   d97a6:	f000 f899 	bl	d98dc <_Z19__fetch_global_Wirev>
   d97aa:	2100      	movs	r1, #0
   d97ac:	7c00      	ldrb	r0, [r0, #16]
   d97ae:	f7fd feff 	bl	d75b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d97b2:	f080 0001 	eor.w	r0, r0, #1
   d97b6:	b2c0      	uxtb	r0, r0
   d97b8:	e7d2      	b.n	d9760 <pinAvailable+0x8>
   d97ba:	3809      	subs	r0, #9
   d97bc:	2801      	cmp	r0, #1
   d97be:	d8ee      	bhi.n	d979e <pinAvailable+0x46>
   d97c0:	f7ff fe72 	bl	d94a8 <_Z22__fetch_global_Serial1v>
   d97c4:	7c00      	ldrb	r0, [r0, #16]
   d97c6:	f7fd ff73 	bl	d76b0 <hal_usart_is_enabled>
   d97ca:	e7f2      	b.n	d97b2 <pinAvailable+0x5a>
   d97cc:	2003e7b8 	.word	0x2003e7b8
   d97d0:	2003e7bc 	.word	0x2003e7bc

000d97d4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d97d4:	2823      	cmp	r0, #35	; 0x23
{
   d97d6:	b538      	push	{r3, r4, r5, lr}
   d97d8:	4604      	mov	r4, r0
   d97da:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d97dc:	d80a      	bhi.n	d97f4 <pinMode+0x20>
   d97de:	29ff      	cmp	r1, #255	; 0xff
   d97e0:	d008      	beq.n	d97f4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d97e2:	f7ff ffb9 	bl	d9758 <pinAvailable>
   d97e6:	b128      	cbz	r0, d97f4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d97e8:	4629      	mov	r1, r5
   d97ea:	4620      	mov	r0, r4
}
   d97ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d97f0:	f7fd be76 	b.w	d74e0 <HAL_Pin_Mode>
}
   d97f4:	bd38      	pop	{r3, r4, r5, pc}

000d97f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d97f6:	b538      	push	{r3, r4, r5, lr}
   d97f8:	4604      	mov	r4, r0
   d97fa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d97fc:	f7fd fe78 	bl	d74f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9800:	28ff      	cmp	r0, #255	; 0xff
   d9802:	d010      	beq.n	d9826 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9804:	2806      	cmp	r0, #6
   d9806:	d804      	bhi.n	d9812 <digitalWrite+0x1c>
   d9808:	234d      	movs	r3, #77	; 0x4d
   d980a:	fa23 f000 	lsr.w	r0, r3, r0
   d980e:	07c3      	lsls	r3, r0, #31
   d9810:	d409      	bmi.n	d9826 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9812:	4620      	mov	r0, r4
   d9814:	f7ff ffa0 	bl	d9758 <pinAvailable>
   d9818:	b128      	cbz	r0, d9826 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d981a:	4629      	mov	r1, r5
   d981c:	4620      	mov	r0, r4
}
   d981e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9822:	f7fd be6d 	b.w	d7500 <HAL_GPIO_Write>
}
   d9826:	bd38      	pop	{r3, r4, r5, pc}

000d9828 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9828:	b510      	push	{r4, lr}
   d982a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d982c:	f7fd fe60 	bl	d74f0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9830:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9832:	b2db      	uxtb	r3, r3
   d9834:	2b01      	cmp	r3, #1
   d9836:	d908      	bls.n	d984a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9838:	4620      	mov	r0, r4
   d983a:	f7ff ff8d 	bl	d9758 <pinAvailable>
   d983e:	b120      	cbz	r0, d984a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9840:	4620      	mov	r0, r4
}
   d9842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9846:	f7fd be63 	b.w	d7510 <HAL_GPIO_Read>
}
   d984a:	2000      	movs	r0, #0
   d984c:	bd10      	pop	{r4, pc}

000d984e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d984e:	280d      	cmp	r0, #13
{
   d9850:	b510      	push	{r4, lr}
   d9852:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9854:	bf9c      	itt	ls
   d9856:	340e      	addls	r4, #14
   d9858:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d985a:	4620      	mov	r0, r4
   d985c:	f7ff ff7c 	bl	d9758 <pinAvailable>
   d9860:	b150      	cbz	r0, d9878 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d9862:	2103      	movs	r1, #3
   d9864:	4620      	mov	r0, r4
   d9866:	f7fd fe33 	bl	d74d0 <HAL_Validate_Pin_Function>
   d986a:	2803      	cmp	r0, #3
   d986c:	d104      	bne.n	d9878 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d986e:	4620      	mov	r0, r4
}
   d9870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d9874:	f7fd be54 	b.w	d7520 <hal_adc_read>
}
   d9878:	2000      	movs	r0, #0
   d987a:	bd10      	pop	{r4, pc}

000d987c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d987c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d987e:	2300      	movs	r3, #0
   d9880:	2520      	movs	r5, #32
   d9882:	8043      	strh	r3, [r0, #2]
   d9884:	2314      	movs	r3, #20
{
   d9886:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9888:	8003      	strh	r3, [r0, #0]
   d988a:	6085      	str	r5, [r0, #8]
   d988c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d988e:	4906      	ldr	r1, [pc, #24]	; (d98a8 <_Z17acquireWireBufferv+0x2c>)
   d9890:	4628      	mov	r0, r5
   d9892:	f000 f87c 	bl	d998e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9896:	4904      	ldr	r1, [pc, #16]	; (d98a8 <_Z17acquireWireBufferv+0x2c>)
	};
   d9898:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d989a:	4628      	mov	r0, r5
   d989c:	f000 f877 	bl	d998e <_ZnajRKSt9nothrow_t>
	};
   d98a0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d98a2:	4620      	mov	r0, r4
   d98a4:	bd38      	pop	{r3, r4, r5, pc}
   d98a6:	bf00      	nop
   d98a8:	000dcfdc 	.word	0x000dcfdc

000d98ac <_Z18acquireWire1Bufferv>:
   d98ac:	b538      	push	{r3, r4, r5, lr}
   d98ae:	2300      	movs	r3, #0
   d98b0:	2520      	movs	r5, #32
   d98b2:	8043      	strh	r3, [r0, #2]
   d98b4:	2314      	movs	r3, #20
   d98b6:	4604      	mov	r4, r0
   d98b8:	8003      	strh	r3, [r0, #0]
   d98ba:	6085      	str	r5, [r0, #8]
   d98bc:	6105      	str	r5, [r0, #16]
   d98be:	4906      	ldr	r1, [pc, #24]	; (d98d8 <_Z18acquireWire1Bufferv+0x2c>)
   d98c0:	4628      	mov	r0, r5
   d98c2:	f000 f864 	bl	d998e <_ZnajRKSt9nothrow_t>
   d98c6:	4904      	ldr	r1, [pc, #16]	; (d98d8 <_Z18acquireWire1Bufferv+0x2c>)
   d98c8:	6060      	str	r0, [r4, #4]
   d98ca:	4628      	mov	r0, r5
   d98cc:	f000 f85f 	bl	d998e <_ZnajRKSt9nothrow_t>
   d98d0:	60e0      	str	r0, [r4, #12]
   d98d2:	4620      	mov	r0, r4
   d98d4:	bd38      	pop	{r3, r4, r5, pc}
   d98d6:	bf00      	nop
   d98d8:	000dcfdc 	.word	0x000dcfdc

000d98dc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d98dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d98de:	4d0f      	ldr	r5, [pc, #60]	; (d991c <_Z19__fetch_global_Wirev+0x40>)
   d98e0:	7829      	ldrb	r1, [r5, #0]
   d98e2:	f3bf 8f5b 	dmb	ish
   d98e6:	f011 0401 	ands.w	r4, r1, #1
{
   d98ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d98ec:	d113      	bne.n	d9916 <_Z19__fetch_global_Wirev+0x3a>
   d98ee:	4628      	mov	r0, r5
   d98f0:	f7fa fbe2 	bl	d40b8 <__cxa_guard_acquire>
   d98f4:	b178      	cbz	r0, d9916 <_Z19__fetch_global_Wirev+0x3a>
   d98f6:	a801      	add	r0, sp, #4
   d98f8:	f7ff ffc0 	bl	d987c <_Z17acquireWireBufferv>
   d98fc:	aa01      	add	r2, sp, #4
   d98fe:	4621      	mov	r1, r4
   d9900:	4807      	ldr	r0, [pc, #28]	; (d9920 <_Z19__fetch_global_Wirev+0x44>)
   d9902:	f7fe feb1 	bl	d8668 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9906:	4628      	mov	r0, r5
   d9908:	f7fa fbdb 	bl	d40c2 <__cxa_guard_release>
   d990c:	4a05      	ldr	r2, [pc, #20]	; (d9924 <_Z19__fetch_global_Wirev+0x48>)
   d990e:	4906      	ldr	r1, [pc, #24]	; (d9928 <_Z19__fetch_global_Wirev+0x4c>)
   d9910:	4803      	ldr	r0, [pc, #12]	; (d9920 <_Z19__fetch_global_Wirev+0x44>)
   d9912:	f000 f833 	bl	d997c <__aeabi_atexit>
	return wire;
}
   d9916:	4802      	ldr	r0, [pc, #8]	; (d9920 <_Z19__fetch_global_Wirev+0x44>)
   d9918:	b007      	add	sp, #28
   d991a:	bd30      	pop	{r4, r5, pc}
   d991c:	2003e7c8 	.word	0x2003e7c8
   d9920:	2003e7d0 	.word	0x2003e7d0
   d9924:	2003e408 	.word	0x2003e408
   d9928:	000d8611 	.word	0x000d8611

000d992c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d992c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d992e:	4c0f      	ldr	r4, [pc, #60]	; (d996c <_Z20__fetch_global_Wire1v+0x40>)
   d9930:	7823      	ldrb	r3, [r4, #0]
   d9932:	f3bf 8f5b 	dmb	ish
   d9936:	07db      	lsls	r3, r3, #31
{
   d9938:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d993a:	d413      	bmi.n	d9964 <_Z20__fetch_global_Wire1v+0x38>
   d993c:	4620      	mov	r0, r4
   d993e:	f7fa fbbb 	bl	d40b8 <__cxa_guard_acquire>
   d9942:	b178      	cbz	r0, d9964 <_Z20__fetch_global_Wire1v+0x38>
   d9944:	a801      	add	r0, sp, #4
   d9946:	f7ff ffb1 	bl	d98ac <_Z18acquireWire1Bufferv>
   d994a:	aa01      	add	r2, sp, #4
   d994c:	2101      	movs	r1, #1
   d994e:	4808      	ldr	r0, [pc, #32]	; (d9970 <_Z20__fetch_global_Wire1v+0x44>)
   d9950:	f7fe fe8a 	bl	d8668 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9954:	4620      	mov	r0, r4
   d9956:	f7fa fbb4 	bl	d40c2 <__cxa_guard_release>
   d995a:	4a06      	ldr	r2, [pc, #24]	; (d9974 <_Z20__fetch_global_Wire1v+0x48>)
   d995c:	4906      	ldr	r1, [pc, #24]	; (d9978 <_Z20__fetch_global_Wire1v+0x4c>)
   d995e:	4804      	ldr	r0, [pc, #16]	; (d9970 <_Z20__fetch_global_Wire1v+0x44>)
   d9960:	f000 f80c 	bl	d997c <__aeabi_atexit>
	return wire;
}
   d9964:	4802      	ldr	r0, [pc, #8]	; (d9970 <_Z20__fetch_global_Wire1v+0x44>)
   d9966:	b006      	add	sp, #24
   d9968:	bd10      	pop	{r4, pc}
   d996a:	bf00      	nop
   d996c:	2003e7cc 	.word	0x2003e7cc
   d9970:	2003e7e4 	.word	0x2003e7e4
   d9974:	2003e408 	.word	0x2003e408
   d9978:	000d8611 	.word	0x000d8611

000d997c <__aeabi_atexit>:
   d997c:	460b      	mov	r3, r1
   d997e:	4601      	mov	r1, r0
   d9980:	4618      	mov	r0, r3
   d9982:	f000 bd89 	b.w	da498 <__cxa_atexit>

000d9986 <_ZdlPvj>:
   d9986:	f7fa bb8a 	b.w	d409e <_ZdlPv>

000d998a <_ZnwjRKSt9nothrow_t>:
   d998a:	f7fa bb84 	b.w	d4096 <_Znwj>

000d998e <_ZnajRKSt9nothrow_t>:
   d998e:	f7fa bb84 	b.w	d409a <_Znaj>

000d9992 <_ZSt25__throw_bad_function_callv>:
   d9992:	b508      	push	{r3, lr}
   d9994:	f7fe f870 	bl	d7a78 <abort>

000d9998 <__aeabi_drsub>:
   d9998:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d999c:	e002      	b.n	d99a4 <__adddf3>
   d999e:	bf00      	nop

000d99a0 <__aeabi_dsub>:
   d99a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d99a4 <__adddf3>:
   d99a4:	b530      	push	{r4, r5, lr}
   d99a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d99aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d99ae:	ea94 0f05 	teq	r4, r5
   d99b2:	bf08      	it	eq
   d99b4:	ea90 0f02 	teqeq	r0, r2
   d99b8:	bf1f      	itttt	ne
   d99ba:	ea54 0c00 	orrsne.w	ip, r4, r0
   d99be:	ea55 0c02 	orrsne.w	ip, r5, r2
   d99c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d99c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d99ca:	f000 80e2 	beq.w	d9b92 <__adddf3+0x1ee>
   d99ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d99d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d99d6:	bfb8      	it	lt
   d99d8:	426d      	neglt	r5, r5
   d99da:	dd0c      	ble.n	d99f6 <__adddf3+0x52>
   d99dc:	442c      	add	r4, r5
   d99de:	ea80 0202 	eor.w	r2, r0, r2
   d99e2:	ea81 0303 	eor.w	r3, r1, r3
   d99e6:	ea82 0000 	eor.w	r0, r2, r0
   d99ea:	ea83 0101 	eor.w	r1, r3, r1
   d99ee:	ea80 0202 	eor.w	r2, r0, r2
   d99f2:	ea81 0303 	eor.w	r3, r1, r3
   d99f6:	2d36      	cmp	r5, #54	; 0x36
   d99f8:	bf88      	it	hi
   d99fa:	bd30      	pophi	{r4, r5, pc}
   d99fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9a00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9a04:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9a08:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9a0c:	d002      	beq.n	d9a14 <__adddf3+0x70>
   d9a0e:	4240      	negs	r0, r0
   d9a10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9a14:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9a18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9a1c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9a20:	d002      	beq.n	d9a28 <__adddf3+0x84>
   d9a22:	4252      	negs	r2, r2
   d9a24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9a28:	ea94 0f05 	teq	r4, r5
   d9a2c:	f000 80a7 	beq.w	d9b7e <__adddf3+0x1da>
   d9a30:	f1a4 0401 	sub.w	r4, r4, #1
   d9a34:	f1d5 0e20 	rsbs	lr, r5, #32
   d9a38:	db0d      	blt.n	d9a56 <__adddf3+0xb2>
   d9a3a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9a3e:	fa22 f205 	lsr.w	r2, r2, r5
   d9a42:	1880      	adds	r0, r0, r2
   d9a44:	f141 0100 	adc.w	r1, r1, #0
   d9a48:	fa03 f20e 	lsl.w	r2, r3, lr
   d9a4c:	1880      	adds	r0, r0, r2
   d9a4e:	fa43 f305 	asr.w	r3, r3, r5
   d9a52:	4159      	adcs	r1, r3
   d9a54:	e00e      	b.n	d9a74 <__adddf3+0xd0>
   d9a56:	f1a5 0520 	sub.w	r5, r5, #32
   d9a5a:	f10e 0e20 	add.w	lr, lr, #32
   d9a5e:	2a01      	cmp	r2, #1
   d9a60:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9a64:	bf28      	it	cs
   d9a66:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9a6a:	fa43 f305 	asr.w	r3, r3, r5
   d9a6e:	18c0      	adds	r0, r0, r3
   d9a70:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9a74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9a78:	d507      	bpl.n	d9a8a <__adddf3+0xe6>
   d9a7a:	f04f 0e00 	mov.w	lr, #0
   d9a7e:	f1dc 0c00 	rsbs	ip, ip, #0
   d9a82:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9a86:	eb6e 0101 	sbc.w	r1, lr, r1
   d9a8a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9a8e:	d31b      	bcc.n	d9ac8 <__adddf3+0x124>
   d9a90:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9a94:	d30c      	bcc.n	d9ab0 <__adddf3+0x10c>
   d9a96:	0849      	lsrs	r1, r1, #1
   d9a98:	ea5f 0030 	movs.w	r0, r0, rrx
   d9a9c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9aa0:	f104 0401 	add.w	r4, r4, #1
   d9aa4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9aa8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9aac:	f080 809a 	bcs.w	d9be4 <__adddf3+0x240>
   d9ab0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9ab4:	bf08      	it	eq
   d9ab6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9aba:	f150 0000 	adcs.w	r0, r0, #0
   d9abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9ac2:	ea41 0105 	orr.w	r1, r1, r5
   d9ac6:	bd30      	pop	{r4, r5, pc}
   d9ac8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9acc:	4140      	adcs	r0, r0
   d9ace:	eb41 0101 	adc.w	r1, r1, r1
   d9ad2:	3c01      	subs	r4, #1
   d9ad4:	bf28      	it	cs
   d9ad6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d9ada:	d2e9      	bcs.n	d9ab0 <__adddf3+0x10c>
   d9adc:	f091 0f00 	teq	r1, #0
   d9ae0:	bf04      	itt	eq
   d9ae2:	4601      	moveq	r1, r0
   d9ae4:	2000      	moveq	r0, #0
   d9ae6:	fab1 f381 	clz	r3, r1
   d9aea:	bf08      	it	eq
   d9aec:	3320      	addeq	r3, #32
   d9aee:	f1a3 030b 	sub.w	r3, r3, #11
   d9af2:	f1b3 0220 	subs.w	r2, r3, #32
   d9af6:	da0c      	bge.n	d9b12 <__adddf3+0x16e>
   d9af8:	320c      	adds	r2, #12
   d9afa:	dd08      	ble.n	d9b0e <__adddf3+0x16a>
   d9afc:	f102 0c14 	add.w	ip, r2, #20
   d9b00:	f1c2 020c 	rsb	r2, r2, #12
   d9b04:	fa01 f00c 	lsl.w	r0, r1, ip
   d9b08:	fa21 f102 	lsr.w	r1, r1, r2
   d9b0c:	e00c      	b.n	d9b28 <__adddf3+0x184>
   d9b0e:	f102 0214 	add.w	r2, r2, #20
   d9b12:	bfd8      	it	le
   d9b14:	f1c2 0c20 	rsble	ip, r2, #32
   d9b18:	fa01 f102 	lsl.w	r1, r1, r2
   d9b1c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9b20:	bfdc      	itt	le
   d9b22:	ea41 010c 	orrle.w	r1, r1, ip
   d9b26:	4090      	lslle	r0, r2
   d9b28:	1ae4      	subs	r4, r4, r3
   d9b2a:	bfa2      	ittt	ge
   d9b2c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9b30:	4329      	orrge	r1, r5
   d9b32:	bd30      	popge	{r4, r5, pc}
   d9b34:	ea6f 0404 	mvn.w	r4, r4
   d9b38:	3c1f      	subs	r4, #31
   d9b3a:	da1c      	bge.n	d9b76 <__adddf3+0x1d2>
   d9b3c:	340c      	adds	r4, #12
   d9b3e:	dc0e      	bgt.n	d9b5e <__adddf3+0x1ba>
   d9b40:	f104 0414 	add.w	r4, r4, #20
   d9b44:	f1c4 0220 	rsb	r2, r4, #32
   d9b48:	fa20 f004 	lsr.w	r0, r0, r4
   d9b4c:	fa01 f302 	lsl.w	r3, r1, r2
   d9b50:	ea40 0003 	orr.w	r0, r0, r3
   d9b54:	fa21 f304 	lsr.w	r3, r1, r4
   d9b58:	ea45 0103 	orr.w	r1, r5, r3
   d9b5c:	bd30      	pop	{r4, r5, pc}
   d9b5e:	f1c4 040c 	rsb	r4, r4, #12
   d9b62:	f1c4 0220 	rsb	r2, r4, #32
   d9b66:	fa20 f002 	lsr.w	r0, r0, r2
   d9b6a:	fa01 f304 	lsl.w	r3, r1, r4
   d9b6e:	ea40 0003 	orr.w	r0, r0, r3
   d9b72:	4629      	mov	r1, r5
   d9b74:	bd30      	pop	{r4, r5, pc}
   d9b76:	fa21 f004 	lsr.w	r0, r1, r4
   d9b7a:	4629      	mov	r1, r5
   d9b7c:	bd30      	pop	{r4, r5, pc}
   d9b7e:	f094 0f00 	teq	r4, #0
   d9b82:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9b86:	bf06      	itte	eq
   d9b88:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9b8c:	3401      	addeq	r4, #1
   d9b8e:	3d01      	subne	r5, #1
   d9b90:	e74e      	b.n	d9a30 <__adddf3+0x8c>
   d9b92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9b96:	bf18      	it	ne
   d9b98:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9b9c:	d029      	beq.n	d9bf2 <__adddf3+0x24e>
   d9b9e:	ea94 0f05 	teq	r4, r5
   d9ba2:	bf08      	it	eq
   d9ba4:	ea90 0f02 	teqeq	r0, r2
   d9ba8:	d005      	beq.n	d9bb6 <__adddf3+0x212>
   d9baa:	ea54 0c00 	orrs.w	ip, r4, r0
   d9bae:	bf04      	itt	eq
   d9bb0:	4619      	moveq	r1, r3
   d9bb2:	4610      	moveq	r0, r2
   d9bb4:	bd30      	pop	{r4, r5, pc}
   d9bb6:	ea91 0f03 	teq	r1, r3
   d9bba:	bf1e      	ittt	ne
   d9bbc:	2100      	movne	r1, #0
   d9bbe:	2000      	movne	r0, #0
   d9bc0:	bd30      	popne	{r4, r5, pc}
   d9bc2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9bc6:	d105      	bne.n	d9bd4 <__adddf3+0x230>
   d9bc8:	0040      	lsls	r0, r0, #1
   d9bca:	4149      	adcs	r1, r1
   d9bcc:	bf28      	it	cs
   d9bce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9bd2:	bd30      	pop	{r4, r5, pc}
   d9bd4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9bd8:	bf3c      	itt	cc
   d9bda:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9bde:	bd30      	popcc	{r4, r5, pc}
   d9be0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9be4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9be8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9bec:	f04f 0000 	mov.w	r0, #0
   d9bf0:	bd30      	pop	{r4, r5, pc}
   d9bf2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9bf6:	bf1a      	itte	ne
   d9bf8:	4619      	movne	r1, r3
   d9bfa:	4610      	movne	r0, r2
   d9bfc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9c00:	bf1c      	itt	ne
   d9c02:	460b      	movne	r3, r1
   d9c04:	4602      	movne	r2, r0
   d9c06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9c0a:	bf06      	itte	eq
   d9c0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9c10:	ea91 0f03 	teqeq	r1, r3
   d9c14:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9c18:	bd30      	pop	{r4, r5, pc}
   d9c1a:	bf00      	nop

000d9c1c <__aeabi_ui2d>:
   d9c1c:	f090 0f00 	teq	r0, #0
   d9c20:	bf04      	itt	eq
   d9c22:	2100      	moveq	r1, #0
   d9c24:	4770      	bxeq	lr
   d9c26:	b530      	push	{r4, r5, lr}
   d9c28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9c2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9c30:	f04f 0500 	mov.w	r5, #0
   d9c34:	f04f 0100 	mov.w	r1, #0
   d9c38:	e750      	b.n	d9adc <__adddf3+0x138>
   d9c3a:	bf00      	nop

000d9c3c <__aeabi_i2d>:
   d9c3c:	f090 0f00 	teq	r0, #0
   d9c40:	bf04      	itt	eq
   d9c42:	2100      	moveq	r1, #0
   d9c44:	4770      	bxeq	lr
   d9c46:	b530      	push	{r4, r5, lr}
   d9c48:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9c4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9c50:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9c54:	bf48      	it	mi
   d9c56:	4240      	negmi	r0, r0
   d9c58:	f04f 0100 	mov.w	r1, #0
   d9c5c:	e73e      	b.n	d9adc <__adddf3+0x138>
   d9c5e:	bf00      	nop

000d9c60 <__aeabi_f2d>:
   d9c60:	0042      	lsls	r2, r0, #1
   d9c62:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9c66:	ea4f 0131 	mov.w	r1, r1, rrx
   d9c6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9c6e:	bf1f      	itttt	ne
   d9c70:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9c74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9c78:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9c7c:	4770      	bxne	lr
   d9c7e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9c82:	bf08      	it	eq
   d9c84:	4770      	bxeq	lr
   d9c86:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9c8a:	bf04      	itt	eq
   d9c8c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9c90:	4770      	bxeq	lr
   d9c92:	b530      	push	{r4, r5, lr}
   d9c94:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9c9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9ca0:	e71c      	b.n	d9adc <__adddf3+0x138>
   d9ca2:	bf00      	nop

000d9ca4 <__aeabi_ul2d>:
   d9ca4:	ea50 0201 	orrs.w	r2, r0, r1
   d9ca8:	bf08      	it	eq
   d9caa:	4770      	bxeq	lr
   d9cac:	b530      	push	{r4, r5, lr}
   d9cae:	f04f 0500 	mov.w	r5, #0
   d9cb2:	e00a      	b.n	d9cca <__aeabi_l2d+0x16>

000d9cb4 <__aeabi_l2d>:
   d9cb4:	ea50 0201 	orrs.w	r2, r0, r1
   d9cb8:	bf08      	it	eq
   d9cba:	4770      	bxeq	lr
   d9cbc:	b530      	push	{r4, r5, lr}
   d9cbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9cc2:	d502      	bpl.n	d9cca <__aeabi_l2d+0x16>
   d9cc4:	4240      	negs	r0, r0
   d9cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9cca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9cce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9cd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9cd6:	f43f aed8 	beq.w	d9a8a <__adddf3+0xe6>
   d9cda:	f04f 0203 	mov.w	r2, #3
   d9cde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9ce2:	bf18      	it	ne
   d9ce4:	3203      	addne	r2, #3
   d9ce6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9cea:	bf18      	it	ne
   d9cec:	3203      	addne	r2, #3
   d9cee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9cf2:	f1c2 0320 	rsb	r3, r2, #32
   d9cf6:	fa00 fc03 	lsl.w	ip, r0, r3
   d9cfa:	fa20 f002 	lsr.w	r0, r0, r2
   d9cfe:	fa01 fe03 	lsl.w	lr, r1, r3
   d9d02:	ea40 000e 	orr.w	r0, r0, lr
   d9d06:	fa21 f102 	lsr.w	r1, r1, r2
   d9d0a:	4414      	add	r4, r2
   d9d0c:	e6bd      	b.n	d9a8a <__adddf3+0xe6>
   d9d0e:	bf00      	nop

000d9d10 <__aeabi_dmul>:
   d9d10:	b570      	push	{r4, r5, r6, lr}
   d9d12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9d16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9d1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9d1e:	bf1d      	ittte	ne
   d9d20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9d24:	ea94 0f0c 	teqne	r4, ip
   d9d28:	ea95 0f0c 	teqne	r5, ip
   d9d2c:	f000 f8de 	bleq	d9eec <__aeabi_dmul+0x1dc>
   d9d30:	442c      	add	r4, r5
   d9d32:	ea81 0603 	eor.w	r6, r1, r3
   d9d36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9d3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9d3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9d42:	bf18      	it	ne
   d9d44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9d48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9d50:	d038      	beq.n	d9dc4 <__aeabi_dmul+0xb4>
   d9d52:	fba0 ce02 	umull	ip, lr, r0, r2
   d9d56:	f04f 0500 	mov.w	r5, #0
   d9d5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9d5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9d62:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9d66:	f04f 0600 	mov.w	r6, #0
   d9d6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9d6e:	f09c 0f00 	teq	ip, #0
   d9d72:	bf18      	it	ne
   d9d74:	f04e 0e01 	orrne.w	lr, lr, #1
   d9d78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9d7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9d80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9d84:	d204      	bcs.n	d9d90 <__aeabi_dmul+0x80>
   d9d86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9d8a:	416d      	adcs	r5, r5
   d9d8c:	eb46 0606 	adc.w	r6, r6, r6
   d9d90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9d94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9d98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9d9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9da0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9da4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9da8:	bf88      	it	hi
   d9daa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9dae:	d81e      	bhi.n	d9dee <__aeabi_dmul+0xde>
   d9db0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9db4:	bf08      	it	eq
   d9db6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9dba:	f150 0000 	adcs.w	r0, r0, #0
   d9dbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9dc2:	bd70      	pop	{r4, r5, r6, pc}
   d9dc4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9dc8:	ea46 0101 	orr.w	r1, r6, r1
   d9dcc:	ea40 0002 	orr.w	r0, r0, r2
   d9dd0:	ea81 0103 	eor.w	r1, r1, r3
   d9dd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9dd8:	bfc2      	ittt	gt
   d9dda:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9dde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9de2:	bd70      	popgt	{r4, r5, r6, pc}
   d9de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9de8:	f04f 0e00 	mov.w	lr, #0
   d9dec:	3c01      	subs	r4, #1
   d9dee:	f300 80ab 	bgt.w	d9f48 <__aeabi_dmul+0x238>
   d9df2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9df6:	bfde      	ittt	le
   d9df8:	2000      	movle	r0, #0
   d9dfa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9dfe:	bd70      	pople	{r4, r5, r6, pc}
   d9e00:	f1c4 0400 	rsb	r4, r4, #0
   d9e04:	3c20      	subs	r4, #32
   d9e06:	da35      	bge.n	d9e74 <__aeabi_dmul+0x164>
   d9e08:	340c      	adds	r4, #12
   d9e0a:	dc1b      	bgt.n	d9e44 <__aeabi_dmul+0x134>
   d9e0c:	f104 0414 	add.w	r4, r4, #20
   d9e10:	f1c4 0520 	rsb	r5, r4, #32
   d9e14:	fa00 f305 	lsl.w	r3, r0, r5
   d9e18:	fa20 f004 	lsr.w	r0, r0, r4
   d9e1c:	fa01 f205 	lsl.w	r2, r1, r5
   d9e20:	ea40 0002 	orr.w	r0, r0, r2
   d9e24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9e28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9e2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9e30:	fa21 f604 	lsr.w	r6, r1, r4
   d9e34:	eb42 0106 	adc.w	r1, r2, r6
   d9e38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9e3c:	bf08      	it	eq
   d9e3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9e42:	bd70      	pop	{r4, r5, r6, pc}
   d9e44:	f1c4 040c 	rsb	r4, r4, #12
   d9e48:	f1c4 0520 	rsb	r5, r4, #32
   d9e4c:	fa00 f304 	lsl.w	r3, r0, r4
   d9e50:	fa20 f005 	lsr.w	r0, r0, r5
   d9e54:	fa01 f204 	lsl.w	r2, r1, r4
   d9e58:	ea40 0002 	orr.w	r0, r0, r2
   d9e5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9e60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9e64:	f141 0100 	adc.w	r1, r1, #0
   d9e68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9e6c:	bf08      	it	eq
   d9e6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9e72:	bd70      	pop	{r4, r5, r6, pc}
   d9e74:	f1c4 0520 	rsb	r5, r4, #32
   d9e78:	fa00 f205 	lsl.w	r2, r0, r5
   d9e7c:	ea4e 0e02 	orr.w	lr, lr, r2
   d9e80:	fa20 f304 	lsr.w	r3, r0, r4
   d9e84:	fa01 f205 	lsl.w	r2, r1, r5
   d9e88:	ea43 0302 	orr.w	r3, r3, r2
   d9e8c:	fa21 f004 	lsr.w	r0, r1, r4
   d9e90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9e94:	fa21 f204 	lsr.w	r2, r1, r4
   d9e98:	ea20 0002 	bic.w	r0, r0, r2
   d9e9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9ea0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ea4:	bf08      	it	eq
   d9ea6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9eaa:	bd70      	pop	{r4, r5, r6, pc}
   d9eac:	f094 0f00 	teq	r4, #0
   d9eb0:	d10f      	bne.n	d9ed2 <__aeabi_dmul+0x1c2>
   d9eb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9eb6:	0040      	lsls	r0, r0, #1
   d9eb8:	eb41 0101 	adc.w	r1, r1, r1
   d9ebc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9ec0:	bf08      	it	eq
   d9ec2:	3c01      	subeq	r4, #1
   d9ec4:	d0f7      	beq.n	d9eb6 <__aeabi_dmul+0x1a6>
   d9ec6:	ea41 0106 	orr.w	r1, r1, r6
   d9eca:	f095 0f00 	teq	r5, #0
   d9ece:	bf18      	it	ne
   d9ed0:	4770      	bxne	lr
   d9ed2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9ed6:	0052      	lsls	r2, r2, #1
   d9ed8:	eb43 0303 	adc.w	r3, r3, r3
   d9edc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9ee0:	bf08      	it	eq
   d9ee2:	3d01      	subeq	r5, #1
   d9ee4:	d0f7      	beq.n	d9ed6 <__aeabi_dmul+0x1c6>
   d9ee6:	ea43 0306 	orr.w	r3, r3, r6
   d9eea:	4770      	bx	lr
   d9eec:	ea94 0f0c 	teq	r4, ip
   d9ef0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9ef4:	bf18      	it	ne
   d9ef6:	ea95 0f0c 	teqne	r5, ip
   d9efa:	d00c      	beq.n	d9f16 <__aeabi_dmul+0x206>
   d9efc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f00:	bf18      	it	ne
   d9f02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f06:	d1d1      	bne.n	d9eac <__aeabi_dmul+0x19c>
   d9f08:	ea81 0103 	eor.w	r1, r1, r3
   d9f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9f10:	f04f 0000 	mov.w	r0, #0
   d9f14:	bd70      	pop	{r4, r5, r6, pc}
   d9f16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f1a:	bf06      	itte	eq
   d9f1c:	4610      	moveq	r0, r2
   d9f1e:	4619      	moveq	r1, r3
   d9f20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f24:	d019      	beq.n	d9f5a <__aeabi_dmul+0x24a>
   d9f26:	ea94 0f0c 	teq	r4, ip
   d9f2a:	d102      	bne.n	d9f32 <__aeabi_dmul+0x222>
   d9f2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9f30:	d113      	bne.n	d9f5a <__aeabi_dmul+0x24a>
   d9f32:	ea95 0f0c 	teq	r5, ip
   d9f36:	d105      	bne.n	d9f44 <__aeabi_dmul+0x234>
   d9f38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9f3c:	bf1c      	itt	ne
   d9f3e:	4610      	movne	r0, r2
   d9f40:	4619      	movne	r1, r3
   d9f42:	d10a      	bne.n	d9f5a <__aeabi_dmul+0x24a>
   d9f44:	ea81 0103 	eor.w	r1, r1, r3
   d9f48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9f4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9f50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9f54:	f04f 0000 	mov.w	r0, #0
   d9f58:	bd70      	pop	{r4, r5, r6, pc}
   d9f5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9f5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9f62:	bd70      	pop	{r4, r5, r6, pc}

000d9f64 <__aeabi_ddiv>:
   d9f64:	b570      	push	{r4, r5, r6, lr}
   d9f66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9f6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9f6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9f72:	bf1d      	ittte	ne
   d9f74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9f78:	ea94 0f0c 	teqne	r4, ip
   d9f7c:	ea95 0f0c 	teqne	r5, ip
   d9f80:	f000 f8a7 	bleq	da0d2 <__aeabi_ddiv+0x16e>
   d9f84:	eba4 0405 	sub.w	r4, r4, r5
   d9f88:	ea81 0e03 	eor.w	lr, r1, r3
   d9f8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9f90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9f94:	f000 8088 	beq.w	da0a8 <__aeabi_ddiv+0x144>
   d9f98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9f9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9fa0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9fa4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9fa8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9fac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9fb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9fb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9fb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9fbc:	429d      	cmp	r5, r3
   d9fbe:	bf08      	it	eq
   d9fc0:	4296      	cmpeq	r6, r2
   d9fc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9fc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9fca:	d202      	bcs.n	d9fd2 <__aeabi_ddiv+0x6e>
   d9fcc:	085b      	lsrs	r3, r3, #1
   d9fce:	ea4f 0232 	mov.w	r2, r2, rrx
   d9fd2:	1ab6      	subs	r6, r6, r2
   d9fd4:	eb65 0503 	sbc.w	r5, r5, r3
   d9fd8:	085b      	lsrs	r3, r3, #1
   d9fda:	ea4f 0232 	mov.w	r2, r2, rrx
   d9fde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9fe2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9fe6:	ebb6 0e02 	subs.w	lr, r6, r2
   d9fea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9fee:	bf22      	ittt	cs
   d9ff0:	1ab6      	subcs	r6, r6, r2
   d9ff2:	4675      	movcs	r5, lr
   d9ff4:	ea40 000c 	orrcs.w	r0, r0, ip
   d9ff8:	085b      	lsrs	r3, r3, #1
   d9ffa:	ea4f 0232 	mov.w	r2, r2, rrx
   d9ffe:	ebb6 0e02 	subs.w	lr, r6, r2
   da002:	eb75 0e03 	sbcs.w	lr, r5, r3
   da006:	bf22      	ittt	cs
   da008:	1ab6      	subcs	r6, r6, r2
   da00a:	4675      	movcs	r5, lr
   da00c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da010:	085b      	lsrs	r3, r3, #1
   da012:	ea4f 0232 	mov.w	r2, r2, rrx
   da016:	ebb6 0e02 	subs.w	lr, r6, r2
   da01a:	eb75 0e03 	sbcs.w	lr, r5, r3
   da01e:	bf22      	ittt	cs
   da020:	1ab6      	subcs	r6, r6, r2
   da022:	4675      	movcs	r5, lr
   da024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da028:	085b      	lsrs	r3, r3, #1
   da02a:	ea4f 0232 	mov.w	r2, r2, rrx
   da02e:	ebb6 0e02 	subs.w	lr, r6, r2
   da032:	eb75 0e03 	sbcs.w	lr, r5, r3
   da036:	bf22      	ittt	cs
   da038:	1ab6      	subcs	r6, r6, r2
   da03a:	4675      	movcs	r5, lr
   da03c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da040:	ea55 0e06 	orrs.w	lr, r5, r6
   da044:	d018      	beq.n	da078 <__aeabi_ddiv+0x114>
   da046:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da04a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da04e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da052:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da056:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da05a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da05e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da062:	d1c0      	bne.n	d9fe6 <__aeabi_ddiv+0x82>
   da064:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da068:	d10b      	bne.n	da082 <__aeabi_ddiv+0x11e>
   da06a:	ea41 0100 	orr.w	r1, r1, r0
   da06e:	f04f 0000 	mov.w	r0, #0
   da072:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da076:	e7b6      	b.n	d9fe6 <__aeabi_ddiv+0x82>
   da078:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da07c:	bf04      	itt	eq
   da07e:	4301      	orreq	r1, r0
   da080:	2000      	moveq	r0, #0
   da082:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da086:	bf88      	it	hi
   da088:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da08c:	f63f aeaf 	bhi.w	d9dee <__aeabi_dmul+0xde>
   da090:	ebb5 0c03 	subs.w	ip, r5, r3
   da094:	bf04      	itt	eq
   da096:	ebb6 0c02 	subseq.w	ip, r6, r2
   da09a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da09e:	f150 0000 	adcs.w	r0, r0, #0
   da0a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da0a6:	bd70      	pop	{r4, r5, r6, pc}
   da0a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da0ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da0b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da0b4:	bfc2      	ittt	gt
   da0b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   da0ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da0be:	bd70      	popgt	{r4, r5, r6, pc}
   da0c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da0c4:	f04f 0e00 	mov.w	lr, #0
   da0c8:	3c01      	subs	r4, #1
   da0ca:	e690      	b.n	d9dee <__aeabi_dmul+0xde>
   da0cc:	ea45 0e06 	orr.w	lr, r5, r6
   da0d0:	e68d      	b.n	d9dee <__aeabi_dmul+0xde>
   da0d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da0d6:	ea94 0f0c 	teq	r4, ip
   da0da:	bf08      	it	eq
   da0dc:	ea95 0f0c 	teqeq	r5, ip
   da0e0:	f43f af3b 	beq.w	d9f5a <__aeabi_dmul+0x24a>
   da0e4:	ea94 0f0c 	teq	r4, ip
   da0e8:	d10a      	bne.n	da100 <__aeabi_ddiv+0x19c>
   da0ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da0ee:	f47f af34 	bne.w	d9f5a <__aeabi_dmul+0x24a>
   da0f2:	ea95 0f0c 	teq	r5, ip
   da0f6:	f47f af25 	bne.w	d9f44 <__aeabi_dmul+0x234>
   da0fa:	4610      	mov	r0, r2
   da0fc:	4619      	mov	r1, r3
   da0fe:	e72c      	b.n	d9f5a <__aeabi_dmul+0x24a>
   da100:	ea95 0f0c 	teq	r5, ip
   da104:	d106      	bne.n	da114 <__aeabi_ddiv+0x1b0>
   da106:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da10a:	f43f aefd 	beq.w	d9f08 <__aeabi_dmul+0x1f8>
   da10e:	4610      	mov	r0, r2
   da110:	4619      	mov	r1, r3
   da112:	e722      	b.n	d9f5a <__aeabi_dmul+0x24a>
   da114:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da118:	bf18      	it	ne
   da11a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da11e:	f47f aec5 	bne.w	d9eac <__aeabi_dmul+0x19c>
   da122:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da126:	f47f af0d 	bne.w	d9f44 <__aeabi_dmul+0x234>
   da12a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da12e:	f47f aeeb 	bne.w	d9f08 <__aeabi_dmul+0x1f8>
   da132:	e712      	b.n	d9f5a <__aeabi_dmul+0x24a>

000da134 <__gedf2>:
   da134:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da138:	e006      	b.n	da148 <__cmpdf2+0x4>
   da13a:	bf00      	nop

000da13c <__ledf2>:
   da13c:	f04f 0c01 	mov.w	ip, #1
   da140:	e002      	b.n	da148 <__cmpdf2+0x4>
   da142:	bf00      	nop

000da144 <__cmpdf2>:
   da144:	f04f 0c01 	mov.w	ip, #1
   da148:	f84d cd04 	str.w	ip, [sp, #-4]!
   da14c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da150:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da154:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da158:	bf18      	it	ne
   da15a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da15e:	d01b      	beq.n	da198 <__cmpdf2+0x54>
   da160:	b001      	add	sp, #4
   da162:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da166:	bf0c      	ite	eq
   da168:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da16c:	ea91 0f03 	teqne	r1, r3
   da170:	bf02      	ittt	eq
   da172:	ea90 0f02 	teqeq	r0, r2
   da176:	2000      	moveq	r0, #0
   da178:	4770      	bxeq	lr
   da17a:	f110 0f00 	cmn.w	r0, #0
   da17e:	ea91 0f03 	teq	r1, r3
   da182:	bf58      	it	pl
   da184:	4299      	cmppl	r1, r3
   da186:	bf08      	it	eq
   da188:	4290      	cmpeq	r0, r2
   da18a:	bf2c      	ite	cs
   da18c:	17d8      	asrcs	r0, r3, #31
   da18e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da192:	f040 0001 	orr.w	r0, r0, #1
   da196:	4770      	bx	lr
   da198:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da19c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1a0:	d102      	bne.n	da1a8 <__cmpdf2+0x64>
   da1a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da1a6:	d107      	bne.n	da1b8 <__cmpdf2+0x74>
   da1a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da1ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1b0:	d1d6      	bne.n	da160 <__cmpdf2+0x1c>
   da1b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da1b6:	d0d3      	beq.n	da160 <__cmpdf2+0x1c>
   da1b8:	f85d 0b04 	ldr.w	r0, [sp], #4
   da1bc:	4770      	bx	lr
   da1be:	bf00      	nop

000da1c0 <__aeabi_cdrcmple>:
   da1c0:	4684      	mov	ip, r0
   da1c2:	4610      	mov	r0, r2
   da1c4:	4662      	mov	r2, ip
   da1c6:	468c      	mov	ip, r1
   da1c8:	4619      	mov	r1, r3
   da1ca:	4663      	mov	r3, ip
   da1cc:	e000      	b.n	da1d0 <__aeabi_cdcmpeq>
   da1ce:	bf00      	nop

000da1d0 <__aeabi_cdcmpeq>:
   da1d0:	b501      	push	{r0, lr}
   da1d2:	f7ff ffb7 	bl	da144 <__cmpdf2>
   da1d6:	2800      	cmp	r0, #0
   da1d8:	bf48      	it	mi
   da1da:	f110 0f00 	cmnmi.w	r0, #0
   da1de:	bd01      	pop	{r0, pc}

000da1e0 <__aeabi_dcmpeq>:
   da1e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   da1e4:	f7ff fff4 	bl	da1d0 <__aeabi_cdcmpeq>
   da1e8:	bf0c      	ite	eq
   da1ea:	2001      	moveq	r0, #1
   da1ec:	2000      	movne	r0, #0
   da1ee:	f85d fb08 	ldr.w	pc, [sp], #8
   da1f2:	bf00      	nop

000da1f4 <__aeabi_dcmplt>:
   da1f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   da1f8:	f7ff ffea 	bl	da1d0 <__aeabi_cdcmpeq>
   da1fc:	bf34      	ite	cc
   da1fe:	2001      	movcc	r0, #1
   da200:	2000      	movcs	r0, #0
   da202:	f85d fb08 	ldr.w	pc, [sp], #8
   da206:	bf00      	nop

000da208 <__aeabi_dcmple>:
   da208:	f84d ed08 	str.w	lr, [sp, #-8]!
   da20c:	f7ff ffe0 	bl	da1d0 <__aeabi_cdcmpeq>
   da210:	bf94      	ite	ls
   da212:	2001      	movls	r0, #1
   da214:	2000      	movhi	r0, #0
   da216:	f85d fb08 	ldr.w	pc, [sp], #8
   da21a:	bf00      	nop

000da21c <__aeabi_dcmpge>:
   da21c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da220:	f7ff ffce 	bl	da1c0 <__aeabi_cdrcmple>
   da224:	bf94      	ite	ls
   da226:	2001      	movls	r0, #1
   da228:	2000      	movhi	r0, #0
   da22a:	f85d fb08 	ldr.w	pc, [sp], #8
   da22e:	bf00      	nop

000da230 <__aeabi_dcmpgt>:
   da230:	f84d ed08 	str.w	lr, [sp, #-8]!
   da234:	f7ff ffc4 	bl	da1c0 <__aeabi_cdrcmple>
   da238:	bf34      	ite	cc
   da23a:	2001      	movcc	r0, #1
   da23c:	2000      	movcs	r0, #0
   da23e:	f85d fb08 	ldr.w	pc, [sp], #8
   da242:	bf00      	nop

000da244 <__aeabi_dcmpun>:
   da244:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da248:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da24c:	d102      	bne.n	da254 <__aeabi_dcmpun+0x10>
   da24e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da252:	d10a      	bne.n	da26a <__aeabi_dcmpun+0x26>
   da254:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da258:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da25c:	d102      	bne.n	da264 <__aeabi_dcmpun+0x20>
   da25e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da262:	d102      	bne.n	da26a <__aeabi_dcmpun+0x26>
   da264:	f04f 0000 	mov.w	r0, #0
   da268:	4770      	bx	lr
   da26a:	f04f 0001 	mov.w	r0, #1
   da26e:	4770      	bx	lr

000da270 <__aeabi_d2iz>:
   da270:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da274:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da278:	d215      	bcs.n	da2a6 <__aeabi_d2iz+0x36>
   da27a:	d511      	bpl.n	da2a0 <__aeabi_d2iz+0x30>
   da27c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da280:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da284:	d912      	bls.n	da2ac <__aeabi_d2iz+0x3c>
   da286:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da28a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da28e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da292:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da296:	fa23 f002 	lsr.w	r0, r3, r2
   da29a:	bf18      	it	ne
   da29c:	4240      	negne	r0, r0
   da29e:	4770      	bx	lr
   da2a0:	f04f 0000 	mov.w	r0, #0
   da2a4:	4770      	bx	lr
   da2a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da2aa:	d105      	bne.n	da2b8 <__aeabi_d2iz+0x48>
   da2ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da2b0:	bf08      	it	eq
   da2b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da2b6:	4770      	bx	lr
   da2b8:	f04f 0000 	mov.w	r0, #0
   da2bc:	4770      	bx	lr
   da2be:	bf00      	nop

000da2c0 <__aeabi_d2uiz>:
   da2c0:	004a      	lsls	r2, r1, #1
   da2c2:	d211      	bcs.n	da2e8 <__aeabi_d2uiz+0x28>
   da2c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da2c8:	d211      	bcs.n	da2ee <__aeabi_d2uiz+0x2e>
   da2ca:	d50d      	bpl.n	da2e8 <__aeabi_d2uiz+0x28>
   da2cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da2d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da2d4:	d40e      	bmi.n	da2f4 <__aeabi_d2uiz+0x34>
   da2d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da2da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da2de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da2e2:	fa23 f002 	lsr.w	r0, r3, r2
   da2e6:	4770      	bx	lr
   da2e8:	f04f 0000 	mov.w	r0, #0
   da2ec:	4770      	bx	lr
   da2ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da2f2:	d102      	bne.n	da2fa <__aeabi_d2uiz+0x3a>
   da2f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da2f8:	4770      	bx	lr
   da2fa:	f04f 0000 	mov.w	r0, #0
   da2fe:	4770      	bx	lr

000da300 <__aeabi_d2f>:
   da300:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da304:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da308:	bf24      	itt	cs
   da30a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da30e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da312:	d90d      	bls.n	da330 <__aeabi_d2f+0x30>
   da314:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da318:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da31c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da320:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da324:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da328:	bf08      	it	eq
   da32a:	f020 0001 	biceq.w	r0, r0, #1
   da32e:	4770      	bx	lr
   da330:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da334:	d121      	bne.n	da37a <__aeabi_d2f+0x7a>
   da336:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da33a:	bfbc      	itt	lt
   da33c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da340:	4770      	bxlt	lr
   da342:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da346:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da34a:	f1c2 0218 	rsb	r2, r2, #24
   da34e:	f1c2 0c20 	rsb	ip, r2, #32
   da352:	fa10 f30c 	lsls.w	r3, r0, ip
   da356:	fa20 f002 	lsr.w	r0, r0, r2
   da35a:	bf18      	it	ne
   da35c:	f040 0001 	orrne.w	r0, r0, #1
   da360:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da364:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da368:	fa03 fc0c 	lsl.w	ip, r3, ip
   da36c:	ea40 000c 	orr.w	r0, r0, ip
   da370:	fa23 f302 	lsr.w	r3, r3, r2
   da374:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da378:	e7cc      	b.n	da314 <__aeabi_d2f+0x14>
   da37a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da37e:	d107      	bne.n	da390 <__aeabi_d2f+0x90>
   da380:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da384:	bf1e      	ittt	ne
   da386:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da38a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da38e:	4770      	bxne	lr
   da390:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da394:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da39c:	4770      	bx	lr
   da39e:	bf00      	nop

000da3a0 <__aeabi_f2lz>:
   da3a0:	ee07 0a90 	vmov	s15, r0
   da3a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   da3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da3ac:	d401      	bmi.n	da3b2 <__aeabi_f2lz+0x12>
   da3ae:	f000 b80b 	b.w	da3c8 <__aeabi_f2ulz>
   da3b2:	eef1 7a67 	vneg.f32	s15, s15
   da3b6:	b508      	push	{r3, lr}
   da3b8:	ee17 0a90 	vmov	r0, s15
   da3bc:	f000 f804 	bl	da3c8 <__aeabi_f2ulz>
   da3c0:	4240      	negs	r0, r0
   da3c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da3c6:	bd08      	pop	{r3, pc}

000da3c8 <__aeabi_f2ulz>:
   da3c8:	b5d0      	push	{r4, r6, r7, lr}
   da3ca:	f7ff fc49 	bl	d9c60 <__aeabi_f2d>
   da3ce:	4b0c      	ldr	r3, [pc, #48]	; (da400 <__aeabi_f2ulz+0x38>)
   da3d0:	2200      	movs	r2, #0
   da3d2:	4606      	mov	r6, r0
   da3d4:	460f      	mov	r7, r1
   da3d6:	f7ff fc9b 	bl	d9d10 <__aeabi_dmul>
   da3da:	f7ff ff71 	bl	da2c0 <__aeabi_d2uiz>
   da3de:	4604      	mov	r4, r0
   da3e0:	f7ff fc1c 	bl	d9c1c <__aeabi_ui2d>
   da3e4:	4b07      	ldr	r3, [pc, #28]	; (da404 <__aeabi_f2ulz+0x3c>)
   da3e6:	2200      	movs	r2, #0
   da3e8:	f7ff fc92 	bl	d9d10 <__aeabi_dmul>
   da3ec:	4602      	mov	r2, r0
   da3ee:	460b      	mov	r3, r1
   da3f0:	4630      	mov	r0, r6
   da3f2:	4639      	mov	r1, r7
   da3f4:	f7ff fad4 	bl	d99a0 <__aeabi_dsub>
   da3f8:	f7ff ff62 	bl	da2c0 <__aeabi_d2uiz>
   da3fc:	4621      	mov	r1, r4
   da3fe:	bdd0      	pop	{r4, r6, r7, pc}
   da400:	3df00000 	.word	0x3df00000
   da404:	41f00000 	.word	0x41f00000

000da408 <__aeabi_d2ulz>:
   da408:	b5d0      	push	{r4, r6, r7, lr}
   da40a:	4b0c      	ldr	r3, [pc, #48]	; (da43c <__aeabi_d2ulz+0x34>)
   da40c:	2200      	movs	r2, #0
   da40e:	4606      	mov	r6, r0
   da410:	460f      	mov	r7, r1
   da412:	f7ff fc7d 	bl	d9d10 <__aeabi_dmul>
   da416:	f7ff ff53 	bl	da2c0 <__aeabi_d2uiz>
   da41a:	4604      	mov	r4, r0
   da41c:	f7ff fbfe 	bl	d9c1c <__aeabi_ui2d>
   da420:	4b07      	ldr	r3, [pc, #28]	; (da440 <__aeabi_d2ulz+0x38>)
   da422:	2200      	movs	r2, #0
   da424:	f7ff fc74 	bl	d9d10 <__aeabi_dmul>
   da428:	4602      	mov	r2, r0
   da42a:	460b      	mov	r3, r1
   da42c:	4630      	mov	r0, r6
   da42e:	4639      	mov	r1, r7
   da430:	f7ff fab6 	bl	d99a0 <__aeabi_dsub>
   da434:	f7ff ff44 	bl	da2c0 <__aeabi_d2uiz>
   da438:	4621      	mov	r1, r4
   da43a:	bdd0      	pop	{r4, r6, r7, pc}
   da43c:	3df00000 	.word	0x3df00000
   da440:	41f00000 	.word	0x41f00000

000da444 <asctime_r>:
   da444:	b510      	push	{r4, lr}
   da446:	460c      	mov	r4, r1
   da448:	6941      	ldr	r1, [r0, #20]
   da44a:	6903      	ldr	r3, [r0, #16]
   da44c:	6982      	ldr	r2, [r0, #24]
   da44e:	b086      	sub	sp, #24
   da450:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   da454:	9104      	str	r1, [sp, #16]
   da456:	6801      	ldr	r1, [r0, #0]
   da458:	9103      	str	r1, [sp, #12]
   da45a:	6841      	ldr	r1, [r0, #4]
   da45c:	9102      	str	r1, [sp, #8]
   da45e:	6881      	ldr	r1, [r0, #8]
   da460:	9101      	str	r1, [sp, #4]
   da462:	68c1      	ldr	r1, [r0, #12]
   da464:	9100      	str	r1, [sp, #0]
   da466:	4907      	ldr	r1, [pc, #28]	; (da484 <asctime_r+0x40>)
   da468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   da46c:	440b      	add	r3, r1
   da46e:	4906      	ldr	r1, [pc, #24]	; (da488 <asctime_r+0x44>)
   da470:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   da474:	440a      	add	r2, r1
   da476:	4620      	mov	r0, r4
   da478:	4904      	ldr	r1, [pc, #16]	; (da48c <asctime_r+0x48>)
   da47a:	f7fd fae5 	bl	d7a48 <siprintf>
   da47e:	4620      	mov	r0, r4
   da480:	b006      	add	sp, #24
   da482:	bd10      	pop	{r4, pc}
   da484:	000dd012 	.word	0x000dd012
   da488:	000dcffd 	.word	0x000dcffd
   da48c:	000dcfdd 	.word	0x000dcfdd

000da490 <atoi>:
   da490:	220a      	movs	r2, #10
   da492:	2100      	movs	r1, #0
   da494:	f000 bfca 	b.w	db42c <strtol>

000da498 <__cxa_atexit>:
   da498:	b510      	push	{r4, lr}
   da49a:	4c05      	ldr	r4, [pc, #20]	; (da4b0 <__cxa_atexit+0x18>)
   da49c:	4613      	mov	r3, r2
   da49e:	b12c      	cbz	r4, da4ac <__cxa_atexit+0x14>
   da4a0:	460a      	mov	r2, r1
   da4a2:	4601      	mov	r1, r0
   da4a4:	2002      	movs	r0, #2
   da4a6:	f3af 8000 	nop.w
   da4aa:	bd10      	pop	{r4, pc}
   da4ac:	4620      	mov	r0, r4
   da4ae:	e7fc      	b.n	da4aa <__cxa_atexit+0x12>
   da4b0:	00000000 	.word	0x00000000

000da4b4 <gmtime>:
   da4b4:	b538      	push	{r3, r4, r5, lr}
   da4b6:	4b07      	ldr	r3, [pc, #28]	; (da4d4 <gmtime+0x20>)
   da4b8:	681d      	ldr	r5, [r3, #0]
   da4ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   da4bc:	4604      	mov	r4, r0
   da4be:	b91b      	cbnz	r3, da4c8 <gmtime+0x14>
   da4c0:	2024      	movs	r0, #36	; 0x24
   da4c2:	f7fd faa9 	bl	d7a18 <malloc>
   da4c6:	63e8      	str	r0, [r5, #60]	; 0x3c
   da4c8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   da4ca:	4620      	mov	r0, r4
   da4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da4d0:	f7fd bafa 	b.w	d7ac8 <gmtime_r>
   da4d4:	2003e230 	.word	0x2003e230

000da4d8 <memcpy>:
   da4d8:	440a      	add	r2, r1
   da4da:	4291      	cmp	r1, r2
   da4dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da4e0:	d100      	bne.n	da4e4 <memcpy+0xc>
   da4e2:	4770      	bx	lr
   da4e4:	b510      	push	{r4, lr}
   da4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   da4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
   da4ee:	4291      	cmp	r1, r2
   da4f0:	d1f9      	bne.n	da4e6 <memcpy+0xe>
   da4f2:	bd10      	pop	{r4, pc}

000da4f4 <memmove>:
   da4f4:	4288      	cmp	r0, r1
   da4f6:	b510      	push	{r4, lr}
   da4f8:	eb01 0402 	add.w	r4, r1, r2
   da4fc:	d902      	bls.n	da504 <memmove+0x10>
   da4fe:	4284      	cmp	r4, r0
   da500:	4623      	mov	r3, r4
   da502:	d807      	bhi.n	da514 <memmove+0x20>
   da504:	1e43      	subs	r3, r0, #1
   da506:	42a1      	cmp	r1, r4
   da508:	d008      	beq.n	da51c <memmove+0x28>
   da50a:	f811 2b01 	ldrb.w	r2, [r1], #1
   da50e:	f803 2f01 	strb.w	r2, [r3, #1]!
   da512:	e7f8      	b.n	da506 <memmove+0x12>
   da514:	4402      	add	r2, r0
   da516:	4601      	mov	r1, r0
   da518:	428a      	cmp	r2, r1
   da51a:	d100      	bne.n	da51e <memmove+0x2a>
   da51c:	bd10      	pop	{r4, pc}
   da51e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da522:	f802 4d01 	strb.w	r4, [r2, #-1]!
   da526:	e7f7      	b.n	da518 <memmove+0x24>

000da528 <memset>:
   da528:	4402      	add	r2, r0
   da52a:	4603      	mov	r3, r0
   da52c:	4293      	cmp	r3, r2
   da52e:	d100      	bne.n	da532 <memset+0xa>
   da530:	4770      	bx	lr
   da532:	f803 1b01 	strb.w	r1, [r3], #1
   da536:	e7f9      	b.n	da52c <memset+0x4>

000da538 <srand>:
   da538:	b538      	push	{r3, r4, r5, lr}
   da53a:	4b0d      	ldr	r3, [pc, #52]	; (da570 <srand+0x38>)
   da53c:	681d      	ldr	r5, [r3, #0]
   da53e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da540:	4604      	mov	r4, r0
   da542:	b97b      	cbnz	r3, da564 <srand+0x2c>
   da544:	2018      	movs	r0, #24
   da546:	f7fd fa67 	bl	d7a18 <malloc>
   da54a:	4a0a      	ldr	r2, [pc, #40]	; (da574 <srand+0x3c>)
   da54c:	4b0a      	ldr	r3, [pc, #40]	; (da578 <srand+0x40>)
   da54e:	63a8      	str	r0, [r5, #56]	; 0x38
   da550:	e9c0 2300 	strd	r2, r3, [r0]
   da554:	4b09      	ldr	r3, [pc, #36]	; (da57c <srand+0x44>)
   da556:	6083      	str	r3, [r0, #8]
   da558:	230b      	movs	r3, #11
   da55a:	8183      	strh	r3, [r0, #12]
   da55c:	2201      	movs	r2, #1
   da55e:	2300      	movs	r3, #0
   da560:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da564:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da566:	2200      	movs	r2, #0
   da568:	611c      	str	r4, [r3, #16]
   da56a:	615a      	str	r2, [r3, #20]
   da56c:	bd38      	pop	{r3, r4, r5, pc}
   da56e:	bf00      	nop
   da570:	2003e230 	.word	0x2003e230
   da574:	abcd330e 	.word	0xabcd330e
   da578:	e66d1234 	.word	0xe66d1234
   da57c:	0005deec 	.word	0x0005deec

000da580 <strcmp>:
   da580:	f810 2b01 	ldrb.w	r2, [r0], #1
   da584:	f811 3b01 	ldrb.w	r3, [r1], #1
   da588:	2a01      	cmp	r2, #1
   da58a:	bf28      	it	cs
   da58c:	429a      	cmpcs	r2, r3
   da58e:	d0f7      	beq.n	da580 <strcmp>
   da590:	1ad0      	subs	r0, r2, r3
   da592:	4770      	bx	lr

000da594 <strcpy>:
   da594:	4603      	mov	r3, r0
   da596:	f811 2b01 	ldrb.w	r2, [r1], #1
   da59a:	f803 2b01 	strb.w	r2, [r3], #1
   da59e:	2a00      	cmp	r2, #0
   da5a0:	d1f9      	bne.n	da596 <strcpy+0x2>
   da5a2:	4770      	bx	lr

000da5a4 <strdup>:
   da5a4:	4b02      	ldr	r3, [pc, #8]	; (da5b0 <strdup+0xc>)
   da5a6:	4601      	mov	r1, r0
   da5a8:	6818      	ldr	r0, [r3, #0]
   da5aa:	f000 b803 	b.w	da5b4 <_strdup_r>
   da5ae:	bf00      	nop
   da5b0:	2003e230 	.word	0x2003e230

000da5b4 <_strdup_r>:
   da5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da5b6:	4604      	mov	r4, r0
   da5b8:	4608      	mov	r0, r1
   da5ba:	460d      	mov	r5, r1
   da5bc:	f000 f80f 	bl	da5de <strlen>
   da5c0:	1c42      	adds	r2, r0, #1
   da5c2:	4611      	mov	r1, r2
   da5c4:	4620      	mov	r0, r4
   da5c6:	9201      	str	r2, [sp, #4]
   da5c8:	f7fd fa5e 	bl	d7a88 <_malloc_r>
   da5cc:	4604      	mov	r4, r0
   da5ce:	b118      	cbz	r0, da5d8 <_strdup_r+0x24>
   da5d0:	9a01      	ldr	r2, [sp, #4]
   da5d2:	4629      	mov	r1, r5
   da5d4:	f7ff ff80 	bl	da4d8 <memcpy>
   da5d8:	4620      	mov	r0, r4
   da5da:	b003      	add	sp, #12
   da5dc:	bd30      	pop	{r4, r5, pc}

000da5de <strlen>:
   da5de:	4603      	mov	r3, r0
   da5e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   da5e4:	2a00      	cmp	r2, #0
   da5e6:	d1fb      	bne.n	da5e0 <strlen+0x2>
   da5e8:	1a18      	subs	r0, r3, r0
   da5ea:	3801      	subs	r0, #1
   da5ec:	4770      	bx	lr

000da5ee <strncmp>:
   da5ee:	b510      	push	{r4, lr}
   da5f0:	b16a      	cbz	r2, da60e <strncmp+0x20>
   da5f2:	3901      	subs	r1, #1
   da5f4:	1884      	adds	r4, r0, r2
   da5f6:	f810 3b01 	ldrb.w	r3, [r0], #1
   da5fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   da5fe:	4293      	cmp	r3, r2
   da600:	d103      	bne.n	da60a <strncmp+0x1c>
   da602:	42a0      	cmp	r0, r4
   da604:	d001      	beq.n	da60a <strncmp+0x1c>
   da606:	2b00      	cmp	r3, #0
   da608:	d1f5      	bne.n	da5f6 <strncmp+0x8>
   da60a:	1a98      	subs	r0, r3, r2
   da60c:	bd10      	pop	{r4, pc}
   da60e:	4610      	mov	r0, r2
   da610:	e7fc      	b.n	da60c <strncmp+0x1e>

000da612 <strncpy>:
   da612:	b510      	push	{r4, lr}
   da614:	3901      	subs	r1, #1
   da616:	4603      	mov	r3, r0
   da618:	b132      	cbz	r2, da628 <strncpy+0x16>
   da61a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da61e:	f803 4b01 	strb.w	r4, [r3], #1
   da622:	3a01      	subs	r2, #1
   da624:	2c00      	cmp	r4, #0
   da626:	d1f7      	bne.n	da618 <strncpy+0x6>
   da628:	441a      	add	r2, r3
   da62a:	2100      	movs	r1, #0
   da62c:	4293      	cmp	r3, r2
   da62e:	d100      	bne.n	da632 <strncpy+0x20>
   da630:	bd10      	pop	{r4, pc}
   da632:	f803 1b01 	strb.w	r1, [r3], #1
   da636:	e7f9      	b.n	da62c <strncpy+0x1a>

000da638 <sulp>:
   da638:	b570      	push	{r4, r5, r6, lr}
   da63a:	4604      	mov	r4, r0
   da63c:	460d      	mov	r5, r1
   da63e:	ec45 4b10 	vmov	d0, r4, r5
   da642:	4616      	mov	r6, r2
   da644:	f001 fd68 	bl	dc118 <__ulp>
   da648:	ec51 0b10 	vmov	r0, r1, d0
   da64c:	b17e      	cbz	r6, da66e <sulp+0x36>
   da64e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   da652:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da656:	2b00      	cmp	r3, #0
   da658:	dd09      	ble.n	da66e <sulp+0x36>
   da65a:	051b      	lsls	r3, r3, #20
   da65c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   da660:	2400      	movs	r4, #0
   da662:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   da666:	4622      	mov	r2, r4
   da668:	462b      	mov	r3, r5
   da66a:	f7ff fb51 	bl	d9d10 <__aeabi_dmul>
   da66e:	bd70      	pop	{r4, r5, r6, pc}

000da670 <_strtod_l>:
   da670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da674:	b0a3      	sub	sp, #140	; 0x8c
   da676:	461f      	mov	r7, r3
   da678:	2300      	movs	r3, #0
   da67a:	931e      	str	r3, [sp, #120]	; 0x78
   da67c:	4ba4      	ldr	r3, [pc, #656]	; (da910 <_strtod_l+0x2a0>)
   da67e:	9219      	str	r2, [sp, #100]	; 0x64
   da680:	681b      	ldr	r3, [r3, #0]
   da682:	9307      	str	r3, [sp, #28]
   da684:	4604      	mov	r4, r0
   da686:	4618      	mov	r0, r3
   da688:	4688      	mov	r8, r1
   da68a:	f7ff ffa8 	bl	da5de <strlen>
   da68e:	f04f 0a00 	mov.w	sl, #0
   da692:	4605      	mov	r5, r0
   da694:	f04f 0b00 	mov.w	fp, #0
   da698:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   da69c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da69e:	781a      	ldrb	r2, [r3, #0]
   da6a0:	2a2b      	cmp	r2, #43	; 0x2b
   da6a2:	d04c      	beq.n	da73e <_strtod_l+0xce>
   da6a4:	d839      	bhi.n	da71a <_strtod_l+0xaa>
   da6a6:	2a0d      	cmp	r2, #13
   da6a8:	d832      	bhi.n	da710 <_strtod_l+0xa0>
   da6aa:	2a08      	cmp	r2, #8
   da6ac:	d832      	bhi.n	da714 <_strtod_l+0xa4>
   da6ae:	2a00      	cmp	r2, #0
   da6b0:	d03c      	beq.n	da72c <_strtod_l+0xbc>
   da6b2:	2300      	movs	r3, #0
   da6b4:	930e      	str	r3, [sp, #56]	; 0x38
   da6b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   da6b8:	7833      	ldrb	r3, [r6, #0]
   da6ba:	2b30      	cmp	r3, #48	; 0x30
   da6bc:	f040 80b4 	bne.w	da828 <_strtod_l+0x1b8>
   da6c0:	7873      	ldrb	r3, [r6, #1]
   da6c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da6c6:	2b58      	cmp	r3, #88	; 0x58
   da6c8:	d16c      	bne.n	da7a4 <_strtod_l+0x134>
   da6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da6cc:	9301      	str	r3, [sp, #4]
   da6ce:	ab1e      	add	r3, sp, #120	; 0x78
   da6d0:	9702      	str	r7, [sp, #8]
   da6d2:	9300      	str	r3, [sp, #0]
   da6d4:	4a8f      	ldr	r2, [pc, #572]	; (da914 <_strtod_l+0x2a4>)
   da6d6:	ab1f      	add	r3, sp, #124	; 0x7c
   da6d8:	a91d      	add	r1, sp, #116	; 0x74
   da6da:	4620      	mov	r0, r4
   da6dc:	f000 ff18 	bl	db510 <__gethex>
   da6e0:	f010 0707 	ands.w	r7, r0, #7
   da6e4:	4605      	mov	r5, r0
   da6e6:	d005      	beq.n	da6f4 <_strtod_l+0x84>
   da6e8:	2f06      	cmp	r7, #6
   da6ea:	d12a      	bne.n	da742 <_strtod_l+0xd2>
   da6ec:	3601      	adds	r6, #1
   da6ee:	2300      	movs	r3, #0
   da6f0:	961d      	str	r6, [sp, #116]	; 0x74
   da6f2:	930e      	str	r3, [sp, #56]	; 0x38
   da6f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da6f6:	2b00      	cmp	r3, #0
   da6f8:	f040 8596 	bne.w	db228 <_strtod_l+0xbb8>
   da6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da6fe:	b1db      	cbz	r3, da738 <_strtod_l+0xc8>
   da700:	4652      	mov	r2, sl
   da702:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da706:	ec43 2b10 	vmov	d0, r2, r3
   da70a:	b023      	add	sp, #140	; 0x8c
   da70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da710:	2a20      	cmp	r2, #32
   da712:	d1ce      	bne.n	da6b2 <_strtod_l+0x42>
   da714:	3301      	adds	r3, #1
   da716:	931d      	str	r3, [sp, #116]	; 0x74
   da718:	e7c0      	b.n	da69c <_strtod_l+0x2c>
   da71a:	2a2d      	cmp	r2, #45	; 0x2d
   da71c:	d1c9      	bne.n	da6b2 <_strtod_l+0x42>
   da71e:	2201      	movs	r2, #1
   da720:	920e      	str	r2, [sp, #56]	; 0x38
   da722:	1c5a      	adds	r2, r3, #1
   da724:	921d      	str	r2, [sp, #116]	; 0x74
   da726:	785b      	ldrb	r3, [r3, #1]
   da728:	2b00      	cmp	r3, #0
   da72a:	d1c4      	bne.n	da6b6 <_strtod_l+0x46>
   da72c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da72e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   da732:	2b00      	cmp	r3, #0
   da734:	f040 8576 	bne.w	db224 <_strtod_l+0xbb4>
   da738:	4652      	mov	r2, sl
   da73a:	465b      	mov	r3, fp
   da73c:	e7e3      	b.n	da706 <_strtod_l+0x96>
   da73e:	2200      	movs	r2, #0
   da740:	e7ee      	b.n	da720 <_strtod_l+0xb0>
   da742:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   da744:	b13a      	cbz	r2, da756 <_strtod_l+0xe6>
   da746:	2135      	movs	r1, #53	; 0x35
   da748:	a820      	add	r0, sp, #128	; 0x80
   da74a:	f001 fde4 	bl	dc316 <__copybits>
   da74e:	991e      	ldr	r1, [sp, #120]	; 0x78
   da750:	4620      	mov	r0, r4
   da752:	f001 fa19 	bl	dbb88 <_Bfree>
   da756:	3f01      	subs	r7, #1
   da758:	2f05      	cmp	r7, #5
   da75a:	d807      	bhi.n	da76c <_strtod_l+0xfc>
   da75c:	e8df f007 	tbb	[pc, r7]
   da760:	1d180b0e 	.word	0x1d180b0e
   da764:	030e      	.short	0x030e
   da766:	f04f 0b00 	mov.w	fp, #0
   da76a:	46da      	mov	sl, fp
   da76c:	0728      	lsls	r0, r5, #28
   da76e:	d5c1      	bpl.n	da6f4 <_strtod_l+0x84>
   da770:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   da774:	e7be      	b.n	da6f4 <_strtod_l+0x84>
   da776:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   da77a:	e7f7      	b.n	da76c <_strtod_l+0xfc>
   da77c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   da780:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   da782:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   da786:	f202 4233 	addw	r2, r2, #1075	; 0x433
   da78a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   da78e:	e7ed      	b.n	da76c <_strtod_l+0xfc>
   da790:	f8df b184 	ldr.w	fp, [pc, #388]	; da918 <_strtod_l+0x2a8>
   da794:	f04f 0a00 	mov.w	sl, #0
   da798:	e7e8      	b.n	da76c <_strtod_l+0xfc>
   da79a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   da79e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da7a2:	e7e3      	b.n	da76c <_strtod_l+0xfc>
   da7a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da7a6:	1c5a      	adds	r2, r3, #1
   da7a8:	921d      	str	r2, [sp, #116]	; 0x74
   da7aa:	785b      	ldrb	r3, [r3, #1]
   da7ac:	2b30      	cmp	r3, #48	; 0x30
   da7ae:	d0f9      	beq.n	da7a4 <_strtod_l+0x134>
   da7b0:	2b00      	cmp	r3, #0
   da7b2:	d09f      	beq.n	da6f4 <_strtod_l+0x84>
   da7b4:	2301      	movs	r3, #1
   da7b6:	f04f 0900 	mov.w	r9, #0
   da7ba:	9304      	str	r3, [sp, #16]
   da7bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da7be:	930a      	str	r3, [sp, #40]	; 0x28
   da7c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   da7c4:	464f      	mov	r7, r9
   da7c6:	220a      	movs	r2, #10
   da7c8:	981d      	ldr	r0, [sp, #116]	; 0x74
   da7ca:	7806      	ldrb	r6, [r0, #0]
   da7cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   da7d0:	b2d9      	uxtb	r1, r3
   da7d2:	2909      	cmp	r1, #9
   da7d4:	d92a      	bls.n	da82c <_strtod_l+0x1bc>
   da7d6:	9907      	ldr	r1, [sp, #28]
   da7d8:	462a      	mov	r2, r5
   da7da:	f7ff ff08 	bl	da5ee <strncmp>
   da7de:	b398      	cbz	r0, da848 <_strtod_l+0x1d8>
   da7e0:	2000      	movs	r0, #0
   da7e2:	4633      	mov	r3, r6
   da7e4:	463d      	mov	r5, r7
   da7e6:	9007      	str	r0, [sp, #28]
   da7e8:	4602      	mov	r2, r0
   da7ea:	2b65      	cmp	r3, #101	; 0x65
   da7ec:	d001      	beq.n	da7f2 <_strtod_l+0x182>
   da7ee:	2b45      	cmp	r3, #69	; 0x45
   da7f0:	d118      	bne.n	da824 <_strtod_l+0x1b4>
   da7f2:	b91d      	cbnz	r5, da7fc <_strtod_l+0x18c>
   da7f4:	9b04      	ldr	r3, [sp, #16]
   da7f6:	4303      	orrs	r3, r0
   da7f8:	d098      	beq.n	da72c <_strtod_l+0xbc>
   da7fa:	2500      	movs	r5, #0
   da7fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   da800:	f108 0301 	add.w	r3, r8, #1
   da804:	931d      	str	r3, [sp, #116]	; 0x74
   da806:	f898 3001 	ldrb.w	r3, [r8, #1]
   da80a:	2b2b      	cmp	r3, #43	; 0x2b
   da80c:	d075      	beq.n	da8fa <_strtod_l+0x28a>
   da80e:	2b2d      	cmp	r3, #45	; 0x2d
   da810:	d07b      	beq.n	da90a <_strtod_l+0x29a>
   da812:	f04f 0c00 	mov.w	ip, #0
   da816:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   da81a:	2909      	cmp	r1, #9
   da81c:	f240 8082 	bls.w	da924 <_strtod_l+0x2b4>
   da820:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   da824:	2600      	movs	r6, #0
   da826:	e09d      	b.n	da964 <_strtod_l+0x2f4>
   da828:	2300      	movs	r3, #0
   da82a:	e7c4      	b.n	da7b6 <_strtod_l+0x146>
   da82c:	2f08      	cmp	r7, #8
   da82e:	bfd8      	it	le
   da830:	9909      	ldrle	r1, [sp, #36]	; 0x24
   da832:	f100 0001 	add.w	r0, r0, #1
   da836:	bfda      	itte	le
   da838:	fb02 3301 	mlale	r3, r2, r1, r3
   da83c:	9309      	strle	r3, [sp, #36]	; 0x24
   da83e:	fb02 3909 	mlagt	r9, r2, r9, r3
   da842:	3701      	adds	r7, #1
   da844:	901d      	str	r0, [sp, #116]	; 0x74
   da846:	e7bf      	b.n	da7c8 <_strtod_l+0x158>
   da848:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da84a:	195a      	adds	r2, r3, r5
   da84c:	921d      	str	r2, [sp, #116]	; 0x74
   da84e:	5d5b      	ldrb	r3, [r3, r5]
   da850:	2f00      	cmp	r7, #0
   da852:	d037      	beq.n	da8c4 <_strtod_l+0x254>
   da854:	9007      	str	r0, [sp, #28]
   da856:	463d      	mov	r5, r7
   da858:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   da85c:	2a09      	cmp	r2, #9
   da85e:	d912      	bls.n	da886 <_strtod_l+0x216>
   da860:	2201      	movs	r2, #1
   da862:	e7c2      	b.n	da7ea <_strtod_l+0x17a>
   da864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da866:	1c5a      	adds	r2, r3, #1
   da868:	921d      	str	r2, [sp, #116]	; 0x74
   da86a:	785b      	ldrb	r3, [r3, #1]
   da86c:	3001      	adds	r0, #1
   da86e:	2b30      	cmp	r3, #48	; 0x30
   da870:	d0f8      	beq.n	da864 <_strtod_l+0x1f4>
   da872:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   da876:	2a08      	cmp	r2, #8
   da878:	f200 84db 	bhi.w	db232 <_strtod_l+0xbc2>
   da87c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   da87e:	9007      	str	r0, [sp, #28]
   da880:	2000      	movs	r0, #0
   da882:	920a      	str	r2, [sp, #40]	; 0x28
   da884:	4605      	mov	r5, r0
   da886:	3b30      	subs	r3, #48	; 0x30
   da888:	f100 0201 	add.w	r2, r0, #1
   da88c:	d014      	beq.n	da8b8 <_strtod_l+0x248>
   da88e:	9907      	ldr	r1, [sp, #28]
   da890:	4411      	add	r1, r2
   da892:	9107      	str	r1, [sp, #28]
   da894:	462a      	mov	r2, r5
   da896:	eb00 0e05 	add.w	lr, r0, r5
   da89a:	210a      	movs	r1, #10
   da89c:	4572      	cmp	r2, lr
   da89e:	d113      	bne.n	da8c8 <_strtod_l+0x258>
   da8a0:	182a      	adds	r2, r5, r0
   da8a2:	2a08      	cmp	r2, #8
   da8a4:	f105 0501 	add.w	r5, r5, #1
   da8a8:	4405      	add	r5, r0
   da8aa:	dc1c      	bgt.n	da8e6 <_strtod_l+0x276>
   da8ac:	9909      	ldr	r1, [sp, #36]	; 0x24
   da8ae:	220a      	movs	r2, #10
   da8b0:	fb02 3301 	mla	r3, r2, r1, r3
   da8b4:	9309      	str	r3, [sp, #36]	; 0x24
   da8b6:	2200      	movs	r2, #0
   da8b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da8ba:	1c59      	adds	r1, r3, #1
   da8bc:	911d      	str	r1, [sp, #116]	; 0x74
   da8be:	785b      	ldrb	r3, [r3, #1]
   da8c0:	4610      	mov	r0, r2
   da8c2:	e7c9      	b.n	da858 <_strtod_l+0x1e8>
   da8c4:	4638      	mov	r0, r7
   da8c6:	e7d2      	b.n	da86e <_strtod_l+0x1fe>
   da8c8:	2a08      	cmp	r2, #8
   da8ca:	dc04      	bgt.n	da8d6 <_strtod_l+0x266>
   da8cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   da8ce:	434e      	muls	r6, r1
   da8d0:	9609      	str	r6, [sp, #36]	; 0x24
   da8d2:	3201      	adds	r2, #1
   da8d4:	e7e2      	b.n	da89c <_strtod_l+0x22c>
   da8d6:	f102 0c01 	add.w	ip, r2, #1
   da8da:	f1bc 0f10 	cmp.w	ip, #16
   da8de:	bfd8      	it	le
   da8e0:	fb01 f909 	mulle.w	r9, r1, r9
   da8e4:	e7f5      	b.n	da8d2 <_strtod_l+0x262>
   da8e6:	2d10      	cmp	r5, #16
   da8e8:	bfdc      	itt	le
   da8ea:	220a      	movle	r2, #10
   da8ec:	fb02 3909 	mlale	r9, r2, r9, r3
   da8f0:	e7e1      	b.n	da8b6 <_strtod_l+0x246>
   da8f2:	2300      	movs	r3, #0
   da8f4:	9307      	str	r3, [sp, #28]
   da8f6:	2201      	movs	r2, #1
   da8f8:	e77c      	b.n	da7f4 <_strtod_l+0x184>
   da8fa:	f04f 0c00 	mov.w	ip, #0
   da8fe:	f108 0302 	add.w	r3, r8, #2
   da902:	931d      	str	r3, [sp, #116]	; 0x74
   da904:	f898 3002 	ldrb.w	r3, [r8, #2]
   da908:	e785      	b.n	da816 <_strtod_l+0x1a6>
   da90a:	f04f 0c01 	mov.w	ip, #1
   da90e:	e7f6      	b.n	da8fe <_strtod_l+0x28e>
   da910:	000dd19c 	.word	0x000dd19c
   da914:	000dd044 	.word	0x000dd044
   da918:	7ff00000 	.word	0x7ff00000
   da91c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da91e:	1c59      	adds	r1, r3, #1
   da920:	911d      	str	r1, [sp, #116]	; 0x74
   da922:	785b      	ldrb	r3, [r3, #1]
   da924:	2b30      	cmp	r3, #48	; 0x30
   da926:	d0f9      	beq.n	da91c <_strtod_l+0x2ac>
   da928:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   da92c:	2908      	cmp	r1, #8
   da92e:	f63f af79 	bhi.w	da824 <_strtod_l+0x1b4>
   da932:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   da936:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da938:	9308      	str	r3, [sp, #32]
   da93a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da93c:	1c59      	adds	r1, r3, #1
   da93e:	911d      	str	r1, [sp, #116]	; 0x74
   da940:	785b      	ldrb	r3, [r3, #1]
   da942:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   da946:	2e09      	cmp	r6, #9
   da948:	d937      	bls.n	da9ba <_strtod_l+0x34a>
   da94a:	9e08      	ldr	r6, [sp, #32]
   da94c:	1b89      	subs	r1, r1, r6
   da94e:	2908      	cmp	r1, #8
   da950:	f644 661f 	movw	r6, #19999	; 0x4e1f
   da954:	dc02      	bgt.n	da95c <_strtod_l+0x2ec>
   da956:	4576      	cmp	r6, lr
   da958:	bfa8      	it	ge
   da95a:	4676      	movge	r6, lr
   da95c:	f1bc 0f00 	cmp.w	ip, #0
   da960:	d000      	beq.n	da964 <_strtod_l+0x2f4>
   da962:	4276      	negs	r6, r6
   da964:	2d00      	cmp	r5, #0
   da966:	d14f      	bne.n	daa08 <_strtod_l+0x398>
   da968:	9904      	ldr	r1, [sp, #16]
   da96a:	4301      	orrs	r1, r0
   da96c:	f47f aec2 	bne.w	da6f4 <_strtod_l+0x84>
   da970:	2a00      	cmp	r2, #0
   da972:	f47f aedb 	bne.w	da72c <_strtod_l+0xbc>
   da976:	2b69      	cmp	r3, #105	; 0x69
   da978:	d027      	beq.n	da9ca <_strtod_l+0x35a>
   da97a:	dc24      	bgt.n	da9c6 <_strtod_l+0x356>
   da97c:	2b49      	cmp	r3, #73	; 0x49
   da97e:	d024      	beq.n	da9ca <_strtod_l+0x35a>
   da980:	2b4e      	cmp	r3, #78	; 0x4e
   da982:	f47f aed3 	bne.w	da72c <_strtod_l+0xbc>
   da986:	499e      	ldr	r1, [pc, #632]	; (dac00 <_strtod_l+0x590>)
   da988:	a81d      	add	r0, sp, #116	; 0x74
   da98a:	f001 f807 	bl	db99c <__match>
   da98e:	2800      	cmp	r0, #0
   da990:	f43f aecc 	beq.w	da72c <_strtod_l+0xbc>
   da994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da996:	781b      	ldrb	r3, [r3, #0]
   da998:	2b28      	cmp	r3, #40	; 0x28
   da99a:	d12d      	bne.n	da9f8 <_strtod_l+0x388>
   da99c:	4999      	ldr	r1, [pc, #612]	; (dac04 <_strtod_l+0x594>)
   da99e:	aa20      	add	r2, sp, #128	; 0x80
   da9a0:	a81d      	add	r0, sp, #116	; 0x74
   da9a2:	f001 f80f 	bl	db9c4 <__hexnan>
   da9a6:	2805      	cmp	r0, #5
   da9a8:	d126      	bne.n	da9f8 <_strtod_l+0x388>
   da9aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
   da9ac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   da9b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   da9b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   da9b8:	e69c      	b.n	da6f4 <_strtod_l+0x84>
   da9ba:	210a      	movs	r1, #10
   da9bc:	fb01 3e0e 	mla	lr, r1, lr, r3
   da9c0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   da9c4:	e7b9      	b.n	da93a <_strtod_l+0x2ca>
   da9c6:	2b6e      	cmp	r3, #110	; 0x6e
   da9c8:	e7db      	b.n	da982 <_strtod_l+0x312>
   da9ca:	498f      	ldr	r1, [pc, #572]	; (dac08 <_strtod_l+0x598>)
   da9cc:	a81d      	add	r0, sp, #116	; 0x74
   da9ce:	f000 ffe5 	bl	db99c <__match>
   da9d2:	2800      	cmp	r0, #0
   da9d4:	f43f aeaa 	beq.w	da72c <_strtod_l+0xbc>
   da9d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da9da:	498c      	ldr	r1, [pc, #560]	; (dac0c <_strtod_l+0x59c>)
   da9dc:	3b01      	subs	r3, #1
   da9de:	a81d      	add	r0, sp, #116	; 0x74
   da9e0:	931d      	str	r3, [sp, #116]	; 0x74
   da9e2:	f000 ffdb 	bl	db99c <__match>
   da9e6:	b910      	cbnz	r0, da9ee <_strtod_l+0x37e>
   da9e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da9ea:	3301      	adds	r3, #1
   da9ec:	931d      	str	r3, [sp, #116]	; 0x74
   da9ee:	f8df b22c 	ldr.w	fp, [pc, #556]	; dac1c <_strtod_l+0x5ac>
   da9f2:	f04f 0a00 	mov.w	sl, #0
   da9f6:	e67d      	b.n	da6f4 <_strtod_l+0x84>
   da9f8:	4885      	ldr	r0, [pc, #532]	; (dac10 <_strtod_l+0x5a0>)
   da9fa:	f001 fce1 	bl	dc3c0 <nan>
   da9fe:	ed8d 0b04 	vstr	d0, [sp, #16]
   daa02:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   daa06:	e675      	b.n	da6f4 <_strtod_l+0x84>
   daa08:	9b07      	ldr	r3, [sp, #28]
   daa0a:	9809      	ldr	r0, [sp, #36]	; 0x24
   daa0c:	1af3      	subs	r3, r6, r3
   daa0e:	2f00      	cmp	r7, #0
   daa10:	bf08      	it	eq
   daa12:	462f      	moveq	r7, r5
   daa14:	2d10      	cmp	r5, #16
   daa16:	9308      	str	r3, [sp, #32]
   daa18:	46a8      	mov	r8, r5
   daa1a:	bfa8      	it	ge
   daa1c:	f04f 0810 	movge.w	r8, #16
   daa20:	f7ff f8fc 	bl	d9c1c <__aeabi_ui2d>
   daa24:	2d09      	cmp	r5, #9
   daa26:	4682      	mov	sl, r0
   daa28:	468b      	mov	fp, r1
   daa2a:	dd13      	ble.n	daa54 <_strtod_l+0x3e4>
   daa2c:	4b79      	ldr	r3, [pc, #484]	; (dac14 <_strtod_l+0x5a4>)
   daa2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   daa32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   daa36:	f7ff f96b 	bl	d9d10 <__aeabi_dmul>
   daa3a:	4682      	mov	sl, r0
   daa3c:	4648      	mov	r0, r9
   daa3e:	468b      	mov	fp, r1
   daa40:	f7ff f8ec 	bl	d9c1c <__aeabi_ui2d>
   daa44:	4602      	mov	r2, r0
   daa46:	460b      	mov	r3, r1
   daa48:	4650      	mov	r0, sl
   daa4a:	4659      	mov	r1, fp
   daa4c:	f7fe ffaa 	bl	d99a4 <__adddf3>
   daa50:	4682      	mov	sl, r0
   daa52:	468b      	mov	fp, r1
   daa54:	2d0f      	cmp	r5, #15
   daa56:	dc38      	bgt.n	daaca <_strtod_l+0x45a>
   daa58:	9b08      	ldr	r3, [sp, #32]
   daa5a:	2b00      	cmp	r3, #0
   daa5c:	f43f ae4a 	beq.w	da6f4 <_strtod_l+0x84>
   daa60:	dd24      	ble.n	daaac <_strtod_l+0x43c>
   daa62:	2b16      	cmp	r3, #22
   daa64:	dc0b      	bgt.n	daa7e <_strtod_l+0x40e>
   daa66:	4d6b      	ldr	r5, [pc, #428]	; (dac14 <_strtod_l+0x5a4>)
   daa68:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   daa6c:	e9d5 0100 	ldrd	r0, r1, [r5]
   daa70:	4652      	mov	r2, sl
   daa72:	465b      	mov	r3, fp
   daa74:	f7ff f94c 	bl	d9d10 <__aeabi_dmul>
   daa78:	4682      	mov	sl, r0
   daa7a:	468b      	mov	fp, r1
   daa7c:	e63a      	b.n	da6f4 <_strtod_l+0x84>
   daa7e:	9a08      	ldr	r2, [sp, #32]
   daa80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   daa84:	4293      	cmp	r3, r2
   daa86:	db20      	blt.n	daaca <_strtod_l+0x45a>
   daa88:	4c62      	ldr	r4, [pc, #392]	; (dac14 <_strtod_l+0x5a4>)
   daa8a:	f1c5 050f 	rsb	r5, r5, #15
   daa8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   daa92:	4652      	mov	r2, sl
   daa94:	465b      	mov	r3, fp
   daa96:	e9d1 0100 	ldrd	r0, r1, [r1]
   daa9a:	f7ff f939 	bl	d9d10 <__aeabi_dmul>
   daa9e:	9b08      	ldr	r3, [sp, #32]
   daaa0:	1b5d      	subs	r5, r3, r5
   daaa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   daaa6:	e9d4 2300 	ldrd	r2, r3, [r4]
   daaaa:	e7e3      	b.n	daa74 <_strtod_l+0x404>
   daaac:	9b08      	ldr	r3, [sp, #32]
   daaae:	3316      	adds	r3, #22
   daab0:	db0b      	blt.n	daaca <_strtod_l+0x45a>
   daab2:	9b07      	ldr	r3, [sp, #28]
   daab4:	4a57      	ldr	r2, [pc, #348]	; (dac14 <_strtod_l+0x5a4>)
   daab6:	1b9e      	subs	r6, r3, r6
   daab8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   daabc:	e9d6 2300 	ldrd	r2, r3, [r6]
   daac0:	4650      	mov	r0, sl
   daac2:	4659      	mov	r1, fp
   daac4:	f7ff fa4e 	bl	d9f64 <__aeabi_ddiv>
   daac8:	e7d6      	b.n	daa78 <_strtod_l+0x408>
   daaca:	9b08      	ldr	r3, [sp, #32]
   daacc:	eba5 0808 	sub.w	r8, r5, r8
   daad0:	4498      	add	r8, r3
   daad2:	f1b8 0f00 	cmp.w	r8, #0
   daad6:	dd71      	ble.n	dabbc <_strtod_l+0x54c>
   daad8:	f018 030f 	ands.w	r3, r8, #15
   daadc:	d00a      	beq.n	daaf4 <_strtod_l+0x484>
   daade:	494d      	ldr	r1, [pc, #308]	; (dac14 <_strtod_l+0x5a4>)
   daae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   daae4:	4652      	mov	r2, sl
   daae6:	465b      	mov	r3, fp
   daae8:	e9d1 0100 	ldrd	r0, r1, [r1]
   daaec:	f7ff f910 	bl	d9d10 <__aeabi_dmul>
   daaf0:	4682      	mov	sl, r0
   daaf2:	468b      	mov	fp, r1
   daaf4:	f038 080f 	bics.w	r8, r8, #15
   daaf8:	d04d      	beq.n	dab96 <_strtod_l+0x526>
   daafa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   daafe:	dd22      	ble.n	dab46 <_strtod_l+0x4d6>
   dab00:	2500      	movs	r5, #0
   dab02:	462e      	mov	r6, r5
   dab04:	9509      	str	r5, [sp, #36]	; 0x24
   dab06:	9507      	str	r5, [sp, #28]
   dab08:	2322      	movs	r3, #34	; 0x22
   dab0a:	f8df b110 	ldr.w	fp, [pc, #272]	; dac1c <_strtod_l+0x5ac>
   dab0e:	6023      	str	r3, [r4, #0]
   dab10:	f04f 0a00 	mov.w	sl, #0
   dab14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dab16:	2b00      	cmp	r3, #0
   dab18:	f43f adec 	beq.w	da6f4 <_strtod_l+0x84>
   dab1c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dab1e:	4620      	mov	r0, r4
   dab20:	f001 f832 	bl	dbb88 <_Bfree>
   dab24:	9907      	ldr	r1, [sp, #28]
   dab26:	4620      	mov	r0, r4
   dab28:	f001 f82e 	bl	dbb88 <_Bfree>
   dab2c:	4631      	mov	r1, r6
   dab2e:	4620      	mov	r0, r4
   dab30:	f001 f82a 	bl	dbb88 <_Bfree>
   dab34:	9909      	ldr	r1, [sp, #36]	; 0x24
   dab36:	4620      	mov	r0, r4
   dab38:	f001 f826 	bl	dbb88 <_Bfree>
   dab3c:	4629      	mov	r1, r5
   dab3e:	4620      	mov	r0, r4
   dab40:	f001 f822 	bl	dbb88 <_Bfree>
   dab44:	e5d6      	b.n	da6f4 <_strtod_l+0x84>
   dab46:	2300      	movs	r3, #0
   dab48:	ea4f 1828 	mov.w	r8, r8, asr #4
   dab4c:	4650      	mov	r0, sl
   dab4e:	4659      	mov	r1, fp
   dab50:	4699      	mov	r9, r3
   dab52:	f1b8 0f01 	cmp.w	r8, #1
   dab56:	dc21      	bgt.n	dab9c <_strtod_l+0x52c>
   dab58:	b10b      	cbz	r3, dab5e <_strtod_l+0x4ee>
   dab5a:	4682      	mov	sl, r0
   dab5c:	468b      	mov	fp, r1
   dab5e:	4b2e      	ldr	r3, [pc, #184]	; (dac18 <_strtod_l+0x5a8>)
   dab60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dab64:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dab68:	4652      	mov	r2, sl
   dab6a:	465b      	mov	r3, fp
   dab6c:	e9d9 0100 	ldrd	r0, r1, [r9]
   dab70:	f7ff f8ce 	bl	d9d10 <__aeabi_dmul>
   dab74:	4b29      	ldr	r3, [pc, #164]	; (dac1c <_strtod_l+0x5ac>)
   dab76:	460a      	mov	r2, r1
   dab78:	400b      	ands	r3, r1
   dab7a:	4929      	ldr	r1, [pc, #164]	; (dac20 <_strtod_l+0x5b0>)
   dab7c:	428b      	cmp	r3, r1
   dab7e:	4682      	mov	sl, r0
   dab80:	d8be      	bhi.n	dab00 <_strtod_l+0x490>
   dab82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dab86:	428b      	cmp	r3, r1
   dab88:	bf86      	itte	hi
   dab8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dac24 <_strtod_l+0x5b4>
   dab8e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dab92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dab96:	2300      	movs	r3, #0
   dab98:	9304      	str	r3, [sp, #16]
   dab9a:	e081      	b.n	daca0 <_strtod_l+0x630>
   dab9c:	f018 0f01 	tst.w	r8, #1
   daba0:	d007      	beq.n	dabb2 <_strtod_l+0x542>
   daba2:	4b1d      	ldr	r3, [pc, #116]	; (dac18 <_strtod_l+0x5a8>)
   daba4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   daba8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabac:	f7ff f8b0 	bl	d9d10 <__aeabi_dmul>
   dabb0:	2301      	movs	r3, #1
   dabb2:	f109 0901 	add.w	r9, r9, #1
   dabb6:	ea4f 0868 	mov.w	r8, r8, asr #1
   dabba:	e7ca      	b.n	dab52 <_strtod_l+0x4e2>
   dabbc:	d0eb      	beq.n	dab96 <_strtod_l+0x526>
   dabbe:	f1c8 0800 	rsb	r8, r8, #0
   dabc2:	f018 020f 	ands.w	r2, r8, #15
   dabc6:	d00a      	beq.n	dabde <_strtod_l+0x56e>
   dabc8:	4b12      	ldr	r3, [pc, #72]	; (dac14 <_strtod_l+0x5a4>)
   dabca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dabce:	4650      	mov	r0, sl
   dabd0:	4659      	mov	r1, fp
   dabd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabd6:	f7ff f9c5 	bl	d9f64 <__aeabi_ddiv>
   dabda:	4682      	mov	sl, r0
   dabdc:	468b      	mov	fp, r1
   dabde:	ea5f 1828 	movs.w	r8, r8, asr #4
   dabe2:	d0d8      	beq.n	dab96 <_strtod_l+0x526>
   dabe4:	f1b8 0f1f 	cmp.w	r8, #31
   dabe8:	dd1e      	ble.n	dac28 <_strtod_l+0x5b8>
   dabea:	2500      	movs	r5, #0
   dabec:	462e      	mov	r6, r5
   dabee:	9509      	str	r5, [sp, #36]	; 0x24
   dabf0:	9507      	str	r5, [sp, #28]
   dabf2:	2322      	movs	r3, #34	; 0x22
   dabf4:	f04f 0a00 	mov.w	sl, #0
   dabf8:	f04f 0b00 	mov.w	fp, #0
   dabfc:	6023      	str	r3, [r4, #0]
   dabfe:	e789      	b.n	dab14 <_strtod_l+0x4a4>
   dac00:	000dd03f 	.word	0x000dd03f
   dac04:	000dd058 	.word	0x000dd058
   dac08:	000dd036 	.word	0x000dd036
   dac0c:	000dd039 	.word	0x000dd039
   dac10:	000dcffc 	.word	0x000dcffc
   dac14:	000dd1d8 	.word	0x000dd1d8
   dac18:	000dd1b0 	.word	0x000dd1b0
   dac1c:	7ff00000 	.word	0x7ff00000
   dac20:	7ca00000 	.word	0x7ca00000
   dac24:	7fefffff 	.word	0x7fefffff
   dac28:	f018 0310 	ands.w	r3, r8, #16
   dac2c:	bf18      	it	ne
   dac2e:	236a      	movne	r3, #106	; 0x6a
   dac30:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dafe8 <_strtod_l+0x978>
   dac34:	9304      	str	r3, [sp, #16]
   dac36:	4650      	mov	r0, sl
   dac38:	4659      	mov	r1, fp
   dac3a:	2300      	movs	r3, #0
   dac3c:	f018 0f01 	tst.w	r8, #1
   dac40:	d004      	beq.n	dac4c <_strtod_l+0x5dc>
   dac42:	e9d9 2300 	ldrd	r2, r3, [r9]
   dac46:	f7ff f863 	bl	d9d10 <__aeabi_dmul>
   dac4a:	2301      	movs	r3, #1
   dac4c:	ea5f 0868 	movs.w	r8, r8, asr #1
   dac50:	f109 0908 	add.w	r9, r9, #8
   dac54:	d1f2      	bne.n	dac3c <_strtod_l+0x5cc>
   dac56:	b10b      	cbz	r3, dac5c <_strtod_l+0x5ec>
   dac58:	4682      	mov	sl, r0
   dac5a:	468b      	mov	fp, r1
   dac5c:	9b04      	ldr	r3, [sp, #16]
   dac5e:	b1bb      	cbz	r3, dac90 <_strtod_l+0x620>
   dac60:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dac64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dac68:	2b00      	cmp	r3, #0
   dac6a:	4659      	mov	r1, fp
   dac6c:	dd10      	ble.n	dac90 <_strtod_l+0x620>
   dac6e:	2b1f      	cmp	r3, #31
   dac70:	f340 8128 	ble.w	daec4 <_strtod_l+0x854>
   dac74:	2b34      	cmp	r3, #52	; 0x34
   dac76:	bfde      	ittt	le
   dac78:	3b20      	suble	r3, #32
   dac7a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dac7e:	fa02 f303 	lslle.w	r3, r2, r3
   dac82:	f04f 0a00 	mov.w	sl, #0
   dac86:	bfcc      	ite	gt
   dac88:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dac8c:	ea03 0b01 	andle.w	fp, r3, r1
   dac90:	2200      	movs	r2, #0
   dac92:	2300      	movs	r3, #0
   dac94:	4650      	mov	r0, sl
   dac96:	4659      	mov	r1, fp
   dac98:	f7ff faa2 	bl	da1e0 <__aeabi_dcmpeq>
   dac9c:	2800      	cmp	r0, #0
   dac9e:	d1a4      	bne.n	dabea <_strtod_l+0x57a>
   daca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daca2:	9300      	str	r3, [sp, #0]
   daca4:	990a      	ldr	r1, [sp, #40]	; 0x28
   daca6:	462b      	mov	r3, r5
   daca8:	463a      	mov	r2, r7
   dacaa:	4620      	mov	r0, r4
   dacac:	f000 ffc1 	bl	dbc32 <__s2b>
   dacb0:	9009      	str	r0, [sp, #36]	; 0x24
   dacb2:	2800      	cmp	r0, #0
   dacb4:	f43f af24 	beq.w	dab00 <_strtod_l+0x490>
   dacb8:	9b07      	ldr	r3, [sp, #28]
   dacba:	1b9e      	subs	r6, r3, r6
   dacbc:	9b08      	ldr	r3, [sp, #32]
   dacbe:	2b00      	cmp	r3, #0
   dacc0:	bfb4      	ite	lt
   dacc2:	4633      	movlt	r3, r6
   dacc4:	2300      	movge	r3, #0
   dacc6:	9310      	str	r3, [sp, #64]	; 0x40
   dacc8:	9b08      	ldr	r3, [sp, #32]
   dacca:	2500      	movs	r5, #0
   daccc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dacd0:	9318      	str	r3, [sp, #96]	; 0x60
   dacd2:	462e      	mov	r6, r5
   dacd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dacd6:	4620      	mov	r0, r4
   dacd8:	6859      	ldr	r1, [r3, #4]
   dacda:	f000 ff21 	bl	dbb20 <_Balloc>
   dacde:	9007      	str	r0, [sp, #28]
   dace0:	2800      	cmp	r0, #0
   dace2:	f43f af11 	beq.w	dab08 <_strtod_l+0x498>
   dace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dace8:	691a      	ldr	r2, [r3, #16]
   dacea:	3202      	adds	r2, #2
   dacec:	f103 010c 	add.w	r1, r3, #12
   dacf0:	0092      	lsls	r2, r2, #2
   dacf2:	300c      	adds	r0, #12
   dacf4:	f7ff fbf0 	bl	da4d8 <memcpy>
   dacf8:	ec4b ab10 	vmov	d0, sl, fp
   dacfc:	aa20      	add	r2, sp, #128	; 0x80
   dacfe:	a91f      	add	r1, sp, #124	; 0x7c
   dad00:	4620      	mov	r0, r4
   dad02:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dad06:	f001 fa83 	bl	dc210 <__d2b>
   dad0a:	901e      	str	r0, [sp, #120]	; 0x78
   dad0c:	2800      	cmp	r0, #0
   dad0e:	f43f aefb 	beq.w	dab08 <_strtod_l+0x498>
   dad12:	2101      	movs	r1, #1
   dad14:	4620      	mov	r0, r4
   dad16:	f001 f81a 	bl	dbd4e <__i2b>
   dad1a:	4606      	mov	r6, r0
   dad1c:	2800      	cmp	r0, #0
   dad1e:	f43f aef3 	beq.w	dab08 <_strtod_l+0x498>
   dad22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dad24:	9904      	ldr	r1, [sp, #16]
   dad26:	2b00      	cmp	r3, #0
   dad28:	bfab      	itete	ge
   dad2a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dad2c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dad2e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dad30:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dad34:	bfac      	ite	ge
   dad36:	eb03 0902 	addge.w	r9, r3, r2
   dad3a:	1ad7      	sublt	r7, r2, r3
   dad3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dad3e:	eba3 0801 	sub.w	r8, r3, r1
   dad42:	4490      	add	r8, r2
   dad44:	4ba3      	ldr	r3, [pc, #652]	; (dafd4 <_strtod_l+0x964>)
   dad46:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dad4a:	4598      	cmp	r8, r3
   dad4c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dad50:	f280 80cc 	bge.w	daeec <_strtod_l+0x87c>
   dad54:	eba3 0308 	sub.w	r3, r3, r8
   dad58:	2b1f      	cmp	r3, #31
   dad5a:	eba2 0203 	sub.w	r2, r2, r3
   dad5e:	f04f 0101 	mov.w	r1, #1
   dad62:	f300 80b6 	bgt.w	daed2 <_strtod_l+0x862>
   dad66:	fa01 f303 	lsl.w	r3, r1, r3
   dad6a:	9311      	str	r3, [sp, #68]	; 0x44
   dad6c:	2300      	movs	r3, #0
   dad6e:	930c      	str	r3, [sp, #48]	; 0x30
   dad70:	eb09 0802 	add.w	r8, r9, r2
   dad74:	9b04      	ldr	r3, [sp, #16]
   dad76:	45c1      	cmp	r9, r8
   dad78:	4417      	add	r7, r2
   dad7a:	441f      	add	r7, r3
   dad7c:	464b      	mov	r3, r9
   dad7e:	bfa8      	it	ge
   dad80:	4643      	movge	r3, r8
   dad82:	42bb      	cmp	r3, r7
   dad84:	bfa8      	it	ge
   dad86:	463b      	movge	r3, r7
   dad88:	2b00      	cmp	r3, #0
   dad8a:	bfc2      	ittt	gt
   dad8c:	eba8 0803 	subgt.w	r8, r8, r3
   dad90:	1aff      	subgt	r7, r7, r3
   dad92:	eba9 0903 	subgt.w	r9, r9, r3
   dad96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dad98:	2b00      	cmp	r3, #0
   dad9a:	dd17      	ble.n	dadcc <_strtod_l+0x75c>
   dad9c:	4631      	mov	r1, r6
   dad9e:	461a      	mov	r2, r3
   dada0:	4620      	mov	r0, r4
   dada2:	f001 f879 	bl	dbe98 <__pow5mult>
   dada6:	4606      	mov	r6, r0
   dada8:	2800      	cmp	r0, #0
   dadaa:	f43f aead 	beq.w	dab08 <_strtod_l+0x498>
   dadae:	4601      	mov	r1, r0
   dadb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dadb2:	4620      	mov	r0, r4
   dadb4:	f000 ffd4 	bl	dbd60 <__multiply>
   dadb8:	900f      	str	r0, [sp, #60]	; 0x3c
   dadba:	2800      	cmp	r0, #0
   dadbc:	f43f aea4 	beq.w	dab08 <_strtod_l+0x498>
   dadc0:	991e      	ldr	r1, [sp, #120]	; 0x78
   dadc2:	4620      	mov	r0, r4
   dadc4:	f000 fee0 	bl	dbb88 <_Bfree>
   dadc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dadca:	931e      	str	r3, [sp, #120]	; 0x78
   dadcc:	f1b8 0f00 	cmp.w	r8, #0
   dadd0:	f300 8091 	bgt.w	daef6 <_strtod_l+0x886>
   dadd4:	9b08      	ldr	r3, [sp, #32]
   dadd6:	2b00      	cmp	r3, #0
   dadd8:	dd08      	ble.n	dadec <_strtod_l+0x77c>
   dadda:	9a18      	ldr	r2, [sp, #96]	; 0x60
   daddc:	9907      	ldr	r1, [sp, #28]
   dadde:	4620      	mov	r0, r4
   dade0:	f001 f85a 	bl	dbe98 <__pow5mult>
   dade4:	9007      	str	r0, [sp, #28]
   dade6:	2800      	cmp	r0, #0
   dade8:	f43f ae8e 	beq.w	dab08 <_strtod_l+0x498>
   dadec:	2f00      	cmp	r7, #0
   dadee:	dd08      	ble.n	dae02 <_strtod_l+0x792>
   dadf0:	9907      	ldr	r1, [sp, #28]
   dadf2:	463a      	mov	r2, r7
   dadf4:	4620      	mov	r0, r4
   dadf6:	f001 f89d 	bl	dbf34 <__lshift>
   dadfa:	9007      	str	r0, [sp, #28]
   dadfc:	2800      	cmp	r0, #0
   dadfe:	f43f ae83 	beq.w	dab08 <_strtod_l+0x498>
   dae02:	f1b9 0f00 	cmp.w	r9, #0
   dae06:	dd08      	ble.n	dae1a <_strtod_l+0x7aa>
   dae08:	4631      	mov	r1, r6
   dae0a:	464a      	mov	r2, r9
   dae0c:	4620      	mov	r0, r4
   dae0e:	f001 f891 	bl	dbf34 <__lshift>
   dae12:	4606      	mov	r6, r0
   dae14:	2800      	cmp	r0, #0
   dae16:	f43f ae77 	beq.w	dab08 <_strtod_l+0x498>
   dae1a:	9a07      	ldr	r2, [sp, #28]
   dae1c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dae1e:	4620      	mov	r0, r4
   dae20:	f001 f903 	bl	dc02a <__mdiff>
   dae24:	4605      	mov	r5, r0
   dae26:	2800      	cmp	r0, #0
   dae28:	f43f ae6e 	beq.w	dab08 <_strtod_l+0x498>
   dae2c:	68c3      	ldr	r3, [r0, #12]
   dae2e:	930f      	str	r3, [sp, #60]	; 0x3c
   dae30:	2300      	movs	r3, #0
   dae32:	60c3      	str	r3, [r0, #12]
   dae34:	4631      	mov	r1, r6
   dae36:	f001 f8dc 	bl	dbff2 <__mcmp>
   dae3a:	2800      	cmp	r0, #0
   dae3c:	da65      	bge.n	daf0a <_strtod_l+0x89a>
   dae3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dae40:	ea53 030a 	orrs.w	r3, r3, sl
   dae44:	f040 8087 	bne.w	daf56 <_strtod_l+0x8e6>
   dae48:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dae4c:	2b00      	cmp	r3, #0
   dae4e:	f040 8082 	bne.w	daf56 <_strtod_l+0x8e6>
   dae52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dae56:	0d1b      	lsrs	r3, r3, #20
   dae58:	051b      	lsls	r3, r3, #20
   dae5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dae5e:	d97a      	bls.n	daf56 <_strtod_l+0x8e6>
   dae60:	696b      	ldr	r3, [r5, #20]
   dae62:	b913      	cbnz	r3, dae6a <_strtod_l+0x7fa>
   dae64:	692b      	ldr	r3, [r5, #16]
   dae66:	2b01      	cmp	r3, #1
   dae68:	dd75      	ble.n	daf56 <_strtod_l+0x8e6>
   dae6a:	4629      	mov	r1, r5
   dae6c:	2201      	movs	r2, #1
   dae6e:	4620      	mov	r0, r4
   dae70:	f001 f860 	bl	dbf34 <__lshift>
   dae74:	4631      	mov	r1, r6
   dae76:	4605      	mov	r5, r0
   dae78:	f001 f8bb 	bl	dbff2 <__mcmp>
   dae7c:	2800      	cmp	r0, #0
   dae7e:	dd6a      	ble.n	daf56 <_strtod_l+0x8e6>
   dae80:	9904      	ldr	r1, [sp, #16]
   dae82:	4a55      	ldr	r2, [pc, #340]	; (dafd8 <_strtod_l+0x968>)
   dae84:	465b      	mov	r3, fp
   dae86:	2900      	cmp	r1, #0
   dae88:	f000 8085 	beq.w	daf96 <_strtod_l+0x926>
   dae8c:	ea02 010b 	and.w	r1, r2, fp
   dae90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dae94:	dc7f      	bgt.n	daf96 <_strtod_l+0x926>
   dae96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dae9a:	f77f aeaa 	ble.w	dabf2 <_strtod_l+0x582>
   dae9e:	4a4f      	ldr	r2, [pc, #316]	; (dafdc <_strtod_l+0x96c>)
   daea0:	2300      	movs	r3, #0
   daea2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   daea6:	4650      	mov	r0, sl
   daea8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   daeac:	4659      	mov	r1, fp
   daeae:	f7fe ff2f 	bl	d9d10 <__aeabi_dmul>
   daeb2:	460b      	mov	r3, r1
   daeb4:	4303      	orrs	r3, r0
   daeb6:	bf08      	it	eq
   daeb8:	2322      	moveq	r3, #34	; 0x22
   daeba:	4682      	mov	sl, r0
   daebc:	468b      	mov	fp, r1
   daebe:	bf08      	it	eq
   daec0:	6023      	streq	r3, [r4, #0]
   daec2:	e62b      	b.n	dab1c <_strtod_l+0x4ac>
   daec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   daec8:	fa02 f303 	lsl.w	r3, r2, r3
   daecc:	ea03 0a0a 	and.w	sl, r3, sl
   daed0:	e6de      	b.n	dac90 <_strtod_l+0x620>
   daed2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   daed6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   daeda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   daede:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   daee2:	fa01 f308 	lsl.w	r3, r1, r8
   daee6:	930c      	str	r3, [sp, #48]	; 0x30
   daee8:	9111      	str	r1, [sp, #68]	; 0x44
   daeea:	e741      	b.n	dad70 <_strtod_l+0x700>
   daeec:	2300      	movs	r3, #0
   daeee:	930c      	str	r3, [sp, #48]	; 0x30
   daef0:	2301      	movs	r3, #1
   daef2:	9311      	str	r3, [sp, #68]	; 0x44
   daef4:	e73c      	b.n	dad70 <_strtod_l+0x700>
   daef6:	991e      	ldr	r1, [sp, #120]	; 0x78
   daef8:	4642      	mov	r2, r8
   daefa:	4620      	mov	r0, r4
   daefc:	f001 f81a 	bl	dbf34 <__lshift>
   daf00:	901e      	str	r0, [sp, #120]	; 0x78
   daf02:	2800      	cmp	r0, #0
   daf04:	f47f af66 	bne.w	dadd4 <_strtod_l+0x764>
   daf08:	e5fe      	b.n	dab08 <_strtod_l+0x498>
   daf0a:	465f      	mov	r7, fp
   daf0c:	d16e      	bne.n	dafec <_strtod_l+0x97c>
   daf0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   daf10:	f3cb 0313 	ubfx	r3, fp, #0, #20
   daf14:	b342      	cbz	r2, daf68 <_strtod_l+0x8f8>
   daf16:	4a32      	ldr	r2, [pc, #200]	; (dafe0 <_strtod_l+0x970>)
   daf18:	4293      	cmp	r3, r2
   daf1a:	d128      	bne.n	daf6e <_strtod_l+0x8fe>
   daf1c:	9b04      	ldr	r3, [sp, #16]
   daf1e:	4650      	mov	r0, sl
   daf20:	b1eb      	cbz	r3, daf5e <_strtod_l+0x8ee>
   daf22:	4a2d      	ldr	r2, [pc, #180]	; (dafd8 <_strtod_l+0x968>)
   daf24:	403a      	ands	r2, r7
   daf26:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   daf2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   daf2e:	d819      	bhi.n	daf64 <_strtod_l+0x8f4>
   daf30:	0d12      	lsrs	r2, r2, #20
   daf32:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   daf36:	fa01 f303 	lsl.w	r3, r1, r3
   daf3a:	4298      	cmp	r0, r3
   daf3c:	d117      	bne.n	daf6e <_strtod_l+0x8fe>
   daf3e:	4b29      	ldr	r3, [pc, #164]	; (dafe4 <_strtod_l+0x974>)
   daf40:	429f      	cmp	r7, r3
   daf42:	d102      	bne.n	daf4a <_strtod_l+0x8da>
   daf44:	3001      	adds	r0, #1
   daf46:	f43f addf 	beq.w	dab08 <_strtod_l+0x498>
   daf4a:	4b23      	ldr	r3, [pc, #140]	; (dafd8 <_strtod_l+0x968>)
   daf4c:	403b      	ands	r3, r7
   daf4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   daf52:	f04f 0a00 	mov.w	sl, #0
   daf56:	9b04      	ldr	r3, [sp, #16]
   daf58:	2b00      	cmp	r3, #0
   daf5a:	d1a0      	bne.n	dae9e <_strtod_l+0x82e>
   daf5c:	e5de      	b.n	dab1c <_strtod_l+0x4ac>
   daf5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   daf62:	e7ea      	b.n	daf3a <_strtod_l+0x8ca>
   daf64:	460b      	mov	r3, r1
   daf66:	e7e8      	b.n	daf3a <_strtod_l+0x8ca>
   daf68:	ea53 030a 	orrs.w	r3, r3, sl
   daf6c:	d088      	beq.n	dae80 <_strtod_l+0x810>
   daf6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   daf70:	b1db      	cbz	r3, dafaa <_strtod_l+0x93a>
   daf72:	423b      	tst	r3, r7
   daf74:	d0ef      	beq.n	daf56 <_strtod_l+0x8e6>
   daf76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   daf78:	9a04      	ldr	r2, [sp, #16]
   daf7a:	4650      	mov	r0, sl
   daf7c:	4659      	mov	r1, fp
   daf7e:	b1c3      	cbz	r3, dafb2 <_strtod_l+0x942>
   daf80:	f7ff fb5a 	bl	da638 <sulp>
   daf84:	4602      	mov	r2, r0
   daf86:	460b      	mov	r3, r1
   daf88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   daf8c:	f7fe fd0a 	bl	d99a4 <__adddf3>
   daf90:	4682      	mov	sl, r0
   daf92:	468b      	mov	fp, r1
   daf94:	e7df      	b.n	daf56 <_strtod_l+0x8e6>
   daf96:	4013      	ands	r3, r2
   daf98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   daf9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dafa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dafa4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dafa8:	e7d5      	b.n	daf56 <_strtod_l+0x8e6>
   dafaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dafac:	ea13 0f0a 	tst.w	r3, sl
   dafb0:	e7e0      	b.n	daf74 <_strtod_l+0x904>
   dafb2:	f7ff fb41 	bl	da638 <sulp>
   dafb6:	4602      	mov	r2, r0
   dafb8:	460b      	mov	r3, r1
   dafba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dafbe:	f7fe fcef 	bl	d99a0 <__aeabi_dsub>
   dafc2:	2200      	movs	r2, #0
   dafc4:	2300      	movs	r3, #0
   dafc6:	4682      	mov	sl, r0
   dafc8:	468b      	mov	fp, r1
   dafca:	f7ff f909 	bl	da1e0 <__aeabi_dcmpeq>
   dafce:	2800      	cmp	r0, #0
   dafd0:	d0c1      	beq.n	daf56 <_strtod_l+0x8e6>
   dafd2:	e60e      	b.n	dabf2 <_strtod_l+0x582>
   dafd4:	fffffc02 	.word	0xfffffc02
   dafd8:	7ff00000 	.word	0x7ff00000
   dafdc:	39500000 	.word	0x39500000
   dafe0:	000fffff 	.word	0x000fffff
   dafe4:	7fefffff 	.word	0x7fefffff
   dafe8:	000dd070 	.word	0x000dd070
   dafec:	4631      	mov	r1, r6
   dafee:	4628      	mov	r0, r5
   daff0:	f001 f95e 	bl	dc2b0 <__ratio>
   daff4:	ec59 8b10 	vmov	r8, r9, d0
   daff8:	ee10 0a10 	vmov	r0, s0
   daffc:	2200      	movs	r2, #0
   daffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db002:	4649      	mov	r1, r9
   db004:	f7ff f900 	bl	da208 <__aeabi_dcmple>
   db008:	2800      	cmp	r0, #0
   db00a:	d07c      	beq.n	db106 <_strtod_l+0xa96>
   db00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db00e:	2b00      	cmp	r3, #0
   db010:	d04c      	beq.n	db0ac <_strtod_l+0xa3c>
   db012:	4b95      	ldr	r3, [pc, #596]	; (db268 <_strtod_l+0xbf8>)
   db014:	2200      	movs	r2, #0
   db016:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db01a:	f8df 924c 	ldr.w	r9, [pc, #588]	; db268 <_strtod_l+0xbf8>
   db01e:	f04f 0800 	mov.w	r8, #0
   db022:	4b92      	ldr	r3, [pc, #584]	; (db26c <_strtod_l+0xbfc>)
   db024:	403b      	ands	r3, r7
   db026:	9311      	str	r3, [sp, #68]	; 0x44
   db028:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db02a:	4b91      	ldr	r3, [pc, #580]	; (db270 <_strtod_l+0xc00>)
   db02c:	429a      	cmp	r2, r3
   db02e:	f040 80b2 	bne.w	db196 <_strtod_l+0xb26>
   db032:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db03a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   db03e:	ec4b ab10 	vmov	d0, sl, fp
   db042:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   db046:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db04a:	f001 f865 	bl	dc118 <__ulp>
   db04e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db052:	ec53 2b10 	vmov	r2, r3, d0
   db056:	f7fe fe5b 	bl	d9d10 <__aeabi_dmul>
   db05a:	4652      	mov	r2, sl
   db05c:	465b      	mov	r3, fp
   db05e:	f7fe fca1 	bl	d99a4 <__adddf3>
   db062:	460b      	mov	r3, r1
   db064:	4981      	ldr	r1, [pc, #516]	; (db26c <_strtod_l+0xbfc>)
   db066:	4a83      	ldr	r2, [pc, #524]	; (db274 <_strtod_l+0xc04>)
   db068:	4019      	ands	r1, r3
   db06a:	4291      	cmp	r1, r2
   db06c:	4682      	mov	sl, r0
   db06e:	d95e      	bls.n	db12e <_strtod_l+0xabe>
   db070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   db072:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   db076:	4293      	cmp	r3, r2
   db078:	d103      	bne.n	db082 <_strtod_l+0xa12>
   db07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db07c:	3301      	adds	r3, #1
   db07e:	f43f ad43 	beq.w	dab08 <_strtod_l+0x498>
   db082:	f8df b1fc 	ldr.w	fp, [pc, #508]	; db280 <_strtod_l+0xc10>
   db086:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db08a:	991e      	ldr	r1, [sp, #120]	; 0x78
   db08c:	4620      	mov	r0, r4
   db08e:	f000 fd7b 	bl	dbb88 <_Bfree>
   db092:	9907      	ldr	r1, [sp, #28]
   db094:	4620      	mov	r0, r4
   db096:	f000 fd77 	bl	dbb88 <_Bfree>
   db09a:	4631      	mov	r1, r6
   db09c:	4620      	mov	r0, r4
   db09e:	f000 fd73 	bl	dbb88 <_Bfree>
   db0a2:	4629      	mov	r1, r5
   db0a4:	4620      	mov	r0, r4
   db0a6:	f000 fd6f 	bl	dbb88 <_Bfree>
   db0aa:	e613      	b.n	dacd4 <_strtod_l+0x664>
   db0ac:	f1ba 0f00 	cmp.w	sl, #0
   db0b0:	d11b      	bne.n	db0ea <_strtod_l+0xa7a>
   db0b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db0b6:	b9f3      	cbnz	r3, db0f6 <_strtod_l+0xa86>
   db0b8:	4b6b      	ldr	r3, [pc, #428]	; (db268 <_strtod_l+0xbf8>)
   db0ba:	2200      	movs	r2, #0
   db0bc:	4640      	mov	r0, r8
   db0be:	4649      	mov	r1, r9
   db0c0:	f7ff f898 	bl	da1f4 <__aeabi_dcmplt>
   db0c4:	b9d0      	cbnz	r0, db0fc <_strtod_l+0xa8c>
   db0c6:	4640      	mov	r0, r8
   db0c8:	4649      	mov	r1, r9
   db0ca:	4b6b      	ldr	r3, [pc, #428]	; (db278 <_strtod_l+0xc08>)
   db0cc:	2200      	movs	r2, #0
   db0ce:	f7fe fe1f 	bl	d9d10 <__aeabi_dmul>
   db0d2:	4680      	mov	r8, r0
   db0d4:	4689      	mov	r9, r1
   db0d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   db0da:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   db0de:	931b      	str	r3, [sp, #108]	; 0x6c
   db0e0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   db0e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db0e8:	e79b      	b.n	db022 <_strtod_l+0x9b2>
   db0ea:	f1ba 0f01 	cmp.w	sl, #1
   db0ee:	d102      	bne.n	db0f6 <_strtod_l+0xa86>
   db0f0:	2f00      	cmp	r7, #0
   db0f2:	f43f ad7e 	beq.w	dabf2 <_strtod_l+0x582>
   db0f6:	4b61      	ldr	r3, [pc, #388]	; (db27c <_strtod_l+0xc0c>)
   db0f8:	2200      	movs	r2, #0
   db0fa:	e78c      	b.n	db016 <_strtod_l+0x9a6>
   db0fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; db278 <_strtod_l+0xc08>
   db100:	f04f 0800 	mov.w	r8, #0
   db104:	e7e7      	b.n	db0d6 <_strtod_l+0xa66>
   db106:	4b5c      	ldr	r3, [pc, #368]	; (db278 <_strtod_l+0xc08>)
   db108:	4640      	mov	r0, r8
   db10a:	4649      	mov	r1, r9
   db10c:	2200      	movs	r2, #0
   db10e:	f7fe fdff 	bl	d9d10 <__aeabi_dmul>
   db112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db114:	4680      	mov	r8, r0
   db116:	4689      	mov	r9, r1
   db118:	b933      	cbnz	r3, db128 <_strtod_l+0xab8>
   db11a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db11e:	9012      	str	r0, [sp, #72]	; 0x48
   db120:	9313      	str	r3, [sp, #76]	; 0x4c
   db122:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   db126:	e7dd      	b.n	db0e4 <_strtod_l+0xa74>
   db128:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   db12c:	e7f9      	b.n	db122 <_strtod_l+0xab2>
   db12e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   db132:	9b04      	ldr	r3, [sp, #16]
   db134:	2b00      	cmp	r3, #0
   db136:	d1a8      	bne.n	db08a <_strtod_l+0xa1a>
   db138:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db13c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db13e:	0d1b      	lsrs	r3, r3, #20
   db140:	051b      	lsls	r3, r3, #20
   db142:	429a      	cmp	r2, r3
   db144:	d1a1      	bne.n	db08a <_strtod_l+0xa1a>
   db146:	4640      	mov	r0, r8
   db148:	4649      	mov	r1, r9
   db14a:	f001 f955 	bl	dc3f8 <__aeabi_d2lz>
   db14e:	f7fe fdb1 	bl	d9cb4 <__aeabi_l2d>
   db152:	4602      	mov	r2, r0
   db154:	460b      	mov	r3, r1
   db156:	4640      	mov	r0, r8
   db158:	4649      	mov	r1, r9
   db15a:	f7fe fc21 	bl	d99a0 <__aeabi_dsub>
   db15e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db160:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db164:	ea43 030a 	orr.w	r3, r3, sl
   db168:	4313      	orrs	r3, r2
   db16a:	4680      	mov	r8, r0
   db16c:	4689      	mov	r9, r1
   db16e:	d053      	beq.n	db218 <_strtod_l+0xba8>
   db170:	a335      	add	r3, pc, #212	; (adr r3, db248 <_strtod_l+0xbd8>)
   db172:	e9d3 2300 	ldrd	r2, r3, [r3]
   db176:	f7ff f83d 	bl	da1f4 <__aeabi_dcmplt>
   db17a:	2800      	cmp	r0, #0
   db17c:	f47f acce 	bne.w	dab1c <_strtod_l+0x4ac>
   db180:	a333      	add	r3, pc, #204	; (adr r3, db250 <_strtod_l+0xbe0>)
   db182:	e9d3 2300 	ldrd	r2, r3, [r3]
   db186:	4640      	mov	r0, r8
   db188:	4649      	mov	r1, r9
   db18a:	f7ff f851 	bl	da230 <__aeabi_dcmpgt>
   db18e:	2800      	cmp	r0, #0
   db190:	f43f af7b 	beq.w	db08a <_strtod_l+0xa1a>
   db194:	e4c2      	b.n	dab1c <_strtod_l+0x4ac>
   db196:	9b04      	ldr	r3, [sp, #16]
   db198:	b333      	cbz	r3, db1e8 <_strtod_l+0xb78>
   db19a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db19c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db1a0:	d822      	bhi.n	db1e8 <_strtod_l+0xb78>
   db1a2:	a32d      	add	r3, pc, #180	; (adr r3, db258 <_strtod_l+0xbe8>)
   db1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   db1a8:	4640      	mov	r0, r8
   db1aa:	4649      	mov	r1, r9
   db1ac:	f7ff f82c 	bl	da208 <__aeabi_dcmple>
   db1b0:	b1a0      	cbz	r0, db1dc <_strtod_l+0xb6c>
   db1b2:	4649      	mov	r1, r9
   db1b4:	4640      	mov	r0, r8
   db1b6:	f7ff f883 	bl	da2c0 <__aeabi_d2uiz>
   db1ba:	2801      	cmp	r0, #1
   db1bc:	bf38      	it	cc
   db1be:	2001      	movcc	r0, #1
   db1c0:	f7fe fd2c 	bl	d9c1c <__aeabi_ui2d>
   db1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db1c6:	4680      	mov	r8, r0
   db1c8:	4689      	mov	r9, r1
   db1ca:	bb13      	cbnz	r3, db212 <_strtod_l+0xba2>
   db1cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db1d0:	9014      	str	r0, [sp, #80]	; 0x50
   db1d2:	9315      	str	r3, [sp, #84]	; 0x54
   db1d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   db1d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db1dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db1de:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db1e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   db1e4:	1a9b      	subs	r3, r3, r2
   db1e6:	930d      	str	r3, [sp, #52]	; 0x34
   db1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db1ec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   db1f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db1f4:	f000 ff90 	bl	dc118 <__ulp>
   db1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db1fc:	ec53 2b10 	vmov	r2, r3, d0
   db200:	f7fe fd86 	bl	d9d10 <__aeabi_dmul>
   db204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db208:	f7fe fbcc 	bl	d99a4 <__adddf3>
   db20c:	4682      	mov	sl, r0
   db20e:	468b      	mov	fp, r1
   db210:	e78f      	b.n	db132 <_strtod_l+0xac2>
   db212:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   db216:	e7dd      	b.n	db1d4 <_strtod_l+0xb64>
   db218:	a311      	add	r3, pc, #68	; (adr r3, db260 <_strtod_l+0xbf0>)
   db21a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db21e:	f7fe ffe9 	bl	da1f4 <__aeabi_dcmplt>
   db222:	e7b4      	b.n	db18e <_strtod_l+0xb1e>
   db224:	2300      	movs	r3, #0
   db226:	930e      	str	r3, [sp, #56]	; 0x38
   db228:	9a19      	ldr	r2, [sp, #100]	; 0x64
   db22a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db22c:	6013      	str	r3, [r2, #0]
   db22e:	f7ff ba65 	b.w	da6fc <_strtod_l+0x8c>
   db232:	2b65      	cmp	r3, #101	; 0x65
   db234:	f43f ab5d 	beq.w	da8f2 <_strtod_l+0x282>
   db238:	2b45      	cmp	r3, #69	; 0x45
   db23a:	f43f ab5a 	beq.w	da8f2 <_strtod_l+0x282>
   db23e:	2201      	movs	r2, #1
   db240:	f7ff bb92 	b.w	da968 <_strtod_l+0x2f8>
   db244:	f3af 8000 	nop.w
   db248:	94a03595 	.word	0x94a03595
   db24c:	3fdfffff 	.word	0x3fdfffff
   db250:	35afe535 	.word	0x35afe535
   db254:	3fe00000 	.word	0x3fe00000
   db258:	ffc00000 	.word	0xffc00000
   db25c:	41dfffff 	.word	0x41dfffff
   db260:	94a03595 	.word	0x94a03595
   db264:	3fcfffff 	.word	0x3fcfffff
   db268:	3ff00000 	.word	0x3ff00000
   db26c:	7ff00000 	.word	0x7ff00000
   db270:	7fe00000 	.word	0x7fe00000
   db274:	7c9fffff 	.word	0x7c9fffff
   db278:	3fe00000 	.word	0x3fe00000
   db27c:	bff00000 	.word	0xbff00000
   db280:	7fefffff 	.word	0x7fefffff

000db284 <strtof>:
   db284:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   db288:	4e26      	ldr	r6, [pc, #152]	; (db324 <strtof+0xa0>)
   db28a:	4b27      	ldr	r3, [pc, #156]	; (db328 <strtof+0xa4>)
   db28c:	460a      	mov	r2, r1
   db28e:	ed2d 8b02 	vpush	{d8}
   db292:	4601      	mov	r1, r0
   db294:	6830      	ldr	r0, [r6, #0]
   db296:	f7ff f9eb 	bl	da670 <_strtod_l>
   db29a:	ec55 4b10 	vmov	r4, r5, d0
   db29e:	ee10 2a10 	vmov	r2, s0
   db2a2:	ee10 0a10 	vmov	r0, s0
   db2a6:	462b      	mov	r3, r5
   db2a8:	4629      	mov	r1, r5
   db2aa:	f7fe ffcb 	bl	da244 <__aeabi_dcmpun>
   db2ae:	b190      	cbz	r0, db2d6 <strtof+0x52>
   db2b0:	2d00      	cmp	r5, #0
   db2b2:	481e      	ldr	r0, [pc, #120]	; (db32c <strtof+0xa8>)
   db2b4:	da09      	bge.n	db2ca <strtof+0x46>
   db2b6:	f001 f88b 	bl	dc3d0 <nanf>
   db2ba:	eeb1 8a40 	vneg.f32	s16, s0
   db2be:	eeb0 0a48 	vmov.f32	s0, s16
   db2c2:	ecbd 8b02 	vpop	{d8}
   db2c6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   db2ca:	ecbd 8b02 	vpop	{d8}
   db2ce:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   db2d2:	f001 b87d 	b.w	dc3d0 <nanf>
   db2d6:	4620      	mov	r0, r4
   db2d8:	4629      	mov	r1, r5
   db2da:	f7ff f811 	bl	da300 <__aeabi_d2f>
   db2de:	ee08 0a10 	vmov	s16, r0
   db2e2:	eddf 7a13 	vldr	s15, [pc, #76]	; db330 <strtof+0xac>
   db2e6:	eeb0 7ac8 	vabs.f32	s14, s16
   db2ea:	eeb4 7a67 	vcmp.f32	s14, s15
   db2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db2f2:	dde4      	ble.n	db2be <strtof+0x3a>
   db2f4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
   db2f8:	4b0e      	ldr	r3, [pc, #56]	; (db334 <strtof+0xb0>)
   db2fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db2fe:	4620      	mov	r0, r4
   db300:	4649      	mov	r1, r9
   db302:	f7fe ff9f 	bl	da244 <__aeabi_dcmpun>
   db306:	b940      	cbnz	r0, db31a <strtof+0x96>
   db308:	4b0a      	ldr	r3, [pc, #40]	; (db334 <strtof+0xb0>)
   db30a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db30e:	4620      	mov	r0, r4
   db310:	4649      	mov	r1, r9
   db312:	f7fe ff79 	bl	da208 <__aeabi_dcmple>
   db316:	2800      	cmp	r0, #0
   db318:	d0d1      	beq.n	db2be <strtof+0x3a>
   db31a:	6833      	ldr	r3, [r6, #0]
   db31c:	2222      	movs	r2, #34	; 0x22
   db31e:	601a      	str	r2, [r3, #0]
   db320:	e7cd      	b.n	db2be <strtof+0x3a>
   db322:	bf00      	nop
   db324:	2003e230 	.word	0x2003e230
   db328:	2003e298 	.word	0x2003e298
   db32c:	000dcffc 	.word	0x000dcffc
   db330:	7f7fffff 	.word	0x7f7fffff
   db334:	7fefffff 	.word	0x7fefffff

000db338 <_strtol_l.isra.0>:
   db338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db33c:	4e3a      	ldr	r6, [pc, #232]	; (db428 <_strtol_l.isra.0+0xf0>)
   db33e:	4686      	mov	lr, r0
   db340:	468c      	mov	ip, r1
   db342:	4660      	mov	r0, ip
   db344:	f81c 4b01 	ldrb.w	r4, [ip], #1
   db348:	5da5      	ldrb	r5, [r4, r6]
   db34a:	f015 0508 	ands.w	r5, r5, #8
   db34e:	d1f8      	bne.n	db342 <_strtol_l.isra.0+0xa>
   db350:	2c2d      	cmp	r4, #45	; 0x2d
   db352:	d133      	bne.n	db3bc <_strtol_l.isra.0+0x84>
   db354:	f89c 4000 	ldrb.w	r4, [ip]
   db358:	f04f 0801 	mov.w	r8, #1
   db35c:	f100 0c02 	add.w	ip, r0, #2
   db360:	2b00      	cmp	r3, #0
   db362:	d05c      	beq.n	db41e <_strtol_l.isra.0+0xe6>
   db364:	2b10      	cmp	r3, #16
   db366:	d10c      	bne.n	db382 <_strtol_l.isra.0+0x4a>
   db368:	2c30      	cmp	r4, #48	; 0x30
   db36a:	d10a      	bne.n	db382 <_strtol_l.isra.0+0x4a>
   db36c:	f89c 0000 	ldrb.w	r0, [ip]
   db370:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db374:	2858      	cmp	r0, #88	; 0x58
   db376:	d14d      	bne.n	db414 <_strtol_l.isra.0+0xdc>
   db378:	f89c 4001 	ldrb.w	r4, [ip, #1]
   db37c:	2310      	movs	r3, #16
   db37e:	f10c 0c02 	add.w	ip, ip, #2
   db382:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   db386:	3f01      	subs	r7, #1
   db388:	2600      	movs	r6, #0
   db38a:	fbb7 f9f3 	udiv	r9, r7, r3
   db38e:	4630      	mov	r0, r6
   db390:	fb03 7a19 	mls	sl, r3, r9, r7
   db394:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   db398:	2d09      	cmp	r5, #9
   db39a:	d818      	bhi.n	db3ce <_strtol_l.isra.0+0x96>
   db39c:	462c      	mov	r4, r5
   db39e:	42a3      	cmp	r3, r4
   db3a0:	dd24      	ble.n	db3ec <_strtol_l.isra.0+0xb4>
   db3a2:	1c75      	adds	r5, r6, #1
   db3a4:	d007      	beq.n	db3b6 <_strtol_l.isra.0+0x7e>
   db3a6:	4581      	cmp	r9, r0
   db3a8:	d31d      	bcc.n	db3e6 <_strtol_l.isra.0+0xae>
   db3aa:	d101      	bne.n	db3b0 <_strtol_l.isra.0+0x78>
   db3ac:	45a2      	cmp	sl, r4
   db3ae:	db1a      	blt.n	db3e6 <_strtol_l.isra.0+0xae>
   db3b0:	fb00 4003 	mla	r0, r0, r3, r4
   db3b4:	2601      	movs	r6, #1
   db3b6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   db3ba:	e7eb      	b.n	db394 <_strtol_l.isra.0+0x5c>
   db3bc:	2c2b      	cmp	r4, #43	; 0x2b
   db3be:	bf08      	it	eq
   db3c0:	f89c 4000 	ldrbeq.w	r4, [ip]
   db3c4:	46a8      	mov	r8, r5
   db3c6:	bf08      	it	eq
   db3c8:	f100 0c02 	addeq.w	ip, r0, #2
   db3cc:	e7c8      	b.n	db360 <_strtol_l.isra.0+0x28>
   db3ce:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   db3d2:	2d19      	cmp	r5, #25
   db3d4:	d801      	bhi.n	db3da <_strtol_l.isra.0+0xa2>
   db3d6:	3c37      	subs	r4, #55	; 0x37
   db3d8:	e7e1      	b.n	db39e <_strtol_l.isra.0+0x66>
   db3da:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   db3de:	2d19      	cmp	r5, #25
   db3e0:	d804      	bhi.n	db3ec <_strtol_l.isra.0+0xb4>
   db3e2:	3c57      	subs	r4, #87	; 0x57
   db3e4:	e7db      	b.n	db39e <_strtol_l.isra.0+0x66>
   db3e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   db3ea:	e7e4      	b.n	db3b6 <_strtol_l.isra.0+0x7e>
   db3ec:	1c73      	adds	r3, r6, #1
   db3ee:	d106      	bne.n	db3fe <_strtol_l.isra.0+0xc6>
   db3f0:	2322      	movs	r3, #34	; 0x22
   db3f2:	f8ce 3000 	str.w	r3, [lr]
   db3f6:	4638      	mov	r0, r7
   db3f8:	b942      	cbnz	r2, db40c <_strtol_l.isra.0+0xd4>
   db3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db3fe:	f1b8 0f00 	cmp.w	r8, #0
   db402:	d000      	beq.n	db406 <_strtol_l.isra.0+0xce>
   db404:	4240      	negs	r0, r0
   db406:	2a00      	cmp	r2, #0
   db408:	d0f7      	beq.n	db3fa <_strtol_l.isra.0+0xc2>
   db40a:	b10e      	cbz	r6, db410 <_strtol_l.isra.0+0xd8>
   db40c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   db410:	6011      	str	r1, [r2, #0]
   db412:	e7f2      	b.n	db3fa <_strtol_l.isra.0+0xc2>
   db414:	2430      	movs	r4, #48	; 0x30
   db416:	2b00      	cmp	r3, #0
   db418:	d1b3      	bne.n	db382 <_strtol_l.isra.0+0x4a>
   db41a:	2308      	movs	r3, #8
   db41c:	e7b1      	b.n	db382 <_strtol_l.isra.0+0x4a>
   db41e:	2c30      	cmp	r4, #48	; 0x30
   db420:	d0a4      	beq.n	db36c <_strtol_l.isra.0+0x34>
   db422:	230a      	movs	r3, #10
   db424:	e7ad      	b.n	db382 <_strtol_l.isra.0+0x4a>
   db426:	bf00      	nop
   db428:	000dd099 	.word	0x000dd099

000db42c <strtol>:
   db42c:	4613      	mov	r3, r2
   db42e:	460a      	mov	r2, r1
   db430:	4601      	mov	r1, r0
   db432:	4802      	ldr	r0, [pc, #8]	; (db43c <strtol+0x10>)
   db434:	6800      	ldr	r0, [r0, #0]
   db436:	f7ff bf7f 	b.w	db338 <_strtol_l.isra.0>
   db43a:	bf00      	nop
   db43c:	2003e230 	.word	0x2003e230

000db440 <rshift>:
   db440:	6903      	ldr	r3, [r0, #16]
   db442:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   db446:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db44a:	ea4f 1261 	mov.w	r2, r1, asr #5
   db44e:	f100 0414 	add.w	r4, r0, #20
   db452:	dd45      	ble.n	db4e0 <rshift+0xa0>
   db454:	f011 011f 	ands.w	r1, r1, #31
   db458:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   db45c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   db460:	d10c      	bne.n	db47c <rshift+0x3c>
   db462:	f100 0710 	add.w	r7, r0, #16
   db466:	4629      	mov	r1, r5
   db468:	42b1      	cmp	r1, r6
   db46a:	d334      	bcc.n	db4d6 <rshift+0x96>
   db46c:	1a9b      	subs	r3, r3, r2
   db46e:	009b      	lsls	r3, r3, #2
   db470:	1eea      	subs	r2, r5, #3
   db472:	4296      	cmp	r6, r2
   db474:	bf38      	it	cc
   db476:	2300      	movcc	r3, #0
   db478:	4423      	add	r3, r4
   db47a:	e015      	b.n	db4a8 <rshift+0x68>
   db47c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   db480:	f1c1 0820 	rsb	r8, r1, #32
   db484:	40cf      	lsrs	r7, r1
   db486:	f105 0e04 	add.w	lr, r5, #4
   db48a:	46a1      	mov	r9, r4
   db48c:	4576      	cmp	r6, lr
   db48e:	46f4      	mov	ip, lr
   db490:	d815      	bhi.n	db4be <rshift+0x7e>
   db492:	1a9b      	subs	r3, r3, r2
   db494:	009a      	lsls	r2, r3, #2
   db496:	3a04      	subs	r2, #4
   db498:	3501      	adds	r5, #1
   db49a:	42ae      	cmp	r6, r5
   db49c:	bf38      	it	cc
   db49e:	2200      	movcc	r2, #0
   db4a0:	18a3      	adds	r3, r4, r2
   db4a2:	50a7      	str	r7, [r4, r2]
   db4a4:	b107      	cbz	r7, db4a8 <rshift+0x68>
   db4a6:	3304      	adds	r3, #4
   db4a8:	1b1a      	subs	r2, r3, r4
   db4aa:	42a3      	cmp	r3, r4
   db4ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
   db4b0:	bf08      	it	eq
   db4b2:	2300      	moveq	r3, #0
   db4b4:	6102      	str	r2, [r0, #16]
   db4b6:	bf08      	it	eq
   db4b8:	6143      	streq	r3, [r0, #20]
   db4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db4be:	f8dc c000 	ldr.w	ip, [ip]
   db4c2:	fa0c fc08 	lsl.w	ip, ip, r8
   db4c6:	ea4c 0707 	orr.w	r7, ip, r7
   db4ca:	f849 7b04 	str.w	r7, [r9], #4
   db4ce:	f85e 7b04 	ldr.w	r7, [lr], #4
   db4d2:	40cf      	lsrs	r7, r1
   db4d4:	e7da      	b.n	db48c <rshift+0x4c>
   db4d6:	f851 cb04 	ldr.w	ip, [r1], #4
   db4da:	f847 cf04 	str.w	ip, [r7, #4]!
   db4de:	e7c3      	b.n	db468 <rshift+0x28>
   db4e0:	4623      	mov	r3, r4
   db4e2:	e7e1      	b.n	db4a8 <rshift+0x68>

000db4e4 <__hexdig_fun>:
   db4e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   db4e8:	2b09      	cmp	r3, #9
   db4ea:	d802      	bhi.n	db4f2 <__hexdig_fun+0xe>
   db4ec:	3820      	subs	r0, #32
   db4ee:	b2c0      	uxtb	r0, r0
   db4f0:	4770      	bx	lr
   db4f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   db4f6:	2b05      	cmp	r3, #5
   db4f8:	d801      	bhi.n	db4fe <__hexdig_fun+0x1a>
   db4fa:	3847      	subs	r0, #71	; 0x47
   db4fc:	e7f7      	b.n	db4ee <__hexdig_fun+0xa>
   db4fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   db502:	2b05      	cmp	r3, #5
   db504:	d801      	bhi.n	db50a <__hexdig_fun+0x26>
   db506:	3827      	subs	r0, #39	; 0x27
   db508:	e7f1      	b.n	db4ee <__hexdig_fun+0xa>
   db50a:	2000      	movs	r0, #0
   db50c:	4770      	bx	lr
	...

000db510 <__gethex>:
   db510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db514:	ed2d 8b02 	vpush	{d8}
   db518:	b089      	sub	sp, #36	; 0x24
   db51a:	ee08 0a10 	vmov	s16, r0
   db51e:	9304      	str	r3, [sp, #16]
   db520:	4bbc      	ldr	r3, [pc, #752]	; (db814 <__gethex+0x304>)
   db522:	681b      	ldr	r3, [r3, #0]
   db524:	9301      	str	r3, [sp, #4]
   db526:	4618      	mov	r0, r3
   db528:	468b      	mov	fp, r1
   db52a:	4690      	mov	r8, r2
   db52c:	f7ff f857 	bl	da5de <strlen>
   db530:	9b01      	ldr	r3, [sp, #4]
   db532:	f8db 2000 	ldr.w	r2, [fp]
   db536:	4403      	add	r3, r0
   db538:	4682      	mov	sl, r0
   db53a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   db53e:	9305      	str	r3, [sp, #20]
   db540:	1c93      	adds	r3, r2, #2
   db542:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   db546:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   db54a:	32fe      	adds	r2, #254	; 0xfe
   db54c:	18d1      	adds	r1, r2, r3
   db54e:	461f      	mov	r7, r3
   db550:	f813 0b01 	ldrb.w	r0, [r3], #1
   db554:	9100      	str	r1, [sp, #0]
   db556:	2830      	cmp	r0, #48	; 0x30
   db558:	d0f8      	beq.n	db54c <__gethex+0x3c>
   db55a:	f7ff ffc3 	bl	db4e4 <__hexdig_fun>
   db55e:	4604      	mov	r4, r0
   db560:	2800      	cmp	r0, #0
   db562:	d13a      	bne.n	db5da <__gethex+0xca>
   db564:	9901      	ldr	r1, [sp, #4]
   db566:	4652      	mov	r2, sl
   db568:	4638      	mov	r0, r7
   db56a:	f7ff f840 	bl	da5ee <strncmp>
   db56e:	4605      	mov	r5, r0
   db570:	2800      	cmp	r0, #0
   db572:	d168      	bne.n	db646 <__gethex+0x136>
   db574:	f817 000a 	ldrb.w	r0, [r7, sl]
   db578:	eb07 060a 	add.w	r6, r7, sl
   db57c:	f7ff ffb2 	bl	db4e4 <__hexdig_fun>
   db580:	2800      	cmp	r0, #0
   db582:	d062      	beq.n	db64a <__gethex+0x13a>
   db584:	4633      	mov	r3, r6
   db586:	7818      	ldrb	r0, [r3, #0]
   db588:	2830      	cmp	r0, #48	; 0x30
   db58a:	461f      	mov	r7, r3
   db58c:	f103 0301 	add.w	r3, r3, #1
   db590:	d0f9      	beq.n	db586 <__gethex+0x76>
   db592:	f7ff ffa7 	bl	db4e4 <__hexdig_fun>
   db596:	2301      	movs	r3, #1
   db598:	fab0 f480 	clz	r4, r0
   db59c:	0964      	lsrs	r4, r4, #5
   db59e:	4635      	mov	r5, r6
   db5a0:	9300      	str	r3, [sp, #0]
   db5a2:	463a      	mov	r2, r7
   db5a4:	4616      	mov	r6, r2
   db5a6:	3201      	adds	r2, #1
   db5a8:	7830      	ldrb	r0, [r6, #0]
   db5aa:	f7ff ff9b 	bl	db4e4 <__hexdig_fun>
   db5ae:	2800      	cmp	r0, #0
   db5b0:	d1f8      	bne.n	db5a4 <__gethex+0x94>
   db5b2:	9901      	ldr	r1, [sp, #4]
   db5b4:	4652      	mov	r2, sl
   db5b6:	4630      	mov	r0, r6
   db5b8:	f7ff f819 	bl	da5ee <strncmp>
   db5bc:	b980      	cbnz	r0, db5e0 <__gethex+0xd0>
   db5be:	b94d      	cbnz	r5, db5d4 <__gethex+0xc4>
   db5c0:	eb06 050a 	add.w	r5, r6, sl
   db5c4:	462a      	mov	r2, r5
   db5c6:	4616      	mov	r6, r2
   db5c8:	3201      	adds	r2, #1
   db5ca:	7830      	ldrb	r0, [r6, #0]
   db5cc:	f7ff ff8a 	bl	db4e4 <__hexdig_fun>
   db5d0:	2800      	cmp	r0, #0
   db5d2:	d1f8      	bne.n	db5c6 <__gethex+0xb6>
   db5d4:	1bad      	subs	r5, r5, r6
   db5d6:	00ad      	lsls	r5, r5, #2
   db5d8:	e004      	b.n	db5e4 <__gethex+0xd4>
   db5da:	2400      	movs	r4, #0
   db5dc:	4625      	mov	r5, r4
   db5de:	e7e0      	b.n	db5a2 <__gethex+0x92>
   db5e0:	2d00      	cmp	r5, #0
   db5e2:	d1f7      	bne.n	db5d4 <__gethex+0xc4>
   db5e4:	7833      	ldrb	r3, [r6, #0]
   db5e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db5ea:	2b50      	cmp	r3, #80	; 0x50
   db5ec:	d13b      	bne.n	db666 <__gethex+0x156>
   db5ee:	7873      	ldrb	r3, [r6, #1]
   db5f0:	2b2b      	cmp	r3, #43	; 0x2b
   db5f2:	d02c      	beq.n	db64e <__gethex+0x13e>
   db5f4:	2b2d      	cmp	r3, #45	; 0x2d
   db5f6:	d02e      	beq.n	db656 <__gethex+0x146>
   db5f8:	1c71      	adds	r1, r6, #1
   db5fa:	f04f 0900 	mov.w	r9, #0
   db5fe:	7808      	ldrb	r0, [r1, #0]
   db600:	f7ff ff70 	bl	db4e4 <__hexdig_fun>
   db604:	1e43      	subs	r3, r0, #1
   db606:	b2db      	uxtb	r3, r3
   db608:	2b18      	cmp	r3, #24
   db60a:	d82c      	bhi.n	db666 <__gethex+0x156>
   db60c:	f1a0 0210 	sub.w	r2, r0, #16
   db610:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   db614:	f7ff ff66 	bl	db4e4 <__hexdig_fun>
   db618:	1e43      	subs	r3, r0, #1
   db61a:	b2db      	uxtb	r3, r3
   db61c:	2b18      	cmp	r3, #24
   db61e:	d91d      	bls.n	db65c <__gethex+0x14c>
   db620:	f1b9 0f00 	cmp.w	r9, #0
   db624:	d000      	beq.n	db628 <__gethex+0x118>
   db626:	4252      	negs	r2, r2
   db628:	4415      	add	r5, r2
   db62a:	f8cb 1000 	str.w	r1, [fp]
   db62e:	b1e4      	cbz	r4, db66a <__gethex+0x15a>
   db630:	9b00      	ldr	r3, [sp, #0]
   db632:	2b00      	cmp	r3, #0
   db634:	bf14      	ite	ne
   db636:	2700      	movne	r7, #0
   db638:	2706      	moveq	r7, #6
   db63a:	4638      	mov	r0, r7
   db63c:	b009      	add	sp, #36	; 0x24
   db63e:	ecbd 8b02 	vpop	{d8}
   db642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db646:	463e      	mov	r6, r7
   db648:	4625      	mov	r5, r4
   db64a:	2401      	movs	r4, #1
   db64c:	e7ca      	b.n	db5e4 <__gethex+0xd4>
   db64e:	f04f 0900 	mov.w	r9, #0
   db652:	1cb1      	adds	r1, r6, #2
   db654:	e7d3      	b.n	db5fe <__gethex+0xee>
   db656:	f04f 0901 	mov.w	r9, #1
   db65a:	e7fa      	b.n	db652 <__gethex+0x142>
   db65c:	230a      	movs	r3, #10
   db65e:	fb03 0202 	mla	r2, r3, r2, r0
   db662:	3a10      	subs	r2, #16
   db664:	e7d4      	b.n	db610 <__gethex+0x100>
   db666:	4631      	mov	r1, r6
   db668:	e7df      	b.n	db62a <__gethex+0x11a>
   db66a:	1bf3      	subs	r3, r6, r7
   db66c:	3b01      	subs	r3, #1
   db66e:	4621      	mov	r1, r4
   db670:	2b07      	cmp	r3, #7
   db672:	dc52      	bgt.n	db71a <__gethex+0x20a>
   db674:	ee18 0a10 	vmov	r0, s16
   db678:	f000 fa52 	bl	dbb20 <_Balloc>
   db67c:	f04f 0b00 	mov.w	fp, #0
   db680:	f100 0914 	add.w	r9, r0, #20
   db684:	f1ca 0301 	rsb	r3, sl, #1
   db688:	4604      	mov	r4, r0
   db68a:	f8cd 9008 	str.w	r9, [sp, #8]
   db68e:	f8cd b000 	str.w	fp, [sp]
   db692:	9306      	str	r3, [sp, #24]
   db694:	42b7      	cmp	r7, r6
   db696:	d343      	bcc.n	db720 <__gethex+0x210>
   db698:	9802      	ldr	r0, [sp, #8]
   db69a:	9b00      	ldr	r3, [sp, #0]
   db69c:	f840 3b04 	str.w	r3, [r0], #4
   db6a0:	eba0 0009 	sub.w	r0, r0, r9
   db6a4:	1080      	asrs	r0, r0, #2
   db6a6:	0146      	lsls	r6, r0, #5
   db6a8:	6120      	str	r0, [r4, #16]
   db6aa:	4618      	mov	r0, r3
   db6ac:	f000 faff 	bl	dbcae <__hi0bits>
   db6b0:	1a30      	subs	r0, r6, r0
   db6b2:	f8d8 6000 	ldr.w	r6, [r8]
   db6b6:	42b0      	cmp	r0, r6
   db6b8:	dd66      	ble.n	db788 <__gethex+0x278>
   db6ba:	1b87      	subs	r7, r0, r6
   db6bc:	4639      	mov	r1, r7
   db6be:	4620      	mov	r0, r4
   db6c0:	f000 fe4c 	bl	dc35c <__any_on>
   db6c4:	4682      	mov	sl, r0
   db6c6:	b1a8      	cbz	r0, db6f4 <__gethex+0x1e4>
   db6c8:	1e7b      	subs	r3, r7, #1
   db6ca:	1159      	asrs	r1, r3, #5
   db6cc:	f003 021f 	and.w	r2, r3, #31
   db6d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   db6d4:	f04f 0a01 	mov.w	sl, #1
   db6d8:	fa0a f202 	lsl.w	r2, sl, r2
   db6dc:	420a      	tst	r2, r1
   db6de:	d009      	beq.n	db6f4 <__gethex+0x1e4>
   db6e0:	4553      	cmp	r3, sl
   db6e2:	dd05      	ble.n	db6f0 <__gethex+0x1e0>
   db6e4:	1eb9      	subs	r1, r7, #2
   db6e6:	4620      	mov	r0, r4
   db6e8:	f000 fe38 	bl	dc35c <__any_on>
   db6ec:	2800      	cmp	r0, #0
   db6ee:	d148      	bne.n	db782 <__gethex+0x272>
   db6f0:	f04f 0a02 	mov.w	sl, #2
   db6f4:	4639      	mov	r1, r7
   db6f6:	4620      	mov	r0, r4
   db6f8:	f7ff fea2 	bl	db440 <rshift>
   db6fc:	443d      	add	r5, r7
   db6fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db702:	42ab      	cmp	r3, r5
   db704:	da4f      	bge.n	db7a6 <__gethex+0x296>
   db706:	ee18 0a10 	vmov	r0, s16
   db70a:	4621      	mov	r1, r4
   db70c:	f000 fa3c 	bl	dbb88 <_Bfree>
   db710:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db712:	2300      	movs	r3, #0
   db714:	6013      	str	r3, [r2, #0]
   db716:	27a3      	movs	r7, #163	; 0xa3
   db718:	e78f      	b.n	db63a <__gethex+0x12a>
   db71a:	3101      	adds	r1, #1
   db71c:	105b      	asrs	r3, r3, #1
   db71e:	e7a7      	b.n	db670 <__gethex+0x160>
   db720:	1e73      	subs	r3, r6, #1
   db722:	9a05      	ldr	r2, [sp, #20]
   db724:	9303      	str	r3, [sp, #12]
   db726:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   db72a:	4293      	cmp	r3, r2
   db72c:	d019      	beq.n	db762 <__gethex+0x252>
   db72e:	f1bb 0f20 	cmp.w	fp, #32
   db732:	d107      	bne.n	db744 <__gethex+0x234>
   db734:	9b02      	ldr	r3, [sp, #8]
   db736:	9a00      	ldr	r2, [sp, #0]
   db738:	f843 2b04 	str.w	r2, [r3], #4
   db73c:	9302      	str	r3, [sp, #8]
   db73e:	2300      	movs	r3, #0
   db740:	9300      	str	r3, [sp, #0]
   db742:	469b      	mov	fp, r3
   db744:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   db748:	f7ff fecc 	bl	db4e4 <__hexdig_fun>
   db74c:	9b00      	ldr	r3, [sp, #0]
   db74e:	f000 000f 	and.w	r0, r0, #15
   db752:	fa00 f00b 	lsl.w	r0, r0, fp
   db756:	4303      	orrs	r3, r0
   db758:	9300      	str	r3, [sp, #0]
   db75a:	f10b 0b04 	add.w	fp, fp, #4
   db75e:	9b03      	ldr	r3, [sp, #12]
   db760:	e00d      	b.n	db77e <__gethex+0x26e>
   db762:	9b03      	ldr	r3, [sp, #12]
   db764:	9a06      	ldr	r2, [sp, #24]
   db766:	4413      	add	r3, r2
   db768:	42bb      	cmp	r3, r7
   db76a:	d3e0      	bcc.n	db72e <__gethex+0x21e>
   db76c:	4618      	mov	r0, r3
   db76e:	9901      	ldr	r1, [sp, #4]
   db770:	9307      	str	r3, [sp, #28]
   db772:	4652      	mov	r2, sl
   db774:	f7fe ff3b 	bl	da5ee <strncmp>
   db778:	9b07      	ldr	r3, [sp, #28]
   db77a:	2800      	cmp	r0, #0
   db77c:	d1d7      	bne.n	db72e <__gethex+0x21e>
   db77e:	461e      	mov	r6, r3
   db780:	e788      	b.n	db694 <__gethex+0x184>
   db782:	f04f 0a03 	mov.w	sl, #3
   db786:	e7b5      	b.n	db6f4 <__gethex+0x1e4>
   db788:	da0a      	bge.n	db7a0 <__gethex+0x290>
   db78a:	1a37      	subs	r7, r6, r0
   db78c:	4621      	mov	r1, r4
   db78e:	ee18 0a10 	vmov	r0, s16
   db792:	463a      	mov	r2, r7
   db794:	f000 fbce 	bl	dbf34 <__lshift>
   db798:	1bed      	subs	r5, r5, r7
   db79a:	4604      	mov	r4, r0
   db79c:	f100 0914 	add.w	r9, r0, #20
   db7a0:	f04f 0a00 	mov.w	sl, #0
   db7a4:	e7ab      	b.n	db6fe <__gethex+0x1ee>
   db7a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   db7aa:	42a8      	cmp	r0, r5
   db7ac:	dd6d      	ble.n	db88a <__gethex+0x37a>
   db7ae:	1b45      	subs	r5, r0, r5
   db7b0:	42ae      	cmp	r6, r5
   db7b2:	dc31      	bgt.n	db818 <__gethex+0x308>
   db7b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   db7b8:	2b02      	cmp	r3, #2
   db7ba:	d023      	beq.n	db804 <__gethex+0x2f4>
   db7bc:	2b03      	cmp	r3, #3
   db7be:	d025      	beq.n	db80c <__gethex+0x2fc>
   db7c0:	2b01      	cmp	r3, #1
   db7c2:	d115      	bne.n	db7f0 <__gethex+0x2e0>
   db7c4:	42ae      	cmp	r6, r5
   db7c6:	d113      	bne.n	db7f0 <__gethex+0x2e0>
   db7c8:	2e01      	cmp	r6, #1
   db7ca:	d10b      	bne.n	db7e4 <__gethex+0x2d4>
   db7cc:	9a04      	ldr	r2, [sp, #16]
   db7ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
   db7d2:	6013      	str	r3, [r2, #0]
   db7d4:	2301      	movs	r3, #1
   db7d6:	6123      	str	r3, [r4, #16]
   db7d8:	f8c9 3000 	str.w	r3, [r9]
   db7dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   db7de:	2762      	movs	r7, #98	; 0x62
   db7e0:	601c      	str	r4, [r3, #0]
   db7e2:	e72a      	b.n	db63a <__gethex+0x12a>
   db7e4:	1e71      	subs	r1, r6, #1
   db7e6:	4620      	mov	r0, r4
   db7e8:	f000 fdb8 	bl	dc35c <__any_on>
   db7ec:	2800      	cmp	r0, #0
   db7ee:	d1ed      	bne.n	db7cc <__gethex+0x2bc>
   db7f0:	ee18 0a10 	vmov	r0, s16
   db7f4:	4621      	mov	r1, r4
   db7f6:	f000 f9c7 	bl	dbb88 <_Bfree>
   db7fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db7fc:	2300      	movs	r3, #0
   db7fe:	6013      	str	r3, [r2, #0]
   db800:	2750      	movs	r7, #80	; 0x50
   db802:	e71a      	b.n	db63a <__gethex+0x12a>
   db804:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db806:	2b00      	cmp	r3, #0
   db808:	d1f2      	bne.n	db7f0 <__gethex+0x2e0>
   db80a:	e7df      	b.n	db7cc <__gethex+0x2bc>
   db80c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db80e:	2b00      	cmp	r3, #0
   db810:	d1dc      	bne.n	db7cc <__gethex+0x2bc>
   db812:	e7ed      	b.n	db7f0 <__gethex+0x2e0>
   db814:	000dd19c 	.word	0x000dd19c
   db818:	1e6f      	subs	r7, r5, #1
   db81a:	f1ba 0f00 	cmp.w	sl, #0
   db81e:	d131      	bne.n	db884 <__gethex+0x374>
   db820:	b127      	cbz	r7, db82c <__gethex+0x31c>
   db822:	4639      	mov	r1, r7
   db824:	4620      	mov	r0, r4
   db826:	f000 fd99 	bl	dc35c <__any_on>
   db82a:	4682      	mov	sl, r0
   db82c:	117b      	asrs	r3, r7, #5
   db82e:	2101      	movs	r1, #1
   db830:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   db834:	f007 071f 	and.w	r7, r7, #31
   db838:	fa01 f707 	lsl.w	r7, r1, r7
   db83c:	421f      	tst	r7, r3
   db83e:	4629      	mov	r1, r5
   db840:	4620      	mov	r0, r4
   db842:	bf18      	it	ne
   db844:	f04a 0a02 	orrne.w	sl, sl, #2
   db848:	1b76      	subs	r6, r6, r5
   db84a:	f7ff fdf9 	bl	db440 <rshift>
   db84e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   db852:	2702      	movs	r7, #2
   db854:	f1ba 0f00 	cmp.w	sl, #0
   db858:	d048      	beq.n	db8ec <__gethex+0x3dc>
   db85a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   db85e:	2b02      	cmp	r3, #2
   db860:	d015      	beq.n	db88e <__gethex+0x37e>
   db862:	2b03      	cmp	r3, #3
   db864:	d017      	beq.n	db896 <__gethex+0x386>
   db866:	2b01      	cmp	r3, #1
   db868:	d109      	bne.n	db87e <__gethex+0x36e>
   db86a:	f01a 0f02 	tst.w	sl, #2
   db86e:	d006      	beq.n	db87e <__gethex+0x36e>
   db870:	f8d9 0000 	ldr.w	r0, [r9]
   db874:	ea4a 0a00 	orr.w	sl, sl, r0
   db878:	f01a 0f01 	tst.w	sl, #1
   db87c:	d10e      	bne.n	db89c <__gethex+0x38c>
   db87e:	f047 0710 	orr.w	r7, r7, #16
   db882:	e033      	b.n	db8ec <__gethex+0x3dc>
   db884:	f04f 0a01 	mov.w	sl, #1
   db888:	e7d0      	b.n	db82c <__gethex+0x31c>
   db88a:	2701      	movs	r7, #1
   db88c:	e7e2      	b.n	db854 <__gethex+0x344>
   db88e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db890:	f1c3 0301 	rsb	r3, r3, #1
   db894:	9315      	str	r3, [sp, #84]	; 0x54
   db896:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db898:	2b00      	cmp	r3, #0
   db89a:	d0f0      	beq.n	db87e <__gethex+0x36e>
   db89c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db8a0:	f104 0314 	add.w	r3, r4, #20
   db8a4:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   db8a8:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   db8ac:	f04f 0c00 	mov.w	ip, #0
   db8b0:	4618      	mov	r0, r3
   db8b2:	f853 2b04 	ldr.w	r2, [r3], #4
   db8b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   db8ba:	d01c      	beq.n	db8f6 <__gethex+0x3e6>
   db8bc:	3201      	adds	r2, #1
   db8be:	6002      	str	r2, [r0, #0]
   db8c0:	2f02      	cmp	r7, #2
   db8c2:	f104 0314 	add.w	r3, r4, #20
   db8c6:	d13a      	bne.n	db93e <__gethex+0x42e>
   db8c8:	f8d8 2000 	ldr.w	r2, [r8]
   db8cc:	3a01      	subs	r2, #1
   db8ce:	42b2      	cmp	r2, r6
   db8d0:	d10a      	bne.n	db8e8 <__gethex+0x3d8>
   db8d2:	1171      	asrs	r1, r6, #5
   db8d4:	2201      	movs	r2, #1
   db8d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   db8da:	f006 061f 	and.w	r6, r6, #31
   db8de:	fa02 f606 	lsl.w	r6, r2, r6
   db8e2:	421e      	tst	r6, r3
   db8e4:	bf18      	it	ne
   db8e6:	4617      	movne	r7, r2
   db8e8:	f047 0720 	orr.w	r7, r7, #32
   db8ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   db8ee:	601c      	str	r4, [r3, #0]
   db8f0:	9b04      	ldr	r3, [sp, #16]
   db8f2:	601d      	str	r5, [r3, #0]
   db8f4:	e6a1      	b.n	db63a <__gethex+0x12a>
   db8f6:	4299      	cmp	r1, r3
   db8f8:	f843 cc04 	str.w	ip, [r3, #-4]
   db8fc:	d8d8      	bhi.n	db8b0 <__gethex+0x3a0>
   db8fe:	68a3      	ldr	r3, [r4, #8]
   db900:	4599      	cmp	r9, r3
   db902:	db14      	blt.n	db92e <__gethex+0x41e>
   db904:	6861      	ldr	r1, [r4, #4]
   db906:	ee18 0a10 	vmov	r0, s16
   db90a:	3101      	adds	r1, #1
   db90c:	f000 f908 	bl	dbb20 <_Balloc>
   db910:	6922      	ldr	r2, [r4, #16]
   db912:	3202      	adds	r2, #2
   db914:	f104 010c 	add.w	r1, r4, #12
   db918:	4682      	mov	sl, r0
   db91a:	0092      	lsls	r2, r2, #2
   db91c:	300c      	adds	r0, #12
   db91e:	f7fe fddb 	bl	da4d8 <memcpy>
   db922:	4621      	mov	r1, r4
   db924:	ee18 0a10 	vmov	r0, s16
   db928:	f000 f92e 	bl	dbb88 <_Bfree>
   db92c:	4654      	mov	r4, sl
   db92e:	6923      	ldr	r3, [r4, #16]
   db930:	1c5a      	adds	r2, r3, #1
   db932:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   db936:	6122      	str	r2, [r4, #16]
   db938:	2201      	movs	r2, #1
   db93a:	615a      	str	r2, [r3, #20]
   db93c:	e7c0      	b.n	db8c0 <__gethex+0x3b0>
   db93e:	6922      	ldr	r2, [r4, #16]
   db940:	454a      	cmp	r2, r9
   db942:	dd0b      	ble.n	db95c <__gethex+0x44c>
   db944:	2101      	movs	r1, #1
   db946:	4620      	mov	r0, r4
   db948:	f7ff fd7a 	bl	db440 <rshift>
   db94c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db950:	3501      	adds	r5, #1
   db952:	42ab      	cmp	r3, r5
   db954:	f6ff aed7 	blt.w	db706 <__gethex+0x1f6>
   db958:	2701      	movs	r7, #1
   db95a:	e7c5      	b.n	db8e8 <__gethex+0x3d8>
   db95c:	f016 061f 	ands.w	r6, r6, #31
   db960:	d0fa      	beq.n	db958 <__gethex+0x448>
   db962:	449b      	add	fp, r3
   db964:	f1c6 0620 	rsb	r6, r6, #32
   db968:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   db96c:	f000 f99f 	bl	dbcae <__hi0bits>
   db970:	42b0      	cmp	r0, r6
   db972:	dbe7      	blt.n	db944 <__gethex+0x434>
   db974:	e7f0      	b.n	db958 <__gethex+0x448>
   db976:	bf00      	nop

000db978 <L_shift>:
   db978:	f1c2 0208 	rsb	r2, r2, #8
   db97c:	0092      	lsls	r2, r2, #2
   db97e:	b570      	push	{r4, r5, r6, lr}
   db980:	f1c2 0620 	rsb	r6, r2, #32
   db984:	6843      	ldr	r3, [r0, #4]
   db986:	6804      	ldr	r4, [r0, #0]
   db988:	fa03 f506 	lsl.w	r5, r3, r6
   db98c:	432c      	orrs	r4, r5
   db98e:	40d3      	lsrs	r3, r2
   db990:	6004      	str	r4, [r0, #0]
   db992:	f840 3f04 	str.w	r3, [r0, #4]!
   db996:	4288      	cmp	r0, r1
   db998:	d3f4      	bcc.n	db984 <L_shift+0xc>
   db99a:	bd70      	pop	{r4, r5, r6, pc}

000db99c <__match>:
   db99c:	b530      	push	{r4, r5, lr}
   db99e:	6803      	ldr	r3, [r0, #0]
   db9a0:	3301      	adds	r3, #1
   db9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   db9a6:	b914      	cbnz	r4, db9ae <__match+0x12>
   db9a8:	6003      	str	r3, [r0, #0]
   db9aa:	2001      	movs	r0, #1
   db9ac:	bd30      	pop	{r4, r5, pc}
   db9ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   db9b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   db9b6:	2d19      	cmp	r5, #25
   db9b8:	bf98      	it	ls
   db9ba:	3220      	addls	r2, #32
   db9bc:	42a2      	cmp	r2, r4
   db9be:	d0f0      	beq.n	db9a2 <__match+0x6>
   db9c0:	2000      	movs	r0, #0
   db9c2:	e7f3      	b.n	db9ac <__match+0x10>

000db9c4 <__hexnan>:
   db9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db9c8:	680b      	ldr	r3, [r1, #0]
   db9ca:	6801      	ldr	r1, [r0, #0]
   db9cc:	115e      	asrs	r6, r3, #5
   db9ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   db9d2:	f013 031f 	ands.w	r3, r3, #31
   db9d6:	b087      	sub	sp, #28
   db9d8:	bf18      	it	ne
   db9da:	3604      	addne	r6, #4
   db9dc:	2500      	movs	r5, #0
   db9de:	1f37      	subs	r7, r6, #4
   db9e0:	4682      	mov	sl, r0
   db9e2:	4690      	mov	r8, r2
   db9e4:	9301      	str	r3, [sp, #4]
   db9e6:	f846 5c04 	str.w	r5, [r6, #-4]
   db9ea:	46b9      	mov	r9, r7
   db9ec:	463c      	mov	r4, r7
   db9ee:	9502      	str	r5, [sp, #8]
   db9f0:	46ab      	mov	fp, r5
   db9f2:	784a      	ldrb	r2, [r1, #1]
   db9f4:	1c4b      	adds	r3, r1, #1
   db9f6:	9303      	str	r3, [sp, #12]
   db9f8:	b342      	cbz	r2, dba4c <__hexnan+0x88>
   db9fa:	4610      	mov	r0, r2
   db9fc:	9105      	str	r1, [sp, #20]
   db9fe:	9204      	str	r2, [sp, #16]
   dba00:	f7ff fd70 	bl	db4e4 <__hexdig_fun>
   dba04:	2800      	cmp	r0, #0
   dba06:	d14f      	bne.n	dbaa8 <__hexnan+0xe4>
   dba08:	9a04      	ldr	r2, [sp, #16]
   dba0a:	9905      	ldr	r1, [sp, #20]
   dba0c:	2a20      	cmp	r2, #32
   dba0e:	d818      	bhi.n	dba42 <__hexnan+0x7e>
   dba10:	9b02      	ldr	r3, [sp, #8]
   dba12:	459b      	cmp	fp, r3
   dba14:	dd13      	ble.n	dba3e <__hexnan+0x7a>
   dba16:	454c      	cmp	r4, r9
   dba18:	d206      	bcs.n	dba28 <__hexnan+0x64>
   dba1a:	2d07      	cmp	r5, #7
   dba1c:	dc04      	bgt.n	dba28 <__hexnan+0x64>
   dba1e:	462a      	mov	r2, r5
   dba20:	4649      	mov	r1, r9
   dba22:	4620      	mov	r0, r4
   dba24:	f7ff ffa8 	bl	db978 <L_shift>
   dba28:	4544      	cmp	r4, r8
   dba2a:	d950      	bls.n	dbace <__hexnan+0x10a>
   dba2c:	2300      	movs	r3, #0
   dba2e:	f1a4 0904 	sub.w	r9, r4, #4
   dba32:	f844 3c04 	str.w	r3, [r4, #-4]
   dba36:	f8cd b008 	str.w	fp, [sp, #8]
   dba3a:	464c      	mov	r4, r9
   dba3c:	461d      	mov	r5, r3
   dba3e:	9903      	ldr	r1, [sp, #12]
   dba40:	e7d7      	b.n	db9f2 <__hexnan+0x2e>
   dba42:	2a29      	cmp	r2, #41	; 0x29
   dba44:	d156      	bne.n	dbaf4 <__hexnan+0x130>
   dba46:	3102      	adds	r1, #2
   dba48:	f8ca 1000 	str.w	r1, [sl]
   dba4c:	f1bb 0f00 	cmp.w	fp, #0
   dba50:	d050      	beq.n	dbaf4 <__hexnan+0x130>
   dba52:	454c      	cmp	r4, r9
   dba54:	d206      	bcs.n	dba64 <__hexnan+0xa0>
   dba56:	2d07      	cmp	r5, #7
   dba58:	dc04      	bgt.n	dba64 <__hexnan+0xa0>
   dba5a:	462a      	mov	r2, r5
   dba5c:	4649      	mov	r1, r9
   dba5e:	4620      	mov	r0, r4
   dba60:	f7ff ff8a 	bl	db978 <L_shift>
   dba64:	4544      	cmp	r4, r8
   dba66:	d934      	bls.n	dbad2 <__hexnan+0x10e>
   dba68:	f1a8 0204 	sub.w	r2, r8, #4
   dba6c:	4623      	mov	r3, r4
   dba6e:	f853 1b04 	ldr.w	r1, [r3], #4
   dba72:	f842 1f04 	str.w	r1, [r2, #4]!
   dba76:	429f      	cmp	r7, r3
   dba78:	d2f9      	bcs.n	dba6e <__hexnan+0xaa>
   dba7a:	1b3b      	subs	r3, r7, r4
   dba7c:	f023 0303 	bic.w	r3, r3, #3
   dba80:	3304      	adds	r3, #4
   dba82:	3401      	adds	r4, #1
   dba84:	3e03      	subs	r6, #3
   dba86:	42b4      	cmp	r4, r6
   dba88:	bf88      	it	hi
   dba8a:	2304      	movhi	r3, #4
   dba8c:	4443      	add	r3, r8
   dba8e:	2200      	movs	r2, #0
   dba90:	f843 2b04 	str.w	r2, [r3], #4
   dba94:	429f      	cmp	r7, r3
   dba96:	d2fb      	bcs.n	dba90 <__hexnan+0xcc>
   dba98:	683b      	ldr	r3, [r7, #0]
   dba9a:	b91b      	cbnz	r3, dbaa4 <__hexnan+0xe0>
   dba9c:	4547      	cmp	r7, r8
   dba9e:	d127      	bne.n	dbaf0 <__hexnan+0x12c>
   dbaa0:	2301      	movs	r3, #1
   dbaa2:	603b      	str	r3, [r7, #0]
   dbaa4:	2005      	movs	r0, #5
   dbaa6:	e026      	b.n	dbaf6 <__hexnan+0x132>
   dbaa8:	3501      	adds	r5, #1
   dbaaa:	2d08      	cmp	r5, #8
   dbaac:	f10b 0b01 	add.w	fp, fp, #1
   dbab0:	dd06      	ble.n	dbac0 <__hexnan+0xfc>
   dbab2:	4544      	cmp	r4, r8
   dbab4:	d9c3      	bls.n	dba3e <__hexnan+0x7a>
   dbab6:	2300      	movs	r3, #0
   dbab8:	f844 3c04 	str.w	r3, [r4, #-4]
   dbabc:	2501      	movs	r5, #1
   dbabe:	3c04      	subs	r4, #4
   dbac0:	6822      	ldr	r2, [r4, #0]
   dbac2:	f000 000f 	and.w	r0, r0, #15
   dbac6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dbaca:	6022      	str	r2, [r4, #0]
   dbacc:	e7b7      	b.n	dba3e <__hexnan+0x7a>
   dbace:	2508      	movs	r5, #8
   dbad0:	e7b5      	b.n	dba3e <__hexnan+0x7a>
   dbad2:	9b01      	ldr	r3, [sp, #4]
   dbad4:	2b00      	cmp	r3, #0
   dbad6:	d0df      	beq.n	dba98 <__hexnan+0xd4>
   dbad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dbadc:	f1c3 0320 	rsb	r3, r3, #32
   dbae0:	fa22 f303 	lsr.w	r3, r2, r3
   dbae4:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dbae8:	401a      	ands	r2, r3
   dbaea:	f846 2c04 	str.w	r2, [r6, #-4]
   dbaee:	e7d3      	b.n	dba98 <__hexnan+0xd4>
   dbaf0:	3f04      	subs	r7, #4
   dbaf2:	e7d1      	b.n	dba98 <__hexnan+0xd4>
   dbaf4:	2004      	movs	r0, #4
   dbaf6:	b007      	add	sp, #28
   dbaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dbafc <__ascii_mbtowc>:
   dbafc:	b082      	sub	sp, #8
   dbafe:	b901      	cbnz	r1, dbb02 <__ascii_mbtowc+0x6>
   dbb00:	a901      	add	r1, sp, #4
   dbb02:	b142      	cbz	r2, dbb16 <__ascii_mbtowc+0x1a>
   dbb04:	b14b      	cbz	r3, dbb1a <__ascii_mbtowc+0x1e>
   dbb06:	7813      	ldrb	r3, [r2, #0]
   dbb08:	600b      	str	r3, [r1, #0]
   dbb0a:	7812      	ldrb	r2, [r2, #0]
   dbb0c:	1e10      	subs	r0, r2, #0
   dbb0e:	bf18      	it	ne
   dbb10:	2001      	movne	r0, #1
   dbb12:	b002      	add	sp, #8
   dbb14:	4770      	bx	lr
   dbb16:	4610      	mov	r0, r2
   dbb18:	e7fb      	b.n	dbb12 <__ascii_mbtowc+0x16>
   dbb1a:	f06f 0001 	mvn.w	r0, #1
   dbb1e:	e7f8      	b.n	dbb12 <__ascii_mbtowc+0x16>

000dbb20 <_Balloc>:
   dbb20:	b570      	push	{r4, r5, r6, lr}
   dbb22:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dbb24:	4604      	mov	r4, r0
   dbb26:	460d      	mov	r5, r1
   dbb28:	b93e      	cbnz	r6, dbb3a <_Balloc+0x1a>
   dbb2a:	2010      	movs	r0, #16
   dbb2c:	f7fb ff74 	bl	d7a18 <malloc>
   dbb30:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dbb34:	6260      	str	r0, [r4, #36]	; 0x24
   dbb36:	6006      	str	r6, [r0, #0]
   dbb38:	60c6      	str	r6, [r0, #12]
   dbb3a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dbb3c:	68f3      	ldr	r3, [r6, #12]
   dbb3e:	b183      	cbz	r3, dbb62 <_Balloc+0x42>
   dbb40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dbb42:	68db      	ldr	r3, [r3, #12]
   dbb44:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dbb48:	b9b8      	cbnz	r0, dbb7a <_Balloc+0x5a>
   dbb4a:	2101      	movs	r1, #1
   dbb4c:	fa01 f605 	lsl.w	r6, r1, r5
   dbb50:	1d72      	adds	r2, r6, #5
   dbb52:	0092      	lsls	r2, r2, #2
   dbb54:	4620      	mov	r0, r4
   dbb56:	f000 fc22 	bl	dc39e <_calloc_r>
   dbb5a:	b160      	cbz	r0, dbb76 <_Balloc+0x56>
   dbb5c:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dbb60:	e00e      	b.n	dbb80 <_Balloc+0x60>
   dbb62:	2221      	movs	r2, #33	; 0x21
   dbb64:	2104      	movs	r1, #4
   dbb66:	4620      	mov	r0, r4
   dbb68:	f000 fc19 	bl	dc39e <_calloc_r>
   dbb6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dbb6e:	60f0      	str	r0, [r6, #12]
   dbb70:	68db      	ldr	r3, [r3, #12]
   dbb72:	2b00      	cmp	r3, #0
   dbb74:	d1e4      	bne.n	dbb40 <_Balloc+0x20>
   dbb76:	2000      	movs	r0, #0
   dbb78:	bd70      	pop	{r4, r5, r6, pc}
   dbb7a:	6802      	ldr	r2, [r0, #0]
   dbb7c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dbb80:	2300      	movs	r3, #0
   dbb82:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dbb86:	e7f7      	b.n	dbb78 <_Balloc+0x58>

000dbb88 <_Bfree>:
   dbb88:	b570      	push	{r4, r5, r6, lr}
   dbb8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dbb8c:	4605      	mov	r5, r0
   dbb8e:	460c      	mov	r4, r1
   dbb90:	b93e      	cbnz	r6, dbba2 <_Bfree+0x1a>
   dbb92:	2010      	movs	r0, #16
   dbb94:	f7fb ff40 	bl	d7a18 <malloc>
   dbb98:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dbb9c:	6268      	str	r0, [r5, #36]	; 0x24
   dbb9e:	6006      	str	r6, [r0, #0]
   dbba0:	60c6      	str	r6, [r0, #12]
   dbba2:	b13c      	cbz	r4, dbbb4 <_Bfree+0x2c>
   dbba4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dbba6:	6862      	ldr	r2, [r4, #4]
   dbba8:	68db      	ldr	r3, [r3, #12]
   dbbaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dbbae:	6021      	str	r1, [r4, #0]
   dbbb0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dbbb4:	bd70      	pop	{r4, r5, r6, pc}

000dbbb6 <__multadd>:
   dbbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbbba:	690e      	ldr	r6, [r1, #16]
   dbbbc:	4607      	mov	r7, r0
   dbbbe:	4698      	mov	r8, r3
   dbbc0:	460c      	mov	r4, r1
   dbbc2:	f101 0014 	add.w	r0, r1, #20
   dbbc6:	2300      	movs	r3, #0
   dbbc8:	6805      	ldr	r5, [r0, #0]
   dbbca:	b2a9      	uxth	r1, r5
   dbbcc:	fb02 8101 	mla	r1, r2, r1, r8
   dbbd0:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dbbd4:	0c2d      	lsrs	r5, r5, #16
   dbbd6:	fb02 c505 	mla	r5, r2, r5, ip
   dbbda:	b289      	uxth	r1, r1
   dbbdc:	3301      	adds	r3, #1
   dbbde:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dbbe2:	429e      	cmp	r6, r3
   dbbe4:	f840 1b04 	str.w	r1, [r0], #4
   dbbe8:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dbbec:	dcec      	bgt.n	dbbc8 <__multadd+0x12>
   dbbee:	f1b8 0f00 	cmp.w	r8, #0
   dbbf2:	d01b      	beq.n	dbc2c <__multadd+0x76>
   dbbf4:	68a3      	ldr	r3, [r4, #8]
   dbbf6:	42b3      	cmp	r3, r6
   dbbf8:	dc12      	bgt.n	dbc20 <__multadd+0x6a>
   dbbfa:	6861      	ldr	r1, [r4, #4]
   dbbfc:	4638      	mov	r0, r7
   dbbfe:	3101      	adds	r1, #1
   dbc00:	f7ff ff8e 	bl	dbb20 <_Balloc>
   dbc04:	6922      	ldr	r2, [r4, #16]
   dbc06:	3202      	adds	r2, #2
   dbc08:	f104 010c 	add.w	r1, r4, #12
   dbc0c:	4605      	mov	r5, r0
   dbc0e:	0092      	lsls	r2, r2, #2
   dbc10:	300c      	adds	r0, #12
   dbc12:	f7fe fc61 	bl	da4d8 <memcpy>
   dbc16:	4621      	mov	r1, r4
   dbc18:	4638      	mov	r0, r7
   dbc1a:	f7ff ffb5 	bl	dbb88 <_Bfree>
   dbc1e:	462c      	mov	r4, r5
   dbc20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dbc24:	3601      	adds	r6, #1
   dbc26:	f8c3 8014 	str.w	r8, [r3, #20]
   dbc2a:	6126      	str	r6, [r4, #16]
   dbc2c:	4620      	mov	r0, r4
   dbc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dbc32 <__s2b>:
   dbc32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbc36:	460c      	mov	r4, r1
   dbc38:	4615      	mov	r5, r2
   dbc3a:	461f      	mov	r7, r3
   dbc3c:	2209      	movs	r2, #9
   dbc3e:	3308      	adds	r3, #8
   dbc40:	4606      	mov	r6, r0
   dbc42:	fb93 f3f2 	sdiv	r3, r3, r2
   dbc46:	2100      	movs	r1, #0
   dbc48:	2201      	movs	r2, #1
   dbc4a:	429a      	cmp	r2, r3
   dbc4c:	db20      	blt.n	dbc90 <__s2b+0x5e>
   dbc4e:	4630      	mov	r0, r6
   dbc50:	f7ff ff66 	bl	dbb20 <_Balloc>
   dbc54:	9b08      	ldr	r3, [sp, #32]
   dbc56:	6143      	str	r3, [r0, #20]
   dbc58:	2d09      	cmp	r5, #9
   dbc5a:	f04f 0301 	mov.w	r3, #1
   dbc5e:	6103      	str	r3, [r0, #16]
   dbc60:	dd19      	ble.n	dbc96 <__s2b+0x64>
   dbc62:	f104 0909 	add.w	r9, r4, #9
   dbc66:	46c8      	mov	r8, r9
   dbc68:	442c      	add	r4, r5
   dbc6a:	f818 3b01 	ldrb.w	r3, [r8], #1
   dbc6e:	4601      	mov	r1, r0
   dbc70:	3b30      	subs	r3, #48	; 0x30
   dbc72:	220a      	movs	r2, #10
   dbc74:	4630      	mov	r0, r6
   dbc76:	f7ff ff9e 	bl	dbbb6 <__multadd>
   dbc7a:	45a0      	cmp	r8, r4
   dbc7c:	d1f5      	bne.n	dbc6a <__s2b+0x38>
   dbc7e:	f1a5 0408 	sub.w	r4, r5, #8
   dbc82:	444c      	add	r4, r9
   dbc84:	1b2d      	subs	r5, r5, r4
   dbc86:	1963      	adds	r3, r4, r5
   dbc88:	42bb      	cmp	r3, r7
   dbc8a:	db07      	blt.n	dbc9c <__s2b+0x6a>
   dbc8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbc90:	0052      	lsls	r2, r2, #1
   dbc92:	3101      	adds	r1, #1
   dbc94:	e7d9      	b.n	dbc4a <__s2b+0x18>
   dbc96:	340a      	adds	r4, #10
   dbc98:	2509      	movs	r5, #9
   dbc9a:	e7f3      	b.n	dbc84 <__s2b+0x52>
   dbc9c:	f814 3b01 	ldrb.w	r3, [r4], #1
   dbca0:	4601      	mov	r1, r0
   dbca2:	3b30      	subs	r3, #48	; 0x30
   dbca4:	220a      	movs	r2, #10
   dbca6:	4630      	mov	r0, r6
   dbca8:	f7ff ff85 	bl	dbbb6 <__multadd>
   dbcac:	e7eb      	b.n	dbc86 <__s2b+0x54>

000dbcae <__hi0bits>:
   dbcae:	0c03      	lsrs	r3, r0, #16
   dbcb0:	041b      	lsls	r3, r3, #16
   dbcb2:	b9d3      	cbnz	r3, dbcea <__hi0bits+0x3c>
   dbcb4:	0400      	lsls	r0, r0, #16
   dbcb6:	2310      	movs	r3, #16
   dbcb8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dbcbc:	bf04      	itt	eq
   dbcbe:	0200      	lsleq	r0, r0, #8
   dbcc0:	3308      	addeq	r3, #8
   dbcc2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dbcc6:	bf04      	itt	eq
   dbcc8:	0100      	lsleq	r0, r0, #4
   dbcca:	3304      	addeq	r3, #4
   dbccc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dbcd0:	bf04      	itt	eq
   dbcd2:	0080      	lsleq	r0, r0, #2
   dbcd4:	3302      	addeq	r3, #2
   dbcd6:	2800      	cmp	r0, #0
   dbcd8:	db05      	blt.n	dbce6 <__hi0bits+0x38>
   dbcda:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dbcde:	f103 0301 	add.w	r3, r3, #1
   dbce2:	bf08      	it	eq
   dbce4:	2320      	moveq	r3, #32
   dbce6:	4618      	mov	r0, r3
   dbce8:	4770      	bx	lr
   dbcea:	2300      	movs	r3, #0
   dbcec:	e7e4      	b.n	dbcb8 <__hi0bits+0xa>

000dbcee <__lo0bits>:
   dbcee:	6803      	ldr	r3, [r0, #0]
   dbcf0:	f013 0207 	ands.w	r2, r3, #7
   dbcf4:	4601      	mov	r1, r0
   dbcf6:	d00b      	beq.n	dbd10 <__lo0bits+0x22>
   dbcf8:	07da      	lsls	r2, r3, #31
   dbcfa:	d424      	bmi.n	dbd46 <__lo0bits+0x58>
   dbcfc:	0798      	lsls	r0, r3, #30
   dbcfe:	bf49      	itett	mi
   dbd00:	085b      	lsrmi	r3, r3, #1
   dbd02:	089b      	lsrpl	r3, r3, #2
   dbd04:	2001      	movmi	r0, #1
   dbd06:	600b      	strmi	r3, [r1, #0]
   dbd08:	bf5c      	itt	pl
   dbd0a:	600b      	strpl	r3, [r1, #0]
   dbd0c:	2002      	movpl	r0, #2
   dbd0e:	4770      	bx	lr
   dbd10:	b298      	uxth	r0, r3
   dbd12:	b9b0      	cbnz	r0, dbd42 <__lo0bits+0x54>
   dbd14:	0c1b      	lsrs	r3, r3, #16
   dbd16:	2010      	movs	r0, #16
   dbd18:	f013 0fff 	tst.w	r3, #255	; 0xff
   dbd1c:	bf04      	itt	eq
   dbd1e:	0a1b      	lsreq	r3, r3, #8
   dbd20:	3008      	addeq	r0, #8
   dbd22:	071a      	lsls	r2, r3, #28
   dbd24:	bf04      	itt	eq
   dbd26:	091b      	lsreq	r3, r3, #4
   dbd28:	3004      	addeq	r0, #4
   dbd2a:	079a      	lsls	r2, r3, #30
   dbd2c:	bf04      	itt	eq
   dbd2e:	089b      	lsreq	r3, r3, #2
   dbd30:	3002      	addeq	r0, #2
   dbd32:	07da      	lsls	r2, r3, #31
   dbd34:	d403      	bmi.n	dbd3e <__lo0bits+0x50>
   dbd36:	085b      	lsrs	r3, r3, #1
   dbd38:	f100 0001 	add.w	r0, r0, #1
   dbd3c:	d005      	beq.n	dbd4a <__lo0bits+0x5c>
   dbd3e:	600b      	str	r3, [r1, #0]
   dbd40:	4770      	bx	lr
   dbd42:	4610      	mov	r0, r2
   dbd44:	e7e8      	b.n	dbd18 <__lo0bits+0x2a>
   dbd46:	2000      	movs	r0, #0
   dbd48:	4770      	bx	lr
   dbd4a:	2020      	movs	r0, #32
   dbd4c:	4770      	bx	lr

000dbd4e <__i2b>:
   dbd4e:	b510      	push	{r4, lr}
   dbd50:	460c      	mov	r4, r1
   dbd52:	2101      	movs	r1, #1
   dbd54:	f7ff fee4 	bl	dbb20 <_Balloc>
   dbd58:	2201      	movs	r2, #1
   dbd5a:	6144      	str	r4, [r0, #20]
   dbd5c:	6102      	str	r2, [r0, #16]
   dbd5e:	bd10      	pop	{r4, pc}

000dbd60 <__multiply>:
   dbd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbd64:	4615      	mov	r5, r2
   dbd66:	690a      	ldr	r2, [r1, #16]
   dbd68:	692b      	ldr	r3, [r5, #16]
   dbd6a:	429a      	cmp	r2, r3
   dbd6c:	bfb8      	it	lt
   dbd6e:	460b      	movlt	r3, r1
   dbd70:	460c      	mov	r4, r1
   dbd72:	bfbc      	itt	lt
   dbd74:	462c      	movlt	r4, r5
   dbd76:	461d      	movlt	r5, r3
   dbd78:	6927      	ldr	r7, [r4, #16]
   dbd7a:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dbd7e:	68a3      	ldr	r3, [r4, #8]
   dbd80:	6861      	ldr	r1, [r4, #4]
   dbd82:	eb07 0609 	add.w	r6, r7, r9
   dbd86:	42b3      	cmp	r3, r6
   dbd88:	bfb8      	it	lt
   dbd8a:	3101      	addlt	r1, #1
   dbd8c:	b085      	sub	sp, #20
   dbd8e:	f7ff fec7 	bl	dbb20 <_Balloc>
   dbd92:	f100 0114 	add.w	r1, r0, #20
   dbd96:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dbd9a:	460b      	mov	r3, r1
   dbd9c:	2200      	movs	r2, #0
   dbd9e:	4543      	cmp	r3, r8
   dbda0:	d31d      	bcc.n	dbdde <__multiply+0x7e>
   dbda2:	f104 0314 	add.w	r3, r4, #20
   dbda6:	f105 0214 	add.w	r2, r5, #20
   dbdaa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dbdae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dbdb2:	9302      	str	r3, [sp, #8]
   dbdb4:	1b3b      	subs	r3, r7, r4
   dbdb6:	3b15      	subs	r3, #21
   dbdb8:	f023 0303 	bic.w	r3, r3, #3
   dbdbc:	3304      	adds	r3, #4
   dbdbe:	f104 0515 	add.w	r5, r4, #21
   dbdc2:	42af      	cmp	r7, r5
   dbdc4:	bf38      	it	cc
   dbdc6:	2304      	movcc	r3, #4
   dbdc8:	9301      	str	r3, [sp, #4]
   dbdca:	9b02      	ldr	r3, [sp, #8]
   dbdcc:	9203      	str	r2, [sp, #12]
   dbdce:	4293      	cmp	r3, r2
   dbdd0:	d808      	bhi.n	dbde4 <__multiply+0x84>
   dbdd2:	2e00      	cmp	r6, #0
   dbdd4:	dc5a      	bgt.n	dbe8c <__multiply+0x12c>
   dbdd6:	6106      	str	r6, [r0, #16]
   dbdd8:	b005      	add	sp, #20
   dbdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbdde:	f843 2b04 	str.w	r2, [r3], #4
   dbde2:	e7dc      	b.n	dbd9e <__multiply+0x3e>
   dbde4:	f8b2 a000 	ldrh.w	sl, [r2]
   dbde8:	f1ba 0f00 	cmp.w	sl, #0
   dbdec:	d024      	beq.n	dbe38 <__multiply+0xd8>
   dbdee:	f104 0e14 	add.w	lr, r4, #20
   dbdf2:	4689      	mov	r9, r1
   dbdf4:	f04f 0c00 	mov.w	ip, #0
   dbdf8:	f85e 5b04 	ldr.w	r5, [lr], #4
   dbdfc:	f8d9 b000 	ldr.w	fp, [r9]
   dbe00:	b2ab      	uxth	r3, r5
   dbe02:	fa1f fb8b 	uxth.w	fp, fp
   dbe06:	fb0a b303 	mla	r3, sl, r3, fp
   dbe0a:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dbe0e:	f8d9 5000 	ldr.w	r5, [r9]
   dbe12:	4463      	add	r3, ip
   dbe14:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dbe18:	fb0a c50b 	mla	r5, sl, fp, ip
   dbe1c:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dbe20:	b29b      	uxth	r3, r3
   dbe22:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dbe26:	4577      	cmp	r7, lr
   dbe28:	f849 3b04 	str.w	r3, [r9], #4
   dbe2c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dbe30:	d8e2      	bhi.n	dbdf8 <__multiply+0x98>
   dbe32:	9b01      	ldr	r3, [sp, #4]
   dbe34:	f841 c003 	str.w	ip, [r1, r3]
   dbe38:	9b03      	ldr	r3, [sp, #12]
   dbe3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dbe3e:	3204      	adds	r2, #4
   dbe40:	f1b9 0f00 	cmp.w	r9, #0
   dbe44:	d020      	beq.n	dbe88 <__multiply+0x128>
   dbe46:	680b      	ldr	r3, [r1, #0]
   dbe48:	f104 0c14 	add.w	ip, r4, #20
   dbe4c:	468e      	mov	lr, r1
   dbe4e:	f04f 0a00 	mov.w	sl, #0
   dbe52:	f8bc 5000 	ldrh.w	r5, [ip]
   dbe56:	f8be b002 	ldrh.w	fp, [lr, #2]
   dbe5a:	fb09 b505 	mla	r5, r9, r5, fp
   dbe5e:	44aa      	add	sl, r5
   dbe60:	b29b      	uxth	r3, r3
   dbe62:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dbe66:	f84e 3b04 	str.w	r3, [lr], #4
   dbe6a:	f85c 3b04 	ldr.w	r3, [ip], #4
   dbe6e:	f8be 5000 	ldrh.w	r5, [lr]
   dbe72:	0c1b      	lsrs	r3, r3, #16
   dbe74:	fb09 5303 	mla	r3, r9, r3, r5
   dbe78:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dbe7c:	4567      	cmp	r7, ip
   dbe7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dbe82:	d8e6      	bhi.n	dbe52 <__multiply+0xf2>
   dbe84:	9d01      	ldr	r5, [sp, #4]
   dbe86:	514b      	str	r3, [r1, r5]
   dbe88:	3104      	adds	r1, #4
   dbe8a:	e79e      	b.n	dbdca <__multiply+0x6a>
   dbe8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dbe90:	2b00      	cmp	r3, #0
   dbe92:	d1a0      	bne.n	dbdd6 <__multiply+0x76>
   dbe94:	3e01      	subs	r6, #1
   dbe96:	e79c      	b.n	dbdd2 <__multiply+0x72>

000dbe98 <__pow5mult>:
   dbe98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbe9c:	4615      	mov	r5, r2
   dbe9e:	f012 0203 	ands.w	r2, r2, #3
   dbea2:	4606      	mov	r6, r0
   dbea4:	460f      	mov	r7, r1
   dbea6:	d007      	beq.n	dbeb8 <__pow5mult+0x20>
   dbea8:	4c21      	ldr	r4, [pc, #132]	; (dbf30 <__pow5mult+0x98>)
   dbeaa:	3a01      	subs	r2, #1
   dbeac:	2300      	movs	r3, #0
   dbeae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dbeb2:	f7ff fe80 	bl	dbbb6 <__multadd>
   dbeb6:	4607      	mov	r7, r0
   dbeb8:	10ad      	asrs	r5, r5, #2
   dbeba:	d035      	beq.n	dbf28 <__pow5mult+0x90>
   dbebc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dbebe:	b93c      	cbnz	r4, dbed0 <__pow5mult+0x38>
   dbec0:	2010      	movs	r0, #16
   dbec2:	f7fb fda9 	bl	d7a18 <malloc>
   dbec6:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dbeca:	6270      	str	r0, [r6, #36]	; 0x24
   dbecc:	6004      	str	r4, [r0, #0]
   dbece:	60c4      	str	r4, [r0, #12]
   dbed0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dbed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dbed8:	b94c      	cbnz	r4, dbeee <__pow5mult+0x56>
   dbeda:	f240 2171 	movw	r1, #625	; 0x271
   dbede:	4630      	mov	r0, r6
   dbee0:	f7ff ff35 	bl	dbd4e <__i2b>
   dbee4:	2300      	movs	r3, #0
   dbee6:	f8c8 0008 	str.w	r0, [r8, #8]
   dbeea:	4604      	mov	r4, r0
   dbeec:	6003      	str	r3, [r0, #0]
   dbeee:	f04f 0900 	mov.w	r9, #0
   dbef2:	07eb      	lsls	r3, r5, #31
   dbef4:	d50a      	bpl.n	dbf0c <__pow5mult+0x74>
   dbef6:	4639      	mov	r1, r7
   dbef8:	4622      	mov	r2, r4
   dbefa:	4630      	mov	r0, r6
   dbefc:	f7ff ff30 	bl	dbd60 <__multiply>
   dbf00:	4639      	mov	r1, r7
   dbf02:	4680      	mov	r8, r0
   dbf04:	4630      	mov	r0, r6
   dbf06:	f7ff fe3f 	bl	dbb88 <_Bfree>
   dbf0a:	4647      	mov	r7, r8
   dbf0c:	106d      	asrs	r5, r5, #1
   dbf0e:	d00b      	beq.n	dbf28 <__pow5mult+0x90>
   dbf10:	6820      	ldr	r0, [r4, #0]
   dbf12:	b938      	cbnz	r0, dbf24 <__pow5mult+0x8c>
   dbf14:	4622      	mov	r2, r4
   dbf16:	4621      	mov	r1, r4
   dbf18:	4630      	mov	r0, r6
   dbf1a:	f7ff ff21 	bl	dbd60 <__multiply>
   dbf1e:	6020      	str	r0, [r4, #0]
   dbf20:	f8c0 9000 	str.w	r9, [r0]
   dbf24:	4604      	mov	r4, r0
   dbf26:	e7e4      	b.n	dbef2 <__pow5mult+0x5a>
   dbf28:	4638      	mov	r0, r7
   dbf2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbf2e:	bf00      	nop
   dbf30:	000dd2a0 	.word	0x000dd2a0

000dbf34 <__lshift>:
   dbf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbf38:	460c      	mov	r4, r1
   dbf3a:	6849      	ldr	r1, [r1, #4]
   dbf3c:	6923      	ldr	r3, [r4, #16]
   dbf3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dbf42:	68a3      	ldr	r3, [r4, #8]
   dbf44:	4607      	mov	r7, r0
   dbf46:	4691      	mov	r9, r2
   dbf48:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dbf4c:	f108 0601 	add.w	r6, r8, #1
   dbf50:	42b3      	cmp	r3, r6
   dbf52:	db3f      	blt.n	dbfd4 <__lshift+0xa0>
   dbf54:	4638      	mov	r0, r7
   dbf56:	f7ff fde3 	bl	dbb20 <_Balloc>
   dbf5a:	2300      	movs	r3, #0
   dbf5c:	4605      	mov	r5, r0
   dbf5e:	f100 0114 	add.w	r1, r0, #20
   dbf62:	f100 0210 	add.w	r2, r0, #16
   dbf66:	4618      	mov	r0, r3
   dbf68:	4553      	cmp	r3, sl
   dbf6a:	db36      	blt.n	dbfda <__lshift+0xa6>
   dbf6c:	6920      	ldr	r0, [r4, #16]
   dbf6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dbf72:	f104 0314 	add.w	r3, r4, #20
   dbf76:	f019 091f 	ands.w	r9, r9, #31
   dbf7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dbf7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dbf82:	d02e      	beq.n	dbfe2 <__lshift+0xae>
   dbf84:	f1c9 0e20 	rsb	lr, r9, #32
   dbf88:	468a      	mov	sl, r1
   dbf8a:	2200      	movs	r2, #0
   dbf8c:	6818      	ldr	r0, [r3, #0]
   dbf8e:	fa00 f009 	lsl.w	r0, r0, r9
   dbf92:	4302      	orrs	r2, r0
   dbf94:	f84a 2b04 	str.w	r2, [sl], #4
   dbf98:	f853 2b04 	ldr.w	r2, [r3], #4
   dbf9c:	459c      	cmp	ip, r3
   dbf9e:	fa22 f20e 	lsr.w	r2, r2, lr
   dbfa2:	d8f3      	bhi.n	dbf8c <__lshift+0x58>
   dbfa4:	ebac 0304 	sub.w	r3, ip, r4
   dbfa8:	3b15      	subs	r3, #21
   dbfaa:	f023 0303 	bic.w	r3, r3, #3
   dbfae:	3304      	adds	r3, #4
   dbfb0:	f104 0015 	add.w	r0, r4, #21
   dbfb4:	4560      	cmp	r0, ip
   dbfb6:	bf88      	it	hi
   dbfb8:	2304      	movhi	r3, #4
   dbfba:	50ca      	str	r2, [r1, r3]
   dbfbc:	b10a      	cbz	r2, dbfc2 <__lshift+0x8e>
   dbfbe:	f108 0602 	add.w	r6, r8, #2
   dbfc2:	3e01      	subs	r6, #1
   dbfc4:	4638      	mov	r0, r7
   dbfc6:	612e      	str	r6, [r5, #16]
   dbfc8:	4621      	mov	r1, r4
   dbfca:	f7ff fddd 	bl	dbb88 <_Bfree>
   dbfce:	4628      	mov	r0, r5
   dbfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbfd4:	3101      	adds	r1, #1
   dbfd6:	005b      	lsls	r3, r3, #1
   dbfd8:	e7ba      	b.n	dbf50 <__lshift+0x1c>
   dbfda:	f842 0f04 	str.w	r0, [r2, #4]!
   dbfde:	3301      	adds	r3, #1
   dbfe0:	e7c2      	b.n	dbf68 <__lshift+0x34>
   dbfe2:	3904      	subs	r1, #4
   dbfe4:	f853 2b04 	ldr.w	r2, [r3], #4
   dbfe8:	f841 2f04 	str.w	r2, [r1, #4]!
   dbfec:	459c      	cmp	ip, r3
   dbfee:	d8f9      	bhi.n	dbfe4 <__lshift+0xb0>
   dbff0:	e7e7      	b.n	dbfc2 <__lshift+0x8e>

000dbff2 <__mcmp>:
   dbff2:	b530      	push	{r4, r5, lr}
   dbff4:	6902      	ldr	r2, [r0, #16]
   dbff6:	690c      	ldr	r4, [r1, #16]
   dbff8:	1b12      	subs	r2, r2, r4
   dbffa:	d10e      	bne.n	dc01a <__mcmp+0x28>
   dbffc:	f100 0314 	add.w	r3, r0, #20
   dc000:	3114      	adds	r1, #20
   dc002:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dc006:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dc00a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dc00e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dc012:	42a5      	cmp	r5, r4
   dc014:	d003      	beq.n	dc01e <__mcmp+0x2c>
   dc016:	d305      	bcc.n	dc024 <__mcmp+0x32>
   dc018:	2201      	movs	r2, #1
   dc01a:	4610      	mov	r0, r2
   dc01c:	bd30      	pop	{r4, r5, pc}
   dc01e:	4283      	cmp	r3, r0
   dc020:	d3f3      	bcc.n	dc00a <__mcmp+0x18>
   dc022:	e7fa      	b.n	dc01a <__mcmp+0x28>
   dc024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc028:	e7f7      	b.n	dc01a <__mcmp+0x28>

000dc02a <__mdiff>:
   dc02a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc02e:	460c      	mov	r4, r1
   dc030:	4606      	mov	r6, r0
   dc032:	4611      	mov	r1, r2
   dc034:	4620      	mov	r0, r4
   dc036:	4617      	mov	r7, r2
   dc038:	f7ff ffdb 	bl	dbff2 <__mcmp>
   dc03c:	1e05      	subs	r5, r0, #0
   dc03e:	d108      	bne.n	dc052 <__mdiff+0x28>
   dc040:	4629      	mov	r1, r5
   dc042:	4630      	mov	r0, r6
   dc044:	f7ff fd6c 	bl	dbb20 <_Balloc>
   dc048:	2301      	movs	r3, #1
   dc04a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dc04e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc052:	bfa4      	itt	ge
   dc054:	463b      	movge	r3, r7
   dc056:	4627      	movge	r7, r4
   dc058:	4630      	mov	r0, r6
   dc05a:	6879      	ldr	r1, [r7, #4]
   dc05c:	bfa6      	itte	ge
   dc05e:	461c      	movge	r4, r3
   dc060:	2500      	movge	r5, #0
   dc062:	2501      	movlt	r5, #1
   dc064:	f7ff fd5c 	bl	dbb20 <_Balloc>
   dc068:	693e      	ldr	r6, [r7, #16]
   dc06a:	60c5      	str	r5, [r0, #12]
   dc06c:	6925      	ldr	r5, [r4, #16]
   dc06e:	f107 0114 	add.w	r1, r7, #20
   dc072:	f104 0914 	add.w	r9, r4, #20
   dc076:	f100 0e14 	add.w	lr, r0, #20
   dc07a:	f107 0210 	add.w	r2, r7, #16
   dc07e:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dc082:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dc086:	46f2      	mov	sl, lr
   dc088:	2700      	movs	r7, #0
   dc08a:	f859 3b04 	ldr.w	r3, [r9], #4
   dc08e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dc092:	fa1f f883 	uxth.w	r8, r3
   dc096:	fa17 f78b 	uxtah	r7, r7, fp
   dc09a:	0c1b      	lsrs	r3, r3, #16
   dc09c:	eba7 0808 	sub.w	r8, r7, r8
   dc0a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dc0a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dc0a8:	fa1f f888 	uxth.w	r8, r8
   dc0ac:	141f      	asrs	r7, r3, #16
   dc0ae:	454d      	cmp	r5, r9
   dc0b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dc0b4:	f84a 3b04 	str.w	r3, [sl], #4
   dc0b8:	d8e7      	bhi.n	dc08a <__mdiff+0x60>
   dc0ba:	1b2b      	subs	r3, r5, r4
   dc0bc:	3b15      	subs	r3, #21
   dc0be:	f023 0303 	bic.w	r3, r3, #3
   dc0c2:	3304      	adds	r3, #4
   dc0c4:	3415      	adds	r4, #21
   dc0c6:	42a5      	cmp	r5, r4
   dc0c8:	bf38      	it	cc
   dc0ca:	2304      	movcc	r3, #4
   dc0cc:	4419      	add	r1, r3
   dc0ce:	4473      	add	r3, lr
   dc0d0:	469e      	mov	lr, r3
   dc0d2:	460d      	mov	r5, r1
   dc0d4:	4565      	cmp	r5, ip
   dc0d6:	d30e      	bcc.n	dc0f6 <__mdiff+0xcc>
   dc0d8:	f10c 0203 	add.w	r2, ip, #3
   dc0dc:	1a52      	subs	r2, r2, r1
   dc0de:	f022 0203 	bic.w	r2, r2, #3
   dc0e2:	3903      	subs	r1, #3
   dc0e4:	458c      	cmp	ip, r1
   dc0e6:	bf38      	it	cc
   dc0e8:	2200      	movcc	r2, #0
   dc0ea:	441a      	add	r2, r3
   dc0ec:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dc0f0:	b17b      	cbz	r3, dc112 <__mdiff+0xe8>
   dc0f2:	6106      	str	r6, [r0, #16]
   dc0f4:	e7ab      	b.n	dc04e <__mdiff+0x24>
   dc0f6:	f855 8b04 	ldr.w	r8, [r5], #4
   dc0fa:	fa17 f488 	uxtah	r4, r7, r8
   dc0fe:	1422      	asrs	r2, r4, #16
   dc100:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dc104:	b2a4      	uxth	r4, r4
   dc106:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dc10a:	f84e 4b04 	str.w	r4, [lr], #4
   dc10e:	1417      	asrs	r7, r2, #16
   dc110:	e7e0      	b.n	dc0d4 <__mdiff+0xaa>
   dc112:	3e01      	subs	r6, #1
   dc114:	e7ea      	b.n	dc0ec <__mdiff+0xc2>
	...

000dc118 <__ulp>:
   dc118:	b082      	sub	sp, #8
   dc11a:	ed8d 0b00 	vstr	d0, [sp]
   dc11e:	9b01      	ldr	r3, [sp, #4]
   dc120:	4912      	ldr	r1, [pc, #72]	; (dc16c <__ulp+0x54>)
   dc122:	4019      	ands	r1, r3
   dc124:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dc128:	2900      	cmp	r1, #0
   dc12a:	dd05      	ble.n	dc138 <__ulp+0x20>
   dc12c:	2200      	movs	r2, #0
   dc12e:	460b      	mov	r3, r1
   dc130:	ec43 2b10 	vmov	d0, r2, r3
   dc134:	b002      	add	sp, #8
   dc136:	4770      	bx	lr
   dc138:	4249      	negs	r1, r1
   dc13a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dc13e:	ea4f 5021 	mov.w	r0, r1, asr #20
   dc142:	f04f 0200 	mov.w	r2, #0
   dc146:	f04f 0300 	mov.w	r3, #0
   dc14a:	da04      	bge.n	dc156 <__ulp+0x3e>
   dc14c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dc150:	fa41 f300 	asr.w	r3, r1, r0
   dc154:	e7ec      	b.n	dc130 <__ulp+0x18>
   dc156:	f1a0 0114 	sub.w	r1, r0, #20
   dc15a:	291e      	cmp	r1, #30
   dc15c:	bfda      	itte	le
   dc15e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dc162:	fa20 f101 	lsrle.w	r1, r0, r1
   dc166:	2101      	movgt	r1, #1
   dc168:	460a      	mov	r2, r1
   dc16a:	e7e1      	b.n	dc130 <__ulp+0x18>
   dc16c:	7ff00000 	.word	0x7ff00000

000dc170 <__b2d>:
   dc170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc172:	6905      	ldr	r5, [r0, #16]
   dc174:	f100 0714 	add.w	r7, r0, #20
   dc178:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dc17c:	1f2e      	subs	r6, r5, #4
   dc17e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dc182:	4620      	mov	r0, r4
   dc184:	f7ff fd93 	bl	dbcae <__hi0bits>
   dc188:	f1c0 0320 	rsb	r3, r0, #32
   dc18c:	280a      	cmp	r0, #10
   dc18e:	f8df c07c 	ldr.w	ip, [pc, #124]	; dc20c <__b2d+0x9c>
   dc192:	600b      	str	r3, [r1, #0]
   dc194:	dc14      	bgt.n	dc1c0 <__b2d+0x50>
   dc196:	f1c0 0e0b 	rsb	lr, r0, #11
   dc19a:	fa24 f10e 	lsr.w	r1, r4, lr
   dc19e:	42b7      	cmp	r7, r6
   dc1a0:	ea41 030c 	orr.w	r3, r1, ip
   dc1a4:	bf34      	ite	cc
   dc1a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc1aa:	2100      	movcs	r1, #0
   dc1ac:	3015      	adds	r0, #21
   dc1ae:	fa04 f000 	lsl.w	r0, r4, r0
   dc1b2:	fa21 f10e 	lsr.w	r1, r1, lr
   dc1b6:	ea40 0201 	orr.w	r2, r0, r1
   dc1ba:	ec43 2b10 	vmov	d0, r2, r3
   dc1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc1c0:	42b7      	cmp	r7, r6
   dc1c2:	bf3a      	itte	cc
   dc1c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc1c8:	f1a5 0608 	subcc.w	r6, r5, #8
   dc1cc:	2100      	movcs	r1, #0
   dc1ce:	380b      	subs	r0, #11
   dc1d0:	d017      	beq.n	dc202 <__b2d+0x92>
   dc1d2:	f1c0 0c20 	rsb	ip, r0, #32
   dc1d6:	fa04 f500 	lsl.w	r5, r4, r0
   dc1da:	42be      	cmp	r6, r7
   dc1dc:	fa21 f40c 	lsr.w	r4, r1, ip
   dc1e0:	ea45 0504 	orr.w	r5, r5, r4
   dc1e4:	bf8c      	ite	hi
   dc1e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dc1ea:	2400      	movls	r4, #0
   dc1ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dc1f0:	fa01 f000 	lsl.w	r0, r1, r0
   dc1f4:	fa24 f40c 	lsr.w	r4, r4, ip
   dc1f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dc1fc:	ea40 0204 	orr.w	r2, r0, r4
   dc200:	e7db      	b.n	dc1ba <__b2d+0x4a>
   dc202:	ea44 030c 	orr.w	r3, r4, ip
   dc206:	460a      	mov	r2, r1
   dc208:	e7d7      	b.n	dc1ba <__b2d+0x4a>
   dc20a:	bf00      	nop
   dc20c:	3ff00000 	.word	0x3ff00000

000dc210 <__d2b>:
   dc210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dc214:	4689      	mov	r9, r1
   dc216:	2101      	movs	r1, #1
   dc218:	ec57 6b10 	vmov	r6, r7, d0
   dc21c:	4690      	mov	r8, r2
   dc21e:	f7ff fc7f 	bl	dbb20 <_Balloc>
   dc222:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dc226:	4604      	mov	r4, r0
   dc228:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dc22c:	bb35      	cbnz	r5, dc27c <__d2b+0x6c>
   dc22e:	2e00      	cmp	r6, #0
   dc230:	9301      	str	r3, [sp, #4]
   dc232:	d028      	beq.n	dc286 <__d2b+0x76>
   dc234:	4668      	mov	r0, sp
   dc236:	9600      	str	r6, [sp, #0]
   dc238:	f7ff fd59 	bl	dbcee <__lo0bits>
   dc23c:	9900      	ldr	r1, [sp, #0]
   dc23e:	b300      	cbz	r0, dc282 <__d2b+0x72>
   dc240:	9a01      	ldr	r2, [sp, #4]
   dc242:	f1c0 0320 	rsb	r3, r0, #32
   dc246:	fa02 f303 	lsl.w	r3, r2, r3
   dc24a:	430b      	orrs	r3, r1
   dc24c:	40c2      	lsrs	r2, r0
   dc24e:	6163      	str	r3, [r4, #20]
   dc250:	9201      	str	r2, [sp, #4]
   dc252:	9b01      	ldr	r3, [sp, #4]
   dc254:	61a3      	str	r3, [r4, #24]
   dc256:	2b00      	cmp	r3, #0
   dc258:	bf14      	ite	ne
   dc25a:	2202      	movne	r2, #2
   dc25c:	2201      	moveq	r2, #1
   dc25e:	6122      	str	r2, [r4, #16]
   dc260:	b1d5      	cbz	r5, dc298 <__d2b+0x88>
   dc262:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dc266:	4405      	add	r5, r0
   dc268:	f8c9 5000 	str.w	r5, [r9]
   dc26c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dc270:	f8c8 0000 	str.w	r0, [r8]
   dc274:	4620      	mov	r0, r4
   dc276:	b003      	add	sp, #12
   dc278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc27c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc280:	e7d5      	b.n	dc22e <__d2b+0x1e>
   dc282:	6161      	str	r1, [r4, #20]
   dc284:	e7e5      	b.n	dc252 <__d2b+0x42>
   dc286:	a801      	add	r0, sp, #4
   dc288:	f7ff fd31 	bl	dbcee <__lo0bits>
   dc28c:	9b01      	ldr	r3, [sp, #4]
   dc28e:	6163      	str	r3, [r4, #20]
   dc290:	2201      	movs	r2, #1
   dc292:	6122      	str	r2, [r4, #16]
   dc294:	3020      	adds	r0, #32
   dc296:	e7e3      	b.n	dc260 <__d2b+0x50>
   dc298:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dc29c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dc2a0:	f8c9 0000 	str.w	r0, [r9]
   dc2a4:	6918      	ldr	r0, [r3, #16]
   dc2a6:	f7ff fd02 	bl	dbcae <__hi0bits>
   dc2aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dc2ae:	e7df      	b.n	dc270 <__d2b+0x60>

000dc2b0 <__ratio>:
   dc2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc2b4:	4688      	mov	r8, r1
   dc2b6:	4669      	mov	r1, sp
   dc2b8:	4681      	mov	r9, r0
   dc2ba:	f7ff ff59 	bl	dc170 <__b2d>
   dc2be:	a901      	add	r1, sp, #4
   dc2c0:	4640      	mov	r0, r8
   dc2c2:	ec55 4b10 	vmov	r4, r5, d0
   dc2c6:	f7ff ff53 	bl	dc170 <__b2d>
   dc2ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dc2ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dc2d2:	eba3 0c02 	sub.w	ip, r3, r2
   dc2d6:	e9dd 3200 	ldrd	r3, r2, [sp]
   dc2da:	1a9b      	subs	r3, r3, r2
   dc2dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dc2e0:	ec51 0b10 	vmov	r0, r1, d0
   dc2e4:	2b00      	cmp	r3, #0
   dc2e6:	bfd6      	itet	le
   dc2e8:	460a      	movle	r2, r1
   dc2ea:	462a      	movgt	r2, r5
   dc2ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dc2f0:	468b      	mov	fp, r1
   dc2f2:	462f      	mov	r7, r5
   dc2f4:	bfd4      	ite	le
   dc2f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dc2fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dc2fe:	4620      	mov	r0, r4
   dc300:	ee10 2a10 	vmov	r2, s0
   dc304:	465b      	mov	r3, fp
   dc306:	4639      	mov	r1, r7
   dc308:	f7fd fe2c 	bl	d9f64 <__aeabi_ddiv>
   dc30c:	ec41 0b10 	vmov	d0, r0, r1
   dc310:	b003      	add	sp, #12
   dc312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc316 <__copybits>:
   dc316:	3901      	subs	r1, #1
   dc318:	b570      	push	{r4, r5, r6, lr}
   dc31a:	1149      	asrs	r1, r1, #5
   dc31c:	6914      	ldr	r4, [r2, #16]
   dc31e:	3101      	adds	r1, #1
   dc320:	f102 0314 	add.w	r3, r2, #20
   dc324:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dc328:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dc32c:	1f05      	subs	r5, r0, #4
   dc32e:	42a3      	cmp	r3, r4
   dc330:	d30c      	bcc.n	dc34c <__copybits+0x36>
   dc332:	1aa3      	subs	r3, r4, r2
   dc334:	3b11      	subs	r3, #17
   dc336:	f023 0303 	bic.w	r3, r3, #3
   dc33a:	3211      	adds	r2, #17
   dc33c:	42a2      	cmp	r2, r4
   dc33e:	bf88      	it	hi
   dc340:	2300      	movhi	r3, #0
   dc342:	4418      	add	r0, r3
   dc344:	2300      	movs	r3, #0
   dc346:	4288      	cmp	r0, r1
   dc348:	d305      	bcc.n	dc356 <__copybits+0x40>
   dc34a:	bd70      	pop	{r4, r5, r6, pc}
   dc34c:	f853 6b04 	ldr.w	r6, [r3], #4
   dc350:	f845 6f04 	str.w	r6, [r5, #4]!
   dc354:	e7eb      	b.n	dc32e <__copybits+0x18>
   dc356:	f840 3b04 	str.w	r3, [r0], #4
   dc35a:	e7f4      	b.n	dc346 <__copybits+0x30>

000dc35c <__any_on>:
   dc35c:	f100 0214 	add.w	r2, r0, #20
   dc360:	6900      	ldr	r0, [r0, #16]
   dc362:	114b      	asrs	r3, r1, #5
   dc364:	4298      	cmp	r0, r3
   dc366:	b510      	push	{r4, lr}
   dc368:	db11      	blt.n	dc38e <__any_on+0x32>
   dc36a:	dd0a      	ble.n	dc382 <__any_on+0x26>
   dc36c:	f011 011f 	ands.w	r1, r1, #31
   dc370:	d007      	beq.n	dc382 <__any_on+0x26>
   dc372:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dc376:	fa24 f001 	lsr.w	r0, r4, r1
   dc37a:	fa00 f101 	lsl.w	r1, r0, r1
   dc37e:	428c      	cmp	r4, r1
   dc380:	d10b      	bne.n	dc39a <__any_on+0x3e>
   dc382:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dc386:	4293      	cmp	r3, r2
   dc388:	d803      	bhi.n	dc392 <__any_on+0x36>
   dc38a:	2000      	movs	r0, #0
   dc38c:	bd10      	pop	{r4, pc}
   dc38e:	4603      	mov	r3, r0
   dc390:	e7f7      	b.n	dc382 <__any_on+0x26>
   dc392:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dc396:	2900      	cmp	r1, #0
   dc398:	d0f5      	beq.n	dc386 <__any_on+0x2a>
   dc39a:	2001      	movs	r0, #1
   dc39c:	e7f6      	b.n	dc38c <__any_on+0x30>

000dc39e <_calloc_r>:
   dc39e:	b513      	push	{r0, r1, r4, lr}
   dc3a0:	434a      	muls	r2, r1
   dc3a2:	4611      	mov	r1, r2
   dc3a4:	9201      	str	r2, [sp, #4]
   dc3a6:	f7fb fb6f 	bl	d7a88 <_malloc_r>
   dc3aa:	4604      	mov	r4, r0
   dc3ac:	b118      	cbz	r0, dc3b6 <_calloc_r+0x18>
   dc3ae:	9a01      	ldr	r2, [sp, #4]
   dc3b0:	2100      	movs	r1, #0
   dc3b2:	f7fe f8b9 	bl	da528 <memset>
   dc3b6:	4620      	mov	r0, r4
   dc3b8:	b002      	add	sp, #8
   dc3ba:	bd10      	pop	{r4, pc}
   dc3bc:	0000      	movs	r0, r0
	...

000dc3c0 <nan>:
   dc3c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; dc3c8 <nan+0x8>
   dc3c4:	4770      	bx	lr
   dc3c6:	bf00      	nop
   dc3c8:	00000000 	.word	0x00000000
   dc3cc:	7ff80000 	.word	0x7ff80000

000dc3d0 <nanf>:
   dc3d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; dc3d8 <nanf+0x8>
   dc3d4:	4770      	bx	lr
   dc3d6:	bf00      	nop
   dc3d8:	7fc00000 	.word	0x7fc00000

000dc3dc <__ascii_wctomb>:
   dc3dc:	b149      	cbz	r1, dc3f2 <__ascii_wctomb+0x16>
   dc3de:	2aff      	cmp	r2, #255	; 0xff
   dc3e0:	bf85      	ittet	hi
   dc3e2:	238a      	movhi	r3, #138	; 0x8a
   dc3e4:	6003      	strhi	r3, [r0, #0]
   dc3e6:	700a      	strbls	r2, [r1, #0]
   dc3e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dc3ec:	bf98      	it	ls
   dc3ee:	2001      	movls	r0, #1
   dc3f0:	4770      	bx	lr
   dc3f2:	4608      	mov	r0, r1
   dc3f4:	4770      	bx	lr
	...

000dc3f8 <__aeabi_d2lz>:
   dc3f8:	b538      	push	{r3, r4, r5, lr}
   dc3fa:	2200      	movs	r2, #0
   dc3fc:	2300      	movs	r3, #0
   dc3fe:	4604      	mov	r4, r0
   dc400:	460d      	mov	r5, r1
   dc402:	f7fd fef7 	bl	da1f4 <__aeabi_dcmplt>
   dc406:	b928      	cbnz	r0, dc414 <__aeabi_d2lz+0x1c>
   dc408:	4620      	mov	r0, r4
   dc40a:	4629      	mov	r1, r5
   dc40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc410:	f7fd bffa 	b.w	da408 <__aeabi_d2ulz>
   dc414:	4620      	mov	r0, r4
   dc416:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dc41a:	f7fd fff5 	bl	da408 <__aeabi_d2ulz>
   dc41e:	4240      	negs	r0, r0
   dc420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc424:	bd38      	pop	{r3, r4, r5, pc}
   dc426:	bf00      	nop

000dc428 <dynalib_user>:
   dc428:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dc438:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   dc448:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dc458:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dc468:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dc478:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   dc488:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   dc498:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   dc4a8:	4400 6369 6e6f 656e 7463 6465 4e00 206f     .Diconnected.No 
   dc4b8:	6144 6174 5200 7365 6f70 736e 2065 6552     Data.Response Re
   dc4c8:	6563 7669 6465 5500 6b6e 6f6e 6e77 7220     ceived.Unknown r
   dc4d8:	7365 6f70 736e 2065 6572 6563 6976 6465     esponse recevied
   dc4e8:	2520 0069 6255 6469 746f 2073 6f48 6b6f      %i.Ubidots Hook
   dc4f8:	4800 7261 2064 6552 6573 2074 6e69 3220     .Hard Reset in 2
   dc508:	7320 6365 6e6f 7364 5300 7465 5620 7265      seconds.Set Ver
   dc518:	6f62 6573 4d20 646f 0065 6c43 6165 6572     bose Mode.Cleare
   dc528:	2064 6556 6272 736f 2065 6f4d 6564 4f00     d Verbose Mode.O
   dc538:	6570 206e 6974 656d 7320 7465 7420 206f     pen time set to 
   dc548:	6925 4c00 776f 5020 776f 7265 4d20 646f     %i.Low Power Mod
   dc558:	0065 6f4e 6d72 6c61 4f20 6570 6172 6974     e.Normal Operati
   dc568:	6e6f 0073 6f4e 2074 6f4c 2077 6f50 6577     ons.Not Low Powe
   dc578:	0072 3225 312e 2066 2525 7b00 7322 696f     r.%2.1f %%.{"soi
   dc588:	4d6c 696f 7473 7275 2265 253a 2c69 2220     lMoisture":%i, "
   dc598:	6177 6574 6972 676e 3a22 6925 202c 6222     watering":%i, "b
   dc5a8:	7461 6574 7972 3a22 6925 222c 656b 3179     attery":%i,"key1
   dc5b8:	3a22 2522 2273 222c 6574 706d 3a22 6925     ":"%s","temp":%i
   dc5c8:	202c 7222 7365 7465 2273 253a 2c69 2220     , "resets":%i, "
   dc5d8:	6c61 7265 7374 3a22 6925 202c 6322 6e6f     alerts":%i, "con
   dc5e8:	656e 7463 6974 656d 3a22 6925 222c 6974     necttime":%i,"ti
   dc5f8:	656d 7473 6d61 2270 253a 756c 3030 7d30     mestamp":%lu000}
   dc608:	5500 6962 6f64 7374 412d 7571 4d61 7361     .Ubidots-AquaMas
   dc618:	6574 2d72 6147 6472 6e65 762d 0031 7325     ter-Garden-v1.%s
   dc628:	5320 253a 2e32 6630 2525 202c 3a51 3225      S:%2.0f%%, Q:%2
   dc638:	302e 2566 2025 5300 7465 5320 6c6f 7261     .0f%% .Set Solar
   dc648:	5020 776f 7265 6465 4d20 646f 0065 6c43      Powered Mode.Cl
   dc658:	6165 6572 2064 6f53 616c 2072 6f50 6577     eared Solar Powe
   dc668:	6572 2064 6f4d 6564 4c00 616f 6964 676e     red Mode.Loading
   dc678:	5320 7379 6574 206d 6544 6166 6c75 7374      System Defaults
   dc688:	4e00 0041 6925 303a 0030 6c43 736f 6e69     .NA.%i:00.Closin
   dc698:	2067 6974 656d 7320 7465 7420 206f 6925     g time set to %i
   dc6a8:	4600 6f72 206d 7325 7420 206f 7325 5300     .From %s to %s.S
   dc6b8:	6174 6574 5420 6172 736e 7469 6f69 006e     tate Transition.
   dc6c8:	7552 6e6e 6e69 0067 6144 6c69 2079 6c43     Running.Daily Cl
   dc6d8:	6165 756e 0070 6c63 756f 2064 6f63 6e6e     eanup.cloud conn
   dc6e8:	6365 6974 6e6f 7520 736e 6375 6563 7373     ection unsuccess
   dc6f8:	7566 006c 6f43 6e6e 6365 6574 2064 6e69     ful.Connected in
   dc708:	2520 2069 6573 7363 4300 6c65 756c 616c      %i secs.Cellula
   dc718:	0072 6f44 656e 7720 7469 2068 6177 6574     r.Done with wate
   dc728:	6972 676e 6320 6379 656c 5700 7461 7265     ring cycle.Water
   dc738:	6e69 0067 6f4e 2074 6974 656d 7420 206f     ing.Not time to 
   dc748:	6177 6574 0072 6157 6574 6972 676e 4e20     water.Watering N
   dc758:	6565 6564 2064 7562 2074 6162 7474 7265     eeded but batter
   dc768:	2079 6f74 206f 6f6c 0077 6157 6574 6972     y too low.Wateri
   dc778:	676e 6e20 6565 6564 2064 202d 7473 7261     ng needed - star
   dc788:	6974 676e 7720 7461 7265 6e69 2067 7963     ting watering cy
   dc798:	6c63 0065 6157 6574 6972 676e 6e20 746f     cle.Watering not
   dc7a8:	6e20 6565 6564 0064 7073 7261 2f6b 6564      needed.spark/de
   dc7b8:	6976 6563 732f 7365 6973 6e6f 652f 646e     vice/session/end
   dc7c8:	6600 6961 656c 2064 6f74 6320 6e6f 656e     .failed to conne
   dc7d8:	7463 7420 206f 6c63 756f 2c64 6420 696f     ct to cloud, doi
   dc7e8:	676e 6420 6565 2070 6572 6573 0074 7245     ng deep reset.Er
   dc7f8:	6f72 2072 7453 7461 2065 202d 6552 6573     ror State - Rese
   dc808:	0074 7453 7461 0065 7245 6f72 2072 7453     t.State.Error St
   dc818:	7461 2065 202d 6f50 6577 2072 7943 6c63     ate - Power Cycl
   dc828:	0065 7245 6f72 2072 7453 7461 2065 202d     e.Error State - 
   dc838:	7546 6c6c 4d20 646f 6d65 5220 7365 7465     Full Modem Reset
   dc848:	4f00 7475 6f20 2066 656d 6f6d 7972 6f20     .Out of memory o
   dc858:	6363 7275 6572 2064 6973 657a 253d 0064     ccurred size=%d.
   dc868:	654d 6f6d 7972 5300 696f 4d6c 696f 7473     Memory.SoilMoist
   dc878:	7275 0065 6953 6e67 6c61 5200 7365 7465     ure.Signal.Reset
   dc888:	6f43 6e75 0074 6554 706d 7265 7461 7275     Count.Temperatur
   dc898:	0065 6552 656c 7361 0065 7473 7461 4f65     e.Release.stateO
   dc8a8:	4366 6768 6c00 776f 6f50 6577 4d72 646f     fChg.lowPowerMod
   dc8b8:	0065 6c43 736f 5465 6d69 0065 6c41 7265     e.CloseTime.Aler
   dc8c8:	7374 5400 6d69 4f65 6666 6573 0074 6142     ts.TimeOffset.Ba
   dc8d8:	7474 7265 4379 6e6f 6574 7478 5700 7461     tteryContext.Wat
   dc8e8:	7265 6e69 5067 7463 7200 7365 7465 6f43     eringPct.resetCo
   dc8f8:	6e75 7374 4800 7261 5264 7365 7465 5300     unts.HardReset.S
   dc908:	6e65 4e64 776f 4c00 776f 6f50 6577 4d72     endNow.LowPowerM
   dc918:	646f 0065 6f53 616c 2d72 6f4d 6564 5600     ode.Solar-Mode.V
   dc928:	7265 6f62 6573 4d2d 646f 0065 6553 2d74     erbose-Mode.Set-
   dc938:	6954 656d 6f7a 656e 5300 7465 442d 5453     Timezone.Set-DST
   dc948:	664f 7366 7465 5300 7465 4f2d 6570 546e     Offset.Set-OpenT
   dc958:	6d69 0065 6553 2d74 6c43 736f 0065 6553     ime.Set-Close.Se
   dc968:	5774 7461 7265 6854 6572 6873 6c6f 0064     tWaterThreshold.
   dc978:	3225 312e 2066 5455 0043 0000               %2.1f UTC...

000dc984 <_ZTV5Timer>:
	...
   dc98c:	42c5 000d 4319 000d 4165 000d               .B...C..eA..

000dc998 <_ZTV8MB85RC64>:
	...
   dc9a0:	4199 000d 41ad 000d 6b9d 000d 6c33 000d     .A...A...k..3l..
   dc9b0:	6cb5 000d                                   .l..

000dc9b4 <_ZTV17PublishQueueAsync>:
	...
   dc9bc:	4171 000d 4185 000d 6dcd 000d 6f59 000d     qA...A...m..Yo..
   dc9cc:	6f19 000d 6ef7 000d 709f 000d 6f3f 000d     .o...n...p..?o..
   dc9dc:	c43c 000d c444 000d c449 000d c44e 000d     <...D...I...N...
   dc9ec:	c452 000d c457 000d c45c 000d c460 000d     R...W...\...`...
   dc9fc:	c46b 000d c476 000d                         k...v...

000dca04 <_ZL17FRAMversionNumber>:
   dca04:	0001 0000 6954 656d 7a20 6e6f 2065 666f     ....Time zone of
   dca14:	7366 7465 2520 0069 5344 2054 666f 7366     fset %i.DST offs
   dca24:	7465 2520 2e32 6631 6600 6961 656c 2064     et %2.1f.failed 
   dca34:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   dca44:	3025 7832 6320 756f 746e 253d 0075 6166     %02x count=%u.fa
   dca54:	6c69 6465 7420 206f 6572 6461 7220 6765     iled to read reg
   dca64:	6441 7264 253d 3230 2078 7473 7461 253d     Addr=%02x stat=%
   dca74:	0064 4f46 5455 6420 6469 6e20 746f 6720     d.FOUT did not g
   dca84:	206f 4948 4847 6e00 746f 6420 7465 6365     o HIGH.not detec
   dca94:	6574 0064 6166 6c69 6465 7420 206f 7277     ted.failed to wr
   dcaa4:	7469 2065 6572 4167 6464 3d72 3025 7832     ite regAddr=%02x
   dcab4:	7320 6174 3d74 6425 7300 7465 4457 2054      stat=%d.setWDT 
   dcac4:	6425 7700 7461 6863 6f64 2067 6c63 6165     %d.watchdog clea
   dcad4:	6572 2064 5262 7365 6c75 3d74 6425 7700     red bResult=%d.w
   dcae4:	7461 6863 6f64 2067 6573 2074 6f66 7275     atchdog set four
   dcaf4:	6553 7363 253d 2064 5262 7365 6c75 3d74     Secs=%d bResult=
   dcb04:	6425 5700 5441 4843 4f44 0047 4544 5045     %d.WATCHDOG.DEEP
   dcb14:	505f 574f 5245 445f 574f 004e 4f43 4e55     _POWER_DOWN.COUN
   dcb24:	4454 574f 5f4e 4954 454d 0052 4c41 5241     TDOWN_TIMER.ALAR
   dcb34:	004d 6166 6c69 7275 2065 6e69 7520 6470     M.failure in upd
   dcb44:	7461 5765 6b61 5265 6165 6f73 206e 6425     ateWakeReason %d
   dcb54:	7700 6b61 2065 6572 7361 6e6f 3d20 2520     .wake reason = %
   dcb64:	0073 6166 6c69 7275 2065 6e69 7320 7465     s.failure in set
   dcb74:	6f43 6e75 6474 776f 546e 6d69 7265 2520     CountdownTimer %
   dcb84:	0064 6166 6c69 7275 2065 6e69 6420 6565     d.failure in dee
   dcb94:	5070 776f 7265 6f44 6e77 2520 0064 4552     pPowerDown %d.RE
   dcba4:	5f47 4c53 4545 5f50 5443 4c52 303d 2578     G_SLEEP_CTRL=0x%
   dcbb4:	7832 6400 6469 276e 2074 6f70 6577 2072     2x.didn't power 
   dcbc4:	6f64 6e77 2500 3430 2d64 3025 6432 252d     down.%04d-%02d-%
   dcbd4:	3230 2064 3025 6432 253a 3230 3a64 3025     02d %02d:%02d:%0
   dcbe4:	6432 6700 7465 7452 4163 5473 206d 7325     2d.getRtcAsTm %s
   dcbf4:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   dcc04:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   dcc14:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   dcc24:	3142 3038 0035 6573 5274 6374 7341 6d54     B1805.setRtcAsTm
   dcc34:	2520 0073 6166 6c69 7275 2065 6e69 7320      %s.failure in s
   dcc44:	7465 7452 4663 6f72 546d 206d 6425 7300     etRtcFromTm %d.s
   dcc54:	7465 5220 4354 6620 6f72 206d 6c63 756f     et RTC from clou
   dcc64:	2064 7325 6100 7070 612e 3162 3038 0035     d %s.app.ab1805.

000dcc74 <_ZTV6AB1805>:
	...
   dcc7c:	5fe5 000d 5fe7 000d 665d 000d 66e3 000d     ._..._..]f...f..
   dcc8c:	7277 7469 4465 7461 2061 6166 6c69 6465     writeData failed
   dcc9c:	6420 7275 6e69 2067 7265 7361 2065 7266      during erase fr
   dccac:	6d61 6441 7264 253d 0075 0000               amAddr=%u...

000dccb8 <_ZTV6MB85RC>:
	...
   dccc0:	6aed 000d 6aef 000d 6b9d 000d 6c33 000d     .j...j...k..3l..
   dccd0:	6cb5 000d 7550 6c62 7369 5168 6575 6575     .l..PublishQueue
   dcce0:	7341 6e79 0063 7571 7565 6965 676e 6520     Async.queueing e
   dccf0:	6576 746e 614e 656d 253d 2073 6164 6174     ventName=%s data
   dcd00:	253d 2073 7474 3d6c 6425 6620 616c 7367     =%s ttl=%d flags
   dcd10:	3d31 6425 6620 616c 7367 3d32 6425 7320     1=%d flags2=%d s
   dcd20:	7a69 3d65 6425 7000 6275 696c 6873 6e69     ize=%d.publishin
   dcd30:	2067 7325 2520 2073 7474 3d6c 6425 6620     g %s %s ttl=%d f
   dcd40:	616c 7367 253d 0078 7570 6c62 7369 6568     lags=%x.publishe
   dcd50:	2064 7573 6363 7365 6673 6c75 796c 7000     d successfully.p
   dcd60:	6275 696c 6873 6465 6620 6961 656c 2c64     ublished failed,
   dcd70:	7720 6c69 206c 6572 7274 2079 6e69 2520      will retry in %
   dcd80:	756c 6d20 0073 7061 2e70 7570 7162 0000     lu ms.app.pubq..

000dcd90 <_ZTV21PublishQueueAsyncBase>:
	...
   dcda0:	6dcd 000d 40a5 000d 40a5 000d 40a5 000d     .m...@...@...@..
   dcdb0:	40a5 000d 40a5 000d                         .@...@..

000dcdb8 <_ZTV25PublishQueueAsyncRetained>:
	...
   dcdc0:	6eb5 000d 6ec9 000d 6dcd 000d 6f59 000d     .n...n...m..Yo..
   dcdd0:	6f19 000d 6ef7 000d 709f 000d 6f3f 000d     .o...n...p..?o..

000dcde0 <_ZTVN5spark13CellularClassE>:
	...
   dcde8:	7bff 000d 7bf5 000d 7beb 000d 7bad 000d     .{...{...{...{..
   dcdf8:	7bdf 000d 42a5 000d 8889 000d 8891 000d     .{...B..........
   dce08:	7bd3 000d 7bcb 000d 7bc1 000d 7bb7 000d     .{...{...{...{..
   dce18:	88c1 000d                                   ....

000dce1c <_ZTV14CellularSignal>:
	...
   dce24:	7cad 000d 7cb3 000d 7caf 000d 7cc1 000d     .|...|...|...|..
   dce34:	7cf5 000d 7d21 000d 7d55 000d 7da5 000d     .|..!}..U}...}..
   dce44:	fffc ffff 0000 0000 7dcb 000d               .........}..

000dce50 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dce58:	7deb 000d 7df1 000d 7e2f 000d 7dff 000d     .}...}../~...}..
   dce68:	7ded 000d                                   .}..

000dce6c <_ZTVN5spark13EthernetClassE>:
	...
   dce74:	845f 000d 8455 000d 844b 000d 8441 000d     _...U...K...A...
   dce84:	8435 000d 8429 000d 8889 000d 8891 000d     5...)...........
   dce94:	841d 000d 8415 000d 840b 000d 8401 000d     ................
   dcea4:	88c1 000d                                   ....

000dcea8 <_ZTV7TwoWire>:
	...
   dceb0:	8611 000d 865b 000d 8633 000d 8613 000d     ....[...3.......
   dcec0:	863b 000d 8643 000d 864b 000d 8653 000d     ;...C...K...S...

000dced0 <_ZTV9IPAddress>:
	...
   dced8:	8765 000d 8755 000d 8757 000d 7061 0070     e...U...W...app.

000dcee8 <_ZTVN5spark12NetworkClassE>:
	...
   dcef0:	8849 000d 8853 000d 885d 000d 8867 000d     I...S...]...g...
   dcf00:	8871 000d 887d 000d 8889 000d 8891 000d     q...}...........
   dcf10:	8899 000d 88a5 000d 88ad 000d 88b7 000d     ................
   dcf20:	88c1 000d 6977 6972 676e 5300 7379 6574     ....wiring.Syste
   dcf30:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   dcf40:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   dcf50:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   dcf60:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   dcf70:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000dcf7c <_ZTV11USARTSerial>:
	...
   dcf84:	9401 000d 946d 000d 9445 000d 8b07 000d     ....m...E.......
   dcf94:	9415 000d 9431 000d 9423 000d 943f 000d     ....1...#...?...
   dcfa4:	9403 000d 9407 000d                         ........

000dcfac <_ZTV9USBSerial>:
	...
   dcfb4:	9501 000d 9569 000d 953f 000d 8b07 000d     ....i...?.......
   dcfc4:	9531 000d 9503 000d 9513 000d 9563 000d     1...........c...
   dcfd4:	9523 000d 94fd 000d                         #.......

000dcfdc <_ZSt7nothrow>:
   dcfdc:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   dcfec:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000dcffd <day_name.6145>:
   dcffd:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd00d:	6972 6153                                    riSat

000dd012 <mon_name.6146>:
   dd012:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd022:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd032:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000dd044 <fpi.7566>:
   dd044:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dd054:	0000 0000                                   ....

000dd058 <fpinan.7602>:
   dd058:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dd070 <tinytens>:
   dd070:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dd080:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dd090:	6f43 64ac 0628 1168                         Co.d(.h.

000dd098 <_ctype_>:
   dd098:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd0a8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd0b8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd0c8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd0d8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd0e8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd0f8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd108:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd118:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd19c <_C_numeric_locale>:
   dd19c:	cf50 000d cffc 000d e294 2003 4f50 4953     P.......... POSI
   dd1ac:	0058 0000                                   X...

000dd1b0 <__mprec_bigtens>:
   dd1b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dd1c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dd1d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dd1d8 <__mprec_tens>:
   dd1d8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dd1e8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dd1f8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dd208:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dd218:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dd228:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dd238:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dd248:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dd258:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dd268:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dd278:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dd288:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dd298:	9db4 79d9 7843 44ea                         ...yCx.D

000dd2a0 <p05.7490>:
   dd2a0:	0005 0000 0019 0000 007d 0000               ........}...

000dd2ac <link_const_variable_data_end>:
   dd2ac:	000d5b75 	.word	0x000d5b75
   dd2b0:	000d5fd9 	.word	0x000d5fd9
   dd2b4:	000d6add 	.word	0x000d6add
   dd2b8:	000d7331 	.word	0x000d7331
   dd2bc:	000d7b85 	.word	0x000d7b85
   dd2c0:	000d7c7d 	.word	0x000d7c7d
   dd2c4:	000d8469 	.word	0x000d8469
   dd2c8:	000d8839 	.word	0x000d8839
   dd2cc:	000d8995 	.word	0x000d8995
   dd2d0:	000d8bd1 	.word	0x000d8bd1
   dd2d4:	000d8f81 	.word	0x000d8f81
   dd2d8:	000d93ed 	.word	0x000d93ed

000dd2dc <link_constructors_end>:
   dd2dc:	00000000 	.word	0x00000000

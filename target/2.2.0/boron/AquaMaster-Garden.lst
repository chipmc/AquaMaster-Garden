
/Users/chipmc/Documents/Maker/Particle/Projects/AquaMaster-Garden/target/2.2.0/boron/AquaMaster-Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c5a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e05c0  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002e8  2003dfa8  000e05c4  0002dfa8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000560  2003e290  2003e290  0003e290  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000e08ac  000e08ac  000308ac  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000e08d8  000e08d8  000308d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0021ed86  00000000  00000000  000308dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00021b2a  00000000  00000000  0024f662  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004072e  00000000  00000000  0027118c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000037d8  00000000  00000000  002b18ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000afe0  00000000  00000000  002b5092  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00044210  00000000  00000000  002c0072  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005762c  00000000  00000000  00304282  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00120951  00000000  00000000  0035b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a9d4  00000000  00000000  0047c200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 ffbb 	bl	dcfac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 ffdd 	bl	dcffc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dfa8 	.word	0x2003dfa8
   d404c:	000e05c4 	.word	0x000e05c4
   d4050:	2003e290 	.word	0x2003e290
   d4054:	2003e290 	.word	0x2003e290
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f008 f8a5 	bl	dc1b0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e0584 	.word	0x000e0584
   d4080:	000e05b8 	.word	0x000e05b8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b92c 	b.w	d52e0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fd05 	bl	d5a98 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f008 b845 	b.w	dc120 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 bfbd 	b.w	d9014 <malloc>

000d409a <_Znaj>:
   d409a:	f004 bfbb 	b.w	d9014 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 bfc1 	b.w	d9024 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 fe2e 	bl	d8d0c <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d892d 	.word	0x000d892d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z18outOfMemoryHandleryi+0x8>)
   d40d6:	601a      	str	r2, [r3, #0]
}
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003dfe0 	.word	0x2003dfe0

000d40e0 <_Z16wateringTimerISRv>:

void wateringTimerISR() {
  current.solenoidState = false;
   d40e0:	4b04      	ldr	r3, [pc, #16]	; (d40f4 <_Z16wateringTimerISRv+0x14>)
   d40e2:	2200      	movs	r2, #0
   d40e4:	609a      	str	r2, [r3, #8]
  state = MEASURING_STATE;
   d40e6:	4b04      	ldr	r3, [pc, #16]	; (d40f8 <_Z16wateringTimerISRv+0x18>)
   d40e8:	2203      	movs	r2, #3
   d40ea:	701a      	strb	r2, [r3, #0]
  currentCountsWriteNeeded = true;
   d40ec:	4b03      	ldr	r3, [pc, #12]	; (d40fc <_Z16wateringTimerISRv+0x1c>)
   d40ee:	2201      	movs	r2, #1
   d40f0:	701a      	strb	r2, [r3, #0]
}
   d40f2:	4770      	bx	lr
   d40f4:	2003e340 	.word	0x2003e340
   d40f8:	2003e3cc 	.word	0x2003e3cc
   d40fc:	2003e364 	.word	0x2003e364

000d4100 <_Z13awakeTimerISRv>:

void awakeTimerISR() {
  sysStatus.lowPowerMode = true;
   d4100:	4a02      	ldr	r2, [pc, #8]	; (d410c <_Z13awakeTimerISRv+0xc>)
   d4102:	2301      	movs	r3, #1
   d4104:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d4106:	4a02      	ldr	r2, [pc, #8]	; (d4110 <_Z13awakeTimerISRv+0x10>)
   d4108:	7013      	strb	r3, [r2, #0]
}
   d410a:	4770      	bx	lr
   d410c:	2003e3d8 	.word	0x2003e3d8
   d4110:	2003e40c 	.word	0x2003e40c

000d4114 <_Z13userSwitchISRv>:

void userSwitchISR() {
  userSwitchDetect = true;                                            // The the flag for the user switch interrupt
   d4114:	4b01      	ldr	r3, [pc, #4]	; (d411c <_Z13userSwitchISRv+0x8>)
   d4116:	2201      	movs	r2, #1
   d4118:	701a      	strb	r2, [r3, #0]
}
   d411a:	4770      	bx	lr
   d411c:	2003e40d 	.word	0x2003e40d

000d4120 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4120:	6803      	ldr	r3, [r0, #0]
   d4122:	4718      	bx	r3

000d4124 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d4124:	2a01      	cmp	r2, #1
   d4126:	d003      	beq.n	d4130 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d4128:	2a02      	cmp	r2, #2
   d412a:	d003      	beq.n	d4134 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d412c:	2000      	movs	r0, #0
   d412e:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4130:	6001      	str	r1, [r0, #0]
	      break;
   d4132:	e7fb      	b.n	d412c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4134:	680b      	ldr	r3, [r1, #0]
   d4136:	6003      	str	r3, [r0, #0]
	}
   d4138:	e7f8      	b.n	d412c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d413c <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d413c:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d413e:	4b05      	ldr	r3, [pc, #20]	; (d4154 <_Z21batteryContextMessagev+0x18>)
   d4140:	7b1a      	ldrb	r2, [r3, #12]
   d4142:	4b05      	ldr	r3, [pc, #20]	; (d4158 <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d4144:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d4146:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d414a:	f007 fa98 	bl	db67e <_ZN6StringC1EPKc>
}
   d414e:	4620      	mov	r0, r4
   d4150:	bd10      	pop	{r4, pc}
   d4152:	bf00      	nop
   d4154:	2003e3d8 	.word	0x2003e3d8
   d4158:	2003dfa8 	.word	0x2003dfa8

000d415c <_Z7sendNow6String>:
{
   d415c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d415e:	4904      	ldr	r1, [pc, #16]	; (d4170 <_Z7sendNow6String+0x14>)
   d4160:	f007 fb46 	bl	db7f0 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4164:	b118      	cbz	r0, d416e <_Z7sendNow6String+0x12>
    state = MEASURING_STATE;
   d4166:	4b03      	ldr	r3, [pc, #12]	; (d4174 <_Z7sendNow6String+0x18>)
   d4168:	2203      	movs	r2, #3
   d416a:	701a      	strb	r2, [r3, #0]
    return 1;
   d416c:	2001      	movs	r0, #1
}
   d416e:	bd08      	pop	{r3, pc}
   d4170:	000df200 	.word	0x000df200
   d4174:	2003e3cc 	.word	0x2003e3cc

000d4178 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4178:	b510      	push	{r4, lr}
   d417a:	4b03      	ldr	r3, [pc, #12]	; (d4188 <_ZN8MB85RC64D1Ev+0x10>)
   d417c:	6003      	str	r3, [r0, #0]
   d417e:	4604      	mov	r4, r0
   d4180:	f003 f90d 	bl	d739e <_ZN6MB85RCD1Ev>
   d4184:	4620      	mov	r0, r4
   d4186:	bd10      	pop	{r4, pc}
   d4188:	000df8dc 	.word	0x000df8dc

000d418c <_ZN8MB85RC64D0Ev>:
   d418c:	b510      	push	{r4, lr}
   d418e:	4604      	mov	r4, r0
   d4190:	f7ff fff2 	bl	d4178 <_ZN8MB85RC64D1Ev>
   d4194:	4620      	mov	r0, r4
   d4196:	2110      	movs	r1, #16
   d4198:	f008 f960 	bl	dc45c <_ZdlPvj>
   d419c:	4620      	mov	r0, r4
   d419e:	bd10      	pop	{r4, pc}

000d41a0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41a0:	6943      	ldr	r3, [r0, #20]
   d41a2:	b113      	cbz	r3, d41aa <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41a4:	6983      	ldr	r3, [r0, #24]
   d41a6:	300c      	adds	r0, #12
   d41a8:	4718      	bx	r3
            callback();
        }
    }
   d41aa:	4770      	bx	lr

000d41ac <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41ac:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41ae:	2100      	movs	r1, #0
   d41b0:	4604      	mov	r4, r0
   d41b2:	4608      	mov	r0, r1
   d41b4:	f004 fb22 	bl	d87fc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41b8:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41ba:	4620      	mov	r0, r4
   d41bc:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41be:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41c0:	f004 fb34 	bl	d882c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41c4:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41c6:	b10c      	cbz	r4, d41cc <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d41c8:	2301      	movs	r3, #1
   d41ca:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41cc:	2100      	movs	r1, #0
   d41ce:	2001      	movs	r0, #1
   d41d0:	f004 fb14 	bl	d87fc <os_thread_scheduling>
            }
        }
        if (t) {
   d41d4:	b12c      	cbz	r4, d41e2 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d41d6:	6823      	ldr	r3, [r4, #0]
   d41d8:	4620      	mov	r0, r4
   d41da:	689b      	ldr	r3, [r3, #8]
   d41dc:	4798      	blx	r3
            t->running = false;
   d41de:	2300      	movs	r3, #0
   d41e0:	7123      	strb	r3, [r4, #4]
        }
    }
   d41e2:	b002      	add	sp, #8
   d41e4:	bd10      	pop	{r4, pc}

000d41e6 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d41e6:	b508      	push	{r3, lr}
          waitUntil(meterParticlePublish);
   d41e8:	f001 fff2 	bl	d61d0 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d41ec:	b910      	cbnz	r0, d41f4 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d41ee:	f004 fe51 	bl	d8e94 <spark_process>
        while (_while() && !_condition()) {
   d41f2:	e7f9      	b.n	d41e8 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
        }
        return _condition();
    }
   d41f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d41f8:	f001 bfea 	b.w	d61d0 <_Z20meterParticlePublishv>

000d41fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d41fc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41fe:	2000      	movs	r0, #0
   d4200:	f004 fe80 	bl	d8f04 <spark_sync_time_pending>
   d4204:	b128      	cbz	r0, d4212 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4206:	f004 fe55 	bl	d8eb4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d420a:	f080 0001 	eor.w	r0, r0, #1
   d420e:	b2c0      	uxtb	r0, r0
    }
   d4210:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4212:	2001      	movs	r0, #1
   d4214:	e7fc      	b.n	d4210 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d4216 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4216:	2300      	movs	r3, #0
   d4218:	2204      	movs	r2, #4
   d421a:	f004 be2b 	b.w	d8e74 <spark_variable>
	...

000d4220 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4220:	b530      	push	{r4, r5, lr}
   d4222:	b085      	sub	sp, #20
   d4224:	4603      	mov	r3, r0
   d4226:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4228:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d422a:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d422c:	4798      	blx	r3
        size = str.length();
   d422e:	9802      	ldr	r0, [sp, #8]
   d4230:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d4232:	f004 feef 	bl	d9014 <malloc>
   d4236:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4238:	b150      	cbz	r0, d4250 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d423a:	6822      	ldr	r2, [r4, #0]
   d423c:	9900      	ldr	r1, [sp, #0]
   d423e:	f008 feb5 	bl	dcfac <memcpy>
        return 0;
   d4242:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4244:	4668      	mov	r0, sp
   d4246:	f007 f9cf 	bl	db5e8 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d424a:	4620      	mov	r0, r4
   d424c:	b005      	add	sp, #20
   d424e:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d4250:	4c00      	ldr	r4, [pc, #0]	; (d4254 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d4252:	e7f7      	b.n	d4244 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4254:	fffffefc 	.word	0xfffffefc

000d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4258:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d425a:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d425e:	431d      	orrs	r5, r3
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4260:	f88d 5000 	strb.w	r5, [sp]
   d4264:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4266:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4268:	f005 fa32 	bl	d96d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d426c:	4620      	mov	r0, r4
   d426e:	b003      	add	sp, #12
   d4270:	bd30      	pop	{r4, r5, pc}
	...

000d4274 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4274:	4b0a      	ldr	r3, [pc, #40]	; (d42a0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4276:	b510      	push	{r4, lr}
   d4278:	4604      	mov	r4, r0
   d427a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d427c:	f006 f948 	bl	da510 <_ZN5spark10LogManager8instanceEv>
   d4280:	4621      	mov	r1, r4
   d4282:	f006 fb46 	bl	da912 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4286:	f007 ff03 	bl	dc090 <_Z16_fetch_usbserialv>
   d428a:	f007 fef5 	bl	dc078 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d428e:	4620      	mov	r0, r4
   d4290:	4b04      	ldr	r3, [pc, #16]	; (d42a4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4292:	f840 3b04 	str.w	r3, [r0], #4
   d4296:	f006 fa29 	bl	da6ec <_ZN5spark6detail9LogFilterD1Ev>
    }
   d429a:	4620      	mov	r0, r4
   d429c:	bd10      	pop	{r4, pc}
   d429e:	bf00      	nop
   d42a0:	000df8c4 	.word	0x000df8c4
   d42a4:	000df8ac 	.word	0x000df8ac

000d42a8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d42a8:	b510      	push	{r4, lr}
   d42aa:	4604      	mov	r4, r0
    }
   d42ac:	f7ff ffe2 	bl	d4274 <_ZN5spark16SerialLogHandlerD1Ev>
   d42b0:	4620      	mov	r0, r4
   d42b2:	2124      	movs	r1, #36	; 0x24
   d42b4:	f008 f8d2 	bl	dc45c <_ZdlPvj>
   d42b8:	4620      	mov	r0, r4
   d42ba:	bd10      	pop	{r4, pc}

000d42bc <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d42bc:	2300      	movs	r3, #0
   d42be:	6840      	ldr	r0, [r0, #4]
   d42c0:	461a      	mov	r2, r3
   d42c2:	4619      	mov	r1, r3
   d42c4:	f004 be6e 	b.w	d8fa4 <network_off>

000d42c8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42c8:	b510      	push	{r4, lr}
      if (_M_manager)
   d42ca:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42cc:	4604      	mov	r4, r0
      if (_M_manager)
   d42ce:	b113      	cbz	r3, d42d6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42d0:	2203      	movs	r2, #3
   d42d2:	4601      	mov	r1, r0
   d42d4:	4798      	blx	r3
    }
   d42d6:	4620      	mov	r0, r4
   d42d8:	bd10      	pop	{r4, pc}
	...

000d42dc <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d42dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42de:	4b13      	ldr	r3, [pc, #76]	; (d432c <_ZN5TimerD1Ev+0x50>)
   d42e0:	6003      	str	r3, [r0, #0]
   d42e2:	4604      	mov	r4, r0
        if (handle) {
   d42e4:	6880      	ldr	r0, [r0, #8]
   d42e6:	b1c8      	cbz	r0, d431c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42e8:	2500      	movs	r5, #0
   d42ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d42ee:	e9cd 3500 	strd	r3, r5, [sp]
   d42f2:	2102      	movs	r1, #2
   d42f4:	462b      	mov	r3, r5
   d42f6:	462a      	mov	r2, r5
   d42f8:	f004 faa0 	bl	d883c <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d42fc:	68a0      	ldr	r0, [r4, #8]
   d42fe:	4629      	mov	r1, r5
   d4300:	f004 faec 	bl	d88dc <os_timer_set_id>
            while (running) {
   d4304:	7923      	ldrb	r3, [r4, #4]
   d4306:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d430a:	b113      	cbz	r3, d4312 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d430c:	f004 fa5e 	bl	d87cc <os_thread_yield>
            while (running) {
   d4310:	e7f8      	b.n	d4304 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d4312:	68a0      	ldr	r0, [r4, #8]
   d4314:	4629      	mov	r1, r5
   d4316:	f004 fa81 	bl	d881c <os_timer_destroy>
            handle = nullptr;
   d431a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d431c:	f104 000c 	add.w	r0, r4, #12
   d4320:	f7ff ffd2 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
    }
   d4324:	4620      	mov	r0, r4
   d4326:	b003      	add	sp, #12
   d4328:	bd30      	pop	{r4, r5, pc}
   d432a:	bf00      	nop
   d432c:	000df898 	.word	0x000df898

000d4330 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4330:	b510      	push	{r4, lr}
   d4332:	4604      	mov	r4, r0
    }
   d4334:	f7ff ffd2 	bl	d42dc <_ZN5TimerD1Ev>
   d4338:	4620      	mov	r0, r4
   d433a:	211c      	movs	r1, #28
   d433c:	f008 f88e 	bl	dc45c <_ZdlPvj>
   d4340:	4620      	mov	r0, r4
   d4342:	bd10      	pop	{r4, pc}

000d4344 <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d4344:	b538      	push	{r3, r4, r5, lr}
   d4346:	4604      	mov	r4, r0
            : conf_{} {
   d4348:	2520      	movs	r5, #32
   d434a:	462a      	mov	r2, r5
   d434c:	2100      	movs	r1, #0
   d434e:	f008 fe55 	bl	dcffc <memset>
        conf_.size = sizeof(conf_);
   d4352:	7165      	strb	r5, [r4, #5]
    }
   d4354:	4620      	mov	r0, r4
   d4356:	bd38      	pop	{r3, r4, r5, pc}

000d4358 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d435a:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d435c:	4605      	mov	r5, r0
   d435e:	460f      	mov	r7, r1
   d4360:	4616      	mov	r6, r2
        if (valid_) {
   d4362:	b18b      	cbz	r3, d4388 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4364:	6803      	ldr	r3, [r0, #0]
   d4366:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4368:	b183      	cbz	r3, d438c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d436a:	889a      	ldrh	r2, [r3, #4]
   d436c:	2a01      	cmp	r2, #1
   d436e:	d006      	beq.n	d437e <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4370:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4372:	e7f9      	b.n	d4368 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4374:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4376:	b14b      	cbz	r3, d438c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4378:	889a      	ldrh	r2, [r3, #4]
   d437a:	2a01      	cmp	r2, #1
   d437c:	d1fa      	bne.n	d4374 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d437e:	b12b      	cbz	r3, d438c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4380:	899a      	ldrh	r2, [r3, #12]
   d4382:	42ba      	cmp	r2, r7
   d4384:	d1f6      	bne.n	d4374 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d4386:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4388:	4628      	mov	r0, r5
   d438a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d438c:	490a      	ldr	r1, [pc, #40]	; (d43b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d438e:	2010      	movs	r0, #16
   d4390:	f008 f866 	bl	dc460 <_ZnwjRKSt9nothrow_t>
   d4394:	4604      	mov	r4, r0
   d4396:	b168      	cbz	r0, d43b4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4398:	2210      	movs	r2, #16
   d439a:	2100      	movs	r1, #0
   d439c:	f008 fe2e 	bl	dcffc <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d43a0:	4b06      	ldr	r3, [pc, #24]	; (d43bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d43a2:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d43a4:	2301      	movs	r3, #1
   d43a6:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d43a8:	692b      	ldr	r3, [r5, #16]
   d43aa:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d43ac:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d43ae:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d43b0:	612c      	str	r4, [r5, #16]
   d43b2:	e7e9      	b.n	d4388 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d43b4:	7528      	strb	r0, [r5, #20]
                return *this;
   d43b6:	e7e7      	b.n	d4388 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d43b8:	000e02b8 	.word	0x000e02b8
   d43bc:	00030010 	.word	0x00030010

000d43c0 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d43c0:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d43c2:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d43c4:	4605      	mov	r5, r0
   d43c6:	460e      	mov	r6, r1
        if (valid_) {
   d43c8:	b1cb      	cbz	r3, d43fe <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d43ca:	6803      	ldr	r3, [r0, #0]
   d43cc:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d43ce:	b123      	cbz	r3, d43da <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d43d0:	889a      	ldrh	r2, [r3, #4]
   d43d2:	2a04      	cmp	r2, #4
   d43d4:	d017      	beq.n	d4406 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d43d6:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d43d8:	e7f9      	b.n	d43ce <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d43da:	490c      	ldr	r1, [pc, #48]	; (d440c <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d43dc:	2010      	movs	r0, #16
   d43de:	f008 f83f 	bl	dc460 <_ZnwjRKSt9nothrow_t>
   d43e2:	4604      	mov	r4, r0
   d43e4:	b168      	cbz	r0, d4402 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d43e6:	2210      	movs	r2, #16
   d43e8:	2100      	movs	r1, #0
   d43ea:	f008 fe07 	bl	dcffc <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d43ee:	4b08      	ldr	r3, [pc, #32]	; (d4410 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d43f0:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d43f2:	2304      	movs	r3, #4
   d43f4:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d43f6:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d43f8:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d43fa:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d43fe:	4628      	mov	r0, r5
   d4400:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d4402:	7528      	strb	r0, [r5, #20]
                return *this;
   d4404:	e7fb      	b.n	d43fe <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4406:	60de      	str	r6, [r3, #12]
                return *this;
   d4408:	e7f9      	b.n	d43fe <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d440a:	bf00      	nop
   d440c:	000e02b8 	.word	0x000e02b8
   d4410:	00030010 	.word	0x00030010

000d4414 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4414:	2000      	movs	r0, #0
   d4416:	f004 baa1 	b.w	d895c <hal_timer_millis>
	...

000d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d441c:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d441e:	4801      	ldr	r0, [pc, #4]	; (d4424 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4420:	f005 b82e 	b.w	d9480 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4424:	000d9455 	.word	0x000d9455

000d4428 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4428:	b5f0      	push	{r4, r5, r6, r7, lr}
   d442a:	468c      	mov	ip, r1
   d442c:	2500      	movs	r5, #0
   d442e:	4914      	ldr	r1, [pc, #80]	; (d4480 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   d4430:	7105      	strb	r5, [r0, #4]
   d4432:	4604      	mov	r4, r0
   d4434:	6085      	str	r5, [r0, #8]
   d4436:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4438:	e892 0003 	ldmia.w	r2, {r0, r1}
   d443c:	b085      	sub	sp, #20
   d443e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4440:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4444:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4448:	e896 0003 	ldmia.w	r6, {r0, r1}
   d444c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4450:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4454:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4458:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d445a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d445c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d445e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4460:	6095      	str	r5, [r2, #8]
   d4462:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4464:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4466:	e9cd 3500 	strd	r3, r5, [sp]
   d446a:	4a06      	ldr	r2, [pc, #24]	; (d4484 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d446c:	4623      	mov	r3, r4
   d446e:	4661      	mov	r1, ip
   d4470:	f104 0008 	add.w	r0, r4, #8
   d4474:	f004 f9ca 	bl	d880c <os_timer_create>
    }
   d4478:	4620      	mov	r0, r4
   d447a:	b005      	add	sp, #20
   d447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d447e:	bf00      	nop
   d4480:	000df898 	.word	0x000df898
   d4484:	000d41ad 	.word	0x000d41ad

000d4488 <_ZNK5Timer8isActiveEv>:
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4488:	b508      	push	{r3, lr}
    bool isValid() const { return handle!=nullptr; }
   d448a:	6880      	ldr	r0, [r0, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d448c:	b128      	cbz	r0, d449a <_ZNK5Timer8isActiveEv+0x12>
   d448e:	2100      	movs	r1, #0
   d4490:	f004 fa14 	bl	d88bc <os_timer_is_active>
   d4494:	3800      	subs	r0, #0
   d4496:	bf18      	it	ne
   d4498:	2001      	movne	r0, #1
   d449a:	bd08      	pop	{r3, pc}

000d449c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d449c:	b40e      	push	{r1, r2, r3}
   d449e:	b510      	push	{r4, lr}
   d44a0:	b08d      	sub	sp, #52	; 0x34
   d44a2:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d44a4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d44a6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d44aa:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d44ac:	2300      	movs	r3, #0
   d44ae:	2020      	movs	r0, #32
   d44b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d44b4:	e9cd 4200 	strd	r4, r2, [sp]
   d44b8:	201e      	movs	r0, #30
   d44ba:	aa04      	add	r2, sp, #16
   d44bc:	f004 fc36 	bl	d8d2c <log_message_v>
}
   d44c0:	b00d      	add	sp, #52	; 0x34
   d44c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d44c6:	b003      	add	sp, #12
   d44c8:	4770      	bx	lr

000d44ca <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d44ca:	b40e      	push	{r1, r2, r3}
   d44cc:	b510      	push	{r4, lr}
   d44ce:	b08d      	sub	sp, #52	; 0x34
   d44d0:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d44d2:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d44d4:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d44d8:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d44da:	2300      	movs	r3, #0
   d44dc:	2020      	movs	r0, #32
   d44de:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d44e2:	e9cd 4200 	strd	r4, r2, [sp]
   d44e6:	2032      	movs	r0, #50	; 0x32
   d44e8:	aa04      	add	r2, sp, #16
   d44ea:	f004 fc1f 	bl	d8d2c <log_message_v>
}
   d44ee:	b00d      	add	sp, #52	; 0x34
   d44f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d44f4:	b003      	add	sp, #12
   d44f6:	4770      	bx	lr

000d44f8 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44fa:	6804      	ldr	r4, [r0, #0]
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44fc:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4500:	f88d 3000 	strb.w	r3, [sp]
   d4504:	f88d 5004 	strb.w	r5, [sp, #4]
   d4508:	6824      	ldr	r4, [r4, #0]
   d450a:	233c      	movs	r3, #60	; 0x3c
   d450c:	47a0      	blx	r4
	}
   d450e:	b003      	add	sp, #12
   d4510:	bd30      	pop	{r4, r5, pc}
	...

000d4514 <_Z21firmwareUpdateHandleryi>:
void firmwareUpdateHandler(system_event_t event, int param) {
   d4514:	b570      	push	{r4, r5, r6, lr}
   d4516:	b092      	sub	sp, #72	; 0x48
  switch(param) {
   d4518:	b312      	cbz	r2, d4560 <_Z21firmwareUpdateHandleryi+0x4c>
   d451a:	2a01      	cmp	r2, #1
   d451c:	d028      	beq.n	d4570 <_Z21firmwareUpdateHandleryi+0x5c>
   d451e:	3201      	adds	r2, #1
   d4520:	d121      	bne.n	d4566 <_Z21firmwareUpdateHandleryi+0x52>
      firmwareUpdateInProgress = false;
   d4522:	4b21      	ldr	r3, [pc, #132]	; (d45a8 <_Z21firmwareUpdateHandleryi+0x94>)
      current.alerts = 6;                                              // Record a failed attempt
   d4524:	4c21      	ldr	r4, [pc, #132]	; (d45ac <_Z21firmwareUpdateHandleryi+0x98>)
      firmwareUpdateInProgress = false;
   d4526:	2500      	movs	r5, #0
      current.alerts = 6;                                              // Record a failed attempt
   d4528:	2606      	movs	r6, #6
      firmwareUpdateInProgress = false;
   d452a:	701d      	strb	r5, [r3, #0]
      current.alerts = 6;                                              // Record a failed attempt
   d452c:	6126      	str	r6, [r4, #16]
      snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d452e:	f007 fc78 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d4532:	4a1f      	ldr	r2, [pc, #124]	; (d45b0 <_Z21firmwareUpdateHandleryi+0x9c>)
   d4534:	9000      	str	r0, [sp, #0]
   d4536:	4633      	mov	r3, r6
   d4538:	2140      	movs	r1, #64	; 0x40
   d453a:	a802      	add	r0, sp, #8
   d453c:	f004 fd92 	bl	d9064 <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publlish queue
   d4540:	f003 f9aa 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
   d4544:	4b1b      	ldr	r3, [pc, #108]	; (d45b4 <_Z21firmwareUpdateHandleryi+0xa0>)
   d4546:	f88d 5000 	strb.w	r5, [sp]
   d454a:	781b      	ldrb	r3, [r3, #0]
   d454c:	491a      	ldr	r1, [pc, #104]	; (d45b8 <_Z21firmwareUpdateHandleryi+0xa4>)
   d454e:	aa02      	add	r2, sp, #8
   d4550:	f7ff ffd2 	bl	d44f8 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      current.updateAttempts++;                                        // Increment the update attempts counter
   d4554:	f894 3020 	ldrb.w	r3, [r4, #32]
   d4558:	3301      	adds	r3, #1
   d455a:	f884 3020 	strb.w	r3, [r4, #32]
      break;
   d455e:	e002      	b.n	d4566 <_Z21firmwareUpdateHandleryi+0x52>
      firmwareUpdateInProgress = true;
   d4560:	4b11      	ldr	r3, [pc, #68]	; (d45a8 <_Z21firmwareUpdateHandleryi+0x94>)
   d4562:	2201      	movs	r2, #1
   d4564:	701a      	strb	r2, [r3, #0]
  currentCountsWriteNeeded = true;
   d4566:	4b15      	ldr	r3, [pc, #84]	; (d45bc <_Z21firmwareUpdateHandleryi+0xa8>)
   d4568:	2201      	movs	r2, #1
   d456a:	701a      	strb	r2, [r3, #0]
}
   d456c:	b012      	add	sp, #72	; 0x48
   d456e:	bd70      	pop	{r4, r5, r6, pc}
      firmwareUpdateInProgress = false;
   d4570:	4b0d      	ldr	r3, [pc, #52]	; (d45a8 <_Z21firmwareUpdateHandleryi+0x94>)
      current.alerts = 4;                                              // Record a successful attempt
   d4572:	4d0e      	ldr	r5, [pc, #56]	; (d45ac <_Z21firmwareUpdateHandleryi+0x98>)
      firmwareUpdateInProgress = false;
   d4574:	2400      	movs	r4, #0
      current.alerts = 4;                                              // Record a successful attempt
   d4576:	2604      	movs	r6, #4
      firmwareUpdateInProgress = false;
   d4578:	701c      	strb	r4, [r3, #0]
      current.alerts = 4;                                              // Record a successful attempt
   d457a:	612e      	str	r6, [r5, #16]
      snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d457c:	f007 fc51 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d4580:	4a0b      	ldr	r2, [pc, #44]	; (d45b0 <_Z21firmwareUpdateHandleryi+0x9c>)
   d4582:	9000      	str	r0, [sp, #0]
   d4584:	4633      	mov	r3, r6
   d4586:	2140      	movs	r1, #64	; 0x40
   d4588:	a802      	add	r0, sp, #8
   d458a:	f004 fd6b 	bl	d9064 <snprintf>
      PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   d458e:	f003 f983 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
   d4592:	4b08      	ldr	r3, [pc, #32]	; (d45b4 <_Z21firmwareUpdateHandleryi+0xa0>)
   d4594:	f88d 4000 	strb.w	r4, [sp]
   d4598:	781b      	ldrb	r3, [r3, #0]
   d459a:	4907      	ldr	r1, [pc, #28]	; (d45b8 <_Z21firmwareUpdateHandleryi+0xa4>)
   d459c:	aa02      	add	r2, sp, #8
   d459e:	f7ff ffab 	bl	d44f8 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      current.updateAttempts = 0;                                      // Zero the update attempts counter
   d45a2:	f885 4020 	strb.w	r4, [r5, #32]
      break;
   d45a6:	e7de      	b.n	d4566 <_Z21firmwareUpdateHandleryi+0x52>
   d45a8:	2003e370 	.word	0x2003e370
   d45ac:	2003e340 	.word	0x2003e340
   d45b0:	000df235 	.word	0x000df235
   d45b4:	2003e2dc 	.word	0x2003e2dc
   d45b8:	000df257 	.word	0x000df257
   d45bc:	2003e364 	.word	0x2003e364

000d45c0 <_Z9sendEventv>:
void sendEvent() {
   d45c0:	b530      	push	{r4, r5, lr}
   d45c2:	b0c9      	sub	sp, #292	; 0x124
  unsigned long timeStampValue = Time.now();                                       // Going to start sending timestamps - and will modify for midnight to fix reporting issue
   d45c4:	f007 fc2d 	bl	dbe22 <_ZN9TimeClass3nowEv>
  snprintf(data, sizeof(data), "{\"soilMoisture\":%i, \"watering\":%i, \"battery\":%i,\"key1\":\"%s\",\"temp\":%i, \"resets\":%i, \"alerts\":%i, \"connecttime\":%i,\"timestamp\":%lu000}",current.soilMoisture, current.solenoidState, sysStatus.stateOfCharge, batteryContext[sysStatus.batteryState], current.temperature, sysStatus.resetCount, current.alerts, sysStatus.lastConnectionDuration, timeStampValue);
   d45c8:	4b14      	ldr	r3, [pc, #80]	; (d461c <_Z9sendEventv+0x5c>)
   d45ca:	9007      	str	r0, [sp, #28]
   d45cc:	4c14      	ldr	r4, [pc, #80]	; (d4620 <_Z9sendEventv+0x60>)
   d45ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   d45d0:	9206      	str	r2, [sp, #24]
   d45d2:	6922      	ldr	r2, [r4, #16]
   d45d4:	9205      	str	r2, [sp, #20]
   d45d6:	691a      	ldr	r2, [r3, #16]
   d45d8:	9204      	str	r2, [sp, #16]
   d45da:	68e2      	ldr	r2, [r4, #12]
   d45dc:	9203      	str	r2, [sp, #12]
   d45de:	7b19      	ldrb	r1, [r3, #12]
   d45e0:	4a10      	ldr	r2, [pc, #64]	; (d4624 <_Z9sendEventv+0x64>)
   d45e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   d45e6:	9202      	str	r2, [sp, #8]
   d45e8:	689b      	ldr	r3, [r3, #8]
   d45ea:	9301      	str	r3, [sp, #4]
   d45ec:	68a3      	ldr	r3, [r4, #8]
   d45ee:	4a0e      	ldr	r2, [pc, #56]	; (d4628 <_Z9sendEventv+0x68>)
   d45f0:	9300      	str	r3, [sp, #0]
   d45f2:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45f6:	6863      	ldr	r3, [r4, #4]
   d45f8:	a808      	add	r0, sp, #32
   d45fa:	f004 fd33 	bl	d9064 <snprintf>
        val_(0) {
   d45fe:	2500      	movs	r5, #0
  PublishQueuePosix::instance().publish("Ubidots-AquaMaster-Garden-v1", data, PRIVATE);
   d4600:	f003 f94a 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
   d4604:	4b09      	ldr	r3, [pc, #36]	; (d462c <_Z9sendEventv+0x6c>)
   d4606:	f88d 5000 	strb.w	r5, [sp]
   d460a:	781b      	ldrb	r3, [r3, #0]
   d460c:	4908      	ldr	r1, [pc, #32]	; (d4630 <_Z9sendEventv+0x70>)
   d460e:	aa08      	add	r2, sp, #32
   d4610:	f7ff ff72 	bl	d44f8 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  current.alerts = 0;                                                 // Reset alerts after send
   d4614:	6125      	str	r5, [r4, #16]
}
   d4616:	b049      	add	sp, #292	; 0x124
   d4618:	bd30      	pop	{r4, r5, pc}
   d461a:	bf00      	nop
   d461c:	2003e3d8 	.word	0x2003e3d8
   d4620:	2003e340 	.word	0x2003e340
   d4624:	2003dfa8 	.word	0x2003dfa8
   d4628:	000df26a 	.word	0x000df26a
   d462c:	2003e2dc 	.word	0x2003e2dc
   d4630:	000df2f0 	.word	0x000df2f0

000d4634 <_Z16isItSafeToChargev>:
{         
   d4634:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);                                 
   d4636:	2101      	movs	r1, #1
   d4638:	a801      	add	r0, sp, #4
   d463a:	f006 fe96 	bl	db36a <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d463e:	4b0b      	ldr	r3, [pc, #44]	; (d466c <_Z16isItSafeToChargev+0x38>)
   d4640:	68db      	ldr	r3, [r3, #12]
   d4642:	3b24      	subs	r3, #36	; 0x24
   d4644:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4646:	a801      	add	r0, sp, #4
   d4648:	f04f 0401 	mov.w	r4, #1
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d464c:	d90a      	bls.n	d4664 <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d464e:	f006 ff1f 	bl	db490 <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d4652:	4b07      	ldr	r3, [pc, #28]	; (d4670 <_Z16isItSafeToChargev+0x3c>)
   d4654:	731c      	strb	r4, [r3, #12]
    return false;
   d4656:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d4658:	a801      	add	r0, sp, #4
   d465a:	f006 fe95 	bl	db388 <_ZN4PMICD1Ev>
}
   d465e:	4620      	mov	r0, r4
   d4660:	b002      	add	sp, #8
   d4662:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                                            // It is safe to charge the battery
   d4664:	f006 fefd 	bl	db462 <_ZN4PMIC14enableChargingEv>
    return true;
   d4668:	e7f6      	b.n	d4658 <_Z16isItSafeToChargev+0x24>
   d466a:	bf00      	nop
   d466c:	2003e340 	.word	0x2003e340
   d4670:	2003e3d8 	.word	0x2003e3d8

000d4674 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d4674:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4676:	4d19      	ldr	r5, [pc, #100]	; (d46dc <_Z17getSignalStrengthv+0x68>)
   d4678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d467a:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d467c:	ac04      	add	r4, sp, #16
   d467e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4684:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4688:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d468c:	4914      	ldr	r1, [pc, #80]	; (d46e0 <_Z17getSignalStrengthv+0x6c>)
   d468e:	a80e      	add	r0, sp, #56	; 0x38
   d4690:	f004 fd98 	bl	d91c4 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4694:	a80e      	add	r0, sp, #56	; 0x38
   d4696:	f004 fde8 	bl	d926a <_ZNK14CellularSignal19getAccessTechnologyEv>
   d469a:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d469c:	a80e      	add	r0, sp, #56	; 0x38
   d469e:	f004 fdff 	bl	d92a0 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d46a2:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d46a4:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d46a8:	f004 fe2a 	bl	d9300 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d46ac:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d46ae:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d46b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d46b6:	f008 f845 	bl	dc744 <__aeabi_f2d>
   d46ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d46be:	4628      	mov	r0, r5
   d46c0:	f008 f840 	bl	dc744 <__aeabi_f2d>
   d46c4:	e9cd 0100 	strd	r0, r1, [sp]
   d46c8:	4a06      	ldr	r2, [pc, #24]	; (d46e4 <_Z17getSignalStrengthv+0x70>)
   d46ca:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d46ce:	4806      	ldr	r0, [pc, #24]	; (d46e8 <_Z17getSignalStrengthv+0x74>)
   d46d0:	2140      	movs	r1, #64	; 0x40
   d46d2:	f004 fcc7 	bl	d9064 <snprintf>
}
   d46d6:	b019      	add	sp, #100	; 0x64
   d46d8:	bd30      	pop	{r4, r5, pc}
   d46da:	bf00      	nop
   d46dc:	000df8f0 	.word	0x000df8f0
   d46e0:	2003e464 	.word	0x2003e464
   d46e4:	000df30d 	.word	0x000df30d
   d46e8:	2003e290 	.word	0x2003e290
   d46ec:	00000000 	.word	0x00000000

000d46f0 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d46f0:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d46f2:	200f      	movs	r0, #15
   d46f4:	f007 fe21 	bl	dc33a <analogRead>
  if (reading < 400) {                                                // This corresponds to 0 degrees - less than this and we should take another reading to be sure
   d46f8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d46fc:	da05      	bge.n	d470a <_Z14getTemperaturev+0x1a>
    delay(50);
   d46fe:	2032      	movs	r0, #50	; 0x32
   d4700:	f004 fd0c 	bl	d911c <delay>
    reading = analogRead(tmp36Pin);
   d4704:	200f      	movs	r0, #15
   d4706:	f007 fe18 	bl	dc33a <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d470a:	f008 f809 	bl	dc720 <__aeabi_i2d>
   d470e:	a320      	add	r3, pc, #128	; (adr r3, d4790 <_Z14getTemperaturev+0xa0>)
   d4710:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4714:	f008 f86e 	bl	dc7f4 <__aeabi_dmul>
   d4718:	f008 fb64 	bl	dcde4 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d471c:	eddf 7a14 	vldr	s15, [pc, #80]	; d4770 <_Z14getTemperaturev+0x80>
   d4720:	ee07 0a10 	vmov	s14, r0
   d4724:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4728:	ee17 0a90 	vmov	r0, s15
   d472c:	f008 f80a 	bl	dc744 <__aeabi_f2d>
   d4730:	4b10      	ldr	r3, [pc, #64]	; (d4774 <_Z14getTemperaturev+0x84>)
   d4732:	2200      	movs	r2, #0
   d4734:	f007 fea6 	bl	dc484 <__aeabi_dsub>
   d4738:	4b0f      	ldr	r3, [pc, #60]	; (d4778 <_Z14getTemperaturev+0x88>)
   d473a:	2200      	movs	r2, #0
   d473c:	f008 f85a 	bl	dc7f4 <__aeabi_dmul>
   d4740:	f008 fb08 	bl	dcd54 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d4744:	f007 ffec 	bl	dc720 <__aeabi_i2d>
   d4748:	4b0c      	ldr	r3, [pc, #48]	; (d477c <_Z14getTemperaturev+0x8c>)
   d474a:	2200      	movs	r2, #0
   d474c:	f008 f852 	bl	dc7f4 <__aeabi_dmul>
   d4750:	4b0b      	ldr	r3, [pc, #44]	; (d4780 <_Z14getTemperaturev+0x90>)
   d4752:	2200      	movs	r2, #0
   d4754:	f008 f978 	bl	dca48 <__aeabi_ddiv>
   d4758:	4b0a      	ldr	r3, [pc, #40]	; (d4784 <_Z14getTemperaturev+0x94>)
   d475a:	2200      	movs	r2, #0
   d475c:	f007 fe94 	bl	dc488 <__adddf3>
   d4760:	f008 faf8 	bl	dcd54 <__aeabi_d2iz>
   d4764:	4b08      	ldr	r3, [pc, #32]	; (d4788 <_Z14getTemperaturev+0x98>)
   d4766:	60d8      	str	r0, [r3, #12]
  currentCountsWriteNeeded=true;
   d4768:	4b08      	ldr	r3, [pc, #32]	; (d478c <_Z14getTemperaturev+0x9c>)
   d476a:	2201      	movs	r2, #1
   d476c:	701a      	strb	r2, [r3, #0]
}
   d476e:	bd08      	pop	{r3, pc}
   d4770:	39800000 	.word	0x39800000
   d4774:	3fe00000 	.word	0x3fe00000
   d4778:	40590000 	.word	0x40590000
   d477c:	40220000 	.word	0x40220000
   d4780:	40140000 	.word	0x40140000
   d4784:	40400000 	.word	0x40400000
   d4788:	2003e340 	.word	0x2003e340
   d478c:	2003e364 	.word	0x2003e364
   d4790:	66666666 	.word	0x66666666
   d4794:	400a6666 	.word	0x400a6666

000d4798 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d4798:	b500      	push	{lr}
   d479a:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d479c:	4668      	mov	r0, sp
   d479e:	f7ff fdd1 	bl	d4344 <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d47a2:	a808      	add	r0, sp, #32
   d47a4:	f7ff fdce 	bl	d4344 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d47a8:	2100      	movs	r1, #0
   d47aa:	a808      	add	r0, sp, #32
   d47ac:	f004 fb44 	bl	d8e38 <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d47b0:	4b13      	ldr	r3, [pc, #76]	; (d4800 <_Z14setPowerConfigv+0x68>)
   d47b2:	7959      	ldrb	r1, [r3, #5]
   d47b4:	b1a1      	cbz	r1, d47e0 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d47b6:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d47ba:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d47be:	4b11      	ldr	r3, [pc, #68]	; (d4804 <_Z14setPowerConfigv+0x6c>)
   d47c0:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d47c2:	f241 0370 	movw	r3, #4208	; 0x1070
   d47c6:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d47ca:	9b00      	ldr	r3, [sp, #0]
   d47cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d47d0:	9300      	str	r3, [sp, #0]
   d47d2:	2100      	movs	r1, #0
   d47d4:	4668      	mov	r0, sp
   d47d6:	f004 fb2f 	bl	d8e38 <system_power_management_set_config>
}
   d47da:	b011      	add	sp, #68	; 0x44
   d47dc:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d47e0:	f241 0370 	movw	r3, #4208	; 0x1070
   d47e4:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d47e8:	4b07      	ldr	r3, [pc, #28]	; (d4808 <_Z14setPowerConfigv+0x70>)
   d47ea:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d47ec:	f241 0310 	movw	r3, #4112	; 0x1010
   d47f0:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d47f4:	9b00      	ldr	r3, [sp, #0]
   d47f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d47fa:	9300      	str	r3, [sp, #0]
   d47fc:	e7ea      	b.n	d47d4 <_Z14setPowerConfigv+0x3c>
   d47fe:	bf00      	nop
   d4800:	2003e3d8 	.word	0x2003e3d8
   d4804:	02260226 	.word	0x02260226
   d4808:	03840384 	.word	0x03840384

000d480c <_Z17checkSystemValuesv>:
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d480c:	4b31      	ldr	r3, [pc, #196]	; (d48d4 <_Z17checkSystemValuesv+0xc8>)
   d480e:	691a      	ldr	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4810:	edd3 7a05 	vldr	s15, [r3, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4814:	2aff      	cmp	r2, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4816:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d481a:	bf88      	it	hi
   d481c:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d481e:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4822:	bf88      	it	hi
   d4824:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d482a:	d406      	bmi.n	d483a <_Z17checkSystemValuesv+0x2e>
   d482c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4830:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4838:	dd01      	ble.n	d483e <_Z17checkSystemValuesv+0x32>
   d483a:	4a27      	ldr	r2, [pc, #156]	; (d48d8 <_Z17checkSystemValuesv+0xcc>)
   d483c:	615a      	str	r2, [r3, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d483e:	edd3 7a06 	vldr	s15, [r3, #24]
   d4842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d484a:	d406      	bmi.n	d485a <_Z17checkSystemValuesv+0x4e>
   d484c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4850:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4858:	dd02      	ble.n	d4860 <_Z17checkSystemValuesv+0x54>
   d485a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d485e:	619a      	str	r2, [r3, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d4860:	7f1a      	ldrb	r2, [r3, #28]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4862:	8d19      	ldrh	r1, [r3, #40]	; 0x28
  if (sysStatus.wateringThresholdPct < 0 || sysStatus.wateringThresholdPct > 100) sysStatus.wateringThresholdPct = 10.0;
   d4864:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d4868:	2a0c      	cmp	r2, #12
   d486a:	bf84      	itt	hi
   d486c:	2200      	movhi	r2, #0
   d486e:	771a      	strbhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4870:	7f5a      	ldrb	r2, [r3, #29]
   d4872:	3a0c      	subs	r2, #12
   d4874:	2a0c      	cmp	r2, #12
   d4876:	bf84      	itt	hi
   d4878:	2218      	movhi	r2, #24
   d487a:	775a      	strbhi	r2, [r3, #29]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d487c:	4a17      	ldr	r2, [pc, #92]	; (d48dc <_Z17checkSystemValuesv+0xd0>)
   d487e:	6812      	ldr	r2, [r2, #0]
   d4880:	4291      	cmp	r1, r2
   d4882:	bf88      	it	hi
   d4884:	2100      	movhi	r1, #0
  if (sysStatus.wateringThresholdPct < 0 || sysStatus.wateringThresholdPct > 100) sysStatus.wateringThresholdPct = 10.0;
   d4886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d488a:	bf88      	it	hi
   d488c:	8519      	strhhi	r1, [r3, #40]	; 0x28
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d488e:	2101      	movs	r1, #1
  if (sysStatus.wateringThresholdPct < 0 || sysStatus.wateringThresholdPct > 100) sysStatus.wateringThresholdPct = 10.0;
   d4890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4894:	7159      	strb	r1, [r3, #5]
  if (sysStatus.wateringThresholdPct < 0 || sysStatus.wateringThresholdPct > 100) sysStatus.wateringThresholdPct = 10.0;
   d4896:	d406      	bmi.n	d48a6 <_Z17checkSystemValuesv+0x9a>
   d4898:	ed9f 7a11 	vldr	s14, [pc, #68]	; d48e0 <_Z17checkSystemValuesv+0xd4>
   d489c:	eef4 7ac7 	vcmpe.f32	s15, s14
   d48a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48a4:	dd01      	ble.n	d48aa <_Z17checkSystemValuesv+0x9e>
   d48a6:	490f      	ldr	r1, [pc, #60]	; (d48e4 <_Z17checkSystemValuesv+0xd8>)
   d48a8:	62d9      	str	r1, [r3, #44]	; 0x2c
  if (sysStatus.wateringDuration < 0 || sysStatus.wateringDuration > 1000) sysStatus.wateringDuration = 300;
   d48aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
   d48ac:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   d48b0:	bf84      	itt	hi
   d48b2:	f44f 7196 	movhi.w	r1, #300	; 0x12c
   d48b6:	6319      	strhi	r1, [r3, #48]	; 0x30
  if (current.maxConnectTime > connectMaxTimeSec) {
   d48b8:	4b0b      	ldr	r3, [pc, #44]	; (d48e8 <_Z17checkSystemValuesv+0xdc>)
   d48ba:	8b19      	ldrh	r1, [r3, #24]
   d48bc:	428a      	cmp	r2, r1
   d48be:	d204      	bcs.n	d48ca <_Z17checkSystemValuesv+0xbe>
    current.maxConnectTime = 0;
   d48c0:	2200      	movs	r2, #0
   d48c2:	831a      	strh	r2, [r3, #24]
    currentCountsWriteNeeded = true;
   d48c4:	4b09      	ldr	r3, [pc, #36]	; (d48ec <_Z17checkSystemValuesv+0xe0>)
   d48c6:	2201      	movs	r2, #1
   d48c8:	701a      	strb	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   d48ca:	4b09      	ldr	r3, [pc, #36]	; (d48f0 <_Z17checkSystemValuesv+0xe4>)
   d48cc:	2201      	movs	r2, #1
   d48ce:	701a      	strb	r2, [r3, #0]
}
   d48d0:	4770      	bx	lr
   d48d2:	bf00      	nop
   d48d4:	2003e3d8 	.word	0x2003e3d8
   d48d8:	c0a00000 	.word	0xc0a00000
   d48dc:	2003dfcc 	.word	0x2003dfcc
   d48e0:	42c80000 	.word	0x42c80000
   d48e4:	41200000 	.word	0x41200000
   d48e8:	2003e340 	.word	0x2003e340
   d48ec:	2003e364 	.word	0x2003e364
   d48f0:	2003e40c 	.word	0x2003e40c

000d48f4 <_Z20makeUpStringMessagesv>:
void makeUpStringMessages() {
   d48f4:	b513      	push	{r0, r1, r4, lr}
  if (sysStatus.openTime == 0 && sysStatus.closeTime == 24) {                         // Special case for 24 hour operations
   d48f6:	4c1a      	ldr	r4, [pc, #104]	; (d4960 <_Z20makeUpStringMessagesv+0x6c>)
   d48f8:	8ba3      	ldrh	r3, [r4, #28]
   d48fa:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d48fe:	d120      	bne.n	d4942 <_Z20makeUpStringMessagesv+0x4e>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   d4900:	4918      	ldr	r1, [pc, #96]	; (d4964 <_Z20makeUpStringMessagesv+0x70>)
   d4902:	4819      	ldr	r0, [pc, #100]	; (d4968 <_Z20makeUpStringMessagesv+0x74>)
   d4904:	f008 fbc7 	bl	dd096 <strcpy>
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   d4908:	4916      	ldr	r1, [pc, #88]	; (d4964 <_Z20makeUpStringMessagesv+0x70>)
   d490a:	4818      	ldr	r0, [pc, #96]	; (d496c <_Z20makeUpStringMessagesv+0x78>)
   d490c:	f008 fbc3 	bl	dd096 <strcpy>
  if (sysStatus.lowPowerMode) strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d4910:	79a3      	ldrb	r3, [r4, #6]
   d4912:	2210      	movs	r2, #16
   d4914:	b313      	cbz	r3, d495c <_Z20makeUpStringMessagesv+0x68>
   d4916:	4916      	ldr	r1, [pc, #88]	; (d4970 <_Z20makeUpStringMessagesv+0x7c>)
  else strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));
   d4918:	4816      	ldr	r0, [pc, #88]	; (d4974 <_Z20makeUpStringMessagesv+0x80>)
   d491a:	f008 fbfc 	bl	dd116 <strncpy>
  snprintf(wateringDurationStr,sizeof(wateringDurationStr),"%i seconds",sysStatus.wateringDuration);
   d491e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d4920:	4a15      	ldr	r2, [pc, #84]	; (d4978 <_Z20makeUpStringMessagesv+0x84>)
   d4922:	4816      	ldr	r0, [pc, #88]	; (d497c <_Z20makeUpStringMessagesv+0x88>)
   d4924:	2110      	movs	r1, #16
   d4926:	f004 fb9d 	bl	d9064 <snprintf>
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d492a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d492c:	f007 ff0a 	bl	dc744 <__aeabi_f2d>
   d4930:	4a13      	ldr	r2, [pc, #76]	; (d4980 <_Z20makeUpStringMessagesv+0x8c>)
   d4932:	e9cd 0100 	strd	r0, r1, [sp]
   d4936:	2108      	movs	r1, #8
   d4938:	4812      	ldr	r0, [pc, #72]	; (d4984 <_Z20makeUpStringMessagesv+0x90>)
   d493a:	f004 fb93 	bl	d9064 <snprintf>
}
   d493e:	b002      	add	sp, #8
   d4940:	bd10      	pop	{r4, pc}
    snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.openTime);           // Open and Close Times
   d4942:	7f23      	ldrb	r3, [r4, #28]
   d4944:	4a10      	ldr	r2, [pc, #64]	; (d4988 <_Z20makeUpStringMessagesv+0x94>)
   d4946:	4808      	ldr	r0, [pc, #32]	; (d4968 <_Z20makeUpStringMessagesv+0x74>)
   d4948:	2108      	movs	r1, #8
   d494a:	f004 fb8b 	bl	d9064 <snprintf>
    snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d494e:	7f63      	ldrb	r3, [r4, #29]
   d4950:	4a0d      	ldr	r2, [pc, #52]	; (d4988 <_Z20makeUpStringMessagesv+0x94>)
   d4952:	4806      	ldr	r0, [pc, #24]	; (d496c <_Z20makeUpStringMessagesv+0x78>)
   d4954:	2108      	movs	r1, #8
   d4956:	f004 fb85 	bl	d9064 <snprintf>
   d495a:	e7d9      	b.n	d4910 <_Z20makeUpStringMessagesv+0x1c>
  else strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));
   d495c:	490b      	ldr	r1, [pc, #44]	; (d498c <_Z20makeUpStringMessagesv+0x98>)
   d495e:	e7db      	b.n	d4918 <_Z20makeUpStringMessagesv+0x24>
   d4960:	2003e3d8 	.word	0x2003e3d8
   d4964:	000df326 	.word	0x000df326
   d4968:	2003dfd6 	.word	0x2003dfd6
   d496c:	2003dfc4 	.word	0x2003dfc4
   d4970:	000df333 	.word	0x000df333
   d4974:	2003e3b4 	.word	0x2003e3b4
   d4978:	000df33d 	.word	0x000df33d
   d497c:	2003e40e 	.word	0x2003e40e
   d4980:	000df348 	.word	0x000df348
   d4984:	2003e41e 	.word	0x2003e41e
   d4988:	000df329 	.word	0x000df329
   d498c:	000df32f 	.word	0x000df32f

000d4990 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d4990:	b570      	push	{r4, r5, r6, lr}
   d4992:	b092      	sub	sp, #72	; 0x48
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d4994:	f007 fa45 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d4998:	4c18      	ldr	r4, [pc, #96]	; (d49fc <_Z15resetEverythingv+0x6c>)
  sysStatus.resetCount = current.alerts = 0;                          // Reset everything for the day
   d499a:	4b19      	ldr	r3, [pc, #100]	; (d4a00 <_Z15resetEverythingv+0x70>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d499c:	6020      	str	r0, [r4, #0]
  if (current.alerts ==7 || current.updateAttempts >=3) {             // We had tried to update enough times that we disabled updates for the day - resetting
   d499e:	f894 0020 	ldrb.w	r0, [r4, #32]
  currentCountsWriteNeeded = true;
   d49a2:	4e18      	ldr	r6, [pc, #96]	; (d4a04 <_Z15resetEverythingv+0x74>)
  sysStatus.resetCount = current.alerts = 0;                          // Reset everything for the day
   d49a4:	2500      	movs	r5, #0
   d49a6:	611d      	str	r5, [r3, #16]
  currentCountsWriteNeeded = true;
   d49a8:	2101      	movs	r1, #1
  current.minBatteryLevel = 100;
   d49aa:	2364      	movs	r3, #100	; 0x64
  if (current.alerts ==7 || current.updateAttempts >=3) {             // We had tried to update enough times that we disabled updates for the day - resetting
   d49ac:	2802      	cmp	r0, #2
  sysStatus.resetCount = current.alerts = 0;                          // Reset everything for the day
   d49ae:	6125      	str	r5, [r4, #16]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d49b0:	8325      	strh	r5, [r4, #24]
  current.minBatteryLevel = 100;
   d49b2:	61e3      	str	r3, [r4, #28]
  currentCountsWriteNeeded = true;
   d49b4:	7031      	strb	r1, [r6, #0]
  if (current.alerts ==7 || current.updateAttempts >=3) {             // We had tried to update enough times that we disabled updates for the day - resetting
   d49b6:	d917      	bls.n	d49e8 <_Z15resetEverythingv+0x58>
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value)
    {
        system_set_flag(flag, value, nullptr);
   d49b8:	462a      	mov	r2, r5
   d49ba:	4608      	mov	r0, r1
   d49bc:	f004 fa00 	bl	d8dc0 <system_set_flag>
    current.alerts = 0;   
   d49c0:	6125      	str	r5, [r4, #16]
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d49c2:	f007 fa2e 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d49c6:	4a10      	ldr	r2, [pc, #64]	; (d4a08 <_Z15resetEverythingv+0x78>)
   d49c8:	9000      	str	r0, [sp, #0]
   d49ca:	462b      	mov	r3, r5
   d49cc:	2140      	movs	r1, #64	; 0x40
   d49ce:	a802      	add	r0, sp, #8
   d49d0:	f004 fb48 	bl	d9064 <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   d49d4:	f002 ff60 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
   d49d8:	4b0c      	ldr	r3, [pc, #48]	; (d4a0c <_Z15resetEverythingv+0x7c>)
   d49da:	f88d 5000 	strb.w	r5, [sp]
   d49de:	781b      	ldrb	r3, [r3, #0]
   d49e0:	490b      	ldr	r1, [pc, #44]	; (d4a10 <_Z15resetEverythingv+0x80>)
   d49e2:	aa02      	add	r2, sp, #8
   d49e4:	f7ff fd88 	bl	d44f8 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  systemStatusWriteNeeded=true;
   d49e8:	4a0a      	ldr	r2, [pc, #40]	; (d4a14 <_Z15resetEverythingv+0x84>)
  current.updateAttempts = 0;                                         // Reset the update attempts counter for the day
   d49ea:	2300      	movs	r3, #0
   d49ec:	f884 3020 	strb.w	r3, [r4, #32]
  currentCountsWriteNeeded=true;                                      // Make sure that the values are updated in FRAM
   d49f0:	2301      	movs	r3, #1
   d49f2:	7033      	strb	r3, [r6, #0]
  systemStatusWriteNeeded=true;
   d49f4:	7013      	strb	r3, [r2, #0]
}
   d49f6:	b012      	add	sp, #72	; 0x48
   d49f8:	bd70      	pop	{r4, r5, r6, pc}
   d49fa:	bf00      	nop
   d49fc:	2003e340 	.word	0x2003e340
   d4a00:	2003e3d8 	.word	0x2003e3d8
   d4a04:	2003e364 	.word	0x2003e364
   d4a08:	000df235 	.word	0x000df235
   d4a0c:	2003e2dc 	.word	0x2003e2dc
   d4a10:	000df257 	.word	0x000df257
   d4a14:	2003e40c 	.word	0x2003e40c

000d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4a18:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4a1a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4a1c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4a1e:	b17c      	cbz	r4, d4a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4a20:	6863      	ldr	r3, [r4, #4]
   d4a22:	3b01      	subs	r3, #1
   d4a24:	6063      	str	r3, [r4, #4]
   d4a26:	b95b      	cbnz	r3, d4a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4a28:	6823      	ldr	r3, [r4, #0]
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	689b      	ldr	r3, [r3, #8]
   d4a2e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4a30:	68a3      	ldr	r3, [r4, #8]
   d4a32:	3b01      	subs	r3, #1
   d4a34:	60a3      	str	r3, [r4, #8]
   d4a36:	b91b      	cbnz	r3, d4a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4a38:	6823      	ldr	r3, [r4, #0]
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	68db      	ldr	r3, [r3, #12]
   d4a3e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4a40:	4628      	mov	r0, r5
   d4a42:	bd38      	pop	{r3, r4, r5, pc}

000d4a44 <_Z23recordConnectionDetailsv>:
void  recordConnectionDetails()  {                                     // Whether the connection was successful or not, we will collect and publish metrics
   d4a44:	b510      	push	{r4, lr}
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec+1) sysStatus.lastConnectionDuration = 0;
   d4a46:	4a1a      	ldr	r2, [pc, #104]	; (d4ab0 <_Z23recordConnectionDetailsv+0x6c>)
   d4a48:	4c1a      	ldr	r4, [pc, #104]	; (d4ab4 <_Z23recordConnectionDetailsv+0x70>)
   d4a4a:	6812      	ldr	r2, [r2, #0]
   d4a4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   d4a4e:	3201      	adds	r2, #1
   d4a50:	4293      	cmp	r3, r2
void  recordConnectionDetails()  {                                     // Whether the connection was successful or not, we will collect and publish metrics
   d4a52:	b08c      	sub	sp, #48	; 0x30
  if (sysStatus.lastConnectionDuration > connectMaxTimeSec+1) sysStatus.lastConnectionDuration = 0;
   d4a54:	d925      	bls.n	d4aa2 <_Z23recordConnectionDetailsv+0x5e>
   d4a56:	2300      	movs	r3, #0
   d4a58:	8523      	strh	r3, [r4, #40]	; 0x28
  snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d4a5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   d4a5c:	4a16      	ldr	r2, [pc, #88]	; (d4ab8 <_Z23recordConnectionDetailsv+0x74>)
   d4a5e:	2120      	movs	r1, #32
   d4a60:	a804      	add	r0, sp, #16
   d4a62:	f004 faff 	bl	d9064 <snprintf>
  Log.info(connectionStr);
   d4a66:	4815      	ldr	r0, [pc, #84]	; (d4abc <_Z23recordConnectionDetailsv+0x78>)
   d4a68:	a904      	add	r1, sp, #16
   d4a6a:	f7ff fd17 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
  if (sysStatus.verboseMode && sysStatus.connectedStatus) {            // If we connected, let's publish the connection time
   d4a6e:	7923      	ldrb	r3, [r4, #4]
   d4a70:	b183      	cbz	r3, d4a94 <_Z23recordConnectionDetailsv+0x50>
   d4a72:	78e3      	ldrb	r3, [r4, #3]
   d4a74:	b173      	cbz	r3, d4a94 <_Z23recordConnectionDetailsv+0x50>
        return waitConditionWhile(_condition, []{ return true; });
   d4a76:	f7ff fbb6 	bl	d41e6 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Cellular",connectionStr,PRIVATE);
   d4a7a:	2300      	movs	r3, #0
   d4a7c:	f88d 3000 	strb.w	r3, [sp]
   d4a80:	4b0f      	ldr	r3, [pc, #60]	; (d4ac0 <_Z23recordConnectionDetailsv+0x7c>)
   d4a82:	4910      	ldr	r1, [pc, #64]	; (d4ac4 <_Z23recordConnectionDetailsv+0x80>)
   d4a84:	781b      	ldrb	r3, [r3, #0]
   d4a86:	a802      	add	r0, sp, #8
   d4a88:	aa04      	add	r2, sp, #16
   d4a8a:	f7ff fbe5 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a8e:	a803      	add	r0, sp, #12
   d4a90:	f7ff ffc2 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  systemStatusWriteNeeded = true;
   d4a94:	4a0c      	ldr	r2, [pc, #48]	; (d4ac8 <_Z23recordConnectionDetailsv+0x84>)
   d4a96:	2301      	movs	r3, #1
   d4a98:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d4a9a:	4a0c      	ldr	r2, [pc, #48]	; (d4acc <_Z23recordConnectionDetailsv+0x88>)
   d4a9c:	7013      	strb	r3, [r2, #0]
}
   d4a9e:	b00c      	add	sp, #48	; 0x30
   d4aa0:	bd10      	pop	{r4, pc}
  else if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d4aa2:	4a0b      	ldr	r2, [pc, #44]	; (d4ad0 <_Z23recordConnectionDetailsv+0x8c>)
   d4aa4:	8b11      	ldrh	r1, [r2, #24]
   d4aa6:	4299      	cmp	r1, r3
   d4aa8:	bf38      	it	cc
   d4aaa:	8313      	strhcc	r3, [r2, #24]
   d4aac:	e7d5      	b.n	d4a5a <_Z23recordConnectionDetailsv+0x16>
   d4aae:	bf00      	nop
   d4ab0:	2003dfcc 	.word	0x2003dfcc
   d4ab4:	2003e3d8 	.word	0x2003e3d8
   d4ab8:	000df351 	.word	0x000df351
   d4abc:	2003e538 	.word	0x2003e538
   d4ac0:	2003e2dc 	.word	0x2003e2dc
   d4ac4:	000df366 	.word	0x000df366
   d4ac8:	2003e40c 	.word	0x2003e40c
   d4acc:	2003e364 	.word	0x2003e364
   d4ad0:	2003e340 	.word	0x2003e340

000d4ad4 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4ad4:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4ad6:	780b      	ldrb	r3, [r1, #0]
   d4ad8:	4d1f      	ldr	r5, [pc, #124]	; (d4b58 <_Z14UbidotsHandlerPKcS0_+0x84>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4ada:	b095      	sub	sp, #84	; 0x54
   d4adc:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d4ade:	b9c3      	cbnz	r3, d4b12 <_Z14UbidotsHandlerPKcS0_+0x3e>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4ae0:	491e      	ldr	r1, [pc, #120]	; (d4b5c <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4ae2:	a804      	add	r0, sp, #16
   d4ae4:	f008 fad7 	bl	dd096 <strcpy>
  if (sysStatus.verboseMode && sysStatus.connectedStatus) {
   d4ae8:	792b      	ldrb	r3, [r5, #4]
   d4aea:	b183      	cbz	r3, d4b0e <_Z14UbidotsHandlerPKcS0_+0x3a>
   d4aec:	78eb      	ldrb	r3, [r5, #3]
   d4aee:	b173      	cbz	r3, d4b0e <_Z14UbidotsHandlerPKcS0_+0x3a>
   d4af0:	f7ff fb79 	bl	d41e6 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d4af4:	2300      	movs	r3, #0
   d4af6:	f88d 3000 	strb.w	r3, [sp]
   d4afa:	4b19      	ldr	r3, [pc, #100]	; (d4b60 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4afc:	4919      	ldr	r1, [pc, #100]	; (d4b64 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4afe:	781b      	ldrb	r3, [r3, #0]
   d4b00:	a802      	add	r0, sp, #8
   d4b02:	aa04      	add	r2, sp, #16
   d4b04:	f7ff fba8 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d4b08:	a803      	add	r0, sp, #12
   d4b0a:	f7ff ff85 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4b0e:	b015      	add	sp, #84	; 0x54
   d4b10:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4b12:	4608      	mov	r0, r1
   d4b14:	f008 fa34 	bl	dcf80 <atoi>
   d4b18:	28c8      	cmp	r0, #200	; 0xc8
   d4b1a:	d10d      	bne.n	d4b38 <_Z14UbidotsHandlerPKcS0_+0x64>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4b1c:	4912      	ldr	r1, [pc, #72]	; (d4b68 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4b1e:	a804      	add	r0, sp, #16
   d4b20:	f008 fab9 	bl	dd096 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4b24:	f007 f97d 	bl	dbe22 <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d4b28:	4b10      	ldr	r3, [pc, #64]	; (d4b6c <_Z14UbidotsHandlerPKcS0_+0x98>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4b2a:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d4b2c:	2201      	movs	r2, #1
   d4b2e:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4b30:	4b0f      	ldr	r3, [pc, #60]	; (d4b70 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d4b32:	2200      	movs	r2, #0
   d4b34:	701a      	strb	r2, [r3, #0]
   d4b36:	e7d7      	b.n	d4ae8 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f008 fa21 	bl	dcf80 <atoi>
   d4b3e:	28c9      	cmp	r0, #201	; 0xc9
   d4b40:	d0ec      	beq.n	d4b1c <_Z14UbidotsHandlerPKcS0_+0x48>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4b42:	4620      	mov	r0, r4
   d4b44:	f008 fa1c 	bl	dcf80 <atoi>
   d4b48:	4a0a      	ldr	r2, [pc, #40]	; (d4b74 <_Z14UbidotsHandlerPKcS0_+0xa0>)
   d4b4a:	4603      	mov	r3, r0
   d4b4c:	2140      	movs	r1, #64	; 0x40
   d4b4e:	a804      	add	r0, sp, #16
   d4b50:	f004 fa88 	bl	d9064 <snprintf>
   d4b54:	e7c8      	b.n	d4ae8 <_Z14UbidotsHandlerPKcS0_+0x14>
   d4b56:	bf00      	nop
   d4b58:	2003e3d8 	.word	0x2003e3d8
   d4b5c:	000df36f 	.word	0x000df36f
   d4b60:	2003e2dc 	.word	0x2003e2dc
   d4b64:	000df3a6 	.word	0x000df3a6
   d4b68:	000df377 	.word	0x000df377
   d4b6c:	2003e40c 	.word	0x2003e40c
   d4b70:	2003e36f 	.word	0x2003e36f
   d4b74:	000df389 	.word	0x000df389

000d4b78 <_Z12hardResetNow6String>:
{
   d4b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4b7a:	490c      	ldr	r1, [pc, #48]	; (d4bac <_Z12hardResetNow6String+0x34>)
   d4b7c:	f006 fe38 	bl	db7f0 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4b80:	b188      	cbz	r0, d4ba6 <_Z12hardResetNow6String+0x2e>
    Particle.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4b82:	2300      	movs	r3, #0
   d4b84:	f88d 3000 	strb.w	r3, [sp]
   d4b88:	4b09      	ldr	r3, [pc, #36]	; (d4bb0 <_Z12hardResetNow6String+0x38>)
   d4b8a:	4a0a      	ldr	r2, [pc, #40]	; (d4bb4 <_Z12hardResetNow6String+0x3c>)
   d4b8c:	781b      	ldrb	r3, [r3, #0]
   d4b8e:	490a      	ldr	r1, [pc, #40]	; (d4bb8 <_Z12hardResetNow6String+0x40>)
   d4b90:	a802      	add	r0, sp, #8
   d4b92:	f7ff fb61 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d4b96:	a803      	add	r0, sp, #12
   d4b98:	f7ff ff3e 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    ab1805.deepPowerDown(10);
   d4b9c:	4807      	ldr	r0, [pc, #28]	; (d4bbc <_Z12hardResetNow6String+0x44>)
   d4b9e:	210a      	movs	r1, #10
   d4ba0:	f001 ff02 	bl	d69a8 <_ZN6AB180513deepPowerDownEi>
   d4ba4:	2001      	movs	r0, #1
}
   d4ba6:	b005      	add	sp, #20
   d4ba8:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bac:	000df200 	.word	0x000df200
   d4bb0:	2003e2dc 	.word	0x2003e2dc
   d4bb4:	000df3b3 	.word	0x000df3b3
   d4bb8:	000df7d5 	.word	0x000df7d5
   d4bbc:	2003e2ec 	.word	0x2003e2ec

000d4bc0 <_Z12setSolarMode6String>:
{
   d4bc0:	b530      	push	{r4, r5, lr}
   d4bc2:	491d      	ldr	r1, [pc, #116]	; (d4c38 <_Z12setSolarMode6String+0x78>)
   d4bc4:	b085      	sub	sp, #20
   d4bc6:	4605      	mov	r5, r0
   d4bc8:	f006 fe12 	bl	db7f0 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4bcc:	4604      	mov	r4, r0
   d4bce:	b1d8      	cbz	r0, d4c08 <_Z12setSolarMode6String+0x48>
    sysStatus.solarPowerMode = true;
   d4bd0:	4d1a      	ldr	r5, [pc, #104]	; (d4c3c <_Z12setSolarMode6String+0x7c>)
   d4bd2:	2401      	movs	r4, #1
   d4bd4:	716c      	strb	r4, [r5, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4bd6:	f7ff fddf 	bl	d4798 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4bda:	4b19      	ldr	r3, [pc, #100]	; (d4c40 <_Z12setSolarMode6String+0x80>)
   d4bdc:	701c      	strb	r4, [r3, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4bde:	78eb      	ldrb	r3, [r5, #3]
   d4be0:	b913      	cbnz	r3, d4be8 <_Z12setSolarMode6String+0x28>
    return 1;
   d4be2:	2001      	movs	r0, #1
}
   d4be4:	b005      	add	sp, #20
   d4be6:	bd30      	pop	{r4, r5, pc}
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d4be8:	4b16      	ldr	r3, [pc, #88]	; (d4c44 <_Z12setSolarMode6String+0x84>)
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4bea:	4a17      	ldr	r2, [pc, #92]	; (d4c48 <_Z12setSolarMode6String+0x88>)
   d4bec:	781b      	ldrb	r3, [r3, #0]
   d4bee:	f88d 3000 	strb.w	r3, [sp]
   d4bf2:	4b16      	ldr	r3, [pc, #88]	; (d4c4c <_Z12setSolarMode6String+0x8c>)
   d4bf4:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4bf6:	4916      	ldr	r1, [pc, #88]	; (d4c50 <_Z12setSolarMode6String+0x90>)
   d4bf8:	a802      	add	r0, sp, #8
   d4bfa:	f7ff fb2d 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d4bfe:	a803      	add	r0, sp, #12
   d4c00:	f7ff ff0a 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c04:	4620      	mov	r0, r4
   d4c06:	e7ed      	b.n	d4be4 <_Z12setSolarMode6String+0x24>
   d4c08:	4912      	ldr	r1, [pc, #72]	; (d4c54 <_Z12setSolarMode6String+0x94>)
   d4c0a:	4628      	mov	r0, r5
   d4c0c:	f006 fdf0 	bl	db7f0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4c10:	2800      	cmp	r0, #0
   d4c12:	d0e7      	beq.n	d4be4 <_Z12setSolarMode6String+0x24>
    sysStatus.solarPowerMode = false;
   d4c14:	4d09      	ldr	r5, [pc, #36]	; (d4c3c <_Z12setSolarMode6String+0x7c>)
    systemStatusWriteNeeded=true;
   d4c16:	4b0a      	ldr	r3, [pc, #40]	; (d4c40 <_Z12setSolarMode6String+0x80>)
    sysStatus.solarPowerMode = false;
   d4c18:	716c      	strb	r4, [r5, #5]
    systemStatusWriteNeeded=true;
   d4c1a:	2401      	movs	r4, #1
   d4c1c:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4c1e:	f7ff fdbb 	bl	d4798 <_Z14setPowerConfigv>
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4c22:	78eb      	ldrb	r3, [r5, #3]
   d4c24:	2b00      	cmp	r3, #0
   d4c26:	d0dc      	beq.n	d4be2 <_Z12setSolarMode6String+0x22>
   d4c28:	4b06      	ldr	r3, [pc, #24]	; (d4c44 <_Z12setSolarMode6String+0x84>)
   d4c2a:	4a0b      	ldr	r2, [pc, #44]	; (d4c58 <_Z12setSolarMode6String+0x98>)
   d4c2c:	781b      	ldrb	r3, [r3, #0]
   d4c2e:	f88d 3000 	strb.w	r3, [sp]
   d4c32:	4b06      	ldr	r3, [pc, #24]	; (d4c4c <_Z12setSolarMode6String+0x8c>)
   d4c34:	781b      	ldrb	r3, [r3, #0]
   d4c36:	e7de      	b.n	d4bf6 <_Z12setSolarMode6String+0x36>
   d4c38:	000df200 	.word	0x000df200
   d4c3c:	2003e3d8 	.word	0x2003e3d8
   d4c40:	2003e40c 	.word	0x2003e40c
   d4c44:	2003e2dd 	.word	0x2003e2dd
   d4c48:	000df3cb 	.word	0x000df3cb
   d4c4c:	2003e2dc 	.word	0x2003e2dc
   d4c50:	000df3f8 	.word	0x000df3f8
   d4c54:	000df32d 	.word	0x000df32d
   d4c58:	000df3e2 	.word	0x000df3e2

000d4c5c <_Z14setVerboseMode6String>:
{
   d4c5c:	b530      	push	{r4, r5, lr}
   d4c5e:	491b      	ldr	r1, [pc, #108]	; (d4ccc <_Z14setVerboseMode6String+0x70>)
   d4c60:	b085      	sub	sp, #20
   d4c62:	4605      	mov	r5, r0
   d4c64:	f006 fdc4 	bl	db7f0 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4c68:	4604      	mov	r4, r0
   d4c6a:	b1c8      	cbz	r0, d4ca0 <_Z14setVerboseMode6String+0x44>
    sysStatus.verboseMode = true;
   d4c6c:	4b18      	ldr	r3, [pc, #96]	; (d4cd0 <_Z14setVerboseMode6String+0x74>)
    systemStatusWriteNeeded = true;
   d4c6e:	4a19      	ldr	r2, [pc, #100]	; (d4cd4 <_Z14setVerboseMode6String+0x78>)
    sysStatus.verboseMode = true;
   d4c70:	2401      	movs	r4, #1
   d4c72:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d4c74:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d4c76:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d4c78:	b913      	cbnz	r3, d4c80 <_Z14setVerboseMode6String+0x24>
    return 1;
   d4c7a:	2001      	movs	r0, #1
}
   d4c7c:	b005      	add	sp, #20
   d4c7e:	bd30      	pop	{r4, r5, pc}
   d4c80:	4b15      	ldr	r3, [pc, #84]	; (d4cd8 <_Z14setVerboseMode6String+0x7c>)
    if (sysStatus.connectedStatus) Particle.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d4c82:	4a16      	ldr	r2, [pc, #88]	; (d4cdc <_Z14setVerboseMode6String+0x80>)
   d4c84:	781b      	ldrb	r3, [r3, #0]
   d4c86:	f88d 3000 	strb.w	r3, [sp]
   d4c8a:	4b15      	ldr	r3, [pc, #84]	; (d4ce0 <_Z14setVerboseMode6String+0x84>)
   d4c8c:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d4c8e:	4915      	ldr	r1, [pc, #84]	; (d4ce4 <_Z14setVerboseMode6String+0x88>)
   d4c90:	a802      	add	r0, sp, #8
   d4c92:	f7ff fae1 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d4c96:	a803      	add	r0, sp, #12
   d4c98:	f7ff febe 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c9c:	4620      	mov	r0, r4
   d4c9e:	e7ed      	b.n	d4c7c <_Z14setVerboseMode6String+0x20>
   d4ca0:	4911      	ldr	r1, [pc, #68]	; (d4ce8 <_Z14setVerboseMode6String+0x8c>)
   d4ca2:	4628      	mov	r0, r5
   d4ca4:	f006 fda4 	bl	db7f0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4ca8:	2800      	cmp	r0, #0
   d4caa:	d0e7      	beq.n	d4c7c <_Z14setVerboseMode6String+0x20>
    sysStatus.verboseMode = false;
   d4cac:	4b08      	ldr	r3, [pc, #32]	; (d4cd0 <_Z14setVerboseMode6String+0x74>)
    systemStatusWriteNeeded = true;
   d4cae:	4a09      	ldr	r2, [pc, #36]	; (d4cd4 <_Z14setVerboseMode6String+0x78>)
    sysStatus.verboseMode = false;
   d4cb0:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d4cb2:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d4cb4:	2401      	movs	r4, #1
   d4cb6:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d4cb8:	2b00      	cmp	r3, #0
   d4cba:	d0de      	beq.n	d4c7a <_Z14setVerboseMode6String+0x1e>
   d4cbc:	4b06      	ldr	r3, [pc, #24]	; (d4cd8 <_Z14setVerboseMode6String+0x7c>)
   d4cbe:	4a0b      	ldr	r2, [pc, #44]	; (d4cec <_Z14setVerboseMode6String+0x90>)
   d4cc0:	781b      	ldrb	r3, [r3, #0]
   d4cc2:	f88d 3000 	strb.w	r3, [sp]
   d4cc6:	4b06      	ldr	r3, [pc, #24]	; (d4ce0 <_Z14setVerboseMode6String+0x84>)
   d4cc8:	781b      	ldrb	r3, [r3, #0]
   d4cca:	e7e0      	b.n	d4c8e <_Z14setVerboseMode6String+0x32>
   d4ccc:	000df200 	.word	0x000df200
   d4cd0:	2003e3d8 	.word	0x2003e3d8
   d4cd4:	2003e40c 	.word	0x2003e40c
   d4cd8:	2003e2dd 	.word	0x2003e2dd
   d4cdc:	000df3fd 	.word	0x000df3fd
   d4ce0:	2003e2dc 	.word	0x2003e2dc
   d4ce4:	000df3f8 	.word	0x000df3f8
   d4ce8:	000df32d 	.word	0x000df32d
   d4cec:	000df40e 	.word	0x000df40e

000d4cf0 <_Z11setOpenTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setOpenTime(String command)
   d4cf0:	b500      	push	{lr}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  makeUpStringMessages();                                                    // Create the strings for the console
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (sysStatus.connectedStatus) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4cf2:	4b0d      	ldr	r3, [pc, #52]	; (d4d28 <_Z11setOpenTime6String.part.0+0x38>)
   d4cf4:	4a0d      	ldr	r2, [pc, #52]	; (d4d2c <_Z11setOpenTime6String.part.0+0x3c>)
   d4cf6:	7f1b      	ldrb	r3, [r3, #28]
int setOpenTime(String command)
   d4cf8:	b0c5      	sub	sp, #276	; 0x114
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4cfe:	a804      	add	r0, sp, #16
   d4d00:	f004 f9b0 	bl	d9064 <snprintf>
   d4d04:	4b0a      	ldr	r3, [pc, #40]	; (d4d30 <_Z11setOpenTime6String.part.0+0x40>)
    Particle.publish("Time",data, PRIVATE, WITH_ACK);
   d4d06:	490b      	ldr	r1, [pc, #44]	; (d4d34 <_Z11setOpenTime6String.part.0+0x44>)
   d4d08:	781b      	ldrb	r3, [r3, #0]
   d4d0a:	f88d 3000 	strb.w	r3, [sp]
   d4d0e:	4b0a      	ldr	r3, [pc, #40]	; (d4d38 <_Z11setOpenTime6String.part.0+0x48>)
   d4d10:	aa04      	add	r2, sp, #16
   d4d12:	781b      	ldrb	r3, [r3, #0]
   d4d14:	a802      	add	r0, sp, #8
   d4d16:	f7ff fa9f 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d4d1a:	a803      	add	r0, sp, #12
   d4d1c:	f7ff fe7c 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  return 1;
}
   d4d20:	2001      	movs	r0, #1
   d4d22:	b045      	add	sp, #276	; 0x114
   d4d24:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d28:	2003e3d8 	.word	0x2003e3d8
   d4d2c:	000df423 	.word	0x000df423
   d4d30:	2003e2dd 	.word	0x2003e2dd
   d4d34:	000df525 	.word	0x000df525
   d4d38:	2003e2dc 	.word	0x2003e2dc

000d4d3c <_Z11setOpenTime6String>:
{
   d4d3c:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4d3e:	220a      	movs	r2, #10
   d4d40:	6800      	ldr	r0, [r0, #0]
   d4d42:	a901      	add	r1, sp, #4
   d4d44:	f009 f90a 	bl	ddf5c <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4d48:	2817      	cmp	r0, #23
   d4d4a:	d80c      	bhi.n	d4d66 <_Z11setOpenTime6String+0x2a>
  sysStatus.openTime = tempTime;
   d4d4c:	4c07      	ldr	r4, [pc, #28]	; (d4d6c <_Z11setOpenTime6String+0x30>)
   d4d4e:	7720      	strb	r0, [r4, #28]
  makeUpStringMessages();                                                    // Create the strings for the console
   d4d50:	f7ff fdd0 	bl	d48f4 <_Z20makeUpStringMessagesv>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4d54:	4b06      	ldr	r3, [pc, #24]	; (d4d70 <_Z11setOpenTime6String+0x34>)
   d4d56:	2001      	movs	r0, #1
   d4d58:	7018      	strb	r0, [r3, #0]
  if (sysStatus.connectedStatus) {
   d4d5a:	78e3      	ldrb	r3, [r4, #3]
   d4d5c:	b10b      	cbz	r3, d4d62 <_Z11setOpenTime6String+0x26>
   d4d5e:	f7ff ffc7 	bl	d4cf0 <_Z11setOpenTime6String.part.0>
}
   d4d62:	b002      	add	sp, #8
   d4d64:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4d66:	2000      	movs	r0, #0
   d4d68:	e7fb      	b.n	d4d62 <_Z11setOpenTime6String+0x26>
   d4d6a:	bf00      	nop
   d4d6c:	2003e3d8 	.word	0x2003e3d8
   d4d70:	2003e40c 	.word	0x2003e40c

000d4d74 <_Z12setCloseTime6String>:
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setCloseTime(String command)
{
   d4d74:	b530      	push	{r4, r5, lr}
   d4d76:	b0c7      	sub	sp, #284	; 0x11c
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4d78:	6800      	ldr	r0, [r0, #0]
   d4d7a:	220a      	movs	r2, #10
   d4d7c:	a903      	add	r1, sp, #12
   d4d7e:	f009 f8ed 	bl	ddf5c <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4d82:	2818      	cmp	r0, #24
   d4d84:	d81f      	bhi.n	d4dc6 <_Z12setCloseTime6String+0x52>
  sysStatus.closeTime = tempTime;
   d4d86:	4d11      	ldr	r5, [pc, #68]	; (d4dcc <_Z12setCloseTime6String+0x58>)
   d4d88:	7768      	strb	r0, [r5, #29]
  makeUpStringMessages();                                                    // Create the strings for the console
   d4d8a:	f7ff fdb3 	bl	d48f4 <_Z20makeUpStringMessagesv>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4d8e:	4b10      	ldr	r3, [pc, #64]	; (d4dd0 <_Z12setCloseTime6String+0x5c>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4d90:	4a10      	ldr	r2, [pc, #64]	; (d4dd4 <_Z12setCloseTime6String+0x60>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4d92:	2401      	movs	r4, #1
   d4d94:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4d96:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d9a:	7f6b      	ldrb	r3, [r5, #29]
   d4d9c:	a806      	add	r0, sp, #24
   d4d9e:	f004 f961 	bl	d9064 <snprintf>
  if (sysStatus.connectedStatus) Particle.publish("Time",data, PRIVATE, WITH_ACK);
   d4da2:	78eb      	ldrb	r3, [r5, #3]
   d4da4:	b16b      	cbz	r3, d4dc2 <_Z12setCloseTime6String+0x4e>
   d4da6:	4b0c      	ldr	r3, [pc, #48]	; (d4dd8 <_Z12setCloseTime6String+0x64>)
   d4da8:	490c      	ldr	r1, [pc, #48]	; (d4ddc <_Z12setCloseTime6String+0x68>)
   d4daa:	781b      	ldrb	r3, [r3, #0]
   d4dac:	f88d 3000 	strb.w	r3, [sp]
   d4db0:	4b0b      	ldr	r3, [pc, #44]	; (d4de0 <_Z12setCloseTime6String+0x6c>)
   d4db2:	a804      	add	r0, sp, #16
   d4db4:	781b      	ldrb	r3, [r3, #0]
   d4db6:	aa06      	add	r2, sp, #24
   d4db8:	f7ff fa4e 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d4dbc:	a805      	add	r0, sp, #20
   d4dbe:	f7ff fe2b 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4dc2:	4620      	mov	r0, r4
   d4dc4:	e000      	b.n	d4dc8 <_Z12setCloseTime6String+0x54>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4dc6:	2000      	movs	r0, #0
}
   d4dc8:	b047      	add	sp, #284	; 0x11c
   d4dca:	bd30      	pop	{r4, r5, pc}
   d4dcc:	2003e3d8 	.word	0x2003e3d8
   d4dd0:	2003e40c 	.word	0x2003e40c
   d4dd4:	000df437 	.word	0x000df437
   d4dd8:	2003e2dd 	.word	0x2003e2dd
   d4ddc:	000df525 	.word	0x000df525
   d4de0:	2003e2dc 	.word	0x2003e2dc

000d4de4 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4de4:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4de6:	4921      	ldr	r1, [pc, #132]	; (d4e6c <_Z15setLowPowerMode6String+0x88>)
   d4de8:	b085      	sub	sp, #20
   d4dea:	4605      	mov	r5, r0
   d4dec:	f006 fd00 	bl	db7f0 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4df0:	b1b8      	cbz	r0, d4e22 <_Z15setLowPowerMode6String+0x3e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4df2:	491e      	ldr	r1, [pc, #120]	; (d4e6c <_Z15setLowPowerMode6String+0x88>)
   d4df4:	4628      	mov	r0, r5
   d4df6:	f006 fcfb 	bl	db7f0 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4dfa:	4604      	mov	r4, r0
   d4dfc:	b9c8      	cbnz	r0, d4e32 <_Z15setLowPowerMode6String+0x4e>
   d4dfe:	491c      	ldr	r1, [pc, #112]	; (d4e70 <_Z15setLowPowerMode6String+0x8c>)
   d4e00:	4628      	mov	r0, r5
   d4e02:	f006 fcf5 	bl	db7f0 <_ZNK6String6equalsEPKc>
    if (sysStatus.connectedStatus) {
      meterParticlePublish();
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
    }
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4e06:	b140      	cbz	r0, d4e1a <_Z15setLowPowerMode6String+0x36>
  {
    sysStatus.lowPowerMode = false;
   d4e08:	4d1a      	ldr	r5, [pc, #104]	; (d4e74 <_Z15setLowPowerMode6String+0x90>)
   d4e0a:	71ac      	strb	r4, [r5, #6]
    makeUpStringMessages();                                           // Updated system settings - refresh the string messages
   d4e0c:	f7ff fd72 	bl	d48f4 <_Z20makeUpStringMessagesv>
    if (!sysStatus.connectedStatus) {                                 // In case we are not connected, we will do so now.
   d4e10:	78eb      	ldrb	r3, [r5, #3]
   d4e12:	bb33      	cbnz	r3, d4e62 <_Z15setLowPowerMode6String+0x7e>
      state = CONNECTING_STATE;                                       // Will connect - if connection fails, will need to reset device
   d4e14:	4b18      	ldr	r3, [pc, #96]	; (d4e78 <_Z15setLowPowerMode6String+0x94>)
   d4e16:	2205      	movs	r2, #5
   d4e18:	701a      	strb	r2, [r3, #0]
    else {
      meterParticlePublish();
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
    }
  }
  systemStatusWriteNeeded = true;
   d4e1a:	4b18      	ldr	r3, [pc, #96]	; (d4e7c <_Z15setLowPowerMode6String+0x98>)
   d4e1c:	2001      	movs	r0, #1
   d4e1e:	7018      	strb	r0, [r3, #0]
  return 1;
   d4e20:	e005      	b.n	d4e2e <_Z15setLowPowerMode6String+0x4a>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e22:	4913      	ldr	r1, [pc, #76]	; (d4e70 <_Z15setLowPowerMode6String+0x8c>)
   d4e24:	4628      	mov	r0, r5
   d4e26:	f006 fce3 	bl	db7f0 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4e2a:	2800      	cmp	r0, #0
   d4e2c:	d1e1      	bne.n	d4df2 <_Z15setLowPowerMode6String+0xe>
}
   d4e2e:	b005      	add	sp, #20
   d4e30:	bd30      	pop	{r4, r5, pc}
    sysStatus.lowPowerMode = true;
   d4e32:	4c10      	ldr	r4, [pc, #64]	; (d4e74 <_Z15setLowPowerMode6String+0x90>)
   d4e34:	2301      	movs	r3, #1
   d4e36:	71a3      	strb	r3, [r4, #6]
    makeUpStringMessages();                                           // Updated system settings - refresh the string messages
   d4e38:	f7ff fd5c 	bl	d48f4 <_Z20makeUpStringMessagesv>
    if (sysStatus.connectedStatus) {
   d4e3c:	78e3      	ldrb	r3, [r4, #3]
   d4e3e:	2b00      	cmp	r3, #0
   d4e40:	d0eb      	beq.n	d4e1a <_Z15setLowPowerMode6String+0x36>
      meterParticlePublish();
   d4e42:	f001 f9c5 	bl	d61d0 <_Z20meterParticlePublishv>
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
   d4e46:	2300      	movs	r3, #0
   d4e48:	f88d 3000 	strb.w	r3, [sp]
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
   d4e4c:	4b0c      	ldr	r3, [pc, #48]	; (d4e80 <_Z15setLowPowerMode6String+0x9c>)
   d4e4e:	4a0d      	ldr	r2, [pc, #52]	; (d4e84 <_Z15setLowPowerMode6String+0xa0>)
   d4e50:	781b      	ldrb	r3, [r3, #0]
   d4e52:	490d      	ldr	r1, [pc, #52]	; (d4e88 <_Z15setLowPowerMode6String+0xa4>)
   d4e54:	a802      	add	r0, sp, #8
   d4e56:	f7ff f9ff 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d4e5a:	a803      	add	r0, sp, #12
   d4e5c:	f7ff fddc 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e60:	e7db      	b.n	d4e1a <_Z15setLowPowerMode6String+0x36>
      meterParticlePublish();
   d4e62:	f001 f9b5 	bl	d61d0 <_Z20meterParticlePublishv>
      Particle.publish("Mode",lowPowerModeStr, PRIVATE);
   d4e66:	f88d 4000 	strb.w	r4, [sp]
   d4e6a:	e7ef      	b.n	d4e4c <_Z15setLowPowerMode6String+0x68>
   d4e6c:	000df200 	.word	0x000df200
   d4e70:	000df32d 	.word	0x000df32d
   d4e74:	2003e3d8 	.word	0x2003e3d8
   d4e78:	2003e3cc 	.word	0x2003e3cc
   d4e7c:	2003e40c 	.word	0x2003e40c
   d4e80:	2003e2dc 	.word	0x2003e2dc
   d4e84:	2003e3b4 	.word	0x2003e3b4
   d4e88:	000df3f8 	.word	0x000df3f8

000d4e8c <_Z16takeMeasurementsv>:
{
   d4e8c:	b570      	push	{r4, r5, r6, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4e8e:	4b41      	ldr	r3, [pc, #260]	; (d4f94 <_Z16takeMeasurementsv+0x108>)
   d4e90:	2200      	movs	r2, #0
   d4e92:	b08c      	sub	sp, #48	; 0x30
   d4e94:	6858      	ldr	r0, [r3, #4]
   d4e96:	4611      	mov	r1, r2
   d4e98:	f004 f874 	bl	d8f84 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4e9c:	b108      	cbz	r0, d4ea2 <_Z16takeMeasurementsv+0x16>
   d4e9e:	f7ff fbe9 	bl	d4674 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d4ea2:	f7ff fc25 	bl	d46f0 <_Z14getTemperaturev>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d4ea6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4ea8:	a903      	add	r1, sp, #12
   d4eaa:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d4eac:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   d4eae:	f003 ff55 	bl	d8d5c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4eb2:	b9b8      	cbnz	r0, d4ee4 <_Z16takeMeasurementsv+0x58>
        return ret;
    }
    return get(src, val);
   d4eb4:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   d4eb6:	b10c      	cbz	r4, d4ebc <_Z16takeMeasurementsv+0x30>
   d4eb8:	6923      	ldr	r3, [r4, #16]
   d4eba:	b923      	cbnz	r3, d4ec6 <_Z16takeMeasurementsv+0x3a>
   d4ebc:	4a36      	ldr	r2, [pc, #216]	; (d4f98 <_Z16takeMeasurementsv+0x10c>)
   d4ebe:	2100      	movs	r1, #0
   d4ec0:	200a      	movs	r0, #10
   d4ec2:	f003 ff23 	bl	d8d0c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4ec6:	2300      	movs	r3, #0
   d4ec8:	f8ad 3012 	strh.w	r3, [sp, #18]
   d4ecc:	230c      	movs	r3, #12
   d4ece:	f8ad 3010 	strh.w	r3, [sp, #16]
   d4ed2:	ab02      	add	r3, sp, #8
   d4ed4:	9305      	str	r3, [sp, #20]
   d4ed6:	2304      	movs	r3, #4
   d4ed8:	9306      	str	r3, [sp, #24]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4eda:	6923      	ldr	r3, [r4, #16]
   d4edc:	aa04      	add	r2, sp, #16
   d4ede:	2101      	movs	r1, #1
   d4ee0:	4620      	mov	r0, r4
   d4ee2:	4798      	blx	r3
  sysStatus.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d4ee4:	4c2d      	ldr	r4, [pc, #180]	; (d4f9c <_Z16takeMeasurementsv+0x110>)
        if (r < 0) {
   d4ee6:	2800      	cmp	r0, #0
        return val;
   d4ee8:	bfa8      	it	ge
   d4eea:	9802      	ldrge	r0, [sp, #8]
   d4eec:	7320      	strb	r0, [r4, #12]
  isItSafeToCharge();                                                  // See if it is safe to charge
   d4eee:	f7ff fba1 	bl	d4634 <_Z16isItSafeToChargev>
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d4ef2:	79a3      	ldrb	r3, [r4, #6]
   d4ef4:	b153      	cbz	r3, d4f0c <_Z16takeMeasurementsv+0x80>
    delay(500);
   d4ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4efa:	f004 f90f 	bl	d911c <delay>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d4efe:	4828      	ldr	r0, [pc, #160]	; (d4fa0 <_Z16takeMeasurementsv+0x114>)
   d4f00:	f004 fe59 	bl	d9bb6 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d4f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4f08:	f004 f908 	bl	d911c <delay>
  sysStatus.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d4f0c:	4824      	ldr	r0, [pc, #144]	; (d4fa0 <_Z16takeMeasurementsv+0x114>)
   d4f0e:	f004 fded 	bl	d9aec <_ZN9FuelGauge6getSoCEv>
   d4f12:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d4f16:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d4f1a:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d4f1c:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d4f20:	dc09      	bgt.n	d4f36 <_Z16takeMeasurementsv+0xaa>
   d4f22:	7b23      	ldrb	r3, [r4, #12]
   d4f24:	2b01      	cmp	r3, #1
   d4f26:	d106      	bne.n	d4f36 <_Z16takeMeasurementsv+0xaa>
    System.setPowerConfiguration(SystemPowerConfiguration());          // Reset the PMIC
   d4f28:	a804      	add	r0, sp, #16
   d4f2a:	f7ff fa0b 	bl	d4344 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d4f2e:	2100      	movs	r1, #0
   d4f30:	a804      	add	r0, sp, #16
   d4f32:	f003 ff81 	bl	d8e38 <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) {
   d4f36:	4d1b      	ldr	r5, [pc, #108]	; (d4fa4 <_Z16takeMeasurementsv+0x118>)
   d4f38:	68a3      	ldr	r3, [r4, #8]
   d4f3a:	69ea      	ldr	r2, [r5, #28]
   d4f3c:	4e1a      	ldr	r6, [pc, #104]	; (d4fa8 <_Z16takeMeasurementsv+0x11c>)
   d4f3e:	4293      	cmp	r3, r2
    currentCountsWriteNeeded = true;
   d4f40:	bfbe      	ittt	lt
   d4f42:	2201      	movlt	r2, #1
    current.minBatteryLevel = sysStatus.stateOfCharge;                 // Keep track of lowest value for the day
   d4f44:	61eb      	strlt	r3, [r5, #28]
    currentCountsWriteNeeded = true;
   d4f46:	7032      	strblt	r2, [r6, #0]
  if (sysStatus.stateOfCharge < 30) {
   d4f48:	2b1d      	cmp	r3, #29
   d4f4a:	dc1f      	bgt.n	d4f8c <_Z16takeMeasurementsv+0x100>
    sysStatus.lowBatteryMode = true;                                   // Check to see if we are in low battery territory
   d4f4c:	2301      	movs	r3, #1
   d4f4e:	71e3      	strb	r3, [r4, #7]
    if (!sysStatus.lowPowerMode) setLowPowerMode("1");                 // Should be there already but just in case...              
   d4f50:	79a3      	ldrb	r3, [r4, #6]
   d4f52:	b94b      	cbnz	r3, d4f68 <_Z16takeMeasurementsv+0xdc>
   d4f54:	4915      	ldr	r1, [pc, #84]	; (d4fac <_Z16takeMeasurementsv+0x120>)
   d4f56:	a804      	add	r0, sp, #16
   d4f58:	f006 fb91 	bl	db67e <_ZN6StringC1EPKc>
   d4f5c:	a804      	add	r0, sp, #16
   d4f5e:	f7ff ff41 	bl	d4de4 <_Z15setLowPowerMode6String>
   d4f62:	a804      	add	r0, sp, #16
   d4f64:	f006 fb40 	bl	db5e8 <_ZN6StringD1Ev>
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4f68:	2013      	movs	r0, #19
   d4f6a:	f007 f9e6 	bl	dc33a <analogRead>
   d4f6e:	2364      	movs	r3, #100	; 0x64
   d4f70:	9300      	str	r3, [sp, #0]
   d4f72:	2300      	movs	r3, #0
   d4f74:	4619      	mov	r1, r3
   d4f76:	f640 628a 	movw	r2, #3722	; 0xe8a
   d4f7a:	f004 f8c3 	bl	d9104 <_Z3mapiiiii>
  systemStatusWriteNeeded = true;
   d4f7e:	4a0c      	ldr	r2, [pc, #48]	; (d4fb0 <_Z16takeMeasurementsv+0x124>)
  current.soilMoisture = map(analogRead(soilPin),0,3722,0,100);      // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d4f80:	6068      	str	r0, [r5, #4]
  systemStatusWriteNeeded = true;
   d4f82:	2301      	movs	r3, #1
   d4f84:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d4f86:	7033      	strb	r3, [r6, #0]
}
   d4f88:	b00c      	add	sp, #48	; 0x30
   d4f8a:	bd70      	pop	{r4, r5, r6, pc}
  else sysStatus.lowBatteryMode = false;                               // We have sufficient to continue operations                          
   d4f8c:	2300      	movs	r3, #0
   d4f8e:	71e3      	strb	r3, [r4, #7]
   d4f90:	e7ea      	b.n	d4f68 <_Z16takeMeasurementsv+0xdc>
   d4f92:	bf00      	nop
   d4f94:	2003e464 	.word	0x2003e464
   d4f98:	000d892d 	.word	0x000d892d
   d4f9c:	2003e3d8 	.word	0x2003e3d8
   d4fa0:	2003e384 	.word	0x2003e384
   d4fa4:	2003e340 	.word	0x2003e340
   d4fa8:	2003e364 	.word	0x2003e364
   d4fac:	000df200 	.word	0x000df200
   d4fb0:	2003e40c 	.word	0x2003e40c

000d4fb4 <_Z17setWaterThreshold6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setWaterThreshold(String command)                                  // This is the amount of time in seconds we will wait before starting a new session
{
   d4fb4:	b530      	push	{r4, r5, lr}
   d4fb6:	b087      	sub	sp, #28
  char * pEND;
  float tempThreshold = strtof(command,&pEND);                         // Looks for the first float and interprets it
   d4fb8:	6800      	ldr	r0, [r0, #0]
   d4fba:	a903      	add	r1, sp, #12
   d4fbc:	f008 fefa 	bl	dddb4 <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4fc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4fc8:	d42a      	bmi.n	d5020 <_Z17setWaterThreshold6String+0x6c>
   d4fca:	eddf 7a16 	vldr	s15, [pc, #88]	; d5024 <_Z17setWaterThreshold6String+0x70>
   d4fce:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4fd6:	bfcc      	ite	gt
   d4fd8:	2501      	movgt	r5, #1
   d4fda:	2500      	movle	r5, #0
   d4fdc:	dc20      	bgt.n	d5020 <_Z17setWaterThreshold6String+0x6c>
  sysStatus.wateringThresholdPct = tempThreshold;                      // debounce is how long we must space events to prevent overcounting
   d4fde:	4c12      	ldr	r4, [pc, #72]	; (d5028 <_Z17setWaterThreshold6String+0x74>)
   d4fe0:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
  makeUpStringMessages();
   d4fe4:	f7ff fc86 	bl	d48f4 <_Z20makeUpStringMessagesv>
  if (sysStatus.connectedStatus) {                                     // Publish result if feeling verbose
   d4fe8:	78e3      	ldrb	r3, [r4, #3]
   d4fea:	b1a3      	cbz	r3, d5016 <_Z17setWaterThreshold6String+0x62>
    if (sysStatus.wateringThresholdPct == 0) Particle.publish("System","Watering function disabled",PRIVATE);
   d4fec:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
   d4ff0:	4b0e      	ldr	r3, [pc, #56]	; (d502c <_Z17setWaterThreshold6String+0x78>)
   d4ff2:	eef5 7a40 	vcmp.f32	s15, #0.0
   d4ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ffa:	781b      	ldrb	r3, [r3, #0]
   d4ffc:	bf07      	ittee	eq
   d4ffe:	4a0c      	ldreq	r2, [pc, #48]	; (d5030 <_Z17setWaterThreshold6String+0x7c>)
   d5000:	490c      	ldreq	r1, [pc, #48]	; (d5034 <_Z17setWaterThreshold6String+0x80>)
    else Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d5002:	4a0d      	ldrne	r2, [pc, #52]	; (d5038 <_Z17setWaterThreshold6String+0x84>)
   d5004:	490d      	ldrne	r1, [pc, #52]	; (d503c <_Z17setWaterThreshold6String+0x88>)
    if (sysStatus.wateringThresholdPct == 0) Particle.publish("System","Watering function disabled",PRIVATE);
   d5006:	f88d 5000 	strb.w	r5, [sp]
    else Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d500a:	a804      	add	r0, sp, #16
   d500c:	f7ff f924 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5010:	a805      	add	r0, sp, #20
   d5012:	f7ff fd01 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  systemStatusWriteNeeded = true;
   d5016:	4b0a      	ldr	r3, [pc, #40]	; (d5040 <_Z17setWaterThreshold6String+0x8c>)
   d5018:	2001      	movs	r0, #1
   d501a:	7018      	strb	r0, [r3, #0]
  return 1;                                                            // Returns 1 to let the user know if was reset
}
   d501c:	b007      	add	sp, #28
   d501e:	bd30      	pop	{r4, r5, pc}
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d5020:	2000      	movs	r0, #0
   d5022:	e7fb      	b.n	d501c <_Z17setWaterThreshold6String+0x68>
   d5024:	42c80000 	.word	0x42c80000
   d5028:	2003e3d8 	.word	0x2003e3d8
   d502c:	2003e2dc 	.word	0x2003e2dc
   d5030:	000df44e 	.word	0x000df44e
   d5034:	000df469 	.word	0x000df469
   d5038:	2003e41e 	.word	0x2003e41e
   d503c:	000df5d9 	.word	0x000df5d9
   d5040:	2003e40c 	.word	0x2003e40c

000d5044 <_Z16setWaterDuration6String>:
 * @param Pass the wating duration in seconds.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setWaterDuration(String command)                                   // This is the amount of time in seconds we will wait before starting a new session
{
   d5044:	b530      	push	{r4, r5, lr}
   d5046:	b087      	sub	sp, #28
  char * pEND;
  float tempValue = strtol(command,&pEND,10);                          // Looks for the first float and interprets it
   d5048:	6800      	ldr	r0, [r0, #0]
   d504a:	220a      	movs	r2, #10
   d504c:	a903      	add	r1, sp, #12
   d504e:	f008 ff85 	bl	ddf5c <strtol>
   d5052:	ee07 0a90 	vmov	s15, r0
   d5056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if ((tempValue < 0) | (tempValue > 1000)) return 0;                  // Make sure it falls in a valid range or send a "fail" result
   d505a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5062:	d423      	bmi.n	d50ac <_Z16setWaterDuration6String+0x68>
   d5064:	ed9f 7a12 	vldr	s14, [pc, #72]	; d50b0 <_Z16setWaterDuration6String+0x6c>
   d5068:	eef4 7ac7 	vcmpe.f32	s15, s14
   d506c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5070:	bfcc      	ite	gt
   d5072:	2501      	movgt	r5, #1
   d5074:	2500      	movle	r5, #0
   d5076:	dc19      	bgt.n	d50ac <_Z16setWaterDuration6String+0x68>
  sysStatus.wateringDuration = tempValue;                              // debounce is how long we must space events to prevent overcounting
   d5078:	4c0e      	ldr	r4, [pc, #56]	; (d50b4 <_Z16setWaterDuration6String+0x70>)
   d507a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d507e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
  makeUpStringMessages();
   d5082:	f7ff fc37 	bl	d48f4 <_Z20makeUpStringMessagesv>
  if (sysStatus.connectedStatus) {                                     // Publish result if feeling verbose
   d5086:	78e3      	ldrb	r3, [r4, #3]
   d5088:	b15b      	cbz	r3, d50a2 <_Z16setWaterDuration6String+0x5e>
    Particle.publish("Duration",wateringDurationStr, PRIVATE);
   d508a:	4b0b      	ldr	r3, [pc, #44]	; (d50b8 <_Z16setWaterDuration6String+0x74>)
   d508c:	f88d 5000 	strb.w	r5, [sp]
   d5090:	a804      	add	r0, sp, #16
   d5092:	781b      	ldrb	r3, [r3, #0]
   d5094:	4a09      	ldr	r2, [pc, #36]	; (d50bc <_Z16setWaterDuration6String+0x78>)
   d5096:	490a      	ldr	r1, [pc, #40]	; (d50c0 <_Z16setWaterDuration6String+0x7c>)
   d5098:	f7ff f8de 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d509c:	a805      	add	r0, sp, #20
   d509e:	f7ff fcbb 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  systemStatusWriteNeeded = true;
   d50a2:	4b08      	ldr	r3, [pc, #32]	; (d50c4 <_Z16setWaterDuration6String+0x80>)
   d50a4:	2001      	movs	r0, #1
   d50a6:	7018      	strb	r0, [r3, #0]
  return 1;                                                            // Returns 1 to let the user know if was reset
}
   d50a8:	b007      	add	sp, #28
   d50aa:	bd30      	pop	{r4, r5, pc}
  if ((tempValue < 0) | (tempValue > 1000)) return 0;                  // Make sure it falls in a valid range or send a "fail" result
   d50ac:	2000      	movs	r0, #0
   d50ae:	e7fb      	b.n	d50a8 <_Z16setWaterDuration6String+0x64>
   d50b0:	447a0000 	.word	0x447a0000
   d50b4:	2003e3d8 	.word	0x2003e3d8
   d50b8:	2003e2dc 	.word	0x2003e2dc
   d50bc:	2003e40e 	.word	0x2003e40e
   d50c0:	000df55f 	.word	0x000df55f
   d50c4:	2003e40c 	.word	0x2003e40c

000d50c8 <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition over serial and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d50c8:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d50ca:	4c16      	ldr	r4, [pc, #88]	; (d5124 <_Z22publishStateTransitionv+0x5c>)
   d50cc:	4d16      	ldr	r5, [pc, #88]	; (d5128 <_Z22publishStateTransitionv+0x60>)
   d50ce:	7822      	ldrb	r2, [r4, #0]
   d50d0:	4916      	ldr	r1, [pc, #88]	; (d512c <_Z22publishStateTransitionv+0x64>)
   d50d2:	eb02 1302 	add.w	r3, r2, r2, lsl #4
   d50d6:	782a      	ldrb	r2, [r5, #0]
{
   d50d8:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d50da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
   d50de:	440a      	add	r2, r1
   d50e0:	440b      	add	r3, r1
   d50e2:	9200      	str	r2, [sp, #0]
   d50e4:	2128      	movs	r1, #40	; 0x28
   d50e6:	4a12      	ldr	r2, [pc, #72]	; (d5130 <_Z22publishStateTransitionv+0x68>)
   d50e8:	a804      	add	r0, sp, #16
   d50ea:	f003 ffbb 	bl	d9064 <snprintf>
  oldState = state;
   d50ee:	782b      	ldrb	r3, [r5, #0]
   d50f0:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) {
   d50f2:	4b10      	ldr	r3, [pc, #64]	; (d5134 <_Z22publishStateTransitionv+0x6c>)
   d50f4:	791a      	ldrb	r2, [r3, #4]
   d50f6:	b19a      	cbz	r2, d5120 <_Z22publishStateTransitionv+0x58>
    if (sysStatus.connectedStatus) Particle.publish("State Transition",stateTransitionString, PRIVATE, WITH_ACK);
   d50f8:	78db      	ldrb	r3, [r3, #3]
   d50fa:	b16b      	cbz	r3, d5118 <_Z22publishStateTransitionv+0x50>
   d50fc:	4b0e      	ldr	r3, [pc, #56]	; (d5138 <_Z22publishStateTransitionv+0x70>)
   d50fe:	490f      	ldr	r1, [pc, #60]	; (d513c <_Z22publishStateTransitionv+0x74>)
   d5100:	781b      	ldrb	r3, [r3, #0]
   d5102:	f88d 3000 	strb.w	r3, [sp]
   d5106:	4b0e      	ldr	r3, [pc, #56]	; (d5140 <_Z22publishStateTransitionv+0x78>)
   d5108:	a802      	add	r0, sp, #8
   d510a:	781b      	ldrb	r3, [r3, #0]
   d510c:	aa04      	add	r2, sp, #16
   d510e:	f7ff f8a3 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5112:	a803      	add	r0, sp, #12
   d5114:	f7ff fc80 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Log.info(stateTransitionString);
   d5118:	480a      	ldr	r0, [pc, #40]	; (d5144 <_Z22publishStateTransitionv+0x7c>)
   d511a:	a904      	add	r1, sp, #16
   d511c:	f7ff f9be 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
  }
}
   d5120:	b00f      	add	sp, #60	; 0x3c
   d5122:	bd30      	pop	{r4, r5, pc}
   d5124:	2003e3c4 	.word	0x2003e3c4
   d5128:	2003e3cc 	.word	0x2003e3cc
   d512c:	2003dfe4 	.word	0x2003dfe4
   d5130:	000df470 	.word	0x000df470
   d5134:	2003e3d8 	.word	0x2003e3d8
   d5138:	2003e2dd 	.word	0x2003e2dd
   d513c:	000df47e 	.word	0x000df47e
   d5140:	2003e2dc 	.word	0x2003e2dc
   d5144:	2003e538 	.word	0x2003e538

000d5148 <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details Syncs time with remote service and sets low power mode. Called from Reporting State ONLY.
 * Clean house at the end of the day
 */
void dailyCleanup() {
   d5148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d514c:	4b24      	ldr	r3, [pc, #144]	; (d51e0 <_Z12dailyCleanupv+0x98>)
  Particle.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d514e:	4a25      	ldr	r2, [pc, #148]	; (d51e4 <_Z12dailyCleanupv+0x9c>)
   d5150:	781b      	ldrb	r3, [r3, #0]
   d5152:	4925      	ldr	r1, [pc, #148]	; (d51e8 <_Z12dailyCleanupv+0xa0>)
  sysStatus.verboseMode = false;
   d5154:	4c25      	ldr	r4, [pc, #148]	; (d51ec <_Z12dailyCleanupv+0xa4>)
void dailyCleanup() {
   d5156:	b086      	sub	sp, #24
  Particle.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d5158:	a802      	add	r0, sp, #8
   d515a:	f88d 3000 	strb.w	r3, [sp]
   d515e:	4b24      	ldr	r3, [pc, #144]	; (d51f0 <_Z12dailyCleanupv+0xa8>)
   d5160:	781b      	ldrb	r3, [r3, #0]
   d5162:	f7ff f879 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
  sysStatus.verboseMode = false;
   d5166:	2500      	movs	r5, #0
   d5168:	a803      	add	r0, sp, #12
   d516a:	f7ff fc55 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d516e:	7125      	strb	r5, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5170:	f003 fea0 	bl	d8eb4 <spark_cloud_flag_connected>
        if (!connected()) {
   d5174:	b110      	cbz	r0, d517c <_Z12dailyCleanupv+0x34>
        return spark_sync_time(NULL);
   d5176:	4628      	mov	r0, r5
   d5178:	f003 febc 	bl	d8ef4 <spark_sync_time>
        const system_tick_t start = millis();
   d517c:	f7ff f94a 	bl	d4414 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5180:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d5184:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d5186:	f247 582f 	movw	r8, #29999	; 0x752f
   d518a:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d518e:	f7ff f941 	bl	d4414 <_ZN11SystemClass6millisEv>
   d5192:	1b46      	subs	r6, r0, r5
   d5194:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5198:	45b9      	cmp	r9, r7
   d519a:	bf08      	it	eq
   d519c:	45b0      	cmpeq	r8, r6
   d519e:	d305      	bcc.n	d51ac <_Z12dailyCleanupv+0x64>
  Particle.syncTime();                                                 // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                // Wait for up to 30 seconds for the SyncTime to complete
   d51a0:	f7ff f82c 	bl	d41fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d51a4:	b910      	cbnz	r0, d51ac <_Z12dailyCleanupv+0x64>
            spark_process();
   d51a6:	f003 fe75 	bl	d8e94 <spark_process>
        while (_while() && !_condition()) {
   d51aa:	e7f0      	b.n	d518e <_Z12dailyCleanupv+0x46>
   d51ac:	f7ff f826 	bl	d41fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {     // If Solar or if the battery is being discharged
   d51b0:	7963      	ldrb	r3, [r4, #5]
   d51b2:	b913      	cbnz	r3, d51ba <_Z12dailyCleanupv+0x72>
   d51b4:	68a3      	ldr	r3, [r4, #8]
   d51b6:	2b46      	cmp	r3, #70	; 0x46
   d51b8:	dc09      	bgt.n	d51ce <_Z12dailyCleanupv+0x86>
    setLowPowerMode("1");
   d51ba:	490e      	ldr	r1, [pc, #56]	; (d51f4 <_Z12dailyCleanupv+0xac>)
   d51bc:	a802      	add	r0, sp, #8
   d51be:	f006 fa5e 	bl	db67e <_ZN6StringC1EPKc>
   d51c2:	a802      	add	r0, sp, #8
   d51c4:	f7ff fe0e 	bl	d4de4 <_Z15setLowPowerMode6String>
   d51c8:	a802      	add	r0, sp, #8
   d51ca:	f006 fa0d 	bl	db5e8 <_ZN6StringD1Ev>
  }

  resetEverything();                                               // If so, we need to Zero the counts for the new day
   d51ce:	f7ff fbdf 	bl	d4990 <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d51d2:	4b09      	ldr	r3, [pc, #36]	; (d51f8 <_Z12dailyCleanupv+0xb0>)
   d51d4:	2201      	movs	r2, #1
   d51d6:	701a      	strb	r2, [r3, #0]
   d51d8:	b006      	add	sp, #24
   d51da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d51de:	bf00      	nop
   d51e0:	2003e2dd 	.word	0x2003e2dd
   d51e4:	000df48f 	.word	0x000df48f
   d51e8:	000df497 	.word	0x000df497
   d51ec:	2003e3d8 	.word	0x2003e3d8
   d51f0:	2003e2dc 	.word	0x2003e2dc
   d51f4:	000df200 	.word	0x000df200
   d51f8:	2003e40c 	.word	0x2003e40c

000d51fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d51fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d51fe:	e9d0 5300 	ldrd	r5, r3, [r0]
   d5202:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5204:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5206:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d520a:	42ae      	cmp	r6, r5
   d520c:	d004      	beq.n	d5218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d520e:	4628      	mov	r0, r5
   d5210:	f006 f9ea 	bl	db5e8 <_ZN6StringD1Ev>
   d5214:	3514      	adds	r5, #20
   d5216:	e7f8      	b.n	d520a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d5218:	6820      	ldr	r0, [r4, #0]
   d521a:	f003 ff03 	bl	d9024 <free>
    AllocatorT::free(data_);
}
   d521e:	4620      	mov	r0, r4
   d5220:	bd70      	pop	{r4, r5, r6, pc}

000d5222 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5222:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5224:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5226:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5228:	68dd      	ldr	r5, [r3, #12]
   d522a:	2334      	movs	r3, #52	; 0x34
   d522c:	47a8      	blx	r5
    }
   d522e:	4620      	mov	r0, r4
   d5230:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5234 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5234:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus) {
   d5236:	4c1f      	ldr	r4, [pc, #124]	; (d52b4 <_Z18loadSystemDefaultsv+0x80>)
   d5238:	78e3      	ldrb	r3, [r4, #3]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d523a:	b086      	sub	sp, #24
  if (sysStatus.connectedStatus) {
   d523c:	b173      	cbz	r3, d525c <_Z18loadSystemDefaultsv+0x28>
        return waitConditionWhile(_condition, []{ return true; });
   d523e:	f7fe ffd2 	bl	d41e6 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        val_(0) {
   d5242:	2300      	movs	r3, #0
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
   d5244:	f88d 3000 	strb.w	r3, [sp]
   d5248:	4b1b      	ldr	r3, [pc, #108]	; (d52b8 <_Z18loadSystemDefaultsv+0x84>)
   d524a:	4a1c      	ldr	r2, [pc, #112]	; (d52bc <_Z18loadSystemDefaultsv+0x88>)
   d524c:	781b      	ldrb	r3, [r3, #0]
   d524e:	491c      	ldr	r1, [pc, #112]	; (d52c0 <_Z18loadSystemDefaultsv+0x8c>)
   d5250:	a802      	add	r0, sp, #8
   d5252:	f7ff f801 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5256:	a803      	add	r0, sp, #12
   d5258:	f7ff fbde 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Log.info("Loading system defaults");
   d525c:	4819      	ldr	r0, [pc, #100]	; (d52c4 <_Z18loadSystemDefaultsv+0x90>)
   d525e:	491a      	ldr	r1, [pc, #104]	; (d52c8 <_Z18loadSystemDefaultsv+0x94>)
   d5260:	f7ff f91c 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   d5264:	2301      	movs	r3, #1
   d5266:	7023      	strb	r3, [r4, #0]
  if (digitalRead(userSwitch)) setLowPowerMode("1");                  // Low power mode or not depending on user switch
   d5268:	2004      	movs	r0, #4
  sysStatus.verboseMode = false;
   d526a:	2300      	movs	r3, #0
   d526c:	7123      	strb	r3, [r4, #4]
  sysStatus.clockSet = false;
   d526e:	70a3      	strb	r3, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d5270:	71e3      	strb	r3, [r4, #7]
  if (digitalRead(userSwitch)) setLowPowerMode("1");                  // Low power mode or not depending on user switch
   d5272:	f007 f84f 	bl	dc314 <digitalRead>
   d5276:	b1d8      	cbz	r0, d52b0 <_Z18loadSystemDefaultsv+0x7c>
   d5278:	4914      	ldr	r1, [pc, #80]	; (d52cc <_Z18loadSystemDefaultsv+0x98>)
  else setLowPowerMode("0");
   d527a:	a802      	add	r0, sp, #8
   d527c:	f006 f9ff 	bl	db67e <_ZN6StringC1EPKc>
   d5280:	a802      	add	r0, sp, #8
   d5282:	f7ff fdaf 	bl	d4de4 <_Z15setLowPowerMode6String>
   d5286:	a802      	add	r0, sp, #8
   d5288:	f006 f9ae 	bl	db5e8 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d528c:	4b10      	ldr	r3, [pc, #64]	; (d52d0 <_Z18loadSystemDefaultsv+0x9c>)
   d528e:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d5290:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5294:	61a3      	str	r3, [r4, #24]
  sysStatus.openTime = 0;
   d5296:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d529a:	83a3      	strh	r3, [r4, #28]
  sysStatus.solarPowerMode = true;  
   d529c:	2101      	movs	r1, #1
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d529e:	2300      	movs	r3, #0
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d52a0:	4a04      	ldr	r2, [pc, #16]	; (d52b4 <_Z18loadSystemDefaultsv+0x80>)
   d52a2:	480c      	ldr	r0, [pc, #48]	; (d52d4 <_Z18loadSystemDefaultsv+0xa0>)
  sysStatus.solarPowerMode = true;  
   d52a4:	7161      	strb	r1, [r4, #5]
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d52a6:	8523      	strh	r3, [r4, #40]	; 0x28
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d52a8:	f7ff ffbb 	bl	d5222 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d52ac:	b006      	add	sp, #24
   d52ae:	bd10      	pop	{r4, pc}
  else setLowPowerMode("0");
   d52b0:	4909      	ldr	r1, [pc, #36]	; (d52d8 <_Z18loadSystemDefaultsv+0xa4>)
   d52b2:	e7e2      	b.n	d527a <_Z18loadSystemDefaultsv+0x46>
   d52b4:	2003e3d8 	.word	0x2003e3d8
   d52b8:	2003e2dc 	.word	0x2003e2dc
   d52bc:	000df4a5 	.word	0x000df4a5
   d52c0:	000df3f8 	.word	0x000df3f8
   d52c4:	2003e538 	.word	0x2003e538
   d52c8:	000df4bd 	.word	0x000df4bd
   d52cc:	000df200 	.word	0x000df200
   d52d0:	c0a00000 	.word	0xc0a00000
   d52d4:	2003e374 	.word	0x2003e374
   d52d8:	000df32d 	.word	0x000df32d
   d52dc:	00000000 	.word	0x00000000

000d52e0 <setup>:
{
   d52e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d52e2:	2100      	movs	r1, #0
{
   d52e4:	b0b9      	sub	sp, #228	; 0xe4
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d52e6:	2008      	movs	r0, #8
   d52e8:	f006 ffea 	bl	dc2c0 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d52ec:	2100      	movs	r1, #0
   d52ee:	2004      	movs	r0, #4
   d52f0:	f006 ffe6 	bl	dc2c0 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d52f4:	2101      	movs	r1, #1
   d52f6:	2007      	movs	r0, #7
   d52f8:	f006 ffe2 	bl	dc2c0 <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d52fc:	2101      	movs	r1, #1
   d52fe:	2007      	movs	r0, #7
   d5300:	f006 ffef 	bl	dc2e2 <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d5304:	a804      	add	r0, sp, #16
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5306:	2400      	movs	r4, #0
   d5308:	f003 fddc 	bl	d8ec4 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d530c:	2300      	movs	r3, #0
   d530e:	227d      	movs	r2, #125	; 0x7d
   d5310:	a918      	add	r1, sp, #96	; 0x60
   d5312:	a804      	add	r0, sp, #16
   d5314:	f006 fa93 	bl	db83e <_ZNK6String8getBytesEPhjj>
   d5318:	49bf      	ldr	r1, [pc, #764]	; (d5618 <setup+0x338>)
   d531a:	4623      	mov	r3, r4
   d531c:	4622      	mov	r2, r4
   d531e:	e9cd 4400 	strd	r4, r4, [sp]
   d5322:	a818      	add	r0, sp, #96	; 0x60
   d5324:	f003 fdde 	bl	d8ee4 <spark_subscribe>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d5328:	4abc      	ldr	r2, [pc, #752]	; (d561c <setup+0x33c>)
   d532a:	4623      	mov	r3, r4
   d532c:	2100      	movs	r1, #0
   d532e:	f44f 7080 	mov.w	r0, #256	; 0x100
   d5332:	f003 fd35 	bl	d8da0 <system_subscribe_event>
   d5336:	4aba      	ldr	r2, [pc, #744]	; (d5620 <setup+0x340>)
   d5338:	4623      	mov	r3, r4
   d533a:	2100      	movs	r1, #0
   d533c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d5340:	f003 fd2e 	bl	d8da0 <system_subscribe_event>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5344:	4623      	mov	r3, r4
   d5346:	2202      	movs	r2, #2
   d5348:	49b6      	ldr	r1, [pc, #728]	; (d5624 <setup+0x344>)
   d534a:	48b7      	ldr	r0, [pc, #732]	; (d5628 <setup+0x348>)
   d534c:	f003 fd92 	bl	d8e74 <spark_variable>
        return _variable(varKey, var, STRING);
   d5350:	49b6      	ldr	r1, [pc, #728]	; (d562c <setup+0x34c>)
   d5352:	48b7      	ldr	r0, [pc, #732]	; (d5630 <setup+0x350>)
   d5354:	f7fe ff5f 	bl	d4216 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5358:	49b6      	ldr	r1, [pc, #728]	; (d5634 <setup+0x354>)
   d535a:	48b7      	ldr	r0, [pc, #732]	; (d5638 <setup+0x358>)
   d535c:	4623      	mov	r3, r4
   d535e:	2202      	movs	r2, #2
   d5360:	f003 fd88 	bl	d8e74 <spark_variable>
   d5364:	4623      	mov	r3, r4
   d5366:	2202      	movs	r2, #2
   d5368:	49b4      	ldr	r1, [pc, #720]	; (d563c <setup+0x35c>)
   d536a:	48b5      	ldr	r0, [pc, #724]	; (d5640 <setup+0x360>)
   d536c:	f003 fd82 	bl	d8e74 <spark_variable>
        return _variable(varKey, var, STRING);
   d5370:	49b4      	ldr	r1, [pc, #720]	; (d5644 <setup+0x364>)
   d5372:	48b5      	ldr	r0, [pc, #724]	; (d5648 <setup+0x368>)
   d5374:	f7fe ff4f 	bl	d4216 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5378:	4623      	mov	r3, r4
   d537a:	2202      	movs	r2, #2
   d537c:	49b3      	ldr	r1, [pc, #716]	; (d564c <setup+0x36c>)
   d537e:	48b4      	ldr	r0, [pc, #720]	; (d5650 <setup+0x370>)
   d5380:	f003 fd78 	bl	d8e74 <spark_variable>
        return _variable(varKey, var, STRING);
   d5384:	49b3      	ldr	r1, [pc, #716]	; (d5654 <setup+0x374>)
   d5386:	48b4      	ldr	r0, [pc, #720]	; (d5658 <setup+0x378>)
   d5388:	f7fe ff45 	bl	d4216 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d538c:	49b3      	ldr	r1, [pc, #716]	; (d565c <setup+0x37c>)
   d538e:	48b4      	ldr	r0, [pc, #720]	; (d5660 <setup+0x380>)
   d5390:	f7fe ff41 	bl	d4216 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5394:	49b3      	ldr	r1, [pc, #716]	; (d5664 <setup+0x384>)
   d5396:	48b4      	ldr	r0, [pc, #720]	; (d5668 <setup+0x388>)
   d5398:	f7fe ff3d 	bl	d4216 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d539c:	4623      	mov	r3, r4
   d539e:	2202      	movs	r2, #2
   d53a0:	49b2      	ldr	r1, [pc, #712]	; (d566c <setup+0x38c>)
   d53a2:	48b3      	ldr	r0, [pc, #716]	; (d5670 <setup+0x390>)
   d53a4:	f003 fd66 	bl	d8e74 <spark_variable>
        return _variable(varKey, var, STRING);
   d53a8:	49b2      	ldr	r1, [pc, #712]	; (d5674 <setup+0x394>)
   d53aa:	48b3      	ldr	r0, [pc, #716]	; (d5678 <setup+0x398>)
   d53ac:	f7fe ff33 	bl	d4216 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d53b0:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d53b2:	e9cd 4408 	strd	r4, r4, [sp, #32]
        extra.size = sizeof(extra);
   d53b6:	f8ad 3020 	strh.w	r3, [sp, #32]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d53ba:	4bb0      	ldr	r3, [pc, #704]	; (d567c <setup+0x39c>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d53bc:	49b0      	ldr	r1, [pc, #704]	; (d5680 <setup+0x3a0>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d53be:	930a      	str	r3, [sp, #40]	; 0x28
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d53c0:	2204      	movs	r2, #4
   d53c2:	ab08      	add	r3, sp, #32
   d53c4:	48af      	ldr	r0, [pc, #700]	; (d5684 <setup+0x3a4>)
   d53c6:	f003 fd55 	bl	d8e74 <spark_variable>
        return _variable(varKey, var, STRING);
   d53ca:	49af      	ldr	r1, [pc, #700]	; (d5688 <setup+0x3a8>)
   d53cc:	48af      	ldr	r0, [pc, #700]	; (d568c <setup+0x3ac>)
   d53ce:	f7fe ff22 	bl	d4216 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d53d2:	49af      	ldr	r1, [pc, #700]	; (d5690 <setup+0x3b0>)
   d53d4:	48af      	ldr	r0, [pc, #700]	; (d5694 <setup+0x3b4>)
   d53d6:	f7fe ff1e 	bl	d4216 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d53da:	49af      	ldr	r1, [pc, #700]	; (d5698 <setup+0x3b8>)
   d53dc:	48af      	ldr	r0, [pc, #700]	; (d569c <setup+0x3bc>)
   d53de:	f7ff f81d 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d53e2:	49af      	ldr	r1, [pc, #700]	; (d56a0 <setup+0x3c0>)
   d53e4:	48af      	ldr	r0, [pc, #700]	; (d56a4 <setup+0x3c4>)
   d53e6:	f7ff f819 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d53ea:	49af      	ldr	r1, [pc, #700]	; (d56a8 <setup+0x3c8>)
   d53ec:	48af      	ldr	r0, [pc, #700]	; (d56ac <setup+0x3cc>)
   d53ee:	f7ff f815 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d53f2:	49af      	ldr	r1, [pc, #700]	; (d56b0 <setup+0x3d0>)
   d53f4:	48af      	ldr	r0, [pc, #700]	; (d56b4 <setup+0x3d4>)
   d53f6:	f7ff f811 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d53fa:	49af      	ldr	r1, [pc, #700]	; (d56b8 <setup+0x3d8>)
   d53fc:	48af      	ldr	r0, [pc, #700]	; (d56bc <setup+0x3dc>)
   d53fe:	f7ff f80d 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5402:	49af      	ldr	r1, [pc, #700]	; (d56c0 <setup+0x3e0>)
   d5404:	48af      	ldr	r0, [pc, #700]	; (d56c4 <setup+0x3e4>)
   d5406:	f7ff f809 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d540a:	49af      	ldr	r1, [pc, #700]	; (d56c8 <setup+0x3e8>)
   d540c:	48af      	ldr	r0, [pc, #700]	; (d56cc <setup+0x3ec>)
   d540e:	f7ff f805 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5412:	49af      	ldr	r1, [pc, #700]	; (d56d0 <setup+0x3f0>)
   d5414:	48af      	ldr	r0, [pc, #700]	; (d56d4 <setup+0x3f4>)
   d5416:	f7ff f801 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d541a:	49af      	ldr	r1, [pc, #700]	; (d56d8 <setup+0x3f8>)
   d541c:	48af      	ldr	r0, [pc, #700]	; (d56dc <setup+0x3fc>)
   d541e:	f7fe fffd 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5422:	49af      	ldr	r1, [pc, #700]	; (d56e0 <setup+0x400>)
   d5424:	48af      	ldr	r0, [pc, #700]	; (d56e4 <setup+0x404>)
   d5426:	f7fe fff9 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d542a:	49af      	ldr	r1, [pc, #700]	; (d56e8 <setup+0x408>)
   d542c:	48af      	ldr	r0, [pc, #700]	; (d56ec <setup+0x40c>)
   d542e:	f7fe fff5 	bl	d441c <_ZN10CloudClass9_functionEPKcPFi6StringE>
        graceful_(graceful),
        clearSession_(clearSession) {
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d5432:	2501      	movs	r5, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d5434:	2203      	movs	r2, #3
   d5436:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d543a:	a808      	add	r0, sp, #32
   d543c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    graceful_ = enabled;
   d5440:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
   d5444:	f004 f847 	bl	d94d6 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d5448:	48a9      	ldr	r0, [pc, #676]	; (d56f0 <setup+0x410>)
   d544a:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();                                         // The carrier board has D8 connected to FOUT for wake interrupts
   d544c:	4629      	mov	r1, r5
   d544e:	8143      	strh	r3, [r0, #10]
   d5450:	f001 fc68 	bl	d6d24 <_ZN6AB18055setupEb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                         // Enable watchdog
   d5454:	217c      	movs	r1, #124	; 0x7c
   d5456:	48a6      	ldr	r0, [pc, #664]	; (d56f0 <setup+0x410>)
   d5458:	4da6      	ldr	r5, [pc, #664]	; (d56f4 <setup+0x414>)
   d545a:	f001 f94b 	bl	d66f4 <_ZN6AB18056setWDTEi>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d545e:	4622      	mov	r2, r4
   d5460:	4621      	mov	r1, r4
   d5462:	a808      	add	r0, sp, #32
        int reason = RESET_REASON_NONE;
   d5464:	9408      	str	r4, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5466:	f003 fa49 	bl	d88fc <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d546a:	9b08      	ldr	r3, [sp, #32]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d546c:	2b14      	cmp	r3, #20
   d546e:	f040 80bf 	bne.w	d55f0 <setup+0x310>
    sysStatus.resetCount++;
   d5472:	692b      	ldr	r3, [r5, #16]
   d5474:	3301      	adds	r3, #1
   d5476:	612b      	str	r3, [r5, #16]
  fuelGauge.wakeup();                                                  // Expliciely wake the Feul gauge and give it a half-sec
   d5478:	489f      	ldr	r0, [pc, #636]	; (d56f8 <setup+0x418>)
   d547a:	4ea0      	ldr	r6, [pc, #640]	; (d56fc <setup+0x41c>)
   d547c:	f004 fba4 	bl	d9bc8 <_ZN9FuelGauge6wakeupEv>
  delay(500);
   d5480:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5484:	f003 fe4a 	bl	d911c <delay>
  fuelGauge.quickStart();                                              // May help us re-establish a baseline for SoC
   d5488:	489b      	ldr	r0, [pc, #620]	; (d56f8 <setup+0x418>)
   d548a:	f004 fb94 	bl	d9bb6 <_ZN9FuelGauge10quickStartEv>
  fram.begin();                                                        // Initialize the FRAM module
   d548e:	489c      	ldr	r0, [pc, #624]	; (d5700 <setup+0x420>)
   d5490:	f001 ff9c 	bl	d73cc <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5494:	2100      	movs	r1, #0
   d5496:	489a      	ldr	r0, [pc, #616]	; (d5700 <setup+0x420>)
   d5498:	2301      	movs	r3, #1
   d549a:	f10d 020f 	add.w	r2, sp, #15
   d549e:	f001 ffd7 	bl	d7450 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                              // Check to see if the memory map in the sketch matches the data on the chip
   d54a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d54a6:	2901      	cmp	r1, #1
   d54a8:	f000 8142 	beq.w	d5730 <setup+0x450>
    fram.erase();                                                      // Reset the FRAM to correct the issue
   d54ac:	4894      	ldr	r0, [pc, #592]	; (d5700 <setup+0x420>)
   d54ae:	f001 ff97 	bl	d73e0 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d54b2:	4a94      	ldr	r2, [pc, #592]	; (d5704 <setup+0x424>)
   d54b4:	4892      	ldr	r0, [pc, #584]	; (d5700 <setup+0x420>)
   d54b6:	2304      	movs	r3, #4
   d54b8:	2100      	movs	r1, #0
   d54ba:	f002 f814 	bl	d74e6 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54be:	2301      	movs	r3, #1
   d54c0:	488f      	ldr	r0, [pc, #572]	; (d5700 <setup+0x420>)
   d54c2:	f10d 020f 	add.w	r2, sp, #15
   d54c6:	2100      	movs	r1, #0
   d54c8:	f001 ffc2 	bl	d7450 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;         // Device will not work without FRAM
   d54cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d54d0:	2b01      	cmp	r3, #1
   d54d2:	f000 8098 	beq.w	d5606 <setup+0x326>
   d54d6:	2301      	movs	r3, #1
   d54d8:	7033      	strb	r3, [r6, #0]
  if (current.updateAttempts >= 3) {
   d54da:	4c8b      	ldr	r4, [pc, #556]	; (d5708 <setup+0x428>)
  checkSystemValues();                                                 // Make sure System values are all in valid range
   d54dc:	f7ff f996 	bl	d480c <_Z17checkSystemValuesv>
  if (current.updateAttempts >= 3) {
   d54e0:	f894 3020 	ldrb.w	r3, [r4, #32]
   d54e4:	2b02      	cmp	r3, #2
   d54e6:	d91a      	bls.n	d551e <setup+0x23e>
        system_set_flag(flag, value, nullptr);
   d54e8:	2200      	movs	r2, #0
   d54ea:	4611      	mov	r1, r2
    current.alerts = 7;                                                // Set an alert that we have maxed out our updates for the day
   d54ec:	2707      	movs	r7, #7
   d54ee:	2001      	movs	r0, #1
   d54f0:	f003 fc66 	bl	d8dc0 <system_set_flag>
   d54f4:	6127      	str	r7, [r4, #16]
    snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d54f6:	f006 fc94 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d54fa:	4a84      	ldr	r2, [pc, #528]	; (d570c <setup+0x42c>)
   d54fc:	9000      	str	r0, [sp, #0]
   d54fe:	463b      	mov	r3, r7
   d5500:	2140      	movs	r1, #64	; 0x40
   d5502:	a808      	add	r0, sp, #32
   d5504:	f003 fdae 	bl	d9064 <snprintf>
    PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE); // Put in publish queue
   d5508:	f002 f9c6 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
   d550c:	2300      	movs	r3, #0
   d550e:	f88d 3000 	strb.w	r3, [sp]
   d5512:	4b7f      	ldr	r3, [pc, #508]	; (d5710 <setup+0x430>)
   d5514:	497f      	ldr	r1, [pc, #508]	; (d5714 <setup+0x434>)
   d5516:	781b      	ldrb	r3, [r3, #0]
   d5518:	aa08      	add	r2, sp, #32
   d551a:	f7fe ffed 	bl	d44f8 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d551e:	ed95 0a06 	vldr	s0, [r5, #24]
   d5522:	f006 fb35 	bl	dbb90 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d5526:	f000 fe69 	bl	d61fc <_Z8isDSTusav>
   d552a:	2800      	cmp	r0, #0
   d552c:	f000 810c 	beq.w	d5748 <setup+0x468>
   d5530:	f006 fb4c 	bl	dbbcc <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d5534:	ed95 0a05 	vldr	s0, [r5, #20]
   d5538:	f006 fb0a 	bl	dbb50 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d553c:	f006 fcaa 	bl	dbe94 <_ZN9TimeClass5localEv>
   d5540:	4607      	mov	r7, r0
   d5542:	f006 fc6e 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d5546:	1a38      	subs	r0, r7, r0
   d5548:	f007 f8ea 	bl	dc720 <__aeabi_i2d>
   d554c:	a330      	add	r3, pc, #192	; (adr r3, d5610 <setup+0x330>)
   d554e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5552:	f007 fa79 	bl	dca48 <__aeabi_ddiv>
   d5556:	4a70      	ldr	r2, [pc, #448]	; (d5718 <setup+0x438>)
   d5558:	e9cd 0100 	strd	r0, r1, [sp]
   d555c:	210a      	movs	r1, #10
   d555e:	4845      	ldr	r0, [pc, #276]	; (d5674 <setup+0x394>)
   d5560:	f003 fd80 	bl	d9064 <snprintf>
  PublishQueuePosix::instance().setup();                               // Tend to the queue
   d5564:	f002 f998 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
   d5568:	f002 fb9a 	bl	d7ca0 <_ZN17PublishQueuePosix5setupEv>
  PublishQueuePosix::instance().withRamQueueSize(0);                   // Writes to memory immediately
   d556c:	f002 f994 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
   d5570:	2100      	movs	r1, #0
   d5572:	f002 fb6d 	bl	d7c50 <_ZN17PublishQueuePosix16withRamQueueSizeEj>
  PublishQueuePosix::instance().withFileQueueSize(96);                 // This should last at least two days
   d5576:	f002 f98f 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
   d557a:	2160      	movs	r1, #96	; 0x60
   d557c:	f002 fb7c 	bl	d7c78 <_ZN17PublishQueuePosix17withFileQueueSizeEj>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d5580:	2004      	movs	r0, #4
   d5582:	f006 fec7 	bl	dc314 <digitalRead>
   d5586:	b908      	cbnz	r0, d558c <setup+0x2ac>
   d5588:	f7ff fe54 	bl	d5234 <_Z18loadSystemDefaultsv>
  makeUpStringMessages();                                              // Updated system settings - refresh the string messages
   d558c:	f7ff f9b2 	bl	d48f4 <_Z20makeUpStringMessagesv>
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d5590:	f7ff f902 	bl	d4798 <_Z14setPowerConfigv>
  if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   d5594:	f006 fc62 	bl	dbe5c <_ZN9TimeClass3dayEv>
   d5598:	2100      	movs	r1, #0
   d559a:	4607      	mov	r7, r0
   d559c:	6820      	ldr	r0, [r4, #0]
   d559e:	f006 fabb 	bl	dbb18 <_ZN9TimeClass3dayEx>
   d55a2:	4287      	cmp	r7, r0
   d55a4:	d001      	beq.n	d55aa <setup+0x2ca>
    resetEverything();                                                 // Zero the counts for the new day
   d55a6:	f7ff f9f3 	bl	d4990 <_Z15resetEverythingv>
  takeMeasurements();                                               // Populates values so you can read them before the hour
   d55aa:	f7ff fc6f 	bl	d4e8c <_Z16takeMeasurementsv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d55ae:	f006 fc49 	bl	dbe44 <_ZN9TimeClass4hourEv>
   d55b2:	7f2b      	ldrb	r3, [r5, #28]
   d55b4:	4298      	cmp	r0, r3
   d55b6:	db07      	blt.n	d55c8 <setup+0x2e8>
   d55b8:	f006 fc44 	bl	dbe44 <_ZN9TimeClass4hourEv>
   d55bc:	7f6b      	ldrb	r3, [r5, #29]
   d55be:	4298      	cmp	r0, r3
    stayAwake = stayAwakeLong;                                        // Keeps Boron awake after reboot - helps with recovery
   d55c0:	bfbe      	ittt	lt
   d55c2:	4b56      	ldrlt	r3, [pc, #344]	; (d571c <setup+0x43c>)
   d55c4:	4a56      	ldrlt	r2, [pc, #344]	; (d5720 <setup+0x440>)
   d55c6:	601a      	strlt	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d55c8:	7833      	ldrb	r3, [r6, #0]
   d55ca:	b90b      	cbnz	r3, d55d0 <setup+0x2f0>
   d55cc:	2302      	movs	r3, #2
   d55ce:	7033      	strb	r3, [r6, #0]
  systemStatusWriteNeeded = true;                                      // Update FRAM with any changes from setup
   d55d0:	4b54      	ldr	r3, [pc, #336]	; (d5724 <setup+0x444>)
  Log.info("Startup complete");
   d55d2:	4955      	ldr	r1, [pc, #340]	; (d5728 <setup+0x448>)
   d55d4:	4855      	ldr	r0, [pc, #340]	; (d572c <setup+0x44c>)
  systemStatusWriteNeeded = true;                                      // Update FRAM with any changes from setup
   d55d6:	2201      	movs	r2, #1
   d55d8:	701a      	strb	r2, [r3, #0]
  Log.info("Startup complete");
   d55da:	f7fe ff5f 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
  digitalWrite(blueLED,LOW);                                           // Signal the end of startup
   d55de:	2100      	movs	r1, #0
   d55e0:	2007      	movs	r0, #7
   d55e2:	f006 fe7e 	bl	dc2e2 <digitalWrite>
  String deviceID = System.deviceID();                                 // Multiple devices share the same hook - keeps things straight
   d55e6:	a804      	add	r0, sp, #16
   d55e8:	f005 fffe 	bl	db5e8 <_ZN6StringD1Ev>
}
   d55ec:	b039      	add	sp, #228	; 0xe4
   d55ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55f0:	4622      	mov	r2, r4
   d55f2:	4621      	mov	r1, r4
   d55f4:	a808      	add	r0, sp, #32
        int reason = RESET_REASON_NONE;
   d55f6:	9408      	str	r4, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55f8:	f003 f980 	bl	d88fc <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d55fc:	9b08      	ldr	r3, [sp, #32]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d55fe:	2b8c      	cmp	r3, #140	; 0x8c
   d5600:	f47f af3a 	bne.w	d5478 <setup+0x198>
   d5604:	e735      	b.n	d5472 <setup+0x192>
    else loadSystemDefaults();                                         // Out of the box, we need the device to be awake and connected
   d5606:	f7ff fe15 	bl	d5234 <_Z18loadSystemDefaultsv>
   d560a:	e766      	b.n	d54da <setup+0x1fa>
   d560c:	f3af 8000 	nop.w
   d5610:	00000000 	.word	0x00000000
   d5614:	40ac2000 	.word	0x40ac2000
   d5618:	000d4ad5 	.word	0x000d4ad5
   d561c:	000d4515 	.word	0x000d4515
   d5620:	000d40d5 	.word	0x000d40d5
   d5624:	2003e344 	.word	0x2003e344
   d5628:	000df4d5 	.word	0x000df4d5
   d562c:	2003e290 	.word	0x2003e290
   d5630:	000df4e2 	.word	0x000df4e2
   d5634:	2003e3e8 	.word	0x2003e3e8
   d5638:	000df4e9 	.word	0x000df4e9
   d563c:	2003e34c 	.word	0x2003e34c
   d5640:	000df4f4 	.word	0x000df4f4
   d5644:	2003dfd0 	.word	0x2003dfd0
   d5648:	000df500 	.word	0x000df500
   d564c:	2003e3e0 	.word	0x2003e3e0
   d5650:	000df508 	.word	0x000df508
   d5654:	2003e3b4 	.word	0x2003e3b4
   d5658:	000df513 	.word	0x000df513
   d565c:	2003dfd6 	.word	0x2003dfd6
   d5660:	000df5be 	.word	0x000df5be
   d5664:	2003dfc4 	.word	0x2003dfc4
   d5668:	000df520 	.word	0x000df520
   d566c:	2003e350 	.word	0x2003e350
   d5670:	000df52a 	.word	0x000df52a
   d5674:	2003e365 	.word	0x2003e365
   d5678:	000df531 	.word	0x000df531
   d567c:	000d4221 	.word	0x000d4221
   d5680:	000d413d 	.word	0x000d413d
   d5684:	000df53c 	.word	0x000df53c
   d5688:	2003e41e 	.word	0x2003e41e
   d568c:	000df54b 	.word	0x000df54b
   d5690:	2003e40e 	.word	0x2003e40e
   d5694:	000df557 	.word	0x000df557
   d5698:	000d4b79 	.word	0x000d4b79
   d569c:	000df568 	.word	0x000df568
   d56a0:	000d415d 	.word	0x000d415d
   d56a4:	000df572 	.word	0x000df572
   d56a8:	000d4de5 	.word	0x000d4de5
   d56ac:	000df57a 	.word	0x000df57a
   d56b0:	000d4bc1 	.word	0x000d4bc1
   d56b4:	000df587 	.word	0x000df587
   d56b8:	000d4c5d 	.word	0x000d4c5d
   d56bc:	000df592 	.word	0x000df592
   d56c0:	000d6241 	.word	0x000d6241
   d56c4:	000df59f 	.word	0x000df59f
   d56c8:	000d6389 	.word	0x000d6389
   d56cc:	000df5ac 	.word	0x000df5ac
   d56d0:	000d4d3d 	.word	0x000d4d3d
   d56d4:	000df5ba 	.word	0x000df5ba
   d56d8:	000d4d75 	.word	0x000d4d75
   d56dc:	000df5c7 	.word	0x000df5c7
   d56e0:	000d4fb5 	.word	0x000d4fb5
   d56e4:	000df5d1 	.word	0x000df5d1
   d56e8:	000d5045 	.word	0x000d5045
   d56ec:	000df5e3 	.word	0x000df5e3
   d56f0:	2003e2ec 	.word	0x2003e2ec
   d56f4:	2003e3d8 	.word	0x2003e3d8
   d56f8:	2003e384 	.word	0x2003e384
   d56fc:	2003e3cc 	.word	0x2003e3cc
   d5700:	2003e374 	.word	0x2003e374
   d5704:	000df918 	.word	0x000df918
   d5708:	2003e340 	.word	0x2003e340
   d570c:	000df235 	.word	0x000df235
   d5710:	2003e2dc 	.word	0x2003e2dc
   d5714:	000df257 	.word	0x000df257
   d5718:	000df5f4 	.word	0x000df5f4
   d571c:	2003e3d0 	.word	0x2003e3d0
   d5720:	000493e0 	.word	0x000493e0
   d5724:	2003e40c 	.word	0x2003e40c
   d5728:	000df5fe 	.word	0x000df5fe
   d572c:	2003e538 	.word	0x2003e538
   d5730:	4a07      	ldr	r2, [pc, #28]	; (d5750 <setup+0x470>)
   d5732:	4808      	ldr	r0, [pc, #32]	; (d5754 <setup+0x474>)
   d5734:	2334      	movs	r3, #52	; 0x34
   d5736:	f001 fe8b 	bl	d7450 <_ZN6MB85RC8readDataEjPhj>
   d573a:	4a07      	ldr	r2, [pc, #28]	; (d5758 <setup+0x478>)
   d573c:	4805      	ldr	r0, [pc, #20]	; (d5754 <setup+0x474>)
   d573e:	2324      	movs	r3, #36	; 0x24
   d5740:	2150      	movs	r1, #80	; 0x50
   d5742:	f001 fe85 	bl	d7450 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5746:	e6c8      	b.n	d54da <setup+0x1fa>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d5748:	f006 fa4c 	bl	dbbe4 <_ZN9TimeClass6endDSTEv>
   d574c:	e6f2      	b.n	d5534 <setup+0x254>
   d574e:	bf00      	nop
   d5750:	2003e3d8 	.word	0x2003e3d8
   d5754:	2003e374 	.word	0x2003e374
   d5758:	2003e340 	.word	0x2003e340

000d575c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d575c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d575e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5760:	4604      	mov	r4, r0
   d5762:	460d      	mov	r5, r1
   d5764:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5766:	d916      	bls.n	d5796 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5768:	4290      	cmp	r0, r2
   d576a:	d215      	bcs.n	d5798 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d576c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d5770:	1a75      	subs	r5, r6, r1
   d5772:	f1a1 0714 	sub.w	r7, r1, #20
   d5776:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5778:	42b7      	cmp	r7, r6
   d577a:	d01c      	beq.n	d57b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d577c:	b12c      	cbz	r4, d578a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d577e:	4631      	mov	r1, r6
   d5780:	4620      	mov	r0, r4
   d5782:	f005 ffad 	bl	db6e0 <_ZN6StringC1EOS_>
   d5786:	7c33      	ldrb	r3, [r6, #16]
   d5788:	7423      	strb	r3, [r4, #16]
   d578a:	4630      	mov	r0, r6
   d578c:	f005 ff2c 	bl	db5e8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5790:	3e14      	subs	r6, #20
   d5792:	3c14      	subs	r4, #20
   d5794:	e7f0      	b.n	d5778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5796:	d00e      	beq.n	d57b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5798:	42b5      	cmp	r5, r6
   d579a:	d00c      	beq.n	d57b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d579c:	b12c      	cbz	r4, d57aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d579e:	4629      	mov	r1, r5
   d57a0:	4620      	mov	r0, r4
   d57a2:	f005 ff9d 	bl	db6e0 <_ZN6StringC1EOS_>
   d57a6:	7c2b      	ldrb	r3, [r5, #16]
   d57a8:	7423      	strb	r3, [r4, #16]
   d57aa:	4628      	mov	r0, r5
   d57ac:	f005 ff1c 	bl	db5e8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d57b0:	3514      	adds	r5, #20
   d57b2:	3414      	adds	r4, #20
   d57b4:	e7f0      	b.n	d5798 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d57b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d57b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d57bc:	2300      	movs	r3, #0
   d57be:	e9c0 3300 	strd	r3, r3, [r0]
   d57c2:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d57c4:	684f      	ldr	r7, [r1, #4]
   d57c6:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d57c8:	4604      	mov	r4, r0
   d57ca:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d57cc:	dd23      	ble.n	d5816 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d57ce:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d57d2:	fb08 f007 	mul.w	r0, r8, r7
   d57d6:	f003 fc1d 	bl	d9014 <malloc>
            if (!d) {
   d57da:	4605      	mov	r5, r0
   d57dc:	b1d8      	cbz	r0, d5816 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d57de:	e9d4 1200 	ldrd	r1, r2, [r4]
   d57e2:	fb08 1202 	mla	r2, r8, r2, r1
   d57e6:	f7ff ffb9 	bl	d575c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d57ea:	6820      	ldr	r0, [r4, #0]
   d57ec:	f003 fc1a 	bl	d9024 <free>
        data_ = d;
   d57f0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d57f2:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d57f4:	e9d6 7300 	ldrd	r7, r3, [r6]
   d57f8:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d57fc:	45b8      	cmp	r8, r7
   d57fe:	d008      	beq.n	d5812 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d5800:	4639      	mov	r1, r7
   d5802:	4628      	mov	r0, r5
   d5804:	f005 ff86 	bl	db714 <_ZN6StringC1ERKS_>
   d5808:	7c3b      	ldrb	r3, [r7, #16]
   d580a:	742b      	strb	r3, [r5, #16]
   d580c:	3714      	adds	r7, #20
   d580e:	3514      	adds	r5, #20
   d5810:	e7f4      	b.n	d57fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5812:	6873      	ldr	r3, [r6, #4]
   d5814:	6063      	str	r3, [r4, #4]
}
   d5816:	4620      	mov	r0, r4
   d5818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d581c <_GLOBAL__sub_I___appProductID>:
   d581c:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d581e:	4b54      	ldr	r3, [pc, #336]	; (d5970 <_GLOBAL__sub_I___appProductID+0x154>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5820:	4e54      	ldr	r6, [pc, #336]	; (d5974 <_GLOBAL__sub_I___appProductID+0x158>)
   d5822:	2501      	movs	r5, #1
   d5824:	701d      	strb	r5, [r3, #0]
   d5826:	4b54      	ldr	r3, [pc, #336]	; (d5978 <_GLOBAL__sub_I___appProductID+0x15c>)
   d5828:	2208      	movs	r2, #8
   d582a:	b08f      	sub	sp, #60	; 0x3c
   d582c:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d582e:	f006 fcf1 	bl	dc214 <spark_protocol_instance>
   d5832:	2300      	movs	r3, #0
   d5834:	461a      	mov	r2, r3
   d5836:	210d      	movs	r1, #13
   d5838:	f006 fcf4 	bl	dc224 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d583c:	f006 fcea 	bl	dc214 <spark_protocol_instance>
   d5840:	2300      	movs	r3, #0
   d5842:	461a      	mov	r2, r3
   d5844:	2109      	movs	r1, #9
   d5846:	f006 fcf5 	bl	dc234 <spark_protocol_set_product_firmware_version>
struct currentStatus_structure {                    // currently 10 bytes long
   d584a:	4b4c      	ldr	r3, [pc, #304]	; (d597c <_GLOBAL__sub_I___appProductID+0x160>)
   d584c:	2400      	movs	r4, #0
   d584e:	2264      	movs	r2, #100	; 0x64
   d5850:	831c      	strh	r4, [r3, #24]
   d5852:	61da      	str	r2, [r3, #28]
   d5854:	f883 4020 	strb.w	r4, [r3, #32]
              error_(SYSTEM_ERROR_NONE) {
   d5858:	4b49      	ldr	r3, [pc, #292]	; (d5980 <_GLOBAL__sub_I___appProductID+0x164>)
    SleepResult() {}
   d585a:	4a4a      	ldr	r2, [pc, #296]	; (d5984 <_GLOBAL__sub_I___appProductID+0x168>)
              error_(SYSTEM_ERROR_NONE) {
   d585c:	601c      	str	r4, [r3, #0]
   d585e:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d5860:	719c      	strb	r4, [r3, #6]
   d5862:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   d5864:	2002      	movs	r0, #2
   d5866:	f003 fa8b 	bl	d8d80 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d586a:	4621      	mov	r1, r4
   d586c:	4628      	mov	r0, r5
   d586e:	f003 fa9f 	bl	d8db0 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5872:	4629      	mov	r1, r5
   d5874:	2004      	movs	r0, #4
   d5876:	f003 f839 	bl	d88ec <HAL_Feature_Set>
        : config_(config) {
   d587a:	4b43      	ldr	r3, [pc, #268]	; (d5988 <_GLOBAL__sub_I___appProductID+0x16c>)
   d587c:	461a      	mov	r2, r3
   d587e:	1d19      	adds	r1, r3, #4
   d5880:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d5884:	f8a3 4009 	strh.w	r4, [r3, #9]
   d5888:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d588a:	4a40      	ldr	r2, [pc, #256]	; (d598c <_GLOBAL__sub_I___appProductID+0x170>)
              valid_(true) {
   d588c:	751d      	strb	r5, [r3, #20]
        config_.wakeup_sources = nullptr;
   d588e:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d5892:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5894:	721c      	strb	r4, [r3, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5896:	f006 fd99 	bl	dc3cc <_Z19__fetch_global_Wirev>
   d589a:	4623      	mov	r3, r4
   d589c:	4601      	mov	r1, r0
   d589e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d58a2:	4630      	mov	r0, r6
   d58a4:	f001 fd88 	bl	d73b8 <_ZN6MB85RCC1ER7TwoWireji>
   d58a8:	4b39      	ldr	r3, [pc, #228]	; (d5990 <_GLOBAL__sub_I___appProductID+0x174>)
   d58aa:	6033      	str	r3, [r6, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d58ac:	f006 fd8e 	bl	dc3cc <_Z19__fetch_global_Wirev>
   d58b0:	2269      	movs	r2, #105	; 0x69
   d58b2:	4601      	mov	r1, r0
   d58b4:	4837      	ldr	r0, [pc, #220]	; (d5994 <_GLOBAL__sub_I___appProductID+0x178>)
   d58b6:	f000 fe1f 	bl	d64f8 <_ZN6AB1805C1ER7TwoWireh>
FuelGauge fuelGauge;                                     // Enable the fuel gauge API      
   d58ba:	4621      	mov	r1, r4
   d58bc:	4836      	ldr	r0, [pc, #216]	; (d5998 <_GLOBAL__sub_I___appProductID+0x17c>)
   d58be:	f004 f8c7 	bl	d9a50 <_ZN9FuelGaugeC1Eb>
        capacity_(0) {
   d58c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d58c6:	9403      	str	r4, [sp, #12]
            StreamLogHandler(Serial, level, filters) {
   d58c8:	f006 fbe2 	bl	dc090 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d58cc:	4c33      	ldr	r4, [pc, #204]	; (d599c <_GLOBAL__sub_I___appProductID+0x180>)
   d58ce:	4606      	mov	r6, r0
   d58d0:	a901      	add	r1, sp, #4
   d58d2:	a804      	add	r0, sp, #16
   d58d4:	f7ff ff70 	bl	d57b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d58d8:	4627      	mov	r7, r4
        stream_(&stream) {
   d58da:	a904      	add	r1, sp, #16
   d58dc:	a807      	add	r0, sp, #28
   d58de:	f7ff ff6b 	bl	d57b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d58e2:	4b2f      	ldr	r3, [pc, #188]	; (d59a0 <_GLOBAL__sub_I___appProductID+0x184>)
   d58e4:	f847 3b04 	str.w	r3, [r7], #4
   d58e8:	a907      	add	r1, sp, #28
   d58ea:	a80a      	add	r0, sp, #40	; 0x28
   d58ec:	f7ff ff64 	bl	d57b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d58f0:	aa0a      	add	r2, sp, #40	; 0x28
   d58f2:	4629      	mov	r1, r5
   d58f4:	4638      	mov	r0, r7
   d58f6:	f005 f966 	bl	dabc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d58fa:	a80a      	add	r0, sp, #40	; 0x28
   d58fc:	f7ff fc7e 	bl	d51fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5900:	a807      	add	r0, sp, #28
   d5902:	f7ff fc7b 	bl	d51fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5906:	4b27      	ldr	r3, [pc, #156]	; (d59a4 <_GLOBAL__sub_I___appProductID+0x188>)
   d5908:	6023      	str	r3, [r4, #0]
   d590a:	6226      	str	r6, [r4, #32]
   d590c:	a804      	add	r0, sp, #16
   d590e:	f7ff fc75 	bl	d51fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5912:	4b25      	ldr	r3, [pc, #148]	; (d59a8 <_GLOBAL__sub_I___appProductID+0x18c>)
   d5914:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d5916:	f006 fbbb 	bl	dc090 <_Z16_fetch_usbserialv>
   d591a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d591e:	f006 fba7 	bl	dc070 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5922:	f004 fdf5 	bl	da510 <_ZN5spark10LogManager8instanceEv>
   d5926:	4621      	mov	r1, r4
   d5928:	f005 f8df 	bl	daaea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ALL);
   d592c:	a801      	add	r0, sp, #4
   d592e:	f7ff fc65 	bl	d51fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5932:	4b1e      	ldr	r3, [pc, #120]	; (d59ac <_GLOBAL__sub_I___appProductID+0x190>)
	    _M_invoker = &_My_handler::_M_invoke;
   d5934:	4e1e      	ldr	r6, [pc, #120]	; (d59b0 <_GLOBAL__sub_I___appProductID+0x194>)
	    _M_manager = &_My_handler::_M_manager;
   d5936:	4c1f      	ldr	r4, [pc, #124]	; (d59b4 <_GLOBAL__sub_I___appProductID+0x198>)
Timer awakeTimer(1800000, awakeTimerISR, true);           // 30 minute timer, calles the awakeTimerISR and is one-shot
   d5938:	491f      	ldr	r1, [pc, #124]	; (d59b8 <_GLOBAL__sub_I___appProductID+0x19c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d593a:	930a      	str	r3, [sp, #40]	; 0x28
   d593c:	aa0a      	add	r2, sp, #40	; 0x28
   d593e:	462b      	mov	r3, r5
   d5940:	481e      	ldr	r0, [pc, #120]	; (d59bc <_GLOBAL__sub_I___appProductID+0x1a0>)
	    _M_invoker = &_My_handler::_M_invoke;
   d5942:	960d      	str	r6, [sp, #52]	; 0x34
	    _M_manager = &_My_handler::_M_manager;
   d5944:	940c      	str	r4, [sp, #48]	; 0x30
   d5946:	f7fe fd6f 	bl	d4428 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d594a:	a80a      	add	r0, sp, #40	; 0x28
   d594c:	f7fe fcbc 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5950:	4b1b      	ldr	r3, [pc, #108]	; (d59c0 <_GLOBAL__sub_I___appProductID+0x1a4>)
Timer wateringTimer(600000, wateringTimerISR, true);      // 10 minute timer, calles the wateringTimerISR and is one-shot
   d5952:	491c      	ldr	r1, [pc, #112]	; (d59c4 <_GLOBAL__sub_I___appProductID+0x1a8>)
   d5954:	930a      	str	r3, [sp, #40]	; 0x28
   d5956:	aa0a      	add	r2, sp, #40	; 0x28
   d5958:	462b      	mov	r3, r5
   d595a:	481b      	ldr	r0, [pc, #108]	; (d59c8 <_GLOBAL__sub_I___appProductID+0x1ac>)
	    _M_manager = &_My_handler::_M_manager;
   d595c:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
   d5960:	f7fe fd62 	bl	d4428 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d5964:	a80a      	add	r0, sp, #40	; 0x28
   d5966:	f7fe fcaf 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
   d596a:	b00f      	add	sp, #60	; 0x3c
   d596c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d596e:	bf00      	nop
   d5970:	2003e2dc 	.word	0x2003e2dc
   d5974:	2003e374 	.word	0x2003e374
   d5978:	2003e2dd 	.word	0x2003e2dd
   d597c:	2003e340 	.word	0x2003e340
   d5980:	2003e2d0 	.word	0x2003e2d0
   d5984:	ffff0000 	.word	0xffff0000
   d5988:	2003e328 	.word	0x2003e328
   d598c:	00030010 	.word	0x00030010
   d5990:	000df8dc 	.word	0x000df8dc
   d5994:	2003e2ec 	.word	0x2003e2ec
   d5998:	2003e384 	.word	0x2003e384
   d599c:	2003e390 	.word	0x2003e390
   d59a0:	000df8ac 	.word	0x000df8ac
   d59a4:	000e016c 	.word	0x000e016c
   d59a8:	000df8c4 	.word	0x000df8c4
   d59ac:	000d4101 	.word	0x000d4101
   d59b0:	000d4121 	.word	0x000d4121
   d59b4:	000d4125 	.word	0x000d4125
   d59b8:	001b7740 	.word	0x001b7740
   d59bc:	2003e30c 	.word	0x2003e30c
   d59c0:	000d40e1 	.word	0x000d40e1
   d59c4:	000927c0 	.word	0x000927c0
   d59c8:	2003e428 	.word	0x2003e428

000d59cc <_Z22disconnectFromParticlev>:
{
   d59cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Log.info("In the disconnect from Particle function");
   d59d0:	492c      	ldr	r1, [pc, #176]	; (d5a84 <_Z22disconnectFromParticlev+0xb8>)
   d59d2:	482d      	ldr	r0, [pc, #180]	; (d5a88 <_Z22disconnectFromParticlev+0xbc>)
{
   d59d4:	b085      	sub	sp, #20
  Log.info("In the disconnect from Particle function");
   d59d6:	f7fe fd61 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
        clearSession_(clearSession) {
   d59da:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();
   d59de:	a801      	add	r0, sp, #4
   d59e0:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d59e4:	f8ad a00c 	strh.w	sl, [sp, #12]
   d59e8:	f003 fd5b 	bl	d94a2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d59ec:	f7fe fd12 	bl	d4414 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d59f0:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d59f4:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d59f6:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d59fa:	f7fe fd0b 	bl	d4414 <_ZN11SystemClass6millisEv>
   d59fe:	ebb0 060b 	subs.w	r6, r0, fp
   d5a02:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5a06:	45b9      	cmp	r9, r7
   d5a08:	bf08      	it	eq
   d5a0a:	45b0      	cmpeq	r8, r6
   d5a0c:	d305      	bcc.n	d5a1a <_Z22disconnectFromParticlev+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a0e:	f003 fa51 	bl	d8eb4 <spark_cloud_flag_connected>
   d5a12:	b110      	cbz	r0, d5a1a <_Z22disconnectFromParticlev+0x4e>
            spark_process();
   d5a14:	f003 fa3e 	bl	d8e94 <spark_process>
        while (_while() && !_condition()) {
   d5a18:	e7ef      	b.n	d59fa <_Z22disconnectFromParticlev+0x2e>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a1a:	4e1c      	ldr	r6, [pc, #112]	; (d5a8c <_Z22disconnectFromParticlev+0xc0>)
   d5a1c:	f003 fa4a 	bl	d8eb4 <spark_cloud_flag_connected>
   d5a20:	2200      	movs	r2, #0
   d5a22:	2102      	movs	r1, #2
   d5a24:	6870      	ldr	r0, [r6, #4]
   d5a26:	f003 faa5 	bl	d8f74 <network_disconnect>
  Cellular.off();                                                      // Turn off the cellular modem
   d5a2a:	4630      	mov	r0, r6
   d5a2c:	f7fe fc46 	bl	d42bc <_ZN5spark13CellularClass3offEv>
        const system_tick_t start = millis();
   d5a30:	f7fe fcf0 	bl	d4414 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5a34:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d5a38:	4607      	mov	r7, r0
        while (_while() && !_condition()) {
   d5a3a:	f247 582f 	movw	r8, #29999	; 0x752f
   d5a3e:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5a42:	f7fe fce7 	bl	d4414 <_ZN11SystemClass6millisEv>
   d5a46:	1bc4      	subs	r4, r0, r7
   d5a48:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d5a4c:	45a9      	cmp	r9, r5
   d5a4e:	bf08      	it	eq
   d5a50:	45a0      	cmpeq	r8, r4
   d5a52:	d306      	bcc.n	d5a62 <_Z22disconnectFromParticlev+0x96>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5a54:	4630      	mov	r0, r6
   d5a56:	f005 fbf5 	bl	db244 <_ZN5spark12NetworkClass5isOffEv>
   d5a5a:	b910      	cbnz	r0, d5a62 <_Z22disconnectFromParticlev+0x96>
            spark_process();
   d5a5c:	f003 fa1a 	bl	d8e94 <spark_process>
        while (_while() && !_condition()) {
   d5a60:	e7ef      	b.n	d5a42 <_Z22disconnectFromParticlev+0x76>
   d5a62:	480a      	ldr	r0, [pc, #40]	; (d5a8c <_Z22disconnectFromParticlev+0xc0>)
   d5a64:	f005 fbee 	bl	db244 <_ZN5spark12NetworkClass5isOffEv>
  sysStatus.connectedStatus = false;
   d5a68:	4b09      	ldr	r3, [pc, #36]	; (d5a90 <_Z22disconnectFromParticlev+0xc4>)
   d5a6a:	2200      	movs	r2, #0
   d5a6c:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d5a6e:	4b09      	ldr	r3, [pc, #36]	; (d5a94 <_Z22disconnectFromParticlev+0xc8>)
   d5a70:	2401      	movs	r4, #1
  detachInterrupt(userSwitch);                                         // Stop watching the userSwitch as we will no longer be connected
   d5a72:	2004      	movs	r0, #4
  systemStatusWriteNeeded = true;
   d5a74:	701c      	strb	r4, [r3, #0]
  detachInterrupt(userSwitch);                                         // Stop watching the userSwitch as we will no longer be connected
   d5a76:	f004 f999 	bl	d9dac <_Z15detachInterruptt>
}
   d5a7a:	4620      	mov	r0, r4
   d5a7c:	b005      	add	sp, #20
   d5a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5a82:	bf00      	nop
   d5a84:	000df60f 	.word	0x000df60f
   d5a88:	2003e538 	.word	0x2003e538
   d5a8c:	2003e464 	.word	0x2003e464
   d5a90:	2003e3d8 	.word	0x2003e3d8
   d5a94:	2003e40c 	.word	0x2003e40c

000d5a98 <loop>:
{
   d5a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d5a9c:	4da9      	ldr	r5, [pc, #676]	; (d5d44 <loop+0x2ac>)
   d5a9e:	4caa      	ldr	r4, [pc, #680]	; (d5d48 <loop+0x2b0>)
   d5aa0:	782b      	ldrb	r3, [r5, #0]
   d5aa2:	4faa      	ldr	r7, [pc, #680]	; (d5d4c <loop+0x2b4>)
   d5aa4:	f8df 8300 	ldr.w	r8, [pc, #768]	; d5da8 <loop+0x310>
   d5aa8:	3b01      	subs	r3, #1
{
   d5aaa:	b097      	sub	sp, #92	; 0x5c
   d5aac:	2b09      	cmp	r3, #9
   d5aae:	f200 809b 	bhi.w	d5be8 <loop+0x150>
   d5ab2:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5ab6:	0280      	.short	0x0280
   d5ab8:	00f2000a 	.word	0x00f2000a
   d5abc:	012c0239 	.word	0x012c0239
   d5ac0:	02110115 	.word	0x02110115
   d5ac4:	00990032 	.word	0x00990032
   d5ac8:	0329      	.short	0x0329
    if (state != oldState) publishStateTransition();
   d5aca:	4ba1      	ldr	r3, [pc, #644]	; (d5d50 <loop+0x2b8>)
   d5acc:	781b      	ldrb	r3, [r3, #0]
   d5ace:	2b02      	cmp	r3, #2
   d5ad0:	d001      	beq.n	d5ad6 <loop+0x3e>
   d5ad2:	f7ff faf9 	bl	d50c8 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake && !current.solenoidState) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d5ad6:	79a3      	ldrb	r3, [r4, #6]
   d5ad8:	b16b      	cbz	r3, d5af6 <loop+0x5e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5ada:	f002 ff2f 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
   d5ade:	4b9d      	ldr	r3, [pc, #628]	; (d5d54 <loop+0x2bc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	1ac0      	subs	r0, r0, r3
   d5ae4:	4b9c      	ldr	r3, [pc, #624]	; (d5d58 <loop+0x2c0>)
   d5ae6:	681b      	ldr	r3, [r3, #0]
   d5ae8:	4298      	cmp	r0, r3
   d5aea:	d904      	bls.n	d5af6 <loop+0x5e>
   d5aec:	4b9b      	ldr	r3, [pc, #620]	; (d5d5c <loop+0x2c4>)
   d5aee:	689b      	ldr	r3, [r3, #8]
   d5af0:	b90b      	cbnz	r3, d5af6 <loop+0x5e>
   d5af2:	2308      	movs	r3, #8
   d5af4:	702b      	strb	r3, [r5, #0]
    if (firmwareUpdateInProgress) state= FIRMWARE_UPDATE;    
   d5af6:	4b9a      	ldr	r3, [pc, #616]	; (d5d60 <loop+0x2c8>)
   d5af8:	781b      	ldrb	r3, [r3, #0]
   d5afa:	b10b      	cbz	r3, d5b00 <loop+0x68>
   d5afc:	230a      	movs	r3, #10
   d5afe:	702b      	strb	r3, [r5, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = MEASURING_STATE;                                                            // We want to report on the hour but not after bedtime
   d5b00:	f006 f9a0 	bl	dbe44 <_ZN9TimeClass4hourEv>
   d5b04:	4b97      	ldr	r3, [pc, #604]	; (d5d64 <loop+0x2cc>)
   d5b06:	4606      	mov	r6, r0
   d5b08:	2100      	movs	r1, #0
   d5b0a:	6818      	ldr	r0, [r3, #0]
   d5b0c:	f005 fffc 	bl	dbb08 <_ZN9TimeClass4hourEx>
   d5b10:	4286      	cmp	r6, r0
   d5b12:	d069      	beq.n	d5be8 <loop+0x150>
   d5b14:	2303      	movs	r3, #3
          state = IDLE_STATE;
   d5b16:	702b      	strb	r3, [r5, #0]
    } break;
   d5b18:	e066      	b.n	d5be8 <loop+0x150>
    if (state != oldState) publishStateTransition();
   d5b1a:	4b8d      	ldr	r3, [pc, #564]	; (d5d50 <loop+0x2b8>)
   d5b1c:	781b      	ldrb	r3, [r3, #0]
   d5b1e:	2b08      	cmp	r3, #8
   d5b20:	d001      	beq.n	d5b26 <loop+0x8e>
   d5b22:	f7ff fad1 	bl	d50c8 <_Z22publishStateTransitionv>
    if (wateringTimer.isActive() || awakeTimer.isActive())  break;    // Don't nap until we are done with watering
   d5b26:	4890      	ldr	r0, [pc, #576]	; (d5d68 <loop+0x2d0>)
   d5b28:	f7fe fcae 	bl	d4488 <_ZNK5Timer8isActiveEv>
   d5b2c:	2800      	cmp	r0, #0
   d5b2e:	d15b      	bne.n	d5be8 <loop+0x150>
   d5b30:	488e      	ldr	r0, [pc, #568]	; (d5d6c <loop+0x2d4>)
   d5b32:	f7fe fca9 	bl	d4488 <_ZNK5Timer8isActiveEv>
   d5b36:	2800      	cmp	r0, #0
   d5b38:	d156      	bne.n	d5be8 <loop+0x150>
    if (sysStatus.connectedStatus || !Cellular.isOff()) disconnectFromParticle();           // Disconnect cleanly from Particle
   d5b3a:	78e3      	ldrb	r3, [r4, #3]
   d5b3c:	2b00      	cmp	r3, #0
   d5b3e:	f000 80a2 	beq.w	d5c86 <loop+0x1ee>
   d5b42:	f7ff ff43 	bl	d59cc <_Z22disconnectFromParticlev>
    if (sysStatus.connectedStatus) disconnectFromParticle();           // Disconnect cleanly from Particle
   d5b46:	78e3      	ldrb	r3, [r4, #3]
   d5b48:	b10b      	cbz	r3, d5b4e <loop+0xb6>
   d5b4a:	f7ff ff3f 	bl	d59cc <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d5b4e:	4b82      	ldr	r3, [pc, #520]	; (d5d58 <loop+0x2c0>)
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d5b50:	4887      	ldr	r0, [pc, #540]	; (d5d70 <loop+0x2d8>)
   d5b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b56:	2100      	movs	r1, #0
    state = IDLE_STATE;                                                // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d5b58:	f04f 0902 	mov.w	r9, #2
    stayAwake = 1000;                                                  // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d5b5c:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                                // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d5b5e:	f885 9000 	strb.w	r9, [r5]
   d5b62:	f000 fdc7 	bl	d66f4 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d5b66:	f006 f95c 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d5b6a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   d5b6e:	fb90 f3f6 	sdiv	r3, r0, r6
   d5b72:	fb03 0616 	mls	r6, r3, r6, r0
        if (valid_) {
   d5b76:	4b7f      	ldr	r3, [pc, #508]	; (d5d74 <loop+0x2dc>)
   d5b78:	f5c6 6661 	rsb	r6, r6, #3600	; 0xe10
   d5b7c:	7d1a      	ldrb	r2, [r3, #20]
   d5b7e:	f5b6 6f61 	cmp.w	r6, #3600	; 0xe10
   d5b82:	bfa8      	it	ge
   d5b84:	f44f 6661 	movge.w	r6, #3600	; 0xe10
   d5b88:	b10a      	cbz	r2, d5b8e <loop+0xf6>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5b8a:	f883 9008 	strb.w	r9, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5b8e:	2200      	movs	r2, #0
   d5b90:	2104      	movs	r1, #4
   d5b92:	4878      	ldr	r0, [pc, #480]	; (d5d74 <loop+0x2dc>)
   d5b94:	f7fe fbe0 	bl	d4358 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5b9c:	4371      	muls	r1, r6
   d5b9e:	f7fe fc0f 	bl	d43c0 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d5ba2:	4974      	ldr	r1, [pc, #464]	; (d5d74 <loop+0x2dc>)
   d5ba4:	a803      	add	r0, sp, #12
   d5ba6:	f005 fef5 	bl	db994 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d5baa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5bae:	4870      	ldr	r0, [pc, #448]	; (d5d70 <loop+0x2d8>)
   d5bb0:	f000 fda0 	bl	d66f4 <_ZN6AB18056setWDTEi>
    fuelGauge.wakeup();                                                // Make sure the fuelGauge is woke
   d5bb4:	4870      	ldr	r0, [pc, #448]	; (d5d78 <loop+0x2e0>)
   d5bb6:	f004 f807 	bl	d9bc8 <_ZN9FuelGauge6wakeupEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5bba:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5bbc:	2b00      	cmp	r3, #0
   d5bbe:	d069      	beq.n	d5c94 <loop+0x1fc>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5bc0:	889a      	ldrh	r2, [r3, #4]
   d5bc2:	2a01      	cmp	r2, #1
   d5bc4:	d166      	bne.n	d5c94 <loop+0x1fc>
    if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d5bc6:	899b      	ldrh	r3, [r3, #12]
   d5bc8:	2b04      	cmp	r3, #4
   d5bca:	d163      	bne.n	d5c94 <loop+0x1fc>
   d5bcc:	496b      	ldr	r1, [pc, #428]	; (d5d7c <loop+0x2e4>)
   d5bce:	a806      	add	r0, sp, #24
   d5bd0:	f005 fd55 	bl	db67e <_ZN6StringC1EPKc>
   d5bd4:	a806      	add	r0, sp, #24
   d5bd6:	f7ff f905 	bl	d4de4 <_Z15setLowPowerMode6String>
   d5bda:	a806      	add	r0, sp, #24
   d5bdc:	f005 fd04 	bl	db5e8 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   d5be0:	9803      	ldr	r0, [sp, #12]
   d5be2:	b108      	cbz	r0, d5be8 <loop+0x150>
            free(wakeupSource_);
   d5be4:	f003 fa1e 	bl	d9024 <free>
  ab1805.loop();                                                       // Keeps the RTC synchronized with the Boron's clock
   d5be8:	4861      	ldr	r0, [pc, #388]	; (d5d70 <loop+0x2d8>)
   d5bea:	f001 f97b 	bl	d6ee4 <_ZN6AB18054loopEv>
  PublishQueuePosix::instance().loop();                                // Check to see if we need to tend to the message queue
   d5bee:	f001 fe53 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
   d5bf2:	f001 fd41 	bl	d7678 <_ZN17PublishQueuePosix4loopEv>
  if (systemStatusWriteNeeded) {                                       // These flags get set when a value is changed
   d5bf6:	f898 3000 	ldrb.w	r3, [r8]
   d5bfa:	b13b      	cbz	r3, d5c0c <loop+0x174>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d5bfc:	4a52      	ldr	r2, [pc, #328]	; (d5d48 <loop+0x2b0>)
   d5bfe:	4860      	ldr	r0, [pc, #384]	; (d5d80 <loop+0x2e8>)
   d5c00:	2101      	movs	r1, #1
   d5c02:	f7ff fb0e 	bl	d5222 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d5c06:	2300      	movs	r3, #0
   d5c08:	f888 3000 	strb.w	r3, [r8]
  if (currentCountsWriteNeeded) {
   d5c0c:	783b      	ldrb	r3, [r7, #0]
   d5c0e:	b13b      	cbz	r3, d5c20 <loop+0x188>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5c10:	2324      	movs	r3, #36	; 0x24
   d5c12:	4a52      	ldr	r2, [pc, #328]	; (d5d5c <loop+0x2c4>)
   d5c14:	485a      	ldr	r0, [pc, #360]	; (d5d80 <loop+0x2e8>)
   d5c16:	2150      	movs	r1, #80	; 0x50
   d5c18:	f001 fc65 	bl	d74e6 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d5c1c:	2300      	movs	r3, #0
   d5c1e:	703b      	strb	r3, [r7, #0]
  if (outOfMemory >= 0) {                                              // In this function we are going to reset the system if there is an out of memory error
   d5c20:	4b58      	ldr	r3, [pc, #352]	; (d5d84 <loop+0x2ec>)
   d5c22:	681b      	ldr	r3, [r3, #0]
   d5c24:	2b00      	cmp	r3, #0
   d5c26:	db1f      	blt.n	d5c68 <loop+0x1d0>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d5c28:	4a57      	ldr	r2, [pc, #348]	; (d5d88 <loop+0x2f0>)
   d5c2a:	2140      	movs	r1, #64	; 0x40
   d5c2c:	a806      	add	r0, sp, #24
   d5c2e:	f003 fa19 	bl	d9064 <snprintf>
    Log.info(message);
   d5c32:	4856      	ldr	r0, [pc, #344]	; (d5d8c <loop+0x2f4>)
   d5c34:	a906      	add	r1, sp, #24
   d5c36:	f7fe fc31 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
    if (sysStatus.connectedStatus) {
   d5c3a:	78e3      	ldrb	r3, [r4, #3]
   d5c3c:	b173      	cbz	r3, d5c5c <loop+0x1c4>
        return waitConditionWhile(_condition, []{ return true; });
   d5c3e:	f7fe fad2 	bl	d41e6 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Memory",message,PRIVATE);                      // Publish to the console - this is important so we will not filter on verboseMod
   d5c42:	2300      	movs	r3, #0
   d5c44:	f88d 3000 	strb.w	r3, [sp]
   d5c48:	4b51      	ldr	r3, [pc, #324]	; (d5d90 <loop+0x2f8>)
   d5c4a:	4952      	ldr	r1, [pc, #328]	; (d5d94 <loop+0x2fc>)
   d5c4c:	781b      	ldrb	r3, [r3, #0]
   d5c4e:	a803      	add	r0, sp, #12
   d5c50:	aa06      	add	r2, sp, #24
   d5c52:	f7fe fb01 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5c56:	a804      	add	r0, sp, #16
   d5c58:	f7fe fede 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
   d5c5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5c60:	f003 fa5c 	bl	d911c <delay>
    System.reset();                                                    // An out of memory condition occurred - reset device.
   d5c64:	f005 fe92 	bl	db98c <_ZN11SystemClass5resetEv>
  if (sysStatus.connectedStatus && !Particle.connected()) {            // If the system thinks we are connected, let's make sure that we are
   d5c68:	78e3      	ldrb	r3, [r4, #3]
   d5c6a:	b14b      	cbz	r3, d5c80 <loop+0x1e8>
   d5c6c:	f003 f922 	bl	d8eb4 <spark_cloud_flag_connected>
   d5c70:	b930      	cbnz	r0, d5c80 <loop+0x1e8>
    state = CONNECTING_STATE;                                          // Go the connecting state - that way we will have limits on connection attempt duration
   d5c72:	2305      	movs	r3, #5
    sysStatus.connectedStatus = false;                                 // At least for now, this is the correct state value
   d5c74:	70e0      	strb	r0, [r4, #3]
    Log.info("Particle connection failed, reverting to the connecting state");
   d5c76:	4948      	ldr	r1, [pc, #288]	; (d5d98 <loop+0x300>)
   d5c78:	4844      	ldr	r0, [pc, #272]	; (d5d8c <loop+0x2f4>)
    state = CONNECTING_STATE;                                          // Go the connecting state - that way we will have limits on connection attempt duration
   d5c7a:	702b      	strb	r3, [r5, #0]
    Log.info("Particle connection failed, reverting to the connecting state");
   d5c7c:	f7fe fc0e 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
}
   d5c80:	b017      	add	sp, #92	; 0x5c
   d5c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sysStatus.connectedStatus || !Cellular.isOff()) disconnectFromParticle();           // Disconnect cleanly from Particle
   d5c86:	4845      	ldr	r0, [pc, #276]	; (d5d9c <loop+0x304>)
   d5c88:	f005 fadc 	bl	db244 <_ZN5spark12NetworkClass5isOffEv>
   d5c8c:	2800      	cmp	r0, #0
   d5c8e:	f43f af58 	beq.w	d5b42 <loop+0xaa>
   d5c92:	e758      	b.n	d5b46 <loop+0xae>
    else state = IDLE_STATE;
   d5c94:	2302      	movs	r3, #2
   d5c96:	702b      	strb	r3, [r5, #0]
   d5c98:	e7a2      	b.n	d5be0 <loop+0x148>
    if (state != oldState) publishStateTransition();
   d5c9a:	4b2d      	ldr	r3, [pc, #180]	; (d5d50 <loop+0x2b8>)
   d5c9c:	781b      	ldrb	r3, [r3, #0]
   d5c9e:	2b03      	cmp	r3, #3
   d5ca0:	d001      	beq.n	d5ca6 <loop+0x20e>
   d5ca2:	f7ff fa11 	bl	d50c8 <_Z22publishStateTransitionv>
    takeMeasurements();
   d5ca6:	f7ff f8f1 	bl	d4e8c <_Z16takeMeasurementsv>
    if (Time.hour() > sysStatus.openTime && Time.hour() < sysStatus.closeTime && current.soilMoisture < sysStatus.wateringThresholdPct) {
   d5caa:	f006 f8cb 	bl	dbe44 <_ZN9TimeClass4hourEv>
   d5cae:	7f23      	ldrb	r3, [r4, #28]
   d5cb0:	4298      	cmp	r0, r3
   d5cb2:	dd13      	ble.n	d5cdc <loop+0x244>
   d5cb4:	f006 f8c6 	bl	dbe44 <_ZN9TimeClass4hourEv>
   d5cb8:	7f63      	ldrb	r3, [r4, #29]
   d5cba:	4298      	cmp	r0, r3
   d5cbc:	da0e      	bge.n	d5cdc <loop+0x244>
   d5cbe:	4a27      	ldr	r2, [pc, #156]	; (d5d5c <loop+0x2c4>)
   d5cc0:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
   d5cc4:	edd2 7a01 	vldr	s15, [r2, #4]
   d5cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      current.solenoidState = true;                                     // This sets a flag that indicates watering is needed
   d5cd4:	bf42      	ittt	mi
   d5cd6:	2301      	movmi	r3, #1
   d5cd8:	6093      	strmi	r3, [r2, #8]
      currentCountsWriteNeeded = true;
   d5cda:	703b      	strbmi	r3, [r7, #0]
    state = REPORTING_STATE;
   d5cdc:	2306      	movs	r3, #6
   d5cde:	e71a      	b.n	d5b16 <loop+0x7e>
    if (state != oldState) publishStateTransition();
   d5ce0:	4b1b      	ldr	r3, [pc, #108]	; (d5d50 <loop+0x2b8>)
   d5ce2:	781b      	ldrb	r3, [r3, #0]
   d5ce4:	2b06      	cmp	r3, #6
   d5ce6:	d001      	beq.n	d5cec <loop+0x254>
   d5ce8:	f7ff f9ee 	bl	d50c8 <_Z22publishStateTransitionv>
    lastReportedTime = Time.now();                                    // We are only going to report once each hour from the IDLE state.  We may or may not connect to Particle
   d5cec:	f006 f899 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d5cf0:	4b1c      	ldr	r3, [pc, #112]	; (d5d64 <loop+0x2cc>)
   d5cf2:	6018      	str	r0, [r3, #0]
    takeMeasurements();                                               // Take Measurements here for reporting
   d5cf4:	f7ff f8ca 	bl	d4e8c <_Z16takeMeasurementsv>
    if (Time.hour() == sysStatus.openTime) dailyCleanup();            // Once a day, clean house and publish to Google Sheets
   d5cf8:	f006 f8a4 	bl	dbe44 <_ZN9TimeClass4hourEv>
   d5cfc:	7f23      	ldrb	r3, [r4, #28]
   d5cfe:	4298      	cmp	r0, r3
   d5d00:	d101      	bne.n	d5d06 <loop+0x26e>
   d5d02:	f7ff fa21 	bl	d5148 <_Z12dailyCleanupv>
    sendEvent();                                                      // Publish hourly but not at opening time as there is nothing to publish
   d5d06:	f7fe fc5b 	bl	d45c0 <_Z9sendEventv>
    state = CONNECTING_STATE;                                         // We are only passing through this state once each hour    
   d5d0a:	2305      	movs	r3, #5
   d5d0c:	e703      	b.n	d5b16 <loop+0x7e>
    if (state != oldState) {                                           // Non-blocking function - these are first time items
   d5d0e:	4b10      	ldr	r3, [pc, #64]	; (d5d50 <loop+0x2b8>)
   d5d10:	781b      	ldrb	r3, [r3, #0]
   d5d12:	2b05      	cmp	r3, #5
   d5d14:	d06d      	beq.n	d5df2 <loop+0x35a>
      retainedOldState = oldState;                                     // Keep track for where to go next
   d5d16:	4e22      	ldr	r6, [pc, #136]	; (d5da0 <loop+0x308>)
   d5d18:	7033      	strb	r3, [r6, #0]
      sysStatus.lastConnectionDuration = 0;                            // Will exit with 0 if we do not connect or are connected or the connection time if we do
   d5d1a:	2300      	movs	r3, #0
   d5d1c:	8523      	strh	r3, [r4, #40]	; 0x28
      publishStateTransition();
   d5d1e:	f7ff f9d3 	bl	d50c8 <_Z22publishStateTransitionv>
      if (sysStatus.connectedStatus && Particle.connected()) {
   d5d22:	78e3      	ldrb	r3, [r4, #3]
   d5d24:	2b00      	cmp	r3, #0
   d5d26:	d141      	bne.n	d5dac <loop+0x314>
      if (sysStatus.lowBatteryMode && digitalRead(userSwitch)) {
   d5d28:	79e3      	ldrb	r3, [r4, #7]
   d5d2a:	2b00      	cmp	r3, #0
   d5d2c:	d051      	beq.n	d5dd2 <loop+0x33a>
   d5d2e:	2004      	movs	r0, #4
   d5d30:	f006 faf0 	bl	dc314 <digitalRead>
   d5d34:	2800      	cmp	r0, #0
   d5d36:	d04c      	beq.n	d5dd2 <loop+0x33a>
        Log.info("Connecting state but low battery mode");
   d5d38:	491a      	ldr	r1, [pc, #104]	; (d5da4 <loop+0x30c>)
          Log.info("firmware update completed");
   d5d3a:	4814      	ldr	r0, [pc, #80]	; (d5d8c <loop+0x2f4>)
   d5d3c:	f7fe fbae 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
          state = IDLE_STATE;
   d5d40:	e084      	b.n	d5e4c <loop+0x3b4>
   d5d42:	bf00      	nop
   d5d44:	2003e3cc 	.word	0x2003e3cc
   d5d48:	2003e3d8 	.word	0x2003e3d8
   d5d4c:	2003e364 	.word	0x2003e364
   d5d50:	2003e3c4 	.word	0x2003e3c4
   d5d54:	2003e3d4 	.word	0x2003e3d4
   d5d58:	2003e3d0 	.word	0x2003e3d0
   d5d5c:	2003e340 	.word	0x2003e340
   d5d60:	2003e370 	.word	0x2003e370
   d5d64:	2003e38c 	.word	0x2003e38c
   d5d68:	2003e428 	.word	0x2003e428
   d5d6c:	2003e30c 	.word	0x2003e30c
   d5d70:	2003e2ec 	.word	0x2003e2ec
   d5d74:	2003e328 	.word	0x2003e328
   d5d78:	2003e384 	.word	0x2003e384
   d5d7c:	000df32d 	.word	0x000df32d
   d5d80:	2003e374 	.word	0x2003e374
   d5d84:	2003dfe0 	.word	0x2003dfe0
   d5d88:	000df82c 	.word	0x000df82c
   d5d8c:	2003e538 	.word	0x2003e538
   d5d90:	2003e2dc 	.word	0x2003e2dc
   d5d94:	000df84b 	.word	0x000df84b
   d5d98:	000df852 	.word	0x000df852
   d5d9c:	2003e464 	.word	0x2003e464
   d5da0:	2003e2de 	.word	0x2003e2de
   d5da4:	000df65f 	.word	0x000df65f
   d5da8:	2003e40c 	.word	0x2003e40c
   d5dac:	f003 f882 	bl	d8eb4 <spark_cloud_flag_connected>
      if (sysStatus.connectedStatus && Particle.connected()) {
   d5db0:	2800      	cmp	r0, #0
   d5db2:	d0b9      	beq.n	d5d28 <loop+0x290>
        Log.info("Connecting state but already connected");
   d5db4:	49a1      	ldr	r1, [pc, #644]	; (d603c <loop+0x5a4>)
   d5db6:	48a2      	ldr	r0, [pc, #648]	; (d6040 <loop+0x5a8>)
   d5db8:	f7fe fb70 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
        stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   d5dbc:	4ba1      	ldr	r3, [pc, #644]	; (d6044 <loop+0x5ac>)
   d5dbe:	4aa2      	ldr	r2, [pc, #648]	; (d6048 <loop+0x5b0>)
   d5dc0:	601a      	str	r2, [r3, #0]
   d5dc2:	f002 fdbb 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
        stayAwakeTimeStamp = millis();
   d5dc6:	4ba1      	ldr	r3, [pc, #644]	; (d604c <loop+0x5b4>)
   d5dc8:	6018      	str	r0, [r3, #0]
        (retainedOldState = REPORTING_STATE) ? state = RESP_WAIT_STATE : state = IDLE_STATE;
   d5dca:	2306      	movs	r3, #6
   d5dcc:	7033      	strb	r3, [r6, #0]
      if (retainedOldState == REPORTING_STATE) state = RESP_WAIT_STATE;
   d5dce:	2307      	movs	r3, #7
   d5dd0:	e6a1      	b.n	d5b16 <loop+0x7e>
      if (sysStatus.lowPowerMode && digitalRead(userSwitch)) {         // Low power mode and user switch not pressed
   d5dd2:	79a3      	ldrb	r3, [r4, #6]
   d5dd4:	2b00      	cmp	r3, #0
   d5dd6:	d13b      	bne.n	d5e50 <loop+0x3b8>
   d5dd8:	f002 fdb0 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
      connectionStartTimeStamp = millis();                             // Have to use millis as the clock will get reset on connect
   d5ddc:	4b9c      	ldr	r3, [pc, #624]	; (d6050 <loop+0x5b8>)
   d5dde:	6018      	str	r0, [r3, #0]
        network_on(*this, 0, 0, NULL);
   d5de0:	489c      	ldr	r0, [pc, #624]	; (d6054 <loop+0x5bc>)
   d5de2:	2300      	movs	r3, #0
   d5de4:	6840      	ldr	r0, [r0, #4]
   d5de6:	461a      	mov	r2, r3
   d5de8:	4619      	mov	r1, r3
   d5dea:	f003 f8d3 	bl	d8f94 <network_on>
        spark_cloud_flag_connect();
   d5dee:	f003 f859 	bl	d8ea4 <spark_cloud_flag_connect>
   d5df2:	f002 fda3 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
    sysStatus.lastConnectionDuration = int((millis() - connectionStartTimeStamp)/1000);
   d5df6:	4b96      	ldr	r3, [pc, #600]	; (d6050 <loop+0x5b8>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	1ac0      	subs	r0, r0, r3
   d5dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e00:	fbb0 f0f3 	udiv	r0, r0, r3
   d5e04:	8520      	strh	r0, [r4, #40]	; 0x28
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e06:	f003 f855 	bl	d8eb4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5e0a:	2800      	cmp	r0, #0
   d5e0c:	d037      	beq.n	d5e7e <loop+0x3e6>
      sysStatus.connectedStatus = true;
   d5e0e:	2301      	movs	r3, #1
   d5e10:	70e3      	strb	r3, [r4, #3]
      sysStatus.lastConnection = Time.now();                           // This is the last time we attempted to connect
   d5e12:	f006 f806 	bl	dbe22 <_ZN9TimeClass3nowEv>
      stayAwake = stayAwakeLong;                                       // Keeps device awake after reboot - helps with recovery
   d5e16:	4b8b      	ldr	r3, [pc, #556]	; (d6044 <loop+0x5ac>)
   d5e18:	4a8b      	ldr	r2, [pc, #556]	; (d6048 <loop+0x5b0>)
   d5e1a:	601a      	str	r2, [r3, #0]
      sysStatus.lastConnection = Time.now();                           // This is the last time we attempted to connect
   d5e1c:	6260      	str	r0, [r4, #36]	; 0x24
   d5e1e:	f002 fd8d 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5e22:	4b8a      	ldr	r3, [pc, #552]	; (d604c <loop+0x5b4>)
   d5e24:	6018      	str	r0, [r3, #0]
      recordConnectionDetails();                                       // Record outcome of connection attempt
   d5e26:	f7fe fe0d 	bl	d4a44 <_Z23recordConnectionDetailsv>
      Log.info("Cloud connection successful");
   d5e2a:	498b      	ldr	r1, [pc, #556]	; (d6058 <loop+0x5c0>)
   d5e2c:	4884      	ldr	r0, [pc, #528]	; (d6040 <loop+0x5a8>)
   d5e2e:	f7fe fb35 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
      attachInterrupt(userSwitch, userSwitchISR,FALLING);              // Attach interrupt for the user switch to enable verbose counts
   d5e32:	2300      	movs	r3, #0
   d5e34:	9300      	str	r3, [sp, #0]
   d5e36:	4989      	ldr	r1, [pc, #548]	; (d605c <loop+0x5c4>)
   d5e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5e3c:	2202      	movs	r2, #2
   d5e3e:	2004      	movs	r0, #4
   d5e40:	f003 ff8a 	bl	d9d58 <_Z15attachInterrupttPFvvE13InterruptModeah>
      if (retainedOldState == REPORTING_STATE) state = RESP_WAIT_STATE;
   d5e44:	4b86      	ldr	r3, [pc, #536]	; (d6060 <loop+0x5c8>)
   d5e46:	781b      	ldrb	r3, [r3, #0]
   d5e48:	2b06      	cmp	r3, #6
   d5e4a:	d0c0      	beq.n	d5dce <loop+0x336>
          state = IDLE_STATE;
   d5e4c:	2302      	movs	r3, #2
   d5e4e:	e662      	b.n	d5b16 <loop+0x7e>
      if (sysStatus.lowPowerMode && digitalRead(userSwitch)) {         // Low power mode and user switch not pressed
   d5e50:	2004      	movs	r0, #4
   d5e52:	f006 fa5f 	bl	dc314 <digitalRead>
   d5e56:	2800      	cmp	r0, #0
   d5e58:	d0be      	beq.n	d5dd8 <loop+0x340>
        if (sysStatus.stateOfCharge <= 50 && (Time.hour() % 4)) {      // If the battery level is <50%, only connect every fourth hour
   d5e5a:	68a3      	ldr	r3, [r4, #8]
   d5e5c:	2b32      	cmp	r3, #50	; 0x32
   d5e5e:	dd08      	ble.n	d5e72 <loop+0x3da>
        else if (sysStatus.stateOfCharge <= 65 && (Time.hour() % 2)) { // If the battery level is 50% -  65%, only connect every other hour
   d5e60:	68a3      	ldr	r3, [r4, #8]
   d5e62:	2b41      	cmp	r3, #65	; 0x41
   d5e64:	dcb8      	bgt.n	d5dd8 <loop+0x340>
   d5e66:	f005 ffed 	bl	dbe44 <_ZN9TimeClass4hourEv>
   d5e6a:	07c3      	lsls	r3, r0, #31
   d5e6c:	d5b4      	bpl.n	d5dd8 <loop+0x340>
          Log.info("Connecting but 50-65%% charge - two hour schedule"); 
   d5e6e:	497d      	ldr	r1, [pc, #500]	; (d6064 <loop+0x5cc>)
   d5e70:	e763      	b.n	d5d3a <loop+0x2a2>
        if (sysStatus.stateOfCharge <= 50 && (Time.hour() % 4)) {      // If the battery level is <50%, only connect every fourth hour
   d5e72:	f005 ffe7 	bl	dbe44 <_ZN9TimeClass4hourEv>
   d5e76:	0782      	lsls	r2, r0, #30
   d5e78:	d0f2      	beq.n	d5e60 <loop+0x3c8>
          Log.info("Connecting but <50%% charge - four hour schedule"); 
   d5e7a:	497b      	ldr	r1, [pc, #492]	; (d6068 <loop+0x5d0>)
   d5e7c:	e75d      	b.n	d5d3a <loop+0x2a2>
    else if (sysStatus.lastConnectionDuration > connectMaxTimeSec) {
   d5e7e:	4b7b      	ldr	r3, [pc, #492]	; (d606c <loop+0x5d4>)
   d5e80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d5e82:	681b      	ldr	r3, [r3, #0]
   d5e84:	429a      	cmp	r2, r3
   d5e86:	f67f aeaf 	bls.w	d5be8 <loop+0x150>
      current.alerts = 2;                                              // Connection timed out alert
   d5e8a:	4b79      	ldr	r3, [pc, #484]	; (d6070 <loop+0x5d8>)
      sysStatus.connectedStatus = false;
   d5e8c:	70e0      	strb	r0, [r4, #3]
      current.alerts = 2;                                              // Connection timed out alert
   d5e8e:	2202      	movs	r2, #2
   d5e90:	611a      	str	r2, [r3, #16]
      recordConnectionDetails();                                       // Record outcome of connection attempt
   d5e92:	f7fe fdd7 	bl	d4a44 <_Z23recordConnectionDetailsv>
      Log.info("cloud connection unsuccessful");
   d5e96:	4977      	ldr	r1, [pc, #476]	; (d6074 <loop+0x5dc>)
   d5e98:	4869      	ldr	r0, [pc, #420]	; (d6040 <loop+0x5a8>)
   d5e9a:	f7fe faff 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
      disconnectFromParticle();                                        // Make sure the modem is turned off
   d5e9e:	f7ff fd95 	bl	d59cc <_Z22disconnectFromParticlev>
      if (sysStatus.solarPowerMode) setLowPowerMode("1");              // If we cannot connect, there is no point to stayng out of low power mode
   d5ea2:	7963      	ldrb	r3, [r4, #5]
   d5ea4:	b14b      	cbz	r3, d5eba <loop+0x422>
   d5ea6:	4974      	ldr	r1, [pc, #464]	; (d6078 <loop+0x5e0>)
   d5ea8:	a806      	add	r0, sp, #24
   d5eaa:	f005 fbe8 	bl	db67e <_ZN6StringC1EPKc>
   d5eae:	a806      	add	r0, sp, #24
   d5eb0:	f7fe ff98 	bl	d4de4 <_Z15setLowPowerMode6String>
   d5eb4:	a806      	add	r0, sp, #24
   d5eb6:	f005 fb97 	bl	db5e8 <_ZN6StringD1Ev>
      if ((Time.now() - sysStatus.lastConnection) > 3 * 3600L) {       // Only sends to ERROR_STATE if it has been over three hours - this ties to reporting and low battery state
   d5eba:	f005 ffb2 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d5ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5ec0:	1ac0      	subs	r0, r0, r3
   d5ec2:	f642 2330 	movw	r3, #10800	; 0x2a30
   d5ec6:	4298      	cmp	r0, r3
   d5ec8:	d9c0      	bls.n	d5e4c <loop+0x3b4>
        state = ERROR_STATE;     
   d5eca:	2301      	movs	r3, #1
   d5ecc:	702b      	strb	r3, [r5, #0]
   d5ece:	f002 fd35 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   d5ed2:	4b6a      	ldr	r3, [pc, #424]	; (d607c <loop+0x5e4>)
   d5ed4:	6018      	str	r0, [r3, #0]
        break;
   d5ed6:	e687      	b.n	d5be8 <loop+0x150>
    if (state != oldState) {
   d5ed8:	4b69      	ldr	r3, [pc, #420]	; (d6080 <loop+0x5e8>)
   d5eda:	4e6a      	ldr	r6, [pc, #424]	; (d6084 <loop+0x5ec>)
   d5edc:	781b      	ldrb	r3, [r3, #0]
   d5ede:	2b07      	cmp	r3, #7
   d5ee0:	d007      	beq.n	d5ef2 <loop+0x45a>
   d5ee2:	f002 fd2b 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();                                    // We are connected and we have published, head to the response wait state
   d5ee6:	4b68      	ldr	r3, [pc, #416]	; (d6088 <loop+0x5f0>)
   d5ee8:	6018      	str	r0, [r3, #0]
      dataInFlight = true;                                            // set the data inflight flag
   d5eea:	2301      	movs	r3, #1
   d5eec:	7033      	strb	r3, [r6, #0]
      publishStateTransition();
   d5eee:	f7ff f8eb 	bl	d50c8 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> on to the watering state
   d5ef2:	7833      	ldrb	r3, [r6, #0]
   d5ef4:	b933      	cbnz	r3, d5f04 <loop+0x46c>
      state = WATERING_STATE;                                         // Remember we only get to this state if connected 
   d5ef6:	2304      	movs	r3, #4
      state = ERROR_STATE;                                            // Response timed out
   d5ef8:	702b      	strb	r3, [r5, #0]
    currentCountsWriteNeeded = true;
   d5efa:	2301      	movs	r3, #1
   d5efc:	703b      	strb	r3, [r7, #0]
    systemStatusWriteNeeded = true;
   d5efe:	f888 3000 	strb.w	r3, [r8]
  } break;
   d5f02:	e671      	b.n	d5be8 <loop+0x150>
   d5f04:	f002 fd1a 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset - this will pre-empt watering
   d5f08:	4b5f      	ldr	r3, [pc, #380]	; (d6088 <loop+0x5f0>)
   d5f0a:	681b      	ldr	r3, [r3, #0]
   d5f0c:	1ac0      	subs	r0, r0, r3
   d5f0e:	f247 5330 	movw	r3, #30000	; 0x7530
   d5f12:	4298      	cmp	r0, r3
   d5f14:	d9f1      	bls.n	d5efa <loop+0x462>
   d5f16:	f002 fd11 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5f1a:	4b58      	ldr	r3, [pc, #352]	; (d607c <loop+0x5e4>)
   d5f1c:	6018      	str	r0, [r3, #0]
      current.alerts = 3;                                             // Raise the missed webhook flag
   d5f1e:	4b54      	ldr	r3, [pc, #336]	; (d6070 <loop+0x5d8>)
   d5f20:	2203      	movs	r2, #3
   d5f22:	611a      	str	r2, [r3, #16]
      state = ERROR_STATE;                                            // Response timed out
   d5f24:	2301      	movs	r3, #1
   d5f26:	e7e7      	b.n	d5ef8 <loop+0x460>
    if (state != oldState) publishStateTransition();
   d5f28:	4b55      	ldr	r3, [pc, #340]	; (d6080 <loop+0x5e8>)
   d5f2a:	781b      	ldrb	r3, [r3, #0]
   d5f2c:	2b04      	cmp	r3, #4
   d5f2e:	d001      	beq.n	d5f34 <loop+0x49c>
   d5f30:	f7ff f8ca 	bl	d50c8 <_Z22publishStateTransitionv>
    if (current.solenoidState) {
   d5f34:	4b4e      	ldr	r3, [pc, #312]	; (d6070 <loop+0x5d8>)
   d5f36:	689e      	ldr	r6, [r3, #8]
   d5f38:	b336      	cbz	r6, d5f88 <loop+0x4f0>
      Log.info("Watering");
   d5f3a:	4841      	ldr	r0, [pc, #260]	; (d6040 <loop+0x5a8>)
   d5f3c:	4953      	ldr	r1, [pc, #332]	; (d608c <loop+0x5f4>)
   d5f3e:	f7fe faad 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d5f42:	4b53      	ldr	r3, [pc, #332]	; (d6090 <loop+0x5f8>)
   d5f44:	6898      	ldr	r0, [r3, #8]
   d5f46:	b158      	cbz	r0, d5f60 <loop+0x4c8>
   d5f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
      wateringTimer.changePeriod(sysStatus.wateringDuration * 1000);
   d5f4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d5f4e:	2200      	movs	r2, #0
   d5f50:	e9cd 1200 	strd	r1, r2, [sp]
   d5f54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5f58:	434b      	muls	r3, r1
   d5f5a:	2103      	movs	r1, #3
   d5f5c:	f002 fc6e 	bl	d883c <os_timer_change>
      snprintf(data, sizeof(data), "{\"duration\":%i}",sysStatus.wateringDuration);
   d5f60:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d5f62:	4a4c      	ldr	r2, [pc, #304]	; (d6094 <loop+0x5fc>)
   d5f64:	2120      	movs	r1, #32
   d5f66:	a806      	add	r0, sp, #24
   d5f68:	f003 f87c 	bl	d9064 <snprintf>
      Particle.publish("Rachio-WaterGarden", data, PRIVATE);
   d5f6c:	2300      	movs	r3, #0
   d5f6e:	f88d 3000 	strb.w	r3, [sp]
   d5f72:	4b49      	ldr	r3, [pc, #292]	; (d6098 <loop+0x600>)
   d5f74:	4949      	ldr	r1, [pc, #292]	; (d609c <loop+0x604>)
   d5f76:	781b      	ldrb	r3, [r3, #0]
   d5f78:	a803      	add	r0, sp, #12
   d5f7a:	aa06      	add	r2, sp, #24
   d5f7c:	f7fe f96c 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5f80:	a804      	add	r0, sp, #16
   d5f82:	f7fe fd49 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    state = IDLE_STATE;
   d5f86:	e761      	b.n	d5e4c <loop+0x3b4>
      Log.info("No watering needed at this time");
   d5f88:	4945      	ldr	r1, [pc, #276]	; (d60a0 <loop+0x608>)
   d5f8a:	482d      	ldr	r0, [pc, #180]	; (d6040 <loop+0x5a8>)
   d5f8c:	f7fe fa86 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
      if (sysStatus.wateringThresholdPct > 0) Particle.publish("Watering","No watering needed at this time",PRIVATE);
   d5f90:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
   d5f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d5f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5f9c:	f77f af56 	ble.w	d5e4c <loop+0x3b4>
   d5fa0:	4b3d      	ldr	r3, [pc, #244]	; (d6098 <loop+0x600>)
   d5fa2:	f88d 6000 	strb.w	r6, [sp]
   d5fa6:	a806      	add	r0, sp, #24
   d5fa8:	781b      	ldrb	r3, [r3, #0]
   d5faa:	4a3d      	ldr	r2, [pc, #244]	; (d60a0 <loop+0x608>)
   d5fac:	4937      	ldr	r1, [pc, #220]	; (d608c <loop+0x5f4>)
   d5fae:	f7fe f953 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d5fb2:	a807      	add	r0, sp, #28
   d5fb4:	e7e5      	b.n	d5f82 <loop+0x4ea>
    if (state != oldState) publishStateTransition();
   d5fb6:	4b32      	ldr	r3, [pc, #200]	; (d6080 <loop+0x5e8>)
   d5fb8:	781b      	ldrb	r3, [r3, #0]
   d5fba:	2b01      	cmp	r3, #1
   d5fbc:	d001      	beq.n	d5fc2 <loop+0x52a>
   d5fbe:	f7ff f883 	bl	d50c8 <_Z22publishStateTransitionv>
   d5fc2:	f002 fcbb 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5fc6:	4b2d      	ldr	r3, [pc, #180]	; (d607c <loop+0x5e4>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5fce:	3330      	adds	r3, #48	; 0x30
   d5fd0:	4283      	cmp	r3, r0
   d5fd2:	f4bf ae09 	bcs.w	d5be8 <loop+0x150>
      if ((Time.now() - sysStatus.lastConnection) > 7200L) {           // It is been over two hours since we last connected to the cloud - time for a reset
   d5fd6:	f005 ff24 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d5fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5fdc:	1ac0      	subs	r0, r0, r3
   d5fde:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5fe2:	d913      	bls.n	d600c <loop+0x574>
        sysStatus.lastConnection = Time.now();                         // Make sure we don't do this very often
   d5fe4:	f005 ff1d 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d5fe8:	6260      	str	r0, [r4, #36]	; 0x24
        disconnectFromParticle();                                      // Make sure cellular modem is off
   d5fea:	f7ff fcef 	bl	d59cc <_Z22disconnectFromParticlev>
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d5fee:	4a2d      	ldr	r2, [pc, #180]	; (d60a4 <loop+0x60c>)
   d5ff0:	482d      	ldr	r0, [pc, #180]	; (d60a8 <loop+0x610>)
   d5ff2:	2101      	movs	r1, #1
   d5ff4:	f7ff f915 	bl	d5222 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        Log.error("failed to connect to cloud, doing deep reset");
   d5ff8:	4811      	ldr	r0, [pc, #68]	; (d6040 <loop+0x5a8>)
   d5ffa:	492c      	ldr	r1, [pc, #176]	; (d60ac <loop+0x614>)
   d5ffc:	f7fe fa65 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
        delay(100);
   d6000:	2064      	movs	r0, #100	; 0x64
        delay(2000);
   d6002:	f003 f88b 	bl	d911c <delay>
        System.reset();
   d6006:	f005 fcc1 	bl	db98c <_ZN11SystemClass5resetEv>
   d600a:	e5ed      	b.n	d5be8 <loop+0x150>
      else if (sysStatus.resetCount <= 3) {                            // First try simple reset
   d600c:	6922      	ldr	r2, [r4, #16]
   d600e:	78e3      	ldrb	r3, [r4, #3]
   d6010:	2a03      	cmp	r2, #3
   d6012:	dc53      	bgt.n	d60bc <loop+0x624>
        if (sysStatus.connectedStatus) {
   d6014:	b17b      	cbz	r3, d6036 <loop+0x59e>
   d6016:	f7fe f8e6 	bl	d41e6 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d601a:	4b25      	ldr	r3, [pc, #148]	; (d60b0 <loop+0x618>)
          Particle.publish("State","Error State - System Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d601c:	4a25      	ldr	r2, [pc, #148]	; (d60b4 <loop+0x61c>)
   d601e:	781b      	ldrb	r3, [r3, #0]
   d6020:	f88d 3000 	strb.w	r3, [sp]
   d6024:	4b1c      	ldr	r3, [pc, #112]	; (d6098 <loop+0x600>)
   d6026:	4924      	ldr	r1, [pc, #144]	; (d60b8 <loop+0x620>)
   d6028:	781b      	ldrb	r3, [r3, #0]
   d602a:	a806      	add	r0, sp, #24
   d602c:	f7fe f914 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d6030:	a807      	add	r0, sp, #28
   d6032:	f7fe fcf1 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d6036:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d603a:	e7e2      	b.n	d6002 <loop+0x56a>
   d603c:	000df638 	.word	0x000df638
   d6040:	2003e538 	.word	0x2003e538
   d6044:	2003e3d0 	.word	0x2003e3d0
   d6048:	000493e0 	.word	0x000493e0
   d604c:	2003e3d4 	.word	0x2003e3d4
   d6050:	2003e2e4 	.word	0x2003e2e4
   d6054:	2003e464 	.word	0x2003e464
   d6058:	000df6e8 	.word	0x000df6e8
   d605c:	000d4115 	.word	0x000d4115
   d6060:	2003e2de 	.word	0x2003e2de
   d6064:	000df6b6 	.word	0x000df6b6
   d6068:	000df685 	.word	0x000df685
   d606c:	2003dfcc 	.word	0x2003dfcc
   d6070:	2003e340 	.word	0x2003e340
   d6074:	000df704 	.word	0x000df704
   d6078:	000df200 	.word	0x000df200
   d607c:	2003e3c8 	.word	0x2003e3c8
   d6080:	2003e3c4 	.word	0x2003e3c4
   d6084:	2003e36f 	.word	0x2003e36f
   d6088:	2003e2e0 	.word	0x2003e2e0
   d608c:	000df722 	.word	0x000df722
   d6090:	2003e428 	.word	0x2003e428
   d6094:	000df72b 	.word	0x000df72b
   d6098:	2003e2dc 	.word	0x2003e2dc
   d609c:	000df73b 	.word	0x000df73b
   d60a0:	000df74e 	.word	0x000df74e
   d60a4:	2003e3d8 	.word	0x2003e3d8
   d60a8:	2003e374 	.word	0x2003e374
   d60ac:	000df76e 	.word	0x000df76e
   d60b0:	2003e2dd 	.word	0x2003e2dd
   d60b4:	000df79b 	.word	0x000df79b
   d60b8:	000df7b6 	.word	0x000df7b6
        if (sysStatus.connectedStatus) {
   d60bc:	b17b      	cbz	r3, d60de <loop+0x646>
   d60be:	f7fe f892 	bl	d41e6 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d60c2:	4b31      	ldr	r3, [pc, #196]	; (d6188 <loop+0x6f0>)
          Particle.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcast Reset Action
   d60c4:	4a31      	ldr	r2, [pc, #196]	; (d618c <loop+0x6f4>)
   d60c6:	781b      	ldrb	r3, [r3, #0]
   d60c8:	f88d 3000 	strb.w	r3, [sp]
   d60cc:	4b30      	ldr	r3, [pc, #192]	; (d6190 <loop+0x6f8>)
   d60ce:	4931      	ldr	r1, [pc, #196]	; (d6194 <loop+0x6fc>)
   d60d0:	781b      	ldrb	r3, [r3, #0]
   d60d2:	a806      	add	r0, sp, #24
   d60d4:	f7fe f8c0 	bl	d4258 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   d60d8:	a807      	add	r0, sp, #28
   d60da:	f7fe fc9d 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);  
   d60de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d60e2:	f003 f81b 	bl	d911c <delay>
        disconnectFromParticle();                                      // Make sure we shut down connections gracefully
   d60e6:	f7ff fc71 	bl	d59cc <_Z22disconnectFromParticlev>
        sysStatus.resetCount = 0;                                      // Zero the ResetCount
   d60ea:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);                    // Won't get back to the main loop
   d60ec:	4a2a      	ldr	r2, [pc, #168]	; (d6198 <loop+0x700>)
   d60ee:	482b      	ldr	r0, [pc, #172]	; (d619c <loop+0x704>)
        sysStatus.resetCount = 0;                                      // Zero the ResetCount
   d60f0:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);                    // Won't get back to the main loop
   d60f2:	2101      	movs	r1, #1
   d60f4:	f7ff f895 	bl	d5222 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        delay (100);
   d60f8:	2064      	movs	r0, #100	; 0x64
   d60fa:	f003 f80f 	bl	d911c <delay>
        ab1805.deepPowerDown();                                        // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d60fe:	211e      	movs	r1, #30
   d6100:	4827      	ldr	r0, [pc, #156]	; (d61a0 <loop+0x708>)
   d6102:	f000 fc51 	bl	d69a8 <_ZN6AB180513deepPowerDownEi>
   d6106:	e56f      	b.n	d5be8 <loop+0x150>
      if (state != oldState) {
   d6108:	4b26      	ldr	r3, [pc, #152]	; (d61a4 <loop+0x70c>)
   d610a:	781b      	ldrb	r3, [r3, #0]
   d610c:	2b0a      	cmp	r3, #10
   d610e:	d009      	beq.n	d6124 <loop+0x68c>
   d6110:	f002 fc14 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();                                          // When did we start the firmware update?
   d6114:	4b24      	ldr	r3, [pc, #144]	; (d61a8 <loop+0x710>)
        Log.info("In the firmware update state");
   d6116:	4925      	ldr	r1, [pc, #148]	; (d61ac <loop+0x714>)
        stateTime = millis();                                          // When did we start the firmware update?
   d6118:	6018      	str	r0, [r3, #0]
        Log.info("In the firmware update state");
   d611a:	4825      	ldr	r0, [pc, #148]	; (d61b0 <loop+0x718>)
   d611c:	f7fe f9be 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
        publishStateTransition();
   d6120:	f7fe ffd2 	bl	d50c8 <_Z22publishStateTransitionv>
      if (!firmwareUpdateInProgress) {                                 // Done with the update 
   d6124:	4b23      	ldr	r3, [pc, #140]	; (d61b4 <loop+0x71c>)
   d6126:	781b      	ldrb	r3, [r3, #0]
   d6128:	b90b      	cbnz	r3, d612e <loop+0x696>
          Log.info("firmware update completed");
   d612a:	4923      	ldr	r1, [pc, #140]	; (d61b8 <loop+0x720>)
   d612c:	e605      	b.n	d5d3a <loop+0x2a2>
   d612e:	f002 fc05 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
      if (millis() - stateTime >= firmwareUpdateMaxTime.count()) {     // Ran out of time
   d6132:	4b1d      	ldr	r3, [pc, #116]	; (d61a8 <loop+0x710>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	1ac0      	subs	r0, r0, r3
   d6138:	4b20      	ldr	r3, [pc, #128]	; (d61bc <loop+0x724>)
   d613a:	4298      	cmp	r0, r3
   d613c:	f67f ad54 	bls.w	d5be8 <loop+0x150>
          current.alerts = 5;                                          // Record alert for timeout
   d6140:	4e1f      	ldr	r6, [pc, #124]	; (d61c0 <loop+0x728>)
          Log.info("firmware update timed out");
   d6142:	4920      	ldr	r1, [pc, #128]	; (d61c4 <loop+0x72c>)
   d6144:	481a      	ldr	r0, [pc, #104]	; (d61b0 <loop+0x718>)
          current.alerts = 5;                                          // Record alert for timeout
   d6146:	f04f 0905 	mov.w	r9, #5
          Log.info("firmware update timed out");
   d614a:	f7fe f9a7 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
          current.alerts = 5;                                          // Record alert for timeout
   d614e:	f8c6 9010 	str.w	r9, [r6, #16]
          snprintf(data, sizeof(data), "{\"alerts\":%i,\"timestamp\":%lu000 }",current.alerts, Time.now());
   d6152:	f005 fe66 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d6156:	4a1c      	ldr	r2, [pc, #112]	; (d61c8 <loop+0x730>)
   d6158:	9000      	str	r0, [sp, #0]
   d615a:	464b      	mov	r3, r9
   d615c:	2140      	movs	r1, #64	; 0x40
   d615e:	a806      	add	r0, sp, #24
   d6160:	f002 ff80 	bl	d9064 <snprintf>
          PublishQueuePosix::instance().publish("Ubidots_Alert_Hook", data, PRIVATE);
   d6164:	f001 fb98 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
        val_(0) {
   d6168:	2300      	movs	r3, #0
   d616a:	f88d 3000 	strb.w	r3, [sp]
   d616e:	4b08      	ldr	r3, [pc, #32]	; (d6190 <loop+0x6f8>)
   d6170:	4916      	ldr	r1, [pc, #88]	; (d61cc <loop+0x734>)
   d6172:	781b      	ldrb	r3, [r3, #0]
   d6174:	aa06      	add	r2, sp, #24
   d6176:	f7fe f9bf 	bl	d44f8 <_ZN17PublishQueuePosix7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
          current.updateAttempts++;                                    // Increment the update attempt counter
   d617a:	f896 3020 	ldrb.w	r3, [r6, #32]
   d617e:	3301      	adds	r3, #1
   d6180:	f886 3020 	strb.w	r3, [r6, #32]
   d6184:	e662      	b.n	d5e4c <loop+0x3b4>
   d6186:	bf00      	nop
   d6188:	2003e2dd 	.word	0x2003e2dd
   d618c:	000df7bc 	.word	0x000df7bc
   d6190:	2003e2dc 	.word	0x2003e2dc
   d6194:	000df7b6 	.word	0x000df7b6
   d6198:	2003e3d8 	.word	0x2003e3d8
   d619c:	2003e374 	.word	0x2003e374
   d61a0:	2003e2ec 	.word	0x2003e2ec
   d61a4:	2003e3c4 	.word	0x2003e3c4
   d61a8:	2003e2e8 	.word	0x2003e2e8
   d61ac:	000df7db 	.word	0x000df7db
   d61b0:	2003e538 	.word	0x2003e538
   d61b4:	2003e370 	.word	0x2003e370
   d61b8:	000df7f8 	.word	0x000df7f8
   d61bc:	000927bf 	.word	0x000927bf
   d61c0:	2003e340 	.word	0x2003e340
   d61c4:	000df812 	.word	0x000df812
   d61c8:	000df235 	.word	0x000df235
   d61cc:	000df257 	.word	0x000df257

000d61d0 <_Z20meterParticlePublishv>:
 * @details Forces a wait so we don't get rate limited
 * 
 * @returns Returns true if it has been more than a second since last publish
 * 
 */
bool meterParticlePublish() {
   d61d0:	b508      	push	{r3, lr}
   d61d2:	f002 fbb3 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastPublish = 0;  
  
  if (millis() - lastPublish >= 1000) return 1;
  
  return 0;
   d61d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d61da:	bf34      	ite	cc
   d61dc:	2000      	movcc	r0, #0
   d61de:	2001      	movcs	r0, #1
   d61e0:	bd08      	pop	{r3, pc}

000d61e2 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d61e2:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d61e4:	2000      	movs	r0, #0
   d61e6:	f002 fe8d 	bl	d8f04 <spark_sync_time_pending>
   d61ea:	b128      	cbz	r0, d61f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d61ec:	f002 fe62 	bl	d8eb4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d61f0:	f080 0001 	eor.w	r0, r0, #1
   d61f4:	b2c0      	uxtb	r0, r0
    }
   d61f6:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d61f8:	2001      	movs	r0, #1
   d61fa:	e7fc      	b.n	d61f6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d61fc <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d61fc:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d61fe:	f005 fe2d 	bl	dbe5c <_ZN9TimeClass3dayEv>
   d6202:	4605      	mov	r5, r0
  int month = Time.month();
   d6204:	f005 fe3e 	bl	dbe84 <_ZN9TimeClass5monthEv>
   d6208:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d620a:	f005 fe33 	bl	dbe74 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d620e:	1f23      	subs	r3, r4, #4
   d6210:	2b06      	cmp	r3, #6
   d6212:	d90e      	bls.n	d6232 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d6214:	1ee3      	subs	r3, r4, #3
   d6216:	2b08      	cmp	r3, #8
   d6218:	d80d      	bhi.n	d6236 <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d621a:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d621c:	1a2d      	subs	r5, r5, r0
   d621e:	d504      	bpl.n	d622a <_Z8isDSTusav+0x2e>
   d6220:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6222:	bf14      	ite	ne
   d6224:	2000      	movne	r0, #0
   d6226:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d6228:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d622a:	2d07      	cmp	r5, #7
   d622c:	dd03      	ble.n	d6236 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d622e:	2c03      	cmp	r4, #3
   d6230:	e7f7      	b.n	d6222 <_Z8isDSTusav+0x26>
    return true;
   d6232:	2001      	movs	r0, #1
   d6234:	e7f8      	b.n	d6228 <_Z8isDSTusav+0x2c>
    return false;
   d6236:	2000      	movs	r0, #0
   d6238:	e7f6      	b.n	d6228 <_Z8isDSTusav+0x2c>
   d623a:	0000      	movs	r0, r0
   d623c:	0000      	movs	r0, r0
	...

000d6240 <_Z11setTimeZone6String>:
{
   d6240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6244:	b0ca      	sub	sp, #296	; 0x128
   d6246:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6248:	f002 fe34 	bl	d8eb4 <spark_cloud_flag_connected>
        if (!connected()) {
   d624c:	b110      	cbz	r0, d6254 <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d624e:	2000      	movs	r0, #0
   d6250:	f002 fe50 	bl	d8ef4 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d6254:	2000      	movs	r0, #0
   d6256:	f002 fb81 	bl	d895c <hal_timer_millis>
   d625a:	f04f 0a00 	mov.w	sl, #0
   d625e:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d6260:	f247 562f 	movw	r6, #29999	; 0x752f
   d6264:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d6266:	2000      	movs	r0, #0
   d6268:	f002 fb78 	bl	d895c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d626c:	ebb0 0409 	subs.w	r4, r0, r9
   d6270:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d6274:	42af      	cmp	r7, r5
   d6276:	bf08      	it	eq
   d6278:	42a6      	cmpeq	r6, r4
   d627a:	d305      	bcc.n	d6288 <_Z11setTimeZone6String+0x48>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d627c:	f7ff ffb1 	bl	d61e2 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d6280:	b910      	cbnz	r0, d6288 <_Z11setTimeZone6String+0x48>
            spark_process();
   d6282:	f002 fe07 	bl	d8e94 <spark_process>
        while (_while() && !_condition()) {
   d6286:	e7ee      	b.n	d6266 <_Z11setTimeZone6String+0x26>
   d6288:	f7ff ffab 	bl	d61e2 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d628c:	f8d8 0000 	ldr.w	r0, [r8]
   d6290:	220a      	movs	r2, #10
   d6292:	a903      	add	r1, sp, #12
   d6294:	f007 fe62 	bl	ddf5c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d6298:	f100 030c 	add.w	r3, r0, #12
   d629c:	b2db      	uxtb	r3, r3
   d629e:	2b18      	cmp	r3, #24
   d62a0:	d859      	bhi.n	d6356 <_Z11setTimeZone6String+0x116>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d62a2:	b244      	sxtb	r4, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d62a4:	ee07 4a90 	vmov	s15, r4
   d62a8:	4f2f      	ldr	r7, [pc, #188]	; (d6368 <_Z11setTimeZone6String+0x128>)
   d62aa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d62ae:	2501      	movs	r5, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d62b0:	ed87 0a05 	vstr	s0, [r7, #20]
  Time.zone(sysStatus.timezone);
   d62b4:	f005 fc4c 	bl	dbb50 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d62b8:	4b2c      	ldr	r3, [pc, #176]	; (d636c <_Z11setTimeZone6String+0x12c>)
   d62ba:	701d      	strb	r5, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d62bc:	f005 fdea 	bl	dbe94 <_ZN9TimeClass5localEv>
   d62c0:	4606      	mov	r6, r0
   d62c2:	f005 fdae 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d62c6:	1a30      	subs	r0, r6, r0
   d62c8:	f006 fa2a 	bl	dc720 <__aeabi_i2d>
   d62cc:	a324      	add	r3, pc, #144	; (adr r3, d6360 <_Z11setTimeZone6String+0x120>)
   d62ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d62d2:	f006 fbb9 	bl	dca48 <__aeabi_ddiv>
   d62d6:	4a26      	ldr	r2, [pc, #152]	; (d6370 <_Z11setTimeZone6String+0x130>)
   d62d8:	e9cd 0100 	strd	r0, r1, [sp]
   d62dc:	4825      	ldr	r0, [pc, #148]	; (d6374 <_Z11setTimeZone6String+0x134>)
   d62de:	210a      	movs	r1, #10
   d62e0:	f002 fec0 	bl	d9064 <snprintf>
  if (sysStatus.connectedStatus) {
   d62e4:	78fb      	ldrb	r3, [r7, #3]
   d62e6:	2b00      	cmp	r3, #0
   d62e8:	d037      	beq.n	d635a <_Z11setTimeZone6String+0x11a>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d62ea:	4623      	mov	r3, r4
   d62ec:	4c22      	ldr	r4, [pc, #136]	; (d6378 <_Z11setTimeZone6String+0x138>)
   d62ee:	4a23      	ldr	r2, [pc, #140]	; (d637c <_Z11setTimeZone6String+0x13c>)
   d62f0:	f44f 7180 	mov.w	r1, #256	; 0x100
   d62f4:	a80a      	add	r0, sp, #40	; 0x28
   d62f6:	f002 feb5 	bl	d9064 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d62fa:	7823      	ldrb	r3, [r4, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d62fc:	f88d 3000 	strb.w	r3, [sp]
   d6300:	a806      	add	r0, sp, #24
   d6302:	491f      	ldr	r1, [pc, #124]	; (d6380 <_Z11setTimeZone6String+0x140>)
   d6304:	233c      	movs	r3, #60	; 0x3c
   d6306:	aa0a      	add	r2, sp, #40	; 0x28
   d6308:	f003 f9e2 	bl	d96d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d630c:	a807      	add	r0, sp, #28
   d630e:	f7fe fb83 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    waitUntil(meterParticlePublish);
   d6312:	f7ff ff5d 	bl	d61d0 <_Z20meterParticlePublishv>
   d6316:	b910      	cbnz	r0, d631e <_Z11setTimeZone6String+0xde>
            spark_process();
   d6318:	f002 fdbc 	bl	d8e94 <spark_process>
        while (_while() && !_condition()) {
   d631c:	e7f9      	b.n	d6312 <_Z11setTimeZone6String+0xd2>
   d631e:	f7ff ff57 	bl	d61d0 <_Z20meterParticlePublishv>
    Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d6322:	f005 fd7e 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d6326:	4602      	mov	r2, r0
   d6328:	17c3      	asrs	r3, r0, #31
   d632a:	a806      	add	r0, sp, #24
   d632c:	f005 fc76 	bl	dbc1c <_ZN9TimeClass7timeStrEx>
   d6330:	7823      	ldrb	r3, [r4, #0]
   d6332:	9a06      	ldr	r2, [sp, #24]
   d6334:	4912      	ldr	r1, [pc, #72]	; (d6380 <_Z11setTimeZone6String+0x140>)
   d6336:	f88d 3000 	strb.w	r3, [sp]
   d633a:	a804      	add	r0, sp, #16
   d633c:	233c      	movs	r3, #60	; 0x3c
   d633e:	f003 f9c7 	bl	d96d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d6342:	a805      	add	r0, sp, #20
   d6344:	f7fe fb68 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6348:	a806      	add	r0, sp, #24
   d634a:	f005 f94d 	bl	db5e8 <_ZN6StringD1Ev>
  return 1;
   d634e:	2001      	movs	r0, #1
}
   d6350:	b04a      	add	sp, #296	; 0x128
   d6352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d6356:	2000      	movs	r0, #0
   d6358:	e7fa      	b.n	d6350 <_Z11setTimeZone6String+0x110>
  return 1;
   d635a:	4628      	mov	r0, r5
   d635c:	e7f8      	b.n	d6350 <_Z11setTimeZone6String+0x110>
   d635e:	bf00      	nop
   d6360:	00000000 	.word	0x00000000
   d6364:	40ac2000 	.word	0x40ac2000
   d6368:	2003e3d8 	.word	0x2003e3d8
   d636c:	2003e40c 	.word	0x2003e40c
   d6370:	000df5f4 	.word	0x000df5f4
   d6374:	2003e365 	.word	0x2003e365
   d6378:	2003e444 	.word	0x2003e444
   d637c:	000df91c 	.word	0x000df91c
   d6380:	000df525 	.word	0x000df525
   d6384:	00000000 	.word	0x00000000

000d6388 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d6388:	b530      	push	{r4, r5, lr}
   d638a:	ed2d 8b02 	vpush	{d8}
   d638e:	b0cb      	sub	sp, #300	; 0x12c
   d6390:	4604      	mov	r4, r0
  time_t t = Time.now();
   d6392:	f005 fd46 	bl	dbe22 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d6396:	220a      	movs	r2, #10
  time_t t = Time.now();
   d6398:	4605      	mov	r5, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d639a:	a903      	add	r1, sp, #12
   d639c:	6820      	ldr	r0, [r4, #0]
   d639e:	f007 fddd 	bl	ddf5c <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d63a2:	b2c3      	uxtb	r3, r0
   d63a4:	2b02      	cmp	r3, #2
   d63a6:	d867      	bhi.n	d6478 <_Z12setDSTOffset6String+0xf0>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d63a8:	b243      	sxtb	r3, r0
   d63aa:	ee08 3a10 	vmov	s16, r3
   d63ae:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d63b2:	eeb0 0a48 	vmov.f32	s0, s16
   d63b6:	f005 fbeb 	bl	dbb90 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d63ba:	4b35      	ldr	r3, [pc, #212]	; (d6490 <_Z12setDSTOffset6String+0x108>)
   d63bc:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d63c0:	4b34      	ldr	r3, [pc, #208]	; (d6494 <_Z12setDSTOffset6String+0x10c>)
   d63c2:	2201      	movs	r2, #1
   d63c4:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d63c6:	ee18 0a10 	vmov	r0, s16
   d63ca:	f006 f9bb 	bl	dc744 <__aeabi_f2d>
   d63ce:	4a32      	ldr	r2, [pc, #200]	; (d6498 <_Z12setDSTOffset6String+0x110>)
   d63d0:	e9cd 0100 	strd	r0, r1, [sp]
   d63d4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d63d8:	a80a      	add	r0, sp, #40	; 0x28
   d63da:	f002 fe43 	bl	d9064 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d63de:	f005 fd03 	bl	dbde8 <_ZN9TimeClass7isValidEv>
   d63e2:	b120      	cbz	r0, d63ee <_Z12setDSTOffset6String+0x66>
   d63e4:	f7ff ff0a 	bl	d61fc <_Z8isDSTusav>
   d63e8:	b358      	cbz	r0, d6442 <_Z12setDSTOffset6String+0xba>
   d63ea:	f005 fbef 	bl	dbbcc <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d63ee:	f005 fd51 	bl	dbe94 <_ZN9TimeClass5localEv>
   d63f2:	4604      	mov	r4, r0
   d63f4:	f005 fd15 	bl	dbe22 <_ZN9TimeClass3nowEv>
   d63f8:	1a20      	subs	r0, r4, r0
   d63fa:	f006 f991 	bl	dc720 <__aeabi_i2d>
   d63fe:	a322      	add	r3, pc, #136	; (adr r3, d6488 <_Z12setDSTOffset6String+0x100>)
   d6400:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6404:	f006 fb20 	bl	dca48 <__aeabi_ddiv>
   d6408:	4a24      	ldr	r2, [pc, #144]	; (d649c <_Z12setDSTOffset6String+0x114>)
   d640a:	e9cd 0100 	strd	r0, r1, [sp]
   d640e:	210a      	movs	r1, #10
   d6410:	4823      	ldr	r0, [pc, #140]	; (d64a0 <_Z12setDSTOffset6String+0x118>)
   d6412:	f002 fe27 	bl	d9064 <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6416:	f002 fd4d 	bl	d8eb4 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d641a:	b358      	cbz	r0, d6474 <_Z12setDSTOffset6String+0xec>
   d641c:	4c21      	ldr	r4, [pc, #132]	; (d64a4 <_Z12setDSTOffset6String+0x11c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d641e:	4922      	ldr	r1, [pc, #136]	; (d64a8 <_Z12setDSTOffset6String+0x120>)
   d6420:	7823      	ldrb	r3, [r4, #0]
   d6422:	f88d 3000 	strb.w	r3, [sp]
   d6426:	a806      	add	r0, sp, #24
   d6428:	233c      	movs	r3, #60	; 0x3c
   d642a:	aa0a      	add	r2, sp, #40	; 0x28
   d642c:	f003 f950 	bl	d96d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d6430:	a807      	add	r0, sp, #28
   d6432:	f7fe faf1 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    waitUntil(meterParticlePublish);
   d6436:	f7ff fecb 	bl	d61d0 <_Z20meterParticlePublishv>
   d643a:	b928      	cbnz	r0, d6448 <_Z12setDSTOffset6String+0xc0>
            spark_process();
   d643c:	f002 fd2a 	bl	d8e94 <spark_process>
        while (_while() && !_condition()) {
   d6440:	e7f9      	b.n	d6436 <_Z12setDSTOffset6String+0xae>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d6442:	f005 fbcf 	bl	dbbe4 <_ZN9TimeClass6endDSTEv>
   d6446:	e7d2      	b.n	d63ee <_Z12setDSTOffset6String+0x66>
    waitUntil(meterParticlePublish);
   d6448:	f7ff fec2 	bl	d61d0 <_Z20meterParticlePublishv>
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
   d644c:	462a      	mov	r2, r5
   d644e:	17eb      	asrs	r3, r5, #31
   d6450:	a806      	add	r0, sp, #24
   d6452:	f005 fbe3 	bl	dbc1c <_ZN9TimeClass7timeStrEx>
   d6456:	7823      	ldrb	r3, [r4, #0]
   d6458:	9a06      	ldr	r2, [sp, #24]
   d645a:	4913      	ldr	r1, [pc, #76]	; (d64a8 <_Z12setDSTOffset6String+0x120>)
   d645c:	f88d 3000 	strb.w	r3, [sp]
   d6460:	a804      	add	r0, sp, #16
   d6462:	233c      	movs	r3, #60	; 0x3c
   d6464:	f003 f934 	bl	d96d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d6468:	a805      	add	r0, sp, #20
   d646a:	f7fe fad5 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d646e:	a806      	add	r0, sp, #24
   d6470:	f005 f8ba 	bl	db5e8 <_ZN6StringD1Ev>
  return 1;
   d6474:	2001      	movs	r0, #1
   d6476:	e000      	b.n	d647a <_Z12setDSTOffset6String+0xf2>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d6478:	2000      	movs	r0, #0
}
   d647a:	b04b      	add	sp, #300	; 0x12c
   d647c:	ecbd 8b02 	vpop	{d8}
   d6480:	bd30      	pop	{r4, r5, pc}
   d6482:	bf00      	nop
   d6484:	f3af 8000 	nop.w
   d6488:	00000000 	.word	0x00000000
   d648c:	40ac2000 	.word	0x40ac2000
   d6490:	2003e3d8 	.word	0x2003e3d8
   d6494:	2003e40c 	.word	0x2003e40c
   d6498:	000df930 	.word	0x000df930
   d649c:	000df5f4 	.word	0x000df5f4
   d64a0:	2003e365 	.word	0x2003e365
   d64a4:	2003e444 	.word	0x2003e444
   d64a8:	000df525 	.word	0x000df525

000d64ac <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d64ac:	4b01      	ldr	r3, [pc, #4]	; (d64b4 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d64ae:	2201      	movs	r2, #1
   d64b0:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d64b2:	4770      	bx	lr
   d64b4:	2003e444 	.word	0x2003e444

000d64b8 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d64b8:	4770      	bx	lr

000d64ba <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d64ba:	b510      	push	{r4, lr}
}
   d64bc:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d64be:	4604      	mov	r4, r0
}
   d64c0:	f005 ffcc 	bl	dc45c <_ZdlPvj>
   d64c4:	4620      	mov	r0, r4
   d64c6:	bd10      	pop	{r4, pc}

000d64c8 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d64c8:	b40e      	push	{r1, r2, r3}
   d64ca:	b510      	push	{r4, lr}
   d64cc:	b08d      	sub	sp, #52	; 0x34
   d64ce:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d64d0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d64d2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d64d6:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d64d8:	2300      	movs	r3, #0
   d64da:	2020      	movs	r0, #32
   d64dc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d64e0:	e9cd 4200 	strd	r4, r2, [sp]
   d64e4:	2001      	movs	r0, #1
   d64e6:	aa04      	add	r2, sp, #16
   d64e8:	f002 fc20 	bl	d8d2c <log_message_v>
}
   d64ec:	b00d      	add	sp, #52	; 0x34
   d64ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d64f2:	b003      	add	sp, #12
   d64f4:	4770      	bx	lr
	...

000d64f8 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d64f8:	b510      	push	{r4, lr}
   d64fa:	7202      	strb	r2, [r0, #8]
   d64fc:	22ff      	movs	r2, #255	; 0xff
   d64fe:	8142      	strh	r2, [r0, #10]
   d6500:	2200      	movs	r2, #0
   d6502:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d6506:	6142      	str	r2, [r0, #20]
   d6508:	7602      	strb	r2, [r0, #24]
   d650a:	61c2      	str	r2, [r0, #28]
    instance = this;
   d650c:	4a02      	ldr	r2, [pc, #8]	; (d6518 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d650e:	4c03      	ldr	r4, [pc, #12]	; (d651c <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d6510:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6512:	e9c0 4100 	strd	r4, r1, [r0]
}
   d6516:	bd10      	pop	{r4, pc}
   d6518:	2003e44c 	.word	0x2003e44c
   d651c:	000dfb90 	.word	0x000dfb90

000d6520 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d6520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6524:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d6528:	4604      	mov	r4, r0
   d652a:	4689      	mov	r9, r1
   d652c:	4616      	mov	r6, r2
   d652e:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d6530:	f1b8 0f00 	cmp.w	r8, #0
   d6534:	d002      	beq.n	d653c <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d6536:	6840      	ldr	r0, [r0, #4]
   d6538:	f003 fbfa 	bl	d9d30 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d653c:	7a21      	ldrb	r1, [r4, #8]
   d653e:	6860      	ldr	r0, [r4, #4]
   d6540:	f003 fbd3 	bl	d9cea <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6544:	6860      	ldr	r0, [r4, #4]
   d6546:	6803      	ldr	r3, [r0, #0]
   d6548:	4649      	mov	r1, r9
   d654a:	689b      	ldr	r3, [r3, #8]
   d654c:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d654e:	6860      	ldr	r0, [r4, #4]
   d6550:	2100      	movs	r1, #0
   d6552:	f003 fbe9 	bl	d9d28 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6556:	4605      	mov	r5, r0
   d6558:	bb00      	cbnz	r0, d659c <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d655a:	2301      	movs	r3, #1
   d655c:	7a21      	ldrb	r1, [r4, #8]
   d655e:	6860      	ldr	r0, [r4, #4]
   d6560:	463a      	mov	r2, r7
   d6562:	f003 fbb0 	bl	d9cc6 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d6566:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6568:	4603      	mov	r3, r0
        if (count == num) {
   d656a:	d109      	bne.n	d6580 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d656c:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d656e:	42be      	cmp	r6, r7
   d6570:	d01c      	beq.n	d65ac <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d6572:	6860      	ldr	r0, [r4, #4]
   d6574:	6803      	ldr	r3, [r0, #0]
   d6576:	695b      	ldr	r3, [r3, #20]
   d6578:	4798      	blx	r3
   d657a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d657e:	e7f6      	b.n	d656e <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d6580:	490b      	ldr	r1, [pc, #44]	; (d65b0 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d6582:	480c      	ldr	r0, [pc, #48]	; (d65b4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d6584:	464a      	mov	r2, r9
   d6586:	f7fd ffa0 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d658a:	f1b8 0f00 	cmp.w	r8, #0
   d658e:	d002      	beq.n	d6596 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d6590:	6860      	ldr	r0, [r4, #4]
   d6592:	f003 fbd6 	bl	d9d42 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d6596:	4628      	mov	r0, r5
   d6598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d659c:	4603      	mov	r3, r0
   d659e:	4906      	ldr	r1, [pc, #24]	; (d65b8 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d65a0:	4804      	ldr	r0, [pc, #16]	; (d65b4 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d65a2:	464a      	mov	r2, r9
   d65a4:	f7fd ff91 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d65a8:	2500      	movs	r5, #0
   d65aa:	e7ee      	b.n	d658a <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d65ac:	2501      	movs	r5, #1
   d65ae:	e7ec      	b.n	d658a <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d65b0:	000df941 	.word	0x000df941
   d65b4:	2003e448 	.word	0x2003e448
   d65b8:	000df966 	.word	0x000df966

000d65bc <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d65bc:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d65be:	9300      	str	r3, [sp, #0]
   d65c0:	2301      	movs	r3, #1
   d65c2:	f7ff ffad 	bl	d6520 <_ZN6AB180513readRegistersEhPhjb>
}
   d65c6:	b003      	add	sp, #12
   d65c8:	f85d fb04 	ldr.w	pc, [sp], #4

000d65cc <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d65cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d65ce:	8943      	ldrh	r3, [r0, #10]
   d65d0:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d65d2:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d65d4:	d010      	beq.n	d65f8 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d65d6:	4e19      	ldr	r6, [pc, #100]	; (d663c <_ZN6AB180510detectChipEv+0x70>)
   d65d8:	4d19      	ldr	r5, [pc, #100]	; (d6640 <_ZN6AB180510detectChipEv+0x74>)
   d65da:	f002 f9af 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d65de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d65e2:	d209      	bcs.n	d65f8 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d65e4:	8960      	ldrh	r0, [r4, #10]
   d65e6:	f005 fe95 	bl	dc314 <digitalRead>
   d65ea:	2801      	cmp	r0, #1
   d65ec:	d004      	beq.n	d65f8 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d65ee:	4631      	mov	r1, r6
   d65f0:	4628      	mov	r0, r5
   d65f2:	f7fd ff53 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
   d65f6:	e7f0      	b.n	d65da <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d65f8:	2301      	movs	r3, #1
   d65fa:	f10d 0207 	add.w	r2, sp, #7
   d65fe:	2128      	movs	r1, #40	; 0x28
   d6600:	4620      	mov	r0, r4
   d6602:	f7ff ffdb 	bl	d65bc <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d6606:	b930      	cbnz	r0, d6616 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d6608:	480d      	ldr	r0, [pc, #52]	; (d6640 <_ZN6AB180510detectChipEv+0x74>)
   d660a:	490e      	ldr	r1, [pc, #56]	; (d6644 <_ZN6AB180510detectChipEv+0x78>)
   d660c:	f7fd ff46 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
   d6610:	2000      	movs	r0, #0
}
   d6612:	b002      	add	sp, #8
   d6614:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d6616:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d661a:	2b18      	cmp	r3, #24
   d661c:	d1f4      	bne.n	d6608 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d661e:	2301      	movs	r3, #1
   d6620:	f10d 0207 	add.w	r2, sp, #7
   d6624:	2129      	movs	r1, #41	; 0x29
   d6626:	4620      	mov	r0, r4
   d6628:	f7ff ffc8 	bl	d65bc <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d662c:	2800      	cmp	r0, #0
   d662e:	d0eb      	beq.n	d6608 <_ZN6AB180510detectChipEv+0x3c>
   d6630:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6634:	2b05      	cmp	r3, #5
   d6636:	d1e7      	bne.n	d6608 <_ZN6AB180510detectChipEv+0x3c>
   d6638:	e7eb      	b.n	d6612 <_ZN6AB180510detectChipEv+0x46>
   d663a:	bf00      	nop
   d663c:	000df98a 	.word	0x000df98a
   d6640:	2003e448 	.word	0x2003e448
   d6644:	000df99f 	.word	0x000df99f

000d6648 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d6648:	b507      	push	{r0, r1, r2, lr}
   d664a:	4613      	mov	r3, r2
    uint8_t value = 0;
   d664c:	2200      	movs	r2, #0
   d664e:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d6652:	f10d 0207 	add.w	r2, sp, #7
   d6656:	f7ff ffb1 	bl	d65bc <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d665a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d665e:	b003      	add	sp, #12
   d6660:	f85d fb04 	ldr.w	pc, [sp], #4

000d6664 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d6664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6668:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d666c:	4604      	mov	r4, r0
   d666e:	460f      	mov	r7, r1
   d6670:	4615      	mov	r5, r2
   d6672:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d6674:	f1b8 0f00 	cmp.w	r8, #0
   d6678:	d002      	beq.n	d6680 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d667a:	6840      	ldr	r0, [r0, #4]
   d667c:	f003 fb58 	bl	d9d30 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6680:	7a21      	ldrb	r1, [r4, #8]
   d6682:	6860      	ldr	r0, [r4, #4]
   d6684:	f003 fb31 	bl	d9cea <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6688:	6860      	ldr	r0, [r4, #4]
   d668a:	6803      	ldr	r3, [r0, #0]
   d668c:	4639      	mov	r1, r7
   d668e:	689b      	ldr	r3, [r3, #8]
   d6690:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d6692:	442e      	add	r6, r5
   d6694:	42b5      	cmp	r5, r6
   d6696:	6860      	ldr	r0, [r4, #4]
   d6698:	d005      	beq.n	d66a6 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d669a:	6803      	ldr	r3, [r0, #0]
   d669c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d66a0:	689b      	ldr	r3, [r3, #8]
   d66a2:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d66a4:	e7f6      	b.n	d6694 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d66a6:	2101      	movs	r1, #1
   d66a8:	f003 fb3e 	bl	d9d28 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d66ac:	4603      	mov	r3, r0
   d66ae:	b170      	cbz	r0, d66ce <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d66b0:	4908      	ldr	r1, [pc, #32]	; (d66d4 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d66b2:	4809      	ldr	r0, [pc, #36]	; (d66d8 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d66b4:	463a      	mov	r2, r7
   d66b6:	f7fd ff08 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d66ba:	2500      	movs	r5, #0
    }

    if (lock) {
   d66bc:	f1b8 0f00 	cmp.w	r8, #0
   d66c0:	d002      	beq.n	d66c8 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d66c2:	6860      	ldr	r0, [r4, #4]
   d66c4:	f003 fb3d 	bl	d9d42 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d66c8:	4628      	mov	r0, r5
   d66ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d66ce:	2501      	movs	r5, #1
   d66d0:	e7f4      	b.n	d66bc <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d66d2:	bf00      	nop
   d66d4:	000df9ac 	.word	0x000df9ac
   d66d8:	2003e448 	.word	0x2003e448

000d66dc <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d66dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d66de:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d66e2:	9300      	str	r3, [sp, #0]
   d66e4:	f10d 020f 	add.w	r2, sp, #15
   d66e8:	2301      	movs	r3, #1
   d66ea:	f7ff ffbb 	bl	d6664 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d66ee:	b005      	add	sp, #20
   d66f0:	f85d fb04 	ldr.w	pc, [sp], #4

000d66f4 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d66f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d66f6:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d66f8:	460c      	mov	r4, r1
   d66fa:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d66fc:	491a      	ldr	r1, [pc, #104]	; (d6768 <_ZN6AB18056setWDTEi+0x74>)
   d66fe:	481b      	ldr	r0, [pc, #108]	; (d676c <_ZN6AB18056setWDTEi+0x78>)
   d6700:	f7fd fecc 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d6704:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d6706:	bfb8      	it	lt
   d6708:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d670a:	b97c      	cbnz	r4, d672c <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d670c:	2301      	movs	r3, #1
   d670e:	4622      	mov	r2, r4
   d6710:	211b      	movs	r1, #27
   d6712:	4628      	mov	r0, r5
   d6714:	f7ff ffe2 	bl	d66dc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6718:	4915      	ldr	r1, [pc, #84]	; (d6770 <_ZN6AB18056setWDTEi+0x7c>)
   d671a:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d671c:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d671e:	4813      	ldr	r0, [pc, #76]	; (d676c <_ZN6AB18056setWDTEi+0x78>)
   d6720:	f7ff fed2 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d6724:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d6726:	616c      	str	r4, [r5, #20]
}
   d6728:	4630      	mov	r0, r6
   d672a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d672c:	2c03      	cmp	r4, #3
   d672e:	dd19      	ble.n	d6764 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d6730:	10a7      	asrs	r7, r4, #2
   d6732:	2f1f      	cmp	r7, #31
   d6734:	bfa8      	it	ge
   d6736:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6738:	00ba      	lsls	r2, r7, #2
   d673a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d673e:	2301      	movs	r3, #1
   d6740:	b2d2      	uxtb	r2, r2
   d6742:	211b      	movs	r1, #27
   d6744:	4628      	mov	r0, r5
   d6746:	f7ff ffc9 	bl	d66dc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d674a:	463a      	mov	r2, r7
   d674c:	4603      	mov	r3, r0
   d674e:	4909      	ldr	r1, [pc, #36]	; (d6774 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6750:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d6752:	4806      	ldr	r0, [pc, #24]	; (d676c <_ZN6AB18056setWDTEi+0x78>)
   d6754:	f7ff feb8 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6758:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d675c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d675e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6760:	616f      	str	r7, [r5, #20]
   d6762:	e7e1      	b.n	d6728 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d6764:	2701      	movs	r7, #1
   d6766:	e7e7      	b.n	d6738 <_ZN6AB18056setWDTEi+0x44>
   d6768:	000df9d1 	.word	0x000df9d1
   d676c:	2003e448 	.word	0x2003e448
   d6770:	000df9db 	.word	0x000df9db
   d6774:	000df9f7 	.word	0x000df9f7

000d6778 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6778:	460b      	mov	r3, r1
    if (instance) {
   d677a:	4907      	ldr	r1, [pc, #28]	; (d6798 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d677c:	4602      	mov	r2, r0
    if (instance) {
   d677e:	6808      	ldr	r0, [r1, #0]
   d6780:	b148      	cbz	r0, d6796 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d6782:	2b00      	cmp	r3, #0
   d6784:	bf08      	it	eq
   d6786:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d678a:	d104      	bne.n	d6796 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d678c:	68c3      	ldr	r3, [r0, #12]
   d678e:	b113      	cbz	r3, d6796 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d6790:	2100      	movs	r1, #0
   d6792:	f7ff bfaf 	b.w	d66f4 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d6796:	4770      	bx	lr
   d6798:	2003e44c 	.word	0x2003e44c

000d679c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d679c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d67a0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d67a4:	4605      	mov	r5, r0
   d67a6:	4616      	mov	r6, r2
   d67a8:	461f      	mov	r7, r3
    if (lock) {
   d67aa:	f1b8 0f00 	cmp.w	r8, #0
   d67ae:	d004      	beq.n	d67ba <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d67b0:	6840      	ldr	r0, [r0, #4]
   d67b2:	9101      	str	r1, [sp, #4]
   d67b4:	f003 fabc 	bl	d9d30 <_ZN7TwoWire4lockEv>
   d67b8:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d67ba:	9101      	str	r1, [sp, #4]
   d67bc:	2300      	movs	r3, #0
   d67be:	f10d 020f 	add.w	r2, sp, #15
   d67c2:	4628      	mov	r0, r5
   d67c4:	f7ff fefa 	bl	d65bc <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d67c8:	4604      	mov	r4, r0
   d67ca:	b160      	cbz	r0, d67e6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d67cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d67d0:	ea03 0206 	and.w	r2, r3, r6
   d67d4:	433a      	orrs	r2, r7
        if (newValue != value) {
   d67d6:	4293      	cmp	r3, r2
   d67d8:	d005      	beq.n	d67e6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d67da:	9901      	ldr	r1, [sp, #4]
   d67dc:	2300      	movs	r3, #0
   d67de:	4628      	mov	r0, r5
   d67e0:	f7ff ff7c 	bl	d66dc <_ZN6AB180513writeRegisterEhhb>
   d67e4:	4604      	mov	r4, r0
    if (lock) {
   d67e6:	f1b8 0f00 	cmp.w	r8, #0
   d67ea:	d002      	beq.n	d67f2 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d67ec:	6868      	ldr	r0, [r5, #4]
   d67ee:	f003 faa8 	bl	d9d42 <_ZN7TwoWire6unlockEv>
}
   d67f2:	4620      	mov	r0, r4
   d67f4:	b004      	add	sp, #16
   d67f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d67fa <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d67fa:	b513      	push	{r0, r1, r4, lr}
   d67fc:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d67fe:	f10d 0207 	add.w	r2, sp, #7
   d6802:	f7ff fedb 	bl	d65bc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d6806:	b128      	cbz	r0, d6814 <_ZN6AB180510isBitClearEhhb+0x1a>
   d6808:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d680c:	421c      	tst	r4, r3
   d680e:	bf0c      	ite	eq
   d6810:	2001      	moveq	r0, #1
   d6812:	2000      	movne	r0, #0
}
   d6814:	b002      	add	sp, #8
   d6816:	bd10      	pop	{r4, pc}

000d6818 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6818:	b513      	push	{r0, r1, r4, lr}
   d681a:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d681c:	f10d 0207 	add.w	r2, sp, #7
   d6820:	f7ff fecc 	bl	d65bc <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d6824:	b128      	cbz	r0, d6832 <_ZN6AB18058isBitSetEhhb+0x1a>
   d6826:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d682a:	421c      	tst	r4, r3
   d682c:	bf14      	ite	ne
   d682e:	2001      	movne	r0, #1
   d6830:	2000      	moveq	r0, #0
}
   d6832:	b002      	add	sp, #8
   d6834:	bd10      	pop	{r4, pc}

000d6836 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6836:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d6838:	43d2      	mvns	r2, r2
   d683a:	9300      	str	r3, [sp, #0]
   d683c:	b2d2      	uxtb	r2, r2
   d683e:	2300      	movs	r3, #0
   d6840:	f7ff ffac 	bl	d679c <_ZN6AB180512maskRegisterEhhhb>
}
   d6844:	b003      	add	sp, #12
   d6846:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d684c <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d684c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d684e:	2301      	movs	r3, #1
   d6850:	f10d 0207 	add.w	r2, sp, #7
   d6854:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d6856:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d6858:	f7ff feb0 	bl	d65bc <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d685c:	4605      	mov	r5, r0
   d685e:	b938      	cbnz	r0, d6870 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d6860:	491e      	ldr	r1, [pc, #120]	; (d68dc <_ZN6AB180516updateWakeReasonEv+0x90>)
   d6862:	481f      	ldr	r0, [pc, #124]	; (d68e0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6864:	22ad      	movs	r2, #173	; 0xad
   d6866:	f7fd fe30 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
}
   d686a:	4628      	mov	r0, r5
   d686c:	b003      	add	sp, #12
   d686e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d6870:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6874:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d6878:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d687c:	d00b      	beq.n	d6896 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d687e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d6880:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6882:	210f      	movs	r1, #15
   d6884:	4620      	mov	r0, r4
   d6886:	f7ff ffd6 	bl	d6836 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d688a:	4a16      	ldr	r2, [pc, #88]	; (d68e4 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d688c:	4916      	ldr	r1, [pc, #88]	; (d68e8 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d688e:	4814      	ldr	r0, [pc, #80]	; (d68e0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6890:	f7fd fe04 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
   d6894:	e7e9      	b.n	d686a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d6896:	2208      	movs	r2, #8
   d6898:	2117      	movs	r1, #23
   d689a:	4620      	mov	r0, r4
   d689c:	f7ff ffbc 	bl	d6818 <_ZN6AB18058isBitSetEhhb>
   d68a0:	b118      	cbz	r0, d68aa <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d68a2:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d68a4:	4a11      	ldr	r2, [pc, #68]	; (d68ec <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d68a6:	61e3      	str	r3, [r4, #28]
   d68a8:	e7f0      	b.n	d688c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d68aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d68ae:	071a      	lsls	r2, r3, #28
   d68b0:	d509      	bpl.n	d68c6 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d68b2:	2303      	movs	r3, #3
   d68b4:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d68b6:	2208      	movs	r2, #8
   d68b8:	2301      	movs	r3, #1
   d68ba:	210f      	movs	r1, #15
   d68bc:	4620      	mov	r0, r4
   d68be:	f7ff ffba 	bl	d6836 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d68c2:	4a0b      	ldr	r2, [pc, #44]	; (d68f0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d68c4:	e7e2      	b.n	d688c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d68c6:	075b      	lsls	r3, r3, #29
   d68c8:	d5cf      	bpl.n	d686a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d68ca:	2204      	movs	r2, #4
   d68cc:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d68ce:	2301      	movs	r3, #1
   d68d0:	210f      	movs	r1, #15
   d68d2:	4620      	mov	r0, r4
   d68d4:	f7ff ffaf 	bl	d6836 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d68d8:	4a06      	ldr	r2, [pc, #24]	; (d68f4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d68da:	e7d7      	b.n	d688c <_ZN6AB180516updateWakeReasonEv+0x40>
   d68dc:	000dfa4a 	.word	0x000dfa4a
   d68e0:	2003e448 	.word	0x2003e448
   d68e4:	000dfa1b 	.word	0x000dfa1b
   d68e8:	000dfa69 	.word	0x000dfa69
   d68ec:	000dfa24 	.word	0x000dfa24
   d68f0:	000dfa34 	.word	0x000dfa34
   d68f4:	000dfa44 	.word	0x000dfa44

000d68f8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d68f8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d68fa:	9300      	str	r3, [sp, #0]
   d68fc:	4613      	mov	r3, r2
   d68fe:	22ff      	movs	r2, #255	; 0xff
   d6900:	f7ff ff4c 	bl	d679c <_ZN6AB180512maskRegisterEhhhb>
}
   d6904:	b003      	add	sp, #12
   d6906:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d690c <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d690e:	460f      	mov	r7, r1
   d6910:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6912:	2301      	movs	r3, #1
   d6914:	2200      	movs	r2, #0
   d6916:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6918:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d691a:	f7ff fedf 	bl	d66dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d691e:	4604      	mov	r4, r0
   d6920:	b938      	cbnz	r0, d6932 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d6922:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d6926:	491e      	ldr	r1, [pc, #120]	; (d69a0 <_ZN6AB180517setCountdownTimerEib+0x94>)
   d6928:	481e      	ldr	r0, [pc, #120]	; (d69a4 <_ZN6AB180517setCountdownTimerEib+0x98>)
   d692a:	f7fd fdce 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
}
   d692e:	4620      	mov	r0, r4
   d6930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d6932:	2301      	movs	r3, #1
   d6934:	2223      	movs	r2, #35	; 0x23
   d6936:	2118      	movs	r1, #24
   d6938:	4628      	mov	r0, r5
   d693a:	f7ff fecf 	bl	d66dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d693e:	4604      	mov	r4, r0
   d6940:	b910      	cbnz	r0, d6948 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d6942:	f240 229b 	movw	r2, #667	; 0x29b
   d6946:	e7ee      	b.n	d6926 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d6948:	2fff      	cmp	r7, #255	; 0xff
   d694a:	bfa8      	it	ge
   d694c:	27ff      	movge	r7, #255	; 0xff
   d694e:	2f01      	cmp	r7, #1
   d6950:	bfb8      	it	lt
   d6952:	2701      	movlt	r7, #1
   d6954:	2301      	movs	r3, #1
   d6956:	b2fa      	uxtb	r2, r7
   d6958:	2119      	movs	r1, #25
   d695a:	4628      	mov	r0, r5
   d695c:	f7ff febe 	bl	d66dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6960:	4604      	mov	r4, r0
   d6962:	b910      	cbnz	r0, d696a <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d6964:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d6968:	e7dd      	b.n	d6926 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d696a:	2301      	movs	r3, #1
   d696c:	2208      	movs	r2, #8
   d696e:	2112      	movs	r1, #18
   d6970:	4628      	mov	r0, r5
   d6972:	f7ff ffc1 	bl	d68f8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6976:	4604      	mov	r4, r0
   d6978:	b910      	cbnz	r0, d6980 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d697a:	f240 22af 	movw	r2, #687	; 0x2af
   d697e:	e7d2      	b.n	d6926 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d6980:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d6982:	f04f 0301 	mov.w	r3, #1
   d6986:	bf14      	ite	ne
   d6988:	2283      	movne	r2, #131	; 0x83
   d698a:	2282      	moveq	r2, #130	; 0x82
   d698c:	2118      	movs	r1, #24
   d698e:	4628      	mov	r0, r5
   d6990:	f7ff fea4 	bl	d66dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6994:	4604      	mov	r4, r0
   d6996:	2800      	cmp	r0, #0
   d6998:	d1c9      	bne.n	d692e <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d699a:	f240 22b9 	movw	r2, #697	; 0x2b9
   d699e:	e7c2      	b.n	d6926 <_ZN6AB180517setCountdownTimerEib+0x1a>
   d69a0:	000dfa7a 	.word	0x000dfa7a
   d69a4:	2003e448 	.word	0x2003e448

000d69a8 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d69a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d69ac:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d69ae:	4605      	mov	r5, r0
   d69b0:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d69b2:	484f      	ldr	r0, [pc, #316]	; (d6af0 <_ZN6AB180513deepPowerDownEi+0x148>)
   d69b4:	494f      	ldr	r1, [pc, #316]	; (d6af4 <_ZN6AB180513deepPowerDownEi+0x14c>)
   d69b6:	f7fd fd71 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d69ba:	2100      	movs	r1, #0
   d69bc:	4628      	mov	r0, r5
   d69be:	f7ff fe99 	bl	d66f4 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d69c2:	4604      	mov	r4, r0
   d69c4:	b948      	cbnz	r0, d69da <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d69c6:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d69ca:	494b      	ldr	r1, [pc, #300]	; (d6af8 <_ZN6AB180513deepPowerDownEi+0x150>)
   d69cc:	4848      	ldr	r0, [pc, #288]	; (d6af0 <_ZN6AB180513deepPowerDownEi+0x148>)
   d69ce:	f7fd fd7c 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
}
   d69d2:	4620      	mov	r0, r4
   d69d4:	b003      	add	sp, #12
   d69d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d69da:	2301      	movs	r3, #1
   d69dc:	461a      	mov	r2, r3
   d69de:	2130      	movs	r1, #48	; 0x30
   d69e0:	4628      	mov	r0, r5
   d69e2:	f7ff ff89 	bl	d68f8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d69e6:	4604      	mov	r4, r0
   d69e8:	b910      	cbnz	r0, d69f0 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d69ea:	f240 2205 	movw	r2, #517	; 0x205
   d69ee:	e7ec      	b.n	d69ca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d69f0:	2210      	movs	r2, #16
   d69f2:	2301      	movs	r3, #1
   d69f4:	4611      	mov	r1, r2
   d69f6:	4628      	mov	r0, r5
   d69f8:	f7ff ff1d 	bl	d6836 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d69fc:	4604      	mov	r4, r0
   d69fe:	b910      	cbnz	r0, d6a06 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d6a00:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d6a04:	e7e1      	b.n	d69ca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d6a06:	2301      	movs	r3, #1
   d6a08:	2226      	movs	r2, #38	; 0x26
   d6a0a:	2113      	movs	r1, #19
   d6a0c:	4628      	mov	r0, r5
   d6a0e:	f7ff fe65 	bl	d66dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6a12:	4604      	mov	r4, r0
   d6a14:	b910      	cbnz	r0, d6a1c <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d6a16:	f240 2213 	movw	r2, #531	; 0x213
   d6a1a:	e7d6      	b.n	d69ca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d6a1c:	2601      	movs	r6, #1
   d6a1e:	9600      	str	r6, [sp, #0]
   d6a20:	4633      	mov	r3, r6
   d6a22:	22fc      	movs	r2, #252	; 0xfc
   d6a24:	2111      	movs	r1, #17
   d6a26:	4628      	mov	r0, r5
   d6a28:	f7ff feb8 	bl	d679c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6a2c:	4604      	mov	r4, r0
   d6a2e:	b910      	cbnz	r0, d6a36 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d6a30:	f240 221b 	movw	r2, #539	; 0x21b
   d6a34:	e7c9      	b.n	d69ca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d6a36:	2200      	movs	r2, #0
   d6a38:	4639      	mov	r1, r7
   d6a3a:	4628      	mov	r0, r5
   d6a3c:	f7ff ff66 	bl	d690c <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d6a40:	4604      	mov	r4, r0
   d6a42:	b910      	cbnz	r0, d6a4a <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d6a44:	f240 2222 	movw	r2, #546	; 0x222
   d6a48:	e7bf      	b.n	d69ca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d6a4a:	9600      	str	r6, [sp, #0]
   d6a4c:	2302      	movs	r3, #2
   d6a4e:	2277      	movs	r2, #119	; 0x77
   d6a50:	2110      	movs	r1, #16
   d6a52:	4628      	mov	r0, r5
   d6a54:	f7ff fea2 	bl	d679c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6a58:	4604      	mov	r4, r0
   d6a5a:	b910      	cbnz	r0, d6a62 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d6a5c:	f240 222b 	movw	r2, #555	; 0x22b
   d6a60:	e7b3      	b.n	d69ca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d6a62:	4633      	mov	r3, r6
   d6a64:	2204      	movs	r2, #4
   d6a66:	211c      	movs	r1, #28
   d6a68:	4628      	mov	r0, r5
   d6a6a:	f7ff ff45 	bl	d68f8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6a6e:	4604      	mov	r4, r0
   d6a70:	b910      	cbnz	r0, d6a78 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d6a72:	f240 2232 	movw	r2, #562	; 0x232
   d6a76:	e7a8      	b.n	d69ca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d6a78:	9600      	str	r6, [sp, #0]
   d6a7a:	2318      	movs	r3, #24
   d6a7c:	22e3      	movs	r2, #227	; 0xe3
   d6a7e:	2111      	movs	r1, #17
   d6a80:	4628      	mov	r0, r5
   d6a82:	f7ff fe8b 	bl	d679c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6a86:	4604      	mov	r4, r0
   d6a88:	b910      	cbnz	r0, d6a90 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d6a8a:	f240 2239 	movw	r2, #569	; 0x239
   d6a8e:	e79c      	b.n	d69ca <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d6a90:	4633      	mov	r3, r6
   d6a92:	22c0      	movs	r2, #192	; 0xc0
   d6a94:	2117      	movs	r1, #23
   d6a96:	4628      	mov	r0, r5
   d6a98:	f7ff fe20 	bl	d66dc <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6a9c:	4604      	mov	r4, r0
   d6a9e:	b910      	cbnz	r0, d6aa6 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d6aa0:	f44f 7210 	mov.w	r2, #576	; 0x240
   d6aa4:	e791      	b.n	d69ca <_ZN6AB180513deepPowerDownEi+0x22>
   d6aa6:	f001 ff49 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6aaa:	f8df 9054 	ldr.w	r9, [pc, #84]	; d6b00 <_ZN6AB180513deepPowerDownEi+0x158>
   d6aae:	f8df 8040 	ldr.w	r8, [pc, #64]	; d6af0 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6ab2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6ab6:	4606      	mov	r6, r0
   d6ab8:	434f      	muls	r7, r1
   d6aba:	f001 ff3f 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
   d6abe:	1b80      	subs	r0, r0, r6
   d6ac0:	42b8      	cmp	r0, r7
   d6ac2:	d20e      	bcs.n	d6ae2 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6ac4:	2201      	movs	r2, #1
   d6ac6:	2117      	movs	r1, #23
   d6ac8:	4628      	mov	r0, r5
   d6aca:	f7ff fdbd 	bl	d6648 <_ZN6AB180512readRegisterEhb>
   d6ace:	4649      	mov	r1, r9
   d6ad0:	4602      	mov	r2, r0
   d6ad2:	4640      	mov	r0, r8
   d6ad4:	f7fd fce2 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d6ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6adc:	f002 fb1e 	bl	d911c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6ae0:	e7eb      	b.n	d6aba <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d6ae2:	4906      	ldr	r1, [pc, #24]	; (d6afc <_ZN6AB180513deepPowerDownEi+0x154>)
   d6ae4:	4802      	ldr	r0, [pc, #8]	; (d6af0 <_ZN6AB180513deepPowerDownEi+0x148>)
   d6ae6:	f7fd fcf0 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d6aea:	f004 ff4f 	bl	db98c <_ZN11SystemClass5resetEv>
    return true;
   d6aee:	e770      	b.n	d69d2 <_ZN6AB180513deepPowerDownEi+0x2a>
   d6af0:	2003e448 	.word	0x2003e448
   d6af4:	000dfaa5 	.word	0x000dfaa5
   d6af8:	000dfa9a 	.word	0x000dfa9a
   d6afc:	000dfacb 	.word	0x000dfacb
   d6b00:	000dfab6 	.word	0x000dfab6

000d6b04 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d6b04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6b08:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6b0c:	4605      	mov	r5, r0
   d6b0e:	460c      	mov	r4, r1
   d6b10:	4691      	mov	r9, r2
   d6b12:	461f      	mov	r7, r3
    if (lock) {
   d6b14:	f1ba 0f00 	cmp.w	sl, #0
   d6b18:	d002      	beq.n	d6b20 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6b1a:	6840      	ldr	r0, [r0, #4]
   d6b1c:	f003 f908 	bl	d9d30 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6b20:	b307      	cbz	r7, d6b64 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d6b22:	2f20      	cmp	r7, #32
   d6b24:	463e      	mov	r6, r7
   d6b26:	bf28      	it	cs
   d6b28:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6b2a:	2c7f      	cmp	r4, #127	; 0x7f
   d6b2c:	d826      	bhi.n	d6b7c <_ZN6AB18057readRamEjPhjb+0x78>
   d6b2e:	1933      	adds	r3, r6, r4
   d6b30:	2b80      	cmp	r3, #128	; 0x80
   d6b32:	d901      	bls.n	d6b38 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d6b34:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6b38:	2301      	movs	r3, #1
   d6b3a:	2204      	movs	r2, #4
   d6b3c:	213f      	movs	r1, #63	; 0x3f
   d6b3e:	4628      	mov	r0, r5
   d6b40:	f7ff fe79 	bl	d6836 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6b44:	2300      	movs	r3, #0
   d6b46:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6b4a:	9300      	str	r3, [sp, #0]
   d6b4c:	464a      	mov	r2, r9
   d6b4e:	4633      	mov	r3, r6
   d6b50:	b2c9      	uxtb	r1, r1
   d6b52:	4628      	mov	r0, r5
   d6b54:	f7ff fce4 	bl	d6520 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6b58:	4680      	mov	r8, r0
   d6b5a:	b128      	cbz	r0, d6b68 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6b5c:	4434      	add	r4, r6
        dataLen -= count;
   d6b5e:	1bbf      	subs	r7, r7, r6
        data += count;
   d6b60:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6b62:	e7dd      	b.n	d6b20 <_ZN6AB18057readRamEjPhjb+0x1c>
   d6b64:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6b68:	f1ba 0f00 	cmp.w	sl, #0
   d6b6c:	d002      	beq.n	d6b74 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6b6e:	6868      	ldr	r0, [r5, #4]
   d6b70:	f003 f8e7 	bl	d9d42 <_ZN7TwoWire6unlockEv>
}
   d6b74:	4640      	mov	r0, r8
   d6b76:	b002      	add	sp, #8
   d6b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6b7c:	2301      	movs	r3, #1
   d6b7e:	2204      	movs	r2, #4
   d6b80:	213f      	movs	r1, #63	; 0x3f
   d6b82:	4628      	mov	r0, r5
   d6b84:	f7ff feb8 	bl	d68f8 <_ZN6AB180514setRegisterBitEhhb>
   d6b88:	e7dc      	b.n	d6b44 <_ZN6AB18057readRamEjPhjb+0x40>

000d6b8a <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6b8a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6b8e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6b92:	4605      	mov	r5, r0
   d6b94:	460c      	mov	r4, r1
   d6b96:	4691      	mov	r9, r2
   d6b98:	461f      	mov	r7, r3
    if (lock) {
   d6b9a:	f1ba 0f00 	cmp.w	sl, #0
   d6b9e:	d002      	beq.n	d6ba6 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d6ba0:	6840      	ldr	r0, [r0, #4]
   d6ba2:	f003 f8c5 	bl	d9d30 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6ba6:	b307      	cbz	r7, d6bea <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6ba8:	2f1f      	cmp	r7, #31
   d6baa:	463e      	mov	r6, r7
   d6bac:	bf28      	it	cs
   d6bae:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6bb0:	2c7f      	cmp	r4, #127	; 0x7f
   d6bb2:	d826      	bhi.n	d6c02 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d6bb4:	1933      	adds	r3, r6, r4
   d6bb6:	2b80      	cmp	r3, #128	; 0x80
   d6bb8:	d901      	bls.n	d6bbe <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6bba:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6bbe:	2301      	movs	r3, #1
   d6bc0:	2204      	movs	r2, #4
   d6bc2:	213f      	movs	r1, #63	; 0x3f
   d6bc4:	4628      	mov	r0, r5
   d6bc6:	f7ff fe36 	bl	d6836 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6bca:	2300      	movs	r3, #0
   d6bcc:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6bd0:	9300      	str	r3, [sp, #0]
   d6bd2:	464a      	mov	r2, r9
   d6bd4:	4633      	mov	r3, r6
   d6bd6:	b2c9      	uxtb	r1, r1
   d6bd8:	4628      	mov	r0, r5
   d6bda:	f7ff fd43 	bl	d6664 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d6bde:	4680      	mov	r8, r0
   d6be0:	b128      	cbz	r0, d6bee <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d6be2:	4434      	add	r4, r6
        dataLen -= count;
   d6be4:	1bbf      	subs	r7, r7, r6
        data += count;
   d6be6:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6be8:	e7dd      	b.n	d6ba6 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d6bea:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6bee:	f1ba 0f00 	cmp.w	sl, #0
   d6bf2:	d002      	beq.n	d6bfa <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d6bf4:	6868      	ldr	r0, [r5, #4]
   d6bf6:	f003 f8a4 	bl	d9d42 <_ZN7TwoWire6unlockEv>
}
   d6bfa:	4640      	mov	r0, r8
   d6bfc:	b002      	add	sp, #8
   d6bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6c02:	2301      	movs	r3, #1
   d6c04:	2204      	movs	r2, #4
   d6c06:	213f      	movs	r1, #63	; 0x3f
   d6c08:	4628      	mov	r0, r5
   d6c0a:	f7ff fe75 	bl	d68f8 <_ZN6AB180514setRegisterBitEhhb>
   d6c0e:	e7dc      	b.n	d6bca <_ZN6AB18058writeRamEjPKhjb+0x40>

000d6c10 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d6c10:	b530      	push	{r4, r5, lr}
   d6c12:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6c14:	680d      	ldr	r5, [r1, #0]
   d6c16:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6c1a:	9503      	str	r5, [sp, #12]
   d6c1c:	684d      	ldr	r5, [r1, #4]
   d6c1e:	9502      	str	r5, [sp, #8]
   d6c20:	688d      	ldr	r5, [r1, #8]
   d6c22:	9501      	str	r5, [sp, #4]
   d6c24:	68c9      	ldr	r1, [r1, #12]
   d6c26:	9100      	str	r1, [sp, #0]
   d6c28:	3301      	adds	r3, #1
   d6c2a:	4904      	ldr	r1, [pc, #16]	; (d6c3c <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6c2c:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d6c30:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6c32:	f004 fe3d 	bl	db8b0 <_ZN6String6formatEPKcz>
}
   d6c36:	4620      	mov	r0, r4
   d6c38:	b005      	add	sp, #20
   d6c3a:	bd30      	pop	{r4, r5, pc}
   d6c3c:	000dfadd 	.word	0x000dfadd

000d6c40 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6c40:	1103      	asrs	r3, r0, #4
}
   d6c42:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6c44:	f000 000f 	and.w	r0, r0, #15
}
   d6c48:	fb02 0003 	mla	r0, r2, r3, r0
   d6c4c:	4770      	bx	lr

000d6c4e <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6c4e:	b538      	push	{r3, r4, r5, lr}
   d6c50:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d6c52:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6c54:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d6c56:	f7ff fff3 	bl	d6c40 <_ZN6AB180510bcdToValueEh>
   d6c5a:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6c5c:	7860      	ldrb	r0, [r4, #1]
   d6c5e:	f7ff ffef 	bl	d6c40 <_ZN6AB180510bcdToValueEh>
   d6c62:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6c64:	78a0      	ldrb	r0, [r4, #2]
   d6c66:	f7ff ffeb 	bl	d6c40 <_ZN6AB180510bcdToValueEh>
   d6c6a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6c6c:	78e0      	ldrb	r0, [r4, #3]
   d6c6e:	f7ff ffe7 	bl	d6c40 <_ZN6AB180510bcdToValueEh>
   d6c72:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6c74:	7920      	ldrb	r0, [r4, #4]
   d6c76:	f7ff ffe3 	bl	d6c40 <_ZN6AB180510bcdToValueEh>
   d6c7a:	3801      	subs	r0, #1
   d6c7c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6c7e:	b92d      	cbnz	r5, d6c8c <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6c80:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d6c82:	7828      	ldrb	r0, [r5, #0]
   d6c84:	f7ff ffdc 	bl	d6c40 <_ZN6AB180510bcdToValueEh>
   d6c88:	6188      	str	r0, [r1, #24]
}
   d6c8a:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6c8c:	7960      	ldrb	r0, [r4, #5]
   d6c8e:	f7ff ffd7 	bl	d6c40 <_ZN6AB180510bcdToValueEh>
   d6c92:	3064      	adds	r0, #100	; 0x64
   d6c94:	1da5      	adds	r5, r4, #6
   d6c96:	6148      	str	r0, [r1, #20]
   d6c98:	e7f3      	b.n	d6c82 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6c9c <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6c9c:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6c9e:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6ca0:	b088      	sub	sp, #32
   d6ca2:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6ca4:	461a      	mov	r2, r3
   d6ca6:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6ca8:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6caa:	f7ff fda6 	bl	d67fa <_ZN6AB180510isBitClearEhhb>
   d6cae:	b1f0      	cbz	r0, d6cee <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6cb0:	2308      	movs	r3, #8
   d6cb2:	2601      	movs	r6, #1
   d6cb4:	4620      	mov	r0, r4
   d6cb6:	9600      	str	r6, [sp, #0]
   d6cb8:	eb0d 0203 	add.w	r2, sp, r3
   d6cbc:	2100      	movs	r1, #0
   d6cbe:	f7ff fc2f 	bl	d6520 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d6cc2:	4604      	mov	r4, r0
   d6cc4:	b198      	cbz	r0, d6cee <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d6cc6:	4632      	mov	r2, r6
   d6cc8:	4629      	mov	r1, r5
   d6cca:	f10d 0009 	add.w	r0, sp, #9
   d6cce:	f7ff ffbe 	bl	d6c4e <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d6cd2:	a804      	add	r0, sp, #16
   d6cd4:	f7ff ff9c 	bl	d6c10 <_ZN6AB180510tmToStringEPK2tm>
   d6cd8:	4808      	ldr	r0, [pc, #32]	; (d6cfc <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d6cda:	9a04      	ldr	r2, [sp, #16]
   d6cdc:	4908      	ldr	r1, [pc, #32]	; (d6d00 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d6cde:	f7fd fbdd 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
   d6ce2:	a804      	add	r0, sp, #16
   d6ce4:	f004 fc80 	bl	db5e8 <_ZN6StringD1Ev>
}
   d6ce8:	4620      	mov	r0, r4
   d6cea:	b008      	add	sp, #32
   d6cec:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d6cee:	2224      	movs	r2, #36	; 0x24
   d6cf0:	2100      	movs	r1, #0
   d6cf2:	4628      	mov	r0, r5
   d6cf4:	f006 f982 	bl	dcffc <memset>
   d6cf8:	2400      	movs	r4, #0
   d6cfa:	e7f5      	b.n	d6ce8 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d6cfc:	2003e448 	.word	0x2003e448
   d6d00:	000dfafb 	.word	0x000dfafb

000d6d04 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d6d04:	b530      	push	{r4, r5, lr}
   d6d06:	b08b      	sub	sp, #44	; 0x2c
   d6d08:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6d0a:	a901      	add	r1, sp, #4
   d6d0c:	f7ff ffc6 	bl	d6c9c <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d6d10:	4604      	mov	r4, r0
   d6d12:	b120      	cbz	r0, d6d1e <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d6d14:	a801      	add	r0, sp, #4
   d6d16:	f002 f9ed 	bl	d90f4 <mktime>
   d6d1a:	e9c5 0100 	strd	r0, r1, [r5]
}
   d6d1e:	4620      	mov	r0, r4
   d6d20:	b00b      	add	sp, #44	; 0x2c
   d6d22:	bd30      	pop	{r4, r5, pc}

000d6d24 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d6d24:	b510      	push	{r4, lr}
   d6d26:	4604      	mov	r4, r0
   d6d28:	b088      	sub	sp, #32
    if (callBegin) {
   d6d2a:	b111      	cbz	r1, d6d32 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d6d2c:	6840      	ldr	r0, [r0, #4]
   d6d2e:	f002 ffad 	bl	d9c8c <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d6d32:	4620      	mov	r0, r4
   d6d34:	f7ff fc4a 	bl	d65cc <_ZN6AB180510detectChipEv>
   d6d38:	b370      	cbz	r0, d6d98 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6d3a:	4620      	mov	r0, r4
   d6d3c:	f7ff fd86 	bl	d684c <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6d40:	2301      	movs	r3, #1
   d6d42:	461a      	mov	r2, r3
   d6d44:	2110      	movs	r1, #16
   d6d46:	4620      	mov	r0, r4
   d6d48:	f7ff fd57 	bl	d67fa <_ZN6AB180510isBitClearEhhb>
   d6d4c:	b1d8      	cbz	r0, d6d86 <_ZN6AB18055setupEb+0x62>
   d6d4e:	f005 f84b 	bl	dbde8 <_ZN9TimeClass7isValidEv>
   d6d52:	b9c0      	cbnz	r0, d6d86 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6d54:	a902      	add	r1, sp, #8
   d6d56:	4620      	mov	r0, r4
   d6d58:	f7ff ffd4 	bl	d6d04 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6d60:	f004 ff48 	bl	dbbf4 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6d64:	4b0f      	ldr	r3, [pc, #60]	; (d6da4 <_ZN6AB18055setupEb+0x80>)
   d6d66:	4910      	ldr	r1, [pc, #64]	; (d6da8 <_ZN6AB18055setupEb+0x84>)
   d6d68:	681b      	ldr	r3, [r3, #0]
   d6d6a:	9300      	str	r3, [sp, #0]
   d6d6c:	a804      	add	r0, sp, #16
   d6d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6d72:	f004 fff7 	bl	dbd64 <_ZN9TimeClass6formatExPKc>
   d6d76:	480d      	ldr	r0, [pc, #52]	; (d6dac <_ZN6AB18055setupEb+0x88>)
   d6d78:	9a04      	ldr	r2, [sp, #16]
   d6d7a:	490d      	ldr	r1, [pc, #52]	; (d6db0 <_ZN6AB18055setupEb+0x8c>)
   d6d7c:	f7fd fb8e 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
   d6d80:	a804      	add	r0, sp, #16
   d6d82:	f004 fc31 	bl	db5e8 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6d86:	4a0b      	ldr	r2, [pc, #44]	; (d6db4 <_ZN6AB18055setupEb+0x90>)
   d6d88:	2300      	movs	r3, #0
   d6d8a:	2100      	movs	r1, #0
   d6d8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6d90:	f002 f806 	bl	d8da0 <system_subscribe_event>
}
   d6d94:	b008      	add	sp, #32
   d6d96:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6d98:	4907      	ldr	r1, [pc, #28]	; (d6db8 <_ZN6AB18055setupEb+0x94>)
   d6d9a:	4804      	ldr	r0, [pc, #16]	; (d6dac <_ZN6AB18055setupEb+0x88>)
   d6d9c:	f7fd fb95 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
   d6da0:	e7f1      	b.n	d6d86 <_ZN6AB18055setupEb+0x62>
   d6da2:	bf00      	nop
   d6da4:	2003e0a8 	.word	0x2003e0a8
   d6da8:	2003e58c 	.word	0x2003e58c
   d6dac:	2003e448 	.word	0x2003e448
   d6db0:	000dfb09 	.word	0x000dfb09
   d6db4:	000d6779 	.word	0x000d6779
   d6db8:	000dfb26 	.word	0x000dfb26

000d6dbc <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6dbc:	220a      	movs	r2, #10
   d6dbe:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d6dc2:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d6dc6:	fb93 f1f2 	sdiv	r1, r3, r2
   d6dca:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6dce:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d6dd2:	b2c0      	uxtb	r0, r0
   d6dd4:	4770      	bx	lr

000d6dd6 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6dd6:	b570      	push	{r4, r5, r6, lr}
   d6dd8:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6dda:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6ddc:	460c      	mov	r4, r1
   d6dde:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6de0:	f7ff ffec 	bl	d6dbc <_ZN6AB180510valueToBcdEi>
   d6de4:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d6de6:	6868      	ldr	r0, [r5, #4]
   d6de8:	f7ff ffe8 	bl	d6dbc <_ZN6AB180510valueToBcdEi>
   d6dec:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d6dee:	68a8      	ldr	r0, [r5, #8]
   d6df0:	f7ff ffe4 	bl	d6dbc <_ZN6AB180510valueToBcdEi>
   d6df4:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d6df6:	68e8      	ldr	r0, [r5, #12]
   d6df8:	f7ff ffe0 	bl	d6dbc <_ZN6AB180510valueToBcdEi>
   d6dfc:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6dfe:	6928      	ldr	r0, [r5, #16]
   d6e00:	3001      	adds	r0, #1
   d6e02:	f7ff ffdb 	bl	d6dbc <_ZN6AB180510valueToBcdEi>
   d6e06:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d6e08:	b92e      	cbnz	r6, d6e16 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6e0a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d6e0c:	69a8      	ldr	r0, [r5, #24]
   d6e0e:	f7ff ffd5 	bl	d6dbc <_ZN6AB180510valueToBcdEi>
   d6e12:	7030      	strb	r0, [r6, #0]
}
   d6e14:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d6e16:	696a      	ldr	r2, [r5, #20]
   d6e18:	2364      	movs	r3, #100	; 0x64
   d6e1a:	fb92 f0f3 	sdiv	r0, r2, r3
   d6e1e:	fb03 2010 	mls	r0, r3, r0, r2
   d6e22:	f7ff ffcb 	bl	d6dbc <_ZN6AB180510valueToBcdEi>
   d6e26:	1da6      	adds	r6, r4, #6
   d6e28:	7160      	strb	r0, [r4, #5]
   d6e2a:	e7ef      	b.n	d6e0c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d6e2c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e2e:	b087      	sub	sp, #28
   d6e30:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6e32:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6e34:	4616      	mov	r6, r2
   d6e36:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6e38:	f7ff feea 	bl	d6c10 <_ZN6AB180510tmToStringEPK2tm>
   d6e3c:	481e      	ldr	r0, [pc, #120]	; (d6eb8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6e3e:	9a02      	ldr	r2, [sp, #8]
   d6e40:	491e      	ldr	r1, [pc, #120]	; (d6ebc <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d6e42:	f7fd fb2b 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
   d6e46:	a802      	add	r0, sp, #8
   d6e48:	f004 fbce 	bl	db5e8 <_ZN6StringD1Ev>
    if (lock) {
   d6e4c:	b116      	cbz	r6, d6e54 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d6e4e:	6868      	ldr	r0, [r5, #4]
   d6e50:	f002 ff6e 	bl	d9d30 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d6e54:	4620      	mov	r0, r4
   d6e56:	2201      	movs	r2, #1
   d6e58:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6e5c:	2700      	movs	r7, #0
   d6e5e:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d6e62:	f7ff ffb8 	bl	d6dd6 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6e66:	2301      	movs	r3, #1
   d6e68:	461a      	mov	r2, r3
   d6e6a:	2110      	movs	r1, #16
   d6e6c:	4628      	mov	r0, r5
   d6e6e:	f7ff fd43 	bl	d68f8 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d6e72:	4604      	mov	r4, r0
   d6e74:	b1e8      	cbz	r0, d6eb2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d6e76:	2308      	movs	r3, #8
   d6e78:	9700      	str	r7, [sp, #0]
   d6e7a:	eb0d 0203 	add.w	r2, sp, r3
   d6e7e:	4639      	mov	r1, r7
   d6e80:	4628      	mov	r0, r5
   d6e82:	f7ff fbef 	bl	d6664 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d6e86:	4604      	mov	r4, r0
   d6e88:	b160      	cbz	r0, d6ea4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6e8a:	2301      	movs	r3, #1
   d6e8c:	461a      	mov	r2, r3
   d6e8e:	2110      	movs	r1, #16
   d6e90:	4628      	mov	r0, r5
   d6e92:	f7ff fcd0 	bl	d6836 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d6e96:	b116      	cbz	r6, d6e9e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d6e98:	6868      	ldr	r0, [r5, #4]
   d6e9a:	f002 ff52 	bl	d9d42 <_ZN7TwoWire6unlockEv>
}
   d6e9e:	4620      	mov	r0, r4
   d6ea0:	b007      	add	sp, #28
   d6ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d6ea4:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d6ea8:	4905      	ldr	r1, [pc, #20]	; (d6ec0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d6eaa:	4803      	ldr	r0, [pc, #12]	; (d6eb8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6eac:	f7fd fb0d 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
   d6eb0:	e7f1      	b.n	d6e96 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d6eb2:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d6eb6:	e7f7      	b.n	d6ea8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d6eb8:	2003e448 	.word	0x2003e448
   d6ebc:	000dfb3e 	.word	0x000dfb3e
   d6ec0:	000dfb4c 	.word	0x000dfb4c

000d6ec4 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6ec4:	b513      	push	{r0, r1, r4, lr}
   d6ec6:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d6ec8:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6eca:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d6ece:	f006 f85b 	bl	dcf88 <gmtime>
    return setRtcFromTm(tm, lock);
   d6ed2:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d6ed6:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d6ed8:	4620      	mov	r0, r4
   d6eda:	f7ff ffa7 	bl	d6e2c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d6ede:	b002      	add	sp, #8
   d6ee0:	bd10      	pop	{r4, pc}
	...

000d6ee4 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d6ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6ee6:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d6ee8:	b089      	sub	sp, #36	; 0x24
   d6eea:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6eec:	bb75      	cbnz	r5, d6f4c <_ZN6AB18054loopEv+0x68>
   d6eee:	f004 ff7b 	bl	dbde8 <_ZN9TimeClass7isValidEv>
   d6ef2:	b358      	cbz	r0, d6f4c <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d6ef4:	2600      	movs	r6, #0
   d6ef6:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d6ef8:	a904      	add	r1, sp, #16
   d6efa:	4628      	mov	r0, r5
        tm = 0;
   d6efc:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d6f00:	f002 f808 	bl	d8f14 <spark_sync_time_last>
   d6f04:	b310      	cbz	r0, d6f4c <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d6f06:	2501      	movs	r5, #1
   d6f08:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d6f0a:	f004 ff8a 	bl	dbe22 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d6f0e:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d6f10:	4602      	mov	r2, r0
   d6f12:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d6f14:	4620      	mov	r0, r4
        time_t time = Time.now();
   d6f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d6f1a:	f7ff ffd3 	bl	d6ec4 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d6f1e:	a902      	add	r1, sp, #8
   d6f20:	4620      	mov	r0, r4
        time = 0;
   d6f22:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d6f26:	f7ff feed 	bl	d6d04 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6f2a:	4b12      	ldr	r3, [pc, #72]	; (d6f74 <_ZN6AB18054loopEv+0x90>)
   d6f2c:	4912      	ldr	r1, [pc, #72]	; (d6f78 <_ZN6AB18054loopEv+0x94>)
   d6f2e:	681b      	ldr	r3, [r3, #0]
   d6f30:	9300      	str	r3, [sp, #0]
   d6f32:	a804      	add	r0, sp, #16
   d6f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6f38:	f004 ff14 	bl	dbd64 <_ZN9TimeClass6formatExPKc>
   d6f3c:	480f      	ldr	r0, [pc, #60]	; (d6f7c <_ZN6AB18054loopEv+0x98>)
   d6f3e:	9a04      	ldr	r2, [sp, #16]
   d6f40:	490f      	ldr	r1, [pc, #60]	; (d6f80 <_ZN6AB18054loopEv+0x9c>)
   d6f42:	f7fd faab 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
   d6f46:	a804      	add	r0, sp, #16
   d6f48:	f004 fb4e 	bl	db5e8 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6f4c:	6963      	ldr	r3, [r4, #20]
   d6f4e:	b173      	cbz	r3, d6f6e <_ZN6AB18054loopEv+0x8a>
   d6f50:	f001 fcf4 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d6f54:	6923      	ldr	r3, [r4, #16]
   d6f56:	1ac0      	subs	r0, r0, r3
   d6f58:	6963      	ldr	r3, [r4, #20]
   d6f5a:	4298      	cmp	r0, r3
   d6f5c:	d307      	bcc.n	d6f6e <_ZN6AB18054loopEv+0x8a>
   d6f5e:	f001 fced 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d6f62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d6f66:	6120      	str	r0, [r4, #16]
            setWDT();
   d6f68:	4620      	mov	r0, r4
   d6f6a:	f7ff fbc3 	bl	d66f4 <_ZN6AB18056setWDTEi>
}
   d6f6e:	b009      	add	sp, #36	; 0x24
   d6f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6f72:	bf00      	nop
   d6f74:	2003e0a8 	.word	0x2003e0a8
   d6f78:	2003e58c 	.word	0x2003e58c
   d6f7c:	2003e448 	.word	0x2003e448
   d6f80:	000dfb67 	.word	0x000dfb67

000d6f84 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d6f84:	4b01      	ldr	r3, [pc, #4]	; (d6f8c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d6f86:	4a02      	ldr	r2, [pc, #8]	; (d6f90 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6f88:	601a      	str	r2, [r3, #0]
}
   d6f8a:	4770      	bx	lr
   d6f8c:	2003e448 	.word	0x2003e448
   d6f90:	000dfb7d 	.word	0x000dfb7d

000d6f94 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d6f94:	2a02      	cmp	r2, #2
   d6f96:	d006      	beq.n	d6fa6 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d6f98:	2a03      	cmp	r2, #3
   d6f9a:	d002      	beq.n	d6fa2 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d6f9c:	2a01      	cmp	r2, #1
   d6f9e:	d100      	bne.n	d6fa2 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6fa0:	6001      	str	r1, [r0, #0]
	}
   d6fa2:	2000      	movs	r0, #0
   d6fa4:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6fa6:	680b      	ldr	r3, [r1, #0]
   d6fa8:	6003      	str	r3, [r0, #0]
	}
   d6faa:	e7fa      	b.n	d6fa2 <_ZNSt14_Function_base13_Base_managerIZN17BackgroundPublish5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d6fac <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6fac:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6fae:	2301      	movs	r3, #1
   d6fb0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6fb2:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d6fb4:	4604      	mov	r4, r0
        if (th->func) {
   d6fb6:	b143      	cbz	r3, d6fca <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d6fb8:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6fba:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d6fbc:	2301      	movs	r3, #1
   d6fbe:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6fc0:	2000      	movs	r0, #0
    }
   d6fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6fc6:	f001 bc81 	b.w	d88cc <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6fca:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6fcc:	2800      	cmp	r0, #0
   d6fce:	d0f5      	beq.n	d6fbc <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d6fd0:	6883      	ldr	r3, [r0, #8]
   d6fd2:	b90b      	cbnz	r3, d6fd8 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d6fd4:	f005 fa4e 	bl	dc474 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6fd8:	68c3      	ldr	r3, [r0, #12]
   d6fda:	e7ee      	b.n	d6fba <_ZN6Thread3runEPv+0xe>

000d6fdc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d6fdc:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d6fde:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d6fe0:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d6fe2:	b135      	cbz	r5, d6ff2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d6fe4:	4628      	mov	r0, r5
   d6fe6:	f7fd f96f 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6fea:	2110      	movs	r1, #16
   d6fec:	4628      	mov	r0, r5
   d6fee:	f005 fa35 	bl	dc45c <_ZdlPvj>
   d6ff2:	4620      	mov	r0, r4
   d6ff4:	2114      	movs	r1, #20
      }
   d6ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d6ffa:	f005 ba2f 	b.w	dc45c <_ZdlPvj>

000d6ffe <_ZN6Thread7disposeEv>:
    void dispose()
   d6ffe:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7000:	6803      	ldr	r3, [r0, #0]
   d7002:	4604      	mov	r4, r0
        if (!isValid())
   d7004:	b1ab      	cbz	r3, d7032 <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d7006:	6858      	ldr	r0, [r3, #4]
   d7008:	f001 fbd8 	bl	d87bc <os_thread_is_current>
   d700c:	b988      	cbnz	r0, d7032 <_ZN6Thread7disposeEv+0x34>
   d700e:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d7010:	7c5a      	ldrb	r2, [r3, #17]
   d7012:	b912      	cbnz	r2, d701a <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d7014:	6858      	ldr	r0, [r3, #4]
   d7016:	f001 fbe1 	bl	d87dc <os_thread_join>
        os_thread_cleanup(d_->handle);
   d701a:	6823      	ldr	r3, [r4, #0]
   d701c:	6858      	ldr	r0, [r3, #4]
   d701e:	f001 fbe5 	bl	d87ec <os_thread_cleanup>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7022:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7024:	2300      	movs	r3, #0
   d7026:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d7028:	b118      	cbz	r0, d7032 <_ZN6Thread7disposeEv+0x34>
    }
   d702a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d702e:	f7ff bfd5 	b.w	d6fdc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d7032:	bd10      	pop	{r4, pc}

000d7034 <_ZN17BackgroundPublishC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublish *BackgroundPublish::_instance;

BackgroundPublish::BackgroundPublish() {
   d7034:	4a05      	ldr	r2, [pc, #20]	; (d704c <_ZN17BackgroundPublishC1Ev+0x18>)
   d7036:	6002      	str	r2, [r0, #0]
   d7038:	2200      	movs	r2, #0
   d703a:	6042      	str	r2, [r0, #4]
   d703c:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d703e:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d7042:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d7046:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d704a:	4770      	bx	lr
   d704c:	000dfbbc 	.word	0x000dfbbc

000d7050 <_ZN17BackgroundPublish8instanceEv>:
BackgroundPublish::~BackgroundPublish()
{
    stop();
}

BackgroundPublish &BackgroundPublish::instance() {
   d7050:	b510      	push	{r4, lr}
    if (!_instance) {
   d7052:	4c07      	ldr	r4, [pc, #28]	; (d7070 <_ZN17BackgroundPublish8instanceEv+0x20>)
   d7054:	6823      	ldr	r3, [r4, #0]
   d7056:	b943      	cbnz	r3, d706a <_ZN17BackgroundPublish8instanceEv+0x1a>
        _instance = new BackgroundPublish();
   d7058:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d705c:	f7fd f81b 	bl	d4096 <_Znwj>
   d7060:	4603      	mov	r3, r0
   d7062:	b108      	cbz	r0, d7068 <_ZN17BackgroundPublish8instanceEv+0x18>
   d7064:	f7ff ffe6 	bl	d7034 <_ZN17BackgroundPublishC1Ev>
   d7068:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d706a:	6820      	ldr	r0, [r4, #0]
   d706c:	bd10      	pop	{r4, pc}
   d706e:	bf00      	nop
   d7070:	2003e450 	.word	0x2003e450

000d7074 <_ZN17BackgroundPublish4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublish::stop()
{
   d7074:	b538      	push	{r3, r4, r5, lr}
   d7076:	4604      	mov	r4, r0
    if(thread)
   d7078:	6840      	ldr	r0, [r0, #4]
   d707a:	b190      	cbz	r0, d70a2 <_ZN17BackgroundPublish4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d707c:	2302      	movs	r3, #2
   d707e:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d7080:	f7ff ffbd 	bl	d6ffe <_ZN6Thread7disposeEv>
        delete thread;
   d7084:	6865      	ldr	r5, [r4, #4]
   d7086:	b155      	cbz	r5, d709e <_ZN17BackgroundPublish4stopEv+0x2a>
        dispose();
   d7088:	4628      	mov	r0, r5
   d708a:	f7ff ffb8 	bl	d6ffe <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d708e:	6828      	ldr	r0, [r5, #0]
   d7090:	b108      	cbz	r0, d7096 <_ZN17BackgroundPublish4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d7092:	f7ff ffa3 	bl	d6fdc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d7096:	2104      	movs	r1, #4
   d7098:	4628      	mov	r0, r5
   d709a:	f005 f9df 	bl	dc45c <_ZdlPvj>
        thread = NULL;
   d709e:	2300      	movs	r3, #0
   d70a0:	6063      	str	r3, [r4, #4]
    }
}
   d70a2:	bd38      	pop	{r3, r4, r5, pc}

000d70a4 <_ZN17BackgroundPublishD1Ev>:
BackgroundPublish::~BackgroundPublish()
   d70a4:	b510      	push	{r4, lr}
   d70a6:	4b05      	ldr	r3, [pc, #20]	; (d70bc <_ZN17BackgroundPublishD1Ev+0x18>)
   d70a8:	6003      	str	r3, [r0, #0]
   d70aa:	4604      	mov	r4, r0
    stop();
   d70ac:	f7ff ffe2 	bl	d7074 <_ZN17BackgroundPublish4stopEv>
    class function<_Res(_ArgTypes...)>
   d70b0:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d70b4:	f7fd f908 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
}
   d70b8:	4620      	mov	r0, r4
   d70ba:	bd10      	pop	{r4, pc}
   d70bc:	000dfbbc 	.word	0x000dfbbc

000d70c0 <_ZN17BackgroundPublishD0Ev>:
BackgroundPublish::~BackgroundPublish()
   d70c0:	b510      	push	{r4, lr}
   d70c2:	4604      	mov	r4, r0
}
   d70c4:	f7ff ffee 	bl	d70a4 <_ZN17BackgroundPublishD1Ev>
   d70c8:	4620      	mov	r0, r4
   d70ca:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d70ce:	f005 f9c5 	bl	dc45c <_ZdlPvj>
   d70d2:	4620      	mov	r0, r4
   d70d4:	bd10      	pop	{r4, pc}

000d70d6 <_ZN17BackgroundPublish8thread_fEv>:

void BackgroundPublish::thread_f()
{
   d70d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d70d8:	4604      	mov	r4, r0
   d70da:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d70dc:	f100 060d 	add.w	r6, r0, #13
   d70e0:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d70e4:	7b23      	ldrb	r3, [r4, #12]
   d70e6:	b91b      	cbnz	r3, d70f0 <_ZN17BackgroundPublish8thread_fEv+0x1a>
            delay(1);
   d70e8:	2001      	movs	r0, #1
   d70ea:	f002 f817 	bl	d911c <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d70ee:	e7f9      	b.n	d70e4 <_ZN17BackgroundPublish8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d70f0:	7b23      	ldrb	r3, [r4, #12]
   d70f2:	2b02      	cmp	r3, #2
   d70f4:	d062      	beq.n	d71bc <_ZN17BackgroundPublish8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d70f6:	68a0      	ldr	r0, [r4, #8]
   d70f8:	f001 fbb0 	bl	d885c <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d70fc:	68a0      	ldr	r0, [r4, #8]
   d70fe:	f001 fbb5 	bl	d886c <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d7102:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7106:	f88d 3000 	strb.w	r3, [sp]
   d710a:	463a      	mov	r2, r7
   d710c:	233c      	movs	r3, #60	; 0x3c
   d710e:	4631      	mov	r1, r6
   d7110:	a806      	add	r0, sp, #24
   d7112:	f002 fadd 	bl	d96d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7116:	9d06      	ldr	r5, [sp, #24]
   d7118:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d711a:	b933      	cbnz	r3, d712a <_ZN17BackgroundPublish8thread_fEv+0x54>
   d711c:	7b23      	ldrb	r3, [r4, #12]
   d711e:	2b02      	cmp	r3, #2
   d7120:	d003      	beq.n	d712a <_ZN17BackgroundPublish8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d7122:	2001      	movs	r0, #1
   d7124:	f001 fffa 	bl	d911c <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d7128:	e7f5      	b.n	d7116 <_ZN17BackgroundPublish8thread_fEv+0x40>
        }

        if(completed_cb)
   d712a:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d712e:	b31b      	cbz	r3, d7178 <_ZN17BackgroundPublish8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7130:	2000      	movs	r0, #0
   d7132:	f001 fe4d 	bl	d8dd0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7136:	b120      	cbz	r0, d7142 <_ZN17BackgroundPublish8thread_fEv+0x6c>
   d7138:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d713a:	b913      	cbnz	r3, d7142 <_ZN17BackgroundPublish8thread_fEv+0x6c>
        spark_process();
   d713c:	f001 feaa 	bl	d8e94 <spark_process>
    }
   d7140:	e7fa      	b.n	d7138 <_ZN17BackgroundPublish8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7142:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d7144:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d7148:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d714a:	1e59      	subs	r1, r3, #1
   d714c:	424b      	negs	r3, r1
   d714e:	414b      	adcs	r3, r1
   d7150:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d7154:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d7158:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d715c:	b90b      	cbnz	r3, d7162 <_ZN17BackgroundPublish8thread_fEv+0x8c>
	__throw_bad_function_call();
   d715e:	f005 f989 	bl	dc474 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7162:	ab05      	add	r3, sp, #20
   d7164:	9300      	str	r3, [sp, #0]
   d7166:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d716a:	ab04      	add	r3, sp, #16
   d716c:	aa03      	add	r2, sp, #12
   d716e:	f10d 010b 	add.w	r1, sp, #11
   d7172:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d7176:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d7178:	68a0      	ldr	r0, [r4, #8]
   d717a:	f001 fb6f 	bl	d885c <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d717e:	7b23      	ldrb	r3, [r4, #12]
   d7180:	2b02      	cmp	r3, #2
   d7182:	d015      	beq.n	d71b0 <_ZN17BackgroundPublish8thread_fEv+0xda>
	if (_M_manager)
   d7184:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d7188:	2500      	movs	r5, #0
   d718a:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d718e:	b133      	cbz	r3, d719e <_ZN17BackgroundPublish8thread_fEv+0xc8>
            completed_cb = NULL;
   d7190:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d7194:	2203      	movs	r2, #3
   d7196:	4608      	mov	r0, r1
   d7198:	4798      	blx	r3
	    _M_invoker = nullptr;
   d719a:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d719e:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d71a0:	68a0      	ldr	r0, [r4, #8]
   d71a2:	7323      	strb	r3, [r4, #12]
   d71a4:	f001 fb62 	bl	d886c <os_mutex_unlock>
   d71a8:	a807      	add	r0, sp, #28
   d71aa:	f7fd fc35 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71ae:	e799      	b.n	d70e4 <_ZN17BackgroundPublish8thread_fEv+0xe>
   d71b0:	68a0      	ldr	r0, [r4, #8]
   d71b2:	f001 fb5b 	bl	d886c <os_mutex_unlock>
   d71b6:	a807      	add	r0, sp, #28
   d71b8:	f7fd fc2e 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d71bc:	b009      	add	sp, #36	; 0x24
   d71be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d71c0 <_ZNSt17_Function_handlerIFvvEZN17BackgroundPublish5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d71c0:	6800      	ldr	r0, [r0, #0]
   d71c2:	f7ff bf88 	b.w	d70d6 <_ZN17BackgroundPublish8thread_fEv>

000d71c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d71c6:	b513      	push	{r0, r1, r4, lr}
   d71c8:	460b      	mov	r3, r1
   d71ca:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71cc:	e9d0 0100 	ldrd	r0, r1, [r0]
   d71d0:	466c      	mov	r4, sp
   d71d2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d71d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d71da:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d71de:	e894 0003 	ldmia.w	r4, {r0, r1}
   d71e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d71e6:	b002      	add	sp, #8
   d71e8:	bd10      	pop	{r4, pc}
	...

000d71ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d71ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d71f0:	4606      	mov	r6, r0
   d71f2:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d71f4:	2014      	movs	r0, #20
   d71f6:	4926      	ldr	r1, [pc, #152]	; (d7290 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d71f8:	4617      	mov	r7, r2
   d71fa:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d71fc:	f005 f930 	bl	dc460 <_ZnwjRKSt9nothrow_t>
   d7200:	4604      	mov	r4, r0
   d7202:	b130      	cbz	r0, d7212 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7204:	2200      	movs	r2, #0
            exited(false) {
   d7206:	e9c0 2200 	strd	r2, r2, [r0]
   d720a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d720e:	7402      	strb	r2, [r0, #16]
   d7210:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7212:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d7214:	2c00      	cmp	r4, #0
   d7216:	d031      	beq.n	d727c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d7218:	491d      	ldr	r1, [pc, #116]	; (d7290 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d721a:	2010      	movs	r0, #16
   d721c:	f005 f920 	bl	dc460 <_ZnwjRKSt9nothrow_t>
   d7220:	4605      	mov	r5, r0
   d7222:	b168      	cbz	r0, d7240 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d7224:	2300      	movs	r3, #0
   d7226:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7228:	4601      	mov	r1, r0
   d722a:	4638      	mov	r0, r7
   d722c:	f7ff ffcb 	bl	d71c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7230:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7232:	68aa      	ldr	r2, [r5, #8]
   d7234:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7236:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7238:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d723a:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d723c:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d723e:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7240:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7242:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d7244:	b137      	cbz	r7, d7254 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d7246:	4638      	mov	r0, r7
   d7248:	f7fd f83e 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d724c:	2110      	movs	r1, #16
   d724e:	4638      	mov	r0, r7
   d7250:	f005 f904 	bl	dc45c <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7254:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d7256:	6803      	ldr	r3, [r0, #0]
   d7258:	b183      	cbz	r3, d727c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d725a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d725c:	464a      	mov	r2, r9
   d725e:	e9cd 0300 	strd	r0, r3, [sp]
   d7262:	4641      	mov	r1, r8
   d7264:	4b0b      	ldr	r3, [pc, #44]	; (d7294 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d7266:	3004      	adds	r0, #4
   d7268:	f001 faa0 	bl	d87ac <os_thread_create>
   d726c:	b930      	cbnz	r0, d727c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d726e:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d7270:	7c1b      	ldrb	r3, [r3, #16]
   d7272:	b94b      	cbnz	r3, d7288 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d7274:	2001      	movs	r0, #1
   d7276:	f001 fb51 	bl	d891c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d727a:	e7f8      	b.n	d726e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d727c:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d727e:	2300      	movs	r3, #0
   d7280:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d7282:	b108      	cbz	r0, d7288 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d7284:	f7ff feaa 	bl	d6fdc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d7288:	4630      	mov	r0, r6
   d728a:	b003      	add	sp, #12
   d728c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7290:	000e02b8 	.word	0x000e02b8
   d7294:	000d6fad 	.word	0x000d6fad

000d7298 <_ZN17BackgroundPublish5startEv>:
{
   d7298:	b530      	push	{r4, r5, lr}
    if(!thread)
   d729a:	6843      	ldr	r3, [r0, #4]
{
   d729c:	b087      	sub	sp, #28
   d729e:	4604      	mov	r4, r0
    if(!thread)
   d72a0:	b9c3      	cbnz	r3, d72d4 <_ZN17BackgroundPublish5startEv+0x3c>
        os_mutex_create(&mutex);
   d72a2:	3008      	adds	r0, #8
   d72a4:	f001 fad2 	bl	d884c <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d72a8:	4b0b      	ldr	r3, [pc, #44]	; (d72d8 <_ZN17BackgroundPublish5startEv+0x40>)
   d72aa:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d72ac:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d72ae:	4b0b      	ldr	r3, [pc, #44]	; (d72dc <_ZN17BackgroundPublish5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d72b0:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d72b2:	9304      	str	r3, [sp, #16]
   d72b4:	f7fc feef 	bl	d4096 <_Znwj>
   d72b8:	4605      	mov	r5, r0
   d72ba:	b138      	cbz	r0, d72cc <_ZN17BackgroundPublish5startEv+0x34>
   d72bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d72c0:	9300      	str	r3, [sp, #0]
   d72c2:	4907      	ldr	r1, [pc, #28]	; (d72e0 <_ZN17BackgroundPublish5startEv+0x48>)
   d72c4:	2302      	movs	r3, #2
   d72c6:	aa02      	add	r2, sp, #8
   d72c8:	f7ff ff90 	bl	d71ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublish",
   d72cc:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d72ce:	a802      	add	r0, sp, #8
   d72d0:	f7fc fffa 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
}
   d72d4:	b007      	add	sp, #28
   d72d6:	bd30      	pop	{r4, r5, pc}
   d72d8:	000d71c1 	.word	0x000d71c1
   d72dc:	000d6f95 	.word	0x000d6f95
   d72e0:	000dfba0 	.word	0x000dfba0

000d72e4 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublish::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d72e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72e8:	4604      	mov	r4, r0
   d72ea:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d72ec:	6880      	ldr	r0, [r0, #8]
   d72ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d72f0:	4698      	mov	r8, r3
   d72f2:	460d      	mov	r5, r1
   d72f4:	4616      	mov	r6, r2
   d72f6:	f001 fab1 	bl	d885c <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d72fa:	6863      	ldr	r3, [r4, #4]
   d72fc:	b11b      	cbz	r3, d7306 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d72fe:	7b23      	ldrb	r3, [r4, #12]
   d7300:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d7304:	b133      	cbz	r3, d7314 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d7306:	68a0      	ldr	r0, [r4, #8]
   d7308:	f001 fab0 	bl	d886c <os_mutex_unlock>
    {
        return false;
   d730c:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d730e:	b005      	add	sp, #20
   d7310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7314:	68a0      	ldr	r0, [r4, #8]
   d7316:	f001 faa9 	bl	d886c <os_mutex_unlock>
    if(!name)
   d731a:	2d00      	cmp	r5, #0
   d731c:	d03d      	beq.n	d739a <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d731e:	2241      	movs	r2, #65	; 0x41
   d7320:	4629      	mov	r1, r5
   d7322:	f104 000d 	add.w	r0, r4, #13
   d7326:	f005 fef6 	bl	dd116 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d732a:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d732e:	b38e      	cbz	r6, d7394 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d7330:	f240 226f 	movw	r2, #623	; 0x26f
   d7334:	4631      	mov	r1, r6
   d7336:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d733a:	f005 feec 	bl	dd116 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d733e:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d7342:	2300      	movs	r3, #0
   d7344:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d7346:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d7348:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d734c:	b13b      	cbz	r3, d735e <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d734e:	2202      	movs	r2, #2
   d7350:	4639      	mov	r1, r7
   d7352:	4668      	mov	r0, sp
   d7354:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7356:	68fb      	ldr	r3, [r7, #12]
   d7358:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d735a:	68bb      	ldr	r3, [r7, #8]
   d735c:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d735e:	4629      	mov	r1, r5
   d7360:	4668      	mov	r0, sp
   d7362:	f7ff ff30 	bl	d71c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7366:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7368:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d736c:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7370:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7372:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d7374:	4668      	mov	r0, sp
   d7376:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d737a:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d737e:	9203      	str	r2, [sp, #12]
   d7380:	f7fc ffa2 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d7384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7386:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d738a:	2001      	movs	r0, #1
    event_flags = flags;
   d738c:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d7390:	7320      	strb	r0, [r4, #12]
    return true;
   d7392:	e7bc      	b.n	d730e <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d7394:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d7398:	e7d3      	b.n	d7342 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d739a:	4628      	mov	r0, r5
   d739c:	e7b7      	b.n	d730e <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>

000d739e <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d739e:	4770      	bx	lr

000d73a0 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d73a0:	b510      	push	{r4, lr}
}
   d73a2:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d73a4:	4604      	mov	r4, r0
}
   d73a6:	f005 f859 	bl	dc45c <_ZdlPvj>
   d73aa:	4620      	mov	r0, r4
   d73ac:	bd10      	pop	{r4, pc}

000d73ae <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d73ae:	6803      	ldr	r3, [r0, #0]
   d73b0:	b2c9      	uxtb	r1, r1
   d73b2:	689b      	ldr	r3, [r3, #8]
   d73b4:	4718      	bx	r3
	...

000d73b8 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d73b8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d73ba:	4d03      	ldr	r5, [pc, #12]	; (d73c8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d73bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d73c0:	e9c0 5100 	strd	r5, r1, [r0]
}
   d73c4:	bd30      	pop	{r4, r5, pc}
   d73c6:	bf00      	nop
   d73c8:	000dfbf8 	.word	0x000dfbf8

000d73cc <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d73cc:	6840      	ldr	r0, [r0, #4]
   d73ce:	f002 bc5d 	b.w	d9c8c <_ZN7TwoWire5beginEv>

000d73d2 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d73d2:	b510      	push	{r4, lr}
   d73d4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d73d6:	6800      	ldr	r0, [r0, #0]
   d73d8:	f002 fcb3 	bl	d9d42 <_ZN7TwoWire6unlockEv>
   d73dc:	4620      	mov	r0, r4
   d73de:	bd10      	pop	{r4, pc}

000d73e0 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d73e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73e4:	b08a      	sub	sp, #40	; 0x28
   d73e6:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d73e8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d73ea:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d73ec:	f002 fca0 	bl	d9d30 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d73f0:	221e      	movs	r2, #30
   d73f2:	2100      	movs	r1, #0
   d73f4:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d73f6:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d73f8:	f005 fe00 	bl	dcffc <memset>
		size_t framAddr = 0;
   d73fc:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d73fe:	b1ef      	cbz	r7, d743c <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7400:	6823      	ldr	r3, [r4, #0]
   d7402:	2f1e      	cmp	r7, #30
   d7404:	46b8      	mov	r8, r7
   d7406:	bf28      	it	cs
   d7408:	f04f 081e 	movcs.w	r8, #30
   d740c:	68dd      	ldr	r5, [r3, #12]
   d740e:	aa02      	add	r2, sp, #8
   d7410:	4643      	mov	r3, r8
   d7412:	4631      	mov	r1, r6
   d7414:	4620      	mov	r0, r4
   d7416:	47a8      	blx	r5
			if (!result) {
   d7418:	4605      	mov	r5, r0
   d741a:	b958      	cbnz	r0, d7434 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d741c:	480a      	ldr	r0, [pc, #40]	; (d7448 <_ZN6MB85RC5eraseEv+0x68>)
   d741e:	490b      	ldr	r1, [pc, #44]	; (d744c <_ZN6MB85RC5eraseEv+0x6c>)
   d7420:	4632      	mov	r2, r6
   d7422:	f7fd f83b 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7426:	a801      	add	r0, sp, #4
   d7428:	f7ff ffd3 	bl	d73d2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d742c:	4628      	mov	r0, r5
   d742e:	b00a      	add	sp, #40	; 0x28
   d7430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7434:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d7438:	4446      	add	r6, r8
		while(totalLen > 0) {
   d743a:	e7e0      	b.n	d73fe <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d743c:	a801      	add	r0, sp, #4
   d743e:	f7ff ffc8 	bl	d73d2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d7442:	2501      	movs	r5, #1
   d7444:	e7f2      	b.n	d742c <_ZN6MB85RC5eraseEv+0x4c>
   d7446:	bf00      	nop
   d7448:	2003e538 	.word	0x2003e538
   d744c:	000dfbc4 	.word	0x000dfbc4

000d7450 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7454:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7456:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7458:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d745a:	460d      	mov	r5, r1
   d745c:	4616      	mov	r6, r2
   d745e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d7460:	f002 fc66 	bl	d9d30 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7464:	b1a7      	cbz	r7, d7490 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7466:	68e1      	ldr	r1, [r4, #12]
   d7468:	6860      	ldr	r0, [r4, #4]
   d746a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d746e:	f002 fc40 	bl	d9cf2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7472:	0a29      	lsrs	r1, r5, #8
   d7474:	6860      	ldr	r0, [r4, #4]
   d7476:	f7ff ff9a 	bl	d73ae <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d747a:	4629      	mov	r1, r5
   d747c:	6860      	ldr	r0, [r4, #4]
   d747e:	f7ff ff96 	bl	d73ae <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d7482:	6860      	ldr	r0, [r4, #4]
   d7484:	2100      	movs	r1, #0
   d7486:	f002 fc4f 	bl	d9d28 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d748a:	b148      	cbz	r0, d74a0 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d748c:	2400      	movs	r4, #0
   d748e:	e000      	b.n	d7492 <_ZN6MB85RC8readDataEjPhj+0x42>
   d7490:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7492:	a801      	add	r0, sp, #4
   d7494:	f7ff ff9d 	bl	d73d2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d7498:	4620      	mov	r0, r4
   d749a:	b003      	add	sp, #12
   d749c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d74a0:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d74a2:	7b21      	ldrb	r1, [r4, #12]
   d74a4:	6860      	ldr	r0, [r4, #4]
   d74a6:	46b8      	mov	r8, r7
   d74a8:	bf28      	it	cs
   d74aa:	f04f 0820 	movcs.w	r8, #32
   d74ae:	2301      	movs	r3, #1
   d74b0:	4642      	mov	r2, r8
   d74b2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d74b6:	f002 fc06 	bl	d9cc6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d74ba:	f004 ff87 	bl	dc3cc <_Z19__fetch_global_Wirev>
   d74be:	6803      	ldr	r3, [r0, #0]
   d74c0:	691b      	ldr	r3, [r3, #16]
   d74c2:	4798      	blx	r3
   d74c4:	4540      	cmp	r0, r8
   d74c6:	dbe1      	blt.n	d748c <_ZN6MB85RC8readDataEjPhj+0x3c>
   d74c8:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d74cc:	f004 ff7e 	bl	dc3cc <_Z19__fetch_global_Wirev>
   d74d0:	6803      	ldr	r3, [r0, #0]
   d74d2:	695b      	ldr	r3, [r3, #20]
   d74d4:	4798      	blx	r3
   d74d6:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d74da:	454e      	cmp	r6, r9
   d74dc:	d1f6      	bne.n	d74cc <_ZN6MB85RC8readDataEjPhj+0x7c>
   d74de:	4445      	add	r5, r8
   d74e0:	eba7 0708 	sub.w	r7, r7, r8
   d74e4:	e7be      	b.n	d7464 <_ZN6MB85RC8readDataEjPhj+0x14>

000d74e6 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d74e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d74ea:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d74ec:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d74ee:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d74f0:	460e      	mov	r6, r1
   d74f2:	4690      	mov	r8, r2
   d74f4:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d74f6:	f002 fc1b 	bl	d9d30 <_ZN7TwoWire4lockEv>
   d74fa:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d74fe:	f1b9 0f00 	cmp.w	r9, #0
   d7502:	d02a      	beq.n	d755a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7504:	b34d      	cbz	r5, d755a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7506:	68e1      	ldr	r1, [r4, #12]
   d7508:	6860      	ldr	r0, [r4, #4]
   d750a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d750e:	f002 fbf0 	bl	d9cf2 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7512:	0a31      	lsrs	r1, r6, #8
   d7514:	6860      	ldr	r0, [r4, #4]
   d7516:	f7ff ff4a 	bl	d73ae <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d751a:	6860      	ldr	r0, [r4, #4]
   d751c:	4631      	mov	r1, r6
   d751e:	f7ff ff46 	bl	d73ae <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7522:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7526:	4647      	mov	r7, r8
   d7528:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d752c:	6860      	ldr	r0, [r4, #4]
   d752e:	f817 1b01 	ldrb.w	r1, [r7], #1
   d7532:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7534:	3d01      	subs	r5, #1
				wire.write(*data);
   d7536:	689b      	ldr	r3, [r3, #8]
   d7538:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d753a:	4555      	cmp	r5, sl
   d753c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d7540:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7542:	d001      	beq.n	d7548 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7544:	2d00      	cmp	r5, #0
   d7546:	d1f1      	bne.n	d752c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7548:	6860      	ldr	r0, [r4, #4]
   d754a:	2101      	movs	r1, #1
   d754c:	f002 fbec 	bl	d9d28 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7550:	2800      	cmp	r0, #0
   d7552:	d0d7      	beq.n	d7504 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7554:	f04f 0900 	mov.w	r9, #0
   d7558:	e7d1      	b.n	d74fe <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d755a:	a801      	add	r0, sp, #4
   d755c:	f7ff ff39 	bl	d73d2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d7560:	4648      	mov	r0, r9
   d7562:	b003      	add	sp, #12
   d7564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7568 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d756c:	b08b      	sub	sp, #44	; 0x2c
   d756e:	460e      	mov	r6, r1
   d7570:	4615      	mov	r5, r2
   d7572:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d7574:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7576:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7578:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d757a:	f002 fbd9 	bl	d9d30 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d757e:	42ae      	cmp	r6, r5
   d7580:	d229      	bcs.n	d75d6 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d7582:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d7584:	4425      	add	r5, r4
			while(numBytes > 0) {
   d7586:	b18c      	cbz	r4, d75ac <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d7588:	2c1e      	cmp	r4, #30
   d758a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d758c:	f8d8 3000 	ldr.w	r3, [r8]
   d7590:	bf28      	it	cs
   d7592:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7594:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d7596:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d759a:	aa02      	add	r2, sp, #8
   d759c:	463b      	mov	r3, r7
   d759e:	4631      	mov	r1, r6
   d75a0:	4640      	mov	r0, r8
				framAddrTo -= count;
   d75a2:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d75a4:	47c8      	blx	r9
				if (!result) {
   d75a6:	b948      	cbnz	r0, d75bc <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d75a8:	2400      	movs	r4, #0
   d75aa:	e000      	b.n	d75ae <_ZN6MB85RC8moveDataEjjj+0x46>
   d75ac:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d75ae:	a801      	add	r0, sp, #4
   d75b0:	f7ff ff0f 	bl	d73d2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d75b4:	4620      	mov	r0, r4
   d75b6:	b00b      	add	sp, #44	; 0x2c
   d75b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d75bc:	f8d8 3000 	ldr.w	r3, [r8]
   d75c0:	aa02      	add	r2, sp, #8
   d75c2:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d75c6:	4629      	mov	r1, r5
   d75c8:	463b      	mov	r3, r7
   d75ca:	4640      	mov	r0, r8
   d75cc:	47c8      	blx	r9
				if (!result) {
   d75ce:	2800      	cmp	r0, #0
   d75d0:	d0ea      	beq.n	d75a8 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d75d2:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d75d4:	e7d7      	b.n	d7586 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d75d6:	d9e9      	bls.n	d75ac <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d75d8:	2c00      	cmp	r4, #0
   d75da:	d0e7      	beq.n	d75ac <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d75dc:	f8d8 3000 	ldr.w	r3, [r8]
   d75e0:	2c1e      	cmp	r4, #30
   d75e2:	4627      	mov	r7, r4
   d75e4:	bf28      	it	cs
   d75e6:	271e      	movcs	r7, #30
   d75e8:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d75ec:	aa02      	add	r2, sp, #8
   d75ee:	463b      	mov	r3, r7
   d75f0:	4631      	mov	r1, r6
   d75f2:	4640      	mov	r0, r8
   d75f4:	47c8      	blx	r9
				if (!result) {
   d75f6:	2800      	cmp	r0, #0
   d75f8:	d0d6      	beq.n	d75a8 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d75fa:	f8d8 3000 	ldr.w	r3, [r8]
   d75fe:	aa02      	add	r2, sp, #8
   d7600:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7604:	4629      	mov	r1, r5
   d7606:	463b      	mov	r3, r7
   d7608:	4640      	mov	r0, r8
   d760a:	47c8      	blx	r9
				if (!result) {
   d760c:	2800      	cmp	r0, #0
   d760e:	d0cb      	beq.n	d75a8 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d7610:	443e      	add	r6, r7
				framAddrTo += count;
   d7612:	443d      	add	r5, r7
				numBytes -= count;
   d7614:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7616:	e7df      	b.n	d75d8 <_ZN6MB85RC8moveDataEjjj+0x70>

000d7618 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d7618:	6803      	ldr	r3, [r0, #0]
   d761a:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d761c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d7620:	2101      	movs	r1, #1
   d7622:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d7626:	4770      	bx	lr

000d7628 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d7628:	2a02      	cmp	r2, #2
   d762a:	d006      	beq.n	d763a <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d762c:	2a03      	cmp	r2, #3
   d762e:	d002      	beq.n	d7636 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d7630:	2a01      	cmp	r2, #1
   d7632:	d100      	bne.n	d7636 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7634:	6001      	str	r1, [r0, #0]
	}
   d7636:	2000      	movs	r0, #0
   d7638:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d763a:	680b      	ldr	r3, [r1, #0]
   d763c:	6003      	str	r3, [r0, #0]
	}
   d763e:	e7fa      	b.n	d7636 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d7640 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7640:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7642:	4603      	mov	r3, r0
	switch (__op)
   d7644:	d102      	bne.n	d764c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7646:	6001      	str	r1, [r0, #0]
      }
   d7648:	2000      	movs	r0, #0
   d764a:	4770      	bx	lr
	  switch (__op)
   d764c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d764e:	bf04      	itt	eq
   d7650:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7654:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7658:	e7f6      	b.n	d7648 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d765a <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d765a:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d765c:	6842      	ldr	r2, [r0, #4]
   d765e:	4603      	mov	r3, r0
   d7660:	1054      	asrs	r4, r2, #1
   d7662:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7666:	07d2      	lsls	r2, r2, #31
   d7668:	bf48      	it	mi
   d766a:	590a      	ldrmi	r2, [r1, r4]
   d766c:	681b      	ldr	r3, [r3, #0]
      }
   d766e:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7672:	bf48      	it	mi
   d7674:	58d3      	ldrmi	r3, [r2, r3]
   d7676:	4718      	bx	r3

000d7678 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d7678:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d767c:	4601      	mov	r1, r0
    if (stateHandler) {
   d767e:	b11b      	cbz	r3, d7688 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7680:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d7684:	30c0      	adds	r0, #192	; 0xc0
   d7686:	4718      	bx	r3
}
   d7688:	4770      	bx	lr
	...

000d768c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d768e:	4d12      	ldr	r5, [pc, #72]	; (d76d8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d7690:	4608      	mov	r0, r1
        eventData = "";
   d7692:	2a00      	cmp	r2, #0
   d7694:	bf18      	it	ne
   d7696:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d7698:	460f      	mov	r7, r1
   d769a:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d769c:	f005 fd21 	bl	dd0e2 <strlen>
   d76a0:	2840      	cmp	r0, #64	; 0x40
   d76a2:	d817      	bhi.n	d76d4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d76a4:	4628      	mov	r0, r5
   d76a6:	f005 fd1c 	bl	dd0e2 <strlen>
   d76aa:	f240 236e 	movw	r3, #622	; 0x26e
   d76ae:	4298      	cmp	r0, r3
   d76b0:	d810      	bhi.n	d76d4 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d76b2:	3043      	adds	r0, #67	; 0x43
   d76b4:	f7fc fcf1 	bl	d409a <_Znaj>
    if (event) {
   d76b8:	4604      	mov	r4, r0
   d76ba:	b148      	cbz	r0, d76d0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d76bc:	4639      	mov	r1, r7
        event->flags = flags;
   d76be:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d76c2:	f005 fce8 	bl	dd096 <strcpy>
        strcpy(event->eventData, eventData);
   d76c6:	4629      	mov	r1, r5
   d76c8:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d76cc:	f005 fce3 	bl	dd096 <strcpy>
}
   d76d0:	4620      	mov	r0, r4
   d76d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d76d4:	2400      	movs	r4, #0
   d76d6:	e7fb      	b.n	d76d0 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d76d8:	000e0135 	.word	0x000e0135

000d76dc <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d76dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d76de:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d76e0:	460a      	mov	r2, r1
   d76e2:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d76e4:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d76e6:	1d01      	adds	r1, r0, #4
   d76e8:	a808      	add	r0, sp, #32
   d76ea:	f000 fdf1 	bl	d82d0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d76ee:	9808      	ldr	r0, [sp, #32]
   d76f0:	2100      	movs	r1, #0
   d76f2:	f006 fc57 	bl	ddfa4 <open>
   d76f6:	4605      	mov	r5, r0
   d76f8:	a808      	add	r0, sp, #32
   d76fa:	f003 ff75 	bl	db5e8 <_ZN6StringD1Ev>
    if (fd) {
   d76fe:	2d00      	cmp	r5, #0
   d7700:	d060      	beq.n	d77c4 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d7702:	a908      	add	r1, sp, #32
   d7704:	4628      	mov	r0, r5
   d7706:	f006 fc3b 	bl	ddf80 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d770a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d770c:	492e      	ldr	r1, [pc, #184]	; (d77c8 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d770e:	482f      	ldr	r0, [pc, #188]	; (d77cc <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7710:	4632      	mov	r2, r6
   d7712:	f7fe fed9 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d7716:	2200      	movs	r2, #0
   d7718:	4611      	mov	r1, r2
   d771a:	4628      	mov	r0, r5
   d771c:	f006 fc38 	bl	ddf90 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d7720:	2208      	movs	r2, #8
   d7722:	a906      	add	r1, sp, #24
   d7724:	4628      	mov	r0, r5
   d7726:	f006 fc51 	bl	ddfcc <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d772a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d772c:	2f4a      	cmp	r7, #74	; 0x4a
   d772e:	dd39      	ble.n	d77a4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d7730:	4b27      	ldr	r3, [pc, #156]	; (d77d0 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d7732:	9a06      	ldr	r2, [sp, #24]
   d7734:	429a      	cmp	r2, r3
   d7736:	d135      	bne.n	d77a4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d7738:	4b26      	ldr	r3, [pc, #152]	; (d77d4 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d773a:	9a07      	ldr	r2, [sp, #28]
   d773c:	429a      	cmp	r2, r3
   d773e:	d131      	bne.n	d77a4 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d7740:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d7744:	4610      	mov	r0, r2
   d7746:	9205      	str	r2, [sp, #20]
   d7748:	f7fc fca7 	bl	d409a <_Znaj>
            if (result) {
   d774c:	4604      	mov	r4, r0
   d774e:	b1c0      	cbz	r0, d7782 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d7750:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d7752:	4601      	mov	r1, r0
   d7754:	9a05      	ldr	r2, [sp, #20]
   d7756:	4628      	mov	r0, r5
   d7758:	f006 fc38 	bl	ddfcc <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d775c:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d7760:	b9ab      	cbnz	r3, d778e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d7762:	1c63      	adds	r3, r4, #1
   d7764:	4618      	mov	r0, r3
   d7766:	9305      	str	r3, [sp, #20]
   d7768:	f005 fcbb 	bl	dd0e2 <strlen>
   d776c:	283f      	cmp	r0, #63	; 0x3f
   d776e:	9b05      	ldr	r3, [sp, #20]
   d7770:	d80d      	bhi.n	d778e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d7772:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d7776:	9200      	str	r2, [sp, #0]
   d7778:	4917      	ldr	r1, [pc, #92]	; (d77d8 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d777a:	4814      	ldr	r0, [pc, #80]	; (d77cc <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d777c:	4632      	mov	r2, r6
   d777e:	f7fe fea3 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d7782:	4628      	mov	r0, r5
   d7784:	f006 fbf4 	bl	ddf70 <close>
}
   d7788:	4620      	mov	r0, r4
   d778a:	b01f      	add	sp, #124	; 0x7c
   d778c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d778e:	4913      	ldr	r1, [pc, #76]	; (d77dc <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d7790:	480e      	ldr	r0, [pc, #56]	; (d77cc <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d7792:	4632      	mov	r2, r6
   d7794:	f7fe fe98 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d7798:	2143      	movs	r1, #67	; 0x43
   d779a:	4620      	mov	r0, r4
   d779c:	f004 fe5e 	bl	dc45c <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d77a0:	2400      	movs	r4, #0
   d77a2:	e7ee      	b.n	d7782 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d77a4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d77a8:	9302      	str	r3, [sp, #8]
   d77aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d77ae:	9301      	str	r3, [sp, #4]
   d77b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d77b4:	9300      	str	r3, [sp, #0]
   d77b6:	490a      	ldr	r1, [pc, #40]	; (d77e0 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d77b8:	9b06      	ldr	r3, [sp, #24]
   d77ba:	4804      	ldr	r0, [pc, #16]	; (d77cc <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d77bc:	4632      	mov	r2, r6
   d77be:	f7fe fe83 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
   d77c2:	e7ed      	b.n	d77a0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d77c4:	462c      	mov	r4, r5
    return result;
   d77c6:	e7df      	b.n	d7788 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d77c8:	000dfc0c 	.word	0x000dfc0c
   d77cc:	2003e454 	.word	0x2003e454
   d77d0:	31b67663 	.word	0x31b67663
   d77d4:	00410801 	.word	0x00410801
   d77d8:	000dfc20 	.word	0x000dfc20
   d77dc:	000dfc42 	.word	0x000dfc42
   d77e0:	000dfc70 	.word	0x000dfc70

000d77e4 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d77e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d77e8:	4680      	mov	r8, r0
   d77ea:	4b29      	ldr	r3, [pc, #164]	; (d7890 <_ZN17PublishQueuePosixC1Ev+0xac>)
   d77ec:	f848 3b04 	str.w	r3, [r8], #4
   d77f0:	4604      	mov	r4, r0
   d77f2:	4640      	mov	r0, r8
   d77f4:	f000 fc84 	bl	d8100 <_ZN14SequentialFileC1Ev>
   d77f8:	2202      	movs	r2, #2
   d77fa:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d77fc:	2500      	movs	r5, #0
   d77fe:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d7802:	2308      	movs	r3, #8
   d7804:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d7806:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d780a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d780e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d7812:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d7816:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7818:	2020      	movs	r0, #32
   d781a:	f7fc fc3c 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d781e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d7820:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d7822:	3e01      	subs	r6, #1
   d7824:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d7826:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d782a:	4607      	mov	r7, r0
   d782c:	f44f 7000 	mov.w	r0, #512	; 0x200
   d7830:	f7fc fc31 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7834:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d7838:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d783c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7840:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7848:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d784c:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d7850:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d7854:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d7858:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d785c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d7860:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d7864:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d7868:	490a      	ldr	r1, [pc, #40]	; (d7894 <_ZN17PublishQueuePosixC1Ev+0xb0>)
	_M_node = __new_node;
   d786a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d786e:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d7872:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
   d7876:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
   d787a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d787e:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d7882:	4640      	mov	r0, r8
   d7884:	f000 fc82 	bl	d818c <_ZN14SequentialFile11withDirPathEPKc>
}
   d7888:	4620      	mov	r0, r4
   d788a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d788e:	bf00      	nop
   d7890:	000dfeb4 	.word	0x000dfeb4
   d7894:	000dfcb5 	.word	0x000dfcb5

000d7898 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d7898:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d789a:	4c06      	ldr	r4, [pc, #24]	; (d78b4 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d789c:	6823      	ldr	r3, [r4, #0]
   d789e:	b93b      	cbnz	r3, d78b0 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d78a0:	20d0      	movs	r0, #208	; 0xd0
   d78a2:	f7fc fbf8 	bl	d4096 <_Znwj>
   d78a6:	4605      	mov	r5, r0
   d78a8:	b108      	cbz	r0, d78ae <_ZN17PublishQueuePosix8instanceEv+0x16>
   d78aa:	f7ff ff9b 	bl	d77e4 <_ZN17PublishQueuePosixC1Ev>
   d78ae:	6025      	str	r5, [r4, #0]
}
   d78b0:	6820      	ldr	r0, [r4, #0]
   d78b2:	bd38      	pop	{r3, r4, r5, pc}
   d78b4:	2003e458 	.word	0x2003e458

000d78b8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d78b8:	b510      	push	{r4, lr}
   d78ba:	e9d1 2300 	ldrd	r2, r3, [r1]
   d78be:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d78c0:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d78c2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d78c4:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d78c6:	b90a      	cbnz	r2, d78cc <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d78c8:	07d9      	lsls	r1, r3, #31
   d78ca:	d505      	bpl.n	d78d8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d78cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d78d0:	4b0f      	ldr	r3, [pc, #60]	; (d7910 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d78d2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d78d4:	4b0f      	ldr	r3, [pc, #60]	; (d7914 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d78d6:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78d8:	ab02      	add	r3, sp, #8
   d78da:	e893 0003 	ldmia.w	r3, {r0, r1}
   d78de:	466a      	mov	r2, sp
   d78e0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d78e4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d78e8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d78ec:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78f0:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d78f2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d78f6:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78f8:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78fa:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d78fc:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d78fe:	4618      	mov	r0, r3
   d7900:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7902:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7904:	9105      	str	r1, [sp, #20]
   d7906:	f7fc fcdf 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
	}
   d790a:	4620      	mov	r0, r4
   d790c:	b006      	add	sp, #24
   d790e:	bd10      	pop	{r4, pc}
   d7910:	000d765b 	.word	0x000d765b
   d7914:	000d7641 	.word	0x000d7641

000d7918 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d7918:	b513      	push	{r0, r1, r4, lr}
   d791a:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d791c:	f001 faca 	bl	d8eb4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d7920:	b180      	cbz	r0, d7944 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d7922:	f001 f80b 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d7926:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d792a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d792e:	4b06      	ldr	r3, [pc, #24]	; (d7948 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>)
        stateTime = millis();
   d7930:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d7934:	9300      	str	r3, [sp, #0]
   d7936:	4669      	mov	r1, sp
   d7938:	2300      	movs	r3, #0
   d793a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d793e:	9301      	str	r3, [sp, #4]
   d7940:	f7ff ffba 	bl	d78b8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7944:	b002      	add	sp, #8
   d7946:	bd10      	pop	{r4, pc}
   d7948:	000d7a85 	.word	0x000d7a85

000d794c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      ~lock_guard()
   d794c:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d794e:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d7950:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d7952:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d7954:	f000 ffaa 	bl	d88ac <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7958:	4620      	mov	r0, r4
   d795a:	bd10      	pop	{r4, pc}

000d795c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d795c:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d795e:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d7960:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d7962:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d7964:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d7966:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d7968:	d002      	beq.n	d7970 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d796a:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d796c:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d796e:	bd10      	pop	{r4, pc}
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d7970:	68c0      	ldr	r0, [r0, #12]
   d7972:	f7fc fb94 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d7976:	6963      	ldr	r3, [r4, #20]
   d7978:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d797a:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d797c:	685b      	ldr	r3, [r3, #4]
   d797e:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7980:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d7984:	6122      	str	r2, [r4, #16]
   d7986:	e7f1      	b.n	d796c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d7988 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d7988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d798c:	b087      	sub	sp, #28
   d798e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7990:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d7992:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d7994:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d7a40 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d7998:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d7a44 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d799c:	f000 ff7e 	bl	d889c <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d79a0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d7a48 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d79a4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d79a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d79ac:	4293      	cmp	r3, r2
   d79ae:	d105      	bne.n	d79bc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d79b0:	a801      	add	r0, sp, #4
   d79b2:	f7ff ffcb 	bl	d794c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d79b6:	b007      	add	sp, #28
   d79b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d79bc:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d79c0:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d79c4:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d79c6:	f7ff ffc9 	bl	d795c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d79ca:	4640      	mov	r0, r8
   d79cc:	f000 fe74 	bl	d86b8 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d79d0:	2300      	movs	r3, #0
   d79d2:	4602      	mov	r2, r0
   d79d4:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d79d6:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d79d8:	a802      	add	r0, sp, #8
   d79da:	f000 fc79 	bl	d82d0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d79de:	9802      	ldr	r0, [sp, #8]
   d79e0:	f240 2102 	movw	r1, #514	; 0x202
   d79e4:	f006 fade 	bl	ddfa4 <open>
   d79e8:	4605      	mov	r5, r0
   d79ea:	a802      	add	r0, sp, #8
   d79ec:	f003 fdfc 	bl	db5e8 <_ZN6StringD1Ev>
            if (fd) {
   d79f0:	b1cd      	cbz	r5, d7a26 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d79f2:	2208      	movs	r2, #8
   d79f4:	eb0d 0102 	add.w	r1, sp, r2
   d79f8:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d79fa:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d79fe:	f006 faf7 	bl	ddff0 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d7a02:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d7a06:	f005 fb6c 	bl	dd0e2 <strlen>
   d7a0a:	4639      	mov	r1, r7
   d7a0c:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d7a10:	4628      	mov	r0, r5
   d7a12:	f006 faed 	bl	ddff0 <write>
                close(fd);
   d7a16:	4628      	mov	r0, r5
   d7a18:	f006 faaa 	bl	ddf70 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d7a1c:	4807      	ldr	r0, [pc, #28]	; (d7a3c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d7a1e:	4632      	mov	r2, r6
   d7a20:	4659      	mov	r1, fp
   d7a22:	f7fe fd51 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d7a26:	4631      	mov	r1, r6
   d7a28:	4640      	mov	r0, r8
   d7a2a:	f000 fe85 	bl	d8738 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d7a2e:	2f00      	cmp	r7, #0
   d7a30:	d0b8      	beq.n	d79a4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d7a32:	2143      	movs	r1, #67	; 0x43
   d7a34:	4638      	mov	r0, r7
   d7a36:	f004 fd11 	bl	dc45c <_ZdlPvj>
   d7a3a:	e7b1      	b.n	d79a0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d7a3c:	2003e454 	.word	0x2003e454
   d7a40:	31b67663 	.word	0x31b67663
   d7a44:	00410801 	.word	0x00410801
   d7a48:	000dfcc3 	.word	0x000dfcc3

000d7a4c <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d7a4c:	2900      	cmp	r1, #0
   d7a4e:	bf08      	it	eq
   d7a50:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d7a54:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d7a56:	d005      	beq.n	d7a64 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d7a58:	2900      	cmp	r1, #0
   d7a5a:	bf08      	it	eq
   d7a5c:	2840      	cmpeq	r0, #64	; 0x40
   d7a5e:	d10b      	bne.n	d7a78 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d7a60:	2a09      	cmp	r2, #9
   d7a62:	d109      	bne.n	d7a78 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d7a64:	4905      	ldr	r1, [pc, #20]	; (d7a7c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d7a66:	4806      	ldr	r0, [pc, #24]	; (d7a80 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d7a68:	f7fe fd2e 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d7a6c:	f7ff ff14 	bl	d7898 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d7a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d7a74:	f7ff bf88 	b.w	d7988 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d7a78:	bd38      	pop	{r3, r4, r5, pc}
   d7a7a:	bf00      	nop
   d7a7c:	000dfce0 	.word	0x000dfce0
   d7a80:	2003e454 	.word	0x2003e454

000d7a84 <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d7a84:	b570      	push	{r4, r5, r6, lr}
   d7a86:	b086      	sub	sp, #24
   d7a88:	4604      	mov	r4, r0
   d7a8a:	f001 fa13 	bl	d8eb4 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d7a8e:	b948      	cbnz	r0, d7aa4 <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d7a90:	4b40      	ldr	r3, [pc, #256]	; (d7b94 <_ZN17PublishQueuePosix9stateWaitEv+0x110>)
   d7a92:	a902      	add	r1, sp, #8
   d7a94:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d7a98:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d7a9c:	f7ff ff0c 	bl	d78b8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7aa0:	b006      	add	sp, #24
   d7aa2:	bd70      	pop	{r4, r5, r6, pc}
   d7aa4:	f000 ff4a 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d7aa8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d7aac:	1ac0      	subs	r0, r0, r3
   d7aae:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d7ab2:	4298      	cmp	r0, r3
   d7ab4:	d3f4      	bcc.n	d7aa0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    if (pausePublishing) {
   d7ab6:	f894 10b2 	ldrb.w	r1, [r4, #178]	; 0xb2
   d7aba:	2900      	cmp	r1, #0
   d7abc:	d1f0      	bne.n	d7aa0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d7abe:	1d26      	adds	r6, r4, #4
   d7ac0:	4630      	mov	r0, r6
   d7ac2:	f000 fe05 	bl	d86d0 <_ZN14SequentialFile16getFileFromQueueEb>
   d7ac6:	4601      	mov	r1, r0
   d7ac8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d7acc:	2800      	cmp	r0, #0
   d7ace:	d050      	beq.n	d7b72 <_ZN17PublishQueuePosix9stateWaitEv+0xee>
        curEvent = readQueueFile(curFileNum);
   d7ad0:	4620      	mov	r0, r4
   d7ad2:	f7ff fe03 	bl	d76dc <_ZN17PublishQueuePosix13readQueueFileEi>
   d7ad6:	4605      	mov	r5, r0
   d7ad8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d7adc:	2800      	cmp	r0, #0
   d7ade:	d033      	beq.n	d7b48 <_ZN17PublishQueuePosix9stateWaitEv+0xc4>
   d7ae0:	f000 ff2c 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d7ae4:	ad02      	add	r5, sp, #8
   d7ae6:	2600      	movs	r6, #0
   d7ae8:	4b2b      	ldr	r3, [pc, #172]	; (d7b98 <_ZN17PublishQueuePosix9stateWaitEv+0x114>)
        stateTime = millis();
   d7aea:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d7aee:	4629      	mov	r1, r5
   d7af0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d7af4:	9302      	str	r3, [sp, #8]
   d7af6:	9603      	str	r6, [sp, #12]
   d7af8:	f7ff fede 	bl	d78b8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d7afc:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d7b00:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d7b04:	9200      	str	r2, [sp, #0]
   d7b06:	4925      	ldr	r1, [pc, #148]	; (d7b9c <_ZN17PublishQueuePosix9stateWaitEv+0x118>)
   d7b08:	4a25      	ldr	r2, [pc, #148]	; (d7ba0 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
        publishComplete = false;
   d7b0a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d7b0e:	42b0      	cmp	r0, r6
   d7b10:	bf08      	it	eq
   d7b12:	460a      	moveq	r2, r1
   d7b14:	3301      	adds	r3, #1
   d7b16:	4923      	ldr	r1, [pc, #140]	; (d7ba4 <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
   d7b18:	4823      	ldr	r0, [pc, #140]	; (d7ba8 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d7b1a:	f7fe fcd5 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublish::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d7b1e:	f7ff fa97 	bl	d7050 <_ZN17BackgroundPublish8instanceEv>
   d7b22:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d7b26:	4b21      	ldr	r3, [pc, #132]	; (d7bac <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
   d7b28:	9305      	str	r3, [sp, #20]
   d7b2a:	e9cd 5600 	strd	r5, r6, [sp]
   d7b2e:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d7b30:	4b1f      	ldr	r3, [pc, #124]	; (d7bb0 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7b32:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d7b34:	9304      	str	r3, [sp, #16]
   d7b36:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7b3a:	3242      	adds	r2, #66	; 0x42
   d7b3c:	f7ff fbd2 	bl	d72e4 <_ZN17BackgroundPublish7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d7b40:	4628      	mov	r0, r5
   d7b42:	f7fc fbc1 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
   d7b46:	e7ab      	b.n	d7aa0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d7b48:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d7b4c:	4919      	ldr	r1, [pc, #100]	; (d7bb4 <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d7b4e:	4816      	ldr	r0, [pc, #88]	; (d7ba8 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d7b50:	f7fc fca4 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d7b54:	2101      	movs	r1, #1
   d7b56:	4630      	mov	r0, r6
   d7b58:	f000 fdba 	bl	d86d0 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d7b5c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d7b60:	462a      	mov	r2, r5
   d7b62:	4630      	mov	r0, r6
   d7b64:	f000 fbf0 	bl	d8348 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d7b68:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d7b6c:	2b00      	cmp	r3, #0
   d7b6e:	d1b7      	bne.n	d7ae0 <_ZN17PublishQueuePosix9stateWaitEv+0x5c>
   d7b70:	e796      	b.n	d7aa0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d7b72:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d7b76:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d7b7a:	429a      	cmp	r2, r3
   d7b7c:	d007      	beq.n	d7b8e <_ZN17PublishQueuePosix9stateWaitEv+0x10a>
            curEvent = ramQueue.front();
   d7b7e:	681b      	ldr	r3, [r3, #0]
   d7b80:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d7b84:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d7b88:	f7ff fee8 	bl	d795c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d7b8c:	e7ec      	b.n	d7b68 <_ZN17PublishQueuePosix9stateWaitEv+0xe4>
            curEvent = NULL;
   d7b8e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d7b92:	e785      	b.n	d7aa0 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d7b94:	000d7919 	.word	0x000d7919
   d7b98:	000d7f35 	.word	0x000d7f35
   d7b9c:	000dfd0f 	.word	0x000dfd0f
   d7ba0:	000dffb0 	.word	0x000dffb0
   d7ba4:	000dfd30 	.word	0x000dfd30
   d7ba8:	2003e454 	.word	0x2003e454
   d7bac:	000d7619 	.word	0x000d7619
   d7bb0:	000d7629 	.word	0x000d7629
   d7bb4:	000dfd13 	.word	0x000dfd13

000d7bb8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d7bb8:	68c3      	ldr	r3, [r0, #12]
   d7bba:	68ca      	ldr	r2, [r1, #12]
   d7bbc:	1a9b      	subs	r3, r3, r2
   d7bbe:	109b      	asrs	r3, r3, #2
   d7bc0:	1e5a      	subs	r2, r3, #1
   d7bc2:	e9d0 3000 	ldrd	r3, r0, [r0]
   d7bc6:	1a1b      	subs	r3, r3, r0
   d7bc8:	109b      	asrs	r3, r3, #2
   d7bca:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d7bce:	6888      	ldr	r0, [r1, #8]
   d7bd0:	680a      	ldr	r2, [r1, #0]
   d7bd2:	1a80      	subs	r0, r0, r2
    }
   d7bd4:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d7bd8:	4770      	bx	lr
	...

000d7bdc <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d7bdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7be0:	4604      	mov	r4, r0
   d7be2:	9001      	str	r0, [sp, #4]
   d7be4:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d7be6:	f000 fe59 	bl	d889c <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d7bea:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d7bee:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d7bf2:	f7ff ffe1 	bl	d7bb8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d7bf6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d7bf8:	4283      	cmp	r3, r0
   d7bfa:	d202      	bcs.n	d7c02 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d7bfc:	4620      	mov	r0, r4
   d7bfe:	f7ff fec3 	bl	d7988 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d7c02:	f8df 8048 	ldr.w	r8, [pc, #72]	; d7c4c <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d7c06:	4f10      	ldr	r7, [pc, #64]	; (d7c48 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d7c08:	1d26      	adds	r6, r4, #4
   d7c0a:	4630      	mov	r0, r6
   d7c0c:	f000 fdae 	bl	d876c <_ZNK14SequentialFile11getQueueLenEv>
   d7c10:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d7c12:	4298      	cmp	r0, r3
   d7c14:	dc05      	bgt.n	d7c22 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d7c16:	a801      	add	r0, sp, #4
   d7c18:	f7ff fe98 	bl	d794c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d7c1c:	b002      	add	sp, #8
   d7c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d7c22:	2101      	movs	r1, #1
   d7c24:	4630      	mov	r0, r6
   d7c26:	f000 fd53 	bl	d86d0 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d7c2a:	4605      	mov	r5, r0
   d7c2c:	2800      	cmp	r0, #0
   d7c2e:	d0ec      	beq.n	d7c0a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d7c30:	4601      	mov	r1, r0
   d7c32:	2200      	movs	r2, #0
   d7c34:	4630      	mov	r0, r6
   d7c36:	f000 fb87 	bl	d8348 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d7c3a:	462a      	mov	r2, r5
   d7c3c:	4641      	mov	r1, r8
   d7c3e:	4638      	mov	r0, r7
   d7c40:	f7fc fc2c 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
   d7c44:	e7e1      	b.n	d7c0a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d7c46:	bf00      	nop
   d7c48:	2003e454 	.word	0x2003e454
   d7c4c:	000dfd4f 	.word	0x000dfd4f

000d7c50 <_ZN17PublishQueuePosix16withRamQueueSizeEj>:
PublishQueuePosix &PublishQueuePosix::withRamQueueSize(size_t size) { 
   d7c50:	b510      	push	{r4, lr}
    if (stateHandler) {
   d7c52:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    ramQueueSize = size;
   d7c56:	66c1      	str	r1, [r0, #108]	; 0x6c
PublishQueuePosix &PublishQueuePosix::withRamQueueSize(size_t size) { 
   d7c58:	4604      	mov	r4, r0
   d7c5a:	460a      	mov	r2, r1
    if (stateHandler) {
   d7c5c:	b133      	cbz	r3, d7c6c <_ZN17PublishQueuePosix16withRamQueueSizeEj+0x1c>
        _log.trace("withRamQueueSize(%u)", ramQueueSize);
   d7c5e:	4804      	ldr	r0, [pc, #16]	; (d7c70 <_ZN17PublishQueuePosix16withRamQueueSizeEj+0x20>)
   d7c60:	4904      	ldr	r1, [pc, #16]	; (d7c74 <_ZN17PublishQueuePosix16withRamQueueSizeEj+0x24>)
   d7c62:	f7fe fc31 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        checkQueueLimits();
   d7c66:	4620      	mov	r0, r4
   d7c68:	f7ff ffb8 	bl	d7bdc <_ZN17PublishQueuePosix16checkQueueLimitsEv>
}
   d7c6c:	4620      	mov	r0, r4
   d7c6e:	bd10      	pop	{r4, pc}
   d7c70:	2003e454 	.word	0x2003e454
   d7c74:	000dfd62 	.word	0x000dfd62

000d7c78 <_ZN17PublishQueuePosix17withFileQueueSizeEj>:
PublishQueuePosix &PublishQueuePosix::withFileQueueSize(size_t size) {
   d7c78:	b510      	push	{r4, lr}
    if (stateHandler) {
   d7c7a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    fileQueueSize = size; 
   d7c7e:	6701      	str	r1, [r0, #112]	; 0x70
PublishQueuePosix &PublishQueuePosix::withFileQueueSize(size_t size) {
   d7c80:	4604      	mov	r4, r0
   d7c82:	460a      	mov	r2, r1
    if (stateHandler) {
   d7c84:	b133      	cbz	r3, d7c94 <_ZN17PublishQueuePosix17withFileQueueSizeEj+0x1c>
        _log.trace("withFileQueueSize(%u)", fileQueueSize);
   d7c86:	4804      	ldr	r0, [pc, #16]	; (d7c98 <_ZN17PublishQueuePosix17withFileQueueSizeEj+0x20>)
   d7c88:	4904      	ldr	r1, [pc, #16]	; (d7c9c <_ZN17PublishQueuePosix17withFileQueueSizeEj+0x24>)
   d7c8a:	f7fe fc1d 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        checkQueueLimits();
   d7c8e:	4620      	mov	r0, r4
   d7c90:	f7ff ffa4 	bl	d7bdc <_ZN17PublishQueuePosix16checkQueueLimitsEv>
}
   d7c94:	4620      	mov	r0, r4
   d7c96:	bd10      	pop	{r4, pc}
   d7c98:	2003e454 	.word	0x2003e454
   d7c9c:	000dfd77 	.word	0x000dfd77

000d7ca0 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d7ca0:	b513      	push	{r0, r1, r4, lr}
   d7ca2:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d7ca4:	2000      	movs	r0, #0
   d7ca6:	f001 f8a3 	bl	d8df0 <system_thread_get_state>
   d7caa:	2801      	cmp	r0, #1
   d7cac:	d005      	beq.n	d7cba <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d7cae:	4912      	ldr	r1, [pc, #72]	; (d7cf8 <_ZN17PublishQueuePosix5setupEv+0x58>)
   d7cb0:	4812      	ldr	r0, [pc, #72]	; (d7cfc <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d7cb2:	f7fc fc0a 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
}
   d7cb6:	b002      	add	sp, #8
   d7cb8:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d7cba:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d7cbe:	f000 fddd 	bl	d887c <os_mutex_recursive_create>
   d7cc2:	4a0f      	ldr	r2, [pc, #60]	; (d7d00 <_ZN17PublishQueuePosix5setupEv+0x60>)
   d7cc4:	2300      	movs	r3, #0
   d7cc6:	2100      	movs	r1, #0
   d7cc8:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d7ccc:	f001 f868 	bl	d8da0 <system_subscribe_event>
    BackgroundPublish::instance().start();
   d7cd0:	f7ff f9be 	bl	d7050 <_ZN17BackgroundPublish8instanceEv>
   d7cd4:	f7ff fae0 	bl	d7298 <_ZN17BackgroundPublish5startEv>
    fileQueue.scanDir();
   d7cd8:	1d20      	adds	r0, r4, #4
   d7cda:	f000 fc75 	bl	d85c8 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d7cde:	4620      	mov	r0, r4
   d7ce0:	f7ff ff7c 	bl	d7bdc <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d7ce4:	4b07      	ldr	r3, [pc, #28]	; (d7d04 <_ZN17PublishQueuePosix5setupEv+0x64>)
   d7ce6:	9300      	str	r3, [sp, #0]
   d7ce8:	4669      	mov	r1, sp
   d7cea:	2300      	movs	r3, #0
   d7cec:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d7cf0:	9301      	str	r3, [sp, #4]
   d7cf2:	f7ff fde1 	bl	d78b8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7cf6:	e7de      	b.n	d7cb6 <_ZN17PublishQueuePosix5setupEv+0x16>
   d7cf8:	000dfd8d 	.word	0x000dfd8d
   d7cfc:	2003e454 	.word	0x2003e454
   d7d00:	000d7a4d 	.word	0x000d7a4d
   d7d04:	000d7919 	.word	0x000d7919

000d7d08 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d7d08:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d7d0a:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d7d0c:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d7d0e:	b163      	cbz	r3, d7d2a <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d7d10:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d7d12:	6945      	ldr	r5, [r0, #20]
   d7d14:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d7d16:	42ae      	cmp	r6, r5
   d7d18:	d904      	bls.n	d7d24 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d7d1a:	f855 0b04 	ldr.w	r0, [r5], #4
   d7d1e:	f7fc f9be 	bl	d409e <_ZdlPv>
   d7d22:	e7f8      	b.n	d7d16 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d7d24:	6820      	ldr	r0, [r4, #0]
   d7d26:	f7fc f9ba 	bl	d409e <_ZdlPv>
    }
   d7d2a:	4620      	mov	r0, r4
   d7d2c:	bd70      	pop	{r4, r5, r6, pc}

000d7d2e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d7d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7d32:	4606      	mov	r6, r0
   d7d34:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d7d36:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7d38:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d7d3a:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d7d3c:	1a47      	subs	r7, r0, r1
   d7d3e:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d7d42:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d7d44:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d7d48:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d7d4a:	d927      	bls.n	d7d9c <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d7d4c:	1b5d      	subs	r5, r3, r5
   d7d4e:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d7d50:	6832      	ldr	r2, [r6, #0]
   d7d52:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d7d54:	b10c      	cbz	r4, d7d5a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d7d56:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d7d5a:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d7d5c:	4414      	add	r4, r2
   d7d5e:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d7d60:	42a1      	cmp	r1, r4
   d7d62:	eba3 0201 	sub.w	r2, r3, r1
   d7d66:	d913      	bls.n	d7d90 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d7d68:	4299      	cmp	r1, r3
   d7d6a:	d002      	beq.n	d7d72 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7d6c:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d7d6e:	f005 f92b 	bl	dcfc8 <memmove>
	_M_node = __new_node;
   d7d72:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d7d74:	6823      	ldr	r3, [r4, #0]
   d7d76:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7d78:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d7d7c:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d7d7e:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d7d80:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d7d82:	59e3      	ldr	r3, [r4, r7]
   d7d84:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7d86:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d7d8a:	6233      	str	r3, [r6, #32]
    }
   d7d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d7d90:	4299      	cmp	r1, r3
   d7d92:	d0ee      	beq.n	d7d72 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d7d94:	1d38      	adds	r0, r7, #4
   d7d96:	1a80      	subs	r0, r0, r2
   d7d98:	4420      	add	r0, r4
   d7d9a:	e7e8      	b.n	d7d6e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d7d9c:	f103 0802 	add.w	r8, r3, #2
   d7da0:	454b      	cmp	r3, r9
   d7da2:	bf2c      	ite	cs
   d7da4:	4498      	addcs	r8, r3
   d7da6:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d7da8:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d7dac:	d301      	bcc.n	d7db2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d7dae:	f004 fb5b 	bl	dc468 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7db2:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d7db6:	f7fc f96e 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d7dba:	eba8 0505 	sub.w	r5, r8, r5
   d7dbe:	086d      	lsrs	r5, r5, #1
   d7dc0:	4682      	mov	sl, r0
   d7dc2:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d7dc4:	b10c      	cbz	r4, d7dca <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d7dc6:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d7dca:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d7dcc:	6971      	ldr	r1, [r6, #20]
   d7dce:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d7dd0:	442c      	add	r4, r5
	  if (_Num)
   d7dd2:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d7dd4:	4454      	add	r4, sl
   d7dd6:	d003      	beq.n	d7de0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7dd8:	1a52      	subs	r2, r2, r1
   d7dda:	4620      	mov	r0, r4
   d7ddc:	f005 f8f4 	bl	dcfc8 <memmove>
	::operator delete(__p);
   d7de0:	6830      	ldr	r0, [r6, #0]
   d7de2:	f7fc f95c 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d7de6:	e9c6 a800 	strd	sl, r8, [r6]
   d7dea:	e7c2      	b.n	d7d72 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d7dec <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7df0:	b086      	sub	sp, #24
   d7df2:	4604      	mov	r4, r0
   d7df4:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d7df8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d7dfc:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7dfe:	460f      	mov	r7, r1
   d7e00:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d7e02:	f7ff fc43 	bl	d768c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d7e06:	4605      	mov	r5, r0
   d7e08:	2800      	cmp	r0, #0
   d7e0a:	d042      	beq.n	d7e92 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d7e0c:	4b43      	ldr	r3, [pc, #268]	; (d7f1c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d7e0e:	4944      	ldr	r1, [pc, #272]	; (d7f20 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d7e10:	4844      	ldr	r0, [pc, #272]	; (d7f24 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d7e12:	2e00      	cmp	r6, #0
   d7e14:	bf18      	it	ne
   d7e16:	4633      	movne	r3, r6
   d7e18:	463a      	mov	r2, r7
   d7e1a:	f7fe fb55 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
   d7e1e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d7e20:	9405      	str	r4, [sp, #20]
   d7e22:	f000 fd3b 	bl	d889c <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d7e26:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d7e2a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d7e2e:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d7e30:	4293      	cmp	r3, r2
   d7e32:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d7e36:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d7e3a:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d7e3e:	d02b      	beq.n	d7e98 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7e40:	b103      	cbz	r3, d7e44 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d7e42:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d7e44:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d7e48:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d7e4a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d7e4c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d7e50:	4628      	mov	r0, r5
   d7e52:	f000 fc8b 	bl	d876c <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d7e56:	4639      	mov	r1, r7
   d7e58:	9003      	str	r0, [sp, #12]
   d7e5a:	4630      	mov	r0, r6
   d7e5c:	f7ff feac 	bl	d7bb8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d7e60:	9002      	str	r0, [sp, #8]
   d7e62:	f001 f827 	bl	d8eb4 <spark_cloud_flag_connected>
   d7e66:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d7e6a:	9000      	str	r0, [sp, #0]
   d7e6c:	492e      	ldr	r1, [pc, #184]	; (d7f28 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d7e6e:	482d      	ldr	r0, [pc, #180]	; (d7f24 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d7e70:	f7fe fb2a 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d7e74:	4628      	mov	r0, r5
   d7e76:	f000 fc79 	bl	d876c <_ZNK14SequentialFile11getQueueLenEv>
   d7e7a:	2800      	cmp	r0, #0
   d7e7c:	d03e      	beq.n	d7efc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d7e7e:	4620      	mov	r0, r4
   d7e80:	f7ff fd82 	bl	d7988 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d7e84:	4620      	mov	r0, r4
   d7e86:	f7ff fea9 	bl	d7bdc <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d7e8a:	a805      	add	r0, sp, #20
   d7e8c:	f7ff fd5e 	bl	d794c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d7e90:	2001      	movs	r0, #1
}
   d7e92:	b006      	add	sp, #24
   d7e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7e98:	4639      	mov	r1, r7
   d7e9a:	4630      	mov	r0, r6
   d7e9c:	f7ff fe8c 	bl	d7bb8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d7ea0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d7ea4:	4298      	cmp	r0, r3
   d7ea6:	d102      	bne.n	d7eae <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d7ea8:	4820      	ldr	r0, [pc, #128]	; (d7f2c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d7eaa:	f004 fae0 	bl	dc46e <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d7eae:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d7eb2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d7eb4:	1a9a      	subs	r2, r3, r2
   d7eb6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d7eb8:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d7ebc:	2b01      	cmp	r3, #1
   d7ebe:	d804      	bhi.n	d7eca <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d7ec0:	2200      	movs	r2, #0
   d7ec2:	2101      	movs	r1, #1
   d7ec4:	4640      	mov	r0, r8
   d7ec6:	f7ff ff32 	bl	d7d2e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7eca:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d7ece:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d7ed2:	f7fc f8e0 	bl	d4096 <_Znwj>
   d7ed6:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d7eda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7ede:	b103      	cbz	r3, d7ee2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d7ee0:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d7ee2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d7ee6:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d7ee8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d7eec:	685b      	ldr	r3, [r3, #4]
   d7eee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d7ef2:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d7ef6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d7efa:	e7a6      	b.n	d7e4a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d7efc:	4639      	mov	r1, r7
   d7efe:	4630      	mov	r0, r6
   d7f00:	f7ff fe5a 	bl	d7bb8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d7f04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d7f06:	4283      	cmp	r3, r0
   d7f08:	d3b9      	bcc.n	d7e7e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d7f0a:	f000 ffd3 	bl	d8eb4 <spark_cloud_flag_connected>
   d7f0e:	2800      	cmp	r0, #0
   d7f10:	d0b5      	beq.n	d7e7e <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d7f12:	4907      	ldr	r1, [pc, #28]	; (d7f30 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d7f14:	4803      	ldr	r0, [pc, #12]	; (d7f24 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d7f16:	f7fe fad7 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
   d7f1a:	e7b3      	b.n	d7e84 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d7f1c:	000e0135 	.word	0x000e0135
   d7f20:	000dfdb0 	.word	0x000dfdb0
   d7f24:	2003e454 	.word	0x2003e454
   d7f28:	000dfe08 	.word	0x000dfe08
   d7f2c:	000dfdd8 	.word	0x000dfdd8
   d7f30:	000dfe34 	.word	0x000dfe34

000d7f34 <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d7f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d7f36:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d7f3a:	4604      	mov	r4, r0
    if (!publishComplete) {
   d7f3c:	2b00      	cmp	r3, #0
   d7f3e:	d041      	beq.n	d7fc4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d7f40:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d7f44:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d7f48:	2b00      	cmp	r3, #0
   d7f4a:	d03d      	beq.n	d7fc8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d7f4c:	4952      	ldr	r1, [pc, #328]	; (d8098 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d7f4e:	4853      	ldr	r0, [pc, #332]	; (d809c <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d7f50:	f7fe faba 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d7f54:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d7f58:	b1d3      	cbz	r3, d7f90 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d7f5a:	1d26      	adds	r6, r4, #4
   d7f5c:	2100      	movs	r1, #0
   d7f5e:	4630      	mov	r0, r6
   d7f60:	f000 fbb6 	bl	d86d0 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d7f64:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d7f68:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d7f6a:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d7f6c:	d10d      	bne.n	d7f8a <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d7f6e:	2101      	movs	r1, #1
   d7f70:	4630      	mov	r0, r6
   d7f72:	f000 fbad 	bl	d86d0 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d7f76:	2200      	movs	r2, #0
   d7f78:	4629      	mov	r1, r5
   d7f7a:	4630      	mov	r0, r6
   d7f7c:	f000 f9e4 	bl	d8348 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d7f80:	4947      	ldr	r1, [pc, #284]	; (d80a0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d7f82:	4846      	ldr	r0, [pc, #280]	; (d809c <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d7f84:	462a      	mov	r2, r5
   d7f86:	f7fe fa9f 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d7f8a:	2300      	movs	r3, #0
   d7f8c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d7f90:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d7f94:	b110      	cbz	r0, d7f9c <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d7f96:	2143      	movs	r1, #67	; 0x43
   d7f98:	f004 fa60 	bl	dc45c <_ZdlPvj>
        curEvent = NULL;
   d7f9c:	2300      	movs	r3, #0
   d7f9e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d7fa2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d7fa6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d7faa:	4b3e      	ldr	r3, [pc, #248]	; (d80a4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d7fac:	9300      	str	r3, [sp, #0]
   d7fae:	4669      	mov	r1, sp
   d7fb0:	2300      	movs	r3, #0
   d7fb2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d7fb6:	9301      	str	r3, [sp, #4]
   d7fb8:	f7ff fc7e 	bl	d78b8 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7fbc:	f000 fcbe 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d7fc0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d7fc4:	b002      	add	sp, #8
   d7fc6:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d7fc8:	4937      	ldr	r1, [pc, #220]	; (d80a8 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d7fca:	4834      	ldr	r0, [pc, #208]	; (d809c <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d7fcc:	f7fe fa7c 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d7fd0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d7fd4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d7fd8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d7fdc:	b14b      	cbz	r3, d7ff2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d7fde:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d7fe2:	b110      	cbz	r0, d7fea <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d7fe4:	2143      	movs	r1, #67	; 0x43
   d7fe6:	f004 fa39 	bl	dc45c <_ZdlPvj>
            curEvent = NULL;
   d7fea:	2300      	movs	r3, #0
   d7fec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d7ff0:	e7db      	b.n	d7faa <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d7ff2:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d7ff4:	9400      	str	r4, [sp, #0]
   d7ff6:	f000 fc51 	bl	d889c <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d7ffa:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d7ffe:	4293      	cmp	r3, r2
   d8000:	d013      	beq.n	d802a <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d8002:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d8006:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d800a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d800e:	3b04      	subs	r3, #4
   d8010:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d8014:	4668      	mov	r0, sp
   d8016:	f7ff fc99 	bl	d794c <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d801a:	4924      	ldr	r1, [pc, #144]	; (d80ac <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d801c:	481f      	ldr	r0, [pc, #124]	; (d809c <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d801e:	f7fe fa53 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d8022:	4620      	mov	r0, r4
   d8024:	f7ff fcb0 	bl	d7988 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d8028:	e7bf      	b.n	d7faa <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d802a:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d802e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d8032:	f7ff fdc1 	bl	d7bb8 <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d8036:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d803a:	4298      	cmp	r0, r3
   d803c:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d8040:	d102      	bne.n	d8048 <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d8042:	481b      	ldr	r0, [pc, #108]	; (d80b0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d8044:	f004 fa13 	bl	dc46e <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d8048:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d804c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d804e:	429a      	cmp	r2, r3
   d8050:	d104      	bne.n	d805c <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d8052:	2201      	movs	r2, #1
   d8054:	4611      	mov	r1, r2
   d8056:	4628      	mov	r0, r5
   d8058:	f7ff fe69 	bl	d7d2e <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d805c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d8060:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d8064:	f7fc f817 	bl	d4096 <_Znwj>
   d8068:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d806c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d8070:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d8072:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d8076:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d807a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d807e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8082:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d8086:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d808a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d808e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8092:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d8096:	e7bd      	b.n	d8014 <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d8098:	000dfe47 	.word	0x000dfe47
   d809c:	2003e454 	.word	0x2003e454
   d80a0:	000dfe5a 	.word	0x000dfe5a
   d80a4:	000d7a85 	.word	0x000d7a85
   d80a8:	000dfe6a 	.word	0x000dfe6a
   d80ac:	000dfe7c 	.word	0x000dfe7c
   d80b0:	000dfdd8 	.word	0x000dfdd8

000d80b4 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   d80b4:	4b01      	ldr	r3, [pc, #4]	; (d80bc <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d80b6:	4a02      	ldr	r2, [pc, #8]	; (d80c0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d80b8:	601a      	str	r2, [r3, #0]
}
   d80ba:	4770      	bx	lr
   d80bc:	2003e454 	.word	0x2003e454
   d80c0:	000dfea3 	.word	0x000dfea3

000d80c4 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d80c4:	b510      	push	{r4, lr}
   d80c6:	4b07      	ldr	r3, [pc, #28]	; (d80e4 <_ZN17PublishQueuePosixD1Ev+0x20>)
   d80c8:	4604      	mov	r4, r0
   d80ca:	f840 3bc0 	str.w	r3, [r0], #192
   d80ce:	f7fc f8fb 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d80d2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d80d6:	f7ff fe17 	bl	d7d08 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d80da:	1d20      	adds	r0, r4, #4
   d80dc:	f000 f9b2 	bl	d8444 <_ZN14SequentialFileD1Ev>
}
   d80e0:	4620      	mov	r0, r4
   d80e2:	bd10      	pop	{r4, pc}
   d80e4:	000dfeb4 	.word	0x000dfeb4

000d80e8 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d80e8:	b510      	push	{r4, lr}
   d80ea:	4604      	mov	r4, r0
}
   d80ec:	f7ff ffea 	bl	d80c4 <_ZN17PublishQueuePosixD1Ev>
   d80f0:	4620      	mov	r0, r4
   d80f2:	21d0      	movs	r1, #208	; 0xd0
   d80f4:	f004 f9b2 	bl	dc45c <_ZdlPvj>
   d80f8:	4620      	mov	r0, r4
   d80fa:	bd10      	pop	{r4, pc}

000d80fc <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d80fc:	2001      	movs	r0, #1
   d80fe:	4770      	bx	lr

000d8100 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d8100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8102:	4d1f      	ldr	r5, [pc, #124]	; (d8180 <_ZN14SequentialFileC1Ev+0x80>)
   d8104:	4b1f      	ldr	r3, [pc, #124]	; (d8184 <_ZN14SequentialFileC1Ev+0x84>)
   d8106:	4604      	mov	r4, r0
   d8108:	4629      	mov	r1, r5
   d810a:	f840 3b04 	str.w	r3, [r0], #4
   d810e:	f003 fab6 	bl	db67e <_ZN6StringC1EPKc>
   d8112:	491d      	ldr	r1, [pc, #116]	; (d8188 <_ZN14SequentialFileC1Ev+0x88>)
   d8114:	f104 0014 	add.w	r0, r4, #20
   d8118:	f003 fab1 	bl	db67e <_ZN6StringC1EPKc>
   d811c:	4629      	mov	r1, r5
   d811e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8122:	f003 faac 	bl	db67e <_ZN6StringC1EPKc>
   d8126:	2300      	movs	r3, #0
   d8128:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d812c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d8130:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d8134:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d8138:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d813c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d8140:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d8142:	2308      	movs	r3, #8
   d8144:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8146:	2020      	movs	r0, #32
   d8148:	f7fb ffa5 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d814c:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d814e:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d8150:	3d01      	subs	r5, #1
   d8152:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d8154:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d8158:	4606      	mov	r6, r0
   d815a:	f44f 7000 	mov.w	r0, #512	; 0x200
   d815e:	f7fb ff9a 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8162:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d8166:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d816a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d816e:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d8170:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d8172:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d8174:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8176:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d8178:	6667      	str	r7, [r4, #100]	; 0x64

}
   d817a:	4620      	mov	r0, r4
   d817c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d817e:	bf00      	nop
   d8180:	000e0135 	.word	0x000e0135
   d8184:	000dffc0 	.word	0x000dffc0
   d8188:	000dfec0 	.word	0x000dfec0

000d818c <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d818c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d818e:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d8190:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d8192:	4628      	mov	r0, r5
   d8194:	f003 fad1 	bl	db73a <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d8198:	490e      	ldr	r1, [pc, #56]	; (d81d4 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d819a:	4668      	mov	r0, sp
   d819c:	f003 fa6f 	bl	db67e <_ZN6StringC1EPKc>
   d81a0:	4669      	mov	r1, sp
   d81a2:	4628      	mov	r0, r5
   d81a4:	f003 fb36 	bl	db814 <_ZNK6String8endsWithERKS_>
   d81a8:	4606      	mov	r6, r0
   d81aa:	4668      	mov	r0, sp
   d81ac:	f003 fa1c 	bl	db5e8 <_ZN6StringD1Ev>
   d81b0:	b16e      	cbz	r6, d81ce <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d81b2:	68e3      	ldr	r3, [r4, #12]
   d81b4:	2200      	movs	r2, #0
   d81b6:	3b01      	subs	r3, #1
   d81b8:	4629      	mov	r1, r5
   d81ba:	4668      	mov	r0, sp
   d81bc:	f003 fb58 	bl	db870 <_ZNK6String9substringEjj>
   d81c0:	4669      	mov	r1, sp
   d81c2:	4628      	mov	r0, r5
   d81c4:	f003 fab1 	bl	db72a <_ZN6StringaSEOS_>
   d81c8:	4668      	mov	r0, sp
   d81ca:	f003 fa0d 	bl	db5e8 <_ZN6StringD1Ev>
    }
    return *this; 
};
   d81ce:	4620      	mov	r0, r4
   d81d0:	b004      	add	sp, #16
   d81d2:	bd70      	pop	{r4, r5, r6, pc}
   d81d4:	000dfec5 	.word	0x000dfec5

000d81d8 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d81d8:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d81da:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d81dc:	4604      	mov	r4, r0
    if (!queueMutex) {
   d81de:	b913      	cbnz	r3, d81e6 <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d81e0:	303c      	adds	r0, #60	; 0x3c
   d81e2:	f000 fb33 	bl	d884c <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d81e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d81e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d81ec:	f000 bb36 	b.w	d885c <os_mutex_lock>

000d81f0 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d81f0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d81f2:	f000 bb3b 	b.w	d886c <os_mutex_unlock>
	...

000d81f8 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d81f8:	b510      	push	{r4, lr}
   d81fa:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d81fc:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d81fe:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d8200:	f000 fcc4 	bl	d8b8c <stat>
    if (result == 0) {
   d8204:	b9d0      	cbnz	r0, d823c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d8206:	9b01      	ldr	r3, [sp, #4]
   d8208:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d820a:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d820c:	d506      	bpl.n	d821c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d820e:	4915      	ldr	r1, [pc, #84]	; (d8264 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d8210:	4815      	ldr	r0, [pc, #84]	; (d8268 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d8212:	f7fc f943 	bl	d449c <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d8216:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d8218:	b016      	add	sp, #88	; 0x58
   d821a:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d821c:	4812      	ldr	r0, [pc, #72]	; (d8268 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d821e:	4913      	ldr	r1, [pc, #76]	; (d826c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d8220:	f7fc f953 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d8224:	4620      	mov	r0, r4
   d8226:	f005 fedb 	bl	ddfe0 <unlink>
    result = mkdir(path, 0777);
   d822a:	f240 11ff 	movw	r1, #511	; 0x1ff
   d822e:	4620      	mov	r0, r4
   d8230:	f000 fcb4 	bl	d8b9c <mkdir>
    if (result == 0) {
   d8234:	b980      	cbnz	r0, d8258 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d8236:	490e      	ldr	r1, [pc, #56]	; (d8270 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d8238:	4622      	mov	r2, r4
   d823a:	e7e9      	b.n	d8210 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d823c:	f000 ff32 	bl	d90a4 <__errno>
   d8240:	6803      	ldr	r3, [r0, #0]
   d8242:	2b02      	cmp	r3, #2
   d8244:	d0f1      	beq.n	d822a <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d8246:	f000 ff2d 	bl	d90a4 <__errno>
   d824a:	490a      	ldr	r1, [pc, #40]	; (d8274 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d824c:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d824e:	4806      	ldr	r0, [pc, #24]	; (d8268 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d8250:	f7fc f93b 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d8254:	2000      	movs	r0, #0
   d8256:	e7df      	b.n	d8218 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d8258:	f000 ff24 	bl	d90a4 <__errno>
   d825c:	4906      	ldr	r1, [pc, #24]	; (d8278 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d825e:	6802      	ldr	r2, [r0, #0]
   d8260:	e7f5      	b.n	d824e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d8262:	bf00      	nop
   d8264:	000dfed2 	.word	0x000dfed2
   d8268:	2003e45c 	.word	0x2003e45c
   d826c:	000dfeef 	.word	0x000dfeef
   d8270:	000dff20 	.word	0x000dff20
   d8274:	000dff0c 	.word	0x000dff0c
   d8278:	000dff2f 	.word	0x000dff2f

000d827c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   d827c:	b538      	push	{r3, r4, r5, lr}
   d827e:	4615      	mov	r5, r2
   d8280:	4604      	mov	r4, r0
    String result = name;
   d8282:	f003 f9fc 	bl	db67e <_ZN6StringC1EPKc>

    if (ext && *ext) {
   d8286:	b14d      	cbz	r5, d829c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   d8288:	782b      	ldrb	r3, [r5, #0]
   d828a:	b13b      	cbz	r3, d829c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d828c:	4904      	ldr	r1, [pc, #16]	; (d82a0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   d828e:	4620      	mov	r0, r4
   d8290:	f003 fa7c 	bl	db78c <_ZN6String6concatEPKc>
   d8294:	4629      	mov	r1, r5
   d8296:	4620      	mov	r0, r4
   d8298:	f003 fa78 	bl	db78c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   d829c:	4620      	mov	r0, r4
   d829e:	bd38      	pop	{r3, r4, r5, pc}
   d82a0:	000e022c 	.word	0x000e022c

000d82a4 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   d82a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d82a6:	4605      	mov	r5, r0
   d82a8:	460e      	mov	r6, r1
   d82aa:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   d82ac:	6949      	ldr	r1, [r1, #20]
   d82ae:	4668      	mov	r0, sp
   d82b0:	f003 fafe 	bl	db8b0 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   d82b4:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   d82b6:	b904      	cbnz	r4, d82ba <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   d82b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d82ba:	4622      	mov	r2, r4
   d82bc:	4628      	mov	r0, r5
   d82be:	f7ff ffdd 	bl	d827c <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   d82c2:	4668      	mov	r0, sp
   d82c4:	f003 f990 	bl	db5e8 <_ZN6StringD1Ev>
}
   d82c8:	4628      	mov	r0, r5
   d82ca:	b004      	add	sp, #16
   d82cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d82d0 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d82d0:	b570      	push	{r4, r5, r6, lr}
   d82d2:	460c      	mov	r4, r1
   d82d4:	b08e      	sub	sp, #56	; 0x38
    String result;
   d82d6:	491a      	ldr	r1, [pc, #104]	; (d8340 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d82d8:	e9cd 3200 	strd	r3, r2, [sp]
   d82dc:	4605      	mov	r5, r0
    String result;
   d82de:	f003 f9ce 	bl	db67e <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   d82e2:	69e0      	ldr	r0, [r4, #28]
   d82e4:	68e1      	ldr	r1, [r4, #12]
   d82e6:	4401      	add	r1, r0
   d82e8:	3104      	adds	r1, #4
   d82ea:	4628      	mov	r0, r5
   d82ec:	f003 f99a 	bl	db624 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d82f0:	1d21      	adds	r1, r4, #4
   d82f2:	a806      	add	r0, sp, #24
   d82f4:	f003 fa0e 	bl	db714 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   d82f8:	4912      	ldr	r1, [pc, #72]	; (d8344 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   d82fa:	a802      	add	r0, sp, #8
   d82fc:	f003 f9bf 	bl	db67e <_ZN6StringC1EPKc>
   d8300:	a902      	add	r1, sp, #8
   d8302:	a806      	add	r0, sp, #24
   d8304:	f003 fa53 	bl	db7ae <_ZplRK15StringSumHelperRK6String>
   d8308:	e9dd 3200 	ldrd	r3, r2, [sp]
   d830c:	4606      	mov	r6, r0
   d830e:	4621      	mov	r1, r4
   d8310:	a80a      	add	r0, sp, #40	; 0x28
   d8312:	f7ff ffc7 	bl	d82a4 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   d8316:	a90a      	add	r1, sp, #40	; 0x28
   d8318:	4630      	mov	r0, r6
   d831a:	f003 fa48 	bl	db7ae <_ZplRK15StringSumHelperRK6String>
   d831e:	4601      	mov	r1, r0
   d8320:	4628      	mov	r0, r5
   d8322:	f003 f9e8 	bl	db6f6 <_ZN6StringaSERKS_>
   d8326:	a80a      	add	r0, sp, #40	; 0x28
   d8328:	f003 f95e 	bl	db5e8 <_ZN6StringD1Ev>
   d832c:	a802      	add	r0, sp, #8
   d832e:	f003 f95b 	bl	db5e8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d8332:	a806      	add	r0, sp, #24
   d8334:	f003 f958 	bl	db5e8 <_ZN6StringD1Ev>
}
   d8338:	4628      	mov	r0, r5
   d833a:	b00e      	add	sp, #56	; 0x38
   d833c:	bd70      	pop	{r4, r5, r6, pc}
   d833e:	bf00      	nop
   d8340:	000e0135 	.word	0x000e0135
   d8344:	000dfec5 	.word	0x000dfec5

000d8348 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d8348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   d834c:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d834e:	b08e      	sub	sp, #56	; 0x38
   d8350:	4605      	mov	r5, r0
   d8352:	460f      	mov	r7, r1
    if (allExtensions) {
   d8354:	2a00      	cmp	r2, #0
   d8356:	d04a      	beq.n	d83ee <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   d8358:	6840      	ldr	r0, [r0, #4]
   d835a:	f000 fc2f 	bl	d8bbc <opendir>
        if (dir) {
   d835e:	4606      	mov	r6, r0
   d8360:	2800      	cmp	r0, #0
   d8362:	d041      	beq.n	d83e8 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   d8364:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d8418 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   d8368:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d8410 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   d836c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d8414 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   d8370:	4630      	mov	r0, r6
   d8372:	f000 fc2b 	bl	d8bcc <readdir>
                if (!ent) {
   d8376:	2800      	cmp	r0, #0
   d8378:	d033      	beq.n	d83e2 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   d837a:	7a82      	ldrb	r2, [r0, #10]
   d837c:	2a08      	cmp	r2, #8
   d837e:	d1f7      	bne.n	d8370 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   d8380:	f100 040b 	add.w	r4, r0, #11
   d8384:	6969      	ldr	r1, [r5, #20]
   d8386:	aa01      	add	r2, sp, #4
   d8388:	4620      	mov	r0, r4
   d838a:	f000 fe63 	bl	d9054 <sscanf>
   d838e:	2801      	cmp	r0, #1
   d8390:	d1ee      	bne.n	d8370 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   d8392:	9b01      	ldr	r3, [sp, #4]
   d8394:	429f      	cmp	r7, r3
   d8396:	d1eb      	bne.n	d8370 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   d8398:	1d29      	adds	r1, r5, #4
   d839a:	a806      	add	r0, sp, #24
   d839c:	f003 f9ba 	bl	db714 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   d83a0:	4651      	mov	r1, sl
   d83a2:	a80a      	add	r0, sp, #40	; 0x28
   d83a4:	f003 f96b 	bl	db67e <_ZN6StringC1EPKc>
   d83a8:	a90a      	add	r1, sp, #40	; 0x28
   d83aa:	a806      	add	r0, sp, #24
   d83ac:	f003 f9ff 	bl	db7ae <_ZplRK15StringSumHelperRK6String>
   d83b0:	4621      	mov	r1, r4
   d83b2:	f003 fa08 	bl	db7c6 <_ZplRK15StringSumHelperPKc>
   d83b6:	4601      	mov	r1, r0
   d83b8:	a802      	add	r0, sp, #8
   d83ba:	f003 f9ab 	bl	db714 <_ZN6StringC1ERKS_>
   d83be:	a80a      	add	r0, sp, #40	; 0x28
   d83c0:	f003 f912 	bl	db5e8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d83c4:	a806      	add	r0, sp, #24
   d83c6:	f003 f90f 	bl	db5e8 <_ZN6StringD1Ev>
                        unlink(path);
   d83ca:	9802      	ldr	r0, [sp, #8]
   d83cc:	f005 fe08 	bl	ddfe0 <unlink>
                        _log.trace("removed %s", path.c_str());
   d83d0:	4640      	mov	r0, r8
   d83d2:	9a02      	ldr	r2, [sp, #8]
   d83d4:	4649      	mov	r1, r9
   d83d6:	f7fe f877 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   d83da:	a802      	add	r0, sp, #8
   d83dc:	f003 f904 	bl	db5e8 <_ZN6StringD1Ev>
                    continue;
   d83e0:	e7c6      	b.n	d8370 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   d83e2:	4630      	mov	r0, r6
   d83e4:	f000 fbfa 	bl	d8bdc <closedir>
}
   d83e8:	b00e      	add	sp, #56	; 0x38
   d83ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   d83ee:	460a      	mov	r2, r1
   d83f0:	4601      	mov	r1, r0
   d83f2:	a80a      	add	r0, sp, #40	; 0x28
   d83f4:	f7ff ff6c 	bl	d82d0 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   d83f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d83fa:	f005 fdf1 	bl	ddfe0 <unlink>
        _log.trace("removed %s", path.c_str());
   d83fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d8400:	4903      	ldr	r1, [pc, #12]	; (d8410 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   d8402:	4804      	ldr	r0, [pc, #16]	; (d8414 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   d8404:	f7fe f860 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   d8408:	a80a      	add	r0, sp, #40	; 0x28
   d840a:	f003 f8ed 	bl	db5e8 <_ZN6StringD1Ev>
}
   d840e:	e7eb      	b.n	d83e8 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   d8410:	000dfec7 	.word	0x000dfec7
   d8414:	2003e45c 	.word	0x2003e45c
   d8418:	000dfec5 	.word	0x000dfec5

000d841c <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d841c:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d841e:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d8420:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d8422:	b163      	cbz	r3, d843e <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d8424:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8426:	6945      	ldr	r5, [r0, #20]
   d8428:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d842a:	42ae      	cmp	r6, r5
   d842c:	d904      	bls.n	d8438 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   d842e:	f855 0b04 	ldr.w	r0, [r5], #4
   d8432:	f7fb fe34 	bl	d409e <_ZdlPv>
   d8436:	e7f8      	b.n	d842a <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   d8438:	6820      	ldr	r0, [r4, #0]
   d843a:	f7fb fe30 	bl	d409e <_ZdlPv>
    }
   d843e:	4620      	mov	r0, r4
   d8440:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8444 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   d8444:	b510      	push	{r4, lr}
   d8446:	4b09      	ldr	r3, [pc, #36]	; (d846c <_ZN14SequentialFileD1Ev+0x28>)
   d8448:	4604      	mov	r4, r0
   d844a:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d844e:	f7ff ffe5 	bl	d841c <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   d8452:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8456:	f003 f8c7 	bl	db5e8 <_ZN6StringD1Ev>
   d845a:	f104 0014 	add.w	r0, r4, #20
   d845e:	f003 f8c3 	bl	db5e8 <_ZN6StringD1Ev>
   d8462:	1d20      	adds	r0, r4, #4
   d8464:	f003 f8c0 	bl	db5e8 <_ZN6StringD1Ev>
}
   d8468:	4620      	mov	r0, r4
   d846a:	bd10      	pop	{r4, pc}
   d846c:	000dffc0 	.word	0x000dffc0

000d8470 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   d8470:	b510      	push	{r4, lr}
   d8472:	4604      	mov	r4, r0
}
   d8474:	f7ff ffe6 	bl	d8444 <_ZN14SequentialFileD1Ev>
   d8478:	4620      	mov	r0, r4
   d847a:	2168      	movs	r1, #104	; 0x68
   d847c:	f003 ffee 	bl	dc45c <_ZdlPvj>
   d8480:	4620      	mov	r0, r4
   d8482:	bd10      	pop	{r4, pc}

000d8484 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d8484:	68c3      	ldr	r3, [r0, #12]
   d8486:	68ca      	ldr	r2, [r1, #12]
   d8488:	1a9b      	subs	r3, r3, r2
   d848a:	109b      	asrs	r3, r3, #2
   d848c:	1e5a      	subs	r2, r3, #1
   d848e:	e9d0 3000 	ldrd	r3, r0, [r0]
   d8492:	1a1b      	subs	r3, r3, r0
   d8494:	109b      	asrs	r3, r3, #2
   d8496:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d849a:	6888      	ldr	r0, [r1, #8]
   d849c:	680a      	ldr	r2, [r1, #0]
   d849e:	1a80      	subs	r0, r0, r2
    }
   d84a0:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d84a4:	4770      	bx	lr
	...

000d84a8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   d84a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d84ac:	4604      	mov	r4, r0
   d84ae:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d84b0:	f100 0108 	add.w	r1, r0, #8
   d84b4:	3018      	adds	r0, #24
   d84b6:	f7ff ffe5 	bl	d8484 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   d84ba:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d84be:	4298      	cmp	r0, r3
   d84c0:	d102      	bne.n	d84c8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   d84c2:	4837      	ldr	r0, [pc, #220]	; (d85a0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   d84c4:	f003 ffd3 	bl	dc46e <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d84c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d84ca:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d84cc:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d84ce:	1a11      	subs	r1, r2, r0
   d84d0:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d84d4:	2901      	cmp	r1, #1
   d84d6:	d821      	bhi.n	d851c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d84d8:	6961      	ldr	r1, [r4, #20]
   d84da:	1a57      	subs	r7, r2, r1
   d84dc:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d84de:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d84e0:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   d84e4:	d936      	bls.n	d8554 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   d84e6:	1b5d      	subs	r5, r3, r5
   d84e8:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d84ea:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d84ee:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d84f0:	42a9      	cmp	r1, r5
   d84f2:	eba3 0201 	sub.w	r2, r3, r1
   d84f6:	d927      	bls.n	d8548 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   d84f8:	4299      	cmp	r1, r3
   d84fa:	d002      	beq.n	d8502 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d84fc:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d84fe:	f004 fd63 	bl	dcfc8 <memmove>
	_M_node = __new_node;
   d8502:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d8504:	682b      	ldr	r3, [r5, #0]
   d8506:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8508:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d850c:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d850e:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   d8510:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d8512:	59eb      	ldr	r3, [r5, r7]
   d8514:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8516:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d851a:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d851c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d8520:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d8522:	f7fb fdb8 	bl	d4096 <_Znwj>
   d8526:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d8528:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d852a:	b113      	cbz	r3, d8532 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   d852c:	f8d8 2000 	ldr.w	r2, [r8]
   d8530:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d8532:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8534:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d8536:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d8538:	685b      	ldr	r3, [r3, #4]
   d853a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d853c:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8540:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d8542:	61a3      	str	r3, [r4, #24]
      }
   d8544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d8548:	4299      	cmp	r1, r3
   d854a:	d0da      	beq.n	d8502 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d854c:	1d38      	adds	r0, r7, #4
   d854e:	1a80      	subs	r0, r0, r2
   d8550:	4428      	add	r0, r5
   d8552:	e7d4      	b.n	d84fe <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d8554:	f103 0902 	add.w	r9, r3, #2
   d8558:	2b01      	cmp	r3, #1
   d855a:	bf2c      	ite	cs
   d855c:	4499      	addcs	r9, r3
   d855e:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   d8562:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   d8566:	d301      	bcc.n	d856c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   d8568:	f003 ff7e 	bl	dc468 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d856c:	ea4f 0089 	mov.w	r0, r9, lsl #2
   d8570:	f7fb fd91 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   d8574:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d8576:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8578:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   d857c:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d857e:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   d8580:	4291      	cmp	r1, r2
   d8582:	4682      	mov	sl, r0
   d8584:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d8588:	d003      	beq.n	d8592 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d858a:	1a52      	subs	r2, r2, r1
   d858c:	4628      	mov	r0, r5
   d858e:	f004 fd1b 	bl	dcfc8 <memmove>
	::operator delete(__p);
   d8592:	6820      	ldr	r0, [r4, #0]
   d8594:	f7fb fd83 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d8598:	e9c4 a900 	strd	sl, r9, [r4]
   d859c:	e7b1      	b.n	d8502 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   d859e:	bf00      	nop
   d85a0:	000dfdd8 	.word	0x000dfdd8

000d85a4 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   d85a4:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   d85a6:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   d85a8:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   d85aa:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   d85ac:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   d85ae:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   d85b0:	d006      	beq.n	d85c0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d85b2:	b10a      	cbz	r2, d85b8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   d85b4:	6809      	ldr	r1, [r1, #0]
   d85b6:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d85b8:	699a      	ldr	r2, [r3, #24]
   d85ba:	3204      	adds	r2, #4
   d85bc:	619a      	str	r2, [r3, #24]
      }
   d85be:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   d85c0:	f7ff ff72 	bl	d84a8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   d85c4:	e7fb      	b.n	d85be <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000d85c8 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   d85c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   d85cc:	68c3      	ldr	r3, [r0, #12]
   d85ce:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   d85d0:	b086      	sub	sp, #24
   d85d2:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   d85d4:	d808      	bhi.n	d85e8 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   d85d6:	4934      	ldr	r1, [pc, #208]	; (d86a8 <_ZN14SequentialFile7scanDirEv+0xe0>)
   d85d8:	4834      	ldr	r0, [pc, #208]	; (d86ac <_ZN14SequentialFile7scanDirEv+0xe4>)
   d85da:	f7fb ff76 	bl	d44ca <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d85de:	2600      	movs	r6, #0
}
   d85e0:	4630      	mov	r0, r6
   d85e2:	b006      	add	sp, #24
   d85e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   d85e8:	6840      	ldr	r0, [r0, #4]
   d85ea:	f7ff fe05 	bl	d81f8 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   d85ee:	4606      	mov	r6, r0
   d85f0:	2800      	cmp	r0, #0
   d85f2:	d0f4      	beq.n	d85de <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   d85f4:	6963      	ldr	r3, [r4, #20]
   d85f6:	6862      	ldr	r2, [r4, #4]
   d85f8:	492d      	ldr	r1, [pc, #180]	; (d86b0 <_ZN14SequentialFile7scanDirEv+0xe8>)
   d85fa:	482c      	ldr	r0, [pc, #176]	; (d86ac <_ZN14SequentialFile7scanDirEv+0xe4>)
   d85fc:	f7fd ff64 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   d8600:	6860      	ldr	r0, [r4, #4]
   d8602:	f000 fadb 	bl	d8bbc <opendir>
    if (!dir) {
   d8606:	4607      	mov	r7, r0
   d8608:	2800      	cmp	r0, #0
   d860a:	d0e8      	beq.n	d85de <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   d860c:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d860e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d86b4 <_ZN14SequentialFile7scanDirEv+0xec>
   d8612:	f8df 8098 	ldr.w	r8, [pc, #152]	; d86ac <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   d8616:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   d8618:	4638      	mov	r0, r7
   d861a:	f000 fad7 	bl	d8bcc <readdir>
        if (!ent) {
   d861e:	4605      	mov	r5, r0
   d8620:	2800      	cmp	r0, #0
   d8622:	d039      	beq.n	d8698 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   d8624:	7a83      	ldrb	r3, [r0, #10]
   d8626:	2b08      	cmp	r3, #8
   d8628:	d1f6      	bne.n	d8618 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   d862a:	350b      	adds	r5, #11
   d862c:	6961      	ldr	r1, [r4, #20]
   d862e:	aa01      	add	r2, sp, #4
   d8630:	4628      	mov	r0, r5
   d8632:	f000 fd0f 	bl	d9054 <sscanf>
   d8636:	2801      	cmp	r0, #1
   d8638:	d1ee      	bne.n	d8618 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   d863a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d863c:	b17b      	cbz	r3, d865e <_ZN14SequentialFile7scanDirEv+0x96>
   d863e:	4629      	mov	r1, r5
   d8640:	a802      	add	r0, sp, #8
   d8642:	f003 f81c 	bl	db67e <_ZN6StringC1EPKc>
   d8646:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d864a:	a802      	add	r0, sp, #8
   d864c:	f003 f8e2 	bl	db814 <_ZNK6String8endsWithERKS_>
   d8650:	4682      	mov	sl, r0
   d8652:	a802      	add	r0, sp, #8
   d8654:	f002 ffc8 	bl	db5e8 <_ZN6StringD1Ev>
   d8658:	f1ba 0f00 	cmp.w	sl, #0
   d865c:	d0dc      	beq.n	d8618 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   d865e:	6823      	ldr	r3, [r4, #0]
   d8660:	4629      	mov	r1, r5
   d8662:	689b      	ldr	r3, [r3, #8]
   d8664:	4620      	mov	r0, r4
   d8666:	4798      	blx	r3
   d8668:	2800      	cmp	r0, #0
   d866a:	d0d5      	beq.n	d8618 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   d866c:	9a01      	ldr	r2, [sp, #4]
   d866e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8670:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   d8672:	bfb8      	it	lt
   d8674:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d8676:	462b      	mov	r3, r5
   d8678:	4649      	mov	r1, r9
   d867a:	4640      	mov	r0, r8
   d867c:	f7fd ff24 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   d8680:	4620      	mov	r0, r4
   d8682:	f7ff fda9 	bl	d81d8 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   d8686:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d868a:	a901      	add	r1, sp, #4
   d868c:	f7ff ff8a 	bl	d85a4 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   d8690:	4620      	mov	r0, r4
   d8692:	f7ff fdad 	bl	d81f0 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   d8696:	e7bf      	b.n	d8618 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   d8698:	4638      	mov	r0, r7
   d869a:	f000 fa9f 	bl	d8bdc <closedir>
    scanDirCompleted = true;
   d869e:	2301      	movs	r3, #1
   d86a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d86a4:	e79c      	b.n	d85e0 <_ZN14SequentialFile7scanDirEv+0x18>
   d86a6:	bf00      	nop
   d86a8:	000dff45 	.word	0x000dff45
   d86ac:	2003e45c 	.word	0x2003e45c
   d86b0:	000dff5a 	.word	0x000dff5a
   d86b4:	000dff76 	.word	0x000dff76

000d86b8 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   d86b8:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   d86ba:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   d86be:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d86c0:	b90b      	cbnz	r3, d86c6 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   d86c2:	f7ff ff81 	bl	d85c8 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   d86c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d86c8:	3001      	adds	r0, #1
   d86ca:	63a0      	str	r0, [r4, #56]	; 0x38
}
   d86cc:	bd10      	pop	{r4, pc}
	...

000d86d0 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   d86d0:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   d86d2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   d86d6:	4604      	mov	r4, r0
   d86d8:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   d86da:	b90b      	cbnz	r3, d86e0 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   d86dc:	f7ff ff74 	bl	d85c8 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   d86e0:	4620      	mov	r0, r4
   d86e2:	f7ff fd79 	bl	d81d8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d86e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   d86e8:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d86ea:	4293      	cmp	r3, r2
   d86ec:	d01e      	beq.n	d872c <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   d86ee:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   d86f0:	b12e      	cbz	r6, d86fe <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   d86f2:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d86f4:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d86f6:	4293      	cmp	r3, r2
   d86f8:	d00c      	beq.n	d8714 <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   d86fa:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d86fc:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   d86fe:	4620      	mov	r0, r4
   d8700:	f7ff fd76 	bl	d81f0 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   d8704:	b125      	cbz	r5, d8710 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   d8706:	490a      	ldr	r1, [pc, #40]	; (d8730 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   d8708:	480a      	ldr	r0, [pc, #40]	; (d8734 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   d870a:	462a      	mov	r2, r5
   d870c:	f7fd fedc 	bl	d64c8 <_ZNK5spark6Logger5traceEPKcz>
}
   d8710:	4628      	mov	r0, r5
   d8712:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   d8714:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d8716:	f7fb fcc2 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d871a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d871c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d871e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   d8720:	685b      	ldr	r3, [r3, #4]
   d8722:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8724:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8728:	6522      	str	r2, [r4, #80]	; 0x50
   d872a:	e7e7      	b.n	d86fc <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   d872c:	2500      	movs	r5, #0
   d872e:	e7e6      	b.n	d86fe <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   d8730:	000dff8c 	.word	0x000dff8c
   d8734:	2003e45c 	.word	0x2003e45c

000d8738 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   d8738:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   d873a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   d873e:	9101      	str	r1, [sp, #4]
   d8740:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d8742:	b90b      	cbnz	r3, d8748 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   d8744:	f7ff ff40 	bl	d85c8 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   d8748:	9b01      	ldr	r3, [sp, #4]
   d874a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d874c:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   d874e:	bfb8      	it	lt
   d8750:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   d8752:	4620      	mov	r0, r4
   d8754:	f7ff fd40 	bl	d81d8 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   d8758:	a901      	add	r1, sp, #4
   d875a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d875e:	f7ff ff21 	bl	d85a4 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   d8762:	4620      	mov	r0, r4
   d8764:	f7ff fd44 	bl	d81f0 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d8768:	b002      	add	sp, #8
   d876a:	bd10      	pop	{r4, pc}

000d876c <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   d876c:	b538      	push	{r3, r4, r5, lr}
   d876e:	4604      	mov	r4, r0
    queueMutexLock();
   d8770:	f7ff fd32 	bl	d81d8 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8774:	f104 0148 	add.w	r1, r4, #72	; 0x48
   d8778:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d877c:	f7ff fe82 	bl	d8484 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   d8780:	4605      	mov	r5, r0
    queueMutexUnlock();
   d8782:	4620      	mov	r0, r4
   d8784:	f7ff fd34 	bl	d81f0 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d8788:	4628      	mov	r0, r5
   d878a:	bd38      	pop	{r3, r4, r5, pc}

000d878c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   d878c:	4b01      	ldr	r3, [pc, #4]	; (d8794 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   d878e:	4a02      	ldr	r2, [pc, #8]	; (d8798 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   d8790:	601a      	str	r2, [r3, #0]
}
   d8792:	4770      	bx	lr
   d8794:	2003e45c 	.word	0x2003e45c
   d8798:	000dffa9 	.word	0x000dffa9

000d879c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d879c:	b508      	push	{r3, lr}
   d879e:	4b02      	ldr	r3, [pc, #8]	; (d87a8 <cellular_signal+0xc>)
   d87a0:	681b      	ldr	r3, [r3, #0]
   d87a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d87a4:	9301      	str	r3, [sp, #4]
   d87a6:	bd08      	pop	{r3, pc}
   d87a8:	00030274 	.word	0x00030274

000d87ac <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d87ac:	b508      	push	{r3, lr}
   d87ae:	4b02      	ldr	r3, [pc, #8]	; (d87b8 <os_thread_create+0xc>)
   d87b0:	681b      	ldr	r3, [r3, #0]
   d87b2:	685b      	ldr	r3, [r3, #4]
   d87b4:	9301      	str	r3, [sp, #4]
   d87b6:	bd08      	pop	{r3, pc}
   d87b8:	00030248 	.word	0x00030248

000d87bc <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d87bc:	b508      	push	{r3, lr}
   d87be:	4b02      	ldr	r3, [pc, #8]	; (d87c8 <os_thread_is_current+0xc>)
   d87c0:	681b      	ldr	r3, [r3, #0]
   d87c2:	689b      	ldr	r3, [r3, #8]
   d87c4:	9301      	str	r3, [sp, #4]
   d87c6:	bd08      	pop	{r3, pc}
   d87c8:	00030248 	.word	0x00030248

000d87cc <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d87cc:	b508      	push	{r3, lr}
   d87ce:	4b02      	ldr	r3, [pc, #8]	; (d87d8 <os_thread_yield+0xc>)
   d87d0:	681b      	ldr	r3, [r3, #0]
   d87d2:	68db      	ldr	r3, [r3, #12]
   d87d4:	9301      	str	r3, [sp, #4]
   d87d6:	bd08      	pop	{r3, pc}
   d87d8:	00030248 	.word	0x00030248

000d87dc <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d87dc:	b508      	push	{r3, lr}
   d87de:	4b02      	ldr	r3, [pc, #8]	; (d87e8 <os_thread_join+0xc>)
   d87e0:	681b      	ldr	r3, [r3, #0]
   d87e2:	691b      	ldr	r3, [r3, #16]
   d87e4:	9301      	str	r3, [sp, #4]
   d87e6:	bd08      	pop	{r3, pc}
   d87e8:	00030248 	.word	0x00030248

000d87ec <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d87ec:	b508      	push	{r3, lr}
   d87ee:	4b02      	ldr	r3, [pc, #8]	; (d87f8 <os_thread_cleanup+0xc>)
   d87f0:	681b      	ldr	r3, [r3, #0]
   d87f2:	695b      	ldr	r3, [r3, #20]
   d87f4:	9301      	str	r3, [sp, #4]
   d87f6:	bd08      	pop	{r3, pc}
   d87f8:	00030248 	.word	0x00030248

000d87fc <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d87fc:	b508      	push	{r3, lr}
   d87fe:	4b02      	ldr	r3, [pc, #8]	; (d8808 <os_thread_scheduling+0xc>)
   d8800:	681b      	ldr	r3, [r3, #0]
   d8802:	69db      	ldr	r3, [r3, #28]
   d8804:	9301      	str	r3, [sp, #4]
   d8806:	bd08      	pop	{r3, pc}
   d8808:	00030248 	.word	0x00030248

000d880c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d880c:	b508      	push	{r3, lr}
   d880e:	4b02      	ldr	r3, [pc, #8]	; (d8818 <os_timer_create+0xc>)
   d8810:	681b      	ldr	r3, [r3, #0]
   d8812:	6a1b      	ldr	r3, [r3, #32]
   d8814:	9301      	str	r3, [sp, #4]
   d8816:	bd08      	pop	{r3, pc}
   d8818:	00030248 	.word	0x00030248

000d881c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d881c:	b508      	push	{r3, lr}
   d881e:	4b02      	ldr	r3, [pc, #8]	; (d8828 <os_timer_destroy+0xc>)
   d8820:	681b      	ldr	r3, [r3, #0]
   d8822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8824:	9301      	str	r3, [sp, #4]
   d8826:	bd08      	pop	{r3, pc}
   d8828:	00030248 	.word	0x00030248

000d882c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d882c:	b508      	push	{r3, lr}
   d882e:	4b02      	ldr	r3, [pc, #8]	; (d8838 <os_timer_get_id+0xc>)
   d8830:	681b      	ldr	r3, [r3, #0]
   d8832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8834:	9301      	str	r3, [sp, #4]
   d8836:	bd08      	pop	{r3, pc}
   d8838:	00030248 	.word	0x00030248

000d883c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d883c:	b508      	push	{r3, lr}
   d883e:	4b02      	ldr	r3, [pc, #8]	; (d8848 <os_timer_change+0xc>)
   d8840:	681b      	ldr	r3, [r3, #0]
   d8842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8844:	9301      	str	r3, [sp, #4]
   d8846:	bd08      	pop	{r3, pc}
   d8848:	00030248 	.word	0x00030248

000d884c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d884c:	b508      	push	{r3, lr}
   d884e:	4b02      	ldr	r3, [pc, #8]	; (d8858 <os_mutex_create+0xc>)
   d8850:	681b      	ldr	r3, [r3, #0]
   d8852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8854:	9301      	str	r3, [sp, #4]
   d8856:	bd08      	pop	{r3, pc}
   d8858:	00030248 	.word	0x00030248

000d885c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d885c:	b508      	push	{r3, lr}
   d885e:	4b02      	ldr	r3, [pc, #8]	; (d8868 <os_mutex_lock+0xc>)
   d8860:	681b      	ldr	r3, [r3, #0]
   d8862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8864:	9301      	str	r3, [sp, #4]
   d8866:	bd08      	pop	{r3, pc}
   d8868:	00030248 	.word	0x00030248

000d886c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d886c:	b508      	push	{r3, lr}
   d886e:	4b02      	ldr	r3, [pc, #8]	; (d8878 <os_mutex_unlock+0xc>)
   d8870:	681b      	ldr	r3, [r3, #0]
   d8872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8874:	9301      	str	r3, [sp, #4]
   d8876:	bd08      	pop	{r3, pc}
   d8878:	00030248 	.word	0x00030248

000d887c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d887c:	b508      	push	{r3, lr}
   d887e:	4b02      	ldr	r3, [pc, #8]	; (d8888 <os_mutex_recursive_create+0xc>)
   d8880:	681b      	ldr	r3, [r3, #0]
   d8882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8884:	9301      	str	r3, [sp, #4]
   d8886:	bd08      	pop	{r3, pc}
   d8888:	00030248 	.word	0x00030248

000d888c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d888c:	b508      	push	{r3, lr}
   d888e:	4b02      	ldr	r3, [pc, #8]	; (d8898 <os_mutex_recursive_destroy+0xc>)
   d8890:	681b      	ldr	r3, [r3, #0]
   d8892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8894:	9301      	str	r3, [sp, #4]
   d8896:	bd08      	pop	{r3, pc}
   d8898:	00030248 	.word	0x00030248

000d889c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d889c:	b508      	push	{r3, lr}
   d889e:	4b02      	ldr	r3, [pc, #8]	; (d88a8 <os_mutex_recursive_lock+0xc>)
   d88a0:	681b      	ldr	r3, [r3, #0]
   d88a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d88a4:	9301      	str	r3, [sp, #4]
   d88a6:	bd08      	pop	{r3, pc}
   d88a8:	00030248 	.word	0x00030248

000d88ac <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d88ac:	b508      	push	{r3, lr}
   d88ae:	4b02      	ldr	r3, [pc, #8]	; (d88b8 <os_mutex_recursive_unlock+0xc>)
   d88b0:	681b      	ldr	r3, [r3, #0]
   d88b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d88b4:	9301      	str	r3, [sp, #4]
   d88b6:	bd08      	pop	{r3, pc}
   d88b8:	00030248 	.word	0x00030248

000d88bc <os_timer_is_active>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d88bc:	b508      	push	{r3, lr}
   d88be:	4b02      	ldr	r3, [pc, #8]	; (d88c8 <os_timer_is_active+0xc>)
   d88c0:	681b      	ldr	r3, [r3, #0]
   d88c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d88c4:	9301      	str	r3, [sp, #4]
   d88c6:	bd08      	pop	{r3, pc}
   d88c8:	00030248 	.word	0x00030248

000d88cc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d88cc:	b508      	push	{r3, lr}
   d88ce:	4b02      	ldr	r3, [pc, #8]	; (d88d8 <os_thread_exit+0xc>)
   d88d0:	681b      	ldr	r3, [r3, #0]
   d88d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d88d4:	9301      	str	r3, [sp, #4]
   d88d6:	bd08      	pop	{r3, pc}
   d88d8:	00030248 	.word	0x00030248

000d88dc <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d88dc:	b508      	push	{r3, lr}
   d88de:	4b02      	ldr	r3, [pc, #8]	; (d88e8 <os_timer_set_id+0xc>)
   d88e0:	681b      	ldr	r3, [r3, #0]
   d88e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d88e4:	9301      	str	r3, [sp, #4]
   d88e6:	bd08      	pop	{r3, pc}
   d88e8:	00030248 	.word	0x00030248

000d88ec <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d88ec:	b508      	push	{r3, lr}
   d88ee:	4b02      	ldr	r3, [pc, #8]	; (d88f8 <HAL_Feature_Set+0xc>)
   d88f0:	681b      	ldr	r3, [r3, #0]
   d88f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d88f4:	9301      	str	r3, [sp, #4]
   d88f6:	bd08      	pop	{r3, pc}
   d88f8:	00030234 	.word	0x00030234

000d88fc <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d88fc:	b508      	push	{r3, lr}
   d88fe:	4b02      	ldr	r3, [pc, #8]	; (d8908 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d8900:	681b      	ldr	r3, [r3, #0]
   d8902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8904:	9301      	str	r3, [sp, #4]
   d8906:	bd08      	pop	{r3, pc}
   d8908:	00030234 	.word	0x00030234

000d890c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d890c:	b508      	push	{r3, lr}
   d890e:	4b02      	ldr	r3, [pc, #8]	; (d8918 <HAL_RNG_GetRandomNumber+0xc>)
   d8910:	681b      	ldr	r3, [r3, #0]
   d8912:	685b      	ldr	r3, [r3, #4]
   d8914:	9301      	str	r3, [sp, #4]
   d8916:	bd08      	pop	{r3, pc}
   d8918:	00030218 	.word	0x00030218

000d891c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d891c:	b508      	push	{r3, lr}
   d891e:	4b02      	ldr	r3, [pc, #8]	; (d8928 <HAL_Delay_Milliseconds+0xc>)
   d8920:	681b      	ldr	r3, [r3, #0]
   d8922:	689b      	ldr	r3, [r3, #8]
   d8924:	9301      	str	r3, [sp, #4]
   d8926:	bd08      	pop	{r3, pc}
   d8928:	00030218 	.word	0x00030218

000d892c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d892c:	b508      	push	{r3, lr}
   d892e:	4b02      	ldr	r3, [pc, #8]	; (d8938 <HAL_Delay_Microseconds+0xc>)
   d8930:	681b      	ldr	r3, [r3, #0]
   d8932:	68db      	ldr	r3, [r3, #12]
   d8934:	9301      	str	r3, [sp, #4]
   d8936:	bd08      	pop	{r3, pc}
   d8938:	00030218 	.word	0x00030218

000d893c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d893c:	b508      	push	{r3, lr}
   d893e:	4b02      	ldr	r3, [pc, #8]	; (d8948 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d8940:	681b      	ldr	r3, [r3, #0]
   d8942:	695b      	ldr	r3, [r3, #20]
   d8944:	9301      	str	r3, [sp, #4]
   d8946:	bd08      	pop	{r3, pc}
   d8948:	00030218 	.word	0x00030218

000d894c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d894c:	b508      	push	{r3, lr}
   d894e:	4b02      	ldr	r3, [pc, #8]	; (d8958 <hal_rtc_time_is_valid+0xc>)
   d8950:	681b      	ldr	r3, [r3, #0]
   d8952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8954:	9301      	str	r3, [sp, #4]
   d8956:	bd08      	pop	{r3, pc}
   d8958:	00030218 	.word	0x00030218

000d895c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d895c:	b508      	push	{r3, lr}
   d895e:	4b02      	ldr	r3, [pc, #8]	; (d8968 <hal_timer_millis+0xc>)
   d8960:	681b      	ldr	r3, [r3, #0]
   d8962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8964:	9301      	str	r3, [sp, #4]
   d8966:	bd08      	pop	{r3, pc}
   d8968:	00030218 	.word	0x00030218

000d896c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d896c:	b508      	push	{r3, lr}
   d896e:	4b02      	ldr	r3, [pc, #8]	; (d8978 <hal_rtc_get_time+0xc>)
   d8970:	681b      	ldr	r3, [r3, #0]
   d8972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8974:	9301      	str	r3, [sp, #4]
   d8976:	bd08      	pop	{r3, pc}
   d8978:	00030218 	.word	0x00030218

000d897c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d897c:	b508      	push	{r3, lr}
   d897e:	4b02      	ldr	r3, [pc, #8]	; (d8988 <hal_rtc_set_time+0xc>)
   d8980:	681b      	ldr	r3, [r3, #0]
   d8982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d8984:	9301      	str	r3, [sp, #4]
   d8986:	bd08      	pop	{r3, pc}
   d8988:	00030218 	.word	0x00030218

000d898c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d898c:	b508      	push	{r3, lr}
   d898e:	4b02      	ldr	r3, [pc, #8]	; (d8998 <HAL_Validate_Pin_Function+0xc>)
   d8990:	681b      	ldr	r3, [r3, #0]
   d8992:	685b      	ldr	r3, [r3, #4]
   d8994:	9301      	str	r3, [sp, #4]
   d8996:	bd08      	pop	{r3, pc}
   d8998:	0003022c 	.word	0x0003022c

000d899c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d899c:	b508      	push	{r3, lr}
   d899e:	4b02      	ldr	r3, [pc, #8]	; (d89a8 <HAL_Pin_Mode+0xc>)
   d89a0:	681b      	ldr	r3, [r3, #0]
   d89a2:	689b      	ldr	r3, [r3, #8]
   d89a4:	9301      	str	r3, [sp, #4]
   d89a6:	bd08      	pop	{r3, pc}
   d89a8:	0003022c 	.word	0x0003022c

000d89ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d89ac:	b508      	push	{r3, lr}
   d89ae:	4b02      	ldr	r3, [pc, #8]	; (d89b8 <HAL_Get_Pin_Mode+0xc>)
   d89b0:	681b      	ldr	r3, [r3, #0]
   d89b2:	68db      	ldr	r3, [r3, #12]
   d89b4:	9301      	str	r3, [sp, #4]
   d89b6:	bd08      	pop	{r3, pc}
   d89b8:	0003022c 	.word	0x0003022c

000d89bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d89bc:	b508      	push	{r3, lr}
   d89be:	4b02      	ldr	r3, [pc, #8]	; (d89c8 <HAL_GPIO_Write+0xc>)
   d89c0:	681b      	ldr	r3, [r3, #0]
   d89c2:	691b      	ldr	r3, [r3, #16]
   d89c4:	9301      	str	r3, [sp, #4]
   d89c6:	bd08      	pop	{r3, pc}
   d89c8:	0003022c 	.word	0x0003022c

000d89cc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d89cc:	b508      	push	{r3, lr}
   d89ce:	4b02      	ldr	r3, [pc, #8]	; (d89d8 <HAL_GPIO_Read+0xc>)
   d89d0:	681b      	ldr	r3, [r3, #0]
   d89d2:	695b      	ldr	r3, [r3, #20]
   d89d4:	9301      	str	r3, [sp, #4]
   d89d6:	bd08      	pop	{r3, pc}
   d89d8:	0003022c 	.word	0x0003022c

000d89dc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d89dc:	b508      	push	{r3, lr}
   d89de:	4b02      	ldr	r3, [pc, #8]	; (d89e8 <HAL_Interrupts_Attach+0xc>)
   d89e0:	681b      	ldr	r3, [r3, #0]
   d89e2:	699b      	ldr	r3, [r3, #24]
   d89e4:	9301      	str	r3, [sp, #4]
   d89e6:	bd08      	pop	{r3, pc}
   d89e8:	0003022c 	.word	0x0003022c

000d89ec <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d89ec:	b508      	push	{r3, lr}
   d89ee:	4b02      	ldr	r3, [pc, #8]	; (d89f8 <HAL_Interrupts_Detach+0xc>)
   d89f0:	681b      	ldr	r3, [r3, #0]
   d89f2:	69db      	ldr	r3, [r3, #28]
   d89f4:	9301      	str	r3, [sp, #4]
   d89f6:	bd08      	pop	{r3, pc}
   d89f8:	0003022c 	.word	0x0003022c

000d89fc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d89fc:	b508      	push	{r3, lr}
   d89fe:	4b02      	ldr	r3, [pc, #8]	; (d8a08 <hal_adc_read+0xc>)
   d8a00:	681b      	ldr	r3, [r3, #0]
   d8a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8a04:	9301      	str	r3, [sp, #4]
   d8a06:	bd08      	pop	{r3, pc}
   d8a08:	0003022c 	.word	0x0003022c

000d8a0c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d8a0c:	b508      	push	{r3, lr}
   d8a0e:	4b02      	ldr	r3, [pc, #8]	; (d8a18 <hal_i2c_begin+0xc>)
   d8a10:	681b      	ldr	r3, [r3, #0]
   d8a12:	68db      	ldr	r3, [r3, #12]
   d8a14:	9301      	str	r3, [sp, #4]
   d8a16:	bd08      	pop	{r3, pc}
   d8a18:	00030228 	.word	0x00030228

000d8a1c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d8a1c:	b508      	push	{r3, lr}
   d8a1e:	4b02      	ldr	r3, [pc, #8]	; (d8a28 <hal_i2c_begin_transmission+0xc>)
   d8a20:	681b      	ldr	r3, [r3, #0]
   d8a22:	699b      	ldr	r3, [r3, #24]
   d8a24:	9301      	str	r3, [sp, #4]
   d8a26:	bd08      	pop	{r3, pc}
   d8a28:	00030228 	.word	0x00030228

000d8a2c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d8a2c:	b508      	push	{r3, lr}
   d8a2e:	4b02      	ldr	r3, [pc, #8]	; (d8a38 <hal_i2c_end_transmission+0xc>)
   d8a30:	681b      	ldr	r3, [r3, #0]
   d8a32:	69db      	ldr	r3, [r3, #28]
   d8a34:	9301      	str	r3, [sp, #4]
   d8a36:	bd08      	pop	{r3, pc}
   d8a38:	00030228 	.word	0x00030228

000d8a3c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d8a3c:	b508      	push	{r3, lr}
   d8a3e:	4b02      	ldr	r3, [pc, #8]	; (d8a48 <hal_i2c_write+0xc>)
   d8a40:	681b      	ldr	r3, [r3, #0]
   d8a42:	6a1b      	ldr	r3, [r3, #32]
   d8a44:	9301      	str	r3, [sp, #4]
   d8a46:	bd08      	pop	{r3, pc}
   d8a48:	00030228 	.word	0x00030228

000d8a4c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d8a4c:	b508      	push	{r3, lr}
   d8a4e:	4b02      	ldr	r3, [pc, #8]	; (d8a58 <hal_i2c_available+0xc>)
   d8a50:	681b      	ldr	r3, [r3, #0]
   d8a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8a54:	9301      	str	r3, [sp, #4]
   d8a56:	bd08      	pop	{r3, pc}
   d8a58:	00030228 	.word	0x00030228

000d8a5c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d8a5c:	b508      	push	{r3, lr}
   d8a5e:	4b02      	ldr	r3, [pc, #8]	; (d8a68 <hal_i2c_read+0xc>)
   d8a60:	681b      	ldr	r3, [r3, #0]
   d8a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8a64:	9301      	str	r3, [sp, #4]
   d8a66:	bd08      	pop	{r3, pc}
   d8a68:	00030228 	.word	0x00030228

000d8a6c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d8a6c:	b508      	push	{r3, lr}
   d8a6e:	4b02      	ldr	r3, [pc, #8]	; (d8a78 <hal_i2c_peek+0xc>)
   d8a70:	681b      	ldr	r3, [r3, #0]
   d8a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8a74:	9301      	str	r3, [sp, #4]
   d8a76:	bd08      	pop	{r3, pc}
   d8a78:	00030228 	.word	0x00030228

000d8a7c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8a7c:	b508      	push	{r3, lr}
   d8a7e:	4b02      	ldr	r3, [pc, #8]	; (d8a88 <hal_i2c_flush+0xc>)
   d8a80:	681b      	ldr	r3, [r3, #0]
   d8a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8a84:	9301      	str	r3, [sp, #4]
   d8a86:	bd08      	pop	{r3, pc}
   d8a88:	00030228 	.word	0x00030228

000d8a8c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8a8c:	b508      	push	{r3, lr}
   d8a8e:	4b02      	ldr	r3, [pc, #8]	; (d8a98 <hal_i2c_is_enabled+0xc>)
   d8a90:	681b      	ldr	r3, [r3, #0]
   d8a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8a94:	9301      	str	r3, [sp, #4]
   d8a96:	bd08      	pop	{r3, pc}
   d8a98:	00030228 	.word	0x00030228

000d8a9c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8a9c:	b508      	push	{r3, lr}
   d8a9e:	4b02      	ldr	r3, [pc, #8]	; (d8aa8 <hal_i2c_init+0xc>)
   d8aa0:	681b      	ldr	r3, [r3, #0]
   d8aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8aa4:	9301      	str	r3, [sp, #4]
   d8aa6:	bd08      	pop	{r3, pc}
   d8aa8:	00030228 	.word	0x00030228

000d8aac <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d8aac:	b508      	push	{r3, lr}
   d8aae:	4b02      	ldr	r3, [pc, #8]	; (d8ab8 <hal_i2c_lock+0xc>)
   d8ab0:	681b      	ldr	r3, [r3, #0]
   d8ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8ab4:	9301      	str	r3, [sp, #4]
   d8ab6:	bd08      	pop	{r3, pc}
   d8ab8:	00030228 	.word	0x00030228

000d8abc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d8abc:	b508      	push	{r3, lr}
   d8abe:	4b02      	ldr	r3, [pc, #8]	; (d8ac8 <hal_i2c_unlock+0xc>)
   d8ac0:	681b      	ldr	r3, [r3, #0]
   d8ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8ac4:	9301      	str	r3, [sp, #4]
   d8ac6:	bd08      	pop	{r3, pc}
   d8ac8:	00030228 	.word	0x00030228

000d8acc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8acc:	b508      	push	{r3, lr}
   d8ace:	4b02      	ldr	r3, [pc, #8]	; (d8ad8 <hal_i2c_request_ex+0xc>)
   d8ad0:	681b      	ldr	r3, [r3, #0]
   d8ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8ad4:	9301      	str	r3, [sp, #4]
   d8ad6:	bd08      	pop	{r3, pc}
   d8ad8:	00030228 	.word	0x00030228

000d8adc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8adc:	b508      	push	{r3, lr}
   d8ade:	4b02      	ldr	r3, [pc, #8]	; (d8ae8 <inet_inet_ntop+0xc>)
   d8ae0:	681b      	ldr	r3, [r3, #0]
   d8ae2:	695b      	ldr	r3, [r3, #20]
   d8ae4:	9301      	str	r3, [sp, #4]
   d8ae6:	bd08      	pop	{r3, pc}
   d8ae8:	00030264 	.word	0x00030264

000d8aec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8aec:	b508      	push	{r3, lr}
   d8aee:	4b02      	ldr	r3, [pc, #8]	; (d8af8 <netdb_freeaddrinfo+0xc>)
   d8af0:	681b      	ldr	r3, [r3, #0]
   d8af2:	689b      	ldr	r3, [r3, #8]
   d8af4:	9301      	str	r3, [sp, #4]
   d8af6:	bd08      	pop	{r3, pc}
   d8af8:	00030268 	.word	0x00030268

000d8afc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8afc:	b508      	push	{r3, lr}
   d8afe:	4b02      	ldr	r3, [pc, #8]	; (d8b08 <netdb_getaddrinfo+0xc>)
   d8b00:	681b      	ldr	r3, [r3, #0]
   d8b02:	68db      	ldr	r3, [r3, #12]
   d8b04:	9301      	str	r3, [sp, #4]
   d8b06:	bd08      	pop	{r3, pc}
   d8b08:	00030268 	.word	0x00030268

000d8b0c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d8b0c:	b508      	push	{r3, lr}
   d8b0e:	4b02      	ldr	r3, [pc, #8]	; (d8b18 <hal_spi_init+0xc>)
   d8b10:	681b      	ldr	r3, [r3, #0]
   d8b12:	69db      	ldr	r3, [r3, #28]
   d8b14:	9301      	str	r3, [sp, #4]
   d8b16:	bd08      	pop	{r3, pc}
   d8b18:	00030230 	.word	0x00030230

000d8b1c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d8b1c:	b508      	push	{r3, lr}
   d8b1e:	4b02      	ldr	r3, [pc, #8]	; (d8b28 <hal_spi_is_enabled+0xc>)
   d8b20:	681b      	ldr	r3, [r3, #0]
   d8b22:	6a1b      	ldr	r3, [r3, #32]
   d8b24:	9301      	str	r3, [sp, #4]
   d8b26:	bd08      	pop	{r3, pc}
   d8b28:	00030230 	.word	0x00030230

000d8b2c <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   d8b2c:	b508      	push	{r3, lr}
   d8b2e:	4b02      	ldr	r3, [pc, #8]	; (d8b38 <_open+0xc>)
   d8b30:	681b      	ldr	r3, [r3, #0]
   d8b32:	681b      	ldr	r3, [r3, #0]
   d8b34:	9301      	str	r3, [sp, #4]
   d8b36:	bd08      	pop	{r3, pc}
   d8b38:	00030284 	.word	0x00030284

000d8b3c <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   d8b3c:	b508      	push	{r3, lr}
   d8b3e:	4b02      	ldr	r3, [pc, #8]	; (d8b48 <_write+0xc>)
   d8b40:	681b      	ldr	r3, [r3, #0]
   d8b42:	685b      	ldr	r3, [r3, #4]
   d8b44:	9301      	str	r3, [sp, #4]
   d8b46:	bd08      	pop	{r3, pc}
   d8b48:	00030284 	.word	0x00030284

000d8b4c <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   d8b4c:	b508      	push	{r3, lr}
   d8b4e:	4b02      	ldr	r3, [pc, #8]	; (d8b58 <_read+0xc>)
   d8b50:	681b      	ldr	r3, [r3, #0]
   d8b52:	689b      	ldr	r3, [r3, #8]
   d8b54:	9301      	str	r3, [sp, #4]
   d8b56:	bd08      	pop	{r3, pc}
   d8b58:	00030284 	.word	0x00030284

000d8b5c <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   d8b5c:	b508      	push	{r3, lr}
   d8b5e:	4b02      	ldr	r3, [pc, #8]	; (d8b68 <_close+0xc>)
   d8b60:	681b      	ldr	r3, [r3, #0]
   d8b62:	68db      	ldr	r3, [r3, #12]
   d8b64:	9301      	str	r3, [sp, #4]
   d8b66:	bd08      	pop	{r3, pc}
   d8b68:	00030284 	.word	0x00030284

000d8b6c <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   d8b6c:	b508      	push	{r3, lr}
   d8b6e:	4b02      	ldr	r3, [pc, #8]	; (d8b78 <_fstat+0xc>)
   d8b70:	681b      	ldr	r3, [r3, #0]
   d8b72:	695b      	ldr	r3, [r3, #20]
   d8b74:	9301      	str	r3, [sp, #4]
   d8b76:	bd08      	pop	{r3, pc}
   d8b78:	00030284 	.word	0x00030284

000d8b7c <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   d8b7c:	b508      	push	{r3, lr}
   d8b7e:	4b02      	ldr	r3, [pc, #8]	; (d8b88 <_lseek+0xc>)
   d8b80:	681b      	ldr	r3, [r3, #0]
   d8b82:	6a1b      	ldr	r3, [r3, #32]
   d8b84:	9301      	str	r3, [sp, #4]
   d8b86:	bd08      	pop	{r3, pc}
   d8b88:	00030284 	.word	0x00030284

000d8b8c <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   d8b8c:	b508      	push	{r3, lr}
   d8b8e:	4b02      	ldr	r3, [pc, #8]	; (d8b98 <stat+0xc>)
   d8b90:	681b      	ldr	r3, [r3, #0]
   d8b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8b94:	9301      	str	r3, [sp, #4]
   d8b96:	bd08      	pop	{r3, pc}
   d8b98:	00030284 	.word	0x00030284

000d8b9c <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   d8b9c:	b508      	push	{r3, lr}
   d8b9e:	4b02      	ldr	r3, [pc, #8]	; (d8ba8 <mkdir+0xc>)
   d8ba0:	681b      	ldr	r3, [r3, #0]
   d8ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8ba4:	9301      	str	r3, [sp, #4]
   d8ba6:	bd08      	pop	{r3, pc}
   d8ba8:	00030284 	.word	0x00030284

000d8bac <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   d8bac:	b508      	push	{r3, lr}
   d8bae:	4b02      	ldr	r3, [pc, #8]	; (d8bb8 <_unlink+0xc>)
   d8bb0:	681b      	ldr	r3, [r3, #0]
   d8bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8bb4:	9301      	str	r3, [sp, #4]
   d8bb6:	bd08      	pop	{r3, pc}
   d8bb8:	00030284 	.word	0x00030284

000d8bbc <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   d8bbc:	b508      	push	{r3, lr}
   d8bbe:	4b02      	ldr	r3, [pc, #8]	; (d8bc8 <opendir+0xc>)
   d8bc0:	681b      	ldr	r3, [r3, #0]
   d8bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8bc4:	9301      	str	r3, [sp, #4]
   d8bc6:	bd08      	pop	{r3, pc}
   d8bc8:	00030284 	.word	0x00030284

000d8bcc <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   d8bcc:	b508      	push	{r3, lr}
   d8bce:	4b02      	ldr	r3, [pc, #8]	; (d8bd8 <readdir+0xc>)
   d8bd0:	681b      	ldr	r3, [r3, #0]
   d8bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8bd4:	9301      	str	r3, [sp, #4]
   d8bd6:	bd08      	pop	{r3, pc}
   d8bd8:	00030284 	.word	0x00030284

000d8bdc <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   d8bdc:	b508      	push	{r3, lr}
   d8bde:	4b02      	ldr	r3, [pc, #8]	; (d8be8 <closedir+0xc>)
   d8be0:	681b      	ldr	r3, [r3, #0]
   d8be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8be4:	9301      	str	r3, [sp, #4]
   d8be6:	bd08      	pop	{r3, pc}
   d8be8:	00030284 	.word	0x00030284

000d8bec <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8bec:	b508      	push	{r3, lr}
   d8bee:	4b02      	ldr	r3, [pc, #8]	; (d8bf8 <hal_usart_init+0xc>)
   d8bf0:	681b      	ldr	r3, [r3, #0]
   d8bf2:	681b      	ldr	r3, [r3, #0]
   d8bf4:	9301      	str	r3, [sp, #4]
   d8bf6:	bd08      	pop	{r3, pc}
   d8bf8:	0003023c 	.word	0x0003023c

000d8bfc <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d8bfc:	b508      	push	{r3, lr}
   d8bfe:	4b02      	ldr	r3, [pc, #8]	; (d8c08 <hal_usart_end+0xc>)
   d8c00:	681b      	ldr	r3, [r3, #0]
   d8c02:	689b      	ldr	r3, [r3, #8]
   d8c04:	9301      	str	r3, [sp, #4]
   d8c06:	bd08      	pop	{r3, pc}
   d8c08:	0003023c 	.word	0x0003023c

000d8c0c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8c0c:	b508      	push	{r3, lr}
   d8c0e:	4b02      	ldr	r3, [pc, #8]	; (d8c18 <hal_usart_write+0xc>)
   d8c10:	681b      	ldr	r3, [r3, #0]
   d8c12:	68db      	ldr	r3, [r3, #12]
   d8c14:	9301      	str	r3, [sp, #4]
   d8c16:	bd08      	pop	{r3, pc}
   d8c18:	0003023c 	.word	0x0003023c

000d8c1c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8c1c:	b508      	push	{r3, lr}
   d8c1e:	4b02      	ldr	r3, [pc, #8]	; (d8c28 <hal_usart_available+0xc>)
   d8c20:	681b      	ldr	r3, [r3, #0]
   d8c22:	691b      	ldr	r3, [r3, #16]
   d8c24:	9301      	str	r3, [sp, #4]
   d8c26:	bd08      	pop	{r3, pc}
   d8c28:	0003023c 	.word	0x0003023c

000d8c2c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d8c2c:	b508      	push	{r3, lr}
   d8c2e:	4b02      	ldr	r3, [pc, #8]	; (d8c38 <hal_usart_read+0xc>)
   d8c30:	681b      	ldr	r3, [r3, #0]
   d8c32:	695b      	ldr	r3, [r3, #20]
   d8c34:	9301      	str	r3, [sp, #4]
   d8c36:	bd08      	pop	{r3, pc}
   d8c38:	0003023c 	.word	0x0003023c

000d8c3c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d8c3c:	b508      	push	{r3, lr}
   d8c3e:	4b02      	ldr	r3, [pc, #8]	; (d8c48 <hal_usart_peek+0xc>)
   d8c40:	681b      	ldr	r3, [r3, #0]
   d8c42:	699b      	ldr	r3, [r3, #24]
   d8c44:	9301      	str	r3, [sp, #4]
   d8c46:	bd08      	pop	{r3, pc}
   d8c48:	0003023c 	.word	0x0003023c

000d8c4c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8c4c:	b508      	push	{r3, lr}
   d8c4e:	4b02      	ldr	r3, [pc, #8]	; (d8c58 <hal_usart_flush+0xc>)
   d8c50:	681b      	ldr	r3, [r3, #0]
   d8c52:	69db      	ldr	r3, [r3, #28]
   d8c54:	9301      	str	r3, [sp, #4]
   d8c56:	bd08      	pop	{r3, pc}
   d8c58:	0003023c 	.word	0x0003023c

000d8c5c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8c5c:	b508      	push	{r3, lr}
   d8c5e:	4b02      	ldr	r3, [pc, #8]	; (d8c68 <hal_usart_is_enabled+0xc>)
   d8c60:	681b      	ldr	r3, [r3, #0]
   d8c62:	6a1b      	ldr	r3, [r3, #32]
   d8c64:	9301      	str	r3, [sp, #4]
   d8c66:	bd08      	pop	{r3, pc}
   d8c68:	0003023c 	.word	0x0003023c

000d8c6c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8c6c:	b508      	push	{r3, lr}
   d8c6e:	4b02      	ldr	r3, [pc, #8]	; (d8c78 <hal_usart_available_data_for_write+0xc>)
   d8c70:	681b      	ldr	r3, [r3, #0]
   d8c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8c74:	9301      	str	r3, [sp, #4]
   d8c76:	bd08      	pop	{r3, pc}
   d8c78:	0003023c 	.word	0x0003023c

000d8c7c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d8c7c:	b508      	push	{r3, lr}
   d8c7e:	4b02      	ldr	r3, [pc, #8]	; (d8c88 <hal_usart_begin_config+0xc>)
   d8c80:	681b      	ldr	r3, [r3, #0]
   d8c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8c84:	9301      	str	r3, [sp, #4]
   d8c86:	bd08      	pop	{r3, pc}
   d8c88:	0003023c 	.word	0x0003023c

000d8c8c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8c8c:	b508      	push	{r3, lr}
   d8c8e:	4b02      	ldr	r3, [pc, #8]	; (d8c98 <HAL_USB_USART_Init+0xc>)
   d8c90:	681b      	ldr	r3, [r3, #0]
   d8c92:	681b      	ldr	r3, [r3, #0]
   d8c94:	9301      	str	r3, [sp, #4]
   d8c96:	bd08      	pop	{r3, pc}
   d8c98:	0003024c 	.word	0x0003024c

000d8c9c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8c9c:	b508      	push	{r3, lr}
   d8c9e:	4b02      	ldr	r3, [pc, #8]	; (d8ca8 <HAL_USB_USART_Begin+0xc>)
   d8ca0:	681b      	ldr	r3, [r3, #0]
   d8ca2:	685b      	ldr	r3, [r3, #4]
   d8ca4:	9301      	str	r3, [sp, #4]
   d8ca6:	bd08      	pop	{r3, pc}
   d8ca8:	0003024c 	.word	0x0003024c

000d8cac <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d8cac:	b508      	push	{r3, lr}
   d8cae:	4b02      	ldr	r3, [pc, #8]	; (d8cb8 <HAL_USB_USART_End+0xc>)
   d8cb0:	681b      	ldr	r3, [r3, #0]
   d8cb2:	689b      	ldr	r3, [r3, #8]
   d8cb4:	9301      	str	r3, [sp, #4]
   d8cb6:	bd08      	pop	{r3, pc}
   d8cb8:	0003024c 	.word	0x0003024c

000d8cbc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8cbc:	b508      	push	{r3, lr}
   d8cbe:	4b02      	ldr	r3, [pc, #8]	; (d8cc8 <HAL_USB_USART_Available_Data+0xc>)
   d8cc0:	681b      	ldr	r3, [r3, #0]
   d8cc2:	691b      	ldr	r3, [r3, #16]
   d8cc4:	9301      	str	r3, [sp, #4]
   d8cc6:	bd08      	pop	{r3, pc}
   d8cc8:	0003024c 	.word	0x0003024c

000d8ccc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8ccc:	b508      	push	{r3, lr}
   d8cce:	4b02      	ldr	r3, [pc, #8]	; (d8cd8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8cd0:	681b      	ldr	r3, [r3, #0]
   d8cd2:	695b      	ldr	r3, [r3, #20]
   d8cd4:	9301      	str	r3, [sp, #4]
   d8cd6:	bd08      	pop	{r3, pc}
   d8cd8:	0003024c 	.word	0x0003024c

000d8cdc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8cdc:	b508      	push	{r3, lr}
   d8cde:	4b02      	ldr	r3, [pc, #8]	; (d8ce8 <HAL_USB_USART_Receive_Data+0xc>)
   d8ce0:	681b      	ldr	r3, [r3, #0]
   d8ce2:	699b      	ldr	r3, [r3, #24]
   d8ce4:	9301      	str	r3, [sp, #4]
   d8ce6:	bd08      	pop	{r3, pc}
   d8ce8:	0003024c 	.word	0x0003024c

000d8cec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8cec:	b508      	push	{r3, lr}
   d8cee:	4b02      	ldr	r3, [pc, #8]	; (d8cf8 <HAL_USB_USART_Send_Data+0xc>)
   d8cf0:	681b      	ldr	r3, [r3, #0]
   d8cf2:	69db      	ldr	r3, [r3, #28]
   d8cf4:	9301      	str	r3, [sp, #4]
   d8cf6:	bd08      	pop	{r3, pc}
   d8cf8:	0003024c 	.word	0x0003024c

000d8cfc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8cfc:	b508      	push	{r3, lr}
   d8cfe:	4b02      	ldr	r3, [pc, #8]	; (d8d08 <HAL_USB_USART_Flush_Data+0xc>)
   d8d00:	681b      	ldr	r3, [r3, #0]
   d8d02:	6a1b      	ldr	r3, [r3, #32]
   d8d04:	9301      	str	r3, [sp, #4]
   d8d06:	bd08      	pop	{r3, pc}
   d8d08:	0003024c 	.word	0x0003024c

000d8d0c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8d0c:	b508      	push	{r3, lr}
   d8d0e:	4b02      	ldr	r3, [pc, #8]	; (d8d18 <panic_+0xc>)
   d8d10:	681b      	ldr	r3, [r3, #0]
   d8d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8d14:	9301      	str	r3, [sp, #4]
   d8d16:	bd08      	pop	{r3, pc}
   d8d18:	00030260 	.word	0x00030260

000d8d1c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8d1c:	b508      	push	{r3, lr}
   d8d1e:	4b02      	ldr	r3, [pc, #8]	; (d8d28 <log_message+0xc>)
   d8d20:	681b      	ldr	r3, [r3, #0]
   d8d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8d24:	9301      	str	r3, [sp, #4]
   d8d26:	bd08      	pop	{r3, pc}
   d8d28:	00030260 	.word	0x00030260

000d8d2c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8d2c:	b508      	push	{r3, lr}
   d8d2e:	4b02      	ldr	r3, [pc, #8]	; (d8d38 <log_message_v+0xc>)
   d8d30:	681b      	ldr	r3, [r3, #0]
   d8d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8d34:	9301      	str	r3, [sp, #4]
   d8d36:	bd08      	pop	{r3, pc}
   d8d38:	00030260 	.word	0x00030260

000d8d3c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d8d3c:	b508      	push	{r3, lr}
   d8d3e:	4b02      	ldr	r3, [pc, #8]	; (d8d48 <log_level_name+0xc>)
   d8d40:	681b      	ldr	r3, [r3, #0]
   d8d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8d44:	9301      	str	r3, [sp, #4]
   d8d46:	bd08      	pop	{r3, pc}
   d8d48:	00030260 	.word	0x00030260

000d8d4c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d8d4c:	b508      	push	{r3, lr}
   d8d4e:	4b02      	ldr	r3, [pc, #8]	; (d8d58 <log_set_callbacks+0xc>)
   d8d50:	681b      	ldr	r3, [r3, #0]
   d8d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d8d54:	9301      	str	r3, [sp, #4]
   d8d56:	bd08      	pop	{r3, pc}
   d8d58:	00030260 	.word	0x00030260

000d8d5c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8d5c:	b508      	push	{r3, lr}
   d8d5e:	4b03      	ldr	r3, [pc, #12]	; (d8d6c <diag_get_source+0x10>)
   d8d60:	681b      	ldr	r3, [r3, #0]
   d8d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d8d66:	9301      	str	r3, [sp, #4]
   d8d68:	bd08      	pop	{r3, pc}
   d8d6a:	0000      	.short	0x0000
   d8d6c:	00030260 	.word	0x00030260

000d8d70 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8d70:	b508      	push	{r3, lr}
   d8d72:	4b02      	ldr	r3, [pc, #8]	; (d8d7c <system_mode+0xc>)
   d8d74:	681b      	ldr	r3, [r3, #0]
   d8d76:	681b      	ldr	r3, [r3, #0]
   d8d78:	9301      	str	r3, [sp, #4]
   d8d7a:	bd08      	pop	{r3, pc}
   d8d7c:	00030220 	.word	0x00030220

000d8d80 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8d80:	b508      	push	{r3, lr}
   d8d82:	4b02      	ldr	r3, [pc, #8]	; (d8d8c <set_system_mode+0xc>)
   d8d84:	681b      	ldr	r3, [r3, #0]
   d8d86:	685b      	ldr	r3, [r3, #4]
   d8d88:	9301      	str	r3, [sp, #4]
   d8d8a:	bd08      	pop	{r3, pc}
   d8d8c:	00030220 	.word	0x00030220

000d8d90 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8d90:	b508      	push	{r3, lr}
   d8d92:	4b02      	ldr	r3, [pc, #8]	; (d8d9c <system_delay_ms+0xc>)
   d8d94:	681b      	ldr	r3, [r3, #0]
   d8d96:	695b      	ldr	r3, [r3, #20]
   d8d98:	9301      	str	r3, [sp, #4]
   d8d9a:	bd08      	pop	{r3, pc}
   d8d9c:	00030220 	.word	0x00030220

000d8da0 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d8da0:	b508      	push	{r3, lr}
   d8da2:	4b02      	ldr	r3, [pc, #8]	; (d8dac <system_subscribe_event+0xc>)
   d8da4:	681b      	ldr	r3, [r3, #0]
   d8da6:	6a1b      	ldr	r3, [r3, #32]
   d8da8:	9301      	str	r3, [sp, #4]
   d8daa:	bd08      	pop	{r3, pc}
   d8dac:	00030220 	.word	0x00030220

000d8db0 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8db0:	b508      	push	{r3, lr}
   d8db2:	4b02      	ldr	r3, [pc, #8]	; (d8dbc <system_thread_set_state+0xc>)
   d8db4:	681b      	ldr	r3, [r3, #0]
   d8db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8db8:	9301      	str	r3, [sp, #4]
   d8dba:	bd08      	pop	{r3, pc}
   d8dbc:	00030220 	.word	0x00030220

000d8dc0 <system_set_flag>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
   d8dc0:	b508      	push	{r3, lr}
   d8dc2:	4b02      	ldr	r3, [pc, #8]	; (d8dcc <system_set_flag+0xc>)
   d8dc4:	681b      	ldr	r3, [r3, #0]
   d8dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8dc8:	9301      	str	r3, [sp, #4]
   d8dca:	bd08      	pop	{r3, pc}
   d8dcc:	00030220 	.word	0x00030220

000d8dd0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8dd0:	b508      	push	{r3, lr}
   d8dd2:	4b02      	ldr	r3, [pc, #8]	; (d8ddc <application_thread_current+0xc>)
   d8dd4:	681b      	ldr	r3, [r3, #0]
   d8dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8dd8:	9301      	str	r3, [sp, #4]
   d8dda:	bd08      	pop	{r3, pc}
   d8ddc:	00030220 	.word	0x00030220

000d8de0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8de0:	b508      	push	{r3, lr}
   d8de2:	4b02      	ldr	r3, [pc, #8]	; (d8dec <application_thread_invoke+0xc>)
   d8de4:	681b      	ldr	r3, [r3, #0]
   d8de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8de8:	9301      	str	r3, [sp, #4]
   d8dea:	bd08      	pop	{r3, pc}
   d8dec:	00030220 	.word	0x00030220

000d8df0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8df0:	b508      	push	{r3, lr}
   d8df2:	4b02      	ldr	r3, [pc, #8]	; (d8dfc <system_thread_get_state+0xc>)
   d8df4:	681b      	ldr	r3, [r3, #0]
   d8df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8df8:	9301      	str	r3, [sp, #4]
   d8dfa:	bd08      	pop	{r3, pc}
   d8dfc:	00030220 	.word	0x00030220

000d8e00 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8e00:	b508      	push	{r3, lr}
   d8e02:	4b02      	ldr	r3, [pc, #8]	; (d8e0c <system_notify_time_changed+0xc>)
   d8e04:	681b      	ldr	r3, [r3, #0]
   d8e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8e08:	9301      	str	r3, [sp, #4]
   d8e0a:	bd08      	pop	{r3, pc}
   d8e0c:	00030220 	.word	0x00030220

000d8e10 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8e10:	b508      	push	{r3, lr}
   d8e12:	4b03      	ldr	r3, [pc, #12]	; (d8e20 <system_ctrl_set_app_request_handler+0x10>)
   d8e14:	681b      	ldr	r3, [r3, #0]
   d8e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8e1a:	9301      	str	r3, [sp, #4]
   d8e1c:	bd08      	pop	{r3, pc}
   d8e1e:	0000      	.short	0x0000
   d8e20:	00030220 	.word	0x00030220

000d8e24 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8e24:	b508      	push	{r3, lr}
   d8e26:	4b03      	ldr	r3, [pc, #12]	; (d8e34 <system_ctrl_set_result+0x10>)
   d8e28:	681b      	ldr	r3, [r3, #0]
   d8e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8e2e:	9301      	str	r3, [sp, #4]
   d8e30:	bd08      	pop	{r3, pc}
   d8e32:	0000      	.short	0x0000
   d8e34:	00030220 	.word	0x00030220

000d8e38 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8e38:	b508      	push	{r3, lr}
   d8e3a:	4b03      	ldr	r3, [pc, #12]	; (d8e48 <system_power_management_set_config+0x10>)
   d8e3c:	681b      	ldr	r3, [r3, #0]
   d8e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d8e42:	9301      	str	r3, [sp, #4]
   d8e44:	bd08      	pop	{r3, pc}
   d8e46:	0000      	.short	0x0000
   d8e48:	00030220 	.word	0x00030220

000d8e4c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d8e4c:	b508      	push	{r3, lr}
   d8e4e:	4b03      	ldr	r3, [pc, #12]	; (d8e5c <system_sleep_ext+0x10>)
   d8e50:	681b      	ldr	r3, [r3, #0]
   d8e52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d8e56:	9301      	str	r3, [sp, #4]
   d8e58:	bd08      	pop	{r3, pc}
   d8e5a:	0000      	.short	0x0000
   d8e5c:	00030220 	.word	0x00030220

000d8e60 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8e60:	b508      	push	{r3, lr}
   d8e62:	4b03      	ldr	r3, [pc, #12]	; (d8e70 <system_reset+0x10>)
   d8e64:	681b      	ldr	r3, [r3, #0]
   d8e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d8e6a:	9301      	str	r3, [sp, #4]
   d8e6c:	bd08      	pop	{r3, pc}
   d8e6e:	0000      	.short	0x0000
   d8e70:	00030220 	.word	0x00030220

000d8e74 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d8e74:	b508      	push	{r3, lr}
   d8e76:	4b02      	ldr	r3, [pc, #8]	; (d8e80 <spark_variable+0xc>)
   d8e78:	681b      	ldr	r3, [r3, #0]
   d8e7a:	681b      	ldr	r3, [r3, #0]
   d8e7c:	9301      	str	r3, [sp, #4]
   d8e7e:	bd08      	pop	{r3, pc}
   d8e80:	00030244 	.word	0x00030244

000d8e84 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d8e84:	b508      	push	{r3, lr}
   d8e86:	4b02      	ldr	r3, [pc, #8]	; (d8e90 <spark_function+0xc>)
   d8e88:	681b      	ldr	r3, [r3, #0]
   d8e8a:	685b      	ldr	r3, [r3, #4]
   d8e8c:	9301      	str	r3, [sp, #4]
   d8e8e:	bd08      	pop	{r3, pc}
   d8e90:	00030244 	.word	0x00030244

000d8e94 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8e94:	b508      	push	{r3, lr}
   d8e96:	4b02      	ldr	r3, [pc, #8]	; (d8ea0 <spark_process+0xc>)
   d8e98:	681b      	ldr	r3, [r3, #0]
   d8e9a:	689b      	ldr	r3, [r3, #8]
   d8e9c:	9301      	str	r3, [sp, #4]
   d8e9e:	bd08      	pop	{r3, pc}
   d8ea0:	00030244 	.word	0x00030244

000d8ea4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8ea4:	b508      	push	{r3, lr}
   d8ea6:	4b02      	ldr	r3, [pc, #8]	; (d8eb0 <spark_cloud_flag_connect+0xc>)
   d8ea8:	681b      	ldr	r3, [r3, #0]
   d8eaa:	68db      	ldr	r3, [r3, #12]
   d8eac:	9301      	str	r3, [sp, #4]
   d8eae:	bd08      	pop	{r3, pc}
   d8eb0:	00030244 	.word	0x00030244

000d8eb4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8eb4:	b508      	push	{r3, lr}
   d8eb6:	4b02      	ldr	r3, [pc, #8]	; (d8ec0 <spark_cloud_flag_connected+0xc>)
   d8eb8:	681b      	ldr	r3, [r3, #0]
   d8eba:	695b      	ldr	r3, [r3, #20]
   d8ebc:	9301      	str	r3, [sp, #4]
   d8ebe:	bd08      	pop	{r3, pc}
   d8ec0:	00030244 	.word	0x00030244

000d8ec4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8ec4:	b508      	push	{r3, lr}
   d8ec6:	4b02      	ldr	r3, [pc, #8]	; (d8ed0 <spark_deviceID+0xc>)
   d8ec8:	681b      	ldr	r3, [r3, #0]
   d8eca:	69db      	ldr	r3, [r3, #28]
   d8ecc:	9301      	str	r3, [sp, #4]
   d8ece:	bd08      	pop	{r3, pc}
   d8ed0:	00030244 	.word	0x00030244

000d8ed4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8ed4:	b508      	push	{r3, lr}
   d8ed6:	4b02      	ldr	r3, [pc, #8]	; (d8ee0 <spark_send_event+0xc>)
   d8ed8:	681b      	ldr	r3, [r3, #0]
   d8eda:	6a1b      	ldr	r3, [r3, #32]
   d8edc:	9301      	str	r3, [sp, #4]
   d8ede:	bd08      	pop	{r3, pc}
   d8ee0:	00030244 	.word	0x00030244

000d8ee4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d8ee4:	b508      	push	{r3, lr}
   d8ee6:	4b02      	ldr	r3, [pc, #8]	; (d8ef0 <spark_subscribe+0xc>)
   d8ee8:	681b      	ldr	r3, [r3, #0]
   d8eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8eec:	9301      	str	r3, [sp, #4]
   d8eee:	bd08      	pop	{r3, pc}
   d8ef0:	00030244 	.word	0x00030244

000d8ef4 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8ef4:	b508      	push	{r3, lr}
   d8ef6:	4b02      	ldr	r3, [pc, #8]	; (d8f00 <spark_sync_time+0xc>)
   d8ef8:	681b      	ldr	r3, [r3, #0]
   d8efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8efc:	9301      	str	r3, [sp, #4]
   d8efe:	bd08      	pop	{r3, pc}
   d8f00:	00030244 	.word	0x00030244

000d8f04 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8f04:	b508      	push	{r3, lr}
   d8f06:	4b02      	ldr	r3, [pc, #8]	; (d8f10 <spark_sync_time_pending+0xc>)
   d8f08:	681b      	ldr	r3, [r3, #0]
   d8f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8f0c:	9301      	str	r3, [sp, #4]
   d8f0e:	bd08      	pop	{r3, pc}
   d8f10:	00030244 	.word	0x00030244

000d8f14 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d8f14:	b508      	push	{r3, lr}
   d8f16:	4b02      	ldr	r3, [pc, #8]	; (d8f20 <spark_sync_time_last+0xc>)
   d8f18:	681b      	ldr	r3, [r3, #0]
   d8f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8f1c:	9301      	str	r3, [sp, #4]
   d8f1e:	bd08      	pop	{r3, pc}
   d8f20:	00030244 	.word	0x00030244

000d8f24 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d8f24:	b508      	push	{r3, lr}
   d8f26:	4b02      	ldr	r3, [pc, #8]	; (d8f30 <spark_set_connection_property+0xc>)
   d8f28:	681b      	ldr	r3, [r3, #0]
   d8f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8f2c:	9301      	str	r3, [sp, #4]
   d8f2e:	bd08      	pop	{r3, pc}
   d8f30:	00030244 	.word	0x00030244

000d8f34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8f34:	b508      	push	{r3, lr}
   d8f36:	4b02      	ldr	r3, [pc, #8]	; (d8f40 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8f38:	681b      	ldr	r3, [r3, #0]
   d8f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8f3c:	9301      	str	r3, [sp, #4]
   d8f3e:	bd08      	pop	{r3, pc}
   d8f40:	00030244 	.word	0x00030244

000d8f44 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d8f44:	b508      	push	{r3, lr}
   d8f46:	4b02      	ldr	r3, [pc, #8]	; (d8f50 <spark_cloud_disconnect+0xc>)
   d8f48:	681b      	ldr	r3, [r3, #0]
   d8f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8f4c:	9301      	str	r3, [sp, #4]
   d8f4e:	bd08      	pop	{r3, pc}
   d8f50:	00030244 	.word	0x00030244

000d8f54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8f54:	b508      	push	{r3, lr}
   d8f56:	4b02      	ldr	r3, [pc, #8]	; (d8f60 <network_connect+0xc>)
   d8f58:	681b      	ldr	r3, [r3, #0]
   d8f5a:	685b      	ldr	r3, [r3, #4]
   d8f5c:	9301      	str	r3, [sp, #4]
   d8f5e:	bd08      	pop	{r3, pc}
   d8f60:	00030240 	.word	0x00030240

000d8f64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8f64:	b508      	push	{r3, lr}
   d8f66:	4b02      	ldr	r3, [pc, #8]	; (d8f70 <network_connecting+0xc>)
   d8f68:	681b      	ldr	r3, [r3, #0]
   d8f6a:	689b      	ldr	r3, [r3, #8]
   d8f6c:	9301      	str	r3, [sp, #4]
   d8f6e:	bd08      	pop	{r3, pc}
   d8f70:	00030240 	.word	0x00030240

000d8f74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8f74:	b508      	push	{r3, lr}
   d8f76:	4b02      	ldr	r3, [pc, #8]	; (d8f80 <network_disconnect+0xc>)
   d8f78:	681b      	ldr	r3, [r3, #0]
   d8f7a:	68db      	ldr	r3, [r3, #12]
   d8f7c:	9301      	str	r3, [sp, #4]
   d8f7e:	bd08      	pop	{r3, pc}
   d8f80:	00030240 	.word	0x00030240

000d8f84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8f84:	b508      	push	{r3, lr}
   d8f86:	4b02      	ldr	r3, [pc, #8]	; (d8f90 <network_ready+0xc>)
   d8f88:	681b      	ldr	r3, [r3, #0]
   d8f8a:	691b      	ldr	r3, [r3, #16]
   d8f8c:	9301      	str	r3, [sp, #4]
   d8f8e:	bd08      	pop	{r3, pc}
   d8f90:	00030240 	.word	0x00030240

000d8f94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8f94:	b508      	push	{r3, lr}
   d8f96:	4b02      	ldr	r3, [pc, #8]	; (d8fa0 <network_on+0xc>)
   d8f98:	681b      	ldr	r3, [r3, #0]
   d8f9a:	695b      	ldr	r3, [r3, #20]
   d8f9c:	9301      	str	r3, [sp, #4]
   d8f9e:	bd08      	pop	{r3, pc}
   d8fa0:	00030240 	.word	0x00030240

000d8fa4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8fa4:	b508      	push	{r3, lr}
   d8fa6:	4b02      	ldr	r3, [pc, #8]	; (d8fb0 <network_off+0xc>)
   d8fa8:	681b      	ldr	r3, [r3, #0]
   d8faa:	699b      	ldr	r3, [r3, #24]
   d8fac:	9301      	str	r3, [sp, #4]
   d8fae:	bd08      	pop	{r3, pc}
   d8fb0:	00030240 	.word	0x00030240

000d8fb4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8fb4:	b508      	push	{r3, lr}
   d8fb6:	4b02      	ldr	r3, [pc, #8]	; (d8fc0 <network_listen+0xc>)
   d8fb8:	681b      	ldr	r3, [r3, #0]
   d8fba:	69db      	ldr	r3, [r3, #28]
   d8fbc:	9301      	str	r3, [sp, #4]
   d8fbe:	bd08      	pop	{r3, pc}
   d8fc0:	00030240 	.word	0x00030240

000d8fc4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8fc4:	b508      	push	{r3, lr}
   d8fc6:	4b02      	ldr	r3, [pc, #8]	; (d8fd0 <network_listening+0xc>)
   d8fc8:	681b      	ldr	r3, [r3, #0]
   d8fca:	6a1b      	ldr	r3, [r3, #32]
   d8fcc:	9301      	str	r3, [sp, #4]
   d8fce:	bd08      	pop	{r3, pc}
   d8fd0:	00030240 	.word	0x00030240

000d8fd4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8fd4:	b508      	push	{r3, lr}
   d8fd6:	4b02      	ldr	r3, [pc, #8]	; (d8fe0 <network_set_listen_timeout+0xc>)
   d8fd8:	681b      	ldr	r3, [r3, #0]
   d8fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8fdc:	9301      	str	r3, [sp, #4]
   d8fde:	bd08      	pop	{r3, pc}
   d8fe0:	00030240 	.word	0x00030240

000d8fe4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8fe4:	b508      	push	{r3, lr}
   d8fe6:	4b02      	ldr	r3, [pc, #8]	; (d8ff0 <network_get_listen_timeout+0xc>)
   d8fe8:	681b      	ldr	r3, [r3, #0]
   d8fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8fec:	9301      	str	r3, [sp, #4]
   d8fee:	bd08      	pop	{r3, pc}
   d8ff0:	00030240 	.word	0x00030240

000d8ff4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8ff4:	b508      	push	{r3, lr}
   d8ff6:	4b02      	ldr	r3, [pc, #8]	; (d9000 <network_is_on+0xc>)
   d8ff8:	681b      	ldr	r3, [r3, #0]
   d8ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8ffc:	9301      	str	r3, [sp, #4]
   d8ffe:	bd08      	pop	{r3, pc}
   d9000:	00030240 	.word	0x00030240

000d9004 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d9004:	b508      	push	{r3, lr}
   d9006:	4b02      	ldr	r3, [pc, #8]	; (d9010 <network_is_off+0xc>)
   d9008:	681b      	ldr	r3, [r3, #0]
   d900a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d900c:	9301      	str	r3, [sp, #4]
   d900e:	bd08      	pop	{r3, pc}
   d9010:	00030240 	.word	0x00030240

000d9014 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d9014:	b508      	push	{r3, lr}
   d9016:	4b02      	ldr	r3, [pc, #8]	; (d9020 <malloc+0xc>)
   d9018:	681b      	ldr	r3, [r3, #0]
   d901a:	681b      	ldr	r3, [r3, #0]
   d901c:	9301      	str	r3, [sp, #4]
   d901e:	bd08      	pop	{r3, pc}
   d9020:	0003021c 	.word	0x0003021c

000d9024 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d9024:	b508      	push	{r3, lr}
   d9026:	4b02      	ldr	r3, [pc, #8]	; (d9030 <free+0xc>)
   d9028:	681b      	ldr	r3, [r3, #0]
   d902a:	685b      	ldr	r3, [r3, #4]
   d902c:	9301      	str	r3, [sp, #4]
   d902e:	bd08      	pop	{r3, pc}
   d9030:	0003021c 	.word	0x0003021c

000d9034 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d9034:	b508      	push	{r3, lr}
   d9036:	4b02      	ldr	r3, [pc, #8]	; (d9040 <realloc+0xc>)
   d9038:	681b      	ldr	r3, [r3, #0]
   d903a:	689b      	ldr	r3, [r3, #8]
   d903c:	9301      	str	r3, [sp, #4]
   d903e:	bd08      	pop	{r3, pc}
   d9040:	0003021c 	.word	0x0003021c

000d9044 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d9044:	b508      	push	{r3, lr}
   d9046:	4b02      	ldr	r3, [pc, #8]	; (d9050 <siprintf+0xc>)
   d9048:	681b      	ldr	r3, [r3, #0]
   d904a:	691b      	ldr	r3, [r3, #16]
   d904c:	9301      	str	r3, [sp, #4]
   d904e:	bd08      	pop	{r3, pc}
   d9050:	0003021c 	.word	0x0003021c

000d9054 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d9054:	b508      	push	{r3, lr}
   d9056:	4b02      	ldr	r3, [pc, #8]	; (d9060 <sscanf+0xc>)
   d9058:	681b      	ldr	r3, [r3, #0]
   d905a:	695b      	ldr	r3, [r3, #20]
   d905c:	9301      	str	r3, [sp, #4]
   d905e:	bd08      	pop	{r3, pc}
   d9060:	0003021c 	.word	0x0003021c

000d9064 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d9064:	b508      	push	{r3, lr}
   d9066:	4b02      	ldr	r3, [pc, #8]	; (d9070 <snprintf+0xc>)
   d9068:	681b      	ldr	r3, [r3, #0]
   d906a:	69db      	ldr	r3, [r3, #28]
   d906c:	9301      	str	r3, [sp, #4]
   d906e:	bd08      	pop	{r3, pc}
   d9070:	0003021c 	.word	0x0003021c

000d9074 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d9074:	b508      	push	{r3, lr}
   d9076:	4b02      	ldr	r3, [pc, #8]	; (d9080 <vsnprintf+0xc>)
   d9078:	681b      	ldr	r3, [r3, #0]
   d907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d907c:	9301      	str	r3, [sp, #4]
   d907e:	bd08      	pop	{r3, pc}
   d9080:	0003021c 	.word	0x0003021c

000d9084 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d9084:	b508      	push	{r3, lr}
   d9086:	4b02      	ldr	r3, [pc, #8]	; (d9090 <abort+0xc>)
   d9088:	681b      	ldr	r3, [r3, #0]
   d908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d908c:	9301      	str	r3, [sp, #4]
   d908e:	bd08      	pop	{r3, pc}
   d9090:	0003021c 	.word	0x0003021c

000d9094 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d9094:	b508      	push	{r3, lr}
   d9096:	4b02      	ldr	r3, [pc, #8]	; (d90a0 <_malloc_r+0xc>)
   d9098:	681b      	ldr	r3, [r3, #0]
   d909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d909c:	9301      	str	r3, [sp, #4]
   d909e:	bd08      	pop	{r3, pc}
   d90a0:	0003021c 	.word	0x0003021c

000d90a4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d90a4:	b508      	push	{r3, lr}
   d90a6:	4b02      	ldr	r3, [pc, #8]	; (d90b0 <__errno+0xc>)
   d90a8:	681b      	ldr	r3, [r3, #0]
   d90aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d90ac:	9301      	str	r3, [sp, #4]
   d90ae:	bd08      	pop	{r3, pc}
   d90b0:	0003021c 	.word	0x0003021c

000d90b4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d90b4:	b508      	push	{r3, lr}
   d90b6:	4b02      	ldr	r3, [pc, #8]	; (d90c0 <newlib_impure_ptr_callback+0xc>)
   d90b8:	681b      	ldr	r3, [r3, #0]
   d90ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d90bc:	9301      	str	r3, [sp, #4]
   d90be:	bd08      	pop	{r3, pc}
   d90c0:	0003021c 	.word	0x0003021c

000d90c4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d90c4:	b508      	push	{r3, lr}
   d90c6:	4b02      	ldr	r3, [pc, #8]	; (d90d0 <strftime+0xc>)
   d90c8:	681b      	ldr	r3, [r3, #0]
   d90ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d90cc:	9301      	str	r3, [sp, #4]
   d90ce:	bd08      	pop	{r3, pc}
   d90d0:	0003021c 	.word	0x0003021c

000d90d4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d90d4:	b508      	push	{r3, lr}
   d90d6:	4b02      	ldr	r3, [pc, #8]	; (d90e0 <localtime_r+0xc>)
   d90d8:	681b      	ldr	r3, [r3, #0]
   d90da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d90dc:	9301      	str	r3, [sp, #4]
   d90de:	bd08      	pop	{r3, pc}
   d90e0:	0003021c 	.word	0x0003021c

000d90e4 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d90e4:	b508      	push	{r3, lr}
   d90e6:	4b02      	ldr	r3, [pc, #8]	; (d90f0 <gmtime_r+0xc>)
   d90e8:	681b      	ldr	r3, [r3, #0]
   d90ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d90ec:	9301      	str	r3, [sp, #4]
   d90ee:	bd08      	pop	{r3, pc}
   d90f0:	0003021c 	.word	0x0003021c

000d90f4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d90f4:	b508      	push	{r3, lr}
   d90f6:	4b02      	ldr	r3, [pc, #8]	; (d9100 <mktime+0xc>)
   d90f8:	681b      	ldr	r3, [r3, #0]
   d90fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d90fc:	9301      	str	r3, [sp, #4]
   d90fe:	bd08      	pop	{r3, pc}
   d9100:	0003021c 	.word	0x0003021c

000d9104 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d9104:	428a      	cmp	r2, r1
{
   d9106:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d9108:	d007      	beq.n	d911a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d910a:	9c02      	ldr	r4, [sp, #8]
   d910c:	1a40      	subs	r0, r0, r1
   d910e:	1ae4      	subs	r4, r4, r3
   d9110:	4360      	muls	r0, r4
   d9112:	1a52      	subs	r2, r2, r1
   d9114:	fb90 f0f2 	sdiv	r0, r0, r2
   d9118:	4418      	add	r0, r3
}
   d911a:	bd10      	pop	{r4, pc}

000d911c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d911c:	2100      	movs	r1, #0
   d911e:	f7ff be37 	b.w	d8d90 <system_delay_ms>

000d9122 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d9122:	b510      	push	{r4, lr}
      if (_M_empty())
   d9124:	6883      	ldr	r3, [r0, #8]
   d9126:	4604      	mov	r4, r0
   d9128:	b90b      	cbnz	r3, d912e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d912a:	f003 f9a3 	bl	dc474 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d912e:	68c3      	ldr	r3, [r0, #12]
   d9130:	4798      	blx	r3
      if (_M_manager)
   d9132:	68a3      	ldr	r3, [r4, #8]
   d9134:	b11b      	cbz	r3, d913e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9136:	2203      	movs	r2, #3
   d9138:	4621      	mov	r1, r4
   d913a:	4620      	mov	r0, r4
   d913c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d913e:	4620      	mov	r0, r4
   d9140:	2110      	movs	r1, #16
}
   d9142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d9146:	f003 b989 	b.w	dc45c <_ZdlPvj>

000d914a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d914a:	680b      	ldr	r3, [r1, #0]
   d914c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d914e:	b113      	cbz	r3, d9156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d9150:	685a      	ldr	r2, [r3, #4]
   d9152:	3201      	adds	r2, #1
   d9154:	605a      	str	r2, [r3, #4]
      }
   d9156:	4770      	bx	lr

000d9158 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9158:	4802      	ldr	r0, [pc, #8]	; (d9164 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d915a:	2300      	movs	r3, #0
   d915c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d915e:	f7ff bb8d 	b.w	d887c <os_mutex_recursive_create>
   d9162:	bf00      	nop
   d9164:	2003e460 	.word	0x2003e460

000d9168 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9168:	2200      	movs	r2, #0
   d916a:	6840      	ldr	r0, [r0, #4]
   d916c:	4611      	mov	r1, r2
   d916e:	f7ff bf09 	b.w	d8f84 <network_ready>

000d9172 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d9172:	2200      	movs	r2, #0
   d9174:	6840      	ldr	r0, [r0, #4]
   d9176:	4611      	mov	r1, r2
   d9178:	f7ff bf24 	b.w	d8fc4 <network_listening>

000d917c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d917c:	2200      	movs	r2, #0
   d917e:	6840      	ldr	r0, [r0, #4]
   d9180:	4611      	mov	r1, r2
   d9182:	f7ff bf2f 	b.w	d8fe4 <network_get_listen_timeout>

000d9186 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9186:	6840      	ldr	r0, [r0, #4]
   d9188:	2200      	movs	r2, #0
   d918a:	f7ff bf23 	b.w	d8fd4 <network_set_listen_timeout>

000d918e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d918e:	6840      	ldr	r0, [r0, #4]
   d9190:	2200      	movs	r2, #0
   d9192:	f081 0101 	eor.w	r1, r1, #1
   d9196:	f7ff bf0d 	b.w	d8fb4 <network_listen>

000d919a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d919a:	2300      	movs	r3, #0
   d919c:	6840      	ldr	r0, [r0, #4]
   d919e:	461a      	mov	r2, r3
   d91a0:	4619      	mov	r1, r3
   d91a2:	f7ff bef7 	b.w	d8f94 <network_on>

000d91a6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d91a6:	2200      	movs	r2, #0
   d91a8:	6840      	ldr	r0, [r0, #4]
   d91aa:	4611      	mov	r1, r2
   d91ac:	f7ff beda 	b.w	d8f64 <network_connecting>

000d91b0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d91b0:	6840      	ldr	r0, [r0, #4]
   d91b2:	2200      	movs	r2, #0
   d91b4:	2102      	movs	r1, #2
   d91b6:	f7ff bedd 	b.w	d8f74 <network_disconnect>

000d91ba <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d91ba:	2300      	movs	r3, #0
   d91bc:	6840      	ldr	r0, [r0, #4]
   d91be:	461a      	mov	r2, r3
   d91c0:	f7ff bec8 	b.w	d8f54 <network_connect>

000d91c4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d91c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d91c6:	4b1b      	ldr	r3, [pc, #108]	; (d9234 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d91c8:	6003      	str	r3, [r0, #0]
   d91ca:	2500      	movs	r5, #0
   d91cc:	460f      	mov	r7, r1
   d91ce:	3330      	adds	r3, #48	; 0x30
   d91d0:	2618      	movs	r6, #24
   d91d2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d91d6:	b089      	sub	sp, #36	; 0x24
   d91d8:	6043      	str	r3, [r0, #4]
   d91da:	4632      	mov	r2, r6
   d91dc:	4629      	mov	r1, r5
   d91de:	4604      	mov	r4, r0
   d91e0:	3010      	adds	r0, #16
   d91e2:	f003 ff0b 	bl	dcffc <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d91e6:	6878      	ldr	r0, [r7, #4]
   d91e8:	462a      	mov	r2, r5
   d91ea:	4629      	mov	r1, r5
   d91ec:	f7ff feca 	bl	d8f84 <network_ready>
   d91f0:	b918      	cbnz	r0, d91fa <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d91f2:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d91f4:	4620      	mov	r0, r4
   d91f6:	b009      	add	sp, #36	; 0x24
   d91f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d91fa:	4629      	mov	r1, r5
   d91fc:	4632      	mov	r2, r6
   d91fe:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d9200:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d9204:	f003 fefa 	bl	dcffc <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d9208:	a902      	add	r1, sp, #8
   d920a:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d920c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d9210:	f7ff fac4 	bl	d879c <cellular_signal>
   d9214:	b110      	cbz	r0, d921c <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d9216:	2301      	movs	r3, #1
   d9218:	60a3      	str	r3, [r4, #8]
            return sig;
   d921a:	e7eb      	b.n	d91f4 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d921c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d921e:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d9220:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d9222:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d9224:	b90b      	cbnz	r3, d922a <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d9226:	2302      	movs	r3, #2
   d9228:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d922a:	a902      	add	r1, sp, #8
   d922c:	4620      	mov	r0, r4
   d922e:	f000 f8c0 	bl	d93b2 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d9232:	e7df      	b.n	d91f4 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d9234:	000e0010 	.word	0x000e0010

000d9238 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d9238:	4b08      	ldr	r3, [pc, #32]	; (d925c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d923a:	b510      	push	{r4, lr}
   d923c:	2428      	movs	r4, #40	; 0x28
   d923e:	4622      	mov	r2, r4
   d9240:	4618      	mov	r0, r3
   d9242:	2100      	movs	r1, #0
   d9244:	f003 feda 	bl	dcffc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d9248:	4b05      	ldr	r3, [pc, #20]	; (d9260 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d924a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d924c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9250:	6042      	str	r2, [r0, #4]
   d9252:	2204      	movs	r2, #4
   d9254:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d9256:	4a03      	ldr	r2, [pc, #12]	; (d9264 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d9258:	601a      	str	r2, [r3, #0]
   d925a:	bd10      	pop	{r4, pc}
   d925c:	2003e46c 	.word	0x2003e46c
   d9260:	2003e464 	.word	0x2003e464
   d9264:	000dffd4 	.word	0x000dffd4

000d9268 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d9268:	4770      	bx	lr

000d926a <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d926a:	7d00      	ldrb	r0, [r0, #20]
   d926c:	4770      	bx	lr

000d926e <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d926e:	7d03      	ldrb	r3, [r0, #20]
   d9270:	b14b      	cbz	r3, d9286 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d9272:	6983      	ldr	r3, [r0, #24]
   d9274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d9278:	d005      	beq.n	d9286 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d927a:	6a00      	ldr	r0, [r0, #32]
   d927c:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d9280:	bf18      	it	ne
   d9282:	2001      	movne	r0, #1
   d9284:	4770      	bx	lr
   d9286:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d9288:	4770      	bx	lr

000d928a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d928a:	6803      	ldr	r3, [r0, #0]
   d928c:	6a1b      	ldr	r3, [r3, #32]
   d928e:	4718      	bx	r3

000d9290 <_ZN14CellularSignalD0Ev>:
   d9290:	b510      	push	{r4, lr}
   d9292:	2128      	movs	r1, #40	; 0x28
   d9294:	4604      	mov	r4, r0
   d9296:	f003 f8e1 	bl	dc45c <_ZdlPvj>
   d929a:	4620      	mov	r0, r4
   d929c:	bd10      	pop	{r4, pc}
	...

000d92a0 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d92a0:	7d03      	ldrb	r3, [r0, #20]
   d92a2:	b17b      	cbz	r3, d92c4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d92a4:	69c3      	ldr	r3, [r0, #28]
   d92a6:	2b00      	cmp	r3, #0
   d92a8:	db0c      	blt.n	d92c4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d92aa:	ee07 3a90 	vmov	s15, r3
   d92ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; d92cc <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d92b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d92b6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d92ba:	eddf 7a05 	vldr	s15, [pc, #20]	; d92d0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d92be:	ee20 0a27 	vmul.f32	s0, s0, s15
   d92c2:	4770      	bx	lr
    return -1.0f;
   d92c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d92c8:	4770      	bx	lr
   d92ca:	bf00      	nop
   d92cc:	477fff00 	.word	0x477fff00
   d92d0:	42c80000 	.word	0x42c80000

000d92d4 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d92d4:	7d03      	ldrb	r3, [r0, #20]
   d92d6:	b163      	cbz	r3, d92f2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d92d8:	6983      	ldr	r3, [r0, #24]
   d92da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d92de:	d008      	beq.n	d92f2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d92e0:	ee07 3a90 	vmov	s15, r3
   d92e4:	ed9f 7a04 	vldr	s14, [pc, #16]	; d92f8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d92e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d92ec:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d92f0:	4770      	bx	lr
    return 0.0f;
   d92f2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d92fc <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d92f6:	4770      	bx	lr
   d92f8:	42c80000 	.word	0x42c80000
   d92fc:	00000000 	.word	0x00000000

000d9300 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d9300:	7d03      	ldrb	r3, [r0, #20]
   d9302:	b17b      	cbz	r3, d9324 <_ZNK14CellularSignal10getQualityEv+0x24>
   d9304:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d9306:	2b00      	cmp	r3, #0
   d9308:	db0c      	blt.n	d9324 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d930a:	ee07 3a90 	vmov	s15, r3
   d930e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d932c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d9312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9316:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d931a:	eddf 7a05 	vldr	s15, [pc, #20]	; d9330 <_ZNK14CellularSignal10getQualityEv+0x30>
   d931e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9322:	4770      	bx	lr
    return -1.0f;
   d9324:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d9328:	4770      	bx	lr
   d932a:	bf00      	nop
   d932c:	477fff00 	.word	0x477fff00
   d9330:	42c80000 	.word	0x42c80000

000d9334 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d9334:	7d03      	ldrb	r3, [r0, #20]
   d9336:	b163      	cbz	r3, d9352 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d9338:	6a03      	ldr	r3, [r0, #32]
   d933a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d933e:	d008      	beq.n	d9352 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d9340:	ee07 3a90 	vmov	s15, r3
   d9344:	ed9f 7a04 	vldr	s14, [pc, #16]	; d9358 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d9348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d934c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d9350:	4770      	bx	lr
    return 0.0f;
   d9352:	ed9f 0a02 	vldr	s0, [pc, #8]	; d935c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d9356:	4770      	bx	lr
   d9358:	42c80000 	.word	0x42c80000
   d935c:	00000000 	.word	0x00000000

000d9360 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d9360:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d9362:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d9364:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d9366:	da0a      	bge.n	d937e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d9368:	212d      	movs	r1, #45	; 0x2d
   d936a:	f002 f8ce 	bl	db50a <_ZN5Print5printEc>
            val = -n;
   d936e:	4261      	negs	r1, r4
            t = print('-');
   d9370:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d9372:	220a      	movs	r2, #10
   d9374:	4630      	mov	r0, r6
   d9376:	f002 f8d7 	bl	db528 <_ZN5Print11printNumberEmh>
    }
}
   d937a:	4428      	add	r0, r5
   d937c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d937e:	4621      	mov	r1, r4
        size_t t = 0;
   d9380:	2500      	movs	r5, #0
   d9382:	e7f6      	b.n	d9372 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d9384 <_ZNK14CellularSignal7printToER5Print>:
{
   d9384:	b570      	push	{r4, r5, r6, lr}
   d9386:	460c      	mov	r4, r1
   d9388:	4605      	mov	r5, r0
   d938a:	6881      	ldr	r1, [r0, #8]
   d938c:	4620      	mov	r0, r4
   d938e:	f7ff ffe7 	bl	d9360 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d9392:	212c      	movs	r1, #44	; 0x2c
   d9394:	4606      	mov	r6, r0
   d9396:	4620      	mov	r0, r4
   d9398:	f002 f8b7 	bl	db50a <_ZN5Print5printEc>
   d939c:	68e9      	ldr	r1, [r5, #12]
   d939e:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d93a0:	4620      	mov	r0, r4
   d93a2:	f7ff ffdd 	bl	d9360 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d93a6:	4430      	add	r0, r6
   d93a8:	bd70      	pop	{r4, r5, r6, pc}

000d93aa <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d93aa:	f1a0 0004 	sub.w	r0, r0, #4
   d93ae:	f7ff bfe9 	b.w	d9384 <_ZNK14CellularSignal7printToER5Print>

000d93b2 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d93b2:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d93b4:	460d      	mov	r5, r1
   d93b6:	f100 0410 	add.w	r4, r0, #16
   d93ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d93bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d93be:	e895 0003 	ldmia.w	r5, {r0, r1}
   d93c2:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d93c6:	2001      	movs	r0, #1
   d93c8:	bd30      	pop	{r4, r5, pc}

000d93ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d93ca:	4770      	bx	lr

000d93cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d93cc:	2000      	movs	r0, #0
   d93ce:	4770      	bx	lr

000d93d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d93d0:	b510      	push	{r4, lr}
   d93d2:	2110      	movs	r1, #16
   d93d4:	4604      	mov	r4, r0
   d93d6:	f003 f841 	bl	dc45c <_ZdlPvj>
   d93da:	4620      	mov	r0, r4
   d93dc:	bd10      	pop	{r4, pc}

000d93de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d93de:	b508      	push	{r3, lr}
      { delete this; }
   d93e0:	f7ff fff6 	bl	d93d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d93e4:	bd08      	pop	{r3, pc}

000d93e6 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d93e6:	b530      	push	{r4, r5, lr}
        type_(type) {
   d93e8:	2200      	movs	r2, #0
   d93ea:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d93ee:	6002      	str	r2, [r0, #0]
   d93f0:	8084      	strh	r4, [r0, #4]
   d93f2:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d93f4:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d93f6:	680c      	ldr	r4, [r1, #0]
   d93f8:	8085      	strh	r5, [r0, #4]
   d93fa:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d93fc:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d93fe:	bd30      	pop	{r4, r5, pc}

000d9400 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d9400:	b510      	push	{r4, lr}
   d9402:	4604      	mov	r4, r0
    free((void*)msg_);
   d9404:	6800      	ldr	r0, [r0, #0]
   d9406:	f7ff fe0d 	bl	d9024 <free>
}
   d940a:	4620      	mov	r0, r4
   d940c:	bd10      	pop	{r4, pc}

000d940e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d940e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d9410:	68c4      	ldr	r4, [r0, #12]
   d9412:	b1f4      	cbz	r4, d9452 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d9414:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d9416:	2b02      	cmp	r3, #2
   d9418:	d103      	bne.n	d9422 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d941a:	f104 000c 	add.w	r0, r4, #12
   d941e:	f7ff ffef 	bl	d9400 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d9422:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d9424:	b135      	cbz	r5, d9434 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d9426:	4628      	mov	r0, r5
   d9428:	f7fa ff4e 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
   d942c:	2110      	movs	r1, #16
   d942e:	4628      	mov	r0, r5
   d9430:	f003 f814 	bl	dc45c <_ZdlPvj>
   d9434:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d9436:	b135      	cbz	r5, d9446 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d9438:	4628      	mov	r0, r5
   d943a:	f7fa ff45 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
   d943e:	2110      	movs	r1, #16
   d9440:	4628      	mov	r0, r5
   d9442:	f003 f80b 	bl	dc45c <_ZdlPvj>
   d9446:	4620      	mov	r0, r4
   d9448:	2114      	movs	r1, #20
   d944a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d944e:	f003 b805 	b.w	dc45c <_ZdlPvj>
   d9452:	bd38      	pop	{r3, r4, r5, pc}

000d9454 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d9454:	b510      	push	{r4, lr}
   d9456:	b088      	sub	sp, #32
   d9458:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d945a:	4668      	mov	r0, sp
   d945c:	f002 f90f 	bl	db67e <_ZN6StringC1EPKc>
    return (*fn)(p);
   d9460:	4669      	mov	r1, sp
   d9462:	a804      	add	r0, sp, #16
   d9464:	f002 f956 	bl	db714 <_ZN6StringC1ERKS_>
   d9468:	a804      	add	r0, sp, #16
   d946a:	47a0      	blx	r4
   d946c:	4604      	mov	r4, r0
   d946e:	a804      	add	r0, sp, #16
   d9470:	f002 f8ba 	bl	db5e8 <_ZN6StringD1Ev>
    String p(param);
   d9474:	4668      	mov	r0, sp
   d9476:	f002 f8b7 	bl	db5e8 <_ZN6StringD1Ev>
}
   d947a:	4620      	mov	r0, r4
   d947c:	b008      	add	sp, #32
   d947e:	bd10      	pop	{r4, pc}

000d9480 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d9480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d9482:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d9484:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d9488:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d948a:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d948c:	461a      	mov	r2, r3
   d948e:	4669      	mov	r1, sp
   d9490:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d9492:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d9496:	f8ad 4000 	strh.w	r4, [sp]
   d949a:	f7ff fcf3 	bl	d8e84 <spark_function>
}
   d949e:	b004      	add	sp, #16
   d94a0:	bd10      	pop	{r4, pc}

000d94a2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d94a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d94a4:	230c      	movs	r3, #12
   d94a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d94aa:	6803      	ldr	r3, [r0, #0]
   d94ac:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d94b0:	7a03      	ldrb	r3, [r0, #8]
   d94b2:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d94b6:	6843      	ldr	r3, [r0, #4]
   d94b8:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d94ba:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d94bc:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d94be:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d94c2:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d94c4:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d94c8:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d94cc:	f7ff fd3a 	bl	d8f44 <spark_cloud_disconnect>
}
   d94d0:	b005      	add	sp, #20
   d94d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d94d6 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d94d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d94d8:	220c      	movs	r2, #12
   d94da:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   d94de:	6802      	ldr	r2, [r0, #0]
   d94e0:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   d94e4:	7a02      	ldrb	r2, [r0, #8]
   d94e6:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   d94ea:	6842      	ldr	r2, [r0, #4]
   d94ec:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d94ee:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   d94f0:	7a42      	ldrb	r2, [r0, #9]
   d94f2:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d94f6:	4619      	mov	r1, r3
   d94f8:	aa01      	add	r2, sp, #4
   d94fa:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   d94fc:	f8ad 300d 	strh.w	r3, [sp, #13]
   d9500:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d9504:	f7ff fd0e 	bl	d8f24 <spark_set_connection_property>
}
   d9508:	b005      	add	sp, #20
   d950a:	f85d fb04 	ldr.w	pc, [sp], #4

000d950e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d950e:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9510:	460e      	mov	r6, r1
   d9512:	4604      	mov	r4, r0
   d9514:	f856 3b04 	ldr.w	r3, [r6], #4
   d9518:	9300      	str	r3, [sp, #0]
   d951a:	460d      	mov	r5, r1
   d951c:	a801      	add	r0, sp, #4
   d951e:	4631      	mov	r1, r6
   d9520:	f7ff fe13 	bl	d914a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9524:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d9526:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d9528:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d952a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d952c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d952e:	2300      	movs	r3, #0
   d9530:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d9532:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d9534:	f7fb fa70 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9538:	4630      	mov	r0, r6
   d953a:	f7fb fa6d 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d953e:	4628      	mov	r0, r5
   d9540:	2108      	movs	r1, #8
   d9542:	f002 ff8b 	bl	dc45c <_ZdlPvj>
        return p;
    }
   d9546:	4620      	mov	r0, r4
   d9548:	b002      	add	sp, #8
   d954a:	bd70      	pop	{r4, r5, r6, pc}

000d954c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d954c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d954e:	b510      	push	{r4, lr}
      if (_M_empty())
   d9550:	b90a      	cbnz	r2, d9556 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d9552:	f002 ff8f 	bl	dc474 <_ZSt25__throw_bad_function_callv>
    }
   d9556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d955a:	68c3      	ldr	r3, [r0, #12]
   d955c:	4718      	bx	r3

000d955e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d955e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d9560:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d9562:	f100 0110 	add.w	r1, r0, #16
   d9566:	f7ff fff1 	bl	d954c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d956a:	bd08      	pop	{r3, pc}

000d956c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d956c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d956e:	b510      	push	{r4, lr}
      if (_M_empty())
   d9570:	b90a      	cbnz	r2, d9576 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d9572:	f002 ff7f 	bl	dc474 <_ZSt25__throw_bad_function_callv>
    }
   d9576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d957a:	68c3      	ldr	r3, [r0, #12]
   d957c:	4718      	bx	r3

000d957e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d957e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d9580:	6800      	ldr	r0, [r0, #0]
   d9582:	f100 0110 	add.w	r1, r0, #16
   d9586:	f7ff fff1 	bl	d956c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d958a:	bd08      	pop	{r3, pc}

000d958c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d958c:	b538      	push	{r3, r4, r5, lr}
   d958e:	2300      	movs	r3, #0
   d9590:	4604      	mov	r4, r0
   d9592:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9594:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d9596:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9598:	f7fa fd7d 	bl	d4096 <_Znwj>
   d959c:	b128      	cbz	r0, d95aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d959e:	2301      	movs	r3, #1
   d95a0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d95a4:	4b02      	ldr	r3, [pc, #8]	; (d95b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d95a6:	6003      	str	r3, [r0, #0]
   d95a8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d95aa:	6020      	str	r0, [r4, #0]
	}
   d95ac:	4620      	mov	r0, r4
   d95ae:	bd38      	pop	{r3, r4, r5, pc}
   d95b0:	000e004c 	.word	0x000e004c

000d95b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d95b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d95b6:	2300      	movs	r3, #0
   d95b8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d95ba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d95bc:	4604      	mov	r4, r0
   d95be:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d95c0:	b12b      	cbz	r3, d95ce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d95c2:	2202      	movs	r2, #2
   d95c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d95c6:	68eb      	ldr	r3, [r5, #12]
   d95c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d95ca:	68ab      	ldr	r3, [r5, #8]
   d95cc:	60a3      	str	r3, [r4, #8]
    }
   d95ce:	4620      	mov	r0, r4
   d95d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d95d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d95d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d95d6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d95d8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d95da:	4668      	mov	r0, sp
   d95dc:	f7ff ff03 	bl	d93e6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d95e0:	f04f 0302 	mov.w	r3, #2
   d95e4:	e8d4 2f4f 	ldrexb	r2, [r4]
   d95e8:	2a00      	cmp	r2, #0
   d95ea:	d103      	bne.n	d95f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d95ec:	e8c4 3f41 	strexb	r1, r3, [r4]
   d95f0:	2900      	cmp	r1, #0
   d95f2:	d1f7      	bne.n	d95e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d95f4:	d125      	bne.n	d9642 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d95f6:	f104 050c 	add.w	r5, r4, #12
   d95fa:	4669      	mov	r1, sp
   d95fc:	4628      	mov	r0, r5
   d95fe:	f7ff fef2 	bl	d93e6 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d9602:	f3bf 8f5b 	dmb	ish
   d9606:	2301      	movs	r3, #1
   d9608:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d960a:	2000      	movs	r0, #0
   d960c:	f104 0308 	add.w	r3, r4, #8
   d9610:	f3bf 8f5b 	dmb	ish
   d9614:	e853 6f00 	ldrex	r6, [r3]
   d9618:	e843 0200 	strex	r2, r0, [r3]
   d961c:	2a00      	cmp	r2, #0
   d961e:	d1f9      	bne.n	d9614 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d9620:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9624:	b16e      	cbz	r6, d9642 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d9626:	f7ff fbd3 	bl	d8dd0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d962a:	b178      	cbz	r0, d964c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d962c:	4629      	mov	r1, r5
   d962e:	4630      	mov	r0, r6
   d9630:	f7ff ff8c 	bl	d954c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d9634:	4630      	mov	r0, r6
   d9636:	f7fa fe47 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d963a:	2110      	movs	r1, #16
   d963c:	4630      	mov	r0, r6
   d963e:	f002 ff0d 	bl	dc45c <_ZdlPvj>
        p_->setError(std::move(error));
   d9642:	4668      	mov	r0, sp
   d9644:	f7ff fedc 	bl	d9400 <_ZN8particle5ErrorD1Ev>
    }
   d9648:	b009      	add	sp, #36	; 0x24
   d964a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d964c:	4631      	mov	r1, r6
   d964e:	a802      	add	r0, sp, #8
   d9650:	f7ff ffb0 	bl	d95b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d9654:	68e0      	ldr	r0, [r4, #12]
   d9656:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d965a:	b108      	cbz	r0, d9660 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d965c:	f003 fd24 	bl	dd0a8 <strdup>
        type_(type) {
   d9660:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9662:	2010      	movs	r0, #16
   d9664:	f8ad 501c 	strh.w	r5, [sp, #28]
   d9668:	f7fa fd15 	bl	d4096 <_Znwj>
   d966c:	4605      	mov	r5, r0
   d966e:	b1e8      	cbz	r0, d96ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d9670:	2700      	movs	r7, #0
   d9672:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9674:	2018      	movs	r0, #24
   d9676:	f7fa fd0e 	bl	d4096 <_Znwj>
   d967a:	4604      	mov	r4, r0
   d967c:	b188      	cbz	r0, d96a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d967e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d9680:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d9682:	a802      	add	r0, sp, #8
   d9684:	f7fd fd9f 	bl	d71c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9688:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d968a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d968c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d968e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9690:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9692:	a906      	add	r1, sp, #24
   d9694:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9696:	60e3      	str	r3, [r4, #12]
   d9698:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d969c:	9205      	str	r2, [sp, #20]
   d969e:	f7ff fea2 	bl	d93e6 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d96a2:	4b08      	ldr	r3, [pc, #32]	; (d96c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d96a4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d96a6:	4b08      	ldr	r3, [pc, #32]	; (d96c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d96a8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d96aa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d96ac:	a806      	add	r0, sp, #24
   d96ae:	f7ff fea7 	bl	d9400 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d96b2:	a802      	add	r0, sp, #8
   d96b4:	f7fa fe08 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d96b8:	2200      	movs	r2, #0
   d96ba:	4629      	mov	r1, r5
   d96bc:	4803      	ldr	r0, [pc, #12]	; (d96cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d96be:	f7ff fb8f 	bl	d8de0 <application_thread_invoke>
   d96c2:	e7b7      	b.n	d9634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d96c4:	000d955f 	.word	0x000d955f
   d96c8:	000d97f5 	.word	0x000d97f5
   d96cc:	000d9123 	.word	0x000d9123

000d96d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d96d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d96d4:	b08a      	sub	sp, #40	; 0x28
   d96d6:	4605      	mov	r5, r0
   d96d8:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d96dc:	460c      	mov	r4, r1
   d96de:	4617      	mov	r7, r2
   d96e0:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d96e2:	f7ff fbe7 	bl	d8eb4 <spark_cloud_flag_connected>
   d96e6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d96e8:	4682      	mov	sl, r0
   d96ea:	bb38      	cbnz	r0, d973c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d96ec:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d96f0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d96f2:	a905      	add	r1, sp, #20
   d96f4:	4630      	mov	r0, r6
   d96f6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d96fa:	f7ff fe74 	bl	d93e6 <_ZN8particle5ErrorC1EOS0_>
   d96fe:	2014      	movs	r0, #20
   d9700:	f7fa fcc9 	bl	d4096 <_Znwj>
   d9704:	4604      	mov	r4, r0
   d9706:	b148      	cbz	r0, d971c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9708:	2302      	movs	r3, #2
   d970a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d970c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d970e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9712:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d9714:	4631      	mov	r1, r6
   d9716:	300c      	adds	r0, #12
   d9718:	f7ff fe65 	bl	d93e6 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d971c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d971e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9720:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d9724:	f7ff ff32 	bl	d958c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9728:	4630      	mov	r0, r6
   d972a:	f7ff fe69 	bl	d9400 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d972e:	a805      	add	r0, sp, #20
   d9730:	f7ff fe66 	bl	d9400 <_ZN8particle5ErrorD1Ev>
}
   d9734:	4628      	mov	r0, r5
   d9736:	b00a      	add	sp, #40	; 0x28
   d9738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d973c:	230c      	movs	r3, #12
   d973e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d9742:	2014      	movs	r0, #20
   d9744:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d9748:	9307      	str	r3, [sp, #28]
   d974a:	f7fa fca4 	bl	d4096 <_Znwj>
   d974e:	4601      	mov	r1, r0
   d9750:	b128      	cbz	r0, d975e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9752:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d9756:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d975a:	f880 a001 	strb.w	sl, [r0, #1]
   d975e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9760:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d9762:	f7ff ff13 	bl	d958c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d9766:	4b22      	ldr	r3, [pc, #136]	; (d97f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d9768:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d976a:	2008      	movs	r0, #8
   d976c:	f7fa fc93 	bl	d4096 <_Znwj>
   d9770:	4682      	mov	sl, r0
   d9772:	b128      	cbz	r0, d9780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9774:	9b03      	ldr	r3, [sp, #12]
   d9776:	f840 3b04 	str.w	r3, [r0], #4
   d977a:	a904      	add	r1, sp, #16
   d977c:	f7ff fce5 	bl	d914a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d9780:	9600      	str	r6, [sp, #0]
   d9782:	fa5f f389 	uxtb.w	r3, r9
   d9786:	4642      	mov	r2, r8
   d9788:	4639      	mov	r1, r7
   d978a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d978c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d9790:	f7ff fba0 	bl	d8ed4 <spark_send_event>
   d9794:	b9b8      	cbnz	r0, d97c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d9796:	9b03      	ldr	r3, [sp, #12]
   d9798:	785b      	ldrb	r3, [r3, #1]
   d979a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d979e:	b993      	cbnz	r3, d97c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d97a0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d97a4:	a905      	add	r1, sp, #20
   d97a6:	a803      	add	r0, sp, #12
   d97a8:	9205      	str	r2, [sp, #20]
   d97aa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d97ae:	f7ff ff11 	bl	d95d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d97b2:	a805      	add	r0, sp, #20
   d97b4:	f7ff fe24 	bl	d9400 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d97b8:	a805      	add	r0, sp, #20
   d97ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   d97bc:	f7ff fea7 	bl	d950e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d97c0:	a806      	add	r0, sp, #24
   d97c2:	f7fb f929 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d97c6:	9b03      	ldr	r3, [sp, #12]
   d97c8:	9305      	str	r3, [sp, #20]
   d97ca:	a904      	add	r1, sp, #16
   d97cc:	a806      	add	r0, sp, #24
   d97ce:	f7ff fcbc 	bl	d914a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d97d2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d97d4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d97d6:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d97d8:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d97da:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d97dc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d97de:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d97e0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d97e2:	f7fb f919 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d97e6:	a804      	add	r0, sp, #16
   d97e8:	f7fb f916 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d97ec:	e7a2      	b.n	d9734 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d97ee:	bf00      	nop
   d97f0:	000d98b9 	.word	0x000d98b9

000d97f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d97f4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d97f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d97f8:	4605      	mov	r5, r0
	  switch (__op)
   d97fa:	d007      	beq.n	d980c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d97fc:	2a03      	cmp	r2, #3
   d97fe:	d018      	beq.n	d9832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d9800:	2a01      	cmp	r2, #1
   d9802:	d101      	bne.n	d9808 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d9804:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9806:	6003      	str	r3, [r0, #0]
	}
   d9808:	2000      	movs	r0, #0
   d980a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d980c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d980e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9810:	f7fa fc41 	bl	d4096 <_Znwj>
   d9814:	4604      	mov	r4, r0
   d9816:	b150      	cbz	r0, d982e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9818:	4631      	mov	r1, r6
   d981a:	f7ff fecb 	bl	d95b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d981e:	6930      	ldr	r0, [r6, #16]
   d9820:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9824:	b108      	cbz	r0, d982a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d9826:	f003 fc3f 	bl	dd0a8 <strdup>
        type_(type) {
   d982a:	6120      	str	r0, [r4, #16]
   d982c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d982e:	602c      	str	r4, [r5, #0]
	}
   d9830:	e7ea      	b.n	d9808 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d9832:	6804      	ldr	r4, [r0, #0]
   d9834:	2c00      	cmp	r4, #0
   d9836:	d0e7      	beq.n	d9808 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d9838:	f104 0010 	add.w	r0, r4, #16
   d983c:	f7ff fde0 	bl	d9400 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d9840:	4620      	mov	r0, r4
   d9842:	f7fa fd41 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9846:	2118      	movs	r1, #24
   d9848:	4620      	mov	r0, r4
   d984a:	f002 fe07 	bl	dc45c <_ZdlPvj>
   d984e:	e7db      	b.n	d9808 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d9850 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d9850:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d9852:	2300      	movs	r3, #0
   d9854:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d9856:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9858:	4604      	mov	r4, r0
   d985a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d985c:	b12b      	cbz	r3, d986a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d985e:	2202      	movs	r2, #2
   d9860:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d9862:	68eb      	ldr	r3, [r5, #12]
   d9864:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9866:	68ab      	ldr	r3, [r5, #8]
   d9868:	60a3      	str	r3, [r4, #8]
    }
   d986a:	4620      	mov	r0, r4
   d986c:	bd38      	pop	{r3, r4, r5, pc}

000d986e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d986e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9870:	b570      	push	{r4, r5, r6, lr}
   d9872:	4604      	mov	r4, r0
	  switch (__op)
   d9874:	d007      	beq.n	d9886 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d9876:	2a03      	cmp	r2, #3
   d9878:	d012      	beq.n	d98a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d987a:	2a01      	cmp	r2, #1
   d987c:	d101      	bne.n	d9882 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d987e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9880:	6003      	str	r3, [r0, #0]
	}
   d9882:	2000      	movs	r0, #0
   d9884:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9886:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d9888:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d988a:	f7fa fc04 	bl	d4096 <_Znwj>
   d988e:	4605      	mov	r5, r0
   d9890:	b120      	cbz	r0, d989c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d9892:	4631      	mov	r1, r6
   d9894:	f7ff ffdc 	bl	d9850 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9898:	7c33      	ldrb	r3, [r6, #16]
   d989a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d989c:	6025      	str	r5, [r4, #0]
	}
   d989e:	e7f0      	b.n	d9882 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d98a0:	6804      	ldr	r4, [r0, #0]
   d98a2:	2c00      	cmp	r4, #0
   d98a4:	d0ed      	beq.n	d9882 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d98a6:	4620      	mov	r0, r4
   d98a8:	f7fa fd0e 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d98ac:	2114      	movs	r1, #20
   d98ae:	4620      	mov	r0, r4
   d98b0:	f002 fdd4 	bl	dc45c <_ZdlPvj>
   d98b4:	e7e5      	b.n	d9882 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d98b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d98b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d98ba:	b089      	sub	sp, #36	; 0x24
   d98bc:	4604      	mov	r4, r0
   d98be:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d98c0:	a801      	add	r0, sp, #4
   d98c2:	4611      	mov	r1, r2
   d98c4:	f7ff fe23 	bl	d950e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d98c8:	b1a4      	cbz	r4, d98f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d98ca:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d98cc:	b11d      	cbz	r5, d98d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d98ce:	4628      	mov	r0, r5
   d98d0:	f003 fbea 	bl	dd0a8 <strdup>
   d98d4:	4605      	mov	r5, r0
   d98d6:	a801      	add	r0, sp, #4
   d98d8:	a903      	add	r1, sp, #12
        type_(type) {
   d98da:	9503      	str	r5, [sp, #12]
   d98dc:	f8ad 4010 	strh.w	r4, [sp, #16]
   d98e0:	f7ff fe78 	bl	d95d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d98e4:	a803      	add	r0, sp, #12
   d98e6:	f7ff fd8b 	bl	d9400 <_ZN8particle5ErrorD1Ev>
   d98ea:	a802      	add	r0, sp, #8
   d98ec:	f7fb f894 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d98f0:	b009      	add	sp, #36	; 0x24
   d98f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d98f4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d98f6:	2301      	movs	r3, #1
   d98f8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d98fc:	2a00      	cmp	r2, #0
   d98fe:	d103      	bne.n	d9908 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d9900:	e8c5 3f41 	strexb	r1, r3, [r5]
   d9904:	2900      	cmp	r1, #0
   d9906:	d1f7      	bne.n	d98f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d9908:	d1ef      	bne.n	d98ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d990a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d990c:	f3bf 8f5b 	dmb	ish
   d9910:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d9912:	1d2b      	adds	r3, r5, #4
   d9914:	f3bf 8f5b 	dmb	ish
   d9918:	e853 6f00 	ldrex	r6, [r3]
   d991c:	e843 4200 	strex	r2, r4, [r3]
   d9920:	2a00      	cmp	r2, #0
   d9922:	d1f9      	bne.n	d9918 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d9924:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9928:	2e00      	cmp	r6, #0
   d992a:	d0de      	beq.n	d98ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d992c:	4620      	mov	r0, r4
   d992e:	f7ff fa4f 	bl	d8dd0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d9932:	4607      	mov	r7, r0
   d9934:	b160      	cbz	r0, d9950 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9936:	f105 010c 	add.w	r1, r5, #12
   d993a:	4630      	mov	r0, r6
   d993c:	f7ff fe16 	bl	d956c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d9940:	4630      	mov	r0, r6
   d9942:	f7fa fcc1 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d9946:	2110      	movs	r1, #16
   d9948:	4630      	mov	r0, r6
   d994a:	f002 fd87 	bl	dc45c <_ZdlPvj>
   d994e:	e7cc      	b.n	d98ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9950:	4631      	mov	r1, r6
   d9952:	a803      	add	r0, sp, #12
   d9954:	f7ff ff7c 	bl	d9850 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9958:	7b2b      	ldrb	r3, [r5, #12]
   d995a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d995e:	2010      	movs	r0, #16
   d9960:	f7fa fb99 	bl	d4096 <_Znwj>
   d9964:	4605      	mov	r5, r0
   d9966:	b1d0      	cbz	r0, d999e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d9968:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d996a:	2014      	movs	r0, #20
   d996c:	f7fa fb93 	bl	d4096 <_Znwj>
   d9970:	4604      	mov	r4, r0
   d9972:	b178      	cbz	r0, d9994 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d9974:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d9976:	4601      	mov	r1, r0
   d9978:	a803      	add	r0, sp, #12
   d997a:	f7fd fc24 	bl	d71c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d997e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9980:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9982:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9984:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d9986:	9205      	str	r2, [sp, #20]
   d9988:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d998a:	60e3      	str	r3, [r4, #12]
   d998c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d9990:	9206      	str	r2, [sp, #24]
   d9992:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d9994:	4b06      	ldr	r3, [pc, #24]	; (d99b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d9996:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9998:	4b06      	ldr	r3, [pc, #24]	; (d99b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d999a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d999c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d999e:	a803      	add	r0, sp, #12
   d99a0:	f7fa fc92 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d99a4:	2200      	movs	r2, #0
   d99a6:	4629      	mov	r1, r5
   d99a8:	4803      	ldr	r0, [pc, #12]	; (d99b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d99aa:	f7ff fa19 	bl	d8de0 <application_thread_invoke>
   d99ae:	e7c7      	b.n	d9940 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d99b0:	000d957f 	.word	0x000d957f
   d99b4:	000d986f 	.word	0x000d986f
   d99b8:	000d9123 	.word	0x000d9123

000d99bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d99bc:	2200      	movs	r2, #0
   d99be:	6840      	ldr	r0, [r0, #4]
   d99c0:	4611      	mov	r1, r2
   d99c2:	f7ff baff 	b.w	d8fc4 <network_listening>

000d99c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d99c6:	2200      	movs	r2, #0
   d99c8:	6840      	ldr	r0, [r0, #4]
   d99ca:	4611      	mov	r1, r2
   d99cc:	f7ff bb0a 	b.w	d8fe4 <network_get_listen_timeout>

000d99d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d99d0:	6840      	ldr	r0, [r0, #4]
   d99d2:	2200      	movs	r2, #0
   d99d4:	f7ff bafe 	b.w	d8fd4 <network_set_listen_timeout>

000d99d8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d99d8:	6840      	ldr	r0, [r0, #4]
   d99da:	2200      	movs	r2, #0
   d99dc:	f081 0101 	eor.w	r1, r1, #1
   d99e0:	f7ff bae8 	b.w	d8fb4 <network_listen>

000d99e4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d99e4:	2300      	movs	r3, #0
   d99e6:	6840      	ldr	r0, [r0, #4]
   d99e8:	461a      	mov	r2, r3
   d99ea:	4619      	mov	r1, r3
   d99ec:	f7ff bada 	b.w	d8fa4 <network_off>

000d99f0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d99f0:	2300      	movs	r3, #0
   d99f2:	6840      	ldr	r0, [r0, #4]
   d99f4:	461a      	mov	r2, r3
   d99f6:	4619      	mov	r1, r3
   d99f8:	f7ff bacc 	b.w	d8f94 <network_on>

000d99fc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d99fc:	2200      	movs	r2, #0
   d99fe:	6840      	ldr	r0, [r0, #4]
   d9a00:	4611      	mov	r1, r2
   d9a02:	f7ff babf 	b.w	d8f84 <network_ready>

000d9a06 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9a06:	2200      	movs	r2, #0
   d9a08:	6840      	ldr	r0, [r0, #4]
   d9a0a:	4611      	mov	r1, r2
   d9a0c:	f7ff baaa 	b.w	d8f64 <network_connecting>

000d9a10 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9a10:	6840      	ldr	r0, [r0, #4]
   d9a12:	2200      	movs	r2, #0
   d9a14:	2102      	movs	r1, #2
   d9a16:	f7ff baad 	b.w	d8f74 <network_disconnect>

000d9a1a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9a1a:	2300      	movs	r3, #0
   d9a1c:	6840      	ldr	r0, [r0, #4]
   d9a1e:	461a      	mov	r2, r3
   d9a20:	f7ff ba98 	b.w	d8f54 <network_connect>

000d9a24 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d9a24:	4b02      	ldr	r3, [pc, #8]	; (d9a30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9a26:	2203      	movs	r2, #3
   d9a28:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9a2a:	4a02      	ldr	r2, [pc, #8]	; (d9a34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9a2c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d9a2e:	4770      	bx	lr
   d9a30:	2003e494 	.word	0x2003e494
   d9a34:	000e0068 	.word	0x000e0068

000d9a38 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d9a38:	6800      	ldr	r0, [r0, #0]
   d9a3a:	f000 b979 	b.w	d9d30 <_ZN7TwoWire4lockEv>

000d9a3e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d9a3e:	b510      	push	{r4, lr}
   d9a40:	4604      	mov	r4, r0
      lock_(_lock) {
   d9a42:	6001      	str	r1, [r0, #0]
   d9a44:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d9a46:	b10a      	cbz	r2, d9a4c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d9a48:	f7ff fff6 	bl	d9a38 <_ZN9FuelGauge4lockEv>
}
   d9a4c:	4620      	mov	r0, r4
   d9a4e:	bd10      	pop	{r4, pc}

000d9a50 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d9a50:	b513      	push	{r0, r1, r4, lr}
   d9a52:	4604      	mov	r4, r0
   d9a54:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d9a56:	f002 fcdd 	bl	dc414 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d9a5a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d9a5c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d9a5e:	4620      	mov	r0, r4
   d9a60:	f7ff ffed 	bl	d9a3e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d9a64:	4620      	mov	r0, r4
   d9a66:	b002      	add	sp, #8
   d9a68:	bd10      	pop	{r4, pc}

000d9a6a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d9a6a:	6800      	ldr	r0, [r0, #0]
   d9a6c:	f000 b969 	b.w	d9d42 <_ZN7TwoWire6unlockEv>

000d9a70 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d9a70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d9a74:	4604      	mov	r4, r0
   d9a76:	460d      	mov	r5, r1
   d9a78:	4617      	mov	r7, r2
   d9a7a:	461e      	mov	r6, r3
      { _M_device.lock(); }
   d9a7c:	f7ff ffdc 	bl	d9a38 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9a80:	2336      	movs	r3, #54	; 0x36
   d9a82:	f88d 3000 	strb.w	r3, [sp]
   d9a86:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d9a88:	6820      	ldr	r0, [r4, #0]
   d9a8a:	9301      	str	r3, [sp, #4]
   d9a8c:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d9a90:	230a      	movs	r3, #10
   d9a92:	4669      	mov	r1, sp
   d9a94:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9a96:	f88d 8008 	strb.w	r8, [sp, #8]
   d9a9a:	f000 f92d 	bl	d9cf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d9a9e:	6820      	ldr	r0, [r4, #0]
   d9aa0:	6803      	ldr	r3, [r0, #0]
   d9aa2:	4629      	mov	r1, r5
   d9aa4:	689b      	ldr	r3, [r3, #8]
   d9aa6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d9aa8:	6820      	ldr	r0, [r4, #0]
   d9aaa:	4641      	mov	r1, r8
   d9aac:	f000 f93c 	bl	d9d28 <_ZN7TwoWire15endTransmissionEh>
   d9ab0:	4605      	mov	r5, r0
   d9ab2:	b140      	cbz	r0, d9ac6 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d9ab4:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d9ab8:	4620      	mov	r0, r4
   d9aba:	f7ff ffd6 	bl	d9a6a <_ZN9FuelGauge6unlockEv>
}
   d9abe:	4628      	mov	r0, r5
   d9ac0:	b004      	add	sp, #16
   d9ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d9ac6:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d9ac8:	6820      	ldr	r0, [r4, #0]
   d9aca:	9301      	str	r3, [sp, #4]
   d9acc:	4669      	mov	r1, sp
   d9ace:	f000 f8e3 	bl	d9c98 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d9ad2:	2802      	cmp	r0, #2
   d9ad4:	d1ee      	bne.n	d9ab4 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d9ad6:	6820      	ldr	r0, [r4, #0]
   d9ad8:	6803      	ldr	r3, [r0, #0]
   d9ada:	695b      	ldr	r3, [r3, #20]
   d9adc:	4798      	blx	r3
   d9ade:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d9ae0:	6820      	ldr	r0, [r4, #0]
   d9ae2:	6803      	ldr	r3, [r0, #0]
   d9ae4:	695b      	ldr	r3, [r3, #20]
   d9ae6:	4798      	blx	r3
   d9ae8:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d9aea:	e7e5      	b.n	d9ab8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d9aec <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d9aec:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d9aee:	2300      	movs	r3, #0
   d9af0:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d9af4:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d9af8:	f10d 0206 	add.w	r2, sp, #6
   d9afc:	f10d 0307 	add.w	r3, sp, #7
   d9b00:	2104      	movs	r1, #4
   d9b02:	f7ff ffb5 	bl	d9a70 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d9b06:	b9b0      	cbnz	r0, d9b36 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d9b08:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9b0c:	f002 fe08 	bl	dc720 <__aeabi_i2d>
   d9b10:	4b0a      	ldr	r3, [pc, #40]	; (d9b3c <_ZN9FuelGauge6getSoCEv+0x50>)
   d9b12:	2200      	movs	r2, #0
   d9b14:	f002 fe6e 	bl	dc7f4 <__aeabi_dmul>
   d9b18:	f003 f964 	bl	dcde4 <__aeabi_d2f>
        return MSB + decimal;
   d9b1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d9b20:	ee00 3a10 	vmov	s0, r3
   d9b24:	ee07 0a90 	vmov	s15, r0
   d9b28:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d9b2c:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d9b30:	b003      	add	sp, #12
   d9b32:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d9b36:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d9b3a:	e7f9      	b.n	d9b30 <_ZN9FuelGauge6getSoCEv+0x44>
   d9b3c:	3f700000 	.word	0x3f700000

000d9b40 <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   d9b40:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   d9b42:	460a      	mov	r2, r1
   d9b44:	210c      	movs	r1, #12
   d9b46:	f7ff bf93 	b.w	d9a70 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d9b4a <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d9b4a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d9b4e:	4616      	mov	r6, r2
   d9b50:	4604      	mov	r4, r0
   d9b52:	461d      	mov	r5, r3
   d9b54:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d9b56:	f7ff ff6f 	bl	d9a38 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9b5a:	2336      	movs	r3, #54	; 0x36
   d9b5c:	f88d 3000 	strb.w	r3, [sp]
   d9b60:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d9b62:	6820      	ldr	r0, [r4, #0]
   d9b64:	9301      	str	r3, [sp, #4]
   d9b66:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d9b6a:	230a      	movs	r3, #10
   d9b6c:	4669      	mov	r1, sp
   d9b6e:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9b70:	f88d 8008 	strb.w	r8, [sp, #8]
   d9b74:	f000 f8c0 	bl	d9cf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d9b78:	6820      	ldr	r0, [r4, #0]
   d9b7a:	6803      	ldr	r3, [r0, #0]
   d9b7c:	4639      	mov	r1, r7
   d9b7e:	689b      	ldr	r3, [r3, #8]
   d9b80:	4798      	blx	r3
    i2c_.write(MSB);
   d9b82:	6820      	ldr	r0, [r4, #0]
   d9b84:	6803      	ldr	r3, [r0, #0]
   d9b86:	4631      	mov	r1, r6
   d9b88:	689b      	ldr	r3, [r3, #8]
   d9b8a:	4798      	blx	r3
    i2c_.write(LSB);
   d9b8c:	6820      	ldr	r0, [r4, #0]
   d9b8e:	6803      	ldr	r3, [r0, #0]
   d9b90:	4629      	mov	r1, r5
   d9b92:	689b      	ldr	r3, [r3, #8]
   d9b94:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d9b96:	4641      	mov	r1, r8
   d9b98:	6820      	ldr	r0, [r4, #0]
   d9b9a:	f000 f8c5 	bl	d9d28 <_ZN7TwoWire15endTransmissionEh>
   d9b9e:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d9ba0:	4620      	mov	r0, r4
   d9ba2:	bf0c      	ite	eq
   d9ba4:	2500      	moveq	r5, #0
   d9ba6:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d9baa:	f7ff ff5e 	bl	d9a6a <_ZN9FuelGauge6unlockEv>
}
   d9bae:	4628      	mov	r0, r5
   d9bb0:	b004      	add	sp, #16
   d9bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9bb6 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d9bb6:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d9bb8:	2240      	movs	r2, #64	; 0x40
   d9bba:	2300      	movs	r3, #0
   d9bbc:	2106      	movs	r1, #6
   d9bbe:	f7ff ffc4 	bl	d9b4a <_ZN9FuelGauge13writeRegisterEhhh>
}
   d9bc2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d9bc6:	bd08      	pop	{r3, pc}

000d9bc8 <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   d9bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9bca:	4605      	mov	r5, r0
      { _M_device.lock(); }
   d9bcc:	f7ff ff34 	bl	d9a38 <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   d9bd0:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   d9bd2:	f10d 0207 	add.w	r2, sp, #7
   d9bd6:	f10d 0106 	add.w	r1, sp, #6
   d9bda:	4628      	mov	r0, r5
    byte MSB = 0;
   d9bdc:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d9be0:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   d9be4:	f7ff ffac 	bl	d9b40 <_ZN9FuelGauge18readConfigRegisterERhS0_>
   d9be8:	1e04      	subs	r4, r0, #0
   d9bea:	db0b      	blt.n	d9c04 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   d9bec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d9bf0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d9bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d9bf8:	210c      	movs	r1, #12
   d9bfa:	4628      	mov	r0, r5
   d9bfc:	f7ff ffa5 	bl	d9b4a <_ZN9FuelGauge13writeRegisterEhhh>
   d9c00:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   d9c04:	4628      	mov	r0, r5
   d9c06:	f7ff ff30 	bl	d9a6a <_ZN9FuelGauge6unlockEv>
}
   d9c0a:	4620      	mov	r0, r4
   d9c0c:	b003      	add	sp, #12
   d9c0e:	bd30      	pop	{r4, r5, pc}

000d9c10 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d9c10:	4770      	bx	lr

000d9c12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9c14:	4606      	mov	r6, r0
   d9c16:	4615      	mov	r5, r2
   d9c18:	460c      	mov	r4, r1
   d9c1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9c1c:	42bc      	cmp	r4, r7
   d9c1e:	d006      	beq.n	d9c2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9c20:	6833      	ldr	r3, [r6, #0]
   d9c22:	f814 1b01 	ldrb.w	r1, [r4], #1
   d9c26:	689b      	ldr	r3, [r3, #8]
   d9c28:	4630      	mov	r0, r6
   d9c2a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9c2c:	e7f6      	b.n	d9c1c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9c2e:	4628      	mov	r0, r5
   d9c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9c32 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d9c32:	7c00      	ldrb	r0, [r0, #16]
   d9c34:	2200      	movs	r2, #0
   d9c36:	f7fe bf01 	b.w	d8a3c <hal_i2c_write>

000d9c3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d9c3a:	7c00      	ldrb	r0, [r0, #16]
   d9c3c:	2100      	movs	r1, #0
   d9c3e:	f7fe bf05 	b.w	d8a4c <hal_i2c_available>

000d9c42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d9c42:	7c00      	ldrb	r0, [r0, #16]
   d9c44:	2100      	movs	r1, #0
   d9c46:	f7fe bf09 	b.w	d8a5c <hal_i2c_read>

000d9c4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d9c4a:	7c00      	ldrb	r0, [r0, #16]
   d9c4c:	2100      	movs	r1, #0
   d9c4e:	f7fe bf0d 	b.w	d8a6c <hal_i2c_peek>

000d9c52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d9c52:	7c00      	ldrb	r0, [r0, #16]
   d9c54:	2100      	movs	r1, #0
   d9c56:	f7fe bf11 	b.w	d8a7c <hal_i2c_flush>

000d9c5a <_ZN7TwoWireD0Ev>:
   d9c5a:	b510      	push	{r4, lr}
   d9c5c:	2114      	movs	r1, #20
   d9c5e:	4604      	mov	r4, r0
   d9c60:	f002 fbfc 	bl	dc45c <_ZdlPvj>
   d9c64:	4620      	mov	r0, r4
   d9c66:	bd10      	pop	{r4, pc}

000d9c68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d9c68:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9c6e:	4604      	mov	r4, r0
   d9c70:	4608      	mov	r0, r1
   d9c72:	2100      	movs	r1, #0
   d9c74:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9c78:	4b03      	ldr	r3, [pc, #12]	; (d9c88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d9c7a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9c7c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9c7e:	4611      	mov	r1, r2
   d9c80:	f7fe ff0c 	bl	d8a9c <hal_i2c_init>
}
   d9c84:	4620      	mov	r0, r4
   d9c86:	bd10      	pop	{r4, pc}
   d9c88:	000e00a4 	.word	0x000e00a4

000d9c8c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9c8c:	2300      	movs	r3, #0
   d9c8e:	7c00      	ldrb	r0, [r0, #16]
   d9c90:	461a      	mov	r2, r3
   d9c92:	4619      	mov	r1, r3
   d9c94:	f7fe beba 	b.w	d8a0c <hal_i2c_begin>

000d9c98 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d9c9a:	2200      	movs	r2, #0
   d9c9c:	2314      	movs	r3, #20
   d9c9e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d9ca2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d9ca6:	780b      	ldrb	r3, [r1, #0]
   d9ca8:	f88d 3008 	strb.w	r3, [sp, #8]
   d9cac:	684b      	ldr	r3, [r1, #4]
   d9cae:	9303      	str	r3, [sp, #12]
   d9cb0:	68cb      	ldr	r3, [r1, #12]
   d9cb2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9cb4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9cb6:	7a0b      	ldrb	r3, [r1, #8]
   d9cb8:	9305      	str	r3, [sp, #20]
   d9cba:	a901      	add	r1, sp, #4
   d9cbc:	f7fe ff06 	bl	d8acc <hal_i2c_request_ex>
}
   d9cc0:	b007      	add	sp, #28
   d9cc2:	f85d fb04 	ldr.w	pc, [sp], #4

000d9cc6 <_ZN7TwoWire11requestFromEhjh>:
{
   d9cc6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9cc8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9cca:	f88d 1000 	strb.w	r1, [sp]
   d9cce:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9cd2:	9103      	str	r1, [sp, #12]
   d9cd4:	bf18      	it	ne
   d9cd6:	2301      	movne	r3, #1
   d9cd8:	4669      	mov	r1, sp
    size_ = size;
   d9cda:	9201      	str	r2, [sp, #4]
   d9cdc:	f88d 3008 	strb.w	r3, [sp, #8]
   d9ce0:	f7ff ffda 	bl	d9c98 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9ce4:	b005      	add	sp, #20
   d9ce6:	f85d fb04 	ldr.w	pc, [sp], #4

000d9cea <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d9cea:	7c00      	ldrb	r0, [r0, #16]
   d9cec:	2200      	movs	r2, #0
   d9cee:	f7fe be95 	b.w	d8a1c <hal_i2c_begin_transmission>

000d9cf2 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d9cf2:	b2c9      	uxtb	r1, r1
   d9cf4:	f7ff bff9 	b.w	d9cea <_ZN7TwoWire17beginTransmissionEh>

000d9cf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d9cf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d9cfa:	2300      	movs	r3, #0
   d9cfc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d9d00:	684a      	ldr	r2, [r1, #4]
   d9d02:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d9d04:	2314      	movs	r3, #20
    };
   d9d06:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d9d08:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d9d0c:	780b      	ldrb	r3, [r1, #0]
    };
   d9d0e:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9d10:	7a0a      	ldrb	r2, [r1, #8]
   d9d12:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d9d14:	7c00      	ldrb	r0, [r0, #16]
    };
   d9d16:	f88d 3008 	strb.w	r3, [sp, #8]
   d9d1a:	aa01      	add	r2, sp, #4
   d9d1c:	4619      	mov	r1, r3
   d9d1e:	f7fe fe7d 	bl	d8a1c <hal_i2c_begin_transmission>
}
   d9d22:	b007      	add	sp, #28
   d9d24:	f85d fb04 	ldr.w	pc, [sp], #4

000d9d28 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9d28:	7c00      	ldrb	r0, [r0, #16]
   d9d2a:	2200      	movs	r2, #0
   d9d2c:	f7fe be7e 	b.w	d8a2c <hal_i2c_end_transmission>

000d9d30 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d9d30:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d9d32:	2100      	movs	r1, #0
   d9d34:	7c00      	ldrb	r0, [r0, #16]
   d9d36:	f7fe feb9 	bl	d8aac <hal_i2c_lock>
}
   d9d3a:	fab0 f080 	clz	r0, r0
   d9d3e:	0940      	lsrs	r0, r0, #5
   d9d40:	bd08      	pop	{r3, pc}

000d9d42 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d9d42:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d9d44:	2100      	movs	r1, #0
   d9d46:	7c00      	ldrb	r0, [r0, #16]
   d9d48:	f7fe feb8 	bl	d8abc <hal_i2c_unlock>
}
   d9d4c:	fab0 f080 	clz	r0, r0
   d9d50:	0940      	lsrs	r0, r0, #5
   d9d52:	bd08      	pop	{r3, pc}

000d9d54 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9d54:	4700      	bx	r0
	...

000d9d58 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9d58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9d5c:	2400      	movs	r4, #0
{
   d9d5e:	461d      	mov	r5, r3
   d9d60:	460f      	mov	r7, r1
   d9d62:	4690      	mov	r8, r2
   d9d64:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d9d66:	f7fe fe41 	bl	d89ec <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d9d6a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9d6c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d9d70:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9d74:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d9d78:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d9d7c:	bfa2      	ittt	ge
   d9d7e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9d82:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d9d86:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9d88:	4907      	ldr	r1, [pc, #28]	; (d9da8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d9d8a:	9400      	str	r4, [sp, #0]
   d9d8c:	4643      	mov	r3, r8
   d9d8e:	463a      	mov	r2, r7
   d9d90:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9d92:	bfa8      	it	ge
   d9d94:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9d98:	f7fe fe20 	bl	d89dc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9d9c:	fab0 f080 	clz	r0, r0
   d9da0:	0940      	lsrs	r0, r0, #5
   d9da2:	b004      	add	sp, #16
   d9da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9da8:	000d9d55 	.word	0x000d9d55

000d9dac <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d9dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9dae:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d9db0:	f7fe fe1c 	bl	d89ec <HAL_Interrupts_Detach>
   d9db4:	4605      	mov	r5, r0
   d9db6:	b970      	cbnz	r0, d9dd6 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   d9db8:	4f08      	ldr	r7, [pc, #32]	; (d9ddc <_Z15detachInterruptt+0x30>)
   d9dba:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   d9dbe:	b146      	cbz	r6, d9dd2 <_Z15detachInterruptt+0x26>
   d9dc0:	4630      	mov	r0, r6
   d9dc2:	f7fa fa81 	bl	d42c8 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d9dc6:	2110      	movs	r1, #16
   d9dc8:	4630      	mov	r0, r6
   d9dca:	f002 fb47 	bl	dc45c <_ZdlPvj>
        handlers[pin] = nullptr;
   d9dce:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   d9dd2:	2001      	movs	r0, #1
   d9dd4:	e000      	b.n	d9dd8 <_Z15detachInterruptt+0x2c>
        return false;
   d9dd6:	2000      	movs	r0, #0
    }
    return true;
}
   d9dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9dda:	bf00      	nop
   d9ddc:	2003e49c 	.word	0x2003e49c

000d9de0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9de0:	4770      	bx	lr

000d9de2 <_ZN9IPAddressD0Ev>:
   d9de2:	b510      	push	{r4, lr}
   d9de4:	2118      	movs	r1, #24
   d9de6:	4604      	mov	r4, r0
   d9de8:	f002 fb38 	bl	dc45c <_ZdlPvj>
   d9dec:	4620      	mov	r0, r4
   d9dee:	bd10      	pop	{r4, pc}

000d9df0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9df0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9df2:	7d03      	ldrb	r3, [r0, #20]
   d9df4:	2b06      	cmp	r3, #6
{
   d9df6:	b08d      	sub	sp, #52	; 0x34
   d9df8:	460e      	mov	r6, r1
   d9dfa:	f100 0704 	add.w	r7, r0, #4
   d9dfe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d9e02:	d012      	beq.n	d9e2a <_ZNK9IPAddress7printToER5Print+0x3a>
   d9e04:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d9e08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9e0c:	220a      	movs	r2, #10
   d9e0e:	4630      	mov	r0, r6
   d9e10:	f001 fb8a 	bl	db528 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9e14:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9e16:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d9e18:	d019      	beq.n	d9e4e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d9e1a:	2c00      	cmp	r4, #0
   d9e1c:	d0f4      	beq.n	d9e08 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d9e1e:	212e      	movs	r1, #46	; 0x2e
   d9e20:	4630      	mov	r0, r6
   d9e22:	f001 fb72 	bl	db50a <_ZN5Print5printEc>
   d9e26:	4404      	add	r4, r0
   d9e28:	e7ee      	b.n	d9e08 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9e2a:	232f      	movs	r3, #47	; 0x2f
   d9e2c:	466a      	mov	r2, sp
   d9e2e:	4639      	mov	r1, r7
   d9e30:	200a      	movs	r0, #10
		buf[0] = 0;
   d9e32:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9e36:	f7fe fe51 	bl	d8adc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d9e3a:	4668      	mov	r0, sp
   d9e3c:	f003 f951 	bl	dd0e2 <strlen>
   d9e40:	6833      	ldr	r3, [r6, #0]
   d9e42:	4602      	mov	r2, r0
   d9e44:	68db      	ldr	r3, [r3, #12]
   d9e46:	4669      	mov	r1, sp
   d9e48:	4630      	mov	r0, r6
   d9e4a:	4798      	blx	r3
   d9e4c:	4604      	mov	r4, r0
    }
    return n;
}
   d9e4e:	4620      	mov	r0, r4
   d9e50:	b00d      	add	sp, #52	; 0x34
   d9e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9e54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9e54:	b510      	push	{r4, lr}
   d9e56:	4b05      	ldr	r3, [pc, #20]	; (d9e6c <_ZN9IPAddressC1Ev+0x18>)
   d9e58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9e5a:	2211      	movs	r2, #17
   d9e5c:	f840 3b04 	str.w	r3, [r0], #4
   d9e60:	2100      	movs	r1, #0
   d9e62:	f003 f8cb 	bl	dcffc <memset>
}
   d9e66:	4620      	mov	r0, r4
   d9e68:	bd10      	pop	{r4, pc}
   d9e6a:	bf00      	nop
   d9e6c:	000e00cc 	.word	0x000e00cc

000d9e70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9e70:	4603      	mov	r3, r0
   d9e72:	4a07      	ldr	r2, [pc, #28]	; (d9e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9e74:	b510      	push	{r4, lr}
   d9e76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d9e7a:	f101 0210 	add.w	r2, r1, #16
   d9e7e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9e82:	f843 4b04 	str.w	r4, [r3], #4
   d9e86:	4291      	cmp	r1, r2
   d9e88:	d1f9      	bne.n	d9e7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9e8a:	780a      	ldrb	r2, [r1, #0]
   d9e8c:	701a      	strb	r2, [r3, #0]
}
   d9e8e:	bd10      	pop	{r4, pc}
   d9e90:	000e00cc 	.word	0x000e00cc

000d9e94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9e94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9e96:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9e9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9e9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9ea2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d9ea6:	2304      	movs	r3, #4
   d9ea8:	6041      	str	r1, [r0, #4]
   d9eaa:	7503      	strb	r3, [r0, #20]
}
   d9eac:	bd10      	pop	{r4, pc}

000d9eae <_ZN9IPAddressaSEPKh>:
{
   d9eae:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9eb0:	78cb      	ldrb	r3, [r1, #3]
   d9eb2:	9300      	str	r3, [sp, #0]
   d9eb4:	788b      	ldrb	r3, [r1, #2]
   d9eb6:	784a      	ldrb	r2, [r1, #1]
   d9eb8:	7809      	ldrb	r1, [r1, #0]
   d9eba:	f7ff ffeb 	bl	d9e94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9ebe:	b002      	add	sp, #8
   d9ec0:	bd10      	pop	{r4, pc}

000d9ec2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d9ec2:	f100 0310 	add.w	r3, r0, #16
   d9ec6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d9ec8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d9ecc:	2901      	cmp	r1, #1
   d9ece:	4618      	mov	r0, r3
   d9ed0:	d108      	bne.n	d9ee4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d9ed2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d9ed6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d9eda:	3a01      	subs	r2, #1
   d9edc:	f103 0310 	add.w	r3, r3, #16
   d9ee0:	d1f2      	bne.n	d9ec8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d9ee2:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d9ee4:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d9ee6:	bf04      	itt	eq
   d9ee8:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d9eec:	1852      	addeq	r2, r2, r1
   d9eee:	e7f4      	b.n	d9eda <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d9ef0 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d9ef0:	b40e      	push	{r1, r2, r3}
   d9ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9ef4:	b088      	sub	sp, #32
   d9ef6:	af00      	add	r7, sp, #0
   d9ef8:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9efc:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9efe:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9f02:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9f04:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9f06:	462b      	mov	r3, r5
   d9f08:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d9f0a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9f0c:	f7ff f8b2 	bl	d9074 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9f10:	280f      	cmp	r0, #15
   d9f12:	687a      	ldr	r2, [r7, #4]
   d9f14:	d91a      	bls.n	d9f4c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d9f16:	f100 0308 	add.w	r3, r0, #8
   d9f1a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d9f1e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d9f20:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9f24:	1c41      	adds	r1, r0, #1
   d9f26:	462b      	mov	r3, r5
   d9f28:	4668      	mov	r0, sp
        va_start(args, fmt);
   d9f2a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9f2c:	f7ff f8a2 	bl	d9074 <vsnprintf>
        if (n > 0) {
   d9f30:	1e02      	subs	r2, r0, #0
   d9f32:	dd04      	ble.n	d9f3e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d9f34:	6823      	ldr	r3, [r4, #0]
   d9f36:	4669      	mov	r1, sp
   d9f38:	689b      	ldr	r3, [r3, #8]
   d9f3a:	4620      	mov	r0, r4
   d9f3c:	4798      	blx	r3
   d9f3e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d9f40:	3720      	adds	r7, #32
   d9f42:	46bd      	mov	sp, r7
   d9f44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9f48:	b003      	add	sp, #12
   d9f4a:	4770      	bx	lr
    } else if (n > 0) {
   d9f4c:	2800      	cmp	r0, #0
   d9f4e:	d0f7      	beq.n	d9f40 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d9f50:	6823      	ldr	r3, [r4, #0]
   d9f52:	4602      	mov	r2, r0
   d9f54:	689b      	ldr	r3, [r3, #8]
   d9f56:	f107 0110 	add.w	r1, r7, #16
   d9f5a:	4620      	mov	r0, r4
   d9f5c:	4798      	blx	r3
}
   d9f5e:	e7ef      	b.n	d9f40 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d9f60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9f60:	b510      	push	{r4, lr}
          _M_dispose();
   d9f62:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9f64:	4604      	mov	r4, r0
          _M_dispose();
   d9f66:	689b      	ldr	r3, [r3, #8]
   d9f68:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d9f6a:	68a3      	ldr	r3, [r4, #8]
   d9f6c:	3b01      	subs	r3, #1
   d9f6e:	60a3      	str	r3, [r4, #8]
   d9f70:	b92b      	cbnz	r3, d9f7e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d9f72:	6823      	ldr	r3, [r4, #0]
   d9f74:	4620      	mov	r0, r4
   d9f76:	68db      	ldr	r3, [r3, #12]
    }
   d9f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d9f7c:	4718      	bx	r3
    }
   d9f7e:	bd10      	pop	{r4, pc}

000d9f80 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9f80:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d9f82:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d9f84:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d9f88:	689b      	ldr	r3, [r3, #8]
   d9f8a:	2201      	movs	r2, #1
   d9f8c:	f10d 0107 	add.w	r1, sp, #7
   d9f90:	4798      	blx	r3
}
   d9f92:	b003      	add	sp, #12
   d9f94:	f85d fb04 	ldr.w	pc, [sp], #4

000d9f98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d9f98:	b538      	push	{r3, r4, r5, lr}
   d9f9a:	680b      	ldr	r3, [r1, #0]
   d9f9c:	6003      	str	r3, [r0, #0]
   d9f9e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d9fa0:	6843      	ldr	r3, [r0, #4]
   d9fa2:	429d      	cmp	r5, r3
    class __shared_ptr
   d9fa4:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d9fa6:	d00c      	beq.n	d9fc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d9fa8:	b115      	cbz	r5, d9fb0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d9faa:	686b      	ldr	r3, [r5, #4]
   d9fac:	3301      	adds	r3, #1
   d9fae:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d9fb0:	6860      	ldr	r0, [r4, #4]
   d9fb2:	b128      	cbz	r0, d9fc0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d9fb4:	6843      	ldr	r3, [r0, #4]
   d9fb6:	3b01      	subs	r3, #1
   d9fb8:	6043      	str	r3, [r0, #4]
   d9fba:	b90b      	cbnz	r3, d9fc0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d9fbc:	f7ff ffd0 	bl	d9f60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d9fc0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d9fc2:	4620      	mov	r0, r4
   d9fc4:	bd38      	pop	{r3, r4, r5, pc}

000d9fc6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9fc6:	460b      	mov	r3, r1
   d9fc8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d9fca:	2200      	movs	r2, #0
   d9fcc:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d9fce:	e9c0 2200 	strd	r2, r2, [r0]
   d9fd2:	4604      	mov	r4, r0
        t_ = t;
   d9fd4:	6083      	str	r3, [r0, #8]
    if (t) {
   d9fd6:	b90b      	cbnz	r3, d9fdc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d9fd8:	4620      	mov	r0, r4
   d9fda:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d9fdc:	f7ff ffdc 	bl	d9f98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d9fe0:	e7fa      	b.n	d9fd8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d9fe2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d9fe2:	6883      	ldr	r3, [r0, #8]
   d9fe4:	b1eb      	cbz	r3, da022 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d9fe6:	781a      	ldrb	r2, [r3, #0]
   d9fe8:	2a03      	cmp	r2, #3
   d9fea:	d81a      	bhi.n	da022 <_ZNK5spark9JSONValue4typeEv+0x40>
   d9fec:	e8df f002 	tbb	[pc, r2]
   d9ff0:	1b021704 	.word	0x1b021704
   d9ff4:	2005      	movs	r0, #5
   d9ff6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d9ff8:	6802      	ldr	r2, [r0, #0]
   d9ffa:	685b      	ldr	r3, [r3, #4]
   d9ffc:	6852      	ldr	r2, [r2, #4]
   d9ffe:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   da000:	282d      	cmp	r0, #45	; 0x2d
   da002:	d012      	beq.n	da02a <_ZNK5spark9JSONValue4typeEv+0x48>
   da004:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da008:	2b09      	cmp	r3, #9
   da00a:	d90e      	bls.n	da02a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   da00c:	2874      	cmp	r0, #116	; 0x74
   da00e:	d00e      	beq.n	da02e <_ZNK5spark9JSONValue4typeEv+0x4c>
   da010:	2866      	cmp	r0, #102	; 0x66
   da012:	d00c      	beq.n	da02e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   da014:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   da018:	4258      	negs	r0, r3
   da01a:	4158      	adcs	r0, r3
   da01c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   da01e:	2006      	movs	r0, #6
   da020:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   da022:	2000      	movs	r0, #0
   da024:	4770      	bx	lr
        return JSON_TYPE_STRING;
   da026:	2004      	movs	r0, #4
   da028:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   da02a:	2003      	movs	r0, #3
   da02c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   da02e:	2002      	movs	r0, #2
}
   da030:	4770      	bx	lr

000da032 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   da032:	b510      	push	{r4, lr}
   da034:	4604      	mov	r4, r0
    switch (type()) {
   da036:	f7ff ffd4 	bl	d9fe2 <_ZNK5spark9JSONValue4typeEv>
   da03a:	2802      	cmp	r0, #2
   da03c:	d00e      	beq.n	da05c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   da03e:	1ec3      	subs	r3, r0, #3
   da040:	b2db      	uxtb	r3, r3
   da042:	2b01      	cmp	r3, #1
   da044:	d814      	bhi.n	da070 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   da046:	6822      	ldr	r2, [r4, #0]
   da048:	68a3      	ldr	r3, [r4, #8]
   da04a:	6850      	ldr	r0, [r2, #4]
   da04c:	685b      	ldr	r3, [r3, #4]
}
   da04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   da052:	220a      	movs	r2, #10
   da054:	2100      	movs	r1, #0
   da056:	4418      	add	r0, r3
   da058:	f003 bf80 	b.w	ddf5c <strtol>
        const char* const s = d_->json + t_->start;
   da05c:	6822      	ldr	r2, [r4, #0]
   da05e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   da060:	6852      	ldr	r2, [r2, #4]
   da062:	685b      	ldr	r3, [r3, #4]
   da064:	5cd0      	ldrb	r0, [r2, r3]
   da066:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   da06a:	4258      	negs	r0, r3
   da06c:	4158      	adcs	r0, r3
}
   da06e:	bd10      	pop	{r4, pc}
    switch (type()) {
   da070:	2000      	movs	r0, #0
   da072:	e7fc      	b.n	da06e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000da074 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   da074:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   da076:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   da078:	e9c0 3300 	strd	r3, r3, [r0]
   da07c:	4604      	mov	r4, r0
        n_(0) {
   da07e:	480e      	ldr	r0, [pc, #56]	; (da0b8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   da080:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   da084:	b1a9      	cbz	r1, da0b2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   da086:	780b      	ldrb	r3, [r1, #0]
   da088:	2b03      	cmp	r3, #3
   da08a:	d006      	beq.n	da09a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   da08c:	b98b      	cbnz	r3, da0b2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   da08e:	6813      	ldr	r3, [r2, #0]
   da090:	6858      	ldr	r0, [r3, #4]
   da092:	684b      	ldr	r3, [r1, #4]
   da094:	5cc3      	ldrb	r3, [r0, r3]
   da096:	2b6e      	cmp	r3, #110	; 0x6e
   da098:	d007      	beq.n	da0aa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   da09a:	6813      	ldr	r3, [r2, #0]
   da09c:	684d      	ldr	r5, [r1, #4]
   da09e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   da0a0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   da0a2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   da0a4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   da0a6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   da0a8:	60e3      	str	r3, [r4, #12]
   da0aa:	4611      	mov	r1, r2
   da0ac:	4620      	mov	r0, r4
   da0ae:	f7ff ff73 	bl	d9f98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   da0b2:	4620      	mov	r0, r4
   da0b4:	bd38      	pop	{r3, r4, r5, pc}
   da0b6:	bf00      	nop
   da0b8:	000e0135 	.word	0x000e0135

000da0bc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   da0bc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   da0be:	2500      	movs	r5, #0
   da0c0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   da0c2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   da0c6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   da0ca:	e9c0 5504 	strd	r5, r5, [r0, #16]
   da0ce:	4604      	mov	r4, r0
   da0d0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   da0d2:	b14b      	cbz	r3, da0e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   da0d4:	781a      	ldrb	r2, [r3, #0]
   da0d6:	2a01      	cmp	r2, #1
   da0d8:	d106      	bne.n	da0e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   da0da:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   da0de:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   da0e0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   da0e2:	6143      	str	r3, [r0, #20]
   da0e4:	f7ff ff58 	bl	d9f98 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   da0e8:	4620      	mov	r0, r4
   da0ea:	bd38      	pop	{r3, r4, r5, pc}

000da0ec <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   da0ec:	b510      	push	{r4, lr}
    if (!n_) {
   da0ee:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   da0f0:	4604      	mov	r4, r0
    if (!n_) {
   da0f2:	b163      	cbz	r3, da10e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   da0f4:	6880      	ldr	r0, [r0, #8]
   da0f6:	60e0      	str	r0, [r4, #12]
    --n_;
   da0f8:	3b01      	subs	r3, #1
    ++t_;
   da0fa:	3010      	adds	r0, #16
   da0fc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   da0fe:	6120      	str	r0, [r4, #16]
    --n_;
   da100:	6163      	str	r3, [r4, #20]
    if (n_) {
   da102:	b113      	cbz	r3, da10a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   da104:	f7ff fedd 	bl	d9ec2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   da108:	60a0      	str	r0, [r4, #8]
    return true;
   da10a:	2001      	movs	r0, #1
   da10c:	e000      	b.n	da110 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   da10e:	4618      	mov	r0, r3
}
   da110:	bd10      	pop	{r4, pc}

000da112 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   da112:	b510      	push	{r4, lr}
    write('}');
   da114:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   da116:	4604      	mov	r4, r0
    write('}');
   da118:	f7ff ff32 	bl	d9f80 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   da11c:	2301      	movs	r3, #1
   da11e:	7123      	strb	r3, [r4, #4]
}
   da120:	4620      	mov	r0, r4
   da122:	bd10      	pop	{r4, pc}

000da124 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   da124:	b508      	push	{r3, lr}
    switch (state_) {
   da126:	7903      	ldrb	r3, [r0, #4]
   da128:	2b01      	cmp	r3, #1
   da12a:	d002      	beq.n	da132 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   da12c:	2b02      	cmp	r3, #2
   da12e:	d004      	beq.n	da13a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   da130:	bd08      	pop	{r3, pc}
        write(',');
   da132:	212c      	movs	r1, #44	; 0x2c
        write(':');
   da134:	f7ff ff24 	bl	d9f80 <_ZN5spark10JSONWriter5writeEc>
}
   da138:	e7fa      	b.n	da130 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   da13a:	213a      	movs	r1, #58	; 0x3a
   da13c:	e7fa      	b.n	da134 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000da13e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   da13e:	b510      	push	{r4, lr}
   da140:	4604      	mov	r4, r0
    writeSeparator();
   da142:	f7ff ffef 	bl	da124 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   da146:	4620      	mov	r0, r4
   da148:	217b      	movs	r1, #123	; 0x7b
   da14a:	f7ff ff19 	bl	d9f80 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   da14e:	2300      	movs	r3, #0
   da150:	7123      	strb	r3, [r4, #4]
}
   da152:	4620      	mov	r0, r4
   da154:	bd10      	pop	{r4, pc}
	...

000da158 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   da158:	b513      	push	{r0, r1, r4, lr}
   da15a:	4604      	mov	r4, r0
   da15c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   da15e:	f7ff ffe1 	bl	da124 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   da162:	6823      	ldr	r3, [r4, #0]
   da164:	9a01      	ldr	r2, [sp, #4]
   da166:	68db      	ldr	r3, [r3, #12]
   da168:	4903      	ldr	r1, [pc, #12]	; (da178 <_ZN5spark10JSONWriter5valueEi+0x20>)
   da16a:	4620      	mov	r0, r4
   da16c:	4798      	blx	r3
    state_ = NEXT;
   da16e:	2301      	movs	r3, #1
}
   da170:	4620      	mov	r0, r4
    state_ = NEXT;
   da172:	7123      	strb	r3, [r4, #4]
}
   da174:	b002      	add	sp, #8
   da176:	bd10      	pop	{r4, pc}
   da178:	000df9d8 	.word	0x000df9d8

000da17c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   da17c:	b513      	push	{r0, r1, r4, lr}
   da17e:	4604      	mov	r4, r0
   da180:	9101      	str	r1, [sp, #4]
    writeSeparator();
   da182:	f7ff ffcf 	bl	da124 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   da186:	6823      	ldr	r3, [r4, #0]
   da188:	9a01      	ldr	r2, [sp, #4]
   da18a:	68db      	ldr	r3, [r3, #12]
   da18c:	4903      	ldr	r1, [pc, #12]	; (da19c <_ZN5spark10JSONWriter5valueEj+0x20>)
   da18e:	4620      	mov	r0, r4
   da190:	4798      	blx	r3
    state_ = NEXT;
   da192:	2301      	movs	r3, #1
}
   da194:	4620      	mov	r0, r4
    state_ = NEXT;
   da196:	7123      	strb	r3, [r4, #4]
}
   da198:	b002      	add	sp, #8
   da19a:	bd10      	pop	{r4, pc}
   da19c:	000dfcb2 	.word	0x000dfcb2

000da1a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   da1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da1a4:	460d      	mov	r5, r1
   da1a6:	4617      	mov	r7, r2
    write('"');
   da1a8:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   da1aa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; da24c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   da1ae:	4604      	mov	r4, r0
    const char* const end = str + size;
   da1b0:	442f      	add	r7, r5
    write('"');
   da1b2:	f7ff fee5 	bl	d9f80 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   da1b6:	4629      	mov	r1, r5
    while (s != end) {
   da1b8:	42bd      	cmp	r5, r7
   da1ba:	462a      	mov	r2, r5
   da1bc:	d038      	beq.n	da230 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   da1be:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   da1c2:	2e22      	cmp	r6, #34	; 0x22
   da1c4:	d003      	beq.n	da1ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   da1c6:	2e5c      	cmp	r6, #92	; 0x5c
   da1c8:	d001      	beq.n	da1ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   da1ca:	2e1f      	cmp	r6, #31
   da1cc:	d8f4      	bhi.n	da1b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   da1ce:	6823      	ldr	r3, [r4, #0]
   da1d0:	1a52      	subs	r2, r2, r1
   da1d2:	689b      	ldr	r3, [r3, #8]
   da1d4:	4620      	mov	r0, r4
   da1d6:	4798      	blx	r3
            write('\\');
   da1d8:	215c      	movs	r1, #92	; 0x5c
   da1da:	4620      	mov	r0, r4
   da1dc:	f7ff fed0 	bl	d9f80 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   da1e0:	2e0d      	cmp	r6, #13
   da1e2:	d80a      	bhi.n	da1fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   da1e4:	2e07      	cmp	r6, #7
   da1e6:	d91c      	bls.n	da222 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   da1e8:	f1a6 0308 	sub.w	r3, r6, #8
   da1ec:	2b05      	cmp	r3, #5
   da1ee:	d818      	bhi.n	da222 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   da1f0:	e8df f003 	tbb	[pc, r3]
   da1f4:	17110f0d 	.word	0x17110f0d
   da1f8:	1513      	.short	0x1513
   da1fa:	2e22      	cmp	r6, #34	; 0x22
   da1fc:	d001      	beq.n	da202 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   da1fe:	2e5c      	cmp	r6, #92	; 0x5c
   da200:	d10f      	bne.n	da222 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   da202:	4631      	mov	r1, r6
                write('b');
   da204:	4620      	mov	r0, r4
   da206:	f7ff febb 	bl	d9f80 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   da20a:	4629      	mov	r1, r5
    while (s != end) {
   da20c:	e7d4      	b.n	da1b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   da20e:	2162      	movs	r1, #98	; 0x62
   da210:	e7f8      	b.n	da204 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   da212:	2174      	movs	r1, #116	; 0x74
   da214:	e7f6      	b.n	da204 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   da216:	216e      	movs	r1, #110	; 0x6e
   da218:	e7f4      	b.n	da204 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   da21a:	2166      	movs	r1, #102	; 0x66
   da21c:	e7f2      	b.n	da204 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   da21e:	2172      	movs	r1, #114	; 0x72
   da220:	e7f0      	b.n	da204 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   da222:	6823      	ldr	r3, [r4, #0]
   da224:	4632      	mov	r2, r6
   da226:	68db      	ldr	r3, [r3, #12]
   da228:	4641      	mov	r1, r8
   da22a:	4620      	mov	r0, r4
   da22c:	4798      	blx	r3
                break;
   da22e:	e7ec      	b.n	da20a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   da230:	428d      	cmp	r5, r1
   da232:	d004      	beq.n	da23e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   da234:	6823      	ldr	r3, [r4, #0]
   da236:	1a6a      	subs	r2, r5, r1
   da238:	689b      	ldr	r3, [r3, #8]
   da23a:	4620      	mov	r0, r4
   da23c:	4798      	blx	r3
    }
    write('"');
   da23e:	2122      	movs	r1, #34	; 0x22
   da240:	4620      	mov	r0, r4
   da242:	f7ff fe9d 	bl	d9f80 <_ZN5spark10JSONWriter5writeEc>
}
   da246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da24a:	bf00      	nop
   da24c:	000e00d8 	.word	0x000e00d8

000da250 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   da250:	b513      	push	{r0, r1, r4, lr}
   da252:	4604      	mov	r4, r0
   da254:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   da258:	f7ff ff64 	bl	da124 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   da25c:	4620      	mov	r0, r4
   da25e:	e9dd 2100 	ldrd	r2, r1, [sp]
   da262:	f7ff ff9d 	bl	da1a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   da266:	2302      	movs	r3, #2
}
   da268:	4620      	mov	r0, r4
    state_ = VALUE;
   da26a:	7123      	strb	r3, [r4, #4]
}
   da26c:	b002      	add	sp, #8
   da26e:	bd10      	pop	{r4, pc}

000da270 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   da270:	b513      	push	{r0, r1, r4, lr}
   da272:	4604      	mov	r4, r0
   da274:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   da278:	f7ff ff54 	bl	da124 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   da27c:	4620      	mov	r0, r4
   da27e:	e9dd 2100 	ldrd	r2, r1, [sp]
   da282:	f7ff ff8d 	bl	da1a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   da286:	2301      	movs	r3, #1
}
   da288:	4620      	mov	r0, r4
    state_ = NEXT;
   da28a:	7123      	strb	r3, [r4, #4]
}
   da28c:	b002      	add	sp, #8
   da28e:	bd10      	pop	{r4, pc}

000da290 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   da290:	6880      	ldr	r0, [r0, #8]
   da292:	6803      	ldr	r3, [r0, #0]
   da294:	68db      	ldr	r3, [r3, #12]
   da296:	4718      	bx	r3

000da298 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   da298:	4770      	bx	lr

000da29a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   da29a:	4608      	mov	r0, r1
   da29c:	b111      	cbz	r1, da2a4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   da29e:	680b      	ldr	r3, [r1, #0]
   da2a0:	685b      	ldr	r3, [r3, #4]
   da2a2:	4718      	bx	r3
}
   da2a4:	4770      	bx	lr

000da2a6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   da2a6:	4770      	bx	lr

000da2a8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   da2a8:	4770      	bx	lr

000da2aa <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   da2aa:	4770      	bx	lr

000da2ac <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   da2ac:	4770      	bx	lr

000da2ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   da2ae:	b538      	push	{r3, r4, r5, lr}
   da2b0:	4604      	mov	r4, r0
   da2b2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   da2b4:	6800      	ldr	r0, [r0, #0]
   da2b6:	212e      	movs	r1, #46	; 0x2e
   da2b8:	f002 fed9 	bl	dd06e <strchrnul>
    size = s - category;
   da2bc:	6823      	ldr	r3, [r4, #0]
   da2be:	1ac3      	subs	r3, r0, r3
   da2c0:	602b      	str	r3, [r5, #0]
    if (size) {
   da2c2:	b123      	cbz	r3, da2ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   da2c4:	7803      	ldrb	r3, [r0, #0]
   da2c6:	b103      	cbz	r3, da2ca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   da2c8:	3001      	adds	r0, #1
   da2ca:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da2cc:	6020      	str	r0, [r4, #0]
}
   da2ce:	4618      	mov	r0, r3
   da2d0:	bd38      	pop	{r3, r4, r5, pc}

000da2d2 <_ZN5spark16JSONStreamWriterD0Ev>:
   da2d2:	b510      	push	{r4, lr}
   da2d4:	210c      	movs	r1, #12
   da2d6:	4604      	mov	r4, r0
   da2d8:	f002 f8c0 	bl	dc45c <_ZdlPvj>
   da2dc:	4620      	mov	r0, r4
   da2de:	bd10      	pop	{r4, pc}

000da2e0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   da2e0:	b510      	push	{r4, lr}
   da2e2:	2104      	movs	r1, #4
   da2e4:	4604      	mov	r4, r0
   da2e6:	f002 f8b9 	bl	dc45c <_ZdlPvj>
   da2ea:	4620      	mov	r0, r4
   da2ec:	bd10      	pop	{r4, pc}

000da2ee <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   da2ee:	b510      	push	{r4, lr}
   da2f0:	2104      	movs	r1, #4
   da2f2:	4604      	mov	r4, r0
   da2f4:	f002 f8b2 	bl	dc45c <_ZdlPvj>
   da2f8:	4620      	mov	r0, r4
   da2fa:	bd10      	pop	{r4, pc}

000da2fc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   da2fc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   da2fe:	f002 fec0 	bl	dd082 <strcmp>
}
   da302:	fab0 f080 	clz	r0, r0
   da306:	0940      	lsrs	r0, r0, #5
   da308:	bd08      	pop	{r3, pc}

000da30a <__tcf_1>:
   da30a:	4770      	bx	lr

000da30c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   da30c:	b510      	push	{r4, lr}
   da30e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   da310:	f001 febe 	bl	dc090 <_Z16_fetch_usbserialv>
   da314:	4284      	cmp	r4, r0
   da316:	d010      	beq.n	da33a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   da318:	f001 fe32 	bl	dbf80 <_Z22__fetch_global_Serial1v>
   da31c:	4284      	cmp	r4, r0
   da31e:	d105      	bne.n	da32c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   da320:	f001 fe2e 	bl	dbf80 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   da324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   da328:	f001 be27 	b.w	dbf7a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   da32c:	b12c      	cbz	r4, da33a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   da32e:	6823      	ldr	r3, [r4, #0]
   da330:	4620      	mov	r0, r4
   da332:	685b      	ldr	r3, [r3, #4]
}
   da334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da338:	4718      	bx	r3
   da33a:	bd10      	pop	{r4, pc}

000da33c <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   da33c:	b513      	push	{r0, r1, r4, lr}
   da33e:	4604      	mov	r4, r0
    return value(val, strlen(val));
   da340:	4608      	mov	r0, r1
   da342:	9101      	str	r1, [sp, #4]
   da344:	f002 fecd 	bl	dd0e2 <strlen>
   da348:	9901      	ldr	r1, [sp, #4]
   da34a:	4602      	mov	r2, r0
   da34c:	4620      	mov	r0, r4
}
   da34e:	b002      	add	sp, #8
   da350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   da354:	f7ff bf8c 	b.w	da270 <_ZN5spark10JSONWriter5valueEPKcj>

000da358 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   da358:	b513      	push	{r0, r1, r4, lr}
   da35a:	4604      	mov	r4, r0
    write(str, strlen(str));
   da35c:	4608      	mov	r0, r1
   da35e:	9101      	str	r1, [sp, #4]
   da360:	f002 febf 	bl	dd0e2 <strlen>
   da364:	6823      	ldr	r3, [r4, #0]
   da366:	9901      	ldr	r1, [sp, #4]
   da368:	68db      	ldr	r3, [r3, #12]
   da36a:	4602      	mov	r2, r0
   da36c:	4620      	mov	r0, r4
}
   da36e:	b002      	add	sp, #8
   da370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   da374:	4718      	bx	r3

000da376 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   da376:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   da378:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   da37a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   da37e:	68db      	ldr	r3, [r3, #12]
   da380:	2201      	movs	r2, #1
   da382:	f10d 0107 	add.w	r1, sp, #7
   da386:	4798      	blx	r3
}
   da388:	b003      	add	sp, #12
   da38a:	f85d fb04 	ldr.w	pc, [sp], #4

000da38e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   da38e:	b40e      	push	{r1, r2, r3}
   da390:	b503      	push	{r0, r1, lr}
   da392:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   da394:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   da396:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   da39a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   da39c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   da39e:	f001 f8e1 	bl	db564 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   da3a2:	b002      	add	sp, #8
   da3a4:	f85d eb04 	ldr.w	lr, [sp], #4
   da3a8:	b003      	add	sp, #12
   da3aa:	4770      	bx	lr

000da3ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   da3ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   da3b0:	e9d0 9500 	ldrd	r9, r5, [r0]
   da3b4:	f04f 0814 	mov.w	r8, #20
   da3b8:	fb08 f505 	mul.w	r5, r8, r5
   da3bc:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   da3be:	10ab      	asrs	r3, r5, #2
   da3c0:	4d18      	ldr	r5, [pc, #96]	; (da424 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   da3c2:	4617      	mov	r7, r2
   da3c4:	435d      	muls	r5, r3
   da3c6:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   da3c8:	2d00      	cmp	r5, #0
   da3ca:	dd23      	ble.n	da414 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   da3cc:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   da3ce:	fb08 f006 	mul.w	r0, r8, r6
   da3d2:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   da3d6:	463a      	mov	r2, r7
   da3d8:	f8ba b004 	ldrh.w	fp, [sl, #4]
   da3dc:	5820      	ldr	r0, [r4, r0]
   da3de:	9101      	str	r1, [sp, #4]
   da3e0:	455f      	cmp	r7, fp
   da3e2:	bf28      	it	cs
   da3e4:	465a      	movcs	r2, fp
   da3e6:	f002 fe84 	bl	dd0f2 <strncmp>
                if (cmp == 0) {
   da3ea:	9901      	ldr	r1, [sp, #4]
   da3ec:	2301      	movs	r3, #1
   da3ee:	b978      	cbnz	r0, da410 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   da3f0:	455f      	cmp	r7, fp
   da3f2:	d103      	bne.n	da3fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   da3f4:	9a00      	ldr	r2, [sp, #0]
   da3f6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   da3f8:	4635      	mov	r5, r6
   da3fa:	e7e5      	b.n	da3c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   da3fc:	bf8c      	ite	hi
   da3fe:	2001      	movhi	r0, #1
   da400:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   da402:	2800      	cmp	r0, #0
   da404:	d0f8      	beq.n	da3f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   da406:	1bae      	subs	r6, r5, r6
	      ++__first;
   da408:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   da40c:	3e01      	subs	r6, #1
   da40e:	e7f3      	b.n	da3f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   da410:	0fc0      	lsrs	r0, r0, #31
   da412:	e7f6      	b.n	da402 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   da414:	eba4 0409 	sub.w	r4, r4, r9
}
   da418:	4802      	ldr	r0, [pc, #8]	; (da424 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   da41a:	10a4      	asrs	r4, r4, #2
   da41c:	4360      	muls	r0, r4
   da41e:	b003      	add	sp, #12
   da420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da424:	cccccccd 	.word	0xcccccccd

000da428 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   da428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   da42a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   da42c:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   da42e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   da430:	b30b      	cbz	r3, da476 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   da432:	b301      	cbz	r1, da476 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   da434:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   da436:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   da43a:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   da43c:	a903      	add	r1, sp, #12
   da43e:	a801      	add	r0, sp, #4
   da440:	f7ff ff35 	bl	da2ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   da444:	4601      	mov	r1, r0
   da446:	b1b0      	cbz	r0, da476 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   da448:	f10d 030b 	add.w	r3, sp, #11
   da44c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   da44e:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   da452:	4620      	mov	r0, r4
   da454:	f7ff ffaa 	bl	da3ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   da458:	f89d 300b 	ldrb.w	r3, [sp, #11]
   da45c:	b15b      	cbz	r3, da476 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   da45e:	6824      	ldr	r4, [r4, #0]
   da460:	2314      	movs	r3, #20
   da462:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   da466:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   da46a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   da46e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   da470:	bfa8      	it	ge
   da472:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   da474:	e7e2      	b.n	da43c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   da476:	4630      	mov	r0, r6
   da478:	b004      	add	sp, #16
   da47a:	bd70      	pop	{r4, r5, r6, pc}

000da47c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   da47c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   da47e:	4c09      	ldr	r4, [pc, #36]	; (da4a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   da480:	7823      	ldrb	r3, [r4, #0]
   da482:	f3bf 8f5b 	dmb	ish
   da486:	07db      	lsls	r3, r3, #31
   da488:	d409      	bmi.n	da49e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   da48a:	4620      	mov	r0, r4
   da48c:	f7f9 fe14 	bl	d40b8 <__cxa_guard_acquire>
   da490:	b128      	cbz	r0, da49e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   da492:	4620      	mov	r0, r4
   da494:	f7f9 fe15 	bl	d40c2 <__cxa_guard_release>
   da498:	4803      	ldr	r0, [pc, #12]	; (da4a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   da49a:	f002 fd6b 	bl	dcf74 <atexit>
}
   da49e:	4803      	ldr	r0, [pc, #12]	; (da4ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   da4a0:	bd10      	pop	{r4, pc}
   da4a2:	bf00      	nop
   da4a4:	2003e530 	.word	0x2003e530
   da4a8:	000da2a7 	.word	0x000da2a7
   da4ac:	2003e0a0 	.word	0x2003e0a0

000da4b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   da4b0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   da4b2:	4c09      	ldr	r4, [pc, #36]	; (da4d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   da4b4:	7823      	ldrb	r3, [r4, #0]
   da4b6:	f3bf 8f5b 	dmb	ish
   da4ba:	07db      	lsls	r3, r3, #31
   da4bc:	d409      	bmi.n	da4d2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   da4be:	4620      	mov	r0, r4
   da4c0:	f7f9 fdfa 	bl	d40b8 <__cxa_guard_acquire>
   da4c4:	b128      	cbz	r0, da4d2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   da4c6:	4620      	mov	r0, r4
   da4c8:	f7f9 fdfb 	bl	d40c2 <__cxa_guard_release>
   da4cc:	4803      	ldr	r0, [pc, #12]	; (da4dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   da4ce:	f002 fd51 	bl	dcf74 <atexit>
    return &factory;
}
   da4d2:	4803      	ldr	r0, [pc, #12]	; (da4e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   da4d4:	bd10      	pop	{r4, pc}
   da4d6:	bf00      	nop
   da4d8:	2003e534 	.word	0x2003e534
   da4dc:	000da30b 	.word	0x000da30b
   da4e0:	2003e0a4 	.word	0x2003e0a4

000da4e4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   da4e4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   da4e6:	2500      	movs	r5, #0
   da4e8:	4604      	mov	r4, r0
   da4ea:	e9c0 5500 	strd	r5, r5, [r0]
   da4ee:	e9c0 5504 	strd	r5, r5, [r0, #16]
   da4f2:	6085      	str	r5, [r0, #8]
   da4f4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   da4f6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   da4fa:	f7fe f9bf 	bl	d887c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   da4fe:	f7ff ffbd 	bl	da47c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   da502:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   da504:	f7ff ffd4 	bl	da4b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   da508:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   da50a:	6220      	str	r0, [r4, #32]
}
   da50c:	4620      	mov	r0, r4
   da50e:	bd38      	pop	{r3, r4, r5, pc}

000da510 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   da510:	b510      	push	{r4, lr}
    static LogManager mgr;
   da512:	4c0a      	ldr	r4, [pc, #40]	; (da53c <_ZN5spark10LogManager8instanceEv+0x2c>)
   da514:	7823      	ldrb	r3, [r4, #0]
   da516:	f3bf 8f5b 	dmb	ish
   da51a:	07db      	lsls	r3, r3, #31
   da51c:	d40c      	bmi.n	da538 <_ZN5spark10LogManager8instanceEv+0x28>
   da51e:	4620      	mov	r0, r4
   da520:	f7f9 fdca 	bl	d40b8 <__cxa_guard_acquire>
   da524:	b140      	cbz	r0, da538 <_ZN5spark10LogManager8instanceEv+0x28>
   da526:	4806      	ldr	r0, [pc, #24]	; (da540 <_ZN5spark10LogManager8instanceEv+0x30>)
   da528:	f7ff ffdc 	bl	da4e4 <_ZN5spark10LogManagerC1Ev>
   da52c:	4620      	mov	r0, r4
   da52e:	f7f9 fdc8 	bl	d40c2 <__cxa_guard_release>
   da532:	4804      	ldr	r0, [pc, #16]	; (da544 <_ZN5spark10LogManager8instanceEv+0x34>)
   da534:	f002 fd1e 	bl	dcf74 <atexit>
    return &mgr;
}
   da538:	4801      	ldr	r0, [pc, #4]	; (da540 <_ZN5spark10LogManager8instanceEv+0x30>)
   da53a:	bd10      	pop	{r4, pc}
   da53c:	2003e52c 	.word	0x2003e52c
   da540:	2003e53c 	.word	0x2003e53c
   da544:	000da9f1 	.word	0x000da9f1

000da548 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   da548:	4a02      	ldr	r2, [pc, #8]	; (da554 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   da54a:	4903      	ldr	r1, [pc, #12]	; (da558 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   da54c:	4803      	ldr	r0, [pc, #12]	; (da55c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   da54e:	2300      	movs	r3, #0
   da550:	f7fe bbfc 	b.w	d8d4c <log_set_callbacks>
   da554:	000da879 	.word	0x000da879
   da558:	000da805 	.word	0x000da805
   da55c:	000da785 	.word	0x000da785

000da560 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   da560:	2300      	movs	r3, #0
   da562:	461a      	mov	r2, r3
   da564:	4619      	mov	r1, r3
   da566:	4618      	mov	r0, r3
   da568:	f7fe bbf0 	b.w	d8d4c <log_set_callbacks>

000da56c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   da56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   da56e:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da570:	f851 3b04 	ldr.w	r3, [r1], #4
   da574:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   da576:	4604      	mov	r4, r0
   da578:	a801      	add	r0, sp, #4
   da57a:	f7fe fde6 	bl	d914a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   da57e:	466a      	mov	r2, sp
   da580:	4629      	mov	r1, r5
   da582:	4620      	mov	r0, r4
   da584:	f7ff fd1f 	bl	d9fc6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   da588:	a801      	add	r0, sp, #4
   da58a:	f7fa fa45 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da58e:	4620      	mov	r0, r4
   da590:	b003      	add	sp, #12
   da592:	bd30      	pop	{r4, r5, pc}

000da594 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   da594:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   da596:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da598:	f851 3b04 	ldr.w	r3, [r1], #4
   da59c:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   da59e:	4604      	mov	r4, r0
   da5a0:	a801      	add	r0, sp, #4
   da5a2:	f7fe fdd2 	bl	d914a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   da5a6:	466a      	mov	r2, sp
   da5a8:	4629      	mov	r1, r5
   da5aa:	4620      	mov	r0, r4
   da5ac:	f7ff fd86 	bl	da0bc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   da5b0:	a801      	add	r0, sp, #4
   da5b2:	f7fa fa31 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da5b6:	4620      	mov	r0, r4
   da5b8:	b003      	add	sp, #12
   da5ba:	bd30      	pop	{r4, r5, pc}

000da5bc <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   da5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   da5be:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da5c0:	f851 3b04 	ldr.w	r3, [r1], #4
   da5c4:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   da5c6:	4604      	mov	r4, r0
   da5c8:	a801      	add	r0, sp, #4
   da5ca:	f7fe fdbe 	bl	d914a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   da5ce:	466a      	mov	r2, sp
   da5d0:	4629      	mov	r1, r5
   da5d2:	4620      	mov	r0, r4
   da5d4:	f7ff fd4e 	bl	da074 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   da5d8:	a801      	add	r0, sp, #4
   da5da:	f7fa fa1d 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da5de:	4620      	mov	r0, r4
   da5e0:	b003      	add	sp, #12
   da5e2:	bd30      	pop	{r4, r5, pc}

000da5e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   da5e4:	b570      	push	{r4, r5, r6, lr}
   da5e6:	b08a      	sub	sp, #40	; 0x28
   da5e8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   da5ea:	4601      	mov	r1, r0
   da5ec:	a804      	add	r0, sp, #16
   da5ee:	f7ff ffd1 	bl	da594 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   da5f2:	4e14      	ldr	r6, [pc, #80]	; (da644 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   da5f4:	a804      	add	r0, sp, #16
   da5f6:	f7ff fd79 	bl	da0ec <_ZN5spark18JSONObjectIterator4nextEv>
   da5fa:	b1e8      	cbz	r0, da638 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   da5fc:	a904      	add	r1, sp, #16
   da5fe:	4668      	mov	r0, sp
   da600:	f7ff ffdc 	bl	da5bc <_ZNK5spark18JSONObjectIterator4nameEv>
   da604:	9802      	ldr	r0, [sp, #8]
   da606:	4631      	mov	r1, r6
   da608:	f7ff fe78 	bl	da2fc <_ZNK5spark10JSONStringeqEPKc.isra.0>
   da60c:	4604      	mov	r4, r0
   da60e:	b110      	cbz	r0, da616 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   da610:	1e2c      	subs	r4, r5, #0
   da612:	bf18      	it	ne
   da614:	2401      	movne	r4, #1
   da616:	a801      	add	r0, sp, #4
   da618:	f7fa f9fe 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da61c:	2c00      	cmp	r4, #0
   da61e:	d0e9      	beq.n	da5f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   da620:	a904      	add	r1, sp, #16
   da622:	4668      	mov	r0, sp
   da624:	f7ff ffa2 	bl	da56c <_ZNK5spark18JSONObjectIterator5valueEv>
   da628:	4668      	mov	r0, sp
   da62a:	f7ff fd02 	bl	da032 <_ZNK5spark9JSONValue5toIntEv>
   da62e:	6028      	str	r0, [r5, #0]
   da630:	a801      	add	r0, sp, #4
   da632:	f7fa f9f1 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da636:	e7dd      	b.n	da5f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   da638:	a805      	add	r0, sp, #20
   da63a:	f7fa f9ed 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da63e:	b00a      	add	sp, #40	; 0x28
   da640:	bd70      	pop	{r4, r5, r6, pc}
   da642:	bf00      	nop
   da644:	000e00de 	.word	0x000e00de

000da648 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   da648:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da64a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   da64c:	4620      	mov	r0, r4
   da64e:	4912      	ldr	r1, [pc, #72]	; (da698 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   da650:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   da652:	f002 fd16 	bl	dd082 <strcmp>
   da656:	b948      	cbnz	r0, da66c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   da658:	f001 fd1a 	bl	dc090 <_Z16_fetch_usbserialv>
   da65c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   da660:	f001 fd06 	bl	dc070 <_ZN9USBSerial5beginEl>
        return &Serial;
   da664:	f001 fd14 	bl	dc090 <_Z16_fetch_usbserialv>
}
   da668:	b003      	add	sp, #12
   da66a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   da66c:	490b      	ldr	r1, [pc, #44]	; (da69c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   da66e:	4620      	mov	r0, r4
   da670:	f002 fd07 	bl	dd082 <strcmp>
   da674:	b970      	cbnz	r0, da694 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   da676:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   da67a:	a901      	add	r1, sp, #4
   da67c:	4628      	mov	r0, r5
        int baud = 9600;
   da67e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   da680:	f7ff ffb0 	bl	da5e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   da684:	f001 fc7c 	bl	dbf80 <_Z22__fetch_global_Serial1v>
   da688:	9901      	ldr	r1, [sp, #4]
   da68a:	f001 fc73 	bl	dbf74 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   da68e:	f001 fc77 	bl	dbf80 <_Z22__fetch_global_Serial1v>
   da692:	e7e9      	b.n	da668 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   da694:	2000      	movs	r0, #0
   da696:	e7e7      	b.n	da668 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   da698:	000e00e3 	.word	0x000e00e3
   da69c:	000e00ea 	.word	0x000e00ea

000da6a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da6a0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da6a2:	e9d0 5300 	ldrd	r5, r3, [r0]
   da6a6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   da6a8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da6aa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   da6ae:	42ae      	cmp	r6, r5
   da6b0:	d005      	beq.n	da6be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   da6b2:	f105 0008 	add.w	r0, r5, #8
   da6b6:	f7ff fff3 	bl	da6a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da6ba:	3514      	adds	r5, #20
   da6bc:	e7f7      	b.n	da6ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   da6be:	6820      	ldr	r0, [r4, #0]
   da6c0:	f7fe fcb0 	bl	d9024 <free>
}
   da6c4:	4620      	mov	r0, r4
   da6c6:	bd70      	pop	{r4, r5, r6, pc}

000da6c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da6c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da6ca:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   da6ce:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da6d0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   da6d4:	42ae      	cmp	r6, r5
   da6d6:	d004      	beq.n	da6e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   da6d8:	4628      	mov	r0, r5
   da6da:	f000 ff85 	bl	db5e8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   da6de:	3510      	adds	r5, #16
   da6e0:	e7f8      	b.n	da6d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   da6e2:	6820      	ldr	r0, [r4, #0]
   da6e4:	f7fe fc9e 	bl	d9024 <free>
}
   da6e8:	4620      	mov	r0, r4
   da6ea:	bd70      	pop	{r4, r5, r6, pc}

000da6ec <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   da6ec:	b510      	push	{r4, lr}
   da6ee:	4604      	mov	r4, r0
   da6f0:	300c      	adds	r0, #12
   da6f2:	f7ff ffd5 	bl	da6a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da6f6:	4620      	mov	r0, r4
   da6f8:	f7ff ffe6 	bl	da6c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   da6fc:	4620      	mov	r0, r4
   da6fe:	bd10      	pop	{r4, pc}

000da700 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   da700:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   da702:	4b04      	ldr	r3, [pc, #16]	; (da714 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   da704:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   da706:	f840 3b04 	str.w	r3, [r0], #4
   da70a:	f7ff ffef 	bl	da6ec <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   da70e:	4620      	mov	r0, r4
   da710:	bd10      	pop	{r4, pc}
   da712:	bf00      	nop
   da714:	000df8ac 	.word	0x000df8ac

000da718 <_ZN5spark16StreamLogHandlerD0Ev>:
   da718:	b510      	push	{r4, lr}
   da71a:	4604      	mov	r4, r0
   da71c:	f7ff fff0 	bl	da700 <_ZN5spark16StreamLogHandlerD1Ev>
   da720:	4620      	mov	r0, r4
   da722:	2124      	movs	r1, #36	; 0x24
   da724:	f001 fe9a 	bl	dc45c <_ZdlPvj>
   da728:	4620      	mov	r0, r4
   da72a:	bd10      	pop	{r4, pc}

000da72c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   da72c:	b510      	push	{r4, lr}
   da72e:	4b03      	ldr	r3, [pc, #12]	; (da73c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   da730:	6003      	str	r3, [r0, #0]
   da732:	4604      	mov	r4, r0
   da734:	f7ff ffe4 	bl	da700 <_ZN5spark16StreamLogHandlerD1Ev>
   da738:	4620      	mov	r0, r4
   da73a:	bd10      	pop	{r4, pc}
   da73c:	000e0184 	.word	0x000e0184

000da740 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   da740:	b510      	push	{r4, lr}
   da742:	4604      	mov	r4, r0
   da744:	f7ff fff2 	bl	da72c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   da748:	4620      	mov	r0, r4
   da74a:	2124      	movs	r1, #36	; 0x24
   da74c:	f001 fe86 	bl	dc45c <_ZdlPvj>
   da750:	4620      	mov	r0, r4
   da752:	bd10      	pop	{r4, pc}

000da754 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   da754:	2200      	movs	r2, #0
   da756:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   da75a:	b510      	push	{r4, lr}
        capacity_(0) {
   da75c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   da75e:	680c      	ldr	r4, [r1, #0]
   da760:	6004      	str	r4, [r0, #0]
   da762:	684c      	ldr	r4, [r1, #4]
   da764:	6044      	str	r4, [r0, #4]
   da766:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da768:	600a      	str	r2, [r1, #0]
   da76a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   da76c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da76e:	608a      	str	r2, [r1, #8]
}
   da770:	bd10      	pop	{r4, pc}

000da772 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   da772:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   da774:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   da776:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   da778:	6818      	ldr	r0, [r3, #0]
   da77a:	f7fe f897 	bl	d88ac <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   da77e:	4620      	mov	r0, r4
   da780:	bd10      	pop	{r4, pc}
	...

000da784 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   da784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da788:	b087      	sub	sp, #28
   da78a:	4680      	mov	r8, r0
   da78c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   da78e:	4b1c      	ldr	r3, [pc, #112]	; (da800 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   da790:	685b      	ldr	r3, [r3, #4]
   da792:	f3c3 0308 	ubfx	r3, r3, #0, #9
   da796:	4689      	mov	r9, r1
   da798:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da79a:	b96b      	cbnz	r3, da7b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   da79c:	f7ff feb8 	bl	da510 <_ZN5spark10LogManager8instanceEv>
   da7a0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   da7a2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   da7a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da7a8:	9305      	str	r3, [sp, #20]
   da7aa:	f7fe f877 	bl	d889c <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   da7ae:	7b23      	ldrb	r3, [r4, #12]
   da7b0:	b12b      	cbz	r3, da7be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   da7b2:	a805      	add	r0, sp, #20
   da7b4:	f7ff ffdd 	bl	da772 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   da7b8:	b007      	add	sp, #28
   da7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   da7be:	2301      	movs	r3, #1
   da7c0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   da7c2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   da7c6:	fa5f f989 	uxtb.w	r9, r9
   da7ca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da7ce:	45aa      	cmp	sl, r5
   da7d0:	d012      	beq.n	da7f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   da7d2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   da7d6:	4631      	mov	r1, r6
   da7d8:	1d38      	adds	r0, r7, #4
   da7da:	f7ff fe25 	bl	da428 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da7de:	4581      	cmp	r9, r0
   da7e0:	d3f5      	bcc.n	da7ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   da7e2:	683b      	ldr	r3, [r7, #0]
   da7e4:	9a03      	ldr	r2, [sp, #12]
   da7e6:	9200      	str	r2, [sp, #0]
   da7e8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   da7ec:	464a      	mov	r2, r9
   da7ee:	4633      	mov	r3, r6
   da7f0:	4641      	mov	r1, r8
   da7f2:	4638      	mov	r0, r7
   da7f4:	47d8      	blx	fp
   da7f6:	e7ea      	b.n	da7ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   da7f8:	2300      	movs	r3, #0
   da7fa:	7323      	strb	r3, [r4, #12]
   da7fc:	e7d9      	b.n	da7b2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   da7fe:	bf00      	nop
   da800:	e000ed00 	.word	0xe000ed00

000da804 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   da804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da808:	469b      	mov	fp, r3
   da80a:	4b1a      	ldr	r3, [pc, #104]	; (da874 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   da80c:	685b      	ldr	r3, [r3, #4]
   da80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   da812:	4680      	mov	r8, r0
   da814:	4689      	mov	r9, r1
   da816:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   da818:	b96b      	cbnz	r3, da836 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   da81a:	f7ff fe79 	bl	da510 <_ZN5spark10LogManager8instanceEv>
   da81e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   da820:	f100 0324 	add.w	r3, r0, #36	; 0x24
   da824:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da826:	9301      	str	r3, [sp, #4]
   da828:	f7fe f838 	bl	d889c <os_mutex_recursive_lock>
        if (that->isActive()) {
   da82c:	7b23      	ldrb	r3, [r4, #12]
   da82e:	b12b      	cbz	r3, da83c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   da830:	a801      	add	r0, sp, #4
   da832:	f7ff ff9e 	bl	da772 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   da836:	b003      	add	sp, #12
   da838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   da83c:	2301      	movs	r3, #1
   da83e:	7323      	strb	r3, [r4, #12]
   da840:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   da844:	b2f6      	uxtb	r6, r6
   da846:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da84a:	4555      	cmp	r5, sl
   da84c:	d00e      	beq.n	da86c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   da84e:	f855 7b04 	ldr.w	r7, [r5], #4
   da852:	4659      	mov	r1, fp
   da854:	1d38      	adds	r0, r7, #4
   da856:	f7ff fde7 	bl	da428 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da85a:	4286      	cmp	r6, r0
   da85c:	d3f5      	bcc.n	da84a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   da85e:	683b      	ldr	r3, [r7, #0]
   da860:	464a      	mov	r2, r9
   da862:	68db      	ldr	r3, [r3, #12]
   da864:	4641      	mov	r1, r8
   da866:	4638      	mov	r0, r7
   da868:	4798      	blx	r3
   da86a:	e7ee      	b.n	da84a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   da86c:	2300      	movs	r3, #0
   da86e:	7323      	strb	r3, [r4, #12]
   da870:	e7de      	b.n	da830 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   da872:	bf00      	nop
   da874:	e000ed00 	.word	0xe000ed00

000da878 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   da878:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   da87c:	4b16      	ldr	r3, [pc, #88]	; (da8d8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   da87e:	685b      	ldr	r3, [r3, #4]
   da880:	f3c3 0308 	ubfx	r3, r3, #0, #9
   da884:	4605      	mov	r5, r0
   da886:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   da888:	bb1b      	cbnz	r3, da8d2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   da88a:	f7ff fe41 	bl	da510 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   da88e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   da892:	4604      	mov	r4, r0
   da894:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da896:	9301      	str	r3, [sp, #4]
   da898:	f7fe f800 	bl	d889c <os_mutex_recursive_lock>
   da89c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   da8a0:	2446      	movs	r4, #70	; 0x46
   da8a2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da8a6:	45b0      	cmp	r8, r6
   da8a8:	d109      	bne.n	da8be <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   da8aa:	a801      	add	r0, sp, #4
   da8ac:	f7ff ff61 	bl	da772 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   da8b0:	42a5      	cmp	r5, r4
   da8b2:	bfb4      	ite	lt
   da8b4:	2000      	movlt	r0, #0
   da8b6:	2001      	movge	r0, #1
}
   da8b8:	b002      	add	sp, #8
   da8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   da8be:	f856 0b04 	ldr.w	r0, [r6], #4
   da8c2:	4639      	mov	r1, r7
   da8c4:	3004      	adds	r0, #4
   da8c6:	f7ff fdaf 	bl	da428 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   da8ca:	4284      	cmp	r4, r0
   da8cc:	bfa8      	it	ge
   da8ce:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   da8d0:	e7e9      	b.n	da8a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   da8d2:	2000      	movs	r0, #0
   da8d4:	e7f0      	b.n	da8b8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   da8d6:	bf00      	nop
   da8d8:	e000ed00 	.word	0xe000ed00

000da8dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da8dc:	b570      	push	{r4, r5, r6, lr}
   da8de:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   da8e0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da8e4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   da8e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   da8ea:	4282      	cmp	r2, r0
   da8ec:	d007      	beq.n	da8fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   da8ee:	4601      	mov	r1, r0
            if (*p == value) {
   da8f0:	681d      	ldr	r5, [r3, #0]
   da8f2:	f851 6b04 	ldr.w	r6, [r1], #4
   da8f6:	42ae      	cmp	r6, r5
   da8f8:	d003      	beq.n	da902 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   da8fa:	4608      	mov	r0, r1
   da8fc:	e7f5      	b.n	da8ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   da8fe:	2000      	movs	r0, #0
}
   da900:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   da902:	1a52      	subs	r2, r2, r1
   da904:	f002 fb60 	bl	dcfc8 <memmove>
    --size_;
   da908:	6863      	ldr	r3, [r4, #4]
   da90a:	3b01      	subs	r3, #1
   da90c:	6063      	str	r3, [r4, #4]
    return true;
   da90e:	2001      	movs	r0, #1
   da910:	e7f6      	b.n	da900 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000da912 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   da912:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   da914:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   da918:	4604      	mov	r4, r0
   da91a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da91c:	9101      	str	r1, [sp, #4]
   da91e:	9303      	str	r3, [sp, #12]
   da920:	f7fd ffbc 	bl	d889c <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   da924:	a901      	add	r1, sp, #4
   da926:	4620      	mov	r0, r4
   da928:	f7ff ffd8 	bl	da8dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   da92c:	b118      	cbz	r0, da936 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   da92e:	6863      	ldr	r3, [r4, #4]
   da930:	b90b      	cbnz	r3, da936 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   da932:	f7ff fe15 	bl	da560 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   da936:	a803      	add	r0, sp, #12
   da938:	f7ff ff1b 	bl	da772 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   da93c:	b004      	add	sp, #16
   da93e:	bd10      	pop	{r4, pc}

000da940 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   da940:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   da942:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   da946:	2318      	movs	r3, #24
   da948:	4604      	mov	r4, r0
   da94a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   da94e:	42ae      	cmp	r6, r5
   da950:	d015      	beq.n	da97e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   da952:	f105 0110 	add.w	r1, r5, #16
   da956:	4620      	mov	r0, r4
   da958:	f7ff ffc0 	bl	da8dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   da95c:	6863      	ldr	r3, [r4, #4]
   da95e:	b90b      	cbnz	r3, da964 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   da960:	f7ff fdfe 	bl	da560 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   da964:	69e0      	ldr	r0, [r4, #28]
   da966:	6929      	ldr	r1, [r5, #16]
   da968:	6803      	ldr	r3, [r0, #0]
   da96a:	68db      	ldr	r3, [r3, #12]
   da96c:	4798      	blx	r3
        if (h.stream) {
   da96e:	6969      	ldr	r1, [r5, #20]
   da970:	b119      	cbz	r1, da97a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   da972:	6a20      	ldr	r0, [r4, #32]
   da974:	6803      	ldr	r3, [r0, #0]
   da976:	68db      	ldr	r3, [r3, #12]
   da978:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   da97a:	3518      	adds	r5, #24
   da97c:	e7e7      	b.n	da94e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   da97e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   da982:	2618      	movs	r6, #24
   da984:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   da988:	42ae      	cmp	r6, r5
   da98a:	d004      	beq.n	da996 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   da98c:	4628      	mov	r0, r5
   da98e:	f000 fe2b 	bl	db5e8 <_ZN6StringD1Ev>
   da992:	3518      	adds	r5, #24
   da994:	e7f8      	b.n	da988 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   da996:	2300      	movs	r3, #0
   da998:	6163      	str	r3, [r4, #20]
}
   da99a:	bd70      	pop	{r4, r5, r6, pc}

000da99c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   da99c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da99e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   da9a0:	f7ff fdde 	bl	da560 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   da9a4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   da9a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   da9aa:	9301      	str	r3, [sp, #4]
   da9ac:	f7fd ff76 	bl	d889c <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   da9b0:	4620      	mov	r0, r4
   da9b2:	f7ff ffc5 	bl	da940 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   da9b6:	a801      	add	r0, sp, #4
   da9b8:	f7ff fedb 	bl	da772 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   da9bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   da9be:	b108      	cbz	r0, da9c4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   da9c0:	f7fd ff64 	bl	d888c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   da9c4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   da9c8:	2618      	movs	r6, #24
   da9ca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   da9ce:	42ae      	cmp	r6, r5
   da9d0:	d004      	beq.n	da9dc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   da9d2:	4628      	mov	r0, r5
   da9d4:	f000 fe08 	bl	db5e8 <_ZN6StringD1Ev>
   da9d8:	3518      	adds	r5, #24
   da9da:	e7f8      	b.n	da9ce <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   da9dc:	6920      	ldr	r0, [r4, #16]
   da9de:	f7fe fb21 	bl	d9024 <free>
   da9e2:	6820      	ldr	r0, [r4, #0]
   da9e4:	f7fe fb1e 	bl	d9024 <free>
}
   da9e8:	4620      	mov	r0, r4
   da9ea:	b002      	add	sp, #8
   da9ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000da9f0 <__tcf_2>:
    static LogManager mgr;
   da9f0:	4801      	ldr	r0, [pc, #4]	; (da9f8 <__tcf_2+0x8>)
   da9f2:	f7ff bfd3 	b.w	da99c <_ZN5spark10LogManagerD1Ev>
   da9f6:	bf00      	nop
   da9f8:	2003e53c 	.word	0x2003e53c

000da9fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   da9fc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daa00:	4606      	mov	r6, r0
   daa02:	460c      	mov	r4, r1
   daa04:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   daa06:	d927      	bls.n	daa58 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   daa08:	4290      	cmp	r0, r2
   daa0a:	d226      	bcs.n	daa5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   daa0c:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   daa10:	1a6c      	subs	r4, r5, r1
   daa12:	f1a1 0714 	sub.w	r7, r1, #20
   daa16:	4404      	add	r4, r0
        capacity_(0) {
   daa18:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   daa1a:	42af      	cmp	r7, r5
   daa1c:	d03d      	beq.n	daa9a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   daa1e:	b1a4      	cbz	r4, daa4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   daa20:	682b      	ldr	r3, [r5, #0]
   daa22:	6023      	str	r3, [r4, #0]
   daa24:	88ab      	ldrh	r3, [r5, #4]
   daa26:	80a3      	strh	r3, [r4, #4]
   daa28:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   daa2c:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   daa2e:	e9c4 6602 	strd	r6, r6, [r4, #8]
   daa32:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   daa34:	68ab      	ldr	r3, [r5, #8]
   daa36:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   daa38:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daa3a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   daa3c:	68ea      	ldr	r2, [r5, #12]
   daa3e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   daa40:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daa42:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   daa44:	692a      	ldr	r2, [r5, #16]
   daa46:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   daa48:	612b      	str	r3, [r5, #16]
   daa4a:	f105 0008 	add.w	r0, r5, #8
   daa4e:	f7ff fe27 	bl	da6a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   daa52:	3d14      	subs	r5, #20
   daa54:	3c14      	subs	r4, #20
   daa56:	e7e0      	b.n	daa1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   daa58:	d01f      	beq.n	daa9a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   daa5a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   daa5c:	42ac      	cmp	r4, r5
   daa5e:	d01c      	beq.n	daa9a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   daa60:	b1a6      	cbz	r6, daa8c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   daa62:	6823      	ldr	r3, [r4, #0]
   daa64:	6033      	str	r3, [r6, #0]
   daa66:	88a3      	ldrh	r3, [r4, #4]
   daa68:	80b3      	strh	r3, [r6, #4]
   daa6a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   daa6e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   daa70:	e9c6 7702 	strd	r7, r7, [r6, #8]
   daa74:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   daa76:	68a3      	ldr	r3, [r4, #8]
   daa78:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   daa7a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daa7c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   daa7e:	68e2      	ldr	r2, [r4, #12]
   daa80:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   daa82:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daa84:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   daa86:	6922      	ldr	r2, [r4, #16]
   daa88:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   daa8a:	6123      	str	r3, [r4, #16]
   daa8c:	f104 0008 	add.w	r0, r4, #8
   daa90:	f7ff fe06 	bl	da6a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   daa94:	3414      	adds	r4, #20
   daa96:	3614      	adds	r6, #20
   daa98:	e7e0      	b.n	daa5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   daa9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000daa9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   daa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   daa9e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   daaa2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   daaa4:	4604      	mov	r4, r0
   daaa6:	460e      	mov	r6, r1
   daaa8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   daaaa:	db0d      	blt.n	daac8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   daaac:	3501      	adds	r5, #1
        if (n > 0) {
   daaae:	2d00      	cmp	r5, #0
   daab0:	6800      	ldr	r0, [r0, #0]
   daab2:	dd04      	ble.n	daabe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   daab4:	00a9      	lsls	r1, r5, #2
   daab6:	f7fe fabd 	bl	d9034 <realloc>
            if (!d) {
   daaba:	b918      	cbnz	r0, daac4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   daabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   daabe:	f7fe fab1 	bl	d9024 <free>
        T* d = nullptr;
   daac2:	2000      	movs	r0, #0
        data_ = d;
   daac4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   daac6:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   daac8:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   daaca:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   daacc:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   daad0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   daad2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   daad6:	1d08      	adds	r0, r1, #4
   daad8:	f002 fa76 	bl	dcfc8 <memmove>
    new(p) T(std::move(value));
   daadc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   daae0:	6863      	ldr	r3, [r4, #4]
   daae2:	3301      	adds	r3, #1
   daae4:	6063      	str	r3, [r4, #4]
    return true;
   daae6:	2001      	movs	r0, #1
   daae8:	e7e8      	b.n	daabc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000daaea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   daaea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   daaec:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   daaf0:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   daaf2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   daaf4:	9301      	str	r3, [sp, #4]
   daaf6:	460d      	mov	r5, r1
   daaf8:	f7fd fed0 	bl	d889c <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   daafc:	e9d4 3100 	ldrd	r3, r1, [r4]
   dab00:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   dab04:	4283      	cmp	r3, r0
   dab06:	461a      	mov	r2, r3
   dab08:	d00b      	beq.n	dab22 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   dab0a:	6812      	ldr	r2, [r2, #0]
   dab0c:	42aa      	cmp	r2, r5
   dab0e:	f103 0304 	add.w	r3, r3, #4
   dab12:	d1f7      	bne.n	dab04 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   dab14:	a801      	add	r0, sp, #4
   dab16:	f7ff fe2c 	bl	da772 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   dab1a:	2500      	movs	r5, #0
}
   dab1c:	4628      	mov	r0, r5
   dab1e:	b003      	add	sp, #12
   dab20:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   dab22:	462a      	mov	r2, r5
   dab24:	4620      	mov	r0, r4
   dab26:	f7ff ffb9 	bl	daa9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   dab2a:	4605      	mov	r5, r0
   dab2c:	2800      	cmp	r0, #0
   dab2e:	d0f1      	beq.n	dab14 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   dab30:	6863      	ldr	r3, [r4, #4]
   dab32:	2b01      	cmp	r3, #1
   dab34:	d101      	bne.n	dab3a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   dab36:	f7ff fd07 	bl	da548 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dab3a:	a801      	add	r0, sp, #4
   dab3c:	f7ff fe19 	bl	da772 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   dab40:	e7ec      	b.n	dab1c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000dab42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   dab42:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dab46:	4604      	mov	r4, r0
   dab48:	460d      	mov	r5, r1
   dab4a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   dab4c:	d914      	bls.n	dab78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   dab4e:	4290      	cmp	r0, r2
   dab50:	d213      	bcs.n	dab7a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   dab52:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   dab56:	1a75      	subs	r5, r6, r1
   dab58:	f1a1 0710 	sub.w	r7, r1, #16
   dab5c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   dab5e:	42b7      	cmp	r7, r6
   dab60:	d018      	beq.n	dab94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   dab62:	b11c      	cbz	r4, dab6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   dab64:	4631      	mov	r1, r6
   dab66:	4620      	mov	r0, r4
   dab68:	f000 fdba 	bl	db6e0 <_ZN6StringC1EOS_>
                end->~T();
   dab6c:	4630      	mov	r0, r6
   dab6e:	f000 fd3b 	bl	db5e8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   dab72:	3e10      	subs	r6, #16
   dab74:	3c10      	subs	r4, #16
   dab76:	e7f2      	b.n	dab5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   dab78:	d00c      	beq.n	dab94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   dab7a:	42b5      	cmp	r5, r6
   dab7c:	d00a      	beq.n	dab94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   dab7e:	b11c      	cbz	r4, dab88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   dab80:	4629      	mov	r1, r5
   dab82:	4620      	mov	r0, r4
   dab84:	f000 fdac 	bl	db6e0 <_ZN6StringC1EOS_>
                p->~T();
   dab88:	4628      	mov	r0, r5
   dab8a:	f000 fd2d 	bl	db5e8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   dab8e:	3510      	adds	r5, #16
   dab90:	3410      	adds	r4, #16
   dab92:	e7f2      	b.n	dab7a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   dab94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dab96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   dab96:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   dab98:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   dab9a:	4605      	mov	r5, r0
        if (n > 0) {
   dab9c:	dd11      	ble.n	dabc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   dab9e:	0130      	lsls	r0, r6, #4
   daba0:	f7fe fa38 	bl	d9014 <malloc>
            if (!d) {
   daba4:	4604      	mov	r4, r0
   daba6:	b158      	cbz	r0, dabc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   daba8:	e9d5 1200 	ldrd	r1, r2, [r5]
   dabac:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   dabb0:	f7ff ffc7 	bl	dab42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   dabb4:	6828      	ldr	r0, [r5, #0]
   dabb6:	f7fe fa35 	bl	d9024 <free>
        data_ = d;
   dabba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   dabbc:	60ae      	str	r6, [r5, #8]
        return true;
   dabbe:	2001      	movs	r0, #1
    }
   dabc0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   dabc2:	2400      	movs	r4, #0
   dabc4:	e7f6      	b.n	dabb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000dabc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dabc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dabca:	4691      	mov	r9, r2
   dabcc:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   dabce:	2300      	movs	r3, #0
   dabd0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   dabd2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   dabd6:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dabd8:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   dabda:	4299      	cmp	r1, r3
        capacity_(0) {
   dabdc:	e9c0 3300 	strd	r3, r3, [r0]
   dabe0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   dabe4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   dabe8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   dabec:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   dabee:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   dabf0:	dc23      	bgt.n	dac3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   dabf2:	e9d9 5700 	ldrd	r5, r7, [r9]
   dabf6:	2314      	movs	r3, #20
   dabf8:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   dabfc:	42af      	cmp	r7, r5
   dabfe:	d03b      	beq.n	dac78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   dac00:	4629      	mov	r1, r5
   dac02:	a80d      	add	r0, sp, #52	; 0x34
   dac04:	f000 fd6c 	bl	db6e0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   dac08:	a90d      	add	r1, sp, #52	; 0x34
   dac0a:	a811      	add	r0, sp, #68	; 0x44
   dac0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   dac0e:	f000 fd67 	bl	db6e0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dac12:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   dac16:	4299      	cmp	r1, r3
   dac18:	da1b      	bge.n	dac52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   dac1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   dac1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   dac1e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   dac22:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   dac26:	4631      	mov	r1, r6
   dac28:	f106 0010 	add.w	r0, r6, #16
   dac2c:	f7ff ff89 	bl	dab42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   dac30:	b9ee      	cbnz	r6, dac6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   dac32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dac34:	3301      	adds	r3, #1
   dac36:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   dac38:	e011      	b.n	dac5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   dac3a:	a80a      	add	r0, sp, #40	; 0x28
   dac3c:	f7ff ffab 	bl	dab96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dac40:	2800      	cmp	r0, #0
   dac42:	d1d6      	bne.n	dabf2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   dac44:	a80a      	add	r0, sp, #40	; 0x28
   dac46:	f7ff fd3f 	bl	da6c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   dac4a:	4620      	mov	r0, r4
   dac4c:	b017      	add	sp, #92	; 0x5c
   dac4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dac52:	3101      	adds	r1, #1
   dac54:	a80a      	add	r0, sp, #40	; 0x28
   dac56:	f7ff ff9e 	bl	dab96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   dac5a:	2800      	cmp	r0, #0
   dac5c:	d1dd      	bne.n	dac1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   dac5e:	a811      	add	r0, sp, #68	; 0x44
   dac60:	f000 fcc2 	bl	db5e8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   dac64:	a80d      	add	r0, sp, #52	; 0x34
   dac66:	f000 fcbf 	bl	db5e8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   dac6a:	3514      	adds	r5, #20
   dac6c:	e7c6      	b.n	dabfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   dac6e:	a911      	add	r1, sp, #68	; 0x44
   dac70:	4630      	mov	r0, r6
   dac72:	f000 fd35 	bl	db6e0 <_ZN6StringC1EOS_>
   dac76:	e7dc      	b.n	dac32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   dac78:	2600      	movs	r6, #0
   dac7a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   dac7e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   dac80:	4637      	mov	r7, r6
   dac82:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   dac86:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dac8a:	429e      	cmp	r6, r3
   dac8c:	f280 8097 	bge.w	dadbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   dac90:	0133      	lsls	r3, r6, #4
   dac92:	58d3      	ldr	r3, [r2, r3]
   dac94:	9308      	str	r3, [sp, #32]
        if (!category) {
   dac96:	b90b      	cbnz	r3, dac9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   dac98:	3601      	adds	r6, #1
   dac9a:	e7f4      	b.n	dac86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   dac9c:	fb0a f306 	mul.w	r3, sl, r6
   daca0:	9709      	str	r7, [sp, #36]	; 0x24
   daca2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   daca4:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   daca6:	a909      	add	r1, sp, #36	; 0x24
   daca8:	a808      	add	r0, sp, #32
   dacaa:	f7ff fb00 	bl	da2ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   dacae:	4683      	mov	fp, r0
   dacb0:	2800      	cmp	r0, #0
   dacb2:	d0f1      	beq.n	dac98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   dacb4:	4601      	mov	r1, r0
   dacb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   dacb8:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dacbc:	f10d 031f 	add.w	r3, sp, #31
   dacc0:	4628      	mov	r0, r5
   dacc2:	f7ff fb73 	bl	da3ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dacc6:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   dacca:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   daccc:	f1b8 0f00 	cmp.w	r8, #0
   dacd0:	d166      	bne.n	dada0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   dacd2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   dacd6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   dacda:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   dacde:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dace2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   dace6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   dacea:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   dacee:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   dacf2:	4293      	cmp	r3, r2
   dacf4:	db1a      	blt.n	dad2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   dacf6:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   dacfa:	f1bb 0f00 	cmp.w	fp, #0
   dacfe:	dd4a      	ble.n	dad96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   dad00:	fb0a f00b 	mul.w	r0, sl, fp
   dad04:	f7fe f986 	bl	d9014 <malloc>
            if (!d) {
   dad08:	9004      	str	r0, [sp, #16]
   dad0a:	2800      	cmp	r0, #0
   dad0c:	d045      	beq.n	dad9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   dad0e:	e9d5 1200 	ldrd	r1, r2, [r5]
   dad12:	fb0a 1202 	mla	r2, sl, r2, r1
   dad16:	f7ff fe71 	bl	da9fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   dad1a:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   dad1c:	6828      	ldr	r0, [r5, #0]
   dad1e:	9304      	str	r3, [sp, #16]
   dad20:	f7fe f980 	bl	d9024 <free>
        data_ = d;
   dad24:	9b04      	ldr	r3, [sp, #16]
   dad26:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   dad28:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   dad2c:	9b01      	ldr	r3, [sp, #4]
   dad2e:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   dad32:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   dad34:	fb0a f303 	mul.w	r3, sl, r3
   dad38:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   dad3c:	f101 0014 	add.w	r0, r1, #20
   dad40:	fb0a b202 	mla	r2, sl, r2, fp
   dad44:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   dad46:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   dad48:	f7ff fe58 	bl	da9fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   dad4c:	9904      	ldr	r1, [sp, #16]
   dad4e:	b1a9      	cbz	r1, dad7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   dad50:	9b05      	ldr	r3, [sp, #20]
   dad52:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dad54:	f84b 2003 	str.w	r2, [fp, r3]
   dad58:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   dad5c:	808b      	strh	r3, [r1, #4]
   dad5e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   dad62:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   dad64:	e9c1 7702 	strd	r7, r7, [r1, #8]
   dad68:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   dad6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dad6c:	608b      	str	r3, [r1, #8]
   dad6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   dad70:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   dad72:	60cb      	str	r3, [r1, #12]
   dad74:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   dad76:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   dad78:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   dad7a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   dad7c:	686b      	ldr	r3, [r5, #4]
   dad7e:	3301      	adds	r3, #1
   dad80:	606b      	str	r3, [r5, #4]
   dad82:	a813      	add	r0, sp, #76	; 0x4c
   dad84:	f7ff fc8c 	bl	da6a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dad88:	f1b8 0f00 	cmp.w	r8, #0
   dad8c:	d008      	beq.n	dada0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   dad8e:	a80d      	add	r0, sp, #52	; 0x34
   dad90:	f7ff fc86 	bl	da6a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   dad94:	e756      	b.n	dac44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   dad96:	4643      	mov	r3, r8
   dad98:	e7c0      	b.n	dad1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   dad9a:	f04f 0801 	mov.w	r8, #1
   dad9e:	e7f0      	b.n	dad82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   dada0:	9b01      	ldr	r3, [sp, #4]
   dada2:	682d      	ldr	r5, [r5, #0]
   dada4:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   dada8:	9b08      	ldr	r3, [sp, #32]
   dadaa:	781b      	ldrb	r3, [r3, #0]
   dadac:	b92b      	cbnz	r3, dadba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   dadae:	f8d9 3000 	ldr.w	r3, [r9]
   dadb2:	9a02      	ldr	r2, [sp, #8]
   dadb4:	4413      	add	r3, r2
   dadb6:	7c1b      	ldrb	r3, [r3, #16]
   dadb8:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   dadba:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   dadbc:	e773      	b.n	daca6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadbe:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dadc0:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadc2:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   dadc4:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadc6:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dadc8:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   dadca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   dadcc:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadce:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dadd0:	60a2      	str	r2, [r4, #8]
   dadd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   dadd4:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadd6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   dadd8:	60e2      	str	r2, [r4, #12]
   dadda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   daddc:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadde:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   dade0:	6122      	str	r2, [r4, #16]
   dade2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   dade4:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   dade6:	9b03      	ldr	r3, [sp, #12]
   dade8:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   dadea:	6162      	str	r2, [r4, #20]
   dadec:	7623      	strb	r3, [r4, #24]
   dadee:	e7ce      	b.n	dad8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000dadf0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dadf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   dadf2:	4605      	mov	r5, r0
   dadf4:	4b09      	ldr	r3, [pc, #36]	; (dae1c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   dadf6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   dadfa:	4604      	mov	r4, r0
   dadfc:	460e      	mov	r6, r1
        filter_(level, filters) {
   dadfe:	a801      	add	r0, sp, #4
   dae00:	4611      	mov	r1, r2
   dae02:	f7fa fcd9 	bl	d57b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dae06:	aa01      	add	r2, sp, #4
   dae08:	4631      	mov	r1, r6
   dae0a:	4628      	mov	r0, r5
   dae0c:	f7ff fedb 	bl	dabc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dae10:	a801      	add	r0, sp, #4
   dae12:	f7fa f9f3 	bl	d51fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   dae16:	4620      	mov	r0, r4
   dae18:	b004      	add	sp, #16
   dae1a:	bd70      	pop	{r4, r5, r6, pc}
   dae1c:	000df8ac 	.word	0x000df8ac

000dae20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   dae20:	b5f0      	push	{r4, r5, r6, r7, lr}
   dae22:	460f      	mov	r7, r1
   dae24:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dae26:	4926      	ldr	r1, [pc, #152]	; (daec0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   dae28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dae2a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   dae2c:	4616      	mov	r6, r2
   dae2e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dae30:	f002 f927 	bl	dd082 <strcmp>
   dae34:	bb00      	cbnz	r0, dae78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   dae36:	b1e4      	cbz	r4, dae72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   dae38:	4629      	mov	r1, r5
   dae3a:	4668      	mov	r0, sp
   dae3c:	f7ff fc8a 	bl	da754 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dae40:	4920      	ldr	r1, [pc, #128]	; (daec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dae42:	2024      	movs	r0, #36	; 0x24
   dae44:	f001 fb0c 	bl	dc460 <_ZnwjRKSt9nothrow_t>
   dae48:	4605      	mov	r5, r0
   dae4a:	b170      	cbz	r0, dae6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dae4c:	4669      	mov	r1, sp
   dae4e:	a803      	add	r0, sp, #12
   dae50:	f7fa fcb2 	bl	d57b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dae54:	aa03      	add	r2, sp, #12
   dae56:	4631      	mov	r1, r6
   dae58:	4628      	mov	r0, r5
   dae5a:	f7ff ffc9 	bl	dadf0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dae5e:	a803      	add	r0, sp, #12
   dae60:	f7fa f9cc 	bl	d51fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   dae64:	4b18      	ldr	r3, [pc, #96]	; (daec8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   dae66:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   dae68:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dae6a:	4668      	mov	r0, sp
   dae6c:	f7fa f9c6 	bl	d51fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dae70:	462c      	mov	r4, r5
}
   dae72:	4620      	mov	r0, r4
   dae74:	b007      	add	sp, #28
   dae76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   dae78:	4914      	ldr	r1, [pc, #80]	; (daecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   dae7a:	4638      	mov	r0, r7
   dae7c:	f002 f901 	bl	dd082 <strcmp>
   dae80:	b9e0      	cbnz	r0, daebc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   dae82:	2c00      	cmp	r4, #0
   dae84:	d0f5      	beq.n	dae72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dae86:	4629      	mov	r1, r5
   dae88:	4668      	mov	r0, sp
   dae8a:	f7ff fc63 	bl	da754 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dae8e:	490d      	ldr	r1, [pc, #52]	; (daec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dae90:	2024      	movs	r0, #36	; 0x24
   dae92:	f001 fae5 	bl	dc460 <_ZnwjRKSt9nothrow_t>
   dae96:	4605      	mov	r5, r0
   dae98:	2800      	cmp	r0, #0
   dae9a:	d0e6      	beq.n	dae6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dae9c:	4669      	mov	r1, sp
   dae9e:	a803      	add	r0, sp, #12
   daea0:	f7fa fc8a 	bl	d57b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   daea4:	aa03      	add	r2, sp, #12
   daea6:	4631      	mov	r1, r6
   daea8:	4628      	mov	r0, r5
   daeaa:	f7ff ffa1 	bl	dadf0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   daeae:	a803      	add	r0, sp, #12
   daeb0:	f7fa f9a4 	bl	d51fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   daeb4:	4b06      	ldr	r3, [pc, #24]	; (daed0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   daeb6:	602b      	str	r3, [r5, #0]
   daeb8:	622c      	str	r4, [r5, #32]
}
   daeba:	e7d6      	b.n	dae6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   daebc:	2400      	movs	r4, #0
   daebe:	e7d8      	b.n	dae72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   daec0:	000e00f2 	.word	0x000e00f2
   daec4:	000e02b8 	.word	0x000e02b8
   daec8:	000e0184 	.word	0x000e0184
   daecc:	000e00f6 	.word	0x000e00f6
   daed0:	000e016c 	.word	0x000e016c

000daed4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   daed4:	4b01      	ldr	r3, [pc, #4]	; (daedc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   daed6:	4a02      	ldr	r2, [pc, #8]	; (daee0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   daed8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   daeda:	4770      	bx	lr
   daedc:	2003e538 	.word	0x2003e538
   daee0:	000e0107 	.word	0x000e0107

000daee4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   daee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daee8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   daeea:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   daeee:	4604      	mov	r4, r0
   daef0:	460e      	mov	r6, r1
   daef2:	4617      	mov	r7, r2
   daef4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   daef6:	f001 f8cb 	bl	dc090 <_Z16_fetch_usbserialv>
   daefa:	4581      	cmp	r9, r0
   daefc:	d04c      	beq.n	daf98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   daefe:	792b      	ldrb	r3, [r5, #4]
   daf00:	0719      	lsls	r1, r3, #28
   daf02:	d504      	bpl.n	daf0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   daf04:	696a      	ldr	r2, [r5, #20]
   daf06:	4954      	ldr	r1, [pc, #336]	; (db058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   daf08:	4620      	mov	r0, r4
   daf0a:	f7ff fa40 	bl	da38e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   daf0e:	f1b8 0f00 	cmp.w	r8, #0
   daf12:	d00d      	beq.n	daf30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   daf14:	215b      	movs	r1, #91	; 0x5b
   daf16:	4620      	mov	r0, r4
   daf18:	f7ff fa2d 	bl	da376 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   daf1c:	4641      	mov	r1, r8
   daf1e:	4620      	mov	r0, r4
   daf20:	f7ff fa1a 	bl	da358 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   daf24:	6823      	ldr	r3, [r4, #0]
   daf26:	494d      	ldr	r1, [pc, #308]	; (db05c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   daf28:	68db      	ldr	r3, [r3, #12]
   daf2a:	2202      	movs	r2, #2
   daf2c:	4620      	mov	r0, r4
   daf2e:	4798      	blx	r3
    if (attr.has_file) {
   daf30:	792b      	ldrb	r3, [r5, #4]
   daf32:	07da      	lsls	r2, r3, #31
   daf34:	d523      	bpl.n	daf7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   daf36:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   daf3a:	212f      	movs	r1, #47	; 0x2f
   daf3c:	4640      	mov	r0, r8
   daf3e:	f002 f8fd 	bl	dd13c <strrchr>
    if (s1) {
   daf42:	b108      	cbz	r0, daf48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   daf44:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   daf48:	4641      	mov	r1, r8
   daf4a:	4620      	mov	r0, r4
   daf4c:	f7ff fa04 	bl	da358 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   daf50:	792b      	ldrb	r3, [r5, #4]
   daf52:	079b      	lsls	r3, r3, #30
   daf54:	d508      	bpl.n	daf68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   daf56:	213a      	movs	r1, #58	; 0x3a
   daf58:	4620      	mov	r0, r4
   daf5a:	f7ff fa0c 	bl	da376 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   daf5e:	68ea      	ldr	r2, [r5, #12]
   daf60:	493f      	ldr	r1, [pc, #252]	; (db060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   daf62:	4620      	mov	r0, r4
   daf64:	f7ff fa13 	bl	da38e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   daf68:	792a      	ldrb	r2, [r5, #4]
   daf6a:	6823      	ldr	r3, [r4, #0]
   daf6c:	f012 0f04 	tst.w	r2, #4
   daf70:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   daf72:	bf14      	ite	ne
   daf74:	493b      	ldrne	r1, [pc, #236]	; (db064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   daf76:	493c      	ldreq	r1, [pc, #240]	; (db068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   daf78:	2202      	movs	r2, #2
            write(": ", 2);
   daf7a:	4620      	mov	r0, r4
   daf7c:	4798      	blx	r3
    if (attr.has_function) {
   daf7e:	792b      	ldrb	r3, [r5, #4]
   daf80:	0758      	lsls	r0, r3, #29
   daf82:	d51d      	bpl.n	dafc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   daf84:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   daf86:	460b      	mov	r3, r1
   daf88:	461a      	mov	r2, r3
    for (; *s; ++s) {
   daf8a:	f813 0b01 	ldrb.w	r0, [r3], #1
   daf8e:	b160      	cbz	r0, dafaa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   daf90:	2820      	cmp	r0, #32
   daf92:	d108      	bne.n	dafa6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   daf94:	4619      	mov	r1, r3
   daf96:	e7f7      	b.n	daf88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   daf98:	4834      	ldr	r0, [pc, #208]	; (db06c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   daf9a:	f000 f966 	bl	db26a <_ZN5spark12NetworkClass9listeningEv>
   daf9e:	2800      	cmp	r0, #0
   dafa0:	d0ad      	beq.n	daefe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   dafa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   dafa6:	2828      	cmp	r0, #40	; 0x28
   dafa8:	d1ee      	bne.n	daf88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   dafaa:	6823      	ldr	r3, [r4, #0]
   dafac:	1a52      	subs	r2, r2, r1
   dafae:	68db      	ldr	r3, [r3, #12]
   dafb0:	4620      	mov	r0, r4
   dafb2:	4798      	blx	r3
        write("(): ", 4);
   dafb4:	6823      	ldr	r3, [r4, #0]
   dafb6:	492e      	ldr	r1, [pc, #184]	; (db070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   dafb8:	68db      	ldr	r3, [r3, #12]
   dafba:	2204      	movs	r2, #4
   dafbc:	4620      	mov	r0, r4
   dafbe:	4798      	blx	r3
    return log_level_name(level, nullptr);
   dafc0:	2100      	movs	r1, #0
   dafc2:	4638      	mov	r0, r7
   dafc4:	f7fd feba 	bl	d8d3c <log_level_name>
   dafc8:	4601      	mov	r1, r0
    write(s);
   dafca:	4620      	mov	r0, r4
   dafcc:	f7ff f9c4 	bl	da358 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   dafd0:	6823      	ldr	r3, [r4, #0]
   dafd2:	4925      	ldr	r1, [pc, #148]	; (db068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   dafd4:	68db      	ldr	r3, [r3, #12]
   dafd6:	2202      	movs	r2, #2
   dafd8:	4620      	mov	r0, r4
   dafda:	4798      	blx	r3
    if (msg) {
   dafdc:	b11e      	cbz	r6, dafe6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   dafde:	4631      	mov	r1, r6
   dafe0:	4620      	mov	r0, r4
   dafe2:	f7ff f9b9 	bl	da358 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   dafe6:	792b      	ldrb	r3, [r5, #4]
   dafe8:	f013 0f30 	tst.w	r3, #48	; 0x30
   dafec:	d02c      	beq.n	db048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   dafee:	6823      	ldr	r3, [r4, #0]
   daff0:	4920      	ldr	r1, [pc, #128]	; (db074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   daff2:	68db      	ldr	r3, [r3, #12]
   daff4:	2202      	movs	r2, #2
   daff6:	4620      	mov	r0, r4
   daff8:	4798      	blx	r3
        if (attr.has_code) {
   daffa:	792b      	ldrb	r3, [r5, #4]
   daffc:	06d9      	lsls	r1, r3, #27
   daffe:	d50a      	bpl.n	db016 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   db000:	6823      	ldr	r3, [r4, #0]
   db002:	491d      	ldr	r1, [pc, #116]	; (db078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   db004:	68db      	ldr	r3, [r3, #12]
   db006:	2207      	movs	r2, #7
   db008:	4620      	mov	r0, r4
   db00a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   db00c:	69aa      	ldr	r2, [r5, #24]
   db00e:	491b      	ldr	r1, [pc, #108]	; (db07c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   db010:	4620      	mov	r0, r4
   db012:	f7ff f9bc 	bl	da38e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   db016:	792b      	ldrb	r3, [r5, #4]
   db018:	069a      	lsls	r2, r3, #26
   db01a:	d511      	bpl.n	db040 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   db01c:	06db      	lsls	r3, r3, #27
   db01e:	d505      	bpl.n	db02c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   db020:	6823      	ldr	r3, [r4, #0]
   db022:	4910      	ldr	r1, [pc, #64]	; (db064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   db024:	68db      	ldr	r3, [r3, #12]
   db026:	2202      	movs	r2, #2
   db028:	4620      	mov	r0, r4
   db02a:	4798      	blx	r3
            write("details = ", 10);
   db02c:	6823      	ldr	r3, [r4, #0]
   db02e:	4914      	ldr	r1, [pc, #80]	; (db080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   db030:	68db      	ldr	r3, [r3, #12]
   db032:	4620      	mov	r0, r4
   db034:	220a      	movs	r2, #10
   db036:	4798      	blx	r3
            write(attr.details);
   db038:	69e9      	ldr	r1, [r5, #28]
   db03a:	4620      	mov	r0, r4
   db03c:	f7ff f98c 	bl	da358 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   db040:	215d      	movs	r1, #93	; 0x5d
   db042:	4620      	mov	r0, r4
   db044:	f7ff f997 	bl	da376 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   db048:	6823      	ldr	r3, [r4, #0]
   db04a:	490e      	ldr	r1, [pc, #56]	; (db084 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   db04c:	68db      	ldr	r3, [r3, #12]
   db04e:	4620      	mov	r0, r4
   db050:	2202      	movs	r2, #2
}
   db052:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   db056:	4718      	bx	r3
   db058:	000e010b 	.word	0x000e010b
   db05c:	000e0112 	.word	0x000e0112
   db060:	000df9d8 	.word	0x000df9d8
   db064:	000e0115 	.word	0x000e0115
   db068:	000e011a 	.word	0x000e011a
   db06c:	2003e564 	.word	0x2003e564
   db070:	000e0118 	.word	0x000e0118
   db074:	000e011d 	.word	0x000e011d
   db078:	000e0120 	.word	0x000e0120
   db07c:	000df3a3 	.word	0x000df3a3
   db080:	000e0128 	.word	0x000e0128
   db084:	000e0133 	.word	0x000e0133

000db088 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   db088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db08c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   db08e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   db092:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   db094:	4605      	mov	r5, r0
   db096:	460f      	mov	r7, r1
   db098:	4690      	mov	r8, r2
   db09a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   db09c:	f000 fff8 	bl	dc090 <_Z16_fetch_usbserialv>
   db0a0:	4581      	cmp	r9, r0
   db0a2:	d105      	bne.n	db0b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   db0a4:	4849      	ldr	r0, [pc, #292]	; (db1cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   db0a6:	f000 f8e0 	bl	db26a <_ZN5spark12NetworkClass9listeningEv>
   db0aa:	2800      	cmp	r0, #0
   db0ac:	f040 808a 	bne.w	db1c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   db0b0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   db0b2:	4a47      	ldr	r2, [pc, #284]	; (db1d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   db0b4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   db0b6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   db0ba:	a801      	add	r0, sp, #4
        strm_(stream) {
   db0bc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   db0be:	f88d 9008 	strb.w	r9, [sp, #8]
   db0c2:	f7ff f83c 	bl	da13e <_ZN5spark10JSONWriter11beginObjectEv>
   db0c6:	4649      	mov	r1, r9
   db0c8:	4640      	mov	r0, r8
   db0ca:	f7fd fe37 	bl	d8d3c <log_level_name>
    json.name("l", 1).value(s);
   db0ce:	4941      	ldr	r1, [pc, #260]	; (db1d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   db0d0:	4680      	mov	r8, r0
   db0d2:	2201      	movs	r2, #1
   db0d4:	a801      	add	r0, sp, #4
   db0d6:	f7ff f8bb 	bl	da250 <_ZN5spark10JSONWriter4nameEPKcj>
   db0da:	4641      	mov	r1, r8
   db0dc:	f7ff f92e 	bl	da33c <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   db0e0:	b13f      	cbz	r7, db0f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   db0e2:	493d      	ldr	r1, [pc, #244]	; (db1d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   db0e4:	2201      	movs	r2, #1
   db0e6:	a801      	add	r0, sp, #4
   db0e8:	f7ff f8b2 	bl	da250 <_ZN5spark10JSONWriter4nameEPKcj>
   db0ec:	4639      	mov	r1, r7
   db0ee:	f7ff f925 	bl	da33c <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   db0f2:	b13e      	cbz	r6, db104 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   db0f4:	4939      	ldr	r1, [pc, #228]	; (db1dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   db0f6:	2201      	movs	r2, #1
   db0f8:	a801      	add	r0, sp, #4
   db0fa:	f7ff f8a9 	bl	da250 <_ZN5spark10JSONWriter4nameEPKcj>
   db0fe:	4631      	mov	r1, r6
   db100:	f7ff f91c 	bl	da33c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   db104:	7923      	ldrb	r3, [r4, #4]
   db106:	07df      	lsls	r7, r3, #31
   db108:	d50e      	bpl.n	db128 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   db10a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   db10c:	212f      	movs	r1, #47	; 0x2f
   db10e:	4630      	mov	r0, r6
   db110:	f002 f814 	bl	dd13c <strrchr>
    if (s1) {
   db114:	b100      	cbz	r0, db118 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   db116:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   db118:	4931      	ldr	r1, [pc, #196]	; (db1e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   db11a:	2201      	movs	r2, #1
   db11c:	a801      	add	r0, sp, #4
   db11e:	f7ff f897 	bl	da250 <_ZN5spark10JSONWriter4nameEPKcj>
   db122:	4631      	mov	r1, r6
   db124:	f7ff f90a 	bl	da33c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   db128:	7923      	ldrb	r3, [r4, #4]
   db12a:	079e      	lsls	r6, r3, #30
   db12c:	d507      	bpl.n	db13e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   db12e:	492d      	ldr	r1, [pc, #180]	; (db1e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   db130:	2202      	movs	r2, #2
   db132:	a801      	add	r0, sp, #4
   db134:	f7ff f88c 	bl	da250 <_ZN5spark10JSONWriter4nameEPKcj>
   db138:	68e1      	ldr	r1, [r4, #12]
   db13a:	f7ff f80d 	bl	da158 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   db13e:	7923      	ldrb	r3, [r4, #4]
   db140:	0758      	lsls	r0, r3, #29
   db142:	d514      	bpl.n	db16e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   db144:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   db146:	4633      	mov	r3, r6
   db148:	461f      	mov	r7, r3
    for (; *s; ++s) {
   db14a:	f813 2b01 	ldrb.w	r2, [r3], #1
   db14e:	b12a      	cbz	r2, db15c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   db150:	2a20      	cmp	r2, #32
   db152:	d101      	bne.n	db158 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   db154:	461e      	mov	r6, r3
   db156:	e7f7      	b.n	db148 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   db158:	2a28      	cmp	r2, #40	; 0x28
   db15a:	d1f5      	bne.n	db148 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   db15c:	4922      	ldr	r1, [pc, #136]	; (db1e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   db15e:	2202      	movs	r2, #2
   db160:	a801      	add	r0, sp, #4
   db162:	f7ff f875 	bl	da250 <_ZN5spark10JSONWriter4nameEPKcj>
   db166:	1bba      	subs	r2, r7, r6
   db168:	4631      	mov	r1, r6
   db16a:	f7ff f881 	bl	da270 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   db16e:	7923      	ldrb	r3, [r4, #4]
   db170:	0719      	lsls	r1, r3, #28
   db172:	d507      	bpl.n	db184 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   db174:	491d      	ldr	r1, [pc, #116]	; (db1ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   db176:	2201      	movs	r2, #1
   db178:	a801      	add	r0, sp, #4
   db17a:	f7ff f869 	bl	da250 <_ZN5spark10JSONWriter4nameEPKcj>
   db17e:	6961      	ldr	r1, [r4, #20]
   db180:	f7fe fffc 	bl	da17c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   db184:	7923      	ldrb	r3, [r4, #4]
   db186:	06da      	lsls	r2, r3, #27
   db188:	d508      	bpl.n	db19c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   db18a:	2204      	movs	r2, #4
   db18c:	4918      	ldr	r1, [pc, #96]	; (db1f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   db18e:	eb0d 0002 	add.w	r0, sp, r2
   db192:	f7ff f85d 	bl	da250 <_ZN5spark10JSONWriter4nameEPKcj>
   db196:	69a1      	ldr	r1, [r4, #24]
   db198:	f7fe ffde 	bl	da158 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   db19c:	7923      	ldrb	r3, [r4, #4]
   db19e:	069b      	lsls	r3, r3, #26
   db1a0:	d507      	bpl.n	db1b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   db1a2:	4914      	ldr	r1, [pc, #80]	; (db1f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   db1a4:	2206      	movs	r2, #6
   db1a6:	a801      	add	r0, sp, #4
   db1a8:	f7ff f852 	bl	da250 <_ZN5spark10JSONWriter4nameEPKcj>
   db1ac:	69e1      	ldr	r1, [r4, #28]
   db1ae:	f7ff f8c5 	bl	da33c <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   db1b2:	a801      	add	r0, sp, #4
   db1b4:	f7fe ffad 	bl	da112 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   db1b8:	6a28      	ldr	r0, [r5, #32]
   db1ba:	490f      	ldr	r1, [pc, #60]	; (db1f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   db1bc:	6803      	ldr	r3, [r0, #0]
   db1be:	2202      	movs	r2, #2
   db1c0:	68db      	ldr	r3, [r3, #12]
   db1c2:	4798      	blx	r3
}
   db1c4:	b005      	add	sp, #20
   db1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db1ca:	bf00      	nop
   db1cc:	2003e564 	.word	0x2003e564
   db1d0:	000e0154 	.word	0x000e0154
   db1d4:	000e00e8 	.word	0x000e00e8
   db1d8:	000dfd11 	.word	0x000dfd11
   db1dc:	000e0136 	.word	0x000e0136
   db1e0:	000df93f 	.word	0x000df93f
   db1e4:	000e0138 	.word	0x000e0138
   db1e8:	000e013b 	.word	0x000e013b
   db1ec:	000df555 	.word	0x000df555
   db1f0:	000e013e 	.word	0x000e013e
   db1f4:	000e0143 	.word	0x000e0143
   db1f8:	000e0133 	.word	0x000e0133

000db1fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   db1fc:	2300      	movs	r3, #0
   db1fe:	6840      	ldr	r0, [r0, #4]
   db200:	461a      	mov	r2, r3
   db202:	f7fd bea7 	b.w	d8f54 <network_connect>

000db206 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   db206:	6840      	ldr	r0, [r0, #4]
   db208:	2200      	movs	r2, #0
   db20a:	2102      	movs	r1, #2
   db20c:	f7fd beb2 	b.w	d8f74 <network_disconnect>

000db210 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   db210:	2200      	movs	r2, #0
   db212:	6840      	ldr	r0, [r0, #4]
   db214:	4611      	mov	r1, r2
   db216:	f7fd bea5 	b.w	d8f64 <network_connecting>

000db21a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   db21a:	2200      	movs	r2, #0
   db21c:	6840      	ldr	r0, [r0, #4]
   db21e:	4611      	mov	r1, r2
   db220:	f7fd beb0 	b.w	d8f84 <network_ready>

000db224 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   db224:	2300      	movs	r3, #0
   db226:	6840      	ldr	r0, [r0, #4]
   db228:	461a      	mov	r2, r3
   db22a:	4619      	mov	r1, r3
   db22c:	f7fd beb2 	b.w	d8f94 <network_on>

000db230 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   db230:	2300      	movs	r3, #0
   db232:	6840      	ldr	r0, [r0, #4]
   db234:	461a      	mov	r2, r3
   db236:	4619      	mov	r1, r3
   db238:	f7fd beb4 	b.w	d8fa4 <network_off>

000db23c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   db23c:	6840      	ldr	r0, [r0, #4]
   db23e:	2100      	movs	r1, #0
   db240:	f7fd bed8 	b.w	d8ff4 <network_is_on>

000db244 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   db244:	6840      	ldr	r0, [r0, #4]
   db246:	2100      	movs	r1, #0
   db248:	f7fd bedc 	b.w	d9004 <network_is_off>

000db24c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   db24c:	6840      	ldr	r0, [r0, #4]
   db24e:	2200      	movs	r2, #0
   db250:	f081 0101 	eor.w	r1, r1, #1
   db254:	f7fd beae 	b.w	d8fb4 <network_listen>

000db258 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   db258:	6840      	ldr	r0, [r0, #4]
   db25a:	2200      	movs	r2, #0
   db25c:	f7fd beba 	b.w	d8fd4 <network_set_listen_timeout>

000db260 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   db260:	2200      	movs	r2, #0
   db262:	6840      	ldr	r0, [r0, #4]
   db264:	4611      	mov	r1, r2
   db266:	f7fd bebd 	b.w	d8fe4 <network_get_listen_timeout>

000db26a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   db26a:	2200      	movs	r2, #0
   db26c:	6840      	ldr	r0, [r0, #4]
   db26e:	4611      	mov	r1, r2
   db270:	f7fd bea8 	b.w	d8fc4 <network_listening>

000db274 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   db274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db278:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   db27a:	b095      	sub	sp, #84	; 0x54
   db27c:	4616      	mov	r6, r2
   db27e:	460d      	mov	r5, r1
   db280:	4607      	mov	r7, r0
    IPAddress addr;
   db282:	f7fe fde7 	bl	d9e54 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   db286:	4621      	mov	r1, r4
   db288:	2218      	movs	r2, #24
   db28a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   db28c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   db28e:	f001 feb5 	bl	dcffc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   db292:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   db294:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   db298:	4621      	mov	r1, r4
   db29a:	466b      	mov	r3, sp
   db29c:	aa0c      	add	r2, sp, #48	; 0x30
   db29e:	4630      	mov	r0, r6
   db2a0:	f7fd fc2c 	bl	d8afc <netdb_getaddrinfo>
    if (!r) {
   db2a4:	4604      	mov	r4, r0
   db2a6:	2800      	cmp	r0, #0
   db2a8:	d146      	bne.n	db338 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db2aa:	4602      	mov	r2, r0
   db2ac:	2101      	movs	r1, #1
   db2ae:	6868      	ldr	r0, [r5, #4]
   db2b0:	f7fd fe68 	bl	d8f84 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db2b4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db2b6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db2b8:	4622      	mov	r2, r4
   db2ba:	6868      	ldr	r0, [r5, #4]
   db2bc:	f7fd fe62 	bl	d8f84 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db2c0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db2c2:	4681      	mov	r9, r0
        bool ok = false;
   db2c4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db2c6:	2e00      	cmp	r6, #0
   db2c8:	d036      	beq.n	db338 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   db2ca:	2900      	cmp	r1, #0
   db2cc:	d134      	bne.n	db338 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   db2ce:	6873      	ldr	r3, [r6, #4]
   db2d0:	2b02      	cmp	r3, #2
   db2d2:	d003      	beq.n	db2dc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   db2d4:	2b0a      	cmp	r3, #10
   db2d6:	d00b      	beq.n	db2f0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db2d8:	69f6      	ldr	r6, [r6, #28]
   db2da:	e7f4      	b.n	db2c6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   db2dc:	f1b8 0f00 	cmp.w	r8, #0
   db2e0:	d004      	beq.n	db2ec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   db2e2:	6971      	ldr	r1, [r6, #20]
   db2e4:	4638      	mov	r0, r7
   db2e6:	3104      	adds	r1, #4
   db2e8:	f7fe fde1 	bl	d9eae <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   db2ec:	4641      	mov	r1, r8
   db2ee:	e7f3      	b.n	db2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   db2f0:	f1b9 0f00 	cmp.w	r9, #0
   db2f4:	d101      	bne.n	db2fa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   db2f6:	4649      	mov	r1, r9
   db2f8:	e7ee      	b.n	db2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   db2fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   db2fc:	2210      	movs	r2, #16
   db2fe:	a801      	add	r0, sp, #4
   db300:	f001 fe7c 	bl	dcffc <memset>
                    a.v = 6;
   db304:	2306      	movs	r3, #6
   db306:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db30a:	ad01      	add	r5, sp, #4
   db30c:	f104 0308 	add.w	r3, r4, #8
   db310:	3418      	adds	r4, #24
   db312:	6818      	ldr	r0, [r3, #0]
   db314:	6859      	ldr	r1, [r3, #4]
   db316:	462a      	mov	r2, r5
   db318:	c203      	stmia	r2!, {r0, r1}
   db31a:	3308      	adds	r3, #8
   db31c:	42a3      	cmp	r3, r4
   db31e:	4615      	mov	r5, r2
   db320:	d1f7      	bne.n	db312 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   db322:	a901      	add	r1, sp, #4
   db324:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   db326:	ad07      	add	r5, sp, #28
   db328:	f7fe fda2 	bl	d9e70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db32c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db32e:	1d3c      	adds	r4, r7, #4
   db330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db332:	682b      	ldr	r3, [r5, #0]
   db334:	7023      	strb	r3, [r4, #0]
   db336:	e7de      	b.n	db2f6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db338:	9800      	ldr	r0, [sp, #0]
   db33a:	f7fd fbd7 	bl	d8aec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db33e:	4638      	mov	r0, r7
   db340:	b015      	add	sp, #84	; 0x54
   db342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000db348 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   db348:	4b02      	ldr	r3, [pc, #8]	; (db354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   db34a:	4a03      	ldr	r2, [pc, #12]	; (db358 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   db34c:	601a      	str	r2, [r3, #0]
   db34e:	2200      	movs	r2, #0
   db350:	605a      	str	r2, [r3, #4]

} // spark
   db352:	4770      	bx	lr
   db354:	2003e564 	.word	0x2003e564
   db358:	000e01cc 	.word	0x000e01cc

000db35c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   db35c:	b508      	push	{r3, lr}
            return &Wire1;
   db35e:	f001 f859 	bl	dc414 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   db362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   db366:	f7fe bce3 	b.w	d9d30 <_ZN7TwoWire4lockEv>

000db36a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   db36a:	b510      	push	{r4, lr}
   db36c:	4604      	mov	r4, r0
    lock_(_lock)
   db36e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   db370:	b109      	cbz	r1, db376 <_ZN4PMICC1Eb+0xc>
        lock();
   db372:	f7ff fff3 	bl	db35c <_ZN4PMIC4lockEv.constprop.0>
}
   db376:	4620      	mov	r0, r4
   db378:	bd10      	pop	{r4, pc}

000db37a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   db37a:	b508      	push	{r3, lr}
            return &Wire1;
   db37c:	f001 f84a 	bl	dc414 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   db380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   db384:	f7fe bcdd 	b.w	d9d42 <_ZN7TwoWire6unlockEv>

000db388 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   db388:	b510      	push	{r4, lr}
    if (lock_) {
   db38a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   db38c:	4604      	mov	r4, r0
    if (lock_) {
   db38e:	b10b      	cbz	r3, db394 <_ZN4PMICD1Ev+0xc>
        unlock();
   db390:	f7ff fff3 	bl	db37a <_ZN4PMIC6unlockEv>
}
   db394:	4620      	mov	r0, r4
   db396:	bd10      	pop	{r4, pc}

000db398 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   db398:	b510      	push	{r4, lr}
   db39a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   db39c:	6800      	ldr	r0, [r0, #0]
   db39e:	f7ff ffec 	bl	db37a <_ZN4PMIC6unlockEv>
   db3a2:	4620      	mov	r0, r4
   db3a4:	bd10      	pop	{r4, pc}

000db3a6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   db3a6:	b530      	push	{r4, r5, lr}
   db3a8:	b087      	sub	sp, #28
   db3aa:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   db3ac:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   db3ae:	f7ff ffd5 	bl	db35c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db3b2:	236b      	movs	r3, #107	; 0x6b
   db3b4:	f88d 3008 	strb.w	r3, [sp, #8]
   db3b8:	2300      	movs	r3, #0
   db3ba:	2401      	movs	r4, #1
   db3bc:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   db3be:	230a      	movs	r3, #10
   db3c0:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db3c2:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   db3c6:	f001 f825 	bl	dc414 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   db3ca:	a902      	add	r1, sp, #8
   db3cc:	f7fe fc94 	bl	d9cf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   db3d0:	f001 f820 	bl	dc414 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   db3d4:	6803      	ldr	r3, [r0, #0]
   db3d6:	4629      	mov	r1, r5
   db3d8:	689b      	ldr	r3, [r3, #8]
   db3da:	4798      	blx	r3
            return &Wire1;
   db3dc:	f001 f81a 	bl	dc414 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   db3e0:	4621      	mov	r1, r4
   db3e2:	f7fe fca1 	bl	d9d28 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   db3e6:	9403      	str	r4, [sp, #12]
            return &Wire1;
   db3e8:	f001 f814 	bl	dc414 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   db3ec:	a902      	add	r1, sp, #8
   db3ee:	f7fe fc53 	bl	d9c98 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   db3f2:	f001 f80f 	bl	dc414 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   db3f6:	6803      	ldr	r3, [r0, #0]
   db3f8:	695b      	ldr	r3, [r3, #20]
   db3fa:	4798      	blx	r3
   db3fc:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   db3fe:	a801      	add	r0, sp, #4
   db400:	f7ff ffca 	bl	db398 <_ZNSt10lock_guardI4PMICED1Ev>
}
   db404:	b2e0      	uxtb	r0, r4
   db406:	b007      	add	sp, #28
   db408:	bd30      	pop	{r4, r5, pc}

000db40a <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   db40a:	b570      	push	{r4, r5, r6, lr}
   db40c:	b086      	sub	sp, #24
   db40e:	4614      	mov	r4, r2
   db410:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   db412:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   db414:	f7ff ffa2 	bl	db35c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db418:	236b      	movs	r3, #107	; 0x6b
   db41a:	f88d 3008 	strb.w	r3, [sp, #8]
   db41e:	2300      	movs	r3, #0
   db420:	9303      	str	r3, [sp, #12]
   db422:	2601      	movs	r6, #1
    timeout_ = ms;
   db424:	230a      	movs	r3, #10
   db426:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db428:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   db42c:	f000 fff2 	bl	dc414 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   db430:	a902      	add	r1, sp, #8
   db432:	f7fe fc61 	bl	d9cf8 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   db436:	f000 ffed 	bl	dc414 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   db43a:	6803      	ldr	r3, [r0, #0]
   db43c:	4629      	mov	r1, r5
   db43e:	689b      	ldr	r3, [r3, #8]
   db440:	4798      	blx	r3
            return &Wire1;
   db442:	f000 ffe7 	bl	dc414 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   db446:	6803      	ldr	r3, [r0, #0]
   db448:	4621      	mov	r1, r4
   db44a:	689b      	ldr	r3, [r3, #8]
   db44c:	4798      	blx	r3
            return &Wire1;
   db44e:	f000 ffe1 	bl	dc414 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   db452:	4631      	mov	r1, r6
   db454:	f7fe fc68 	bl	d9d28 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   db458:	a801      	add	r0, sp, #4
   db45a:	f7ff ff9d 	bl	db398 <_ZNSt10lock_guardI4PMICED1Ev>
}
   db45e:	b006      	add	sp, #24
   db460:	bd70      	pop	{r4, r5, r6, pc}

000db462 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   db462:	b513      	push	{r0, r1, r4, lr}
   db464:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   db466:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   db468:	f7ff ff78 	bl	db35c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   db46c:	2101      	movs	r1, #1
   db46e:	4620      	mov	r0, r4
   db470:	f7ff ff99 	bl	db3a6 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   db474:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   db478:	f040 0210 	orr.w	r2, r0, #16
   db47c:	2101      	movs	r1, #1
   db47e:	4620      	mov	r0, r4
   db480:	f7ff ffc3 	bl	db40a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   db484:	a801      	add	r0, sp, #4
   db486:	f7ff ff87 	bl	db398 <_ZNSt10lock_guardI4PMICED1Ev>
}
   db48a:	2001      	movs	r0, #1
   db48c:	b002      	add	sp, #8
   db48e:	bd10      	pop	{r4, pc}

000db490 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   db490:	b513      	push	{r0, r1, r4, lr}
   db492:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   db494:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   db496:	f7ff ff61 	bl	db35c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   db49a:	2101      	movs	r1, #1
   db49c:	4620      	mov	r0, r4
   db49e:	f7ff ff82 	bl	db3a6 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   db4a2:	2101      	movs	r1, #1
   db4a4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   db4a8:	4620      	mov	r0, r4
   db4aa:	f7ff ffae 	bl	db40a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   db4ae:	a801      	add	r0, sp, #4
   db4b0:	f7ff ff72 	bl	db398 <_ZNSt10lock_guardI4PMICED1Ev>
}
   db4b4:	2001      	movs	r0, #1
   db4b6:	b002      	add	sp, #8
   db4b8:	bd10      	pop	{r4, pc}

000db4ba <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   db4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db4bc:	4606      	mov	r6, r0
   db4be:	460d      	mov	r5, r1
  size_t n = 0;
   db4c0:	188f      	adds	r7, r1, r2
   db4c2:	2400      	movs	r4, #0
  while (size--) {
   db4c4:	42bd      	cmp	r5, r7
   db4c6:	d00c      	beq.n	db4e2 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   db4c8:	6833      	ldr	r3, [r6, #0]
   db4ca:	f815 1b01 	ldrb.w	r1, [r5], #1
   db4ce:	689b      	ldr	r3, [r3, #8]
   db4d0:	4630      	mov	r0, r6
   db4d2:	4798      	blx	r3
     if (chunk>=0)
   db4d4:	1e03      	subs	r3, r0, #0
   db4d6:	db01      	blt.n	db4dc <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   db4d8:	441c      	add	r4, r3
  while (size--) {
   db4da:	e7f3      	b.n	db4c4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   db4dc:	2c00      	cmp	r4, #0
   db4de:	bf08      	it	eq
   db4e0:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   db4e2:	4620      	mov	r0, r4
   db4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db4e6 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   db4e6:	b513      	push	{r0, r1, r4, lr}
   db4e8:	4604      	mov	r4, r0
    }
   db4ea:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   db4ec:	b159      	cbz	r1, db506 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   db4ee:	9101      	str	r1, [sp, #4]
   db4f0:	f001 fdf7 	bl	dd0e2 <strlen>
   db4f4:	6823      	ldr	r3, [r4, #0]
   db4f6:	9901      	ldr	r1, [sp, #4]
   db4f8:	68db      	ldr	r3, [r3, #12]
   db4fa:	4602      	mov	r2, r0
   db4fc:	4620      	mov	r0, r4
    }
   db4fe:	b002      	add	sp, #8
   db500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   db504:	4718      	bx	r3
    }
   db506:	b002      	add	sp, #8
   db508:	bd10      	pop	{r4, pc}

000db50a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   db50a:	6803      	ldr	r3, [r0, #0]
   db50c:	689b      	ldr	r3, [r3, #8]
   db50e:	4718      	bx	r3

000db510 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db510:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   db512:	210d      	movs	r1, #13
{
   db514:	4605      	mov	r5, r0
  size_t n = print('\r');
   db516:	f7ff fff8 	bl	db50a <_ZN5Print5printEc>
  n += print('\n');
   db51a:	210a      	movs	r1, #10
  size_t n = print('\r');
   db51c:	4604      	mov	r4, r0
  n += print('\n');
   db51e:	4628      	mov	r0, r5
   db520:	f7ff fff3 	bl	db50a <_ZN5Print5printEc>
  return n;
}
   db524:	4420      	add	r0, r4
   db526:	bd38      	pop	{r3, r4, r5, pc}

000db528 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   db528:	b530      	push	{r4, r5, lr}
   db52a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   db52c:	2300      	movs	r3, #0
   db52e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   db532:	2a01      	cmp	r2, #1
   db534:	bf98      	it	ls
   db536:	220a      	movls	r2, #10
   db538:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   db53a:	460d      	mov	r5, r1
   db53c:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   db540:	fb01 5312 	mls	r3, r1, r2, r5
   db544:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db548:	2b09      	cmp	r3, #9
   db54a:	bf94      	ite	ls
   db54c:	3330      	addls	r3, #48	; 0x30
   db54e:	3337      	addhi	r3, #55	; 0x37
   db550:	b2db      	uxtb	r3, r3
  } while(n);
   db552:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db554:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   db558:	d9ef      	bls.n	db53a <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   db55a:	4621      	mov	r1, r4
   db55c:	f7ff ffc3 	bl	db4e6 <_ZN5Print5writeEPKc>
}
   db560:	b00b      	add	sp, #44	; 0x2c
   db562:	bd30      	pop	{r4, r5, pc}

000db564 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   db564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db568:	b086      	sub	sp, #24
   db56a:	af00      	add	r7, sp, #0
   db56c:	4605      	mov	r5, r0
   db56e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   db570:	1d38      	adds	r0, r7, #4
   db572:	2114      	movs	r1, #20
{
   db574:	4614      	mov	r4, r2
    va_copy(args2, args);
   db576:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   db578:	f7fd fd7c 	bl	d9074 <vsnprintf>

    if (n<bufsize)
   db57c:	2813      	cmp	r0, #19
   db57e:	d80e      	bhi.n	db59e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   db580:	1d39      	adds	r1, r7, #4
   db582:	4628      	mov	r0, r5
   db584:	f7ff ffaf 	bl	db4e6 <_ZN5Print5writeEPKc>
   db588:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   db58a:	b11e      	cbz	r6, db594 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   db58c:	4628      	mov	r0, r5
   db58e:	f7ff ffbf 	bl	db510 <_ZN5Print7printlnEv>
   db592:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   db594:	4620      	mov	r0, r4
   db596:	3718      	adds	r7, #24
   db598:	46bd      	mov	sp, r7
   db59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   db59e:	f100 0308 	add.w	r3, r0, #8
   db5a2:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   db5a6:	46e8      	mov	r8, sp
        char bigger[n+1];
   db5a8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   db5ac:	4622      	mov	r2, r4
   db5ae:	1c41      	adds	r1, r0, #1
   db5b0:	683b      	ldr	r3, [r7, #0]
   db5b2:	4668      	mov	r0, sp
   db5b4:	f7fd fd5e 	bl	d9074 <vsnprintf>
  return write(str);
   db5b8:	4669      	mov	r1, sp
   db5ba:	4628      	mov	r0, r5
   db5bc:	f7ff ff93 	bl	db4e6 <_ZN5Print5writeEPKc>
   db5c0:	4604      	mov	r4, r0
   db5c2:	46c5      	mov	sp, r8
   db5c4:	e7e1      	b.n	db58a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000db5c8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   db5c8:	4b01      	ldr	r3, [pc, #4]	; (db5d0 <_GLOBAL__sub_I_RGB+0x8>)
   db5ca:	2200      	movs	r2, #0
   db5cc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   db5ce:	4770      	bx	lr
   db5d0:	2003e56c 	.word	0x2003e56c

000db5d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   db5d4:	b510      	push	{r4, lr}
   db5d6:	4604      	mov	r4, r0
   db5d8:	4608      	mov	r0, r1
{
    _spi = spi;
   db5da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   db5dc:	f7fd fa96 	bl	d8b0c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   db5e0:	2300      	movs	r3, #0
   db5e2:	6063      	str	r3, [r4, #4]
}
   db5e4:	4620      	mov	r0, r4
   db5e6:	bd10      	pop	{r4, pc}

000db5e8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   db5e8:	b510      	push	{r4, lr}
   db5ea:	4604      	mov	r4, r0
{
	free(buffer);
   db5ec:	6800      	ldr	r0, [r0, #0]
   db5ee:	f7fd fd19 	bl	d9024 <free>
}
   db5f2:	4620      	mov	r0, r4
   db5f4:	bd10      	pop	{r4, pc}

000db5f6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   db5f6:	b510      	push	{r4, lr}
   db5f8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   db5fa:	6800      	ldr	r0, [r0, #0]
   db5fc:	b108      	cbz	r0, db602 <_ZN6String10invalidateEv+0xc>
   db5fe:	f7fd fd11 	bl	d9024 <free>
	buffer = NULL;
   db602:	2300      	movs	r3, #0
	capacity = len = 0;
   db604:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   db608:	6023      	str	r3, [r4, #0]
}
   db60a:	bd10      	pop	{r4, pc}

000db60c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   db60c:	b538      	push	{r3, r4, r5, lr}
   db60e:	4604      	mov	r4, r0
   db610:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   db612:	6800      	ldr	r0, [r0, #0]
   db614:	3101      	adds	r1, #1
   db616:	f7fd fd0d 	bl	d9034 <realloc>
	if (newbuffer) {
   db61a:	b110      	cbz	r0, db622 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   db61c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   db620:	2001      	movs	r0, #1
	}
	return 0;
}
   db622:	bd38      	pop	{r3, r4, r5, pc}

000db624 <_ZN6String7reserveEj>:
{
   db624:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   db626:	6803      	ldr	r3, [r0, #0]
{
   db628:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   db62a:	b123      	cbz	r3, db636 <_ZN6String7reserveEj+0x12>
   db62c:	6843      	ldr	r3, [r0, #4]
   db62e:	428b      	cmp	r3, r1
   db630:	d301      	bcc.n	db636 <_ZN6String7reserveEj+0x12>
   db632:	2001      	movs	r0, #1
}
   db634:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   db636:	4620      	mov	r0, r4
   db638:	f7ff ffe8 	bl	db60c <_ZN6String12changeBufferEj>
   db63c:	2800      	cmp	r0, #0
   db63e:	d0f9      	beq.n	db634 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   db640:	68a3      	ldr	r3, [r4, #8]
   db642:	2b00      	cmp	r3, #0
   db644:	d1f5      	bne.n	db632 <_ZN6String7reserveEj+0xe>
   db646:	6822      	ldr	r2, [r4, #0]
   db648:	7013      	strb	r3, [r2, #0]
   db64a:	e7f2      	b.n	db632 <_ZN6String7reserveEj+0xe>

000db64c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   db64c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db64e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   db650:	4611      	mov	r1, r2
   db652:	9201      	str	r2, [sp, #4]
{
   db654:	4604      	mov	r4, r0
	if (!reserve(length)) {
   db656:	f7ff ffe5 	bl	db624 <_ZN6String7reserveEj>
   db65a:	9a01      	ldr	r2, [sp, #4]
   db65c:	b928      	cbnz	r0, db66a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   db65e:	4620      	mov	r0, r4
   db660:	f7ff ffc9 	bl	db5f6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   db664:	4620      	mov	r0, r4
   db666:	b003      	add	sp, #12
   db668:	bd30      	pop	{r4, r5, pc}
	len = length;
   db66a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   db66c:	4629      	mov	r1, r5
   db66e:	6820      	ldr	r0, [r4, #0]
   db670:	f001 fc9c 	bl	dcfac <memcpy>
	buffer[len] = 0;
   db674:	6822      	ldr	r2, [r4, #0]
   db676:	68a3      	ldr	r3, [r4, #8]
   db678:	2100      	movs	r1, #0
   db67a:	54d1      	strb	r1, [r2, r3]
	return *this;
   db67c:	e7f2      	b.n	db664 <_ZN6String4copyEPKcj+0x18>

000db67e <_ZN6StringC1EPKc>:
	buffer = NULL;
   db67e:	2300      	movs	r3, #0
String::String(const char *cstr)
   db680:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   db682:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   db686:	4604      	mov	r4, r0
	len = 0;
   db688:	6083      	str	r3, [r0, #8]
	flags = 0;
   db68a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   db68c:	b141      	cbz	r1, db6a0 <_ZN6StringC1EPKc+0x22>
   db68e:	4608      	mov	r0, r1
   db690:	9101      	str	r1, [sp, #4]
   db692:	f001 fd26 	bl	dd0e2 <strlen>
   db696:	9901      	ldr	r1, [sp, #4]
   db698:	4602      	mov	r2, r0
   db69a:	4620      	mov	r0, r4
   db69c:	f7ff ffd6 	bl	db64c <_ZN6String4copyEPKcj>
}
   db6a0:	4620      	mov	r0, r4
   db6a2:	b002      	add	sp, #8
   db6a4:	bd10      	pop	{r4, pc}

000db6a6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   db6a6:	b538      	push	{r3, r4, r5, lr}
   db6a8:	4605      	mov	r5, r0
	if (buffer) {
   db6aa:	6800      	ldr	r0, [r0, #0]
{
   db6ac:	460c      	mov	r4, r1
	if (buffer) {
   db6ae:	b168      	cbz	r0, db6cc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   db6b0:	686a      	ldr	r2, [r5, #4]
   db6b2:	688b      	ldr	r3, [r1, #8]
   db6b4:	429a      	cmp	r2, r3
   db6b6:	d307      	bcc.n	db6c8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   db6b8:	6809      	ldr	r1, [r1, #0]
   db6ba:	f001 fcec 	bl	dd096 <strcpy>
			len = rhs.len;
   db6be:	68a3      	ldr	r3, [r4, #8]
   db6c0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   db6c2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   db6c4:	60a3      	str	r3, [r4, #8]
}
   db6c6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   db6c8:	f7fd fcac 	bl	d9024 <free>
	buffer = rhs.buffer;
   db6cc:	6823      	ldr	r3, [r4, #0]
   db6ce:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   db6d0:	6863      	ldr	r3, [r4, #4]
   db6d2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   db6d4:	68a3      	ldr	r3, [r4, #8]
   db6d6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   db6d8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   db6da:	e9c4 3300 	strd	r3, r3, [r4]
   db6de:	e7f1      	b.n	db6c4 <_ZN6String4moveERS_+0x1e>

000db6e0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   db6e0:	b510      	push	{r4, lr}
	buffer = NULL;
   db6e2:	2300      	movs	r3, #0
	capacity = 0;
   db6e4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   db6e8:	4604      	mov	r4, r0
	len = 0;
   db6ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   db6ec:	7303      	strb	r3, [r0, #12]
	move(rval);
   db6ee:	f7ff ffda 	bl	db6a6 <_ZN6String4moveERS_>
}
   db6f2:	4620      	mov	r0, r4
   db6f4:	bd10      	pop	{r4, pc}

000db6f6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   db6f6:	4288      	cmp	r0, r1
{
   db6f8:	b510      	push	{r4, lr}
   db6fa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   db6fc:	d005      	beq.n	db70a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   db6fe:	680b      	ldr	r3, [r1, #0]
   db700:	b12b      	cbz	r3, db70e <_ZN6StringaSERKS_+0x18>
   db702:	688a      	ldr	r2, [r1, #8]
   db704:	4619      	mov	r1, r3
   db706:	f7ff ffa1 	bl	db64c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   db70a:	4620      	mov	r0, r4
   db70c:	bd10      	pop	{r4, pc}
	else invalidate();
   db70e:	f7ff ff72 	bl	db5f6 <_ZN6String10invalidateEv>
   db712:	e7fa      	b.n	db70a <_ZN6StringaSERKS_+0x14>

000db714 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   db714:	b510      	push	{r4, lr}
	buffer = NULL;
   db716:	2300      	movs	r3, #0
String::String(const String &value)
   db718:	4604      	mov	r4, r0
	capacity = 0;
   db71a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   db71e:	6083      	str	r3, [r0, #8]
	flags = 0;
   db720:	7303      	strb	r3, [r0, #12]
	*this = value;
   db722:	f7ff ffe8 	bl	db6f6 <_ZN6StringaSERKS_>
}
   db726:	4620      	mov	r0, r4
   db728:	bd10      	pop	{r4, pc}

000db72a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   db72a:	4288      	cmp	r0, r1
{
   db72c:	b510      	push	{r4, lr}
   db72e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   db730:	d001      	beq.n	db736 <_ZN6StringaSEOS_+0xc>
   db732:	f7ff ffb8 	bl	db6a6 <_ZN6String4moveERS_>
	return *this;
}
   db736:	4620      	mov	r0, r4
   db738:	bd10      	pop	{r4, pc}

000db73a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   db73a:	b513      	push	{r0, r1, r4, lr}
   db73c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   db73e:	b159      	cbz	r1, db758 <_ZN6StringaSEPKc+0x1e>
   db740:	4608      	mov	r0, r1
   db742:	9101      	str	r1, [sp, #4]
   db744:	f001 fccd 	bl	dd0e2 <strlen>
   db748:	9901      	ldr	r1, [sp, #4]
   db74a:	4602      	mov	r2, r0
   db74c:	4620      	mov	r0, r4
   db74e:	f7ff ff7d 	bl	db64c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   db752:	4620      	mov	r0, r4
   db754:	b002      	add	sp, #8
   db756:	bd10      	pop	{r4, pc}
	else invalidate();
   db758:	f7ff ff4d 	bl	db5f6 <_ZN6String10invalidateEv>
   db75c:	e7f9      	b.n	db752 <_ZN6StringaSEPKc+0x18>

000db75e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   db75e:	b570      	push	{r4, r5, r6, lr}
   db760:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   db762:	460e      	mov	r6, r1
   db764:	b909      	cbnz	r1, db76a <_ZN6String6concatEPKcj+0xc>
   db766:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   db768:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   db76a:	b16a      	cbz	r2, db788 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   db76c:	6884      	ldr	r4, [r0, #8]
   db76e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   db770:	4621      	mov	r1, r4
   db772:	f7ff ff57 	bl	db624 <_ZN6String7reserveEj>
   db776:	2800      	cmp	r0, #0
   db778:	d0f5      	beq.n	db766 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   db77a:	6828      	ldr	r0, [r5, #0]
   db77c:	68ab      	ldr	r3, [r5, #8]
   db77e:	4631      	mov	r1, r6
   db780:	4418      	add	r0, r3
   db782:	f001 fc88 	bl	dd096 <strcpy>
	len = newlen;
   db786:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   db788:	2001      	movs	r0, #1
   db78a:	e7ed      	b.n	db768 <_ZN6String6concatEPKcj+0xa>

000db78c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   db78c:	b513      	push	{r0, r1, r4, lr}
   db78e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   db790:	4608      	mov	r0, r1
	if (!cstr) return 0;
   db792:	b151      	cbz	r1, db7aa <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   db794:	9101      	str	r1, [sp, #4]
   db796:	f001 fca4 	bl	dd0e2 <strlen>
   db79a:	9901      	ldr	r1, [sp, #4]
   db79c:	4602      	mov	r2, r0
   db79e:	4620      	mov	r0, r4
}
   db7a0:	b002      	add	sp, #8
   db7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   db7a6:	f7ff bfda 	b.w	db75e <_ZN6String6concatEPKcj>
}
   db7aa:	b002      	add	sp, #8
   db7ac:	bd10      	pop	{r4, pc}

000db7ae <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   db7ae:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   db7b0:	688a      	ldr	r2, [r1, #8]
   db7b2:	6809      	ldr	r1, [r1, #0]
{
   db7b4:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   db7b6:	f7ff ffd2 	bl	db75e <_ZN6String6concatEPKcj>
   db7ba:	b910      	cbnz	r0, db7c2 <_ZplRK15StringSumHelperRK6String+0x14>
   db7bc:	4620      	mov	r0, r4
   db7be:	f7ff ff1a 	bl	db5f6 <_ZN6String10invalidateEv>
	return a;
}
   db7c2:	4620      	mov	r0, r4
   db7c4:	bd10      	pop	{r4, pc}

000db7c6 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   db7c6:	b513      	push	{r0, r1, r4, lr}
   db7c8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   db7ca:	b929      	cbnz	r1, db7d8 <_ZplRK15StringSumHelperPKc+0x12>
   db7cc:	4620      	mov	r0, r4
   db7ce:	f7ff ff12 	bl	db5f6 <_ZN6String10invalidateEv>
	return a;
}
   db7d2:	4620      	mov	r0, r4
   db7d4:	b002      	add	sp, #8
   db7d6:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   db7d8:	4608      	mov	r0, r1
   db7da:	9101      	str	r1, [sp, #4]
   db7dc:	f001 fc81 	bl	dd0e2 <strlen>
   db7e0:	9901      	ldr	r1, [sp, #4]
   db7e2:	4602      	mov	r2, r0
   db7e4:	4620      	mov	r0, r4
   db7e6:	f7ff ffba 	bl	db75e <_ZN6String6concatEPKcj>
   db7ea:	2800      	cmp	r0, #0
   db7ec:	d0ee      	beq.n	db7cc <_ZplRK15StringSumHelperPKc+0x6>
   db7ee:	e7f0      	b.n	db7d2 <_ZplRK15StringSumHelperPKc+0xc>

000db7f0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   db7f0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db7f2:	6882      	ldr	r2, [r0, #8]
   db7f4:	b93a      	cbnz	r2, db806 <_ZNK6String6equalsEPKc+0x16>
   db7f6:	b121      	cbz	r1, db802 <_ZNK6String6equalsEPKc+0x12>
   db7f8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   db7fa:	fab0 f080 	clz	r0, r0
   db7fe:	0940      	lsrs	r0, r0, #5
   db800:	e000      	b.n	db804 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db802:	2001      	movs	r0, #1
}
   db804:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   db806:	6800      	ldr	r0, [r0, #0]
   db808:	b909      	cbnz	r1, db80e <_ZNK6String6equalsEPKc+0x1e>
   db80a:	7800      	ldrb	r0, [r0, #0]
   db80c:	e7f5      	b.n	db7fa <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   db80e:	f001 fc38 	bl	dd082 <strcmp>
   db812:	e7f2      	b.n	db7fa <_ZNK6String6equalsEPKc+0xa>

000db814 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   db814:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   db816:	6883      	ldr	r3, [r0, #8]
   db818:	688a      	ldr	r2, [r1, #8]
   db81a:	4293      	cmp	r3, r2
   db81c:	d30b      	bcc.n	db836 <_ZNK6String8endsWithERKS_+0x22>
   db81e:	6800      	ldr	r0, [r0, #0]
   db820:	b140      	cbz	r0, db834 <_ZNK6String8endsWithERKS_+0x20>
   db822:	6809      	ldr	r1, [r1, #0]
   db824:	b149      	cbz	r1, db83a <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   db826:	1a9b      	subs	r3, r3, r2
   db828:	4418      	add	r0, r3
   db82a:	f001 fc2a 	bl	dd082 <strcmp>
   db82e:	fab0 f080 	clz	r0, r0
   db832:	0940      	lsrs	r0, r0, #5
}
   db834:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   db836:	2000      	movs	r0, #0
   db838:	e7fc      	b.n	db834 <_ZNK6String8endsWithERKS_+0x20>
   db83a:	4608      	mov	r0, r1
   db83c:	e7fa      	b.n	db834 <_ZNK6String8endsWithERKS_+0x20>

000db83e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   db83e:	b558      	push	{r3, r4, r6, lr}
   db840:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   db842:	b12a      	cbz	r2, db850 <_ZNK6String8getBytesEPhjj+0x12>
   db844:	b121      	cbz	r1, db850 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   db846:	6884      	ldr	r4, [r0, #8]
   db848:	42a3      	cmp	r3, r4
   db84a:	d302      	bcc.n	db852 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   db84c:	2300      	movs	r3, #0
   db84e:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   db850:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   db852:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   db854:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   db856:	6801      	ldr	r1, [r0, #0]
   db858:	4294      	cmp	r4, r2
   db85a:	bf28      	it	cs
   db85c:	4614      	movcs	r4, r2
   db85e:	4419      	add	r1, r3
   db860:	4622      	mov	r2, r4
   db862:	4630      	mov	r0, r6
   db864:	f001 fc57 	bl	dd116 <strncpy>
	buf[n] = 0;
   db868:	2300      	movs	r3, #0
   db86a:	5533      	strb	r3, [r6, r4]
   db86c:	e7f0      	b.n	db850 <_ZNK6String8getBytesEPhjj+0x12>
	...

000db870 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   db870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   db872:	429a      	cmp	r2, r3
{
   db874:	460f      	mov	r7, r1
   db876:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   db878:	490c      	ldr	r1, [pc, #48]	; (db8ac <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   db87a:	bf88      	it	hi
   db87c:	4613      	movhi	r3, r2
{
   db87e:	4614      	mov	r4, r2
   db880:	4606      	mov	r6, r0
	if (left > right) {
   db882:	bf84      	itt	hi
   db884:	462c      	movhi	r4, r5
   db886:	461d      	movhi	r5, r3
	String out;
   db888:	f7ff fef9 	bl	db67e <_ZN6StringC1EPKc>
	if (left > len) return out;
   db88c:	68ba      	ldr	r2, [r7, #8]
   db88e:	42a2      	cmp	r2, r4
   db890:	d30a      	bcc.n	db8a8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   db892:	6839      	ldr	r1, [r7, #0]
   db894:	42aa      	cmp	r2, r5
   db896:	bf94      	ite	ls
   db898:	ebc4 0202 	rsbls	r2, r4, r2
   db89c:	ebc4 0205 	rsbhi	r2, r4, r5
   db8a0:	4421      	add	r1, r4
   db8a2:	4630      	mov	r0, r6
   db8a4:	f7ff fed2 	bl	db64c <_ZN6String4copyEPKcj>
	return out;
}
   db8a8:	4630      	mov	r0, r6
   db8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db8ac:	000e0135 	.word	0x000e0135

000db8b0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   db8b0:	b40e      	push	{r1, r2, r3}
   db8b2:	b570      	push	{r4, r5, r6, lr}
   db8b4:	b087      	sub	sp, #28
   db8b6:	ad0b      	add	r5, sp, #44	; 0x2c
   db8b8:	4604      	mov	r4, r0
   db8ba:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db8be:	9201      	str	r2, [sp, #4]
   db8c0:	462b      	mov	r3, r5
   db8c2:	2105      	movs	r1, #5
   db8c4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   db8c6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db8c8:	f7fd fbd4 	bl	d9074 <vsnprintf>
    va_end(marker);

    String result;
   db8cc:	490b      	ldr	r1, [pc, #44]	; (db8fc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db8ce:	4606      	mov	r6, r0
    String result;
   db8d0:	4620      	mov	r0, r4
   db8d2:	f7ff fed4 	bl	db67e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   db8d6:	4631      	mov	r1, r6
   db8d8:	4620      	mov	r0, r4
   db8da:	f7ff fea3 	bl	db624 <_ZN6String7reserveEj>
    if (result.buffer) {
   db8de:	6820      	ldr	r0, [r4, #0]
   db8e0:	b130      	cbz	r0, db8f0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db8e2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   db8e4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db8e6:	462b      	mov	r3, r5
   db8e8:	1c71      	adds	r1, r6, #1
   db8ea:	f7fd fbc3 	bl	d9074 <vsnprintf>
        va_end(marker);
        result.len = n;
   db8ee:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   db8f0:	4620      	mov	r0, r4
   db8f2:	b007      	add	sp, #28
   db8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db8f8:	b003      	add	sp, #12
   db8fa:	4770      	bx	lr
   db8fc:	000e0135 	.word	0x000e0135

000db900 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   db900:	b510      	push	{r4, lr}
   db902:	4604      	mov	r4, r0
        if (wakeupSource_) {
   db904:	6800      	ldr	r0, [r0, #0]
   db906:	b118      	cbz	r0, db910 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   db908:	f7fd fb8c 	bl	d9024 <free>
            wakeupSource_ = nullptr;
   db90c:	2300      	movs	r3, #0
   db90e:	6023      	str	r3, [r4, #0]
        }
    }
   db910:	bd10      	pop	{r4, pc}

000db912 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   db912:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   db914:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   db918:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   db91a:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   db91c:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   db91e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   db922:	f8c0 2006 	str.w	r2, [r0, #6]
   db926:	889b      	ldrh	r3, [r3, #4]
   db928:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   db92a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   db92c:	f7ff ffe8 	bl	db900 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   db930:	682b      	ldr	r3, [r5, #0]
   db932:	b113      	cbz	r3, db93a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   db934:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   db936:	2300      	movs	r3, #0
   db938:	602b      	str	r3, [r5, #0]
    }
   db93a:	4620      	mov	r0, r4
   db93c:	bd38      	pop	{r3, r4, r5, pc}
	...

000db940 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   db940:	b538      	push	{r3, r4, r5, lr}
   db942:	460c      	mov	r4, r1
   db944:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   db946:	f7ff ffdb 	bl	db900 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   db94a:	b144      	cbz	r4, db95e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   db94c:	8820      	ldrh	r0, [r4, #0]
   db94e:	f7fd fb61 	bl	d9014 <malloc>
   db952:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   db954:	b128      	cbz	r0, db962 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   db956:	8822      	ldrh	r2, [r4, #0]
   db958:	4621      	mov	r1, r4
   db95a:	f001 fb27 	bl	dcfac <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   db95e:	2000      	movs	r0, #0
    }
   db960:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   db962:	4801      	ldr	r0, [pc, #4]	; (db968 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   db964:	e7fc      	b.n	db960 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   db966:	bf00      	nop
   db968:	fffffefc 	.word	0xfffffefc

000db96c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   db96c:	b507      	push	{r0, r1, r2, lr}
   db96e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   db970:	2100      	movs	r1, #0
{
   db972:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   db974:	9100      	str	r1, [sp, #0]
   db976:	2001      	movs	r0, #1
   db978:	218c      	movs	r1, #140	; 0x8c
   db97a:	f7fd fa71 	bl	d8e60 <system_reset>
}
   db97e:	b003      	add	sp, #12
   db980:	f85d fb04 	ldr.w	pc, [sp], #4

000db984 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   db984:	4601      	mov	r1, r0
    reset(0, flags);
   db986:	2000      	movs	r0, #0
   db988:	f7ff bff0 	b.w	db96c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000db98c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   db98c:	2000      	movs	r0, #0
   db98e:	f7ff bff9 	b.w	db984 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000db994 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   db994:	b5f0      	push	{r4, r5, r6, r7, lr}
   db996:	4d2d      	ldr	r5, [pc, #180]	; (dba4c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   db998:	7d0b      	ldrb	r3, [r1, #20]
   db99a:	4604      	mov	r4, r0
   db99c:	b08b      	sub	sp, #44	; 0x2c
   db99e:	4608      	mov	r0, r1
   db9a0:	1daf      	adds	r7, r5, #6
   db9a2:	2b00      	cmp	r3, #0
   db9a4:	d038      	beq.n	dba18 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   db9a6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   db9a8:	791b      	ldrb	r3, [r3, #4]
   db9aa:	2b00      	cmp	r3, #0
   db9ac:	d034      	beq.n	dba18 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   db9ae:	2200      	movs	r2, #0
    SleepResult() {}
   db9b0:	4b27      	ldr	r3, [pc, #156]	; (dba50 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   db9b2:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   db9b4:	a902      	add	r1, sp, #8
   db9b6:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   db9b8:	9202      	str	r2, [sp, #8]
   db9ba:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   db9be:	f88d 200e 	strb.w	r2, [sp, #14]
   db9c2:	f7fd fa43 	bl	d8e4c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   db9c6:	f8dd 300e 	ldr.w	r3, [sp, #14]
   db9ca:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   db9ce:	b200      	sxth	r0, r0
   db9d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   db9d4:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   db9d8:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   db9da:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   db9dc:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   db9de:	4628      	mov	r0, r5
   db9e0:	f7ff ffae 	bl	db940 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   db9e4:	a802      	add	r0, sp, #8
   db9e6:	f7ff ff8b 	bl	db900 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   db9ea:	2300      	movs	r3, #0
   db9ec:	6023      	str	r3, [r4, #0]
   db9ee:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   db9f0:	71a3      	strb	r3, [r4, #6]
   db9f2:	8123      	strh	r3, [r4, #8]
   db9f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   db9f8:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   db9fa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   db9fe:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dba00:	683b      	ldr	r3, [r7, #0]
   dba02:	f8c4 3006 	str.w	r3, [r4, #6]
   dba06:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dba08:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dba0a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dba0c:	4620      	mov	r0, r4
   dba0e:	f7ff ff97 	bl	db940 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dba12:	4620      	mov	r0, r4
   dba14:	b00b      	add	sp, #44	; 0x2c
   dba16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dba18:	2600      	movs	r6, #0
   dba1a:	2320      	movs	r3, #32
   dba1c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dba20:	4b0c      	ldr	r3, [pc, #48]	; (dba54 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dba22:	9300      	str	r3, [sp, #0]
   dba24:	490c      	ldr	r1, [pc, #48]	; (dba58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dba26:	4633      	mov	r3, r6
   dba28:	aa02      	add	r2, sp, #8
   dba2a:	2032      	movs	r0, #50	; 0x32
   dba2c:	f7fd f976 	bl	d8d1c <log_message>
    SleepResult() {}
   dba30:	4b07      	ldr	r3, [pc, #28]	; (dba50 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dba32:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dba34:	a902      	add	r1, sp, #8
        error_ = error;
   dba36:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dba3a:	4804      	ldr	r0, [pc, #16]	; (dba4c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dba3c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dba3e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dba42:	f8ad 300c 	strh.w	r3, [sp, #12]
   dba46:	f7ff ff64 	bl	db912 <_ZN17SystemSleepResultaSEOS_>
   dba4a:	e7cb      	b.n	db9e4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dba4c:	2003e57c 	.word	0x2003e57c
   dba50:	ffff0000 	.word	0xffff0000
   dba54:	000e0207 	.word	0x000e0207
   dba58:	000e0200 	.word	0x000e0200

000dba5c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dba5c:	4b05      	ldr	r3, [pc, #20]	; (dba74 <_GLOBAL__sub_I_System+0x18>)
   dba5e:	2202      	movs	r2, #2
   dba60:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dba62:	4b05      	ldr	r3, [pc, #20]	; (dba78 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dba64:	4a05      	ldr	r2, [pc, #20]	; (dba7c <_GLOBAL__sub_I_System+0x20>)
   dba66:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dba68:	2000      	movs	r0, #0
   dba6a:	6018      	str	r0, [r3, #0]
   dba6c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dba6e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dba70:	f7fd b986 	b.w	d8d80 <set_system_mode>
   dba74:	2003e588 	.word	0x2003e588
   dba78:	2003e57c 	.word	0x2003e57c
   dba7c:	ffff0000 	.word	0xffff0000

000dba80 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   dba84:	4a15      	ldr	r2, [pc, #84]	; (dbadc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dba86:	f8df 8060 	ldr.w	r8, [pc, #96]	; dbae8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   dba8a:	e9d2 3200 	ldrd	r3, r2, [r2]
   dba8e:	18c0      	adds	r0, r0, r3
   dba90:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   dba94:	4a12      	ldr	r2, [pc, #72]	; (dbae0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   dba96:	e9d2 3200 	ldrd	r3, r2, [r2]
   dba9a:	18c6      	adds	r6, r0, r3
   dba9c:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   dbaa0:	e9d8 2300 	ldrd	r2, r3, [r8]
   dbaa4:	42bb      	cmp	r3, r7
   dbaa6:	bf08      	it	eq
   dbaa8:	42b2      	cmpeq	r2, r6
{
   dbaaa:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   dbaac:	d013      	beq.n	dbad6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   dbaae:	a903      	add	r1, sp, #12
   dbab0:	4668      	mov	r0, sp
   dbab2:	e9cd 6700 	strd	r6, r7, [sp]
   dbab6:	f7fd fb0d 	bl	d90d4 <localtime_r>
	calendar_time.tm_year += 1900;
   dbaba:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dbabc:	4d09      	ldr	r5, [pc, #36]	; (dbae4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   dbabe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dbac2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   dbac4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dbac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dbac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dbaca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dbacc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dbace:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dbad2:	6823      	ldr	r3, [r4, #0]
   dbad4:	602b      	str	r3, [r5, #0]
    }
}
   dbad6:	b00c      	add	sp, #48	; 0x30
   dbad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbadc:	2003e5c0 	.word	0x2003e5c0
   dbae0:	2003e5b8 	.word	0x2003e5b8
   dbae4:	2003e594 	.word	0x2003e594
   dbae8:	2003e5c8 	.word	0x2003e5c8

000dbaec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dbaec:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dbaee:	2000      	movs	r0, #0
   dbaf0:	f7fd fa08 	bl	d8f04 <spark_sync_time_pending>
   dbaf4:	b128      	cbz	r0, dbb02 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dbaf6:	f7fd f9dd 	bl	d8eb4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dbafa:	f080 0001 	eor.w	r0, r0, #1
   dbafe:	b2c0      	uxtb	r0, r0
    }
   dbb00:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dbb02:	2001      	movs	r0, #1
   dbb04:	e7fc      	b.n	dbb00 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000dbb08 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   dbb08:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dbb0a:	f7ff ffb9 	bl	dba80 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   dbb0e:	4b01      	ldr	r3, [pc, #4]	; (dbb14 <_ZN9TimeClass4hourEx+0xc>)
   dbb10:	6898      	ldr	r0, [r3, #8]
   dbb12:	bd08      	pop	{r3, pc}
   dbb14:	2003e594 	.word	0x2003e594

000dbb18 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   dbb18:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dbb1a:	f7ff ffb1 	bl	dba80 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   dbb1e:	4b01      	ldr	r3, [pc, #4]	; (dbb24 <_ZN9TimeClass3dayEx+0xc>)
   dbb20:	68d8      	ldr	r0, [r3, #12]
   dbb22:	bd08      	pop	{r3, pc}
   dbb24:	2003e594 	.word	0x2003e594

000dbb28 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   dbb28:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dbb2a:	f7ff ffa9 	bl	dba80 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   dbb2e:	4b02      	ldr	r3, [pc, #8]	; (dbb38 <_ZN9TimeClass7weekdayEx+0x10>)
   dbb30:	6998      	ldr	r0, [r3, #24]
}
   dbb32:	3001      	adds	r0, #1
   dbb34:	bd08      	pop	{r3, pc}
   dbb36:	bf00      	nop
   dbb38:	2003e594 	.word	0x2003e594

000dbb3c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dbb3c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dbb3e:	f7ff ff9f 	bl	dba80 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dbb42:	4b02      	ldr	r3, [pc, #8]	; (dbb4c <_ZN9TimeClass5monthEx+0x10>)
   dbb44:	6918      	ldr	r0, [r3, #16]
}
   dbb46:	3001      	adds	r0, #1
   dbb48:	bd08      	pop	{r3, pc}
   dbb4a:	bf00      	nop
   dbb4c:	2003e594 	.word	0x2003e594

000dbb50 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dbb50:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   dbb54:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dbb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dbb5c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dbb5e:	d411      	bmi.n	dbb84 <_ZN9TimeClass4zoneEf+0x34>
   dbb60:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   dbb64:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dbb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbb6c:	dc0a      	bgt.n	dbb84 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   dbb6e:	eddf 7a06 	vldr	s15, [pc, #24]	; dbb88 <_ZN9TimeClass4zoneEf+0x38>
   dbb72:	ee60 7a27 	vmul.f32	s15, s0, s15
   dbb76:	ee17 0a90 	vmov	r0, s15
   dbb7a:	f001 f983 	bl	dce84 <__aeabi_f2lz>
   dbb7e:	4b03      	ldr	r3, [pc, #12]	; (dbb8c <_ZN9TimeClass4zoneEf+0x3c>)
   dbb80:	e9c3 0100 	strd	r0, r1, [r3]
}
   dbb84:	bd08      	pop	{r3, pc}
   dbb86:	bf00      	nop
   dbb88:	45610000 	.word	0x45610000
   dbb8c:	2003e5c0 	.word	0x2003e5c0

000dbb90 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   dbb90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   dbb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dbb98:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   dbb9a:	d411      	bmi.n	dbbc0 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   dbb9c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dbba0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dbba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbba8:	dc0a      	bgt.n	dbbc0 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   dbbaa:	eddf 7a06 	vldr	s15, [pc, #24]	; dbbc4 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   dbbae:	ee60 7a27 	vmul.f32	s15, s0, s15
   dbbb2:	ee17 0a90 	vmov	r0, s15
   dbbb6:	f001 f965 	bl	dce84 <__aeabi_f2lz>
   dbbba:	4b03      	ldr	r3, [pc, #12]	; (dbbc8 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   dbbbc:	e9c3 0100 	strd	r0, r1, [r3]
}
   dbbc0:	bd08      	pop	{r3, pc}
   dbbc2:	bf00      	nop
   dbbc4:	45610000 	.word	0x45610000
   dbbc8:	2003e0b0 	.word	0x2003e0b0

000dbbcc <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   dbbcc:	4b03      	ldr	r3, [pc, #12]	; (dbbdc <_ZN9TimeClass8beginDSTEv+0x10>)
   dbbce:	e9d3 0100 	ldrd	r0, r1, [r3]
   dbbd2:	4b03      	ldr	r3, [pc, #12]	; (dbbe0 <_ZN9TimeClass8beginDSTEv+0x14>)
   dbbd4:	e9c3 0100 	strd	r0, r1, [r3]
}
   dbbd8:	4770      	bx	lr
   dbbda:	bf00      	nop
   dbbdc:	2003e0b0 	.word	0x2003e0b0
   dbbe0:	2003e5b8 	.word	0x2003e5b8

000dbbe4 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   dbbe4:	4b02      	ldr	r3, [pc, #8]	; (dbbf0 <_ZN9TimeClass6endDSTEv+0xc>)
   dbbe6:	2000      	movs	r0, #0
   dbbe8:	2100      	movs	r1, #0
   dbbea:	e9c3 0100 	strd	r0, r1, [r3]
}
   dbbee:	4770      	bx	lr
   dbbf0:	2003e5b8 	.word	0x2003e5b8

000dbbf4 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dbbf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dbbf6:	4602      	mov	r2, r0
   dbbf8:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dbbfa:	4668      	mov	r0, sp
    struct timeval tv = {
   dbbfc:	2100      	movs	r1, #0
    };
   dbbfe:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dbc02:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dbc06:	f7fc feb9 	bl	d897c <hal_rtc_set_time>
   dbc0a:	4602      	mov	r2, r0
   dbc0c:	b910      	cbnz	r0, dbc14 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dbc0e:	4601      	mov	r1, r0
   dbc10:	f7fd f8f6 	bl	d8e00 <system_notify_time_changed>
    }
}
   dbc14:	b005      	add	sp, #20
   dbc16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dbc1c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dbc1c:	b530      	push	{r4, r5, lr}
   dbc1e:	4604      	mov	r4, r0
    t += time_zone_cache;
   dbc20:	4818      	ldr	r0, [pc, #96]	; (dbc84 <_ZN9TimeClass7timeStrEx+0x68>)
   dbc22:	e9d0 1000 	ldrd	r1, r0, [r0]
   dbc26:	1852      	adds	r2, r2, r1
   dbc28:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dbc2c:	4816      	ldr	r0, [pc, #88]	; (dbc88 <_ZN9TimeClass7timeStrEx+0x6c>)
   dbc2e:	e9d0 1000 	ldrd	r1, r0, [r0]
   dbc32:	1852      	adds	r2, r2, r1
{
   dbc34:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dbc36:	eb40 0303 	adc.w	r3, r0, r3
   dbc3a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dbc3e:	2224      	movs	r2, #36	; 0x24
   dbc40:	eb0d 0002 	add.w	r0, sp, r2
   dbc44:	2100      	movs	r1, #0
   dbc46:	f001 f9d9 	bl	dcffc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dbc4a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dbc4c:	a909      	add	r1, sp, #36	; 0x24
   dbc4e:	4668      	mov	r0, sp
   dbc50:	f7fd fa40 	bl	d90d4 <localtime_r>
    char ascstr[26] = {};
   dbc54:	2216      	movs	r2, #22
   dbc56:	4629      	mov	r1, r5
   dbc58:	a803      	add	r0, sp, #12
   dbc5a:	9502      	str	r5, [sp, #8]
   dbc5c:	f001 f9ce 	bl	dcffc <memset>
    asctime_r(&calendar_time, ascstr);
   dbc60:	a902      	add	r1, sp, #8
   dbc62:	a809      	add	r0, sp, #36	; 0x24
   dbc64:	f001 f960 	bl	dcf28 <asctime_r>
    int len = strlen(ascstr);
   dbc68:	a802      	add	r0, sp, #8
   dbc6a:	f001 fa3a 	bl	dd0e2 <strlen>
    ascstr[len-1] = 0; // remove final newline
   dbc6e:	ab12      	add	r3, sp, #72	; 0x48
   dbc70:	4418      	add	r0, r3
    return String(ascstr);
   dbc72:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dbc74:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dbc78:	4620      	mov	r0, r4
   dbc7a:	f7ff fd00 	bl	db67e <_ZN6StringC1EPKc>
}
   dbc7e:	4620      	mov	r0, r4
   dbc80:	b013      	add	sp, #76	; 0x4c
   dbc82:	bd30      	pop	{r4, r5, pc}
   dbc84:	2003e5c0 	.word	0x2003e5c0
   dbc88:	2003e5b8 	.word	0x2003e5b8

000dbc8c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dbc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbc90:	b0a5      	sub	sp, #148	; 0x94
   dbc92:	4607      	mov	r7, r0
   dbc94:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dbc96:	a814      	add	r0, sp, #80	; 0x50
{
   dbc98:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dbc9a:	223f      	movs	r2, #63	; 0x3f
{
   dbc9c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dbc9e:	f001 fa3a 	bl	dd116 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dbca2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dbca4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dbca6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dbcaa:	f001 fa1a 	bl	dd0e2 <strlen>
   dbcae:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dbcb0:	bb5d      	cbnz	r5, dbd0a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dbcb2:	492a      	ldr	r1, [pc, #168]	; (dbd5c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dbcb4:	a803      	add	r0, sp, #12
   dbcb6:	f001 f9ee 	bl	dd096 <strcpy>
   dbcba:	ae14      	add	r6, sp, #80	; 0x50
{
   dbcbc:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dbcbe:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dbcc2:	45ab      	cmp	fp, r5
   dbcc4:	d936      	bls.n	dbd34 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dbcc6:	46b1      	mov	r9, r6
   dbcc8:	f105 0a01 	add.w	sl, r5, #1
   dbccc:	f819 3b01 	ldrb.w	r3, [r9], #1
   dbcd0:	2b25      	cmp	r3, #37	; 0x25
   dbcd2:	d117      	bne.n	dbd04 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dbcd4:	7873      	ldrb	r3, [r6, #1]
   dbcd6:	2b7a      	cmp	r3, #122	; 0x7a
   dbcd8:	d114      	bne.n	dbd04 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dbcda:	a803      	add	r0, sp, #12
   dbcdc:	f001 fa01 	bl	dd0e2 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dbce0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dbce2:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dbce4:	1828      	adds	r0, r5, r0
   dbce6:	4418      	add	r0, r3
   dbce8:	ebab 0205 	sub.w	r2, fp, r5
   dbcec:	1cb1      	adds	r1, r6, #2
   dbcee:	f001 f95d 	bl	dcfac <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dbcf2:	4622      	mov	r2, r4
   dbcf4:	a903      	add	r1, sp, #12
   dbcf6:	4630      	mov	r0, r6
   dbcf8:	f001 f958 	bl	dcfac <memcpy>
            len = strlen(format_str);
   dbcfc:	a814      	add	r0, sp, #80	; 0x50
   dbcfe:	f001 f9f0 	bl	dd0e2 <strlen>
   dbd02:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dbd04:	464e      	mov	r6, r9
   dbd06:	4655      	mov	r5, sl
   dbd08:	e7d9      	b.n	dbcbe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dbd0a:	213c      	movs	r1, #60	; 0x3c
   dbd0c:	fb95 f3f1 	sdiv	r3, r5, r1
   dbd10:	2b00      	cmp	r3, #0
   dbd12:	bfb8      	it	lt
   dbd14:	425b      	neglt	r3, r3
   dbd16:	fbb3 f2f1 	udiv	r2, r3, r1
   dbd1a:	fb01 3312 	mls	r3, r1, r2, r3
   dbd1e:	9300      	str	r3, [sp, #0]
   dbd20:	4a0f      	ldr	r2, [pc, #60]	; (dbd60 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dbd22:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dbd26:	2110      	movs	r1, #16
   dbd28:	a803      	add	r0, sp, #12
   dbd2a:	fb95 f3f3 	sdiv	r3, r5, r3
   dbd2e:	f7fd f999 	bl	d9064 <snprintf>
   dbd32:	e7c2      	b.n	dbcba <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dbd34:	2100      	movs	r1, #0
   dbd36:	222e      	movs	r2, #46	; 0x2e
   dbd38:	a808      	add	r0, sp, #32
   dbd3a:	9107      	str	r1, [sp, #28]
   dbd3c:	f001 f95e 	bl	dcffc <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dbd40:	4643      	mov	r3, r8
   dbd42:	aa14      	add	r2, sp, #80	; 0x50
   dbd44:	2132      	movs	r1, #50	; 0x32
   dbd46:	a807      	add	r0, sp, #28
   dbd48:	f7fd f9bc 	bl	d90c4 <strftime>
    return String(buf);
   dbd4c:	a907      	add	r1, sp, #28
   dbd4e:	4638      	mov	r0, r7
   dbd50:	f7ff fc95 	bl	db67e <_ZN6StringC1EPKc>
}
   dbd54:	4638      	mov	r0, r7
   dbd56:	b025      	add	sp, #148	; 0x94
   dbd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbd5c:	000e022e 	.word	0x000e022e
   dbd60:	000e0230 	.word	0x000e0230

000dbd64 <_ZN9TimeClass6formatExPKc>:
{
   dbd64:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbd66:	b08d      	sub	sp, #52	; 0x34
   dbd68:	e9cd 2300 	strd	r2, r3, [sp]
   dbd6c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dbd6e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dbd70:	b915      	cbnz	r5, dbd78 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dbd72:	4b19      	ldr	r3, [pc, #100]	; (dbdd8 <_ZN9TimeClass6formatExPKc+0x74>)
   dbd74:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dbd76:	b12d      	cbz	r5, dbd84 <_ZN9TimeClass6formatExPKc+0x20>
   dbd78:	4b18      	ldr	r3, [pc, #96]	; (dbddc <_ZN9TimeClass6formatExPKc+0x78>)
   dbd7a:	4628      	mov	r0, r5
   dbd7c:	6819      	ldr	r1, [r3, #0]
   dbd7e:	f001 f980 	bl	dd082 <strcmp>
   dbd82:	b938      	cbnz	r0, dbd94 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dbd84:	e9dd 2300 	ldrd	r2, r3, [sp]
   dbd88:	4620      	mov	r0, r4
   dbd8a:	f7ff ff47 	bl	dbc1c <_ZN9TimeClass7timeStrEx>
}
   dbd8e:	4620      	mov	r0, r4
   dbd90:	b00d      	add	sp, #52	; 0x34
   dbd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   dbd94:	4e12      	ldr	r6, [pc, #72]	; (dbde0 <_ZN9TimeClass6formatExPKc+0x7c>)
   dbd96:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   dbd98:	4f12      	ldr	r7, [pc, #72]	; (dbde4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   dbd9a:	e9d6 3200 	ldrd	r3, r2, [r6]
   dbd9e:	185b      	adds	r3, r3, r1
   dbda0:	9901      	ldr	r1, [sp, #4]
   dbda2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dbda6:	e9d7 0100 	ldrd	r0, r1, [r7]
   dbdaa:	181b      	adds	r3, r3, r0
   dbdac:	eb41 0202 	adc.w	r2, r1, r2
   dbdb0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   dbdb4:	2100      	movs	r1, #0
   dbdb6:	2224      	movs	r2, #36	; 0x24
   dbdb8:	a803      	add	r0, sp, #12
   dbdba:	f001 f91f 	bl	dcffc <memset>
    localtime_r(&t, &calendar_time);
   dbdbe:	a903      	add	r1, sp, #12
   dbdc0:	4668      	mov	r0, sp
   dbdc2:	f7fd f987 	bl	d90d4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dbdc6:	6832      	ldr	r2, [r6, #0]
   dbdc8:	683b      	ldr	r3, [r7, #0]
   dbdca:	a903      	add	r1, sp, #12
   dbdcc:	4413      	add	r3, r2
   dbdce:	4620      	mov	r0, r4
   dbdd0:	462a      	mov	r2, r5
   dbdd2:	f7ff ff5b 	bl	dbc8c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   dbdd6:	e7da      	b.n	dbd8e <_ZN9TimeClass6formatExPKc+0x2a>
   dbdd8:	2003e590 	.word	0x2003e590
   dbddc:	2003e0a8 	.word	0x2003e0a8
   dbde0:	2003e5c0 	.word	0x2003e5c0
   dbde4:	2003e5b8 	.word	0x2003e5b8

000dbde8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   dbde8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   dbdea:	2000      	movs	r0, #0
   dbdec:	f7fc fdae 	bl	d894c <hal_rtc_time_is_valid>
    if (rtcstate)
   dbdf0:	4604      	mov	r4, r0
   dbdf2:	b9a0      	cbnz	r0, dbe1e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dbdf4:	f7fc ffbc 	bl	d8d70 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dbdf8:	2801      	cmp	r0, #1
   dbdfa:	d110      	bne.n	dbe1e <_ZN9TimeClass7isValidEv+0x36>
   dbdfc:	4620      	mov	r0, r4
   dbdfe:	f7fc fff7 	bl	d8df0 <system_thread_get_state>
   dbe02:	b960      	cbnz	r0, dbe1e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   dbe04:	f7ff fe72 	bl	dbaec <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dbe08:	b910      	cbnz	r0, dbe10 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   dbe0a:	f7fd f843 	bl	d8e94 <spark_process>
        while (_while() && !_condition()) {
   dbe0e:	e7f9      	b.n	dbe04 <_ZN9TimeClass7isValidEv+0x1c>
   dbe10:	f7ff fe6c 	bl	dbaec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   dbe14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   dbe18:	2000      	movs	r0, #0
   dbe1a:	f7fc bd97 	b.w	d894c <hal_rtc_time_is_valid>
}
   dbe1e:	4620      	mov	r0, r4
   dbe20:	bd10      	pop	{r4, pc}

000dbe22 <_ZN9TimeClass3nowEv>:
{
   dbe22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   dbe24:	f7ff ffe0 	bl	dbde8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   dbe28:	2210      	movs	r2, #16
   dbe2a:	2100      	movs	r1, #0
   dbe2c:	4668      	mov	r0, sp
   dbe2e:	f001 f8e5 	bl	dcffc <memset>
    hal_rtc_get_time(&tv, nullptr);
   dbe32:	2100      	movs	r1, #0
   dbe34:	4668      	mov	r0, sp
   dbe36:	f7fc fd99 	bl	d896c <hal_rtc_get_time>
}
   dbe3a:	9800      	ldr	r0, [sp, #0]
   dbe3c:	b005      	add	sp, #20
   dbe3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dbe44 <_ZN9TimeClass4hourEv>:
{
   dbe44:	b508      	push	{r3, lr}
	return hour(now());
   dbe46:	f7ff ffec 	bl	dbe22 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dbe4a:	17c1      	asrs	r1, r0, #31
   dbe4c:	f7ff fe18 	bl	dba80 <_ZL22Refresh_UnixTime_Cachex>
}
   dbe50:	4b01      	ldr	r3, [pc, #4]	; (dbe58 <_ZN9TimeClass4hourEv+0x14>)
   dbe52:	6898      	ldr	r0, [r3, #8]
   dbe54:	bd08      	pop	{r3, pc}
   dbe56:	bf00      	nop
   dbe58:	2003e594 	.word	0x2003e594

000dbe5c <_ZN9TimeClass3dayEv>:
{
   dbe5c:	b508      	push	{r3, lr}
	return day(now());
   dbe5e:	f7ff ffe0 	bl	dbe22 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dbe62:	17c1      	asrs	r1, r0, #31
   dbe64:	f7ff fe0c 	bl	dba80 <_ZL22Refresh_UnixTime_Cachex>
}
   dbe68:	4b01      	ldr	r3, [pc, #4]	; (dbe70 <_ZN9TimeClass3dayEv+0x14>)
   dbe6a:	68d8      	ldr	r0, [r3, #12]
   dbe6c:	bd08      	pop	{r3, pc}
   dbe6e:	bf00      	nop
   dbe70:	2003e594 	.word	0x2003e594

000dbe74 <_ZN9TimeClass7weekdayEv>:
{
   dbe74:	b508      	push	{r3, lr}
	return weekday(now());
   dbe76:	f7ff ffd4 	bl	dbe22 <_ZN9TimeClass3nowEv>
}
   dbe7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   dbe7e:	17c1      	asrs	r1, r0, #31
   dbe80:	f7ff be52 	b.w	dbb28 <_ZN9TimeClass7weekdayEx>

000dbe84 <_ZN9TimeClass5monthEv>:
{
   dbe84:	b508      	push	{r3, lr}
	return month(now());
   dbe86:	f7ff ffcc 	bl	dbe22 <_ZN9TimeClass3nowEv>
}
   dbe8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   dbe8e:	17c1      	asrs	r1, r0, #31
   dbe90:	f7ff be54 	b.w	dbb3c <_ZN9TimeClass5monthEx>

000dbe94 <_ZN9TimeClass5localEv>:
{
   dbe94:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   dbe96:	f7ff ffc4 	bl	dbe22 <_ZN9TimeClass3nowEv>
   dbe9a:	4b03      	ldr	r3, [pc, #12]	; (dbea8 <_ZN9TimeClass5localEv+0x14>)
   dbe9c:	4a03      	ldr	r2, [pc, #12]	; (dbeac <_ZN9TimeClass5localEv+0x18>)
   dbe9e:	681b      	ldr	r3, [r3, #0]
   dbea0:	6812      	ldr	r2, [r2, #0]
   dbea2:	4413      	add	r3, r2
}
   dbea4:	4418      	add	r0, r3
   dbea6:	bd08      	pop	{r3, pc}
   dbea8:	2003e5c0 	.word	0x2003e5c0
   dbeac:	2003e5b8 	.word	0x2003e5b8

000dbeb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dbeb0:	4b02      	ldr	r3, [pc, #8]	; (dbebc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dbeb2:	681a      	ldr	r2, [r3, #0]
   dbeb4:	4b02      	ldr	r3, [pc, #8]	; (dbec0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dbeb6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   dbeb8:	4770      	bx	lr
   dbeba:	bf00      	nop
   dbebc:	2003e0a8 	.word	0x2003e0a8
   dbec0:	2003e590 	.word	0x2003e590

000dbec4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   dbec4:	4770      	bx	lr

000dbec6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dbec6:	7441      	strb	r1, [r0, #17]
}
   dbec8:	4770      	bx	lr

000dbeca <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dbeca:	4770      	bx	lr

000dbecc <_ZN11USARTSerial17availableForWriteEv>:
{
   dbecc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   dbece:	7c00      	ldrb	r0, [r0, #16]
   dbed0:	f7fc fecc 	bl	d8c6c <hal_usart_available_data_for_write>
}
   dbed4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbed8:	bd08      	pop	{r3, pc}

000dbeda <_ZN11USARTSerial9availableEv>:
{
   dbeda:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dbedc:	7c00      	ldrb	r0, [r0, #16]
   dbede:	f7fc fe9d 	bl	d8c1c <hal_usart_available>
}
   dbee2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbee6:	bd08      	pop	{r3, pc}

000dbee8 <_ZN11USARTSerial4peekEv>:
{
   dbee8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dbeea:	7c00      	ldrb	r0, [r0, #16]
   dbeec:	f7fc fea6 	bl	d8c3c <hal_usart_peek>
}
   dbef0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbef4:	bd08      	pop	{r3, pc}

000dbef6 <_ZN11USARTSerial4readEv>:
{
   dbef6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dbef8:	7c00      	ldrb	r0, [r0, #16]
   dbefa:	f7fc fe97 	bl	d8c2c <hal_usart_read>
}
   dbefe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbf02:	bd08      	pop	{r3, pc}

000dbf04 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   dbf04:	7c00      	ldrb	r0, [r0, #16]
   dbf06:	f7fc bea1 	b.w	d8c4c <hal_usart_flush>

000dbf0a <_ZN11USARTSerial5writeEh>:
{
   dbf0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dbf0c:	7c45      	ldrb	r5, [r0, #17]
{
   dbf0e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dbf10:	b12d      	cbz	r5, dbf1e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   dbf12:	7c20      	ldrb	r0, [r4, #16]
}
   dbf14:	b003      	add	sp, #12
   dbf16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   dbf1a:	f7fc be77 	b.w	d8c0c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dbf1e:	7c00      	ldrb	r0, [r0, #16]
   dbf20:	9101      	str	r1, [sp, #4]
   dbf22:	f7fc fea3 	bl	d8c6c <hal_usart_available_data_for_write>
   dbf26:	2800      	cmp	r0, #0
   dbf28:	9901      	ldr	r1, [sp, #4]
   dbf2a:	dcf2      	bgt.n	dbf12 <_ZN11USARTSerial5writeEh+0x8>
}
   dbf2c:	4628      	mov	r0, r5
   dbf2e:	b003      	add	sp, #12
   dbf30:	bd30      	pop	{r4, r5, pc}

000dbf32 <_ZN11USARTSerialD0Ev>:
   dbf32:	b510      	push	{r4, lr}
   dbf34:	2114      	movs	r1, #20
   dbf36:	4604      	mov	r4, r0
   dbf38:	f000 fa90 	bl	dc45c <_ZdlPvj>
   dbf3c:	4620      	mov	r0, r4
   dbf3e:	bd10      	pop	{r4, pc}

000dbf40 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   dbf40:	b510      	push	{r4, lr}
   dbf42:	f04f 0c00 	mov.w	ip, #0
   dbf46:	4604      	mov	r4, r0
   dbf48:	4608      	mov	r0, r1
   dbf4a:	4611      	mov	r1, r2
   dbf4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dbf50:	e9c4 c201 	strd	ip, r2, [r4, #4]
   dbf54:	4a04      	ldr	r2, [pc, #16]	; (dbf68 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   dbf56:	6022      	str	r2, [r4, #0]
  _blocking = true;
   dbf58:	2201      	movs	r2, #1
  _serial = serial;
   dbf5a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dbf5c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   dbf5e:	461a      	mov	r2, r3
   dbf60:	f7fc fe44 	bl	d8bec <hal_usart_init>
}
   dbf64:	4620      	mov	r0, r4
   dbf66:	bd10      	pop	{r4, pc}
   dbf68:	000e0260 	.word	0x000e0260

000dbf6c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   dbf6c:	7c00      	ldrb	r0, [r0, #16]
   dbf6e:	2300      	movs	r3, #0
   dbf70:	f7fc be84 	b.w	d8c7c <hal_usart_begin_config>

000dbf74 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   dbf74:	2200      	movs	r2, #0
   dbf76:	f7ff bff9 	b.w	dbf6c <_ZN11USARTSerial5beginEmm>

000dbf7a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   dbf7a:	7c00      	ldrb	r0, [r0, #16]
   dbf7c:	f7fc be3e 	b.w	d8bfc <hal_usart_end>

000dbf80 <_Z22__fetch_global_Serial1v>:
{
   dbf80:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dbf82:	4c0d      	ldr	r4, [pc, #52]	; (dbfb8 <_Z22__fetch_global_Serial1v+0x38>)
   dbf84:	7821      	ldrb	r1, [r4, #0]
   dbf86:	f3bf 8f5b 	dmb	ish
   dbf8a:	f011 0101 	ands.w	r1, r1, #1
   dbf8e:	d110      	bne.n	dbfb2 <_Z22__fetch_global_Serial1v+0x32>
   dbf90:	4620      	mov	r0, r4
   dbf92:	9101      	str	r1, [sp, #4]
   dbf94:	f7f8 f890 	bl	d40b8 <__cxa_guard_acquire>
   dbf98:	9901      	ldr	r1, [sp, #4]
   dbf9a:	b150      	cbz	r0, dbfb2 <_Z22__fetch_global_Serial1v+0x32>
   dbf9c:	4b07      	ldr	r3, [pc, #28]	; (dbfbc <_Z22__fetch_global_Serial1v+0x3c>)
   dbf9e:	4a08      	ldr	r2, [pc, #32]	; (dbfc0 <_Z22__fetch_global_Serial1v+0x40>)
   dbfa0:	4808      	ldr	r0, [pc, #32]	; (dbfc4 <_Z22__fetch_global_Serial1v+0x44>)
   dbfa2:	f7ff ffcd 	bl	dbf40 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   dbfa6:	4620      	mov	r0, r4
   dbfa8:	f7f8 f88b 	bl	d40c2 <__cxa_guard_release>
   dbfac:	4806      	ldr	r0, [pc, #24]	; (dbfc8 <_Z22__fetch_global_Serial1v+0x48>)
   dbfae:	f000 ffe1 	bl	dcf74 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dbfb2:	4804      	ldr	r0, [pc, #16]	; (dbfc4 <_Z22__fetch_global_Serial1v+0x44>)
   dbfb4:	b002      	add	sp, #8
   dbfb6:	bd10      	pop	{r4, pc}
   dbfb8:	2003e5d0 	.word	0x2003e5d0
   dbfbc:	2003e658 	.word	0x2003e658
   dbfc0:	2003e5d4 	.word	0x2003e5d4
   dbfc4:	2003e6dc 	.word	0x2003e6dc
   dbfc8:	000dbecb 	.word	0x000dbecb

000dbfcc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dbfcc:	7441      	strb	r1, [r0, #17]
}
   dbfce:	4770      	bx	lr

000dbfd0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbfd0:	4770      	bx	lr

000dbfd2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dbfd2:	4770      	bx	lr

000dbfd4 <_ZN9USBSerial4readEv>:
{
   dbfd4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dbfd6:	2100      	movs	r1, #0
   dbfd8:	7c00      	ldrb	r0, [r0, #16]
   dbfda:	f7fc fe7f 	bl	d8cdc <HAL_USB_USART_Receive_Data>
}
   dbfde:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbfe2:	bd08      	pop	{r3, pc}

000dbfe4 <_ZN9USBSerial4peekEv>:
{
   dbfe4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dbfe6:	2101      	movs	r1, #1
   dbfe8:	7c00      	ldrb	r0, [r0, #16]
   dbfea:	f7fc fe77 	bl	d8cdc <HAL_USB_USART_Receive_Data>
}
   dbfee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbff2:	bd08      	pop	{r3, pc}

000dbff4 <_ZN9USBSerial17availableForWriteEv>:
{
   dbff4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dbff6:	7c00      	ldrb	r0, [r0, #16]
   dbff8:	f7fc fe68 	bl	d8ccc <HAL_USB_USART_Available_Data_For_Write>
}
   dbffc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc000:	bd08      	pop	{r3, pc}

000dc002 <_ZN9USBSerial9availableEv>:
{
   dc002:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dc004:	7c00      	ldrb	r0, [r0, #16]
   dc006:	f7fc fe59 	bl	d8cbc <HAL_USB_USART_Available_Data>
}
   dc00a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc00e:	bd08      	pop	{r3, pc}

000dc010 <_ZN9USBSerial5writeEh>:
{
   dc010:	b513      	push	{r0, r1, r4, lr}
   dc012:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dc014:	7c00      	ldrb	r0, [r0, #16]
{
   dc016:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dc018:	f7fc fe58 	bl	d8ccc <HAL_USB_USART_Available_Data_For_Write>
   dc01c:	2800      	cmp	r0, #0
   dc01e:	9901      	ldr	r1, [sp, #4]
   dc020:	dc01      	bgt.n	dc026 <_ZN9USBSerial5writeEh+0x16>
   dc022:	7c60      	ldrb	r0, [r4, #17]
   dc024:	b120      	cbz	r0, dc030 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dc026:	7c20      	ldrb	r0, [r4, #16]
   dc028:	f7fc fe60 	bl	d8cec <HAL_USB_USART_Send_Data>
   dc02c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   dc030:	b002      	add	sp, #8
   dc032:	bd10      	pop	{r4, pc}

000dc034 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   dc034:	7c00      	ldrb	r0, [r0, #16]
   dc036:	f7fc be61 	b.w	d8cfc <HAL_USB_USART_Flush_Data>

000dc03a <_ZN9USBSerialD0Ev>:
   dc03a:	b510      	push	{r4, lr}
   dc03c:	2114      	movs	r1, #20
   dc03e:	4604      	mov	r4, r0
   dc040:	f000 fa0c 	bl	dc45c <_ZdlPvj>
   dc044:	4620      	mov	r0, r4
   dc046:	bd10      	pop	{r4, pc}

000dc048 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dc048:	b510      	push	{r4, lr}
   dc04a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc04e:	4604      	mov	r4, r0
   dc050:	4608      	mov	r0, r1
   dc052:	2100      	movs	r1, #0
   dc054:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dc058:	4b04      	ldr	r3, [pc, #16]	; (dc06c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dc05a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   dc05c:	2301      	movs	r3, #1
  _serial = serial;
   dc05e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dc060:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   dc062:	4611      	mov	r1, r2
   dc064:	f7fc fe12 	bl	d8c8c <HAL_USB_USART_Init>
}
   dc068:	4620      	mov	r0, r4
   dc06a:	bd10      	pop	{r4, pc}
   dc06c:	000e0290 	.word	0x000e0290

000dc070 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dc070:	7c00      	ldrb	r0, [r0, #16]
   dc072:	2200      	movs	r2, #0
   dc074:	f7fc be12 	b.w	d8c9c <HAL_USB_USART_Begin>

000dc078 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   dc078:	7c00      	ldrb	r0, [r0, #16]
   dc07a:	f7fc be17 	b.w	d8cac <HAL_USB_USART_End>

000dc07e <_Z19acquireSerialBufferv>:
{
   dc07e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dc080:	2214      	movs	r2, #20
{
   dc082:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dc084:	2100      	movs	r1, #0
   dc086:	f000 ffb9 	bl	dcffc <memset>
}
   dc08a:	4620      	mov	r0, r4
   dc08c:	bd10      	pop	{r4, pc}
	...

000dc090 <_Z16_fetch_usbserialv>:
{
   dc090:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dc092:	4c0f      	ldr	r4, [pc, #60]	; (dc0d0 <_Z16_fetch_usbserialv+0x40>)
{
   dc094:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dc096:	a803      	add	r0, sp, #12
   dc098:	f7ff fff1 	bl	dc07e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dc09c:	7821      	ldrb	r1, [r4, #0]
   dc09e:	f3bf 8f5b 	dmb	ish
   dc0a2:	f011 0101 	ands.w	r1, r1, #1
   dc0a6:	d10f      	bne.n	dc0c8 <_Z16_fetch_usbserialv+0x38>
   dc0a8:	4620      	mov	r0, r4
   dc0aa:	9101      	str	r1, [sp, #4]
   dc0ac:	f7f8 f804 	bl	d40b8 <__cxa_guard_acquire>
   dc0b0:	9901      	ldr	r1, [sp, #4]
   dc0b2:	b148      	cbz	r0, dc0c8 <_Z16_fetch_usbserialv+0x38>
   dc0b4:	aa03      	add	r2, sp, #12
   dc0b6:	4807      	ldr	r0, [pc, #28]	; (dc0d4 <_Z16_fetch_usbserialv+0x44>)
   dc0b8:	f7ff ffc6 	bl	dc048 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dc0bc:	4620      	mov	r0, r4
   dc0be:	f7f8 f800 	bl	d40c2 <__cxa_guard_release>
   dc0c2:	4805      	ldr	r0, [pc, #20]	; (dc0d8 <_Z16_fetch_usbserialv+0x48>)
   dc0c4:	f000 ff56 	bl	dcf74 <atexit>
	return _usbserial;
}
   dc0c8:	4802      	ldr	r0, [pc, #8]	; (dc0d4 <_Z16_fetch_usbserialv+0x44>)
   dc0ca:	b008      	add	sp, #32
   dc0cc:	bd10      	pop	{r4, pc}
   dc0ce:	bf00      	nop
   dc0d0:	2003e6f0 	.word	0x2003e6f0
   dc0d4:	2003e6f4 	.word	0x2003e6f4
   dc0d8:	000dbfd1 	.word	0x000dbfd1

000dc0dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   dc0dc:	4b01      	ldr	r3, [pc, #4]	; (dc0e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   dc0de:	6018      	str	r0, [r3, #0]
    }, nullptr);
   dc0e0:	4770      	bx	lr
   dc0e2:	bf00      	nop
   dc0e4:	2003e0b8 	.word	0x2003e0b8

000dc0e8 <serialEventRun>:
{
   dc0e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dc0ea:	4b0b      	ldr	r3, [pc, #44]	; (dc118 <serialEventRun+0x30>)
   dc0ec:	b143      	cbz	r3, dc100 <serialEventRun+0x18>
   dc0ee:	f7ff ffcf 	bl	dc090 <_Z16_fetch_usbserialv>
   dc0f2:	6803      	ldr	r3, [r0, #0]
   dc0f4:	691b      	ldr	r3, [r3, #16]
   dc0f6:	4798      	blx	r3
   dc0f8:	2800      	cmp	r0, #0
   dc0fa:	dd01      	ble.n	dc100 <serialEventRun+0x18>
        serialEvent();
   dc0fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   dc100:	4b06      	ldr	r3, [pc, #24]	; (dc11c <serialEventRun+0x34>)
   dc102:	b143      	cbz	r3, dc116 <serialEventRun+0x2e>
   dc104:	f7ff ff3c 	bl	dbf80 <_Z22__fetch_global_Serial1v>
   dc108:	6803      	ldr	r3, [r0, #0]
   dc10a:	691b      	ldr	r3, [r3, #16]
   dc10c:	4798      	blx	r3
   dc10e:	2800      	cmp	r0, #0
   dc110:	dd01      	ble.n	dc116 <serialEventRun+0x2e>
        serialEvent1();
   dc112:	f3af 8000 	nop.w
}
   dc116:	bd08      	pop	{r3, pc}
	...

000dc120 <_post_loop>:
{
   dc120:	b508      	push	{r3, lr}
	serialEventRun();
   dc122:	f7ff ffe1 	bl	dc0e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dc126:	f7fc fc09 	bl	d893c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dc12a:	4b01      	ldr	r3, [pc, #4]	; (dc130 <_post_loop+0x10>)
   dc12c:	6018      	str	r0, [r3, #0]
}
   dc12e:	bd08      	pop	{r3, pc}
   dc130:	2003e71c 	.word	0x2003e71c

000dc134 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dc134:	4805      	ldr	r0, [pc, #20]	; (dc14c <_Z33system_initialize_user_backup_ramv+0x18>)
   dc136:	4a06      	ldr	r2, [pc, #24]	; (dc150 <_Z33system_initialize_user_backup_ramv+0x1c>)
   dc138:	4906      	ldr	r1, [pc, #24]	; (dc154 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   dc13a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dc13c:	1a12      	subs	r2, r2, r0
   dc13e:	f000 ff35 	bl	dcfac <memcpy>
    __backup_sram_signature = signature;
   dc142:	4b05      	ldr	r3, [pc, #20]	; (dc158 <_Z33system_initialize_user_backup_ramv+0x24>)
   dc144:	4a05      	ldr	r2, [pc, #20]	; (dc15c <_Z33system_initialize_user_backup_ramv+0x28>)
   dc146:	601a      	str	r2, [r3, #0]
}
   dc148:	bd08      	pop	{r3, pc}
   dc14a:	bf00      	nop
   dc14c:	2003f400 	.word	0x2003f400
   dc150:	2003f404 	.word	0x2003f404
   dc154:	000e05c0 	.word	0x000e05c0
   dc158:	2003f400 	.word	0x2003f400
   dc15c:	9a271c1e 	.word	0x9a271c1e

000dc160 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dc160:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dc162:	2300      	movs	r3, #0
   dc164:	9300      	str	r3, [sp, #0]
   dc166:	461a      	mov	r2, r3
   dc168:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dc16c:	f7fc fe5a 	bl	d8e24 <system_ctrl_set_result>
}
   dc170:	b003      	add	sp, #12
   dc172:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc178 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   dc178:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dc17a:	8843      	ldrh	r3, [r0, #2]
   dc17c:	2b0a      	cmp	r3, #10
   dc17e:	d008      	beq.n	dc192 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dc180:	2b50      	cmp	r3, #80	; 0x50
   dc182:	d10b      	bne.n	dc19c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   dc184:	4b09      	ldr	r3, [pc, #36]	; (dc1ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dc186:	681b      	ldr	r3, [r3, #0]
   dc188:	b14b      	cbz	r3, dc19e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   dc18a:	b003      	add	sp, #12
   dc18c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   dc190:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   dc192:	f7ff ffe5 	bl	dc160 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   dc196:	b003      	add	sp, #12
   dc198:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dc19c:	2300      	movs	r3, #0
   dc19e:	9300      	str	r3, [sp, #0]
   dc1a0:	461a      	mov	r2, r3
   dc1a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dc1a6:	f7fc fe3d 	bl	d8e24 <system_ctrl_set_result>
}
   dc1aa:	e7f4      	b.n	dc196 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   dc1ac:	2003e70c 	.word	0x2003e70c

000dc1b0 <module_user_init_hook>:
{
   dc1b0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dc1b2:	4812      	ldr	r0, [pc, #72]	; (dc1fc <module_user_init_hook+0x4c>)
   dc1b4:	2100      	movs	r1, #0
   dc1b6:	f7fc ff7d 	bl	d90b4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   dc1ba:	4b11      	ldr	r3, [pc, #68]	; (dc200 <module_user_init_hook+0x50>)
   dc1bc:	681a      	ldr	r2, [r3, #0]
   dc1be:	4b11      	ldr	r3, [pc, #68]	; (dc204 <module_user_init_hook+0x54>)
   dc1c0:	429a      	cmp	r2, r3
   dc1c2:	4b11      	ldr	r3, [pc, #68]	; (dc208 <module_user_init_hook+0x58>)
   dc1c4:	bf0c      	ite	eq
   dc1c6:	2201      	moveq	r2, #1
   dc1c8:	2200      	movne	r2, #0
   dc1ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dc1cc:	d001      	beq.n	dc1d2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   dc1ce:	f7ff ffb1 	bl	dc134 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dc1d2:	f7fc fb9b 	bl	d890c <HAL_RNG_GetRandomNumber>
   dc1d6:	4604      	mov	r4, r0
    srand(seed);
   dc1d8:	f000 ff18 	bl	dd00c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dc1dc:	4b0b      	ldr	r3, [pc, #44]	; (dc20c <module_user_init_hook+0x5c>)
   dc1de:	b113      	cbz	r3, dc1e6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   dc1e0:	4620      	mov	r0, r4
   dc1e2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dc1e6:	2100      	movs	r1, #0
   dc1e8:	4808      	ldr	r0, [pc, #32]	; (dc20c <module_user_init_hook+0x5c>)
   dc1ea:	f7fc fea3 	bl	d8f34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   dc1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dc1f2:	4807      	ldr	r0, [pc, #28]	; (dc210 <module_user_init_hook+0x60>)
   dc1f4:	2100      	movs	r1, #0
   dc1f6:	f7fc be0b 	b.w	d8e10 <system_ctrl_set_app_request_handler>
   dc1fa:	bf00      	nop
   dc1fc:	000dc0dd 	.word	0x000dc0dd
   dc200:	2003f400 	.word	0x2003f400
   dc204:	9a271c1e 	.word	0x9a271c1e
   dc208:	2003e708 	.word	0x2003e708
   dc20c:	00000000 	.word	0x00000000
   dc210:	000dc179 	.word	0x000dc179

000dc214 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   dc214:	b508      	push	{r3, lr}
   dc216:	4b02      	ldr	r3, [pc, #8]	; (dc220 <spark_protocol_instance+0xc>)
   dc218:	681b      	ldr	r3, [r3, #0]
   dc21a:	681b      	ldr	r3, [r3, #0]
   dc21c:	9301      	str	r3, [sp, #4]
   dc21e:	bd08      	pop	{r3, pc}
   dc220:	0003025c 	.word	0x0003025c

000dc224 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   dc224:	b508      	push	{r3, lr}
   dc226:	4b02      	ldr	r3, [pc, #8]	; (dc230 <spark_protocol_set_product_id+0xc>)
   dc228:	681b      	ldr	r3, [r3, #0]
   dc22a:	685b      	ldr	r3, [r3, #4]
   dc22c:	9301      	str	r3, [sp, #4]
   dc22e:	bd08      	pop	{r3, pc}
   dc230:	0003025c 	.word	0x0003025c

000dc234 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   dc234:	b508      	push	{r3, lr}
   dc236:	4b02      	ldr	r3, [pc, #8]	; (dc240 <spark_protocol_set_product_firmware_version+0xc>)
   dc238:	681b      	ldr	r3, [r3, #0]
   dc23a:	689b      	ldr	r3, [r3, #8]
   dc23c:	9301      	str	r3, [sp, #4]
   dc23e:	bd08      	pop	{r3, pc}
   dc240:	0003025c 	.word	0x0003025c

000dc244 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   dc244:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   dc246:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   dc248:	d902      	bls.n	dc250 <pinAvailable+0xc>
    return false;
   dc24a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   dc24c:	b002      	add	sp, #8
   dc24e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   dc250:	f1a0 030b 	sub.w	r3, r0, #11
   dc254:	2b02      	cmp	r3, #2
   dc256:	d81a      	bhi.n	dc28e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dc258:	4c17      	ldr	r4, [pc, #92]	; (dc2b8 <pinAvailable+0x74>)
   dc25a:	7821      	ldrb	r1, [r4, #0]
   dc25c:	f3bf 8f5b 	dmb	ish
   dc260:	f011 0101 	ands.w	r1, r1, #1
   dc264:	d10b      	bne.n	dc27e <pinAvailable+0x3a>
   dc266:	4620      	mov	r0, r4
   dc268:	9101      	str	r1, [sp, #4]
   dc26a:	f7f7 ff25 	bl	d40b8 <__cxa_guard_acquire>
   dc26e:	9901      	ldr	r1, [sp, #4]
   dc270:	b128      	cbz	r0, dc27e <pinAvailable+0x3a>
   dc272:	4812      	ldr	r0, [pc, #72]	; (dc2bc <pinAvailable+0x78>)
   dc274:	f7ff f9ae 	bl	db5d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   dc278:	4620      	mov	r0, r4
   dc27a:	f7f7 ff22 	bl	d40c2 <__cxa_guard_release>
   dc27e:	4b0f      	ldr	r3, [pc, #60]	; (dc2bc <pinAvailable+0x78>)
   dc280:	7818      	ldrb	r0, [r3, #0]
   dc282:	f7fc fc4b 	bl	d8b1c <hal_spi_is_enabled>
   dc286:	2800      	cmp	r0, #0
   dc288:	d1df      	bne.n	dc24a <pinAvailable+0x6>
  return true; // 'pin' is available
   dc28a:	2001      	movs	r0, #1
   dc28c:	e7de      	b.n	dc24c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   dc28e:	2801      	cmp	r0, #1
   dc290:	d809      	bhi.n	dc2a6 <pinAvailable+0x62>
   dc292:	f000 f89b 	bl	dc3cc <_Z19__fetch_global_Wirev>
   dc296:	2100      	movs	r1, #0
   dc298:	7c00      	ldrb	r0, [r0, #16]
   dc29a:	f7fc fbf7 	bl	d8a8c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   dc29e:	f080 0001 	eor.w	r0, r0, #1
   dc2a2:	b2c0      	uxtb	r0, r0
   dc2a4:	e7d2      	b.n	dc24c <pinAvailable+0x8>
   dc2a6:	3809      	subs	r0, #9
   dc2a8:	2801      	cmp	r0, #1
   dc2aa:	d8ee      	bhi.n	dc28a <pinAvailable+0x46>
   dc2ac:	f7ff fe68 	bl	dbf80 <_Z22__fetch_global_Serial1v>
   dc2b0:	7c00      	ldrb	r0, [r0, #16]
   dc2b2:	f7fc fcd3 	bl	d8c5c <hal_usart_is_enabled>
   dc2b6:	e7f2      	b.n	dc29e <pinAvailable+0x5a>
   dc2b8:	2003e710 	.word	0x2003e710
   dc2bc:	2003e714 	.word	0x2003e714

000dc2c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dc2c0:	2823      	cmp	r0, #35	; 0x23
{
   dc2c2:	b538      	push	{r3, r4, r5, lr}
   dc2c4:	4604      	mov	r4, r0
   dc2c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dc2c8:	d80a      	bhi.n	dc2e0 <pinMode+0x20>
   dc2ca:	29ff      	cmp	r1, #255	; 0xff
   dc2cc:	d008      	beq.n	dc2e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   dc2ce:	f7ff ffb9 	bl	dc244 <pinAvailable>
   dc2d2:	b128      	cbz	r0, dc2e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   dc2d4:	4629      	mov	r1, r5
   dc2d6:	4620      	mov	r0, r4
}
   dc2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   dc2dc:	f7fc bb5e 	b.w	d899c <HAL_Pin_Mode>
}
   dc2e0:	bd38      	pop	{r3, r4, r5, pc}

000dc2e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dc2e2:	b538      	push	{r3, r4, r5, lr}
   dc2e4:	4604      	mov	r4, r0
   dc2e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dc2e8:	f7fc fb60 	bl	d89ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dc2ec:	28ff      	cmp	r0, #255	; 0xff
   dc2ee:	d010      	beq.n	dc312 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   dc2f0:	2806      	cmp	r0, #6
   dc2f2:	d804      	bhi.n	dc2fe <digitalWrite+0x1c>
   dc2f4:	234d      	movs	r3, #77	; 0x4d
   dc2f6:	fa23 f000 	lsr.w	r0, r3, r0
   dc2fa:	07c3      	lsls	r3, r0, #31
   dc2fc:	d409      	bmi.n	dc312 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dc2fe:	4620      	mov	r0, r4
   dc300:	f7ff ffa0 	bl	dc244 <pinAvailable>
   dc304:	b128      	cbz	r0, dc312 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dc306:	4629      	mov	r1, r5
   dc308:	4620      	mov	r0, r4
}
   dc30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   dc30e:	f7fc bb55 	b.w	d89bc <HAL_GPIO_Write>
}
   dc312:	bd38      	pop	{r3, r4, r5, pc}

000dc314 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dc314:	b510      	push	{r4, lr}
   dc316:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dc318:	f7fc fb48 	bl	d89ac <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   dc31c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   dc31e:	b2db      	uxtb	r3, r3
   dc320:	2b01      	cmp	r3, #1
   dc322:	d908      	bls.n	dc336 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dc324:	4620      	mov	r0, r4
   dc326:	f7ff ff8d 	bl	dc244 <pinAvailable>
   dc32a:	b120      	cbz	r0, dc336 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dc32c:	4620      	mov	r0, r4
}
   dc32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   dc332:	f7fc bb4b 	b.w	d89cc <HAL_GPIO_Read>
}
   dc336:	2000      	movs	r0, #0
   dc338:	bd10      	pop	{r4, pc}

000dc33a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dc33a:	280d      	cmp	r0, #13
{
   dc33c:	b510      	push	{r4, lr}
   dc33e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   dc340:	bf9c      	itt	ls
   dc342:	340e      	addls	r4, #14
   dc344:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dc346:	4620      	mov	r0, r4
   dc348:	f7ff ff7c 	bl	dc244 <pinAvailable>
   dc34c:	b150      	cbz	r0, dc364 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dc34e:	2103      	movs	r1, #3
   dc350:	4620      	mov	r0, r4
   dc352:	f7fc fb1b 	bl	d898c <HAL_Validate_Pin_Function>
   dc356:	2803      	cmp	r0, #3
   dc358:	d104      	bne.n	dc364 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   dc35a:	4620      	mov	r0, r4
}
   dc35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   dc360:	f7fc bb4c 	b.w	d89fc <hal_adc_read>
}
   dc364:	2000      	movs	r0, #0
   dc366:	bd10      	pop	{r4, pc}

000dc368 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dc368:	4770      	bx	lr

000dc36a <__tcf_1>:
   dc36a:	4770      	bx	lr

000dc36c <_Z17acquireWireBufferv>:
{
   dc36c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   dc36e:	2300      	movs	r3, #0
   dc370:	2520      	movs	r5, #32
   dc372:	8043      	strh	r3, [r0, #2]
   dc374:	2314      	movs	r3, #20
{
   dc376:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   dc378:	8003      	strh	r3, [r0, #0]
   dc37a:	6085      	str	r5, [r0, #8]
   dc37c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dc37e:	4906      	ldr	r1, [pc, #24]	; (dc398 <_Z17acquireWireBufferv+0x2c>)
   dc380:	4628      	mov	r0, r5
   dc382:	f000 f86f 	bl	dc464 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dc386:	4904      	ldr	r1, [pc, #16]	; (dc398 <_Z17acquireWireBufferv+0x2c>)
	};
   dc388:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dc38a:	4628      	mov	r0, r5
   dc38c:	f000 f86a 	bl	dc464 <_ZnajRKSt9nothrow_t>
	};
   dc390:	60e0      	str	r0, [r4, #12]
}
   dc392:	4620      	mov	r0, r4
   dc394:	bd38      	pop	{r3, r4, r5, pc}
   dc396:	bf00      	nop
   dc398:	000e02b8 	.word	0x000e02b8

000dc39c <_Z18acquireWire1Bufferv>:
   dc39c:	b538      	push	{r3, r4, r5, lr}
   dc39e:	2300      	movs	r3, #0
   dc3a0:	2520      	movs	r5, #32
   dc3a2:	8043      	strh	r3, [r0, #2]
   dc3a4:	2314      	movs	r3, #20
   dc3a6:	4604      	mov	r4, r0
   dc3a8:	8003      	strh	r3, [r0, #0]
   dc3aa:	6085      	str	r5, [r0, #8]
   dc3ac:	6105      	str	r5, [r0, #16]
   dc3ae:	4906      	ldr	r1, [pc, #24]	; (dc3c8 <_Z18acquireWire1Bufferv+0x2c>)
   dc3b0:	4628      	mov	r0, r5
   dc3b2:	f000 f857 	bl	dc464 <_ZnajRKSt9nothrow_t>
   dc3b6:	4904      	ldr	r1, [pc, #16]	; (dc3c8 <_Z18acquireWire1Bufferv+0x2c>)
   dc3b8:	6060      	str	r0, [r4, #4]
   dc3ba:	4628      	mov	r0, r5
   dc3bc:	f000 f852 	bl	dc464 <_ZnajRKSt9nothrow_t>
   dc3c0:	60e0      	str	r0, [r4, #12]
   dc3c2:	4620      	mov	r0, r4
   dc3c4:	bd38      	pop	{r3, r4, r5, pc}
   dc3c6:	bf00      	nop
   dc3c8:	000e02b8 	.word	0x000e02b8

000dc3cc <_Z19__fetch_global_Wirev>:
{
   dc3cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dc3ce:	4d0e      	ldr	r5, [pc, #56]	; (dc408 <_Z19__fetch_global_Wirev+0x3c>)
   dc3d0:	7829      	ldrb	r1, [r5, #0]
   dc3d2:	f3bf 8f5b 	dmb	ish
   dc3d6:	f011 0401 	ands.w	r4, r1, #1
{
   dc3da:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dc3dc:	d111      	bne.n	dc402 <_Z19__fetch_global_Wirev+0x36>
   dc3de:	4628      	mov	r0, r5
   dc3e0:	f7f7 fe6a 	bl	d40b8 <__cxa_guard_acquire>
   dc3e4:	b168      	cbz	r0, dc402 <_Z19__fetch_global_Wirev+0x36>
   dc3e6:	a801      	add	r0, sp, #4
   dc3e8:	f7ff ffc0 	bl	dc36c <_Z17acquireWireBufferv>
   dc3ec:	aa01      	add	r2, sp, #4
   dc3ee:	4621      	mov	r1, r4
   dc3f0:	4806      	ldr	r0, [pc, #24]	; (dc40c <_Z19__fetch_global_Wirev+0x40>)
   dc3f2:	f7fd fc39 	bl	d9c68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dc3f6:	4628      	mov	r0, r5
   dc3f8:	f7f7 fe63 	bl	d40c2 <__cxa_guard_release>
   dc3fc:	4804      	ldr	r0, [pc, #16]	; (dc410 <_Z19__fetch_global_Wirev+0x44>)
   dc3fe:	f000 fdb9 	bl	dcf74 <atexit>
	return wire;
}
   dc402:	4802      	ldr	r0, [pc, #8]	; (dc40c <_Z19__fetch_global_Wirev+0x40>)
   dc404:	b007      	add	sp, #28
   dc406:	bd30      	pop	{r4, r5, pc}
   dc408:	2003e720 	.word	0x2003e720
   dc40c:	2003e728 	.word	0x2003e728
   dc410:	000dc369 	.word	0x000dc369

000dc414 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dc414:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dc416:	4c0e      	ldr	r4, [pc, #56]	; (dc450 <_Z20__fetch_global_Wire1v+0x3c>)
   dc418:	7823      	ldrb	r3, [r4, #0]
   dc41a:	f3bf 8f5b 	dmb	ish
   dc41e:	07db      	lsls	r3, r3, #31
{
   dc420:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dc422:	d411      	bmi.n	dc448 <_Z20__fetch_global_Wire1v+0x34>
   dc424:	4620      	mov	r0, r4
   dc426:	f7f7 fe47 	bl	d40b8 <__cxa_guard_acquire>
   dc42a:	b168      	cbz	r0, dc448 <_Z20__fetch_global_Wire1v+0x34>
   dc42c:	a801      	add	r0, sp, #4
   dc42e:	f7ff ffb5 	bl	dc39c <_Z18acquireWire1Bufferv>
   dc432:	aa01      	add	r2, sp, #4
   dc434:	2101      	movs	r1, #1
   dc436:	4807      	ldr	r0, [pc, #28]	; (dc454 <_Z20__fetch_global_Wire1v+0x40>)
   dc438:	f7fd fc16 	bl	d9c68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dc43c:	4620      	mov	r0, r4
   dc43e:	f7f7 fe40 	bl	d40c2 <__cxa_guard_release>
   dc442:	4805      	ldr	r0, [pc, #20]	; (dc458 <_Z20__fetch_global_Wire1v+0x44>)
   dc444:	f000 fd96 	bl	dcf74 <atexit>
	return wire;
}
   dc448:	4802      	ldr	r0, [pc, #8]	; (dc454 <_Z20__fetch_global_Wire1v+0x40>)
   dc44a:	b006      	add	sp, #24
   dc44c:	bd10      	pop	{r4, pc}
   dc44e:	bf00      	nop
   dc450:	2003e724 	.word	0x2003e724
   dc454:	2003e73c 	.word	0x2003e73c
   dc458:	000dc36b 	.word	0x000dc36b

000dc45c <_ZdlPvj>:
   dc45c:	f7f7 be1f 	b.w	d409e <_ZdlPv>

000dc460 <_ZnwjRKSt9nothrow_t>:
   dc460:	f7f7 be19 	b.w	d4096 <_Znwj>

000dc464 <_ZnajRKSt9nothrow_t>:
   dc464:	f7f7 be19 	b.w	d409a <_Znaj>

000dc468 <_ZSt17__throw_bad_allocv>:
   dc468:	b508      	push	{r3, lr}
   dc46a:	f7fc fe0b 	bl	d9084 <abort>

000dc46e <_ZSt20__throw_length_errorPKc>:
   dc46e:	b508      	push	{r3, lr}
   dc470:	f7fc fe08 	bl	d9084 <abort>

000dc474 <_ZSt25__throw_bad_function_callv>:
   dc474:	b508      	push	{r3, lr}
   dc476:	f7fc fe05 	bl	d9084 <abort>
	...

000dc47c <__aeabi_drsub>:
   dc47c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dc480:	e002      	b.n	dc488 <__adddf3>
   dc482:	bf00      	nop

000dc484 <__aeabi_dsub>:
   dc484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dc488 <__adddf3>:
   dc488:	b530      	push	{r4, r5, lr}
   dc48a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dc48e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dc492:	ea94 0f05 	teq	r4, r5
   dc496:	bf08      	it	eq
   dc498:	ea90 0f02 	teqeq	r0, r2
   dc49c:	bf1f      	itttt	ne
   dc49e:	ea54 0c00 	orrsne.w	ip, r4, r0
   dc4a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   dc4a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dc4aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc4ae:	f000 80e2 	beq.w	dc676 <__adddf3+0x1ee>
   dc4b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dc4b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dc4ba:	bfb8      	it	lt
   dc4bc:	426d      	neglt	r5, r5
   dc4be:	dd0c      	ble.n	dc4da <__adddf3+0x52>
   dc4c0:	442c      	add	r4, r5
   dc4c2:	ea80 0202 	eor.w	r2, r0, r2
   dc4c6:	ea81 0303 	eor.w	r3, r1, r3
   dc4ca:	ea82 0000 	eor.w	r0, r2, r0
   dc4ce:	ea83 0101 	eor.w	r1, r3, r1
   dc4d2:	ea80 0202 	eor.w	r2, r0, r2
   dc4d6:	ea81 0303 	eor.w	r3, r1, r3
   dc4da:	2d36      	cmp	r5, #54	; 0x36
   dc4dc:	bf88      	it	hi
   dc4de:	bd30      	pophi	{r4, r5, pc}
   dc4e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc4e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc4e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dc4ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dc4f0:	d002      	beq.n	dc4f8 <__adddf3+0x70>
   dc4f2:	4240      	negs	r0, r0
   dc4f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc4f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dc4fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dc504:	d002      	beq.n	dc50c <__adddf3+0x84>
   dc506:	4252      	negs	r2, r2
   dc508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc50c:	ea94 0f05 	teq	r4, r5
   dc510:	f000 80a7 	beq.w	dc662 <__adddf3+0x1da>
   dc514:	f1a4 0401 	sub.w	r4, r4, #1
   dc518:	f1d5 0e20 	rsbs	lr, r5, #32
   dc51c:	db0d      	blt.n	dc53a <__adddf3+0xb2>
   dc51e:	fa02 fc0e 	lsl.w	ip, r2, lr
   dc522:	fa22 f205 	lsr.w	r2, r2, r5
   dc526:	1880      	adds	r0, r0, r2
   dc528:	f141 0100 	adc.w	r1, r1, #0
   dc52c:	fa03 f20e 	lsl.w	r2, r3, lr
   dc530:	1880      	adds	r0, r0, r2
   dc532:	fa43 f305 	asr.w	r3, r3, r5
   dc536:	4159      	adcs	r1, r3
   dc538:	e00e      	b.n	dc558 <__adddf3+0xd0>
   dc53a:	f1a5 0520 	sub.w	r5, r5, #32
   dc53e:	f10e 0e20 	add.w	lr, lr, #32
   dc542:	2a01      	cmp	r2, #1
   dc544:	fa03 fc0e 	lsl.w	ip, r3, lr
   dc548:	bf28      	it	cs
   dc54a:	f04c 0c02 	orrcs.w	ip, ip, #2
   dc54e:	fa43 f305 	asr.w	r3, r3, r5
   dc552:	18c0      	adds	r0, r0, r3
   dc554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dc558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc55c:	d507      	bpl.n	dc56e <__adddf3+0xe6>
   dc55e:	f04f 0e00 	mov.w	lr, #0
   dc562:	f1dc 0c00 	rsbs	ip, ip, #0
   dc566:	eb7e 0000 	sbcs.w	r0, lr, r0
   dc56a:	eb6e 0101 	sbc.w	r1, lr, r1
   dc56e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc572:	d31b      	bcc.n	dc5ac <__adddf3+0x124>
   dc574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dc578:	d30c      	bcc.n	dc594 <__adddf3+0x10c>
   dc57a:	0849      	lsrs	r1, r1, #1
   dc57c:	ea5f 0030 	movs.w	r0, r0, rrx
   dc580:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dc584:	f104 0401 	add.w	r4, r4, #1
   dc588:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dc58c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dc590:	f080 809a 	bcs.w	dc6c8 <__adddf3+0x240>
   dc594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc598:	bf08      	it	eq
   dc59a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc59e:	f150 0000 	adcs.w	r0, r0, #0
   dc5a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc5a6:	ea41 0105 	orr.w	r1, r1, r5
   dc5aa:	bd30      	pop	{r4, r5, pc}
   dc5ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dc5b0:	4140      	adcs	r0, r0
   dc5b2:	eb41 0101 	adc.w	r1, r1, r1
   dc5b6:	3c01      	subs	r4, #1
   dc5b8:	bf28      	it	cs
   dc5ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dc5be:	d2e9      	bcs.n	dc594 <__adddf3+0x10c>
   dc5c0:	f091 0f00 	teq	r1, #0
   dc5c4:	bf04      	itt	eq
   dc5c6:	4601      	moveq	r1, r0
   dc5c8:	2000      	moveq	r0, #0
   dc5ca:	fab1 f381 	clz	r3, r1
   dc5ce:	bf08      	it	eq
   dc5d0:	3320      	addeq	r3, #32
   dc5d2:	f1a3 030b 	sub.w	r3, r3, #11
   dc5d6:	f1b3 0220 	subs.w	r2, r3, #32
   dc5da:	da0c      	bge.n	dc5f6 <__adddf3+0x16e>
   dc5dc:	320c      	adds	r2, #12
   dc5de:	dd08      	ble.n	dc5f2 <__adddf3+0x16a>
   dc5e0:	f102 0c14 	add.w	ip, r2, #20
   dc5e4:	f1c2 020c 	rsb	r2, r2, #12
   dc5e8:	fa01 f00c 	lsl.w	r0, r1, ip
   dc5ec:	fa21 f102 	lsr.w	r1, r1, r2
   dc5f0:	e00c      	b.n	dc60c <__adddf3+0x184>
   dc5f2:	f102 0214 	add.w	r2, r2, #20
   dc5f6:	bfd8      	it	le
   dc5f8:	f1c2 0c20 	rsble	ip, r2, #32
   dc5fc:	fa01 f102 	lsl.w	r1, r1, r2
   dc600:	fa20 fc0c 	lsr.w	ip, r0, ip
   dc604:	bfdc      	itt	le
   dc606:	ea41 010c 	orrle.w	r1, r1, ip
   dc60a:	4090      	lslle	r0, r2
   dc60c:	1ae4      	subs	r4, r4, r3
   dc60e:	bfa2      	ittt	ge
   dc610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dc614:	4329      	orrge	r1, r5
   dc616:	bd30      	popge	{r4, r5, pc}
   dc618:	ea6f 0404 	mvn.w	r4, r4
   dc61c:	3c1f      	subs	r4, #31
   dc61e:	da1c      	bge.n	dc65a <__adddf3+0x1d2>
   dc620:	340c      	adds	r4, #12
   dc622:	dc0e      	bgt.n	dc642 <__adddf3+0x1ba>
   dc624:	f104 0414 	add.w	r4, r4, #20
   dc628:	f1c4 0220 	rsb	r2, r4, #32
   dc62c:	fa20 f004 	lsr.w	r0, r0, r4
   dc630:	fa01 f302 	lsl.w	r3, r1, r2
   dc634:	ea40 0003 	orr.w	r0, r0, r3
   dc638:	fa21 f304 	lsr.w	r3, r1, r4
   dc63c:	ea45 0103 	orr.w	r1, r5, r3
   dc640:	bd30      	pop	{r4, r5, pc}
   dc642:	f1c4 040c 	rsb	r4, r4, #12
   dc646:	f1c4 0220 	rsb	r2, r4, #32
   dc64a:	fa20 f002 	lsr.w	r0, r0, r2
   dc64e:	fa01 f304 	lsl.w	r3, r1, r4
   dc652:	ea40 0003 	orr.w	r0, r0, r3
   dc656:	4629      	mov	r1, r5
   dc658:	bd30      	pop	{r4, r5, pc}
   dc65a:	fa21 f004 	lsr.w	r0, r1, r4
   dc65e:	4629      	mov	r1, r5
   dc660:	bd30      	pop	{r4, r5, pc}
   dc662:	f094 0f00 	teq	r4, #0
   dc666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dc66a:	bf06      	itte	eq
   dc66c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dc670:	3401      	addeq	r4, #1
   dc672:	3d01      	subne	r5, #1
   dc674:	e74e      	b.n	dc514 <__adddf3+0x8c>
   dc676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc67a:	bf18      	it	ne
   dc67c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc680:	d029      	beq.n	dc6d6 <__adddf3+0x24e>
   dc682:	ea94 0f05 	teq	r4, r5
   dc686:	bf08      	it	eq
   dc688:	ea90 0f02 	teqeq	r0, r2
   dc68c:	d005      	beq.n	dc69a <__adddf3+0x212>
   dc68e:	ea54 0c00 	orrs.w	ip, r4, r0
   dc692:	bf04      	itt	eq
   dc694:	4619      	moveq	r1, r3
   dc696:	4610      	moveq	r0, r2
   dc698:	bd30      	pop	{r4, r5, pc}
   dc69a:	ea91 0f03 	teq	r1, r3
   dc69e:	bf1e      	ittt	ne
   dc6a0:	2100      	movne	r1, #0
   dc6a2:	2000      	movne	r0, #0
   dc6a4:	bd30      	popne	{r4, r5, pc}
   dc6a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dc6aa:	d105      	bne.n	dc6b8 <__adddf3+0x230>
   dc6ac:	0040      	lsls	r0, r0, #1
   dc6ae:	4149      	adcs	r1, r1
   dc6b0:	bf28      	it	cs
   dc6b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dc6b6:	bd30      	pop	{r4, r5, pc}
   dc6b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dc6bc:	bf3c      	itt	cc
   dc6be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dc6c2:	bd30      	popcc	{r4, r5, pc}
   dc6c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc6c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dc6cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc6d0:	f04f 0000 	mov.w	r0, #0
   dc6d4:	bd30      	pop	{r4, r5, pc}
   dc6d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc6da:	bf1a      	itte	ne
   dc6dc:	4619      	movne	r1, r3
   dc6de:	4610      	movne	r0, r2
   dc6e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dc6e4:	bf1c      	itt	ne
   dc6e6:	460b      	movne	r3, r1
   dc6e8:	4602      	movne	r2, r0
   dc6ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc6ee:	bf06      	itte	eq
   dc6f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dc6f4:	ea91 0f03 	teqeq	r1, r3
   dc6f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dc6fc:	bd30      	pop	{r4, r5, pc}
   dc6fe:	bf00      	nop

000dc700 <__aeabi_ui2d>:
   dc700:	f090 0f00 	teq	r0, #0
   dc704:	bf04      	itt	eq
   dc706:	2100      	moveq	r1, #0
   dc708:	4770      	bxeq	lr
   dc70a:	b530      	push	{r4, r5, lr}
   dc70c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc710:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc714:	f04f 0500 	mov.w	r5, #0
   dc718:	f04f 0100 	mov.w	r1, #0
   dc71c:	e750      	b.n	dc5c0 <__adddf3+0x138>
   dc71e:	bf00      	nop

000dc720 <__aeabi_i2d>:
   dc720:	f090 0f00 	teq	r0, #0
   dc724:	bf04      	itt	eq
   dc726:	2100      	moveq	r1, #0
   dc728:	4770      	bxeq	lr
   dc72a:	b530      	push	{r4, r5, lr}
   dc72c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc730:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dc738:	bf48      	it	mi
   dc73a:	4240      	negmi	r0, r0
   dc73c:	f04f 0100 	mov.w	r1, #0
   dc740:	e73e      	b.n	dc5c0 <__adddf3+0x138>
   dc742:	bf00      	nop

000dc744 <__aeabi_f2d>:
   dc744:	0042      	lsls	r2, r0, #1
   dc746:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dc74a:	ea4f 0131 	mov.w	r1, r1, rrx
   dc74e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dc752:	bf1f      	itttt	ne
   dc754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dc758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dc75c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dc760:	4770      	bxne	lr
   dc762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dc766:	bf08      	it	eq
   dc768:	4770      	bxeq	lr
   dc76a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dc76e:	bf04      	itt	eq
   dc770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dc774:	4770      	bxeq	lr
   dc776:	b530      	push	{r4, r5, lr}
   dc778:	f44f 7460 	mov.w	r4, #896	; 0x380
   dc77c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc784:	e71c      	b.n	dc5c0 <__adddf3+0x138>
   dc786:	bf00      	nop

000dc788 <__aeabi_ul2d>:
   dc788:	ea50 0201 	orrs.w	r2, r0, r1
   dc78c:	bf08      	it	eq
   dc78e:	4770      	bxeq	lr
   dc790:	b530      	push	{r4, r5, lr}
   dc792:	f04f 0500 	mov.w	r5, #0
   dc796:	e00a      	b.n	dc7ae <__aeabi_l2d+0x16>

000dc798 <__aeabi_l2d>:
   dc798:	ea50 0201 	orrs.w	r2, r0, r1
   dc79c:	bf08      	it	eq
   dc79e:	4770      	bxeq	lr
   dc7a0:	b530      	push	{r4, r5, lr}
   dc7a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dc7a6:	d502      	bpl.n	dc7ae <__aeabi_l2d+0x16>
   dc7a8:	4240      	negs	r0, r0
   dc7aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc7ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc7b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc7b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dc7ba:	f43f aed8 	beq.w	dc56e <__adddf3+0xe6>
   dc7be:	f04f 0203 	mov.w	r2, #3
   dc7c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc7c6:	bf18      	it	ne
   dc7c8:	3203      	addne	r2, #3
   dc7ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc7ce:	bf18      	it	ne
   dc7d0:	3203      	addne	r2, #3
   dc7d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dc7d6:	f1c2 0320 	rsb	r3, r2, #32
   dc7da:	fa00 fc03 	lsl.w	ip, r0, r3
   dc7de:	fa20 f002 	lsr.w	r0, r0, r2
   dc7e2:	fa01 fe03 	lsl.w	lr, r1, r3
   dc7e6:	ea40 000e 	orr.w	r0, r0, lr
   dc7ea:	fa21 f102 	lsr.w	r1, r1, r2
   dc7ee:	4414      	add	r4, r2
   dc7f0:	e6bd      	b.n	dc56e <__adddf3+0xe6>
   dc7f2:	bf00      	nop

000dc7f4 <__aeabi_dmul>:
   dc7f4:	b570      	push	{r4, r5, r6, lr}
   dc7f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc7fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc7fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc802:	bf1d      	ittte	ne
   dc804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc808:	ea94 0f0c 	teqne	r4, ip
   dc80c:	ea95 0f0c 	teqne	r5, ip
   dc810:	f000 f8de 	bleq	dc9d0 <__aeabi_dmul+0x1dc>
   dc814:	442c      	add	r4, r5
   dc816:	ea81 0603 	eor.w	r6, r1, r3
   dc81a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dc81e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dc822:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dc826:	bf18      	it	ne
   dc828:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dc82c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc834:	d038      	beq.n	dc8a8 <__aeabi_dmul+0xb4>
   dc836:	fba0 ce02 	umull	ip, lr, r0, r2
   dc83a:	f04f 0500 	mov.w	r5, #0
   dc83e:	fbe1 e502 	umlal	lr, r5, r1, r2
   dc842:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dc846:	fbe0 e503 	umlal	lr, r5, r0, r3
   dc84a:	f04f 0600 	mov.w	r6, #0
   dc84e:	fbe1 5603 	umlal	r5, r6, r1, r3
   dc852:	f09c 0f00 	teq	ip, #0
   dc856:	bf18      	it	ne
   dc858:	f04e 0e01 	orrne.w	lr, lr, #1
   dc85c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dc860:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dc864:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dc868:	d204      	bcs.n	dc874 <__aeabi_dmul+0x80>
   dc86a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dc86e:	416d      	adcs	r5, r5
   dc870:	eb46 0606 	adc.w	r6, r6, r6
   dc874:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dc878:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dc87c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dc880:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dc884:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dc888:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc88c:	bf88      	it	hi
   dc88e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc892:	d81e      	bhi.n	dc8d2 <__aeabi_dmul+0xde>
   dc894:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dc898:	bf08      	it	eq
   dc89a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dc89e:	f150 0000 	adcs.w	r0, r0, #0
   dc8a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc8a6:	bd70      	pop	{r4, r5, r6, pc}
   dc8a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dc8ac:	ea46 0101 	orr.w	r1, r6, r1
   dc8b0:	ea40 0002 	orr.w	r0, r0, r2
   dc8b4:	ea81 0103 	eor.w	r1, r1, r3
   dc8b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dc8bc:	bfc2      	ittt	gt
   dc8be:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc8c6:	bd70      	popgt	{r4, r5, r6, pc}
   dc8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc8cc:	f04f 0e00 	mov.w	lr, #0
   dc8d0:	3c01      	subs	r4, #1
   dc8d2:	f300 80ab 	bgt.w	dca2c <__aeabi_dmul+0x238>
   dc8d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dc8da:	bfde      	ittt	le
   dc8dc:	2000      	movle	r0, #0
   dc8de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dc8e2:	bd70      	pople	{r4, r5, r6, pc}
   dc8e4:	f1c4 0400 	rsb	r4, r4, #0
   dc8e8:	3c20      	subs	r4, #32
   dc8ea:	da35      	bge.n	dc958 <__aeabi_dmul+0x164>
   dc8ec:	340c      	adds	r4, #12
   dc8ee:	dc1b      	bgt.n	dc928 <__aeabi_dmul+0x134>
   dc8f0:	f104 0414 	add.w	r4, r4, #20
   dc8f4:	f1c4 0520 	rsb	r5, r4, #32
   dc8f8:	fa00 f305 	lsl.w	r3, r0, r5
   dc8fc:	fa20 f004 	lsr.w	r0, r0, r4
   dc900:	fa01 f205 	lsl.w	r2, r1, r5
   dc904:	ea40 0002 	orr.w	r0, r0, r2
   dc908:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dc90c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc910:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc914:	fa21 f604 	lsr.w	r6, r1, r4
   dc918:	eb42 0106 	adc.w	r1, r2, r6
   dc91c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc920:	bf08      	it	eq
   dc922:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc926:	bd70      	pop	{r4, r5, r6, pc}
   dc928:	f1c4 040c 	rsb	r4, r4, #12
   dc92c:	f1c4 0520 	rsb	r5, r4, #32
   dc930:	fa00 f304 	lsl.w	r3, r0, r4
   dc934:	fa20 f005 	lsr.w	r0, r0, r5
   dc938:	fa01 f204 	lsl.w	r2, r1, r4
   dc93c:	ea40 0002 	orr.w	r0, r0, r2
   dc940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc948:	f141 0100 	adc.w	r1, r1, #0
   dc94c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc950:	bf08      	it	eq
   dc952:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc956:	bd70      	pop	{r4, r5, r6, pc}
   dc958:	f1c4 0520 	rsb	r5, r4, #32
   dc95c:	fa00 f205 	lsl.w	r2, r0, r5
   dc960:	ea4e 0e02 	orr.w	lr, lr, r2
   dc964:	fa20 f304 	lsr.w	r3, r0, r4
   dc968:	fa01 f205 	lsl.w	r2, r1, r5
   dc96c:	ea43 0302 	orr.w	r3, r3, r2
   dc970:	fa21 f004 	lsr.w	r0, r1, r4
   dc974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc978:	fa21 f204 	lsr.w	r2, r1, r4
   dc97c:	ea20 0002 	bic.w	r0, r0, r2
   dc980:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc988:	bf08      	it	eq
   dc98a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc98e:	bd70      	pop	{r4, r5, r6, pc}
   dc990:	f094 0f00 	teq	r4, #0
   dc994:	d10f      	bne.n	dc9b6 <__aeabi_dmul+0x1c2>
   dc996:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc99a:	0040      	lsls	r0, r0, #1
   dc99c:	eb41 0101 	adc.w	r1, r1, r1
   dc9a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc9a4:	bf08      	it	eq
   dc9a6:	3c01      	subeq	r4, #1
   dc9a8:	d0f7      	beq.n	dc99a <__aeabi_dmul+0x1a6>
   dc9aa:	ea41 0106 	orr.w	r1, r1, r6
   dc9ae:	f095 0f00 	teq	r5, #0
   dc9b2:	bf18      	it	ne
   dc9b4:	4770      	bxne	lr
   dc9b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc9ba:	0052      	lsls	r2, r2, #1
   dc9bc:	eb43 0303 	adc.w	r3, r3, r3
   dc9c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc9c4:	bf08      	it	eq
   dc9c6:	3d01      	subeq	r5, #1
   dc9c8:	d0f7      	beq.n	dc9ba <__aeabi_dmul+0x1c6>
   dc9ca:	ea43 0306 	orr.w	r3, r3, r6
   dc9ce:	4770      	bx	lr
   dc9d0:	ea94 0f0c 	teq	r4, ip
   dc9d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc9d8:	bf18      	it	ne
   dc9da:	ea95 0f0c 	teqne	r5, ip
   dc9de:	d00c      	beq.n	dc9fa <__aeabi_dmul+0x206>
   dc9e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc9e4:	bf18      	it	ne
   dc9e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc9ea:	d1d1      	bne.n	dc990 <__aeabi_dmul+0x19c>
   dc9ec:	ea81 0103 	eor.w	r1, r1, r3
   dc9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc9f4:	f04f 0000 	mov.w	r0, #0
   dc9f8:	bd70      	pop	{r4, r5, r6, pc}
   dc9fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc9fe:	bf06      	itte	eq
   dca00:	4610      	moveq	r0, r2
   dca02:	4619      	moveq	r1, r3
   dca04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dca08:	d019      	beq.n	dca3e <__aeabi_dmul+0x24a>
   dca0a:	ea94 0f0c 	teq	r4, ip
   dca0e:	d102      	bne.n	dca16 <__aeabi_dmul+0x222>
   dca10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dca14:	d113      	bne.n	dca3e <__aeabi_dmul+0x24a>
   dca16:	ea95 0f0c 	teq	r5, ip
   dca1a:	d105      	bne.n	dca28 <__aeabi_dmul+0x234>
   dca1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dca20:	bf1c      	itt	ne
   dca22:	4610      	movne	r0, r2
   dca24:	4619      	movne	r1, r3
   dca26:	d10a      	bne.n	dca3e <__aeabi_dmul+0x24a>
   dca28:	ea81 0103 	eor.w	r1, r1, r3
   dca2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dca30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dca34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dca38:	f04f 0000 	mov.w	r0, #0
   dca3c:	bd70      	pop	{r4, r5, r6, pc}
   dca3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dca42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dca46:	bd70      	pop	{r4, r5, r6, pc}

000dca48 <__aeabi_ddiv>:
   dca48:	b570      	push	{r4, r5, r6, lr}
   dca4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dca4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dca52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dca56:	bf1d      	ittte	ne
   dca58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dca5c:	ea94 0f0c 	teqne	r4, ip
   dca60:	ea95 0f0c 	teqne	r5, ip
   dca64:	f000 f8a7 	bleq	dcbb6 <__aeabi_ddiv+0x16e>
   dca68:	eba4 0405 	sub.w	r4, r4, r5
   dca6c:	ea81 0e03 	eor.w	lr, r1, r3
   dca70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dca74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dca78:	f000 8088 	beq.w	dcb8c <__aeabi_ddiv+0x144>
   dca7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dca80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dca84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dca88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dca8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dca90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dca94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dca98:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dca9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dcaa0:	429d      	cmp	r5, r3
   dcaa2:	bf08      	it	eq
   dcaa4:	4296      	cmpeq	r6, r2
   dcaa6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dcaaa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dcaae:	d202      	bcs.n	dcab6 <__aeabi_ddiv+0x6e>
   dcab0:	085b      	lsrs	r3, r3, #1
   dcab2:	ea4f 0232 	mov.w	r2, r2, rrx
   dcab6:	1ab6      	subs	r6, r6, r2
   dcab8:	eb65 0503 	sbc.w	r5, r5, r3
   dcabc:	085b      	lsrs	r3, r3, #1
   dcabe:	ea4f 0232 	mov.w	r2, r2, rrx
   dcac2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dcac6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dcaca:	ebb6 0e02 	subs.w	lr, r6, r2
   dcace:	eb75 0e03 	sbcs.w	lr, r5, r3
   dcad2:	bf22      	ittt	cs
   dcad4:	1ab6      	subcs	r6, r6, r2
   dcad6:	4675      	movcs	r5, lr
   dcad8:	ea40 000c 	orrcs.w	r0, r0, ip
   dcadc:	085b      	lsrs	r3, r3, #1
   dcade:	ea4f 0232 	mov.w	r2, r2, rrx
   dcae2:	ebb6 0e02 	subs.w	lr, r6, r2
   dcae6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dcaea:	bf22      	ittt	cs
   dcaec:	1ab6      	subcs	r6, r6, r2
   dcaee:	4675      	movcs	r5, lr
   dcaf0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dcaf4:	085b      	lsrs	r3, r3, #1
   dcaf6:	ea4f 0232 	mov.w	r2, r2, rrx
   dcafa:	ebb6 0e02 	subs.w	lr, r6, r2
   dcafe:	eb75 0e03 	sbcs.w	lr, r5, r3
   dcb02:	bf22      	ittt	cs
   dcb04:	1ab6      	subcs	r6, r6, r2
   dcb06:	4675      	movcs	r5, lr
   dcb08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dcb0c:	085b      	lsrs	r3, r3, #1
   dcb0e:	ea4f 0232 	mov.w	r2, r2, rrx
   dcb12:	ebb6 0e02 	subs.w	lr, r6, r2
   dcb16:	eb75 0e03 	sbcs.w	lr, r5, r3
   dcb1a:	bf22      	ittt	cs
   dcb1c:	1ab6      	subcs	r6, r6, r2
   dcb1e:	4675      	movcs	r5, lr
   dcb20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dcb24:	ea55 0e06 	orrs.w	lr, r5, r6
   dcb28:	d018      	beq.n	dcb5c <__aeabi_ddiv+0x114>
   dcb2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dcb2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dcb32:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dcb36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dcb3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dcb3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dcb42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dcb46:	d1c0      	bne.n	dcaca <__aeabi_ddiv+0x82>
   dcb48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dcb4c:	d10b      	bne.n	dcb66 <__aeabi_ddiv+0x11e>
   dcb4e:	ea41 0100 	orr.w	r1, r1, r0
   dcb52:	f04f 0000 	mov.w	r0, #0
   dcb56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dcb5a:	e7b6      	b.n	dcaca <__aeabi_ddiv+0x82>
   dcb5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dcb60:	bf04      	itt	eq
   dcb62:	4301      	orreq	r1, r0
   dcb64:	2000      	moveq	r0, #0
   dcb66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dcb6a:	bf88      	it	hi
   dcb6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dcb70:	f63f aeaf 	bhi.w	dc8d2 <__aeabi_dmul+0xde>
   dcb74:	ebb5 0c03 	subs.w	ip, r5, r3
   dcb78:	bf04      	itt	eq
   dcb7a:	ebb6 0c02 	subseq.w	ip, r6, r2
   dcb7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dcb82:	f150 0000 	adcs.w	r0, r0, #0
   dcb86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dcb8a:	bd70      	pop	{r4, r5, r6, pc}
   dcb8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dcb90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dcb94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dcb98:	bfc2      	ittt	gt
   dcb9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dcb9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dcba2:	bd70      	popgt	{r4, r5, r6, pc}
   dcba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcba8:	f04f 0e00 	mov.w	lr, #0
   dcbac:	3c01      	subs	r4, #1
   dcbae:	e690      	b.n	dc8d2 <__aeabi_dmul+0xde>
   dcbb0:	ea45 0e06 	orr.w	lr, r5, r6
   dcbb4:	e68d      	b.n	dc8d2 <__aeabi_dmul+0xde>
   dcbb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dcbba:	ea94 0f0c 	teq	r4, ip
   dcbbe:	bf08      	it	eq
   dcbc0:	ea95 0f0c 	teqeq	r5, ip
   dcbc4:	f43f af3b 	beq.w	dca3e <__aeabi_dmul+0x24a>
   dcbc8:	ea94 0f0c 	teq	r4, ip
   dcbcc:	d10a      	bne.n	dcbe4 <__aeabi_ddiv+0x19c>
   dcbce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dcbd2:	f47f af34 	bne.w	dca3e <__aeabi_dmul+0x24a>
   dcbd6:	ea95 0f0c 	teq	r5, ip
   dcbda:	f47f af25 	bne.w	dca28 <__aeabi_dmul+0x234>
   dcbde:	4610      	mov	r0, r2
   dcbe0:	4619      	mov	r1, r3
   dcbe2:	e72c      	b.n	dca3e <__aeabi_dmul+0x24a>
   dcbe4:	ea95 0f0c 	teq	r5, ip
   dcbe8:	d106      	bne.n	dcbf8 <__aeabi_ddiv+0x1b0>
   dcbea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dcbee:	f43f aefd 	beq.w	dc9ec <__aeabi_dmul+0x1f8>
   dcbf2:	4610      	mov	r0, r2
   dcbf4:	4619      	mov	r1, r3
   dcbf6:	e722      	b.n	dca3e <__aeabi_dmul+0x24a>
   dcbf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcbfc:	bf18      	it	ne
   dcbfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dcc02:	f47f aec5 	bne.w	dc990 <__aeabi_dmul+0x19c>
   dcc06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dcc0a:	f47f af0d 	bne.w	dca28 <__aeabi_dmul+0x234>
   dcc0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dcc12:	f47f aeeb 	bne.w	dc9ec <__aeabi_dmul+0x1f8>
   dcc16:	e712      	b.n	dca3e <__aeabi_dmul+0x24a>

000dcc18 <__gedf2>:
   dcc18:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dcc1c:	e006      	b.n	dcc2c <__cmpdf2+0x4>
   dcc1e:	bf00      	nop

000dcc20 <__ledf2>:
   dcc20:	f04f 0c01 	mov.w	ip, #1
   dcc24:	e002      	b.n	dcc2c <__cmpdf2+0x4>
   dcc26:	bf00      	nop

000dcc28 <__cmpdf2>:
   dcc28:	f04f 0c01 	mov.w	ip, #1
   dcc2c:	f84d cd04 	str.w	ip, [sp, #-4]!
   dcc30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcc34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcc38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcc3c:	bf18      	it	ne
   dcc3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dcc42:	d01b      	beq.n	dcc7c <__cmpdf2+0x54>
   dcc44:	b001      	add	sp, #4
   dcc46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dcc4a:	bf0c      	ite	eq
   dcc4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dcc50:	ea91 0f03 	teqne	r1, r3
   dcc54:	bf02      	ittt	eq
   dcc56:	ea90 0f02 	teqeq	r0, r2
   dcc5a:	2000      	moveq	r0, #0
   dcc5c:	4770      	bxeq	lr
   dcc5e:	f110 0f00 	cmn.w	r0, #0
   dcc62:	ea91 0f03 	teq	r1, r3
   dcc66:	bf58      	it	pl
   dcc68:	4299      	cmppl	r1, r3
   dcc6a:	bf08      	it	eq
   dcc6c:	4290      	cmpeq	r0, r2
   dcc6e:	bf2c      	ite	cs
   dcc70:	17d8      	asrcs	r0, r3, #31
   dcc72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dcc76:	f040 0001 	orr.w	r0, r0, #1
   dcc7a:	4770      	bx	lr
   dcc7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcc80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcc84:	d102      	bne.n	dcc8c <__cmpdf2+0x64>
   dcc86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dcc8a:	d107      	bne.n	dcc9c <__cmpdf2+0x74>
   dcc8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcc90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcc94:	d1d6      	bne.n	dcc44 <__cmpdf2+0x1c>
   dcc96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dcc9a:	d0d3      	beq.n	dcc44 <__cmpdf2+0x1c>
   dcc9c:	f85d 0b04 	ldr.w	r0, [sp], #4
   dcca0:	4770      	bx	lr
   dcca2:	bf00      	nop

000dcca4 <__aeabi_cdrcmple>:
   dcca4:	4684      	mov	ip, r0
   dcca6:	4610      	mov	r0, r2
   dcca8:	4662      	mov	r2, ip
   dccaa:	468c      	mov	ip, r1
   dccac:	4619      	mov	r1, r3
   dccae:	4663      	mov	r3, ip
   dccb0:	e000      	b.n	dccb4 <__aeabi_cdcmpeq>
   dccb2:	bf00      	nop

000dccb4 <__aeabi_cdcmpeq>:
   dccb4:	b501      	push	{r0, lr}
   dccb6:	f7ff ffb7 	bl	dcc28 <__cmpdf2>
   dccba:	2800      	cmp	r0, #0
   dccbc:	bf48      	it	mi
   dccbe:	f110 0f00 	cmnmi.w	r0, #0
   dccc2:	bd01      	pop	{r0, pc}

000dccc4 <__aeabi_dcmpeq>:
   dccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dccc8:	f7ff fff4 	bl	dccb4 <__aeabi_cdcmpeq>
   dcccc:	bf0c      	ite	eq
   dccce:	2001      	moveq	r0, #1
   dccd0:	2000      	movne	r0, #0
   dccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   dccd6:	bf00      	nop

000dccd8 <__aeabi_dcmplt>:
   dccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dccdc:	f7ff ffea 	bl	dccb4 <__aeabi_cdcmpeq>
   dcce0:	bf34      	ite	cc
   dcce2:	2001      	movcc	r0, #1
   dcce4:	2000      	movcs	r0, #0
   dcce6:	f85d fb08 	ldr.w	pc, [sp], #8
   dccea:	bf00      	nop

000dccec <__aeabi_dcmple>:
   dccec:	f84d ed08 	str.w	lr, [sp, #-8]!
   dccf0:	f7ff ffe0 	bl	dccb4 <__aeabi_cdcmpeq>
   dccf4:	bf94      	ite	ls
   dccf6:	2001      	movls	r0, #1
   dccf8:	2000      	movhi	r0, #0
   dccfa:	f85d fb08 	ldr.w	pc, [sp], #8
   dccfe:	bf00      	nop

000dcd00 <__aeabi_dcmpge>:
   dcd00:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcd04:	f7ff ffce 	bl	dcca4 <__aeabi_cdrcmple>
   dcd08:	bf94      	ite	ls
   dcd0a:	2001      	movls	r0, #1
   dcd0c:	2000      	movhi	r0, #0
   dcd0e:	f85d fb08 	ldr.w	pc, [sp], #8
   dcd12:	bf00      	nop

000dcd14 <__aeabi_dcmpgt>:
   dcd14:	f84d ed08 	str.w	lr, [sp, #-8]!
   dcd18:	f7ff ffc4 	bl	dcca4 <__aeabi_cdrcmple>
   dcd1c:	bf34      	ite	cc
   dcd1e:	2001      	movcc	r0, #1
   dcd20:	2000      	movcs	r0, #0
   dcd22:	f85d fb08 	ldr.w	pc, [sp], #8
   dcd26:	bf00      	nop

000dcd28 <__aeabi_dcmpun>:
   dcd28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dcd2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcd30:	d102      	bne.n	dcd38 <__aeabi_dcmpun+0x10>
   dcd32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dcd36:	d10a      	bne.n	dcd4e <__aeabi_dcmpun+0x26>
   dcd38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dcd3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dcd40:	d102      	bne.n	dcd48 <__aeabi_dcmpun+0x20>
   dcd42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dcd46:	d102      	bne.n	dcd4e <__aeabi_dcmpun+0x26>
   dcd48:	f04f 0000 	mov.w	r0, #0
   dcd4c:	4770      	bx	lr
   dcd4e:	f04f 0001 	mov.w	r0, #1
   dcd52:	4770      	bx	lr

000dcd54 <__aeabi_d2iz>:
   dcd54:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dcd58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dcd5c:	d215      	bcs.n	dcd8a <__aeabi_d2iz+0x36>
   dcd5e:	d511      	bpl.n	dcd84 <__aeabi_d2iz+0x30>
   dcd60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dcd64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dcd68:	d912      	bls.n	dcd90 <__aeabi_d2iz+0x3c>
   dcd6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcd6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dcd72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dcd76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dcd7a:	fa23 f002 	lsr.w	r0, r3, r2
   dcd7e:	bf18      	it	ne
   dcd80:	4240      	negne	r0, r0
   dcd82:	4770      	bx	lr
   dcd84:	f04f 0000 	mov.w	r0, #0
   dcd88:	4770      	bx	lr
   dcd8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcd8e:	d105      	bne.n	dcd9c <__aeabi_d2iz+0x48>
   dcd90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dcd94:	bf08      	it	eq
   dcd96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dcd9a:	4770      	bx	lr
   dcd9c:	f04f 0000 	mov.w	r0, #0
   dcda0:	4770      	bx	lr
   dcda2:	bf00      	nop

000dcda4 <__aeabi_d2uiz>:
   dcda4:	004a      	lsls	r2, r1, #1
   dcda6:	d211      	bcs.n	dcdcc <__aeabi_d2uiz+0x28>
   dcda8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dcdac:	d211      	bcs.n	dcdd2 <__aeabi_d2uiz+0x2e>
   dcdae:	d50d      	bpl.n	dcdcc <__aeabi_d2uiz+0x28>
   dcdb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dcdb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dcdb8:	d40e      	bmi.n	dcdd8 <__aeabi_d2uiz+0x34>
   dcdba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dcdbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dcdc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dcdc6:	fa23 f002 	lsr.w	r0, r3, r2
   dcdca:	4770      	bx	lr
   dcdcc:	f04f 0000 	mov.w	r0, #0
   dcdd0:	4770      	bx	lr
   dcdd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dcdd6:	d102      	bne.n	dcdde <__aeabi_d2uiz+0x3a>
   dcdd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dcddc:	4770      	bx	lr
   dcdde:	f04f 0000 	mov.w	r0, #0
   dcde2:	4770      	bx	lr

000dcde4 <__aeabi_d2f>:
   dcde4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dcde8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dcdec:	bf24      	itt	cs
   dcdee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dcdf2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dcdf6:	d90d      	bls.n	dce14 <__aeabi_d2f+0x30>
   dcdf8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dcdfc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dce00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dce04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dce08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dce0c:	bf08      	it	eq
   dce0e:	f020 0001 	biceq.w	r0, r0, #1
   dce12:	4770      	bx	lr
   dce14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dce18:	d121      	bne.n	dce5e <__aeabi_d2f+0x7a>
   dce1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dce1e:	bfbc      	itt	lt
   dce20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dce24:	4770      	bxlt	lr
   dce26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dce2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dce2e:	f1c2 0218 	rsb	r2, r2, #24
   dce32:	f1c2 0c20 	rsb	ip, r2, #32
   dce36:	fa10 f30c 	lsls.w	r3, r0, ip
   dce3a:	fa20 f002 	lsr.w	r0, r0, r2
   dce3e:	bf18      	it	ne
   dce40:	f040 0001 	orrne.w	r0, r0, #1
   dce44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dce48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dce4c:	fa03 fc0c 	lsl.w	ip, r3, ip
   dce50:	ea40 000c 	orr.w	r0, r0, ip
   dce54:	fa23 f302 	lsr.w	r3, r3, r2
   dce58:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dce5c:	e7cc      	b.n	dcdf8 <__aeabi_d2f+0x14>
   dce5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dce62:	d107      	bne.n	dce74 <__aeabi_d2f+0x90>
   dce64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dce68:	bf1e      	ittt	ne
   dce6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dce6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dce72:	4770      	bxne	lr
   dce74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dce78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dce7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dce80:	4770      	bx	lr
   dce82:	bf00      	nop

000dce84 <__aeabi_f2lz>:
   dce84:	ee07 0a90 	vmov	s15, r0
   dce88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dce8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dce90:	d401      	bmi.n	dce96 <__aeabi_f2lz+0x12>
   dce92:	f000 b80b 	b.w	dceac <__aeabi_f2ulz>
   dce96:	eef1 7a67 	vneg.f32	s15, s15
   dce9a:	b508      	push	{r3, lr}
   dce9c:	ee17 0a90 	vmov	r0, s15
   dcea0:	f000 f804 	bl	dceac <__aeabi_f2ulz>
   dcea4:	4240      	negs	r0, r0
   dcea6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dceaa:	bd08      	pop	{r3, pc}

000dceac <__aeabi_f2ulz>:
   dceac:	b5d0      	push	{r4, r6, r7, lr}
   dceae:	f7ff fc49 	bl	dc744 <__aeabi_f2d>
   dceb2:	4b0c      	ldr	r3, [pc, #48]	; (dcee4 <__aeabi_f2ulz+0x38>)
   dceb4:	2200      	movs	r2, #0
   dceb6:	4606      	mov	r6, r0
   dceb8:	460f      	mov	r7, r1
   dceba:	f7ff fc9b 	bl	dc7f4 <__aeabi_dmul>
   dcebe:	f7ff ff71 	bl	dcda4 <__aeabi_d2uiz>
   dcec2:	4604      	mov	r4, r0
   dcec4:	f7ff fc1c 	bl	dc700 <__aeabi_ui2d>
   dcec8:	4b07      	ldr	r3, [pc, #28]	; (dcee8 <__aeabi_f2ulz+0x3c>)
   dceca:	2200      	movs	r2, #0
   dcecc:	f7ff fc92 	bl	dc7f4 <__aeabi_dmul>
   dced0:	4602      	mov	r2, r0
   dced2:	460b      	mov	r3, r1
   dced4:	4630      	mov	r0, r6
   dced6:	4639      	mov	r1, r7
   dced8:	f7ff fad4 	bl	dc484 <__aeabi_dsub>
   dcedc:	f7ff ff62 	bl	dcda4 <__aeabi_d2uiz>
   dcee0:	4621      	mov	r1, r4
   dcee2:	bdd0      	pop	{r4, r6, r7, pc}
   dcee4:	3df00000 	.word	0x3df00000
   dcee8:	41f00000 	.word	0x41f00000

000dceec <__aeabi_d2ulz>:
   dceec:	b5d0      	push	{r4, r6, r7, lr}
   dceee:	4b0c      	ldr	r3, [pc, #48]	; (dcf20 <__aeabi_d2ulz+0x34>)
   dcef0:	2200      	movs	r2, #0
   dcef2:	4606      	mov	r6, r0
   dcef4:	460f      	mov	r7, r1
   dcef6:	f7ff fc7d 	bl	dc7f4 <__aeabi_dmul>
   dcefa:	f7ff ff53 	bl	dcda4 <__aeabi_d2uiz>
   dcefe:	4604      	mov	r4, r0
   dcf00:	f7ff fbfe 	bl	dc700 <__aeabi_ui2d>
   dcf04:	4b07      	ldr	r3, [pc, #28]	; (dcf24 <__aeabi_d2ulz+0x38>)
   dcf06:	2200      	movs	r2, #0
   dcf08:	f7ff fc74 	bl	dc7f4 <__aeabi_dmul>
   dcf0c:	4602      	mov	r2, r0
   dcf0e:	460b      	mov	r3, r1
   dcf10:	4630      	mov	r0, r6
   dcf12:	4639      	mov	r1, r7
   dcf14:	f7ff fab6 	bl	dc484 <__aeabi_dsub>
   dcf18:	f7ff ff44 	bl	dcda4 <__aeabi_d2uiz>
   dcf1c:	4621      	mov	r1, r4
   dcf1e:	bdd0      	pop	{r4, r6, r7, pc}
   dcf20:	3df00000 	.word	0x3df00000
   dcf24:	41f00000 	.word	0x41f00000

000dcf28 <asctime_r>:
   dcf28:	b510      	push	{r4, lr}
   dcf2a:	460c      	mov	r4, r1
   dcf2c:	6941      	ldr	r1, [r0, #20]
   dcf2e:	6903      	ldr	r3, [r0, #16]
   dcf30:	6982      	ldr	r2, [r0, #24]
   dcf32:	b086      	sub	sp, #24
   dcf34:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dcf38:	9104      	str	r1, [sp, #16]
   dcf3a:	6801      	ldr	r1, [r0, #0]
   dcf3c:	9103      	str	r1, [sp, #12]
   dcf3e:	6841      	ldr	r1, [r0, #4]
   dcf40:	9102      	str	r1, [sp, #8]
   dcf42:	6881      	ldr	r1, [r0, #8]
   dcf44:	9101      	str	r1, [sp, #4]
   dcf46:	68c1      	ldr	r1, [r0, #12]
   dcf48:	9100      	str	r1, [sp, #0]
   dcf4a:	4907      	ldr	r1, [pc, #28]	; (dcf68 <asctime_r+0x40>)
   dcf4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dcf50:	440b      	add	r3, r1
   dcf52:	4906      	ldr	r1, [pc, #24]	; (dcf6c <asctime_r+0x44>)
   dcf54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dcf58:	440a      	add	r2, r1
   dcf5a:	4620      	mov	r0, r4
   dcf5c:	4904      	ldr	r1, [pc, #16]	; (dcf70 <asctime_r+0x48>)
   dcf5e:	f7fc f871 	bl	d9044 <siprintf>
   dcf62:	4620      	mov	r0, r4
   dcf64:	b006      	add	sp, #24
   dcf66:	bd10      	pop	{r4, pc}
   dcf68:	000e02ee 	.word	0x000e02ee
   dcf6c:	000e02d9 	.word	0x000e02d9
   dcf70:	000e02b9 	.word	0x000e02b9

000dcf74 <atexit>:
   dcf74:	2300      	movs	r3, #0
   dcf76:	4601      	mov	r1, r0
   dcf78:	461a      	mov	r2, r3
   dcf7a:	4618      	mov	r0, r3
   dcf7c:	f001 b864 	b.w	de048 <__register_exitproc>

000dcf80 <atoi>:
   dcf80:	220a      	movs	r2, #10
   dcf82:	2100      	movs	r1, #0
   dcf84:	f000 bfea 	b.w	ddf5c <strtol>

000dcf88 <gmtime>:
   dcf88:	b538      	push	{r3, r4, r5, lr}
   dcf8a:	4b07      	ldr	r3, [pc, #28]	; (dcfa8 <gmtime+0x20>)
   dcf8c:	681d      	ldr	r5, [r3, #0]
   dcf8e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dcf90:	4604      	mov	r4, r0
   dcf92:	b91b      	cbnz	r3, dcf9c <gmtime+0x14>
   dcf94:	2024      	movs	r0, #36	; 0x24
   dcf96:	f7fc f83d 	bl	d9014 <malloc>
   dcf9a:	63e8      	str	r0, [r5, #60]	; 0x3c
   dcf9c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dcf9e:	4620      	mov	r0, r4
   dcfa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dcfa4:	f7fc b89e 	b.w	d90e4 <gmtime_r>
   dcfa8:	2003e0b8 	.word	0x2003e0b8

000dcfac <memcpy>:
   dcfac:	440a      	add	r2, r1
   dcfae:	4291      	cmp	r1, r2
   dcfb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dcfb4:	d100      	bne.n	dcfb8 <memcpy+0xc>
   dcfb6:	4770      	bx	lr
   dcfb8:	b510      	push	{r4, lr}
   dcfba:	f811 4b01 	ldrb.w	r4, [r1], #1
   dcfbe:	f803 4f01 	strb.w	r4, [r3, #1]!
   dcfc2:	4291      	cmp	r1, r2
   dcfc4:	d1f9      	bne.n	dcfba <memcpy+0xe>
   dcfc6:	bd10      	pop	{r4, pc}

000dcfc8 <memmove>:
   dcfc8:	4288      	cmp	r0, r1
   dcfca:	b510      	push	{r4, lr}
   dcfcc:	eb01 0402 	add.w	r4, r1, r2
   dcfd0:	d902      	bls.n	dcfd8 <memmove+0x10>
   dcfd2:	4284      	cmp	r4, r0
   dcfd4:	4623      	mov	r3, r4
   dcfd6:	d807      	bhi.n	dcfe8 <memmove+0x20>
   dcfd8:	1e43      	subs	r3, r0, #1
   dcfda:	42a1      	cmp	r1, r4
   dcfdc:	d008      	beq.n	dcff0 <memmove+0x28>
   dcfde:	f811 2b01 	ldrb.w	r2, [r1], #1
   dcfe2:	f803 2f01 	strb.w	r2, [r3, #1]!
   dcfe6:	e7f8      	b.n	dcfda <memmove+0x12>
   dcfe8:	4402      	add	r2, r0
   dcfea:	4601      	mov	r1, r0
   dcfec:	428a      	cmp	r2, r1
   dcfee:	d100      	bne.n	dcff2 <memmove+0x2a>
   dcff0:	bd10      	pop	{r4, pc}
   dcff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dcff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dcffa:	e7f7      	b.n	dcfec <memmove+0x24>

000dcffc <memset>:
   dcffc:	4402      	add	r2, r0
   dcffe:	4603      	mov	r3, r0
   dd000:	4293      	cmp	r3, r2
   dd002:	d100      	bne.n	dd006 <memset+0xa>
   dd004:	4770      	bx	lr
   dd006:	f803 1b01 	strb.w	r1, [r3], #1
   dd00a:	e7f9      	b.n	dd000 <memset+0x4>

000dd00c <srand>:
   dd00c:	b538      	push	{r3, r4, r5, lr}
   dd00e:	4b0d      	ldr	r3, [pc, #52]	; (dd044 <srand+0x38>)
   dd010:	681d      	ldr	r5, [r3, #0]
   dd012:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd014:	4604      	mov	r4, r0
   dd016:	b97b      	cbnz	r3, dd038 <srand+0x2c>
   dd018:	2018      	movs	r0, #24
   dd01a:	f7fb fffb 	bl	d9014 <malloc>
   dd01e:	4a0a      	ldr	r2, [pc, #40]	; (dd048 <srand+0x3c>)
   dd020:	4b0a      	ldr	r3, [pc, #40]	; (dd04c <srand+0x40>)
   dd022:	63a8      	str	r0, [r5, #56]	; 0x38
   dd024:	e9c0 2300 	strd	r2, r3, [r0]
   dd028:	4b09      	ldr	r3, [pc, #36]	; (dd050 <srand+0x44>)
   dd02a:	6083      	str	r3, [r0, #8]
   dd02c:	230b      	movs	r3, #11
   dd02e:	8183      	strh	r3, [r0, #12]
   dd030:	2201      	movs	r2, #1
   dd032:	2300      	movs	r3, #0
   dd034:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dd038:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dd03a:	2200      	movs	r2, #0
   dd03c:	611c      	str	r4, [r3, #16]
   dd03e:	615a      	str	r2, [r3, #20]
   dd040:	bd38      	pop	{r3, r4, r5, pc}
   dd042:	bf00      	nop
   dd044:	2003e0b8 	.word	0x2003e0b8
   dd048:	abcd330e 	.word	0xabcd330e
   dd04c:	e66d1234 	.word	0xe66d1234
   dd050:	0005deec 	.word	0x0005deec

000dd054 <strchr>:
   dd054:	b2c9      	uxtb	r1, r1
   dd056:	4603      	mov	r3, r0
   dd058:	f810 2b01 	ldrb.w	r2, [r0], #1
   dd05c:	b11a      	cbz	r2, dd066 <strchr+0x12>
   dd05e:	428a      	cmp	r2, r1
   dd060:	d1f9      	bne.n	dd056 <strchr+0x2>
   dd062:	4618      	mov	r0, r3
   dd064:	4770      	bx	lr
   dd066:	2900      	cmp	r1, #0
   dd068:	bf18      	it	ne
   dd06a:	2300      	movne	r3, #0
   dd06c:	e7f9      	b.n	dd062 <strchr+0xe>

000dd06e <strchrnul>:
   dd06e:	b510      	push	{r4, lr}
   dd070:	4604      	mov	r4, r0
   dd072:	f7ff ffef 	bl	dd054 <strchr>
   dd076:	b918      	cbnz	r0, dd080 <strchrnul+0x12>
   dd078:	4620      	mov	r0, r4
   dd07a:	f000 f832 	bl	dd0e2 <strlen>
   dd07e:	4420      	add	r0, r4
   dd080:	bd10      	pop	{r4, pc}

000dd082 <strcmp>:
   dd082:	f810 2b01 	ldrb.w	r2, [r0], #1
   dd086:	f811 3b01 	ldrb.w	r3, [r1], #1
   dd08a:	2a01      	cmp	r2, #1
   dd08c:	bf28      	it	cs
   dd08e:	429a      	cmpcs	r2, r3
   dd090:	d0f7      	beq.n	dd082 <strcmp>
   dd092:	1ad0      	subs	r0, r2, r3
   dd094:	4770      	bx	lr

000dd096 <strcpy>:
   dd096:	4603      	mov	r3, r0
   dd098:	f811 2b01 	ldrb.w	r2, [r1], #1
   dd09c:	f803 2b01 	strb.w	r2, [r3], #1
   dd0a0:	2a00      	cmp	r2, #0
   dd0a2:	d1f9      	bne.n	dd098 <strcpy+0x2>
   dd0a4:	4770      	bx	lr
	...

000dd0a8 <strdup>:
   dd0a8:	4b02      	ldr	r3, [pc, #8]	; (dd0b4 <strdup+0xc>)
   dd0aa:	4601      	mov	r1, r0
   dd0ac:	6818      	ldr	r0, [r3, #0]
   dd0ae:	f000 b803 	b.w	dd0b8 <_strdup_r>
   dd0b2:	bf00      	nop
   dd0b4:	2003e0b8 	.word	0x2003e0b8

000dd0b8 <_strdup_r>:
   dd0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd0ba:	4604      	mov	r4, r0
   dd0bc:	4608      	mov	r0, r1
   dd0be:	460d      	mov	r5, r1
   dd0c0:	f000 f80f 	bl	dd0e2 <strlen>
   dd0c4:	1c42      	adds	r2, r0, #1
   dd0c6:	4611      	mov	r1, r2
   dd0c8:	4620      	mov	r0, r4
   dd0ca:	9201      	str	r2, [sp, #4]
   dd0cc:	f7fb ffe2 	bl	d9094 <_malloc_r>
   dd0d0:	4604      	mov	r4, r0
   dd0d2:	b118      	cbz	r0, dd0dc <_strdup_r+0x24>
   dd0d4:	9a01      	ldr	r2, [sp, #4]
   dd0d6:	4629      	mov	r1, r5
   dd0d8:	f7ff ff68 	bl	dcfac <memcpy>
   dd0dc:	4620      	mov	r0, r4
   dd0de:	b003      	add	sp, #12
   dd0e0:	bd30      	pop	{r4, r5, pc}

000dd0e2 <strlen>:
   dd0e2:	4603      	mov	r3, r0
   dd0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
   dd0e8:	2a00      	cmp	r2, #0
   dd0ea:	d1fb      	bne.n	dd0e4 <strlen+0x2>
   dd0ec:	1a18      	subs	r0, r3, r0
   dd0ee:	3801      	subs	r0, #1
   dd0f0:	4770      	bx	lr

000dd0f2 <strncmp>:
   dd0f2:	b510      	push	{r4, lr}
   dd0f4:	b16a      	cbz	r2, dd112 <strncmp+0x20>
   dd0f6:	3901      	subs	r1, #1
   dd0f8:	1884      	adds	r4, r0, r2
   dd0fa:	f810 3b01 	ldrb.w	r3, [r0], #1
   dd0fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dd102:	4293      	cmp	r3, r2
   dd104:	d103      	bne.n	dd10e <strncmp+0x1c>
   dd106:	42a0      	cmp	r0, r4
   dd108:	d001      	beq.n	dd10e <strncmp+0x1c>
   dd10a:	2b00      	cmp	r3, #0
   dd10c:	d1f5      	bne.n	dd0fa <strncmp+0x8>
   dd10e:	1a98      	subs	r0, r3, r2
   dd110:	bd10      	pop	{r4, pc}
   dd112:	4610      	mov	r0, r2
   dd114:	e7fc      	b.n	dd110 <strncmp+0x1e>

000dd116 <strncpy>:
   dd116:	b510      	push	{r4, lr}
   dd118:	3901      	subs	r1, #1
   dd11a:	4603      	mov	r3, r0
   dd11c:	b132      	cbz	r2, dd12c <strncpy+0x16>
   dd11e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dd122:	f803 4b01 	strb.w	r4, [r3], #1
   dd126:	3a01      	subs	r2, #1
   dd128:	2c00      	cmp	r4, #0
   dd12a:	d1f7      	bne.n	dd11c <strncpy+0x6>
   dd12c:	441a      	add	r2, r3
   dd12e:	2100      	movs	r1, #0
   dd130:	4293      	cmp	r3, r2
   dd132:	d100      	bne.n	dd136 <strncpy+0x20>
   dd134:	bd10      	pop	{r4, pc}
   dd136:	f803 1b01 	strb.w	r1, [r3], #1
   dd13a:	e7f9      	b.n	dd130 <strncpy+0x1a>

000dd13c <strrchr>:
   dd13c:	b538      	push	{r3, r4, r5, lr}
   dd13e:	4603      	mov	r3, r0
   dd140:	460c      	mov	r4, r1
   dd142:	b969      	cbnz	r1, dd160 <strrchr+0x24>
   dd144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dd148:	f7ff bf84 	b.w	dd054 <strchr>
   dd14c:	1c43      	adds	r3, r0, #1
   dd14e:	4605      	mov	r5, r0
   dd150:	4621      	mov	r1, r4
   dd152:	4618      	mov	r0, r3
   dd154:	f7ff ff7e 	bl	dd054 <strchr>
   dd158:	2800      	cmp	r0, #0
   dd15a:	d1f7      	bne.n	dd14c <strrchr+0x10>
   dd15c:	4628      	mov	r0, r5
   dd15e:	bd38      	pop	{r3, r4, r5, pc}
   dd160:	2500      	movs	r5, #0
   dd162:	e7f5      	b.n	dd150 <strrchr+0x14>

000dd164 <sulp>:
   dd164:	b570      	push	{r4, r5, r6, lr}
   dd166:	4604      	mov	r4, r0
   dd168:	460d      	mov	r5, r1
   dd16a:	ec45 4b10 	vmov	d0, r4, r5
   dd16e:	4616      	mov	r6, r2
   dd170:	f001 fe70 	bl	dee54 <__ulp>
   dd174:	ec51 0b10 	vmov	r0, r1, d0
   dd178:	b17e      	cbz	r6, dd19a <sulp+0x36>
   dd17a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dd17e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd182:	2b00      	cmp	r3, #0
   dd184:	dd09      	ble.n	dd19a <sulp+0x36>
   dd186:	051b      	lsls	r3, r3, #20
   dd188:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dd18c:	2400      	movs	r4, #0
   dd18e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dd192:	4622      	mov	r2, r4
   dd194:	462b      	mov	r3, r5
   dd196:	f7ff fb2d 	bl	dc7f4 <__aeabi_dmul>
   dd19a:	bd70      	pop	{r4, r5, r6, pc}
   dd19c:	0000      	movs	r0, r0
	...

000dd1a0 <_strtod_l>:
   dd1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd1a4:	b0a3      	sub	sp, #140	; 0x8c
   dd1a6:	461f      	mov	r7, r3
   dd1a8:	2300      	movs	r3, #0
   dd1aa:	931e      	str	r3, [sp, #120]	; 0x78
   dd1ac:	4ba4      	ldr	r3, [pc, #656]	; (dd440 <_strtod_l+0x2a0>)
   dd1ae:	9219      	str	r2, [sp, #100]	; 0x64
   dd1b0:	681b      	ldr	r3, [r3, #0]
   dd1b2:	9307      	str	r3, [sp, #28]
   dd1b4:	4604      	mov	r4, r0
   dd1b6:	4618      	mov	r0, r3
   dd1b8:	4688      	mov	r8, r1
   dd1ba:	f7ff ff92 	bl	dd0e2 <strlen>
   dd1be:	f04f 0a00 	mov.w	sl, #0
   dd1c2:	4605      	mov	r5, r0
   dd1c4:	f04f 0b00 	mov.w	fp, #0
   dd1c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dd1cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd1ce:	781a      	ldrb	r2, [r3, #0]
   dd1d0:	2a2b      	cmp	r2, #43	; 0x2b
   dd1d2:	d04c      	beq.n	dd26e <_strtod_l+0xce>
   dd1d4:	d839      	bhi.n	dd24a <_strtod_l+0xaa>
   dd1d6:	2a0d      	cmp	r2, #13
   dd1d8:	d832      	bhi.n	dd240 <_strtod_l+0xa0>
   dd1da:	2a08      	cmp	r2, #8
   dd1dc:	d832      	bhi.n	dd244 <_strtod_l+0xa4>
   dd1de:	2a00      	cmp	r2, #0
   dd1e0:	d03c      	beq.n	dd25c <_strtod_l+0xbc>
   dd1e2:	2300      	movs	r3, #0
   dd1e4:	930e      	str	r3, [sp, #56]	; 0x38
   dd1e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dd1e8:	7833      	ldrb	r3, [r6, #0]
   dd1ea:	2b30      	cmp	r3, #48	; 0x30
   dd1ec:	f040 80b4 	bne.w	dd358 <_strtod_l+0x1b8>
   dd1f0:	7873      	ldrb	r3, [r6, #1]
   dd1f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dd1f6:	2b58      	cmp	r3, #88	; 0x58
   dd1f8:	d16c      	bne.n	dd2d4 <_strtod_l+0x134>
   dd1fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dd1fc:	9301      	str	r3, [sp, #4]
   dd1fe:	ab1e      	add	r3, sp, #120	; 0x78
   dd200:	9702      	str	r7, [sp, #8]
   dd202:	9300      	str	r3, [sp, #0]
   dd204:	4a8f      	ldr	r2, [pc, #572]	; (dd444 <_strtod_l+0x2a4>)
   dd206:	ab1f      	add	r3, sp, #124	; 0x7c
   dd208:	a91d      	add	r1, sp, #116	; 0x74
   dd20a:	4620      	mov	r0, r4
   dd20c:	f001 f808 	bl	de220 <__gethex>
   dd210:	f010 0707 	ands.w	r7, r0, #7
   dd214:	4605      	mov	r5, r0
   dd216:	d005      	beq.n	dd224 <_strtod_l+0x84>
   dd218:	2f06      	cmp	r7, #6
   dd21a:	d12a      	bne.n	dd272 <_strtod_l+0xd2>
   dd21c:	3601      	adds	r6, #1
   dd21e:	2300      	movs	r3, #0
   dd220:	961d      	str	r6, [sp, #116]	; 0x74
   dd222:	930e      	str	r3, [sp, #56]	; 0x38
   dd224:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dd226:	2b00      	cmp	r3, #0
   dd228:	f040 8596 	bne.w	ddd58 <_strtod_l+0xbb8>
   dd22c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dd22e:	b1db      	cbz	r3, dd268 <_strtod_l+0xc8>
   dd230:	4652      	mov	r2, sl
   dd232:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dd236:	ec43 2b10 	vmov	d0, r2, r3
   dd23a:	b023      	add	sp, #140	; 0x8c
   dd23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd240:	2a20      	cmp	r2, #32
   dd242:	d1ce      	bne.n	dd1e2 <_strtod_l+0x42>
   dd244:	3301      	adds	r3, #1
   dd246:	931d      	str	r3, [sp, #116]	; 0x74
   dd248:	e7c0      	b.n	dd1cc <_strtod_l+0x2c>
   dd24a:	2a2d      	cmp	r2, #45	; 0x2d
   dd24c:	d1c9      	bne.n	dd1e2 <_strtod_l+0x42>
   dd24e:	2201      	movs	r2, #1
   dd250:	920e      	str	r2, [sp, #56]	; 0x38
   dd252:	1c5a      	adds	r2, r3, #1
   dd254:	921d      	str	r2, [sp, #116]	; 0x74
   dd256:	785b      	ldrb	r3, [r3, #1]
   dd258:	2b00      	cmp	r3, #0
   dd25a:	d1c4      	bne.n	dd1e6 <_strtod_l+0x46>
   dd25c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dd25e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dd262:	2b00      	cmp	r3, #0
   dd264:	f040 8576 	bne.w	ddd54 <_strtod_l+0xbb4>
   dd268:	4652      	mov	r2, sl
   dd26a:	465b      	mov	r3, fp
   dd26c:	e7e3      	b.n	dd236 <_strtod_l+0x96>
   dd26e:	2200      	movs	r2, #0
   dd270:	e7ee      	b.n	dd250 <_strtod_l+0xb0>
   dd272:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dd274:	b13a      	cbz	r2, dd286 <_strtod_l+0xe6>
   dd276:	2135      	movs	r1, #53	; 0x35
   dd278:	a820      	add	r0, sp, #128	; 0x80
   dd27a:	f001 feea 	bl	df052 <__copybits>
   dd27e:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd280:	4620      	mov	r0, r4
   dd282:	f001 fb1f 	bl	de8c4 <_Bfree>
   dd286:	3f01      	subs	r7, #1
   dd288:	2f05      	cmp	r7, #5
   dd28a:	d807      	bhi.n	dd29c <_strtod_l+0xfc>
   dd28c:	e8df f007 	tbb	[pc, r7]
   dd290:	1d180b0e 	.word	0x1d180b0e
   dd294:	030e      	.short	0x030e
   dd296:	f04f 0b00 	mov.w	fp, #0
   dd29a:	46da      	mov	sl, fp
   dd29c:	0728      	lsls	r0, r5, #28
   dd29e:	d5c1      	bpl.n	dd224 <_strtod_l+0x84>
   dd2a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dd2a4:	e7be      	b.n	dd224 <_strtod_l+0x84>
   dd2a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dd2aa:	e7f7      	b.n	dd29c <_strtod_l+0xfc>
   dd2ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dd2b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dd2b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dd2b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dd2ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dd2be:	e7ed      	b.n	dd29c <_strtod_l+0xfc>
   dd2c0:	f8df b184 	ldr.w	fp, [pc, #388]	; dd448 <_strtod_l+0x2a8>
   dd2c4:	f04f 0a00 	mov.w	sl, #0
   dd2c8:	e7e8      	b.n	dd29c <_strtod_l+0xfc>
   dd2ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dd2ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dd2d2:	e7e3      	b.n	dd29c <_strtod_l+0xfc>
   dd2d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd2d6:	1c5a      	adds	r2, r3, #1
   dd2d8:	921d      	str	r2, [sp, #116]	; 0x74
   dd2da:	785b      	ldrb	r3, [r3, #1]
   dd2dc:	2b30      	cmp	r3, #48	; 0x30
   dd2de:	d0f9      	beq.n	dd2d4 <_strtod_l+0x134>
   dd2e0:	2b00      	cmp	r3, #0
   dd2e2:	d09f      	beq.n	dd224 <_strtod_l+0x84>
   dd2e4:	2301      	movs	r3, #1
   dd2e6:	f04f 0900 	mov.w	r9, #0
   dd2ea:	9304      	str	r3, [sp, #16]
   dd2ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd2ee:	930a      	str	r3, [sp, #40]	; 0x28
   dd2f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dd2f4:	464f      	mov	r7, r9
   dd2f6:	220a      	movs	r2, #10
   dd2f8:	981d      	ldr	r0, [sp, #116]	; 0x74
   dd2fa:	7806      	ldrb	r6, [r0, #0]
   dd2fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dd300:	b2d9      	uxtb	r1, r3
   dd302:	2909      	cmp	r1, #9
   dd304:	d92a      	bls.n	dd35c <_strtod_l+0x1bc>
   dd306:	9907      	ldr	r1, [sp, #28]
   dd308:	462a      	mov	r2, r5
   dd30a:	f7ff fef2 	bl	dd0f2 <strncmp>
   dd30e:	b398      	cbz	r0, dd378 <_strtod_l+0x1d8>
   dd310:	2000      	movs	r0, #0
   dd312:	4633      	mov	r3, r6
   dd314:	463d      	mov	r5, r7
   dd316:	9007      	str	r0, [sp, #28]
   dd318:	4602      	mov	r2, r0
   dd31a:	2b65      	cmp	r3, #101	; 0x65
   dd31c:	d001      	beq.n	dd322 <_strtod_l+0x182>
   dd31e:	2b45      	cmp	r3, #69	; 0x45
   dd320:	d118      	bne.n	dd354 <_strtod_l+0x1b4>
   dd322:	b91d      	cbnz	r5, dd32c <_strtod_l+0x18c>
   dd324:	9b04      	ldr	r3, [sp, #16]
   dd326:	4303      	orrs	r3, r0
   dd328:	d098      	beq.n	dd25c <_strtod_l+0xbc>
   dd32a:	2500      	movs	r5, #0
   dd32c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dd330:	f108 0301 	add.w	r3, r8, #1
   dd334:	931d      	str	r3, [sp, #116]	; 0x74
   dd336:	f898 3001 	ldrb.w	r3, [r8, #1]
   dd33a:	2b2b      	cmp	r3, #43	; 0x2b
   dd33c:	d075      	beq.n	dd42a <_strtod_l+0x28a>
   dd33e:	2b2d      	cmp	r3, #45	; 0x2d
   dd340:	d07b      	beq.n	dd43a <_strtod_l+0x29a>
   dd342:	f04f 0c00 	mov.w	ip, #0
   dd346:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dd34a:	2909      	cmp	r1, #9
   dd34c:	f240 8082 	bls.w	dd454 <_strtod_l+0x2b4>
   dd350:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dd354:	2600      	movs	r6, #0
   dd356:	e09d      	b.n	dd494 <_strtod_l+0x2f4>
   dd358:	2300      	movs	r3, #0
   dd35a:	e7c4      	b.n	dd2e6 <_strtod_l+0x146>
   dd35c:	2f08      	cmp	r7, #8
   dd35e:	bfd8      	it	le
   dd360:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dd362:	f100 0001 	add.w	r0, r0, #1
   dd366:	bfda      	itte	le
   dd368:	fb02 3301 	mlale	r3, r2, r1, r3
   dd36c:	9309      	strle	r3, [sp, #36]	; 0x24
   dd36e:	fb02 3909 	mlagt	r9, r2, r9, r3
   dd372:	3701      	adds	r7, #1
   dd374:	901d      	str	r0, [sp, #116]	; 0x74
   dd376:	e7bf      	b.n	dd2f8 <_strtod_l+0x158>
   dd378:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd37a:	195a      	adds	r2, r3, r5
   dd37c:	921d      	str	r2, [sp, #116]	; 0x74
   dd37e:	5d5b      	ldrb	r3, [r3, r5]
   dd380:	2f00      	cmp	r7, #0
   dd382:	d037      	beq.n	dd3f4 <_strtod_l+0x254>
   dd384:	9007      	str	r0, [sp, #28]
   dd386:	463d      	mov	r5, r7
   dd388:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dd38c:	2a09      	cmp	r2, #9
   dd38e:	d912      	bls.n	dd3b6 <_strtod_l+0x216>
   dd390:	2201      	movs	r2, #1
   dd392:	e7c2      	b.n	dd31a <_strtod_l+0x17a>
   dd394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd396:	1c5a      	adds	r2, r3, #1
   dd398:	921d      	str	r2, [sp, #116]	; 0x74
   dd39a:	785b      	ldrb	r3, [r3, #1]
   dd39c:	3001      	adds	r0, #1
   dd39e:	2b30      	cmp	r3, #48	; 0x30
   dd3a0:	d0f8      	beq.n	dd394 <_strtod_l+0x1f4>
   dd3a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dd3a6:	2a08      	cmp	r2, #8
   dd3a8:	f200 84db 	bhi.w	ddd62 <_strtod_l+0xbc2>
   dd3ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dd3ae:	9007      	str	r0, [sp, #28]
   dd3b0:	2000      	movs	r0, #0
   dd3b2:	920a      	str	r2, [sp, #40]	; 0x28
   dd3b4:	4605      	mov	r5, r0
   dd3b6:	3b30      	subs	r3, #48	; 0x30
   dd3b8:	f100 0201 	add.w	r2, r0, #1
   dd3bc:	d014      	beq.n	dd3e8 <_strtod_l+0x248>
   dd3be:	9907      	ldr	r1, [sp, #28]
   dd3c0:	4411      	add	r1, r2
   dd3c2:	9107      	str	r1, [sp, #28]
   dd3c4:	462a      	mov	r2, r5
   dd3c6:	eb00 0e05 	add.w	lr, r0, r5
   dd3ca:	210a      	movs	r1, #10
   dd3cc:	4572      	cmp	r2, lr
   dd3ce:	d113      	bne.n	dd3f8 <_strtod_l+0x258>
   dd3d0:	182a      	adds	r2, r5, r0
   dd3d2:	2a08      	cmp	r2, #8
   dd3d4:	f105 0501 	add.w	r5, r5, #1
   dd3d8:	4405      	add	r5, r0
   dd3da:	dc1c      	bgt.n	dd416 <_strtod_l+0x276>
   dd3dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   dd3de:	220a      	movs	r2, #10
   dd3e0:	fb02 3301 	mla	r3, r2, r1, r3
   dd3e4:	9309      	str	r3, [sp, #36]	; 0x24
   dd3e6:	2200      	movs	r2, #0
   dd3e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd3ea:	1c59      	adds	r1, r3, #1
   dd3ec:	911d      	str	r1, [sp, #116]	; 0x74
   dd3ee:	785b      	ldrb	r3, [r3, #1]
   dd3f0:	4610      	mov	r0, r2
   dd3f2:	e7c9      	b.n	dd388 <_strtod_l+0x1e8>
   dd3f4:	4638      	mov	r0, r7
   dd3f6:	e7d2      	b.n	dd39e <_strtod_l+0x1fe>
   dd3f8:	2a08      	cmp	r2, #8
   dd3fa:	dc04      	bgt.n	dd406 <_strtod_l+0x266>
   dd3fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dd3fe:	434e      	muls	r6, r1
   dd400:	9609      	str	r6, [sp, #36]	; 0x24
   dd402:	3201      	adds	r2, #1
   dd404:	e7e2      	b.n	dd3cc <_strtod_l+0x22c>
   dd406:	f102 0c01 	add.w	ip, r2, #1
   dd40a:	f1bc 0f10 	cmp.w	ip, #16
   dd40e:	bfd8      	it	le
   dd410:	fb01 f909 	mulle.w	r9, r1, r9
   dd414:	e7f5      	b.n	dd402 <_strtod_l+0x262>
   dd416:	2d10      	cmp	r5, #16
   dd418:	bfdc      	itt	le
   dd41a:	220a      	movle	r2, #10
   dd41c:	fb02 3909 	mlale	r9, r2, r9, r3
   dd420:	e7e1      	b.n	dd3e6 <_strtod_l+0x246>
   dd422:	2300      	movs	r3, #0
   dd424:	9307      	str	r3, [sp, #28]
   dd426:	2201      	movs	r2, #1
   dd428:	e77c      	b.n	dd324 <_strtod_l+0x184>
   dd42a:	f04f 0c00 	mov.w	ip, #0
   dd42e:	f108 0302 	add.w	r3, r8, #2
   dd432:	931d      	str	r3, [sp, #116]	; 0x74
   dd434:	f898 3002 	ldrb.w	r3, [r8, #2]
   dd438:	e785      	b.n	dd346 <_strtod_l+0x1a6>
   dd43a:	f04f 0c01 	mov.w	ip, #1
   dd43e:	e7f6      	b.n	dd42e <_strtod_l+0x28e>
   dd440:	000e0474 	.word	0x000e0474
   dd444:	000e0320 	.word	0x000e0320
   dd448:	7ff00000 	.word	0x7ff00000
   dd44c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd44e:	1c59      	adds	r1, r3, #1
   dd450:	911d      	str	r1, [sp, #116]	; 0x74
   dd452:	785b      	ldrb	r3, [r3, #1]
   dd454:	2b30      	cmp	r3, #48	; 0x30
   dd456:	d0f9      	beq.n	dd44c <_strtod_l+0x2ac>
   dd458:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dd45c:	2908      	cmp	r1, #8
   dd45e:	f63f af79 	bhi.w	dd354 <_strtod_l+0x1b4>
   dd462:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dd466:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd468:	9308      	str	r3, [sp, #32]
   dd46a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd46c:	1c59      	adds	r1, r3, #1
   dd46e:	911d      	str	r1, [sp, #116]	; 0x74
   dd470:	785b      	ldrb	r3, [r3, #1]
   dd472:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dd476:	2e09      	cmp	r6, #9
   dd478:	d937      	bls.n	dd4ea <_strtod_l+0x34a>
   dd47a:	9e08      	ldr	r6, [sp, #32]
   dd47c:	1b89      	subs	r1, r1, r6
   dd47e:	2908      	cmp	r1, #8
   dd480:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dd484:	dc02      	bgt.n	dd48c <_strtod_l+0x2ec>
   dd486:	4576      	cmp	r6, lr
   dd488:	bfa8      	it	ge
   dd48a:	4676      	movge	r6, lr
   dd48c:	f1bc 0f00 	cmp.w	ip, #0
   dd490:	d000      	beq.n	dd494 <_strtod_l+0x2f4>
   dd492:	4276      	negs	r6, r6
   dd494:	2d00      	cmp	r5, #0
   dd496:	d14f      	bne.n	dd538 <_strtod_l+0x398>
   dd498:	9904      	ldr	r1, [sp, #16]
   dd49a:	4301      	orrs	r1, r0
   dd49c:	f47f aec2 	bne.w	dd224 <_strtod_l+0x84>
   dd4a0:	2a00      	cmp	r2, #0
   dd4a2:	f47f aedb 	bne.w	dd25c <_strtod_l+0xbc>
   dd4a6:	2b69      	cmp	r3, #105	; 0x69
   dd4a8:	d027      	beq.n	dd4fa <_strtod_l+0x35a>
   dd4aa:	dc24      	bgt.n	dd4f6 <_strtod_l+0x356>
   dd4ac:	2b49      	cmp	r3, #73	; 0x49
   dd4ae:	d024      	beq.n	dd4fa <_strtod_l+0x35a>
   dd4b0:	2b4e      	cmp	r3, #78	; 0x4e
   dd4b2:	f47f aed3 	bne.w	dd25c <_strtod_l+0xbc>
   dd4b6:	499e      	ldr	r1, [pc, #632]	; (dd730 <_strtod_l+0x590>)
   dd4b8:	a81d      	add	r0, sp, #116	; 0x74
   dd4ba:	f001 f8f7 	bl	de6ac <__match>
   dd4be:	2800      	cmp	r0, #0
   dd4c0:	f43f aecc 	beq.w	dd25c <_strtod_l+0xbc>
   dd4c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd4c6:	781b      	ldrb	r3, [r3, #0]
   dd4c8:	2b28      	cmp	r3, #40	; 0x28
   dd4ca:	d12d      	bne.n	dd528 <_strtod_l+0x388>
   dd4cc:	4999      	ldr	r1, [pc, #612]	; (dd734 <_strtod_l+0x594>)
   dd4ce:	aa20      	add	r2, sp, #128	; 0x80
   dd4d0:	a81d      	add	r0, sp, #116	; 0x74
   dd4d2:	f001 f8ff 	bl	de6d4 <__hexnan>
   dd4d6:	2805      	cmp	r0, #5
   dd4d8:	d126      	bne.n	dd528 <_strtod_l+0x388>
   dd4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dd4dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dd4e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dd4e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dd4e8:	e69c      	b.n	dd224 <_strtod_l+0x84>
   dd4ea:	210a      	movs	r1, #10
   dd4ec:	fb01 3e0e 	mla	lr, r1, lr, r3
   dd4f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dd4f4:	e7b9      	b.n	dd46a <_strtod_l+0x2ca>
   dd4f6:	2b6e      	cmp	r3, #110	; 0x6e
   dd4f8:	e7db      	b.n	dd4b2 <_strtod_l+0x312>
   dd4fa:	498f      	ldr	r1, [pc, #572]	; (dd738 <_strtod_l+0x598>)
   dd4fc:	a81d      	add	r0, sp, #116	; 0x74
   dd4fe:	f001 f8d5 	bl	de6ac <__match>
   dd502:	2800      	cmp	r0, #0
   dd504:	f43f aeaa 	beq.w	dd25c <_strtod_l+0xbc>
   dd508:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd50a:	498c      	ldr	r1, [pc, #560]	; (dd73c <_strtod_l+0x59c>)
   dd50c:	3b01      	subs	r3, #1
   dd50e:	a81d      	add	r0, sp, #116	; 0x74
   dd510:	931d      	str	r3, [sp, #116]	; 0x74
   dd512:	f001 f8cb 	bl	de6ac <__match>
   dd516:	b910      	cbnz	r0, dd51e <_strtod_l+0x37e>
   dd518:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd51a:	3301      	adds	r3, #1
   dd51c:	931d      	str	r3, [sp, #116]	; 0x74
   dd51e:	f8df b22c 	ldr.w	fp, [pc, #556]	; dd74c <_strtod_l+0x5ac>
   dd522:	f04f 0a00 	mov.w	sl, #0
   dd526:	e67d      	b.n	dd224 <_strtod_l+0x84>
   dd528:	4885      	ldr	r0, [pc, #532]	; (dd740 <_strtod_l+0x5a0>)
   dd52a:	f001 fe09 	bl	df140 <nan>
   dd52e:	ed8d 0b04 	vstr	d0, [sp, #16]
   dd532:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dd536:	e675      	b.n	dd224 <_strtod_l+0x84>
   dd538:	9b07      	ldr	r3, [sp, #28]
   dd53a:	9809      	ldr	r0, [sp, #36]	; 0x24
   dd53c:	1af3      	subs	r3, r6, r3
   dd53e:	2f00      	cmp	r7, #0
   dd540:	bf08      	it	eq
   dd542:	462f      	moveq	r7, r5
   dd544:	2d10      	cmp	r5, #16
   dd546:	9308      	str	r3, [sp, #32]
   dd548:	46a8      	mov	r8, r5
   dd54a:	bfa8      	it	ge
   dd54c:	f04f 0810 	movge.w	r8, #16
   dd550:	f7ff f8d6 	bl	dc700 <__aeabi_ui2d>
   dd554:	2d09      	cmp	r5, #9
   dd556:	4682      	mov	sl, r0
   dd558:	468b      	mov	fp, r1
   dd55a:	dd13      	ble.n	dd584 <_strtod_l+0x3e4>
   dd55c:	4b79      	ldr	r3, [pc, #484]	; (dd744 <_strtod_l+0x5a4>)
   dd55e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dd562:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dd566:	f7ff f945 	bl	dc7f4 <__aeabi_dmul>
   dd56a:	4682      	mov	sl, r0
   dd56c:	4648      	mov	r0, r9
   dd56e:	468b      	mov	fp, r1
   dd570:	f7ff f8c6 	bl	dc700 <__aeabi_ui2d>
   dd574:	4602      	mov	r2, r0
   dd576:	460b      	mov	r3, r1
   dd578:	4650      	mov	r0, sl
   dd57a:	4659      	mov	r1, fp
   dd57c:	f7fe ff84 	bl	dc488 <__adddf3>
   dd580:	4682      	mov	sl, r0
   dd582:	468b      	mov	fp, r1
   dd584:	2d0f      	cmp	r5, #15
   dd586:	dc38      	bgt.n	dd5fa <_strtod_l+0x45a>
   dd588:	9b08      	ldr	r3, [sp, #32]
   dd58a:	2b00      	cmp	r3, #0
   dd58c:	f43f ae4a 	beq.w	dd224 <_strtod_l+0x84>
   dd590:	dd24      	ble.n	dd5dc <_strtod_l+0x43c>
   dd592:	2b16      	cmp	r3, #22
   dd594:	dc0b      	bgt.n	dd5ae <_strtod_l+0x40e>
   dd596:	4d6b      	ldr	r5, [pc, #428]	; (dd744 <_strtod_l+0x5a4>)
   dd598:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dd59c:	e9d5 0100 	ldrd	r0, r1, [r5]
   dd5a0:	4652      	mov	r2, sl
   dd5a2:	465b      	mov	r3, fp
   dd5a4:	f7ff f926 	bl	dc7f4 <__aeabi_dmul>
   dd5a8:	4682      	mov	sl, r0
   dd5aa:	468b      	mov	fp, r1
   dd5ac:	e63a      	b.n	dd224 <_strtod_l+0x84>
   dd5ae:	9a08      	ldr	r2, [sp, #32]
   dd5b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dd5b4:	4293      	cmp	r3, r2
   dd5b6:	db20      	blt.n	dd5fa <_strtod_l+0x45a>
   dd5b8:	4c62      	ldr	r4, [pc, #392]	; (dd744 <_strtod_l+0x5a4>)
   dd5ba:	f1c5 050f 	rsb	r5, r5, #15
   dd5be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dd5c2:	4652      	mov	r2, sl
   dd5c4:	465b      	mov	r3, fp
   dd5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd5ca:	f7ff f913 	bl	dc7f4 <__aeabi_dmul>
   dd5ce:	9b08      	ldr	r3, [sp, #32]
   dd5d0:	1b5d      	subs	r5, r3, r5
   dd5d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dd5d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   dd5da:	e7e3      	b.n	dd5a4 <_strtod_l+0x404>
   dd5dc:	9b08      	ldr	r3, [sp, #32]
   dd5de:	3316      	adds	r3, #22
   dd5e0:	db0b      	blt.n	dd5fa <_strtod_l+0x45a>
   dd5e2:	9b07      	ldr	r3, [sp, #28]
   dd5e4:	4a57      	ldr	r2, [pc, #348]	; (dd744 <_strtod_l+0x5a4>)
   dd5e6:	1b9e      	subs	r6, r3, r6
   dd5e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dd5ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   dd5f0:	4650      	mov	r0, sl
   dd5f2:	4659      	mov	r1, fp
   dd5f4:	f7ff fa28 	bl	dca48 <__aeabi_ddiv>
   dd5f8:	e7d6      	b.n	dd5a8 <_strtod_l+0x408>
   dd5fa:	9b08      	ldr	r3, [sp, #32]
   dd5fc:	eba5 0808 	sub.w	r8, r5, r8
   dd600:	4498      	add	r8, r3
   dd602:	f1b8 0f00 	cmp.w	r8, #0
   dd606:	dd71      	ble.n	dd6ec <_strtod_l+0x54c>
   dd608:	f018 030f 	ands.w	r3, r8, #15
   dd60c:	d00a      	beq.n	dd624 <_strtod_l+0x484>
   dd60e:	494d      	ldr	r1, [pc, #308]	; (dd744 <_strtod_l+0x5a4>)
   dd610:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dd614:	4652      	mov	r2, sl
   dd616:	465b      	mov	r3, fp
   dd618:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd61c:	f7ff f8ea 	bl	dc7f4 <__aeabi_dmul>
   dd620:	4682      	mov	sl, r0
   dd622:	468b      	mov	fp, r1
   dd624:	f038 080f 	bics.w	r8, r8, #15
   dd628:	d04d      	beq.n	dd6c6 <_strtod_l+0x526>
   dd62a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dd62e:	dd22      	ble.n	dd676 <_strtod_l+0x4d6>
   dd630:	2500      	movs	r5, #0
   dd632:	462e      	mov	r6, r5
   dd634:	9509      	str	r5, [sp, #36]	; 0x24
   dd636:	9507      	str	r5, [sp, #28]
   dd638:	2322      	movs	r3, #34	; 0x22
   dd63a:	f8df b110 	ldr.w	fp, [pc, #272]	; dd74c <_strtod_l+0x5ac>
   dd63e:	6023      	str	r3, [r4, #0]
   dd640:	f04f 0a00 	mov.w	sl, #0
   dd644:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd646:	2b00      	cmp	r3, #0
   dd648:	f43f adec 	beq.w	dd224 <_strtod_l+0x84>
   dd64c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd64e:	4620      	mov	r0, r4
   dd650:	f001 f938 	bl	de8c4 <_Bfree>
   dd654:	9907      	ldr	r1, [sp, #28]
   dd656:	4620      	mov	r0, r4
   dd658:	f001 f934 	bl	de8c4 <_Bfree>
   dd65c:	4631      	mov	r1, r6
   dd65e:	4620      	mov	r0, r4
   dd660:	f001 f930 	bl	de8c4 <_Bfree>
   dd664:	9909      	ldr	r1, [sp, #36]	; 0x24
   dd666:	4620      	mov	r0, r4
   dd668:	f001 f92c 	bl	de8c4 <_Bfree>
   dd66c:	4629      	mov	r1, r5
   dd66e:	4620      	mov	r0, r4
   dd670:	f001 f928 	bl	de8c4 <_Bfree>
   dd674:	e5d6      	b.n	dd224 <_strtod_l+0x84>
   dd676:	2300      	movs	r3, #0
   dd678:	ea4f 1828 	mov.w	r8, r8, asr #4
   dd67c:	4650      	mov	r0, sl
   dd67e:	4659      	mov	r1, fp
   dd680:	4699      	mov	r9, r3
   dd682:	f1b8 0f01 	cmp.w	r8, #1
   dd686:	dc21      	bgt.n	dd6cc <_strtod_l+0x52c>
   dd688:	b10b      	cbz	r3, dd68e <_strtod_l+0x4ee>
   dd68a:	4682      	mov	sl, r0
   dd68c:	468b      	mov	fp, r1
   dd68e:	4b2e      	ldr	r3, [pc, #184]	; (dd748 <_strtod_l+0x5a8>)
   dd690:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dd694:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dd698:	4652      	mov	r2, sl
   dd69a:	465b      	mov	r3, fp
   dd69c:	e9d9 0100 	ldrd	r0, r1, [r9]
   dd6a0:	f7ff f8a8 	bl	dc7f4 <__aeabi_dmul>
   dd6a4:	4b29      	ldr	r3, [pc, #164]	; (dd74c <_strtod_l+0x5ac>)
   dd6a6:	460a      	mov	r2, r1
   dd6a8:	400b      	ands	r3, r1
   dd6aa:	4929      	ldr	r1, [pc, #164]	; (dd750 <_strtod_l+0x5b0>)
   dd6ac:	428b      	cmp	r3, r1
   dd6ae:	4682      	mov	sl, r0
   dd6b0:	d8be      	bhi.n	dd630 <_strtod_l+0x490>
   dd6b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dd6b6:	428b      	cmp	r3, r1
   dd6b8:	bf86      	itte	hi
   dd6ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dd754 <_strtod_l+0x5b4>
   dd6be:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dd6c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dd6c6:	2300      	movs	r3, #0
   dd6c8:	9304      	str	r3, [sp, #16]
   dd6ca:	e081      	b.n	dd7d0 <_strtod_l+0x630>
   dd6cc:	f018 0f01 	tst.w	r8, #1
   dd6d0:	d007      	beq.n	dd6e2 <_strtod_l+0x542>
   dd6d2:	4b1d      	ldr	r3, [pc, #116]	; (dd748 <_strtod_l+0x5a8>)
   dd6d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dd6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd6dc:	f7ff f88a 	bl	dc7f4 <__aeabi_dmul>
   dd6e0:	2301      	movs	r3, #1
   dd6e2:	f109 0901 	add.w	r9, r9, #1
   dd6e6:	ea4f 0868 	mov.w	r8, r8, asr #1
   dd6ea:	e7ca      	b.n	dd682 <_strtod_l+0x4e2>
   dd6ec:	d0eb      	beq.n	dd6c6 <_strtod_l+0x526>
   dd6ee:	f1c8 0800 	rsb	r8, r8, #0
   dd6f2:	f018 020f 	ands.w	r2, r8, #15
   dd6f6:	d00a      	beq.n	dd70e <_strtod_l+0x56e>
   dd6f8:	4b12      	ldr	r3, [pc, #72]	; (dd744 <_strtod_l+0x5a4>)
   dd6fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dd6fe:	4650      	mov	r0, sl
   dd700:	4659      	mov	r1, fp
   dd702:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd706:	f7ff f99f 	bl	dca48 <__aeabi_ddiv>
   dd70a:	4682      	mov	sl, r0
   dd70c:	468b      	mov	fp, r1
   dd70e:	ea5f 1828 	movs.w	r8, r8, asr #4
   dd712:	d0d8      	beq.n	dd6c6 <_strtod_l+0x526>
   dd714:	f1b8 0f1f 	cmp.w	r8, #31
   dd718:	dd1e      	ble.n	dd758 <_strtod_l+0x5b8>
   dd71a:	2500      	movs	r5, #0
   dd71c:	462e      	mov	r6, r5
   dd71e:	9509      	str	r5, [sp, #36]	; 0x24
   dd720:	9507      	str	r5, [sp, #28]
   dd722:	2322      	movs	r3, #34	; 0x22
   dd724:	f04f 0a00 	mov.w	sl, #0
   dd728:	f04f 0b00 	mov.w	fp, #0
   dd72c:	6023      	str	r3, [r4, #0]
   dd72e:	e789      	b.n	dd644 <_strtod_l+0x4a4>
   dd730:	000e031b 	.word	0x000e031b
   dd734:	000e0334 	.word	0x000e0334
   dd738:	000e0312 	.word	0x000e0312
   dd73c:	000e0315 	.word	0x000e0315
   dd740:	000e0135 	.word	0x000e0135
   dd744:	000e04b0 	.word	0x000e04b0
   dd748:	000e0488 	.word	0x000e0488
   dd74c:	7ff00000 	.word	0x7ff00000
   dd750:	7ca00000 	.word	0x7ca00000
   dd754:	7fefffff 	.word	0x7fefffff
   dd758:	f018 0310 	ands.w	r3, r8, #16
   dd75c:	bf18      	it	ne
   dd75e:	236a      	movne	r3, #106	; 0x6a
   dd760:	f8df 93b4 	ldr.w	r9, [pc, #948]	; ddb18 <_strtod_l+0x978>
   dd764:	9304      	str	r3, [sp, #16]
   dd766:	4650      	mov	r0, sl
   dd768:	4659      	mov	r1, fp
   dd76a:	2300      	movs	r3, #0
   dd76c:	f018 0f01 	tst.w	r8, #1
   dd770:	d004      	beq.n	dd77c <_strtod_l+0x5dc>
   dd772:	e9d9 2300 	ldrd	r2, r3, [r9]
   dd776:	f7ff f83d 	bl	dc7f4 <__aeabi_dmul>
   dd77a:	2301      	movs	r3, #1
   dd77c:	ea5f 0868 	movs.w	r8, r8, asr #1
   dd780:	f109 0908 	add.w	r9, r9, #8
   dd784:	d1f2      	bne.n	dd76c <_strtod_l+0x5cc>
   dd786:	b10b      	cbz	r3, dd78c <_strtod_l+0x5ec>
   dd788:	4682      	mov	sl, r0
   dd78a:	468b      	mov	fp, r1
   dd78c:	9b04      	ldr	r3, [sp, #16]
   dd78e:	b1bb      	cbz	r3, dd7c0 <_strtod_l+0x620>
   dd790:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dd794:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd798:	2b00      	cmp	r3, #0
   dd79a:	4659      	mov	r1, fp
   dd79c:	dd10      	ble.n	dd7c0 <_strtod_l+0x620>
   dd79e:	2b1f      	cmp	r3, #31
   dd7a0:	f340 8128 	ble.w	dd9f4 <_strtod_l+0x854>
   dd7a4:	2b34      	cmp	r3, #52	; 0x34
   dd7a6:	bfde      	ittt	le
   dd7a8:	3b20      	suble	r3, #32
   dd7aa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dd7ae:	fa02 f303 	lslle.w	r3, r2, r3
   dd7b2:	f04f 0a00 	mov.w	sl, #0
   dd7b6:	bfcc      	ite	gt
   dd7b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dd7bc:	ea03 0b01 	andle.w	fp, r3, r1
   dd7c0:	2200      	movs	r2, #0
   dd7c2:	2300      	movs	r3, #0
   dd7c4:	4650      	mov	r0, sl
   dd7c6:	4659      	mov	r1, fp
   dd7c8:	f7ff fa7c 	bl	dccc4 <__aeabi_dcmpeq>
   dd7cc:	2800      	cmp	r0, #0
   dd7ce:	d1a4      	bne.n	dd71a <_strtod_l+0x57a>
   dd7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd7d2:	9300      	str	r3, [sp, #0]
   dd7d4:	990a      	ldr	r1, [sp, #40]	; 0x28
   dd7d6:	462b      	mov	r3, r5
   dd7d8:	463a      	mov	r2, r7
   dd7da:	4620      	mov	r0, r4
   dd7dc:	f001 f8c7 	bl	de96e <__s2b>
   dd7e0:	9009      	str	r0, [sp, #36]	; 0x24
   dd7e2:	2800      	cmp	r0, #0
   dd7e4:	f43f af24 	beq.w	dd630 <_strtod_l+0x490>
   dd7e8:	9b07      	ldr	r3, [sp, #28]
   dd7ea:	1b9e      	subs	r6, r3, r6
   dd7ec:	9b08      	ldr	r3, [sp, #32]
   dd7ee:	2b00      	cmp	r3, #0
   dd7f0:	bfb4      	ite	lt
   dd7f2:	4633      	movlt	r3, r6
   dd7f4:	2300      	movge	r3, #0
   dd7f6:	9310      	str	r3, [sp, #64]	; 0x40
   dd7f8:	9b08      	ldr	r3, [sp, #32]
   dd7fa:	2500      	movs	r5, #0
   dd7fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dd800:	9318      	str	r3, [sp, #96]	; 0x60
   dd802:	462e      	mov	r6, r5
   dd804:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd806:	4620      	mov	r0, r4
   dd808:	6859      	ldr	r1, [r3, #4]
   dd80a:	f001 f827 	bl	de85c <_Balloc>
   dd80e:	9007      	str	r0, [sp, #28]
   dd810:	2800      	cmp	r0, #0
   dd812:	f43f af11 	beq.w	dd638 <_strtod_l+0x498>
   dd816:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd818:	691a      	ldr	r2, [r3, #16]
   dd81a:	3202      	adds	r2, #2
   dd81c:	f103 010c 	add.w	r1, r3, #12
   dd820:	0092      	lsls	r2, r2, #2
   dd822:	300c      	adds	r0, #12
   dd824:	f7ff fbc2 	bl	dcfac <memcpy>
   dd828:	ec4b ab10 	vmov	d0, sl, fp
   dd82c:	aa20      	add	r2, sp, #128	; 0x80
   dd82e:	a91f      	add	r1, sp, #124	; 0x7c
   dd830:	4620      	mov	r0, r4
   dd832:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dd836:	f001 fb89 	bl	def4c <__d2b>
   dd83a:	901e      	str	r0, [sp, #120]	; 0x78
   dd83c:	2800      	cmp	r0, #0
   dd83e:	f43f aefb 	beq.w	dd638 <_strtod_l+0x498>
   dd842:	2101      	movs	r1, #1
   dd844:	4620      	mov	r0, r4
   dd846:	f001 f920 	bl	dea8a <__i2b>
   dd84a:	4606      	mov	r6, r0
   dd84c:	2800      	cmp	r0, #0
   dd84e:	f43f aef3 	beq.w	dd638 <_strtod_l+0x498>
   dd852:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dd854:	9904      	ldr	r1, [sp, #16]
   dd856:	2b00      	cmp	r3, #0
   dd858:	bfab      	itete	ge
   dd85a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dd85c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dd85e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dd860:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dd864:	bfac      	ite	ge
   dd866:	eb03 0902 	addge.w	r9, r3, r2
   dd86a:	1ad7      	sublt	r7, r2, r3
   dd86c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dd86e:	eba3 0801 	sub.w	r8, r3, r1
   dd872:	4490      	add	r8, r2
   dd874:	4ba3      	ldr	r3, [pc, #652]	; (ddb04 <_strtod_l+0x964>)
   dd876:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dd87a:	4598      	cmp	r8, r3
   dd87c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dd880:	f280 80cc 	bge.w	dda1c <_strtod_l+0x87c>
   dd884:	eba3 0308 	sub.w	r3, r3, r8
   dd888:	2b1f      	cmp	r3, #31
   dd88a:	eba2 0203 	sub.w	r2, r2, r3
   dd88e:	f04f 0101 	mov.w	r1, #1
   dd892:	f300 80b6 	bgt.w	dda02 <_strtod_l+0x862>
   dd896:	fa01 f303 	lsl.w	r3, r1, r3
   dd89a:	9311      	str	r3, [sp, #68]	; 0x44
   dd89c:	2300      	movs	r3, #0
   dd89e:	930c      	str	r3, [sp, #48]	; 0x30
   dd8a0:	eb09 0802 	add.w	r8, r9, r2
   dd8a4:	9b04      	ldr	r3, [sp, #16]
   dd8a6:	45c1      	cmp	r9, r8
   dd8a8:	4417      	add	r7, r2
   dd8aa:	441f      	add	r7, r3
   dd8ac:	464b      	mov	r3, r9
   dd8ae:	bfa8      	it	ge
   dd8b0:	4643      	movge	r3, r8
   dd8b2:	42bb      	cmp	r3, r7
   dd8b4:	bfa8      	it	ge
   dd8b6:	463b      	movge	r3, r7
   dd8b8:	2b00      	cmp	r3, #0
   dd8ba:	bfc2      	ittt	gt
   dd8bc:	eba8 0803 	subgt.w	r8, r8, r3
   dd8c0:	1aff      	subgt	r7, r7, r3
   dd8c2:	eba9 0903 	subgt.w	r9, r9, r3
   dd8c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dd8c8:	2b00      	cmp	r3, #0
   dd8ca:	dd17      	ble.n	dd8fc <_strtod_l+0x75c>
   dd8cc:	4631      	mov	r1, r6
   dd8ce:	461a      	mov	r2, r3
   dd8d0:	4620      	mov	r0, r4
   dd8d2:	f001 f97f 	bl	debd4 <__pow5mult>
   dd8d6:	4606      	mov	r6, r0
   dd8d8:	2800      	cmp	r0, #0
   dd8da:	f43f aead 	beq.w	dd638 <_strtod_l+0x498>
   dd8de:	4601      	mov	r1, r0
   dd8e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dd8e2:	4620      	mov	r0, r4
   dd8e4:	f001 f8da 	bl	dea9c <__multiply>
   dd8e8:	900f      	str	r0, [sp, #60]	; 0x3c
   dd8ea:	2800      	cmp	r0, #0
   dd8ec:	f43f aea4 	beq.w	dd638 <_strtod_l+0x498>
   dd8f0:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd8f2:	4620      	mov	r0, r4
   dd8f4:	f000 ffe6 	bl	de8c4 <_Bfree>
   dd8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd8fa:	931e      	str	r3, [sp, #120]	; 0x78
   dd8fc:	f1b8 0f00 	cmp.w	r8, #0
   dd900:	f300 8091 	bgt.w	dda26 <_strtod_l+0x886>
   dd904:	9b08      	ldr	r3, [sp, #32]
   dd906:	2b00      	cmp	r3, #0
   dd908:	dd08      	ble.n	dd91c <_strtod_l+0x77c>
   dd90a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dd90c:	9907      	ldr	r1, [sp, #28]
   dd90e:	4620      	mov	r0, r4
   dd910:	f001 f960 	bl	debd4 <__pow5mult>
   dd914:	9007      	str	r0, [sp, #28]
   dd916:	2800      	cmp	r0, #0
   dd918:	f43f ae8e 	beq.w	dd638 <_strtod_l+0x498>
   dd91c:	2f00      	cmp	r7, #0
   dd91e:	dd08      	ble.n	dd932 <_strtod_l+0x792>
   dd920:	9907      	ldr	r1, [sp, #28]
   dd922:	463a      	mov	r2, r7
   dd924:	4620      	mov	r0, r4
   dd926:	f001 f9a3 	bl	dec70 <__lshift>
   dd92a:	9007      	str	r0, [sp, #28]
   dd92c:	2800      	cmp	r0, #0
   dd92e:	f43f ae83 	beq.w	dd638 <_strtod_l+0x498>
   dd932:	f1b9 0f00 	cmp.w	r9, #0
   dd936:	dd08      	ble.n	dd94a <_strtod_l+0x7aa>
   dd938:	4631      	mov	r1, r6
   dd93a:	464a      	mov	r2, r9
   dd93c:	4620      	mov	r0, r4
   dd93e:	f001 f997 	bl	dec70 <__lshift>
   dd942:	4606      	mov	r6, r0
   dd944:	2800      	cmp	r0, #0
   dd946:	f43f ae77 	beq.w	dd638 <_strtod_l+0x498>
   dd94a:	9a07      	ldr	r2, [sp, #28]
   dd94c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd94e:	4620      	mov	r0, r4
   dd950:	f001 fa09 	bl	ded66 <__mdiff>
   dd954:	4605      	mov	r5, r0
   dd956:	2800      	cmp	r0, #0
   dd958:	f43f ae6e 	beq.w	dd638 <_strtod_l+0x498>
   dd95c:	68c3      	ldr	r3, [r0, #12]
   dd95e:	930f      	str	r3, [sp, #60]	; 0x3c
   dd960:	2300      	movs	r3, #0
   dd962:	60c3      	str	r3, [r0, #12]
   dd964:	4631      	mov	r1, r6
   dd966:	f001 f9e2 	bl	ded2e <__mcmp>
   dd96a:	2800      	cmp	r0, #0
   dd96c:	da65      	bge.n	dda3a <_strtod_l+0x89a>
   dd96e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd970:	ea53 030a 	orrs.w	r3, r3, sl
   dd974:	f040 8087 	bne.w	dda86 <_strtod_l+0x8e6>
   dd978:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd97c:	2b00      	cmp	r3, #0
   dd97e:	f040 8082 	bne.w	dda86 <_strtod_l+0x8e6>
   dd982:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd986:	0d1b      	lsrs	r3, r3, #20
   dd988:	051b      	lsls	r3, r3, #20
   dd98a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dd98e:	d97a      	bls.n	dda86 <_strtod_l+0x8e6>
   dd990:	696b      	ldr	r3, [r5, #20]
   dd992:	b913      	cbnz	r3, dd99a <_strtod_l+0x7fa>
   dd994:	692b      	ldr	r3, [r5, #16]
   dd996:	2b01      	cmp	r3, #1
   dd998:	dd75      	ble.n	dda86 <_strtod_l+0x8e6>
   dd99a:	4629      	mov	r1, r5
   dd99c:	2201      	movs	r2, #1
   dd99e:	4620      	mov	r0, r4
   dd9a0:	f001 f966 	bl	dec70 <__lshift>
   dd9a4:	4631      	mov	r1, r6
   dd9a6:	4605      	mov	r5, r0
   dd9a8:	f001 f9c1 	bl	ded2e <__mcmp>
   dd9ac:	2800      	cmp	r0, #0
   dd9ae:	dd6a      	ble.n	dda86 <_strtod_l+0x8e6>
   dd9b0:	9904      	ldr	r1, [sp, #16]
   dd9b2:	4a55      	ldr	r2, [pc, #340]	; (ddb08 <_strtod_l+0x968>)
   dd9b4:	465b      	mov	r3, fp
   dd9b6:	2900      	cmp	r1, #0
   dd9b8:	f000 8085 	beq.w	ddac6 <_strtod_l+0x926>
   dd9bc:	ea02 010b 	and.w	r1, r2, fp
   dd9c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dd9c4:	dc7f      	bgt.n	ddac6 <_strtod_l+0x926>
   dd9c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dd9ca:	f77f aeaa 	ble.w	dd722 <_strtod_l+0x582>
   dd9ce:	4a4f      	ldr	r2, [pc, #316]	; (ddb0c <_strtod_l+0x96c>)
   dd9d0:	2300      	movs	r3, #0
   dd9d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dd9d6:	4650      	mov	r0, sl
   dd9d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dd9dc:	4659      	mov	r1, fp
   dd9de:	f7fe ff09 	bl	dc7f4 <__aeabi_dmul>
   dd9e2:	460b      	mov	r3, r1
   dd9e4:	4303      	orrs	r3, r0
   dd9e6:	bf08      	it	eq
   dd9e8:	2322      	moveq	r3, #34	; 0x22
   dd9ea:	4682      	mov	sl, r0
   dd9ec:	468b      	mov	fp, r1
   dd9ee:	bf08      	it	eq
   dd9f0:	6023      	streq	r3, [r4, #0]
   dd9f2:	e62b      	b.n	dd64c <_strtod_l+0x4ac>
   dd9f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd9f8:	fa02 f303 	lsl.w	r3, r2, r3
   dd9fc:	ea03 0a0a 	and.w	sl, r3, sl
   dda00:	e6de      	b.n	dd7c0 <_strtod_l+0x620>
   dda02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dda06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dda0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dda0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dda12:	fa01 f308 	lsl.w	r3, r1, r8
   dda16:	930c      	str	r3, [sp, #48]	; 0x30
   dda18:	9111      	str	r1, [sp, #68]	; 0x44
   dda1a:	e741      	b.n	dd8a0 <_strtod_l+0x700>
   dda1c:	2300      	movs	r3, #0
   dda1e:	930c      	str	r3, [sp, #48]	; 0x30
   dda20:	2301      	movs	r3, #1
   dda22:	9311      	str	r3, [sp, #68]	; 0x44
   dda24:	e73c      	b.n	dd8a0 <_strtod_l+0x700>
   dda26:	991e      	ldr	r1, [sp, #120]	; 0x78
   dda28:	4642      	mov	r2, r8
   dda2a:	4620      	mov	r0, r4
   dda2c:	f001 f920 	bl	dec70 <__lshift>
   dda30:	901e      	str	r0, [sp, #120]	; 0x78
   dda32:	2800      	cmp	r0, #0
   dda34:	f47f af66 	bne.w	dd904 <_strtod_l+0x764>
   dda38:	e5fe      	b.n	dd638 <_strtod_l+0x498>
   dda3a:	465f      	mov	r7, fp
   dda3c:	d16e      	bne.n	ddb1c <_strtod_l+0x97c>
   dda3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dda40:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dda44:	b342      	cbz	r2, dda98 <_strtod_l+0x8f8>
   dda46:	4a32      	ldr	r2, [pc, #200]	; (ddb10 <_strtod_l+0x970>)
   dda48:	4293      	cmp	r3, r2
   dda4a:	d128      	bne.n	dda9e <_strtod_l+0x8fe>
   dda4c:	9b04      	ldr	r3, [sp, #16]
   dda4e:	4650      	mov	r0, sl
   dda50:	b1eb      	cbz	r3, dda8e <_strtod_l+0x8ee>
   dda52:	4a2d      	ldr	r2, [pc, #180]	; (ddb08 <_strtod_l+0x968>)
   dda54:	403a      	ands	r2, r7
   dda56:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dda5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dda5e:	d819      	bhi.n	dda94 <_strtod_l+0x8f4>
   dda60:	0d12      	lsrs	r2, r2, #20
   dda62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dda66:	fa01 f303 	lsl.w	r3, r1, r3
   dda6a:	4298      	cmp	r0, r3
   dda6c:	d117      	bne.n	dda9e <_strtod_l+0x8fe>
   dda6e:	4b29      	ldr	r3, [pc, #164]	; (ddb14 <_strtod_l+0x974>)
   dda70:	429f      	cmp	r7, r3
   dda72:	d102      	bne.n	dda7a <_strtod_l+0x8da>
   dda74:	3001      	adds	r0, #1
   dda76:	f43f addf 	beq.w	dd638 <_strtod_l+0x498>
   dda7a:	4b23      	ldr	r3, [pc, #140]	; (ddb08 <_strtod_l+0x968>)
   dda7c:	403b      	ands	r3, r7
   dda7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dda82:	f04f 0a00 	mov.w	sl, #0
   dda86:	9b04      	ldr	r3, [sp, #16]
   dda88:	2b00      	cmp	r3, #0
   dda8a:	d1a0      	bne.n	dd9ce <_strtod_l+0x82e>
   dda8c:	e5de      	b.n	dd64c <_strtod_l+0x4ac>
   dda8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dda92:	e7ea      	b.n	dda6a <_strtod_l+0x8ca>
   dda94:	460b      	mov	r3, r1
   dda96:	e7e8      	b.n	dda6a <_strtod_l+0x8ca>
   dda98:	ea53 030a 	orrs.w	r3, r3, sl
   dda9c:	d088      	beq.n	dd9b0 <_strtod_l+0x810>
   dda9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ddaa0:	b1db      	cbz	r3, ddada <_strtod_l+0x93a>
   ddaa2:	423b      	tst	r3, r7
   ddaa4:	d0ef      	beq.n	dda86 <_strtod_l+0x8e6>
   ddaa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ddaa8:	9a04      	ldr	r2, [sp, #16]
   ddaaa:	4650      	mov	r0, sl
   ddaac:	4659      	mov	r1, fp
   ddaae:	b1c3      	cbz	r3, ddae2 <_strtod_l+0x942>
   ddab0:	f7ff fb58 	bl	dd164 <sulp>
   ddab4:	4602      	mov	r2, r0
   ddab6:	460b      	mov	r3, r1
   ddab8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   ddabc:	f7fe fce4 	bl	dc488 <__adddf3>
   ddac0:	4682      	mov	sl, r0
   ddac2:	468b      	mov	fp, r1
   ddac4:	e7df      	b.n	dda86 <_strtod_l+0x8e6>
   ddac6:	4013      	ands	r3, r2
   ddac8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   ddacc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   ddad0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   ddad4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ddad8:	e7d5      	b.n	dda86 <_strtod_l+0x8e6>
   ddada:	9b11      	ldr	r3, [sp, #68]	; 0x44
   ddadc:	ea13 0f0a 	tst.w	r3, sl
   ddae0:	e7e0      	b.n	ddaa4 <_strtod_l+0x904>
   ddae2:	f7ff fb3f 	bl	dd164 <sulp>
   ddae6:	4602      	mov	r2, r0
   ddae8:	460b      	mov	r3, r1
   ddaea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   ddaee:	f7fe fcc9 	bl	dc484 <__aeabi_dsub>
   ddaf2:	2200      	movs	r2, #0
   ddaf4:	2300      	movs	r3, #0
   ddaf6:	4682      	mov	sl, r0
   ddaf8:	468b      	mov	fp, r1
   ddafa:	f7ff f8e3 	bl	dccc4 <__aeabi_dcmpeq>
   ddafe:	2800      	cmp	r0, #0
   ddb00:	d0c1      	beq.n	dda86 <_strtod_l+0x8e6>
   ddb02:	e60e      	b.n	dd722 <_strtod_l+0x582>
   ddb04:	fffffc02 	.word	0xfffffc02
   ddb08:	7ff00000 	.word	0x7ff00000
   ddb0c:	39500000 	.word	0x39500000
   ddb10:	000fffff 	.word	0x000fffff
   ddb14:	7fefffff 	.word	0x7fefffff
   ddb18:	000e0348 	.word	0x000e0348
   ddb1c:	4631      	mov	r1, r6
   ddb1e:	4628      	mov	r0, r5
   ddb20:	f001 fa64 	bl	defec <__ratio>
   ddb24:	ec59 8b10 	vmov	r8, r9, d0
   ddb28:	ee10 0a10 	vmov	r0, s0
   ddb2c:	2200      	movs	r2, #0
   ddb2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ddb32:	4649      	mov	r1, r9
   ddb34:	f7ff f8da 	bl	dccec <__aeabi_dcmple>
   ddb38:	2800      	cmp	r0, #0
   ddb3a:	d07c      	beq.n	ddc36 <_strtod_l+0xa96>
   ddb3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ddb3e:	2b00      	cmp	r3, #0
   ddb40:	d04c      	beq.n	ddbdc <_strtod_l+0xa3c>
   ddb42:	4b95      	ldr	r3, [pc, #596]	; (ddd98 <_strtod_l+0xbf8>)
   ddb44:	2200      	movs	r2, #0
   ddb46:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   ddb4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; ddd98 <_strtod_l+0xbf8>
   ddb4e:	f04f 0800 	mov.w	r8, #0
   ddb52:	4b92      	ldr	r3, [pc, #584]	; (ddd9c <_strtod_l+0xbfc>)
   ddb54:	403b      	ands	r3, r7
   ddb56:	9311      	str	r3, [sp, #68]	; 0x44
   ddb58:	9a11      	ldr	r2, [sp, #68]	; 0x44
   ddb5a:	4b91      	ldr	r3, [pc, #580]	; (ddda0 <_strtod_l+0xc00>)
   ddb5c:	429a      	cmp	r2, r3
   ddb5e:	f040 80b2 	bne.w	ddcc6 <_strtod_l+0xb26>
   ddb62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   ddb66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   ddb6a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   ddb6e:	ec4b ab10 	vmov	d0, sl, fp
   ddb72:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   ddb76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   ddb7a:	f001 f96b 	bl	dee54 <__ulp>
   ddb7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   ddb82:	ec53 2b10 	vmov	r2, r3, d0
   ddb86:	f7fe fe35 	bl	dc7f4 <__aeabi_dmul>
   ddb8a:	4652      	mov	r2, sl
   ddb8c:	465b      	mov	r3, fp
   ddb8e:	f7fe fc7b 	bl	dc488 <__adddf3>
   ddb92:	460b      	mov	r3, r1
   ddb94:	4981      	ldr	r1, [pc, #516]	; (ddd9c <_strtod_l+0xbfc>)
   ddb96:	4a83      	ldr	r2, [pc, #524]	; (ddda4 <_strtod_l+0xc04>)
   ddb98:	4019      	ands	r1, r3
   ddb9a:	4291      	cmp	r1, r2
   ddb9c:	4682      	mov	sl, r0
   ddb9e:	d95e      	bls.n	ddc5e <_strtod_l+0xabe>
   ddba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ddba2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   ddba6:	4293      	cmp	r3, r2
   ddba8:	d103      	bne.n	ddbb2 <_strtod_l+0xa12>
   ddbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ddbac:	3301      	adds	r3, #1
   ddbae:	f43f ad43 	beq.w	dd638 <_strtod_l+0x498>
   ddbb2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dddb0 <_strtod_l+0xc10>
   ddbb6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ddbba:	991e      	ldr	r1, [sp, #120]	; 0x78
   ddbbc:	4620      	mov	r0, r4
   ddbbe:	f000 fe81 	bl	de8c4 <_Bfree>
   ddbc2:	9907      	ldr	r1, [sp, #28]
   ddbc4:	4620      	mov	r0, r4
   ddbc6:	f000 fe7d 	bl	de8c4 <_Bfree>
   ddbca:	4631      	mov	r1, r6
   ddbcc:	4620      	mov	r0, r4
   ddbce:	f000 fe79 	bl	de8c4 <_Bfree>
   ddbd2:	4629      	mov	r1, r5
   ddbd4:	4620      	mov	r0, r4
   ddbd6:	f000 fe75 	bl	de8c4 <_Bfree>
   ddbda:	e613      	b.n	dd804 <_strtod_l+0x664>
   ddbdc:	f1ba 0f00 	cmp.w	sl, #0
   ddbe0:	d11b      	bne.n	ddc1a <_strtod_l+0xa7a>
   ddbe2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ddbe6:	b9f3      	cbnz	r3, ddc26 <_strtod_l+0xa86>
   ddbe8:	4b6b      	ldr	r3, [pc, #428]	; (ddd98 <_strtod_l+0xbf8>)
   ddbea:	2200      	movs	r2, #0
   ddbec:	4640      	mov	r0, r8
   ddbee:	4649      	mov	r1, r9
   ddbf0:	f7ff f872 	bl	dccd8 <__aeabi_dcmplt>
   ddbf4:	b9d0      	cbnz	r0, ddc2c <_strtod_l+0xa8c>
   ddbf6:	4640      	mov	r0, r8
   ddbf8:	4649      	mov	r1, r9
   ddbfa:	4b6b      	ldr	r3, [pc, #428]	; (ddda8 <_strtod_l+0xc08>)
   ddbfc:	2200      	movs	r2, #0
   ddbfe:	f7fe fdf9 	bl	dc7f4 <__aeabi_dmul>
   ddc02:	4680      	mov	r8, r0
   ddc04:	4689      	mov	r9, r1
   ddc06:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   ddc0a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   ddc0e:	931b      	str	r3, [sp, #108]	; 0x6c
   ddc10:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   ddc14:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   ddc18:	e79b      	b.n	ddb52 <_strtod_l+0x9b2>
   ddc1a:	f1ba 0f01 	cmp.w	sl, #1
   ddc1e:	d102      	bne.n	ddc26 <_strtod_l+0xa86>
   ddc20:	2f00      	cmp	r7, #0
   ddc22:	f43f ad7e 	beq.w	dd722 <_strtod_l+0x582>
   ddc26:	4b61      	ldr	r3, [pc, #388]	; (dddac <_strtod_l+0xc0c>)
   ddc28:	2200      	movs	r2, #0
   ddc2a:	e78c      	b.n	ddb46 <_strtod_l+0x9a6>
   ddc2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; ddda8 <_strtod_l+0xc08>
   ddc30:	f04f 0800 	mov.w	r8, #0
   ddc34:	e7e7      	b.n	ddc06 <_strtod_l+0xa66>
   ddc36:	4b5c      	ldr	r3, [pc, #368]	; (ddda8 <_strtod_l+0xc08>)
   ddc38:	4640      	mov	r0, r8
   ddc3a:	4649      	mov	r1, r9
   ddc3c:	2200      	movs	r2, #0
   ddc3e:	f7fe fdd9 	bl	dc7f4 <__aeabi_dmul>
   ddc42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ddc44:	4680      	mov	r8, r0
   ddc46:	4689      	mov	r9, r1
   ddc48:	b933      	cbnz	r3, ddc58 <_strtod_l+0xab8>
   ddc4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ddc4e:	9012      	str	r0, [sp, #72]	; 0x48
   ddc50:	9313      	str	r3, [sp, #76]	; 0x4c
   ddc52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   ddc56:	e7dd      	b.n	ddc14 <_strtod_l+0xa74>
   ddc58:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   ddc5c:	e7f9      	b.n	ddc52 <_strtod_l+0xab2>
   ddc5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   ddc62:	9b04      	ldr	r3, [sp, #16]
   ddc64:	2b00      	cmp	r3, #0
   ddc66:	d1a8      	bne.n	ddbba <_strtod_l+0xa1a>
   ddc68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ddc6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   ddc6e:	0d1b      	lsrs	r3, r3, #20
   ddc70:	051b      	lsls	r3, r3, #20
   ddc72:	429a      	cmp	r2, r3
   ddc74:	d1a1      	bne.n	ddbba <_strtod_l+0xa1a>
   ddc76:	4640      	mov	r0, r8
   ddc78:	4649      	mov	r1, r9
   ddc7a:	f001 fa7d 	bl	df178 <__aeabi_d2lz>
   ddc7e:	f7fe fd8b 	bl	dc798 <__aeabi_l2d>
   ddc82:	4602      	mov	r2, r0
   ddc84:	460b      	mov	r3, r1
   ddc86:	4640      	mov	r0, r8
   ddc88:	4649      	mov	r1, r9
   ddc8a:	f7fe fbfb 	bl	dc484 <__aeabi_dsub>
   ddc8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   ddc90:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ddc94:	ea43 030a 	orr.w	r3, r3, sl
   ddc98:	4313      	orrs	r3, r2
   ddc9a:	4680      	mov	r8, r0
   ddc9c:	4689      	mov	r9, r1
   ddc9e:	d053      	beq.n	ddd48 <_strtod_l+0xba8>
   ddca0:	a335      	add	r3, pc, #212	; (adr r3, ddd78 <_strtod_l+0xbd8>)
   ddca2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddca6:	f7ff f817 	bl	dccd8 <__aeabi_dcmplt>
   ddcaa:	2800      	cmp	r0, #0
   ddcac:	f47f acce 	bne.w	dd64c <_strtod_l+0x4ac>
   ddcb0:	a333      	add	r3, pc, #204	; (adr r3, ddd80 <_strtod_l+0xbe0>)
   ddcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddcb6:	4640      	mov	r0, r8
   ddcb8:	4649      	mov	r1, r9
   ddcba:	f7ff f82b 	bl	dcd14 <__aeabi_dcmpgt>
   ddcbe:	2800      	cmp	r0, #0
   ddcc0:	f43f af7b 	beq.w	ddbba <_strtod_l+0xa1a>
   ddcc4:	e4c2      	b.n	dd64c <_strtod_l+0x4ac>
   ddcc6:	9b04      	ldr	r3, [sp, #16]
   ddcc8:	b333      	cbz	r3, ddd18 <_strtod_l+0xb78>
   ddcca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   ddccc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ddcd0:	d822      	bhi.n	ddd18 <_strtod_l+0xb78>
   ddcd2:	a32d      	add	r3, pc, #180	; (adr r3, ddd88 <_strtod_l+0xbe8>)
   ddcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddcd8:	4640      	mov	r0, r8
   ddcda:	4649      	mov	r1, r9
   ddcdc:	f7ff f806 	bl	dccec <__aeabi_dcmple>
   ddce0:	b1a0      	cbz	r0, ddd0c <_strtod_l+0xb6c>
   ddce2:	4649      	mov	r1, r9
   ddce4:	4640      	mov	r0, r8
   ddce6:	f7ff f85d 	bl	dcda4 <__aeabi_d2uiz>
   ddcea:	2801      	cmp	r0, #1
   ddcec:	bf38      	it	cc
   ddcee:	2001      	movcc	r0, #1
   ddcf0:	f7fe fd06 	bl	dc700 <__aeabi_ui2d>
   ddcf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ddcf6:	4680      	mov	r8, r0
   ddcf8:	4689      	mov	r9, r1
   ddcfa:	bb13      	cbnz	r3, ddd42 <_strtod_l+0xba2>
   ddcfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ddd00:	9014      	str	r0, [sp, #80]	; 0x50
   ddd02:	9315      	str	r3, [sp, #84]	; 0x54
   ddd04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   ddd08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   ddd0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ddd0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   ddd10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ddd14:	1a9b      	subs	r3, r3, r2
   ddd16:	930d      	str	r3, [sp, #52]	; 0x34
   ddd18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   ddd1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   ddd20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   ddd24:	f001 f896 	bl	dee54 <__ulp>
   ddd28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   ddd2c:	ec53 2b10 	vmov	r2, r3, d0
   ddd30:	f7fe fd60 	bl	dc7f4 <__aeabi_dmul>
   ddd34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   ddd38:	f7fe fba6 	bl	dc488 <__adddf3>
   ddd3c:	4682      	mov	sl, r0
   ddd3e:	468b      	mov	fp, r1
   ddd40:	e78f      	b.n	ddc62 <_strtod_l+0xac2>
   ddd42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   ddd46:	e7dd      	b.n	ddd04 <_strtod_l+0xb64>
   ddd48:	a311      	add	r3, pc, #68	; (adr r3, ddd90 <_strtod_l+0xbf0>)
   ddd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd4e:	f7fe ffc3 	bl	dccd8 <__aeabi_dcmplt>
   ddd52:	e7b4      	b.n	ddcbe <_strtod_l+0xb1e>
   ddd54:	2300      	movs	r3, #0
   ddd56:	930e      	str	r3, [sp, #56]	; 0x38
   ddd58:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ddd5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   ddd5c:	6013      	str	r3, [r2, #0]
   ddd5e:	f7ff ba65 	b.w	dd22c <_strtod_l+0x8c>
   ddd62:	2b65      	cmp	r3, #101	; 0x65
   ddd64:	f43f ab5d 	beq.w	dd422 <_strtod_l+0x282>
   ddd68:	2b45      	cmp	r3, #69	; 0x45
   ddd6a:	f43f ab5a 	beq.w	dd422 <_strtod_l+0x282>
   ddd6e:	2201      	movs	r2, #1
   ddd70:	f7ff bb92 	b.w	dd498 <_strtod_l+0x2f8>
   ddd74:	f3af 8000 	nop.w
   ddd78:	94a03595 	.word	0x94a03595
   ddd7c:	3fdfffff 	.word	0x3fdfffff
   ddd80:	35afe535 	.word	0x35afe535
   ddd84:	3fe00000 	.word	0x3fe00000
   ddd88:	ffc00000 	.word	0xffc00000
   ddd8c:	41dfffff 	.word	0x41dfffff
   ddd90:	94a03595 	.word	0x94a03595
   ddd94:	3fcfffff 	.word	0x3fcfffff
   ddd98:	3ff00000 	.word	0x3ff00000
   ddd9c:	7ff00000 	.word	0x7ff00000
   ddda0:	7fe00000 	.word	0x7fe00000
   ddda4:	7c9fffff 	.word	0x7c9fffff
   ddda8:	3fe00000 	.word	0x3fe00000
   dddac:	bff00000 	.word	0xbff00000
   dddb0:	7fefffff 	.word	0x7fefffff

000dddb4 <strtof>:
   dddb4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   dddb8:	4e26      	ldr	r6, [pc, #152]	; (dde54 <strtof+0xa0>)
   dddba:	4b27      	ldr	r3, [pc, #156]	; (dde58 <strtof+0xa4>)
   dddbc:	460a      	mov	r2, r1
   dddbe:	ed2d 8b02 	vpush	{d8}
   dddc2:	4601      	mov	r1, r0
   dddc4:	6830      	ldr	r0, [r6, #0]
   dddc6:	f7ff f9eb 	bl	dd1a0 <_strtod_l>
   dddca:	ec55 4b10 	vmov	r4, r5, d0
   dddce:	ee10 2a10 	vmov	r2, s0
   dddd2:	ee10 0a10 	vmov	r0, s0
   dddd6:	462b      	mov	r3, r5
   dddd8:	4629      	mov	r1, r5
   dddda:	f7fe ffa5 	bl	dcd28 <__aeabi_dcmpun>
   dddde:	b190      	cbz	r0, dde06 <strtof+0x52>
   ddde0:	2d00      	cmp	r5, #0
   ddde2:	481e      	ldr	r0, [pc, #120]	; (dde5c <strtof+0xa8>)
   ddde4:	da09      	bge.n	dddfa <strtof+0x46>
   ddde6:	f001 f9b3 	bl	df150 <nanf>
   dddea:	eeb1 8a40 	vneg.f32	s16, s0
   dddee:	eeb0 0a48 	vmov.f32	s0, s16
   dddf2:	ecbd 8b02 	vpop	{d8}
   dddf6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   dddfa:	ecbd 8b02 	vpop	{d8}
   dddfe:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   dde02:	f001 b9a5 	b.w	df150 <nanf>
   dde06:	4620      	mov	r0, r4
   dde08:	4629      	mov	r1, r5
   dde0a:	f7fe ffeb 	bl	dcde4 <__aeabi_d2f>
   dde0e:	ee08 0a10 	vmov	s16, r0
   dde12:	eddf 7a13 	vldr	s15, [pc, #76]	; dde60 <strtof+0xac>
   dde16:	eeb0 7ac8 	vabs.f32	s14, s16
   dde1a:	eeb4 7a67 	vcmp.f32	s14, s15
   dde1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dde22:	dde4      	ble.n	dddee <strtof+0x3a>
   dde24:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
   dde28:	4b0e      	ldr	r3, [pc, #56]	; (dde64 <strtof+0xb0>)
   dde2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dde2e:	4620      	mov	r0, r4
   dde30:	4649      	mov	r1, r9
   dde32:	f7fe ff79 	bl	dcd28 <__aeabi_dcmpun>
   dde36:	b940      	cbnz	r0, dde4a <strtof+0x96>
   dde38:	4b0a      	ldr	r3, [pc, #40]	; (dde64 <strtof+0xb0>)
   dde3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dde3e:	4620      	mov	r0, r4
   dde40:	4649      	mov	r1, r9
   dde42:	f7fe ff53 	bl	dccec <__aeabi_dcmple>
   dde46:	2800      	cmp	r0, #0
   dde48:	d0d1      	beq.n	dddee <strtof+0x3a>
   dde4a:	6833      	ldr	r3, [r6, #0]
   dde4c:	2222      	movs	r2, #34	; 0x22
   dde4e:	601a      	str	r2, [r3, #0]
   dde50:	e7cd      	b.n	dddee <strtof+0x3a>
   dde52:	bf00      	nop
   dde54:	2003e0b8 	.word	0x2003e0b8
   dde58:	2003e124 	.word	0x2003e124
   dde5c:	000e0135 	.word	0x000e0135
   dde60:	7f7fffff 	.word	0x7f7fffff
   dde64:	7fefffff 	.word	0x7fefffff

000dde68 <_strtol_l.isra.0>:
   dde68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dde6c:	4e3a      	ldr	r6, [pc, #232]	; (ddf58 <_strtol_l.isra.0+0xf0>)
   dde6e:	4686      	mov	lr, r0
   dde70:	468c      	mov	ip, r1
   dde72:	4660      	mov	r0, ip
   dde74:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dde78:	5da5      	ldrb	r5, [r4, r6]
   dde7a:	f015 0508 	ands.w	r5, r5, #8
   dde7e:	d1f8      	bne.n	dde72 <_strtol_l.isra.0+0xa>
   dde80:	2c2d      	cmp	r4, #45	; 0x2d
   dde82:	d133      	bne.n	ddeec <_strtol_l.isra.0+0x84>
   dde84:	f89c 4000 	ldrb.w	r4, [ip]
   dde88:	f04f 0801 	mov.w	r8, #1
   dde8c:	f100 0c02 	add.w	ip, r0, #2
   dde90:	2b00      	cmp	r3, #0
   dde92:	d05c      	beq.n	ddf4e <_strtol_l.isra.0+0xe6>
   dde94:	2b10      	cmp	r3, #16
   dde96:	d10c      	bne.n	ddeb2 <_strtol_l.isra.0+0x4a>
   dde98:	2c30      	cmp	r4, #48	; 0x30
   dde9a:	d10a      	bne.n	ddeb2 <_strtol_l.isra.0+0x4a>
   dde9c:	f89c 0000 	ldrb.w	r0, [ip]
   ddea0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   ddea4:	2858      	cmp	r0, #88	; 0x58
   ddea6:	d14d      	bne.n	ddf44 <_strtol_l.isra.0+0xdc>
   ddea8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   ddeac:	2310      	movs	r3, #16
   ddeae:	f10c 0c02 	add.w	ip, ip, #2
   ddeb2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   ddeb6:	3f01      	subs	r7, #1
   ddeb8:	2600      	movs	r6, #0
   ddeba:	fbb7 f9f3 	udiv	r9, r7, r3
   ddebe:	4630      	mov	r0, r6
   ddec0:	fb03 7a19 	mls	sl, r3, r9, r7
   ddec4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   ddec8:	2d09      	cmp	r5, #9
   ddeca:	d818      	bhi.n	ddefe <_strtol_l.isra.0+0x96>
   ddecc:	462c      	mov	r4, r5
   ddece:	42a3      	cmp	r3, r4
   dded0:	dd24      	ble.n	ddf1c <_strtol_l.isra.0+0xb4>
   dded2:	1c75      	adds	r5, r6, #1
   dded4:	d007      	beq.n	ddee6 <_strtol_l.isra.0+0x7e>
   dded6:	4581      	cmp	r9, r0
   dded8:	d31d      	bcc.n	ddf16 <_strtol_l.isra.0+0xae>
   ddeda:	d101      	bne.n	ddee0 <_strtol_l.isra.0+0x78>
   ddedc:	45a2      	cmp	sl, r4
   ddede:	db1a      	blt.n	ddf16 <_strtol_l.isra.0+0xae>
   ddee0:	fb00 4003 	mla	r0, r0, r3, r4
   ddee4:	2601      	movs	r6, #1
   ddee6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   ddeea:	e7eb      	b.n	ddec4 <_strtol_l.isra.0+0x5c>
   ddeec:	2c2b      	cmp	r4, #43	; 0x2b
   ddeee:	bf08      	it	eq
   ddef0:	f89c 4000 	ldrbeq.w	r4, [ip]
   ddef4:	46a8      	mov	r8, r5
   ddef6:	bf08      	it	eq
   ddef8:	f100 0c02 	addeq.w	ip, r0, #2
   ddefc:	e7c8      	b.n	dde90 <_strtol_l.isra.0+0x28>
   ddefe:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   ddf02:	2d19      	cmp	r5, #25
   ddf04:	d801      	bhi.n	ddf0a <_strtol_l.isra.0+0xa2>
   ddf06:	3c37      	subs	r4, #55	; 0x37
   ddf08:	e7e1      	b.n	ddece <_strtol_l.isra.0+0x66>
   ddf0a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   ddf0e:	2d19      	cmp	r5, #25
   ddf10:	d804      	bhi.n	ddf1c <_strtol_l.isra.0+0xb4>
   ddf12:	3c57      	subs	r4, #87	; 0x57
   ddf14:	e7db      	b.n	ddece <_strtol_l.isra.0+0x66>
   ddf16:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   ddf1a:	e7e4      	b.n	ddee6 <_strtol_l.isra.0+0x7e>
   ddf1c:	1c73      	adds	r3, r6, #1
   ddf1e:	d106      	bne.n	ddf2e <_strtol_l.isra.0+0xc6>
   ddf20:	2322      	movs	r3, #34	; 0x22
   ddf22:	f8ce 3000 	str.w	r3, [lr]
   ddf26:	4638      	mov	r0, r7
   ddf28:	b942      	cbnz	r2, ddf3c <_strtol_l.isra.0+0xd4>
   ddf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddf2e:	f1b8 0f00 	cmp.w	r8, #0
   ddf32:	d000      	beq.n	ddf36 <_strtol_l.isra.0+0xce>
   ddf34:	4240      	negs	r0, r0
   ddf36:	2a00      	cmp	r2, #0
   ddf38:	d0f7      	beq.n	ddf2a <_strtol_l.isra.0+0xc2>
   ddf3a:	b10e      	cbz	r6, ddf40 <_strtol_l.isra.0+0xd8>
   ddf3c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   ddf40:	6011      	str	r1, [r2, #0]
   ddf42:	e7f2      	b.n	ddf2a <_strtol_l.isra.0+0xc2>
   ddf44:	2430      	movs	r4, #48	; 0x30
   ddf46:	2b00      	cmp	r3, #0
   ddf48:	d1b3      	bne.n	ddeb2 <_strtol_l.isra.0+0x4a>
   ddf4a:	2308      	movs	r3, #8
   ddf4c:	e7b1      	b.n	ddeb2 <_strtol_l.isra.0+0x4a>
   ddf4e:	2c30      	cmp	r4, #48	; 0x30
   ddf50:	d0a4      	beq.n	dde9c <_strtol_l.isra.0+0x34>
   ddf52:	230a      	movs	r3, #10
   ddf54:	e7ad      	b.n	ddeb2 <_strtol_l.isra.0+0x4a>
   ddf56:	bf00      	nop
   ddf58:	000e0371 	.word	0x000e0371

000ddf5c <strtol>:
   ddf5c:	4613      	mov	r3, r2
   ddf5e:	460a      	mov	r2, r1
   ddf60:	4601      	mov	r1, r0
   ddf62:	4802      	ldr	r0, [pc, #8]	; (ddf6c <strtol+0x10>)
   ddf64:	6800      	ldr	r0, [r0, #0]
   ddf66:	f7ff bf7f 	b.w	dde68 <_strtol_l.isra.0>
   ddf6a:	bf00      	nop
   ddf6c:	2003e0b8 	.word	0x2003e0b8

000ddf70 <close>:
   ddf70:	4b02      	ldr	r3, [pc, #8]	; (ddf7c <close+0xc>)
   ddf72:	4601      	mov	r1, r0
   ddf74:	6818      	ldr	r0, [r3, #0]
   ddf76:	f000 b8c9 	b.w	de10c <_close_r>
   ddf7a:	bf00      	nop
   ddf7c:	2003e0b8 	.word	0x2003e0b8

000ddf80 <fstat>:
   ddf80:	4b02      	ldr	r3, [pc, #8]	; (ddf8c <fstat+0xc>)
   ddf82:	460a      	mov	r2, r1
   ddf84:	4601      	mov	r1, r0
   ddf86:	6818      	ldr	r0, [r3, #0]
   ddf88:	f000 b8d0 	b.w	de12c <_fstat_r>
   ddf8c:	2003e0b8 	.word	0x2003e0b8

000ddf90 <lseek>:
   ddf90:	4613      	mov	r3, r2
   ddf92:	460a      	mov	r2, r1
   ddf94:	4601      	mov	r1, r0
   ddf96:	4802      	ldr	r0, [pc, #8]	; (ddfa0 <lseek+0x10>)
   ddf98:	6800      	ldr	r0, [r0, #0]
   ddf9a:	f000 bc3b 	b.w	de814 <_lseek_r>
   ddf9e:	bf00      	nop
   ddfa0:	2003e0b8 	.word	0x2003e0b8

000ddfa4 <open>:
   ddfa4:	b40e      	push	{r1, r2, r3}
   ddfa6:	b503      	push	{r0, r1, lr}
   ddfa8:	ab03      	add	r3, sp, #12
   ddfaa:	4601      	mov	r1, r0
   ddfac:	4806      	ldr	r0, [pc, #24]	; (ddfc8 <open+0x24>)
   ddfae:	f853 2b04 	ldr.w	r2, [r3], #4
   ddfb2:	9301      	str	r3, [sp, #4]
   ddfb4:	6800      	ldr	r0, [r0, #0]
   ddfb6:	9b04      	ldr	r3, [sp, #16]
   ddfb8:	f001 f89e 	bl	df0f8 <_open_r>
   ddfbc:	b002      	add	sp, #8
   ddfbe:	f85d eb04 	ldr.w	lr, [sp], #4
   ddfc2:	b003      	add	sp, #12
   ddfc4:	4770      	bx	lr
   ddfc6:	bf00      	nop
   ddfc8:	2003e0b8 	.word	0x2003e0b8

000ddfcc <read>:
   ddfcc:	4613      	mov	r3, r2
   ddfce:	460a      	mov	r2, r1
   ddfd0:	4601      	mov	r1, r0
   ddfd2:	4802      	ldr	r0, [pc, #8]	; (ddfdc <read+0x10>)
   ddfd4:	6800      	ldr	r0, [r0, #0]
   ddfd6:	f001 b8a1 	b.w	df11c <_read_r>
   ddfda:	bf00      	nop
   ddfdc:	2003e0b8 	.word	0x2003e0b8

000ddfe0 <unlink>:
   ddfe0:	4b02      	ldr	r3, [pc, #8]	; (ddfec <unlink+0xc>)
   ddfe2:	4601      	mov	r1, r0
   ddfe4:	6818      	ldr	r0, [r3, #0]
   ddfe6:	f000 b80d 	b.w	de004 <_unlink_r>
   ddfea:	bf00      	nop
   ddfec:	2003e0b8 	.word	0x2003e0b8

000ddff0 <write>:
   ddff0:	4613      	mov	r3, r2
   ddff2:	460a      	mov	r2, r1
   ddff4:	4601      	mov	r1, r0
   ddff6:	4802      	ldr	r0, [pc, #8]	; (de000 <write+0x10>)
   ddff8:	6800      	ldr	r0, [r0, #0]
   ddffa:	f000 b813 	b.w	de024 <_write_r>
   ddffe:	bf00      	nop
   de000:	2003e0b8 	.word	0x2003e0b8

000de004 <_unlink_r>:
   de004:	b538      	push	{r3, r4, r5, lr}
   de006:	4d06      	ldr	r5, [pc, #24]	; (de020 <_unlink_r+0x1c>)
   de008:	2300      	movs	r3, #0
   de00a:	4604      	mov	r4, r0
   de00c:	4608      	mov	r0, r1
   de00e:	602b      	str	r3, [r5, #0]
   de010:	f7fa fdcc 	bl	d8bac <_unlink>
   de014:	1c43      	adds	r3, r0, #1
   de016:	d102      	bne.n	de01e <_unlink_r+0x1a>
   de018:	682b      	ldr	r3, [r5, #0]
   de01a:	b103      	cbz	r3, de01e <_unlink_r+0x1a>
   de01c:	6023      	str	r3, [r4, #0]
   de01e:	bd38      	pop	{r3, r4, r5, pc}
   de020:	2003e7ec 	.word	0x2003e7ec

000de024 <_write_r>:
   de024:	b538      	push	{r3, r4, r5, lr}
   de026:	4d07      	ldr	r5, [pc, #28]	; (de044 <_write_r+0x20>)
   de028:	4604      	mov	r4, r0
   de02a:	4608      	mov	r0, r1
   de02c:	4611      	mov	r1, r2
   de02e:	2200      	movs	r2, #0
   de030:	602a      	str	r2, [r5, #0]
   de032:	461a      	mov	r2, r3
   de034:	f7fa fd82 	bl	d8b3c <_write>
   de038:	1c43      	adds	r3, r0, #1
   de03a:	d102      	bne.n	de042 <_write_r+0x1e>
   de03c:	682b      	ldr	r3, [r5, #0]
   de03e:	b103      	cbz	r3, de042 <_write_r+0x1e>
   de040:	6023      	str	r3, [r4, #0]
   de042:	bd38      	pop	{r3, r4, r5, pc}
   de044:	2003e7ec 	.word	0x2003e7ec

000de048 <__register_exitproc>:
   de048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de04c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; de108 <__register_exitproc+0xc0>
   de050:	4606      	mov	r6, r0
   de052:	f8d8 0000 	ldr.w	r0, [r8]
   de056:	461f      	mov	r7, r3
   de058:	460d      	mov	r5, r1
   de05a:	4691      	mov	r9, r2
   de05c:	f000 fbd6 	bl	de80c <__retarget_lock_acquire_recursive>
   de060:	4b25      	ldr	r3, [pc, #148]	; (de0f8 <__register_exitproc+0xb0>)
   de062:	681c      	ldr	r4, [r3, #0]
   de064:	b934      	cbnz	r4, de074 <__register_exitproc+0x2c>
   de066:	4c25      	ldr	r4, [pc, #148]	; (de0fc <__register_exitproc+0xb4>)
   de068:	601c      	str	r4, [r3, #0]
   de06a:	4b25      	ldr	r3, [pc, #148]	; (de100 <__register_exitproc+0xb8>)
   de06c:	b113      	cbz	r3, de074 <__register_exitproc+0x2c>
   de06e:	681b      	ldr	r3, [r3, #0]
   de070:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   de074:	6863      	ldr	r3, [r4, #4]
   de076:	2b1f      	cmp	r3, #31
   de078:	dd07      	ble.n	de08a <__register_exitproc+0x42>
   de07a:	f8d8 0000 	ldr.w	r0, [r8]
   de07e:	f000 fbc7 	bl	de810 <__retarget_lock_release_recursive>
   de082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   de086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de08a:	b34e      	cbz	r6, de0e0 <__register_exitproc+0x98>
   de08c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   de090:	b988      	cbnz	r0, de0b6 <__register_exitproc+0x6e>
   de092:	4b1c      	ldr	r3, [pc, #112]	; (de104 <__register_exitproc+0xbc>)
   de094:	b923      	cbnz	r3, de0a0 <__register_exitproc+0x58>
   de096:	f8d8 0000 	ldr.w	r0, [r8]
   de09a:	f000 fbb8 	bl	de80e <__retarget_lock_release>
   de09e:	e7f0      	b.n	de082 <__register_exitproc+0x3a>
   de0a0:	f44f 7084 	mov.w	r0, #264	; 0x108
   de0a4:	f7fa ffb6 	bl	d9014 <malloc>
   de0a8:	2800      	cmp	r0, #0
   de0aa:	d0f4      	beq.n	de096 <__register_exitproc+0x4e>
   de0ac:	2300      	movs	r3, #0
   de0ae:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   de0b2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   de0b6:	6863      	ldr	r3, [r4, #4]
   de0b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   de0bc:	2201      	movs	r2, #1
   de0be:	409a      	lsls	r2, r3
   de0c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   de0c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   de0c8:	4313      	orrs	r3, r2
   de0ca:	2e02      	cmp	r6, #2
   de0cc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   de0d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   de0d4:	bf02      	ittt	eq
   de0d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   de0da:	431a      	orreq	r2, r3
   de0dc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   de0e0:	6863      	ldr	r3, [r4, #4]
   de0e2:	f8d8 0000 	ldr.w	r0, [r8]
   de0e6:	1c5a      	adds	r2, r3, #1
   de0e8:	3302      	adds	r3, #2
   de0ea:	6062      	str	r2, [r4, #4]
   de0ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   de0f0:	f000 fb8e 	bl	de810 <__retarget_lock_release_recursive>
   de0f4:	2000      	movs	r0, #0
   de0f6:	e7c6      	b.n	de086 <__register_exitproc+0x3e>
   de0f8:	2003e7dc 	.word	0x2003e7dc
   de0fc:	2003e750 	.word	0x2003e750
   de100:	00000000 	.word	0x00000000
   de104:	000d9015 	.word	0x000d9015
   de108:	2003e11c 	.word	0x2003e11c

000de10c <_close_r>:
   de10c:	b538      	push	{r3, r4, r5, lr}
   de10e:	4d06      	ldr	r5, [pc, #24]	; (de128 <_close_r+0x1c>)
   de110:	2300      	movs	r3, #0
   de112:	4604      	mov	r4, r0
   de114:	4608      	mov	r0, r1
   de116:	602b      	str	r3, [r5, #0]
   de118:	f7fa fd20 	bl	d8b5c <_close>
   de11c:	1c43      	adds	r3, r0, #1
   de11e:	d102      	bne.n	de126 <_close_r+0x1a>
   de120:	682b      	ldr	r3, [r5, #0]
   de122:	b103      	cbz	r3, de126 <_close_r+0x1a>
   de124:	6023      	str	r3, [r4, #0]
   de126:	bd38      	pop	{r3, r4, r5, pc}
   de128:	2003e7ec 	.word	0x2003e7ec

000de12c <_fstat_r>:
   de12c:	b538      	push	{r3, r4, r5, lr}
   de12e:	4d07      	ldr	r5, [pc, #28]	; (de14c <_fstat_r+0x20>)
   de130:	2300      	movs	r3, #0
   de132:	4604      	mov	r4, r0
   de134:	4608      	mov	r0, r1
   de136:	4611      	mov	r1, r2
   de138:	602b      	str	r3, [r5, #0]
   de13a:	f7fa fd17 	bl	d8b6c <_fstat>
   de13e:	1c43      	adds	r3, r0, #1
   de140:	d102      	bne.n	de148 <_fstat_r+0x1c>
   de142:	682b      	ldr	r3, [r5, #0]
   de144:	b103      	cbz	r3, de148 <_fstat_r+0x1c>
   de146:	6023      	str	r3, [r4, #0]
   de148:	bd38      	pop	{r3, r4, r5, pc}
   de14a:	bf00      	nop
   de14c:	2003e7ec 	.word	0x2003e7ec

000de150 <rshift>:
   de150:	6903      	ldr	r3, [r0, #16]
   de152:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   de156:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de15a:	ea4f 1261 	mov.w	r2, r1, asr #5
   de15e:	f100 0414 	add.w	r4, r0, #20
   de162:	dd45      	ble.n	de1f0 <rshift+0xa0>
   de164:	f011 011f 	ands.w	r1, r1, #31
   de168:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   de16c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   de170:	d10c      	bne.n	de18c <rshift+0x3c>
   de172:	f100 0710 	add.w	r7, r0, #16
   de176:	4629      	mov	r1, r5
   de178:	42b1      	cmp	r1, r6
   de17a:	d334      	bcc.n	de1e6 <rshift+0x96>
   de17c:	1a9b      	subs	r3, r3, r2
   de17e:	009b      	lsls	r3, r3, #2
   de180:	1eea      	subs	r2, r5, #3
   de182:	4296      	cmp	r6, r2
   de184:	bf38      	it	cc
   de186:	2300      	movcc	r3, #0
   de188:	4423      	add	r3, r4
   de18a:	e015      	b.n	de1b8 <rshift+0x68>
   de18c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   de190:	f1c1 0820 	rsb	r8, r1, #32
   de194:	40cf      	lsrs	r7, r1
   de196:	f105 0e04 	add.w	lr, r5, #4
   de19a:	46a1      	mov	r9, r4
   de19c:	4576      	cmp	r6, lr
   de19e:	46f4      	mov	ip, lr
   de1a0:	d815      	bhi.n	de1ce <rshift+0x7e>
   de1a2:	1a9b      	subs	r3, r3, r2
   de1a4:	009a      	lsls	r2, r3, #2
   de1a6:	3a04      	subs	r2, #4
   de1a8:	3501      	adds	r5, #1
   de1aa:	42ae      	cmp	r6, r5
   de1ac:	bf38      	it	cc
   de1ae:	2200      	movcc	r2, #0
   de1b0:	18a3      	adds	r3, r4, r2
   de1b2:	50a7      	str	r7, [r4, r2]
   de1b4:	b107      	cbz	r7, de1b8 <rshift+0x68>
   de1b6:	3304      	adds	r3, #4
   de1b8:	1b1a      	subs	r2, r3, r4
   de1ba:	42a3      	cmp	r3, r4
   de1bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   de1c0:	bf08      	it	eq
   de1c2:	2300      	moveq	r3, #0
   de1c4:	6102      	str	r2, [r0, #16]
   de1c6:	bf08      	it	eq
   de1c8:	6143      	streq	r3, [r0, #20]
   de1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de1ce:	f8dc c000 	ldr.w	ip, [ip]
   de1d2:	fa0c fc08 	lsl.w	ip, ip, r8
   de1d6:	ea4c 0707 	orr.w	r7, ip, r7
   de1da:	f849 7b04 	str.w	r7, [r9], #4
   de1de:	f85e 7b04 	ldr.w	r7, [lr], #4
   de1e2:	40cf      	lsrs	r7, r1
   de1e4:	e7da      	b.n	de19c <rshift+0x4c>
   de1e6:	f851 cb04 	ldr.w	ip, [r1], #4
   de1ea:	f847 cf04 	str.w	ip, [r7, #4]!
   de1ee:	e7c3      	b.n	de178 <rshift+0x28>
   de1f0:	4623      	mov	r3, r4
   de1f2:	e7e1      	b.n	de1b8 <rshift+0x68>

000de1f4 <__hexdig_fun>:
   de1f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   de1f8:	2b09      	cmp	r3, #9
   de1fa:	d802      	bhi.n	de202 <__hexdig_fun+0xe>
   de1fc:	3820      	subs	r0, #32
   de1fe:	b2c0      	uxtb	r0, r0
   de200:	4770      	bx	lr
   de202:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   de206:	2b05      	cmp	r3, #5
   de208:	d801      	bhi.n	de20e <__hexdig_fun+0x1a>
   de20a:	3847      	subs	r0, #71	; 0x47
   de20c:	e7f7      	b.n	de1fe <__hexdig_fun+0xa>
   de20e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   de212:	2b05      	cmp	r3, #5
   de214:	d801      	bhi.n	de21a <__hexdig_fun+0x26>
   de216:	3827      	subs	r0, #39	; 0x27
   de218:	e7f1      	b.n	de1fe <__hexdig_fun+0xa>
   de21a:	2000      	movs	r0, #0
   de21c:	4770      	bx	lr
	...

000de220 <__gethex>:
   de220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de224:	ed2d 8b02 	vpush	{d8}
   de228:	b089      	sub	sp, #36	; 0x24
   de22a:	ee08 0a10 	vmov	s16, r0
   de22e:	9304      	str	r3, [sp, #16]
   de230:	4bbc      	ldr	r3, [pc, #752]	; (de524 <__gethex+0x304>)
   de232:	681b      	ldr	r3, [r3, #0]
   de234:	9301      	str	r3, [sp, #4]
   de236:	4618      	mov	r0, r3
   de238:	468b      	mov	fp, r1
   de23a:	4690      	mov	r8, r2
   de23c:	f7fe ff51 	bl	dd0e2 <strlen>
   de240:	9b01      	ldr	r3, [sp, #4]
   de242:	f8db 2000 	ldr.w	r2, [fp]
   de246:	4403      	add	r3, r0
   de248:	4682      	mov	sl, r0
   de24a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   de24e:	9305      	str	r3, [sp, #20]
   de250:	1c93      	adds	r3, r2, #2
   de252:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   de256:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   de25a:	32fe      	adds	r2, #254	; 0xfe
   de25c:	18d1      	adds	r1, r2, r3
   de25e:	461f      	mov	r7, r3
   de260:	f813 0b01 	ldrb.w	r0, [r3], #1
   de264:	9100      	str	r1, [sp, #0]
   de266:	2830      	cmp	r0, #48	; 0x30
   de268:	d0f8      	beq.n	de25c <__gethex+0x3c>
   de26a:	f7ff ffc3 	bl	de1f4 <__hexdig_fun>
   de26e:	4604      	mov	r4, r0
   de270:	2800      	cmp	r0, #0
   de272:	d13a      	bne.n	de2ea <__gethex+0xca>
   de274:	9901      	ldr	r1, [sp, #4]
   de276:	4652      	mov	r2, sl
   de278:	4638      	mov	r0, r7
   de27a:	f7fe ff3a 	bl	dd0f2 <strncmp>
   de27e:	4605      	mov	r5, r0
   de280:	2800      	cmp	r0, #0
   de282:	d168      	bne.n	de356 <__gethex+0x136>
   de284:	f817 000a 	ldrb.w	r0, [r7, sl]
   de288:	eb07 060a 	add.w	r6, r7, sl
   de28c:	f7ff ffb2 	bl	de1f4 <__hexdig_fun>
   de290:	2800      	cmp	r0, #0
   de292:	d062      	beq.n	de35a <__gethex+0x13a>
   de294:	4633      	mov	r3, r6
   de296:	7818      	ldrb	r0, [r3, #0]
   de298:	2830      	cmp	r0, #48	; 0x30
   de29a:	461f      	mov	r7, r3
   de29c:	f103 0301 	add.w	r3, r3, #1
   de2a0:	d0f9      	beq.n	de296 <__gethex+0x76>
   de2a2:	f7ff ffa7 	bl	de1f4 <__hexdig_fun>
   de2a6:	2301      	movs	r3, #1
   de2a8:	fab0 f480 	clz	r4, r0
   de2ac:	0964      	lsrs	r4, r4, #5
   de2ae:	4635      	mov	r5, r6
   de2b0:	9300      	str	r3, [sp, #0]
   de2b2:	463a      	mov	r2, r7
   de2b4:	4616      	mov	r6, r2
   de2b6:	3201      	adds	r2, #1
   de2b8:	7830      	ldrb	r0, [r6, #0]
   de2ba:	f7ff ff9b 	bl	de1f4 <__hexdig_fun>
   de2be:	2800      	cmp	r0, #0
   de2c0:	d1f8      	bne.n	de2b4 <__gethex+0x94>
   de2c2:	9901      	ldr	r1, [sp, #4]
   de2c4:	4652      	mov	r2, sl
   de2c6:	4630      	mov	r0, r6
   de2c8:	f7fe ff13 	bl	dd0f2 <strncmp>
   de2cc:	b980      	cbnz	r0, de2f0 <__gethex+0xd0>
   de2ce:	b94d      	cbnz	r5, de2e4 <__gethex+0xc4>
   de2d0:	eb06 050a 	add.w	r5, r6, sl
   de2d4:	462a      	mov	r2, r5
   de2d6:	4616      	mov	r6, r2
   de2d8:	3201      	adds	r2, #1
   de2da:	7830      	ldrb	r0, [r6, #0]
   de2dc:	f7ff ff8a 	bl	de1f4 <__hexdig_fun>
   de2e0:	2800      	cmp	r0, #0
   de2e2:	d1f8      	bne.n	de2d6 <__gethex+0xb6>
   de2e4:	1bad      	subs	r5, r5, r6
   de2e6:	00ad      	lsls	r5, r5, #2
   de2e8:	e004      	b.n	de2f4 <__gethex+0xd4>
   de2ea:	2400      	movs	r4, #0
   de2ec:	4625      	mov	r5, r4
   de2ee:	e7e0      	b.n	de2b2 <__gethex+0x92>
   de2f0:	2d00      	cmp	r5, #0
   de2f2:	d1f7      	bne.n	de2e4 <__gethex+0xc4>
   de2f4:	7833      	ldrb	r3, [r6, #0]
   de2f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   de2fa:	2b50      	cmp	r3, #80	; 0x50
   de2fc:	d13b      	bne.n	de376 <__gethex+0x156>
   de2fe:	7873      	ldrb	r3, [r6, #1]
   de300:	2b2b      	cmp	r3, #43	; 0x2b
   de302:	d02c      	beq.n	de35e <__gethex+0x13e>
   de304:	2b2d      	cmp	r3, #45	; 0x2d
   de306:	d02e      	beq.n	de366 <__gethex+0x146>
   de308:	1c71      	adds	r1, r6, #1
   de30a:	f04f 0900 	mov.w	r9, #0
   de30e:	7808      	ldrb	r0, [r1, #0]
   de310:	f7ff ff70 	bl	de1f4 <__hexdig_fun>
   de314:	1e43      	subs	r3, r0, #1
   de316:	b2db      	uxtb	r3, r3
   de318:	2b18      	cmp	r3, #24
   de31a:	d82c      	bhi.n	de376 <__gethex+0x156>
   de31c:	f1a0 0210 	sub.w	r2, r0, #16
   de320:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   de324:	f7ff ff66 	bl	de1f4 <__hexdig_fun>
   de328:	1e43      	subs	r3, r0, #1
   de32a:	b2db      	uxtb	r3, r3
   de32c:	2b18      	cmp	r3, #24
   de32e:	d91d      	bls.n	de36c <__gethex+0x14c>
   de330:	f1b9 0f00 	cmp.w	r9, #0
   de334:	d000      	beq.n	de338 <__gethex+0x118>
   de336:	4252      	negs	r2, r2
   de338:	4415      	add	r5, r2
   de33a:	f8cb 1000 	str.w	r1, [fp]
   de33e:	b1e4      	cbz	r4, de37a <__gethex+0x15a>
   de340:	9b00      	ldr	r3, [sp, #0]
   de342:	2b00      	cmp	r3, #0
   de344:	bf14      	ite	ne
   de346:	2700      	movne	r7, #0
   de348:	2706      	moveq	r7, #6
   de34a:	4638      	mov	r0, r7
   de34c:	b009      	add	sp, #36	; 0x24
   de34e:	ecbd 8b02 	vpop	{d8}
   de352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de356:	463e      	mov	r6, r7
   de358:	4625      	mov	r5, r4
   de35a:	2401      	movs	r4, #1
   de35c:	e7ca      	b.n	de2f4 <__gethex+0xd4>
   de35e:	f04f 0900 	mov.w	r9, #0
   de362:	1cb1      	adds	r1, r6, #2
   de364:	e7d3      	b.n	de30e <__gethex+0xee>
   de366:	f04f 0901 	mov.w	r9, #1
   de36a:	e7fa      	b.n	de362 <__gethex+0x142>
   de36c:	230a      	movs	r3, #10
   de36e:	fb03 0202 	mla	r2, r3, r2, r0
   de372:	3a10      	subs	r2, #16
   de374:	e7d4      	b.n	de320 <__gethex+0x100>
   de376:	4631      	mov	r1, r6
   de378:	e7df      	b.n	de33a <__gethex+0x11a>
   de37a:	1bf3      	subs	r3, r6, r7
   de37c:	3b01      	subs	r3, #1
   de37e:	4621      	mov	r1, r4
   de380:	2b07      	cmp	r3, #7
   de382:	dc52      	bgt.n	de42a <__gethex+0x20a>
   de384:	ee18 0a10 	vmov	r0, s16
   de388:	f000 fa68 	bl	de85c <_Balloc>
   de38c:	f04f 0b00 	mov.w	fp, #0
   de390:	f100 0914 	add.w	r9, r0, #20
   de394:	f1ca 0301 	rsb	r3, sl, #1
   de398:	4604      	mov	r4, r0
   de39a:	f8cd 9008 	str.w	r9, [sp, #8]
   de39e:	f8cd b000 	str.w	fp, [sp]
   de3a2:	9306      	str	r3, [sp, #24]
   de3a4:	42b7      	cmp	r7, r6
   de3a6:	d343      	bcc.n	de430 <__gethex+0x210>
   de3a8:	9802      	ldr	r0, [sp, #8]
   de3aa:	9b00      	ldr	r3, [sp, #0]
   de3ac:	f840 3b04 	str.w	r3, [r0], #4
   de3b0:	eba0 0009 	sub.w	r0, r0, r9
   de3b4:	1080      	asrs	r0, r0, #2
   de3b6:	0146      	lsls	r6, r0, #5
   de3b8:	6120      	str	r0, [r4, #16]
   de3ba:	4618      	mov	r0, r3
   de3bc:	f000 fb15 	bl	de9ea <__hi0bits>
   de3c0:	1a30      	subs	r0, r6, r0
   de3c2:	f8d8 6000 	ldr.w	r6, [r8]
   de3c6:	42b0      	cmp	r0, r6
   de3c8:	dd66      	ble.n	de498 <__gethex+0x278>
   de3ca:	1b87      	subs	r7, r0, r6
   de3cc:	4639      	mov	r1, r7
   de3ce:	4620      	mov	r0, r4
   de3d0:	f000 fe62 	bl	df098 <__any_on>
   de3d4:	4682      	mov	sl, r0
   de3d6:	b1a8      	cbz	r0, de404 <__gethex+0x1e4>
   de3d8:	1e7b      	subs	r3, r7, #1
   de3da:	1159      	asrs	r1, r3, #5
   de3dc:	f003 021f 	and.w	r2, r3, #31
   de3e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   de3e4:	f04f 0a01 	mov.w	sl, #1
   de3e8:	fa0a f202 	lsl.w	r2, sl, r2
   de3ec:	420a      	tst	r2, r1
   de3ee:	d009      	beq.n	de404 <__gethex+0x1e4>
   de3f0:	4553      	cmp	r3, sl
   de3f2:	dd05      	ble.n	de400 <__gethex+0x1e0>
   de3f4:	1eb9      	subs	r1, r7, #2
   de3f6:	4620      	mov	r0, r4
   de3f8:	f000 fe4e 	bl	df098 <__any_on>
   de3fc:	2800      	cmp	r0, #0
   de3fe:	d148      	bne.n	de492 <__gethex+0x272>
   de400:	f04f 0a02 	mov.w	sl, #2
   de404:	4639      	mov	r1, r7
   de406:	4620      	mov	r0, r4
   de408:	f7ff fea2 	bl	de150 <rshift>
   de40c:	443d      	add	r5, r7
   de40e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   de412:	42ab      	cmp	r3, r5
   de414:	da4f      	bge.n	de4b6 <__gethex+0x296>
   de416:	ee18 0a10 	vmov	r0, s16
   de41a:	4621      	mov	r1, r4
   de41c:	f000 fa52 	bl	de8c4 <_Bfree>
   de420:	9a14      	ldr	r2, [sp, #80]	; 0x50
   de422:	2300      	movs	r3, #0
   de424:	6013      	str	r3, [r2, #0]
   de426:	27a3      	movs	r7, #163	; 0xa3
   de428:	e78f      	b.n	de34a <__gethex+0x12a>
   de42a:	3101      	adds	r1, #1
   de42c:	105b      	asrs	r3, r3, #1
   de42e:	e7a7      	b.n	de380 <__gethex+0x160>
   de430:	1e73      	subs	r3, r6, #1
   de432:	9a05      	ldr	r2, [sp, #20]
   de434:	9303      	str	r3, [sp, #12]
   de436:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   de43a:	4293      	cmp	r3, r2
   de43c:	d019      	beq.n	de472 <__gethex+0x252>
   de43e:	f1bb 0f20 	cmp.w	fp, #32
   de442:	d107      	bne.n	de454 <__gethex+0x234>
   de444:	9b02      	ldr	r3, [sp, #8]
   de446:	9a00      	ldr	r2, [sp, #0]
   de448:	f843 2b04 	str.w	r2, [r3], #4
   de44c:	9302      	str	r3, [sp, #8]
   de44e:	2300      	movs	r3, #0
   de450:	9300      	str	r3, [sp, #0]
   de452:	469b      	mov	fp, r3
   de454:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   de458:	f7ff fecc 	bl	de1f4 <__hexdig_fun>
   de45c:	9b00      	ldr	r3, [sp, #0]
   de45e:	f000 000f 	and.w	r0, r0, #15
   de462:	fa00 f00b 	lsl.w	r0, r0, fp
   de466:	4303      	orrs	r3, r0
   de468:	9300      	str	r3, [sp, #0]
   de46a:	f10b 0b04 	add.w	fp, fp, #4
   de46e:	9b03      	ldr	r3, [sp, #12]
   de470:	e00d      	b.n	de48e <__gethex+0x26e>
   de472:	9b03      	ldr	r3, [sp, #12]
   de474:	9a06      	ldr	r2, [sp, #24]
   de476:	4413      	add	r3, r2
   de478:	42bb      	cmp	r3, r7
   de47a:	d3e0      	bcc.n	de43e <__gethex+0x21e>
   de47c:	4618      	mov	r0, r3
   de47e:	9901      	ldr	r1, [sp, #4]
   de480:	9307      	str	r3, [sp, #28]
   de482:	4652      	mov	r2, sl
   de484:	f7fe fe35 	bl	dd0f2 <strncmp>
   de488:	9b07      	ldr	r3, [sp, #28]
   de48a:	2800      	cmp	r0, #0
   de48c:	d1d7      	bne.n	de43e <__gethex+0x21e>
   de48e:	461e      	mov	r6, r3
   de490:	e788      	b.n	de3a4 <__gethex+0x184>
   de492:	f04f 0a03 	mov.w	sl, #3
   de496:	e7b5      	b.n	de404 <__gethex+0x1e4>
   de498:	da0a      	bge.n	de4b0 <__gethex+0x290>
   de49a:	1a37      	subs	r7, r6, r0
   de49c:	4621      	mov	r1, r4
   de49e:	ee18 0a10 	vmov	r0, s16
   de4a2:	463a      	mov	r2, r7
   de4a4:	f000 fbe4 	bl	dec70 <__lshift>
   de4a8:	1bed      	subs	r5, r5, r7
   de4aa:	4604      	mov	r4, r0
   de4ac:	f100 0914 	add.w	r9, r0, #20
   de4b0:	f04f 0a00 	mov.w	sl, #0
   de4b4:	e7ab      	b.n	de40e <__gethex+0x1ee>
   de4b6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   de4ba:	42a8      	cmp	r0, r5
   de4bc:	dd6d      	ble.n	de59a <__gethex+0x37a>
   de4be:	1b45      	subs	r5, r0, r5
   de4c0:	42ae      	cmp	r6, r5
   de4c2:	dc31      	bgt.n	de528 <__gethex+0x308>
   de4c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   de4c8:	2b02      	cmp	r3, #2
   de4ca:	d023      	beq.n	de514 <__gethex+0x2f4>
   de4cc:	2b03      	cmp	r3, #3
   de4ce:	d025      	beq.n	de51c <__gethex+0x2fc>
   de4d0:	2b01      	cmp	r3, #1
   de4d2:	d115      	bne.n	de500 <__gethex+0x2e0>
   de4d4:	42ae      	cmp	r6, r5
   de4d6:	d113      	bne.n	de500 <__gethex+0x2e0>
   de4d8:	2e01      	cmp	r6, #1
   de4da:	d10b      	bne.n	de4f4 <__gethex+0x2d4>
   de4dc:	9a04      	ldr	r2, [sp, #16]
   de4de:	f8d8 3004 	ldr.w	r3, [r8, #4]
   de4e2:	6013      	str	r3, [r2, #0]
   de4e4:	2301      	movs	r3, #1
   de4e6:	6123      	str	r3, [r4, #16]
   de4e8:	f8c9 3000 	str.w	r3, [r9]
   de4ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   de4ee:	2762      	movs	r7, #98	; 0x62
   de4f0:	601c      	str	r4, [r3, #0]
   de4f2:	e72a      	b.n	de34a <__gethex+0x12a>
   de4f4:	1e71      	subs	r1, r6, #1
   de4f6:	4620      	mov	r0, r4
   de4f8:	f000 fdce 	bl	df098 <__any_on>
   de4fc:	2800      	cmp	r0, #0
   de4fe:	d1ed      	bne.n	de4dc <__gethex+0x2bc>
   de500:	ee18 0a10 	vmov	r0, s16
   de504:	4621      	mov	r1, r4
   de506:	f000 f9dd 	bl	de8c4 <_Bfree>
   de50a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   de50c:	2300      	movs	r3, #0
   de50e:	6013      	str	r3, [r2, #0]
   de510:	2750      	movs	r7, #80	; 0x50
   de512:	e71a      	b.n	de34a <__gethex+0x12a>
   de514:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de516:	2b00      	cmp	r3, #0
   de518:	d1f2      	bne.n	de500 <__gethex+0x2e0>
   de51a:	e7df      	b.n	de4dc <__gethex+0x2bc>
   de51c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de51e:	2b00      	cmp	r3, #0
   de520:	d1dc      	bne.n	de4dc <__gethex+0x2bc>
   de522:	e7ed      	b.n	de500 <__gethex+0x2e0>
   de524:	000e0474 	.word	0x000e0474
   de528:	1e6f      	subs	r7, r5, #1
   de52a:	f1ba 0f00 	cmp.w	sl, #0
   de52e:	d131      	bne.n	de594 <__gethex+0x374>
   de530:	b127      	cbz	r7, de53c <__gethex+0x31c>
   de532:	4639      	mov	r1, r7
   de534:	4620      	mov	r0, r4
   de536:	f000 fdaf 	bl	df098 <__any_on>
   de53a:	4682      	mov	sl, r0
   de53c:	117b      	asrs	r3, r7, #5
   de53e:	2101      	movs	r1, #1
   de540:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   de544:	f007 071f 	and.w	r7, r7, #31
   de548:	fa01 f707 	lsl.w	r7, r1, r7
   de54c:	421f      	tst	r7, r3
   de54e:	4629      	mov	r1, r5
   de550:	4620      	mov	r0, r4
   de552:	bf18      	it	ne
   de554:	f04a 0a02 	orrne.w	sl, sl, #2
   de558:	1b76      	subs	r6, r6, r5
   de55a:	f7ff fdf9 	bl	de150 <rshift>
   de55e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   de562:	2702      	movs	r7, #2
   de564:	f1ba 0f00 	cmp.w	sl, #0
   de568:	d048      	beq.n	de5fc <__gethex+0x3dc>
   de56a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   de56e:	2b02      	cmp	r3, #2
   de570:	d015      	beq.n	de59e <__gethex+0x37e>
   de572:	2b03      	cmp	r3, #3
   de574:	d017      	beq.n	de5a6 <__gethex+0x386>
   de576:	2b01      	cmp	r3, #1
   de578:	d109      	bne.n	de58e <__gethex+0x36e>
   de57a:	f01a 0f02 	tst.w	sl, #2
   de57e:	d006      	beq.n	de58e <__gethex+0x36e>
   de580:	f8d9 0000 	ldr.w	r0, [r9]
   de584:	ea4a 0a00 	orr.w	sl, sl, r0
   de588:	f01a 0f01 	tst.w	sl, #1
   de58c:	d10e      	bne.n	de5ac <__gethex+0x38c>
   de58e:	f047 0710 	orr.w	r7, r7, #16
   de592:	e033      	b.n	de5fc <__gethex+0x3dc>
   de594:	f04f 0a01 	mov.w	sl, #1
   de598:	e7d0      	b.n	de53c <__gethex+0x31c>
   de59a:	2701      	movs	r7, #1
   de59c:	e7e2      	b.n	de564 <__gethex+0x344>
   de59e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de5a0:	f1c3 0301 	rsb	r3, r3, #1
   de5a4:	9315      	str	r3, [sp, #84]	; 0x54
   de5a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   de5a8:	2b00      	cmp	r3, #0
   de5aa:	d0f0      	beq.n	de58e <__gethex+0x36e>
   de5ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   de5b0:	f104 0314 	add.w	r3, r4, #20
   de5b4:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   de5b8:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   de5bc:	f04f 0c00 	mov.w	ip, #0
   de5c0:	4618      	mov	r0, r3
   de5c2:	f853 2b04 	ldr.w	r2, [r3], #4
   de5c6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   de5ca:	d01c      	beq.n	de606 <__gethex+0x3e6>
   de5cc:	3201      	adds	r2, #1
   de5ce:	6002      	str	r2, [r0, #0]
   de5d0:	2f02      	cmp	r7, #2
   de5d2:	f104 0314 	add.w	r3, r4, #20
   de5d6:	d13a      	bne.n	de64e <__gethex+0x42e>
   de5d8:	f8d8 2000 	ldr.w	r2, [r8]
   de5dc:	3a01      	subs	r2, #1
   de5de:	42b2      	cmp	r2, r6
   de5e0:	d10a      	bne.n	de5f8 <__gethex+0x3d8>
   de5e2:	1171      	asrs	r1, r6, #5
   de5e4:	2201      	movs	r2, #1
   de5e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   de5ea:	f006 061f 	and.w	r6, r6, #31
   de5ee:	fa02 f606 	lsl.w	r6, r2, r6
   de5f2:	421e      	tst	r6, r3
   de5f4:	bf18      	it	ne
   de5f6:	4617      	movne	r7, r2
   de5f8:	f047 0720 	orr.w	r7, r7, #32
   de5fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   de5fe:	601c      	str	r4, [r3, #0]
   de600:	9b04      	ldr	r3, [sp, #16]
   de602:	601d      	str	r5, [r3, #0]
   de604:	e6a1      	b.n	de34a <__gethex+0x12a>
   de606:	4299      	cmp	r1, r3
   de608:	f843 cc04 	str.w	ip, [r3, #-4]
   de60c:	d8d8      	bhi.n	de5c0 <__gethex+0x3a0>
   de60e:	68a3      	ldr	r3, [r4, #8]
   de610:	4599      	cmp	r9, r3
   de612:	db14      	blt.n	de63e <__gethex+0x41e>
   de614:	6861      	ldr	r1, [r4, #4]
   de616:	ee18 0a10 	vmov	r0, s16
   de61a:	3101      	adds	r1, #1
   de61c:	f000 f91e 	bl	de85c <_Balloc>
   de620:	6922      	ldr	r2, [r4, #16]
   de622:	3202      	adds	r2, #2
   de624:	f104 010c 	add.w	r1, r4, #12
   de628:	4682      	mov	sl, r0
   de62a:	0092      	lsls	r2, r2, #2
   de62c:	300c      	adds	r0, #12
   de62e:	f7fe fcbd 	bl	dcfac <memcpy>
   de632:	4621      	mov	r1, r4
   de634:	ee18 0a10 	vmov	r0, s16
   de638:	f000 f944 	bl	de8c4 <_Bfree>
   de63c:	4654      	mov	r4, sl
   de63e:	6923      	ldr	r3, [r4, #16]
   de640:	1c5a      	adds	r2, r3, #1
   de642:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   de646:	6122      	str	r2, [r4, #16]
   de648:	2201      	movs	r2, #1
   de64a:	615a      	str	r2, [r3, #20]
   de64c:	e7c0      	b.n	de5d0 <__gethex+0x3b0>
   de64e:	6922      	ldr	r2, [r4, #16]
   de650:	454a      	cmp	r2, r9
   de652:	dd0b      	ble.n	de66c <__gethex+0x44c>
   de654:	2101      	movs	r1, #1
   de656:	4620      	mov	r0, r4
   de658:	f7ff fd7a 	bl	de150 <rshift>
   de65c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   de660:	3501      	adds	r5, #1
   de662:	42ab      	cmp	r3, r5
   de664:	f6ff aed7 	blt.w	de416 <__gethex+0x1f6>
   de668:	2701      	movs	r7, #1
   de66a:	e7c5      	b.n	de5f8 <__gethex+0x3d8>
   de66c:	f016 061f 	ands.w	r6, r6, #31
   de670:	d0fa      	beq.n	de668 <__gethex+0x448>
   de672:	449b      	add	fp, r3
   de674:	f1c6 0620 	rsb	r6, r6, #32
   de678:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   de67c:	f000 f9b5 	bl	de9ea <__hi0bits>
   de680:	42b0      	cmp	r0, r6
   de682:	dbe7      	blt.n	de654 <__gethex+0x434>
   de684:	e7f0      	b.n	de668 <__gethex+0x448>
   de686:	bf00      	nop

000de688 <L_shift>:
   de688:	f1c2 0208 	rsb	r2, r2, #8
   de68c:	0092      	lsls	r2, r2, #2
   de68e:	b570      	push	{r4, r5, r6, lr}
   de690:	f1c2 0620 	rsb	r6, r2, #32
   de694:	6843      	ldr	r3, [r0, #4]
   de696:	6804      	ldr	r4, [r0, #0]
   de698:	fa03 f506 	lsl.w	r5, r3, r6
   de69c:	432c      	orrs	r4, r5
   de69e:	40d3      	lsrs	r3, r2
   de6a0:	6004      	str	r4, [r0, #0]
   de6a2:	f840 3f04 	str.w	r3, [r0, #4]!
   de6a6:	4288      	cmp	r0, r1
   de6a8:	d3f4      	bcc.n	de694 <L_shift+0xc>
   de6aa:	bd70      	pop	{r4, r5, r6, pc}

000de6ac <__match>:
   de6ac:	b530      	push	{r4, r5, lr}
   de6ae:	6803      	ldr	r3, [r0, #0]
   de6b0:	3301      	adds	r3, #1
   de6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   de6b6:	b914      	cbnz	r4, de6be <__match+0x12>
   de6b8:	6003      	str	r3, [r0, #0]
   de6ba:	2001      	movs	r0, #1
   de6bc:	bd30      	pop	{r4, r5, pc}
   de6be:	f813 2b01 	ldrb.w	r2, [r3], #1
   de6c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   de6c6:	2d19      	cmp	r5, #25
   de6c8:	bf98      	it	ls
   de6ca:	3220      	addls	r2, #32
   de6cc:	42a2      	cmp	r2, r4
   de6ce:	d0f0      	beq.n	de6b2 <__match+0x6>
   de6d0:	2000      	movs	r0, #0
   de6d2:	e7f3      	b.n	de6bc <__match+0x10>

000de6d4 <__hexnan>:
   de6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de6d8:	680b      	ldr	r3, [r1, #0]
   de6da:	6801      	ldr	r1, [r0, #0]
   de6dc:	115e      	asrs	r6, r3, #5
   de6de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   de6e2:	f013 031f 	ands.w	r3, r3, #31
   de6e6:	b087      	sub	sp, #28
   de6e8:	bf18      	it	ne
   de6ea:	3604      	addne	r6, #4
   de6ec:	2500      	movs	r5, #0
   de6ee:	1f37      	subs	r7, r6, #4
   de6f0:	4682      	mov	sl, r0
   de6f2:	4690      	mov	r8, r2
   de6f4:	9301      	str	r3, [sp, #4]
   de6f6:	f846 5c04 	str.w	r5, [r6, #-4]
   de6fa:	46b9      	mov	r9, r7
   de6fc:	463c      	mov	r4, r7
   de6fe:	9502      	str	r5, [sp, #8]
   de700:	46ab      	mov	fp, r5
   de702:	784a      	ldrb	r2, [r1, #1]
   de704:	1c4b      	adds	r3, r1, #1
   de706:	9303      	str	r3, [sp, #12]
   de708:	b342      	cbz	r2, de75c <__hexnan+0x88>
   de70a:	4610      	mov	r0, r2
   de70c:	9105      	str	r1, [sp, #20]
   de70e:	9204      	str	r2, [sp, #16]
   de710:	f7ff fd70 	bl	de1f4 <__hexdig_fun>
   de714:	2800      	cmp	r0, #0
   de716:	d14f      	bne.n	de7b8 <__hexnan+0xe4>
   de718:	9a04      	ldr	r2, [sp, #16]
   de71a:	9905      	ldr	r1, [sp, #20]
   de71c:	2a20      	cmp	r2, #32
   de71e:	d818      	bhi.n	de752 <__hexnan+0x7e>
   de720:	9b02      	ldr	r3, [sp, #8]
   de722:	459b      	cmp	fp, r3
   de724:	dd13      	ble.n	de74e <__hexnan+0x7a>
   de726:	454c      	cmp	r4, r9
   de728:	d206      	bcs.n	de738 <__hexnan+0x64>
   de72a:	2d07      	cmp	r5, #7
   de72c:	dc04      	bgt.n	de738 <__hexnan+0x64>
   de72e:	462a      	mov	r2, r5
   de730:	4649      	mov	r1, r9
   de732:	4620      	mov	r0, r4
   de734:	f7ff ffa8 	bl	de688 <L_shift>
   de738:	4544      	cmp	r4, r8
   de73a:	d950      	bls.n	de7de <__hexnan+0x10a>
   de73c:	2300      	movs	r3, #0
   de73e:	f1a4 0904 	sub.w	r9, r4, #4
   de742:	f844 3c04 	str.w	r3, [r4, #-4]
   de746:	f8cd b008 	str.w	fp, [sp, #8]
   de74a:	464c      	mov	r4, r9
   de74c:	461d      	mov	r5, r3
   de74e:	9903      	ldr	r1, [sp, #12]
   de750:	e7d7      	b.n	de702 <__hexnan+0x2e>
   de752:	2a29      	cmp	r2, #41	; 0x29
   de754:	d156      	bne.n	de804 <__hexnan+0x130>
   de756:	3102      	adds	r1, #2
   de758:	f8ca 1000 	str.w	r1, [sl]
   de75c:	f1bb 0f00 	cmp.w	fp, #0
   de760:	d050      	beq.n	de804 <__hexnan+0x130>
   de762:	454c      	cmp	r4, r9
   de764:	d206      	bcs.n	de774 <__hexnan+0xa0>
   de766:	2d07      	cmp	r5, #7
   de768:	dc04      	bgt.n	de774 <__hexnan+0xa0>
   de76a:	462a      	mov	r2, r5
   de76c:	4649      	mov	r1, r9
   de76e:	4620      	mov	r0, r4
   de770:	f7ff ff8a 	bl	de688 <L_shift>
   de774:	4544      	cmp	r4, r8
   de776:	d934      	bls.n	de7e2 <__hexnan+0x10e>
   de778:	f1a8 0204 	sub.w	r2, r8, #4
   de77c:	4623      	mov	r3, r4
   de77e:	f853 1b04 	ldr.w	r1, [r3], #4
   de782:	f842 1f04 	str.w	r1, [r2, #4]!
   de786:	429f      	cmp	r7, r3
   de788:	d2f9      	bcs.n	de77e <__hexnan+0xaa>
   de78a:	1b3b      	subs	r3, r7, r4
   de78c:	f023 0303 	bic.w	r3, r3, #3
   de790:	3304      	adds	r3, #4
   de792:	3401      	adds	r4, #1
   de794:	3e03      	subs	r6, #3
   de796:	42b4      	cmp	r4, r6
   de798:	bf88      	it	hi
   de79a:	2304      	movhi	r3, #4
   de79c:	4443      	add	r3, r8
   de79e:	2200      	movs	r2, #0
   de7a0:	f843 2b04 	str.w	r2, [r3], #4
   de7a4:	429f      	cmp	r7, r3
   de7a6:	d2fb      	bcs.n	de7a0 <__hexnan+0xcc>
   de7a8:	683b      	ldr	r3, [r7, #0]
   de7aa:	b91b      	cbnz	r3, de7b4 <__hexnan+0xe0>
   de7ac:	4547      	cmp	r7, r8
   de7ae:	d127      	bne.n	de800 <__hexnan+0x12c>
   de7b0:	2301      	movs	r3, #1
   de7b2:	603b      	str	r3, [r7, #0]
   de7b4:	2005      	movs	r0, #5
   de7b6:	e026      	b.n	de806 <__hexnan+0x132>
   de7b8:	3501      	adds	r5, #1
   de7ba:	2d08      	cmp	r5, #8
   de7bc:	f10b 0b01 	add.w	fp, fp, #1
   de7c0:	dd06      	ble.n	de7d0 <__hexnan+0xfc>
   de7c2:	4544      	cmp	r4, r8
   de7c4:	d9c3      	bls.n	de74e <__hexnan+0x7a>
   de7c6:	2300      	movs	r3, #0
   de7c8:	f844 3c04 	str.w	r3, [r4, #-4]
   de7cc:	2501      	movs	r5, #1
   de7ce:	3c04      	subs	r4, #4
   de7d0:	6822      	ldr	r2, [r4, #0]
   de7d2:	f000 000f 	and.w	r0, r0, #15
   de7d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   de7da:	6022      	str	r2, [r4, #0]
   de7dc:	e7b7      	b.n	de74e <__hexnan+0x7a>
   de7de:	2508      	movs	r5, #8
   de7e0:	e7b5      	b.n	de74e <__hexnan+0x7a>
   de7e2:	9b01      	ldr	r3, [sp, #4]
   de7e4:	2b00      	cmp	r3, #0
   de7e6:	d0df      	beq.n	de7a8 <__hexnan+0xd4>
   de7e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   de7ec:	f1c3 0320 	rsb	r3, r3, #32
   de7f0:	fa22 f303 	lsr.w	r3, r2, r3
   de7f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
   de7f8:	401a      	ands	r2, r3
   de7fa:	f846 2c04 	str.w	r2, [r6, #-4]
   de7fe:	e7d3      	b.n	de7a8 <__hexnan+0xd4>
   de800:	3f04      	subs	r7, #4
   de802:	e7d1      	b.n	de7a8 <__hexnan+0xd4>
   de804:	2004      	movs	r0, #4
   de806:	b007      	add	sp, #28
   de808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000de80c <__retarget_lock_acquire_recursive>:
   de80c:	4770      	bx	lr

000de80e <__retarget_lock_release>:
   de80e:	4770      	bx	lr

000de810 <__retarget_lock_release_recursive>:
   de810:	4770      	bx	lr
	...

000de814 <_lseek_r>:
   de814:	b538      	push	{r3, r4, r5, lr}
   de816:	4d07      	ldr	r5, [pc, #28]	; (de834 <_lseek_r+0x20>)
   de818:	4604      	mov	r4, r0
   de81a:	4608      	mov	r0, r1
   de81c:	4611      	mov	r1, r2
   de81e:	2200      	movs	r2, #0
   de820:	602a      	str	r2, [r5, #0]
   de822:	461a      	mov	r2, r3
   de824:	f7fa f9aa 	bl	d8b7c <_lseek>
   de828:	1c43      	adds	r3, r0, #1
   de82a:	d102      	bne.n	de832 <_lseek_r+0x1e>
   de82c:	682b      	ldr	r3, [r5, #0]
   de82e:	b103      	cbz	r3, de832 <_lseek_r+0x1e>
   de830:	6023      	str	r3, [r4, #0]
   de832:	bd38      	pop	{r3, r4, r5, pc}
   de834:	2003e7ec 	.word	0x2003e7ec

000de838 <__ascii_mbtowc>:
   de838:	b082      	sub	sp, #8
   de83a:	b901      	cbnz	r1, de83e <__ascii_mbtowc+0x6>
   de83c:	a901      	add	r1, sp, #4
   de83e:	b142      	cbz	r2, de852 <__ascii_mbtowc+0x1a>
   de840:	b14b      	cbz	r3, de856 <__ascii_mbtowc+0x1e>
   de842:	7813      	ldrb	r3, [r2, #0]
   de844:	600b      	str	r3, [r1, #0]
   de846:	7812      	ldrb	r2, [r2, #0]
   de848:	1e10      	subs	r0, r2, #0
   de84a:	bf18      	it	ne
   de84c:	2001      	movne	r0, #1
   de84e:	b002      	add	sp, #8
   de850:	4770      	bx	lr
   de852:	4610      	mov	r0, r2
   de854:	e7fb      	b.n	de84e <__ascii_mbtowc+0x16>
   de856:	f06f 0001 	mvn.w	r0, #1
   de85a:	e7f8      	b.n	de84e <__ascii_mbtowc+0x16>

000de85c <_Balloc>:
   de85c:	b570      	push	{r4, r5, r6, lr}
   de85e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   de860:	4604      	mov	r4, r0
   de862:	460d      	mov	r5, r1
   de864:	b93e      	cbnz	r6, de876 <_Balloc+0x1a>
   de866:	2010      	movs	r0, #16
   de868:	f7fa fbd4 	bl	d9014 <malloc>
   de86c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   de870:	6260      	str	r0, [r4, #36]	; 0x24
   de872:	6006      	str	r6, [r0, #0]
   de874:	60c6      	str	r6, [r0, #12]
   de876:	6a66      	ldr	r6, [r4, #36]	; 0x24
   de878:	68f3      	ldr	r3, [r6, #12]
   de87a:	b183      	cbz	r3, de89e <_Balloc+0x42>
   de87c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   de87e:	68db      	ldr	r3, [r3, #12]
   de880:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   de884:	b9b8      	cbnz	r0, de8b6 <_Balloc+0x5a>
   de886:	2101      	movs	r1, #1
   de888:	fa01 f605 	lsl.w	r6, r1, r5
   de88c:	1d72      	adds	r2, r6, #5
   de88e:	0092      	lsls	r2, r2, #2
   de890:	4620      	mov	r0, r4
   de892:	f000 fc22 	bl	df0da <_calloc_r>
   de896:	b160      	cbz	r0, de8b2 <_Balloc+0x56>
   de898:	e9c0 5601 	strd	r5, r6, [r0, #4]
   de89c:	e00e      	b.n	de8bc <_Balloc+0x60>
   de89e:	2221      	movs	r2, #33	; 0x21
   de8a0:	2104      	movs	r1, #4
   de8a2:	4620      	mov	r0, r4
   de8a4:	f000 fc19 	bl	df0da <_calloc_r>
   de8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   de8aa:	60f0      	str	r0, [r6, #12]
   de8ac:	68db      	ldr	r3, [r3, #12]
   de8ae:	2b00      	cmp	r3, #0
   de8b0:	d1e4      	bne.n	de87c <_Balloc+0x20>
   de8b2:	2000      	movs	r0, #0
   de8b4:	bd70      	pop	{r4, r5, r6, pc}
   de8b6:	6802      	ldr	r2, [r0, #0]
   de8b8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   de8bc:	2300      	movs	r3, #0
   de8be:	e9c0 3303 	strd	r3, r3, [r0, #12]
   de8c2:	e7f7      	b.n	de8b4 <_Balloc+0x58>

000de8c4 <_Bfree>:
   de8c4:	b570      	push	{r4, r5, r6, lr}
   de8c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   de8c8:	4605      	mov	r5, r0
   de8ca:	460c      	mov	r4, r1
   de8cc:	b93e      	cbnz	r6, de8de <_Bfree+0x1a>
   de8ce:	2010      	movs	r0, #16
   de8d0:	f7fa fba0 	bl	d9014 <malloc>
   de8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   de8d8:	6268      	str	r0, [r5, #36]	; 0x24
   de8da:	6006      	str	r6, [r0, #0]
   de8dc:	60c6      	str	r6, [r0, #12]
   de8de:	b13c      	cbz	r4, de8f0 <_Bfree+0x2c>
   de8e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   de8e2:	6862      	ldr	r2, [r4, #4]
   de8e4:	68db      	ldr	r3, [r3, #12]
   de8e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   de8ea:	6021      	str	r1, [r4, #0]
   de8ec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   de8f0:	bd70      	pop	{r4, r5, r6, pc}

000de8f2 <__multadd>:
   de8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de8f6:	690e      	ldr	r6, [r1, #16]
   de8f8:	4607      	mov	r7, r0
   de8fa:	4698      	mov	r8, r3
   de8fc:	460c      	mov	r4, r1
   de8fe:	f101 0014 	add.w	r0, r1, #20
   de902:	2300      	movs	r3, #0
   de904:	6805      	ldr	r5, [r0, #0]
   de906:	b2a9      	uxth	r1, r5
   de908:	fb02 8101 	mla	r1, r2, r1, r8
   de90c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   de910:	0c2d      	lsrs	r5, r5, #16
   de912:	fb02 c505 	mla	r5, r2, r5, ip
   de916:	b289      	uxth	r1, r1
   de918:	3301      	adds	r3, #1
   de91a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   de91e:	429e      	cmp	r6, r3
   de920:	f840 1b04 	str.w	r1, [r0], #4
   de924:	ea4f 4815 	mov.w	r8, r5, lsr #16
   de928:	dcec      	bgt.n	de904 <__multadd+0x12>
   de92a:	f1b8 0f00 	cmp.w	r8, #0
   de92e:	d01b      	beq.n	de968 <__multadd+0x76>
   de930:	68a3      	ldr	r3, [r4, #8]
   de932:	42b3      	cmp	r3, r6
   de934:	dc12      	bgt.n	de95c <__multadd+0x6a>
   de936:	6861      	ldr	r1, [r4, #4]
   de938:	4638      	mov	r0, r7
   de93a:	3101      	adds	r1, #1
   de93c:	f7ff ff8e 	bl	de85c <_Balloc>
   de940:	6922      	ldr	r2, [r4, #16]
   de942:	3202      	adds	r2, #2
   de944:	f104 010c 	add.w	r1, r4, #12
   de948:	4605      	mov	r5, r0
   de94a:	0092      	lsls	r2, r2, #2
   de94c:	300c      	adds	r0, #12
   de94e:	f7fe fb2d 	bl	dcfac <memcpy>
   de952:	4621      	mov	r1, r4
   de954:	4638      	mov	r0, r7
   de956:	f7ff ffb5 	bl	de8c4 <_Bfree>
   de95a:	462c      	mov	r4, r5
   de95c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   de960:	3601      	adds	r6, #1
   de962:	f8c3 8014 	str.w	r8, [r3, #20]
   de966:	6126      	str	r6, [r4, #16]
   de968:	4620      	mov	r0, r4
   de96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000de96e <__s2b>:
   de96e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de972:	460c      	mov	r4, r1
   de974:	4615      	mov	r5, r2
   de976:	461f      	mov	r7, r3
   de978:	2209      	movs	r2, #9
   de97a:	3308      	adds	r3, #8
   de97c:	4606      	mov	r6, r0
   de97e:	fb93 f3f2 	sdiv	r3, r3, r2
   de982:	2100      	movs	r1, #0
   de984:	2201      	movs	r2, #1
   de986:	429a      	cmp	r2, r3
   de988:	db20      	blt.n	de9cc <__s2b+0x5e>
   de98a:	4630      	mov	r0, r6
   de98c:	f7ff ff66 	bl	de85c <_Balloc>
   de990:	9b08      	ldr	r3, [sp, #32]
   de992:	6143      	str	r3, [r0, #20]
   de994:	2d09      	cmp	r5, #9
   de996:	f04f 0301 	mov.w	r3, #1
   de99a:	6103      	str	r3, [r0, #16]
   de99c:	dd19      	ble.n	de9d2 <__s2b+0x64>
   de99e:	f104 0909 	add.w	r9, r4, #9
   de9a2:	46c8      	mov	r8, r9
   de9a4:	442c      	add	r4, r5
   de9a6:	f818 3b01 	ldrb.w	r3, [r8], #1
   de9aa:	4601      	mov	r1, r0
   de9ac:	3b30      	subs	r3, #48	; 0x30
   de9ae:	220a      	movs	r2, #10
   de9b0:	4630      	mov	r0, r6
   de9b2:	f7ff ff9e 	bl	de8f2 <__multadd>
   de9b6:	45a0      	cmp	r8, r4
   de9b8:	d1f5      	bne.n	de9a6 <__s2b+0x38>
   de9ba:	f1a5 0408 	sub.w	r4, r5, #8
   de9be:	444c      	add	r4, r9
   de9c0:	1b2d      	subs	r5, r5, r4
   de9c2:	1963      	adds	r3, r4, r5
   de9c4:	42bb      	cmp	r3, r7
   de9c6:	db07      	blt.n	de9d8 <__s2b+0x6a>
   de9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de9cc:	0052      	lsls	r2, r2, #1
   de9ce:	3101      	adds	r1, #1
   de9d0:	e7d9      	b.n	de986 <__s2b+0x18>
   de9d2:	340a      	adds	r4, #10
   de9d4:	2509      	movs	r5, #9
   de9d6:	e7f3      	b.n	de9c0 <__s2b+0x52>
   de9d8:	f814 3b01 	ldrb.w	r3, [r4], #1
   de9dc:	4601      	mov	r1, r0
   de9de:	3b30      	subs	r3, #48	; 0x30
   de9e0:	220a      	movs	r2, #10
   de9e2:	4630      	mov	r0, r6
   de9e4:	f7ff ff85 	bl	de8f2 <__multadd>
   de9e8:	e7eb      	b.n	de9c2 <__s2b+0x54>

000de9ea <__hi0bits>:
   de9ea:	0c03      	lsrs	r3, r0, #16
   de9ec:	041b      	lsls	r3, r3, #16
   de9ee:	b9d3      	cbnz	r3, dea26 <__hi0bits+0x3c>
   de9f0:	0400      	lsls	r0, r0, #16
   de9f2:	2310      	movs	r3, #16
   de9f4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   de9f8:	bf04      	itt	eq
   de9fa:	0200      	lsleq	r0, r0, #8
   de9fc:	3308      	addeq	r3, #8
   de9fe:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dea02:	bf04      	itt	eq
   dea04:	0100      	lsleq	r0, r0, #4
   dea06:	3304      	addeq	r3, #4
   dea08:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dea0c:	bf04      	itt	eq
   dea0e:	0080      	lsleq	r0, r0, #2
   dea10:	3302      	addeq	r3, #2
   dea12:	2800      	cmp	r0, #0
   dea14:	db05      	blt.n	dea22 <__hi0bits+0x38>
   dea16:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dea1a:	f103 0301 	add.w	r3, r3, #1
   dea1e:	bf08      	it	eq
   dea20:	2320      	moveq	r3, #32
   dea22:	4618      	mov	r0, r3
   dea24:	4770      	bx	lr
   dea26:	2300      	movs	r3, #0
   dea28:	e7e4      	b.n	de9f4 <__hi0bits+0xa>

000dea2a <__lo0bits>:
   dea2a:	6803      	ldr	r3, [r0, #0]
   dea2c:	f013 0207 	ands.w	r2, r3, #7
   dea30:	4601      	mov	r1, r0
   dea32:	d00b      	beq.n	dea4c <__lo0bits+0x22>
   dea34:	07da      	lsls	r2, r3, #31
   dea36:	d424      	bmi.n	dea82 <__lo0bits+0x58>
   dea38:	0798      	lsls	r0, r3, #30
   dea3a:	bf49      	itett	mi
   dea3c:	085b      	lsrmi	r3, r3, #1
   dea3e:	089b      	lsrpl	r3, r3, #2
   dea40:	2001      	movmi	r0, #1
   dea42:	600b      	strmi	r3, [r1, #0]
   dea44:	bf5c      	itt	pl
   dea46:	600b      	strpl	r3, [r1, #0]
   dea48:	2002      	movpl	r0, #2
   dea4a:	4770      	bx	lr
   dea4c:	b298      	uxth	r0, r3
   dea4e:	b9b0      	cbnz	r0, dea7e <__lo0bits+0x54>
   dea50:	0c1b      	lsrs	r3, r3, #16
   dea52:	2010      	movs	r0, #16
   dea54:	f013 0fff 	tst.w	r3, #255	; 0xff
   dea58:	bf04      	itt	eq
   dea5a:	0a1b      	lsreq	r3, r3, #8
   dea5c:	3008      	addeq	r0, #8
   dea5e:	071a      	lsls	r2, r3, #28
   dea60:	bf04      	itt	eq
   dea62:	091b      	lsreq	r3, r3, #4
   dea64:	3004      	addeq	r0, #4
   dea66:	079a      	lsls	r2, r3, #30
   dea68:	bf04      	itt	eq
   dea6a:	089b      	lsreq	r3, r3, #2
   dea6c:	3002      	addeq	r0, #2
   dea6e:	07da      	lsls	r2, r3, #31
   dea70:	d403      	bmi.n	dea7a <__lo0bits+0x50>
   dea72:	085b      	lsrs	r3, r3, #1
   dea74:	f100 0001 	add.w	r0, r0, #1
   dea78:	d005      	beq.n	dea86 <__lo0bits+0x5c>
   dea7a:	600b      	str	r3, [r1, #0]
   dea7c:	4770      	bx	lr
   dea7e:	4610      	mov	r0, r2
   dea80:	e7e8      	b.n	dea54 <__lo0bits+0x2a>
   dea82:	2000      	movs	r0, #0
   dea84:	4770      	bx	lr
   dea86:	2020      	movs	r0, #32
   dea88:	4770      	bx	lr

000dea8a <__i2b>:
   dea8a:	b510      	push	{r4, lr}
   dea8c:	460c      	mov	r4, r1
   dea8e:	2101      	movs	r1, #1
   dea90:	f7ff fee4 	bl	de85c <_Balloc>
   dea94:	2201      	movs	r2, #1
   dea96:	6144      	str	r4, [r0, #20]
   dea98:	6102      	str	r2, [r0, #16]
   dea9a:	bd10      	pop	{r4, pc}

000dea9c <__multiply>:
   dea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   deaa0:	4615      	mov	r5, r2
   deaa2:	690a      	ldr	r2, [r1, #16]
   deaa4:	692b      	ldr	r3, [r5, #16]
   deaa6:	429a      	cmp	r2, r3
   deaa8:	bfb8      	it	lt
   deaaa:	460b      	movlt	r3, r1
   deaac:	460c      	mov	r4, r1
   deaae:	bfbc      	itt	lt
   deab0:	462c      	movlt	r4, r5
   deab2:	461d      	movlt	r5, r3
   deab4:	6927      	ldr	r7, [r4, #16]
   deab6:	f8d5 9010 	ldr.w	r9, [r5, #16]
   deaba:	68a3      	ldr	r3, [r4, #8]
   deabc:	6861      	ldr	r1, [r4, #4]
   deabe:	eb07 0609 	add.w	r6, r7, r9
   deac2:	42b3      	cmp	r3, r6
   deac4:	bfb8      	it	lt
   deac6:	3101      	addlt	r1, #1
   deac8:	b085      	sub	sp, #20
   deaca:	f7ff fec7 	bl	de85c <_Balloc>
   deace:	f100 0114 	add.w	r1, r0, #20
   dead2:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dead6:	460b      	mov	r3, r1
   dead8:	2200      	movs	r2, #0
   deada:	4543      	cmp	r3, r8
   deadc:	d31d      	bcc.n	deb1a <__multiply+0x7e>
   deade:	f104 0314 	add.w	r3, r4, #20
   deae2:	f105 0214 	add.w	r2, r5, #20
   deae6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   deaea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   deaee:	9302      	str	r3, [sp, #8]
   deaf0:	1b3b      	subs	r3, r7, r4
   deaf2:	3b15      	subs	r3, #21
   deaf4:	f023 0303 	bic.w	r3, r3, #3
   deaf8:	3304      	adds	r3, #4
   deafa:	f104 0515 	add.w	r5, r4, #21
   deafe:	42af      	cmp	r7, r5
   deb00:	bf38      	it	cc
   deb02:	2304      	movcc	r3, #4
   deb04:	9301      	str	r3, [sp, #4]
   deb06:	9b02      	ldr	r3, [sp, #8]
   deb08:	9203      	str	r2, [sp, #12]
   deb0a:	4293      	cmp	r3, r2
   deb0c:	d808      	bhi.n	deb20 <__multiply+0x84>
   deb0e:	2e00      	cmp	r6, #0
   deb10:	dc5a      	bgt.n	debc8 <__multiply+0x12c>
   deb12:	6106      	str	r6, [r0, #16]
   deb14:	b005      	add	sp, #20
   deb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deb1a:	f843 2b04 	str.w	r2, [r3], #4
   deb1e:	e7dc      	b.n	deada <__multiply+0x3e>
   deb20:	f8b2 a000 	ldrh.w	sl, [r2]
   deb24:	f1ba 0f00 	cmp.w	sl, #0
   deb28:	d024      	beq.n	deb74 <__multiply+0xd8>
   deb2a:	f104 0e14 	add.w	lr, r4, #20
   deb2e:	4689      	mov	r9, r1
   deb30:	f04f 0c00 	mov.w	ip, #0
   deb34:	f85e 5b04 	ldr.w	r5, [lr], #4
   deb38:	f8d9 b000 	ldr.w	fp, [r9]
   deb3c:	b2ab      	uxth	r3, r5
   deb3e:	fa1f fb8b 	uxth.w	fp, fp
   deb42:	fb0a b303 	mla	r3, sl, r3, fp
   deb46:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   deb4a:	f8d9 5000 	ldr.w	r5, [r9]
   deb4e:	4463      	add	r3, ip
   deb50:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   deb54:	fb0a c50b 	mla	r5, sl, fp, ip
   deb58:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   deb5c:	b29b      	uxth	r3, r3
   deb5e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   deb62:	4577      	cmp	r7, lr
   deb64:	f849 3b04 	str.w	r3, [r9], #4
   deb68:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   deb6c:	d8e2      	bhi.n	deb34 <__multiply+0x98>
   deb6e:	9b01      	ldr	r3, [sp, #4]
   deb70:	f841 c003 	str.w	ip, [r1, r3]
   deb74:	9b03      	ldr	r3, [sp, #12]
   deb76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   deb7a:	3204      	adds	r2, #4
   deb7c:	f1b9 0f00 	cmp.w	r9, #0
   deb80:	d020      	beq.n	debc4 <__multiply+0x128>
   deb82:	680b      	ldr	r3, [r1, #0]
   deb84:	f104 0c14 	add.w	ip, r4, #20
   deb88:	468e      	mov	lr, r1
   deb8a:	f04f 0a00 	mov.w	sl, #0
   deb8e:	f8bc 5000 	ldrh.w	r5, [ip]
   deb92:	f8be b002 	ldrh.w	fp, [lr, #2]
   deb96:	fb09 b505 	mla	r5, r9, r5, fp
   deb9a:	44aa      	add	sl, r5
   deb9c:	b29b      	uxth	r3, r3
   deb9e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   deba2:	f84e 3b04 	str.w	r3, [lr], #4
   deba6:	f85c 3b04 	ldr.w	r3, [ip], #4
   debaa:	f8be 5000 	ldrh.w	r5, [lr]
   debae:	0c1b      	lsrs	r3, r3, #16
   debb0:	fb09 5303 	mla	r3, r9, r3, r5
   debb4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   debb8:	4567      	cmp	r7, ip
   debba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   debbe:	d8e6      	bhi.n	deb8e <__multiply+0xf2>
   debc0:	9d01      	ldr	r5, [sp, #4]
   debc2:	514b      	str	r3, [r1, r5]
   debc4:	3104      	adds	r1, #4
   debc6:	e79e      	b.n	deb06 <__multiply+0x6a>
   debc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   debcc:	2b00      	cmp	r3, #0
   debce:	d1a0      	bne.n	deb12 <__multiply+0x76>
   debd0:	3e01      	subs	r6, #1
   debd2:	e79c      	b.n	deb0e <__multiply+0x72>

000debd4 <__pow5mult>:
   debd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   debd8:	4615      	mov	r5, r2
   debda:	f012 0203 	ands.w	r2, r2, #3
   debde:	4606      	mov	r6, r0
   debe0:	460f      	mov	r7, r1
   debe2:	d007      	beq.n	debf4 <__pow5mult+0x20>
   debe4:	4c21      	ldr	r4, [pc, #132]	; (dec6c <__pow5mult+0x98>)
   debe6:	3a01      	subs	r2, #1
   debe8:	2300      	movs	r3, #0
   debea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   debee:	f7ff fe80 	bl	de8f2 <__multadd>
   debf2:	4607      	mov	r7, r0
   debf4:	10ad      	asrs	r5, r5, #2
   debf6:	d035      	beq.n	dec64 <__pow5mult+0x90>
   debf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   debfa:	b93c      	cbnz	r4, dec0c <__pow5mult+0x38>
   debfc:	2010      	movs	r0, #16
   debfe:	f7fa fa09 	bl	d9014 <malloc>
   dec02:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dec06:	6270      	str	r0, [r6, #36]	; 0x24
   dec08:	6004      	str	r4, [r0, #0]
   dec0a:	60c4      	str	r4, [r0, #12]
   dec0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dec10:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dec14:	b94c      	cbnz	r4, dec2a <__pow5mult+0x56>
   dec16:	f240 2171 	movw	r1, #625	; 0x271
   dec1a:	4630      	mov	r0, r6
   dec1c:	f7ff ff35 	bl	dea8a <__i2b>
   dec20:	2300      	movs	r3, #0
   dec22:	f8c8 0008 	str.w	r0, [r8, #8]
   dec26:	4604      	mov	r4, r0
   dec28:	6003      	str	r3, [r0, #0]
   dec2a:	f04f 0900 	mov.w	r9, #0
   dec2e:	07eb      	lsls	r3, r5, #31
   dec30:	d50a      	bpl.n	dec48 <__pow5mult+0x74>
   dec32:	4639      	mov	r1, r7
   dec34:	4622      	mov	r2, r4
   dec36:	4630      	mov	r0, r6
   dec38:	f7ff ff30 	bl	dea9c <__multiply>
   dec3c:	4639      	mov	r1, r7
   dec3e:	4680      	mov	r8, r0
   dec40:	4630      	mov	r0, r6
   dec42:	f7ff fe3f 	bl	de8c4 <_Bfree>
   dec46:	4647      	mov	r7, r8
   dec48:	106d      	asrs	r5, r5, #1
   dec4a:	d00b      	beq.n	dec64 <__pow5mult+0x90>
   dec4c:	6820      	ldr	r0, [r4, #0]
   dec4e:	b938      	cbnz	r0, dec60 <__pow5mult+0x8c>
   dec50:	4622      	mov	r2, r4
   dec52:	4621      	mov	r1, r4
   dec54:	4630      	mov	r0, r6
   dec56:	f7ff ff21 	bl	dea9c <__multiply>
   dec5a:	6020      	str	r0, [r4, #0]
   dec5c:	f8c0 9000 	str.w	r9, [r0]
   dec60:	4604      	mov	r4, r0
   dec62:	e7e4      	b.n	dec2e <__pow5mult+0x5a>
   dec64:	4638      	mov	r0, r7
   dec66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dec6a:	bf00      	nop
   dec6c:	000e0578 	.word	0x000e0578

000dec70 <__lshift>:
   dec70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dec74:	460c      	mov	r4, r1
   dec76:	6849      	ldr	r1, [r1, #4]
   dec78:	6923      	ldr	r3, [r4, #16]
   dec7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dec7e:	68a3      	ldr	r3, [r4, #8]
   dec80:	4607      	mov	r7, r0
   dec82:	4691      	mov	r9, r2
   dec84:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dec88:	f108 0601 	add.w	r6, r8, #1
   dec8c:	42b3      	cmp	r3, r6
   dec8e:	db3f      	blt.n	ded10 <__lshift+0xa0>
   dec90:	4638      	mov	r0, r7
   dec92:	f7ff fde3 	bl	de85c <_Balloc>
   dec96:	2300      	movs	r3, #0
   dec98:	4605      	mov	r5, r0
   dec9a:	f100 0114 	add.w	r1, r0, #20
   dec9e:	f100 0210 	add.w	r2, r0, #16
   deca2:	4618      	mov	r0, r3
   deca4:	4553      	cmp	r3, sl
   deca6:	db36      	blt.n	ded16 <__lshift+0xa6>
   deca8:	6920      	ldr	r0, [r4, #16]
   decaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   decae:	f104 0314 	add.w	r3, r4, #20
   decb2:	f019 091f 	ands.w	r9, r9, #31
   decb6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   decba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   decbe:	d02e      	beq.n	ded1e <__lshift+0xae>
   decc0:	f1c9 0e20 	rsb	lr, r9, #32
   decc4:	468a      	mov	sl, r1
   decc6:	2200      	movs	r2, #0
   decc8:	6818      	ldr	r0, [r3, #0]
   decca:	fa00 f009 	lsl.w	r0, r0, r9
   decce:	4302      	orrs	r2, r0
   decd0:	f84a 2b04 	str.w	r2, [sl], #4
   decd4:	f853 2b04 	ldr.w	r2, [r3], #4
   decd8:	459c      	cmp	ip, r3
   decda:	fa22 f20e 	lsr.w	r2, r2, lr
   decde:	d8f3      	bhi.n	decc8 <__lshift+0x58>
   dece0:	ebac 0304 	sub.w	r3, ip, r4
   dece4:	3b15      	subs	r3, #21
   dece6:	f023 0303 	bic.w	r3, r3, #3
   decea:	3304      	adds	r3, #4
   decec:	f104 0015 	add.w	r0, r4, #21
   decf0:	4560      	cmp	r0, ip
   decf2:	bf88      	it	hi
   decf4:	2304      	movhi	r3, #4
   decf6:	50ca      	str	r2, [r1, r3]
   decf8:	b10a      	cbz	r2, decfe <__lshift+0x8e>
   decfa:	f108 0602 	add.w	r6, r8, #2
   decfe:	3e01      	subs	r6, #1
   ded00:	4638      	mov	r0, r7
   ded02:	612e      	str	r6, [r5, #16]
   ded04:	4621      	mov	r1, r4
   ded06:	f7ff fddd 	bl	de8c4 <_Bfree>
   ded0a:	4628      	mov	r0, r5
   ded0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ded10:	3101      	adds	r1, #1
   ded12:	005b      	lsls	r3, r3, #1
   ded14:	e7ba      	b.n	dec8c <__lshift+0x1c>
   ded16:	f842 0f04 	str.w	r0, [r2, #4]!
   ded1a:	3301      	adds	r3, #1
   ded1c:	e7c2      	b.n	deca4 <__lshift+0x34>
   ded1e:	3904      	subs	r1, #4
   ded20:	f853 2b04 	ldr.w	r2, [r3], #4
   ded24:	f841 2f04 	str.w	r2, [r1, #4]!
   ded28:	459c      	cmp	ip, r3
   ded2a:	d8f9      	bhi.n	ded20 <__lshift+0xb0>
   ded2c:	e7e7      	b.n	decfe <__lshift+0x8e>

000ded2e <__mcmp>:
   ded2e:	b530      	push	{r4, r5, lr}
   ded30:	6902      	ldr	r2, [r0, #16]
   ded32:	690c      	ldr	r4, [r1, #16]
   ded34:	1b12      	subs	r2, r2, r4
   ded36:	d10e      	bne.n	ded56 <__mcmp+0x28>
   ded38:	f100 0314 	add.w	r3, r0, #20
   ded3c:	3114      	adds	r1, #20
   ded3e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ded42:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ded46:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ded4a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ded4e:	42a5      	cmp	r5, r4
   ded50:	d003      	beq.n	ded5a <__mcmp+0x2c>
   ded52:	d305      	bcc.n	ded60 <__mcmp+0x32>
   ded54:	2201      	movs	r2, #1
   ded56:	4610      	mov	r0, r2
   ded58:	bd30      	pop	{r4, r5, pc}
   ded5a:	4283      	cmp	r3, r0
   ded5c:	d3f3      	bcc.n	ded46 <__mcmp+0x18>
   ded5e:	e7fa      	b.n	ded56 <__mcmp+0x28>
   ded60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ded64:	e7f7      	b.n	ded56 <__mcmp+0x28>

000ded66 <__mdiff>:
   ded66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ded6a:	460c      	mov	r4, r1
   ded6c:	4606      	mov	r6, r0
   ded6e:	4611      	mov	r1, r2
   ded70:	4620      	mov	r0, r4
   ded72:	4617      	mov	r7, r2
   ded74:	f7ff ffdb 	bl	ded2e <__mcmp>
   ded78:	1e05      	subs	r5, r0, #0
   ded7a:	d108      	bne.n	ded8e <__mdiff+0x28>
   ded7c:	4629      	mov	r1, r5
   ded7e:	4630      	mov	r0, r6
   ded80:	f7ff fd6c 	bl	de85c <_Balloc>
   ded84:	2301      	movs	r3, #1
   ded86:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ded8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ded8e:	bfa4      	itt	ge
   ded90:	463b      	movge	r3, r7
   ded92:	4627      	movge	r7, r4
   ded94:	4630      	mov	r0, r6
   ded96:	6879      	ldr	r1, [r7, #4]
   ded98:	bfa6      	itte	ge
   ded9a:	461c      	movge	r4, r3
   ded9c:	2500      	movge	r5, #0
   ded9e:	2501      	movlt	r5, #1
   deda0:	f7ff fd5c 	bl	de85c <_Balloc>
   deda4:	693e      	ldr	r6, [r7, #16]
   deda6:	60c5      	str	r5, [r0, #12]
   deda8:	6925      	ldr	r5, [r4, #16]
   dedaa:	f107 0114 	add.w	r1, r7, #20
   dedae:	f104 0914 	add.w	r9, r4, #20
   dedb2:	f100 0e14 	add.w	lr, r0, #20
   dedb6:	f107 0210 	add.w	r2, r7, #16
   dedba:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dedbe:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dedc2:	46f2      	mov	sl, lr
   dedc4:	2700      	movs	r7, #0
   dedc6:	f859 3b04 	ldr.w	r3, [r9], #4
   dedca:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dedce:	fa1f f883 	uxth.w	r8, r3
   dedd2:	fa17 f78b 	uxtah	r7, r7, fp
   dedd6:	0c1b      	lsrs	r3, r3, #16
   dedd8:	eba7 0808 	sub.w	r8, r7, r8
   deddc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dede0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dede4:	fa1f f888 	uxth.w	r8, r8
   dede8:	141f      	asrs	r7, r3, #16
   dedea:	454d      	cmp	r5, r9
   dedec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dedf0:	f84a 3b04 	str.w	r3, [sl], #4
   dedf4:	d8e7      	bhi.n	dedc6 <__mdiff+0x60>
   dedf6:	1b2b      	subs	r3, r5, r4
   dedf8:	3b15      	subs	r3, #21
   dedfa:	f023 0303 	bic.w	r3, r3, #3
   dedfe:	3304      	adds	r3, #4
   dee00:	3415      	adds	r4, #21
   dee02:	42a5      	cmp	r5, r4
   dee04:	bf38      	it	cc
   dee06:	2304      	movcc	r3, #4
   dee08:	4419      	add	r1, r3
   dee0a:	4473      	add	r3, lr
   dee0c:	469e      	mov	lr, r3
   dee0e:	460d      	mov	r5, r1
   dee10:	4565      	cmp	r5, ip
   dee12:	d30e      	bcc.n	dee32 <__mdiff+0xcc>
   dee14:	f10c 0203 	add.w	r2, ip, #3
   dee18:	1a52      	subs	r2, r2, r1
   dee1a:	f022 0203 	bic.w	r2, r2, #3
   dee1e:	3903      	subs	r1, #3
   dee20:	458c      	cmp	ip, r1
   dee22:	bf38      	it	cc
   dee24:	2200      	movcc	r2, #0
   dee26:	441a      	add	r2, r3
   dee28:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dee2c:	b17b      	cbz	r3, dee4e <__mdiff+0xe8>
   dee2e:	6106      	str	r6, [r0, #16]
   dee30:	e7ab      	b.n	ded8a <__mdiff+0x24>
   dee32:	f855 8b04 	ldr.w	r8, [r5], #4
   dee36:	fa17 f488 	uxtah	r4, r7, r8
   dee3a:	1422      	asrs	r2, r4, #16
   dee3c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dee40:	b2a4      	uxth	r4, r4
   dee42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dee46:	f84e 4b04 	str.w	r4, [lr], #4
   dee4a:	1417      	asrs	r7, r2, #16
   dee4c:	e7e0      	b.n	dee10 <__mdiff+0xaa>
   dee4e:	3e01      	subs	r6, #1
   dee50:	e7ea      	b.n	dee28 <__mdiff+0xc2>
	...

000dee54 <__ulp>:
   dee54:	b082      	sub	sp, #8
   dee56:	ed8d 0b00 	vstr	d0, [sp]
   dee5a:	9b01      	ldr	r3, [sp, #4]
   dee5c:	4912      	ldr	r1, [pc, #72]	; (deea8 <__ulp+0x54>)
   dee5e:	4019      	ands	r1, r3
   dee60:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dee64:	2900      	cmp	r1, #0
   dee66:	dd05      	ble.n	dee74 <__ulp+0x20>
   dee68:	2200      	movs	r2, #0
   dee6a:	460b      	mov	r3, r1
   dee6c:	ec43 2b10 	vmov	d0, r2, r3
   dee70:	b002      	add	sp, #8
   dee72:	4770      	bx	lr
   dee74:	4249      	negs	r1, r1
   dee76:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dee7a:	ea4f 5021 	mov.w	r0, r1, asr #20
   dee7e:	f04f 0200 	mov.w	r2, #0
   dee82:	f04f 0300 	mov.w	r3, #0
   dee86:	da04      	bge.n	dee92 <__ulp+0x3e>
   dee88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dee8c:	fa41 f300 	asr.w	r3, r1, r0
   dee90:	e7ec      	b.n	dee6c <__ulp+0x18>
   dee92:	f1a0 0114 	sub.w	r1, r0, #20
   dee96:	291e      	cmp	r1, #30
   dee98:	bfda      	itte	le
   dee9a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dee9e:	fa20 f101 	lsrle.w	r1, r0, r1
   deea2:	2101      	movgt	r1, #1
   deea4:	460a      	mov	r2, r1
   deea6:	e7e1      	b.n	dee6c <__ulp+0x18>
   deea8:	7ff00000 	.word	0x7ff00000

000deeac <__b2d>:
   deeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   deeae:	6905      	ldr	r5, [r0, #16]
   deeb0:	f100 0714 	add.w	r7, r0, #20
   deeb4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   deeb8:	1f2e      	subs	r6, r5, #4
   deeba:	f855 4c04 	ldr.w	r4, [r5, #-4]
   deebe:	4620      	mov	r0, r4
   deec0:	f7ff fd93 	bl	de9ea <__hi0bits>
   deec4:	f1c0 0320 	rsb	r3, r0, #32
   deec8:	280a      	cmp	r0, #10
   deeca:	f8df c07c 	ldr.w	ip, [pc, #124]	; def48 <__b2d+0x9c>
   deece:	600b      	str	r3, [r1, #0]
   deed0:	dc14      	bgt.n	deefc <__b2d+0x50>
   deed2:	f1c0 0e0b 	rsb	lr, r0, #11
   deed6:	fa24 f10e 	lsr.w	r1, r4, lr
   deeda:	42b7      	cmp	r7, r6
   deedc:	ea41 030c 	orr.w	r3, r1, ip
   deee0:	bf34      	ite	cc
   deee2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   deee6:	2100      	movcs	r1, #0
   deee8:	3015      	adds	r0, #21
   deeea:	fa04 f000 	lsl.w	r0, r4, r0
   deeee:	fa21 f10e 	lsr.w	r1, r1, lr
   deef2:	ea40 0201 	orr.w	r2, r0, r1
   deef6:	ec43 2b10 	vmov	d0, r2, r3
   deefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   deefc:	42b7      	cmp	r7, r6
   deefe:	bf3a      	itte	cc
   def00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   def04:	f1a5 0608 	subcc.w	r6, r5, #8
   def08:	2100      	movcs	r1, #0
   def0a:	380b      	subs	r0, #11
   def0c:	d017      	beq.n	def3e <__b2d+0x92>
   def0e:	f1c0 0c20 	rsb	ip, r0, #32
   def12:	fa04 f500 	lsl.w	r5, r4, r0
   def16:	42be      	cmp	r6, r7
   def18:	fa21 f40c 	lsr.w	r4, r1, ip
   def1c:	ea45 0504 	orr.w	r5, r5, r4
   def20:	bf8c      	ite	hi
   def22:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   def26:	2400      	movls	r4, #0
   def28:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   def2c:	fa01 f000 	lsl.w	r0, r1, r0
   def30:	fa24 f40c 	lsr.w	r4, r4, ip
   def34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   def38:	ea40 0204 	orr.w	r2, r0, r4
   def3c:	e7db      	b.n	deef6 <__b2d+0x4a>
   def3e:	ea44 030c 	orr.w	r3, r4, ip
   def42:	460a      	mov	r2, r1
   def44:	e7d7      	b.n	deef6 <__b2d+0x4a>
   def46:	bf00      	nop
   def48:	3ff00000 	.word	0x3ff00000

000def4c <__d2b>:
   def4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   def50:	4689      	mov	r9, r1
   def52:	2101      	movs	r1, #1
   def54:	ec57 6b10 	vmov	r6, r7, d0
   def58:	4690      	mov	r8, r2
   def5a:	f7ff fc7f 	bl	de85c <_Balloc>
   def5e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   def62:	4604      	mov	r4, r0
   def64:	f3c7 0313 	ubfx	r3, r7, #0, #20
   def68:	bb35      	cbnz	r5, defb8 <__d2b+0x6c>
   def6a:	2e00      	cmp	r6, #0
   def6c:	9301      	str	r3, [sp, #4]
   def6e:	d028      	beq.n	defc2 <__d2b+0x76>
   def70:	4668      	mov	r0, sp
   def72:	9600      	str	r6, [sp, #0]
   def74:	f7ff fd59 	bl	dea2a <__lo0bits>
   def78:	9900      	ldr	r1, [sp, #0]
   def7a:	b300      	cbz	r0, defbe <__d2b+0x72>
   def7c:	9a01      	ldr	r2, [sp, #4]
   def7e:	f1c0 0320 	rsb	r3, r0, #32
   def82:	fa02 f303 	lsl.w	r3, r2, r3
   def86:	430b      	orrs	r3, r1
   def88:	40c2      	lsrs	r2, r0
   def8a:	6163      	str	r3, [r4, #20]
   def8c:	9201      	str	r2, [sp, #4]
   def8e:	9b01      	ldr	r3, [sp, #4]
   def90:	61a3      	str	r3, [r4, #24]
   def92:	2b00      	cmp	r3, #0
   def94:	bf14      	ite	ne
   def96:	2202      	movne	r2, #2
   def98:	2201      	moveq	r2, #1
   def9a:	6122      	str	r2, [r4, #16]
   def9c:	b1d5      	cbz	r5, defd4 <__d2b+0x88>
   def9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   defa2:	4405      	add	r5, r0
   defa4:	f8c9 5000 	str.w	r5, [r9]
   defa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   defac:	f8c8 0000 	str.w	r0, [r8]
   defb0:	4620      	mov	r0, r4
   defb2:	b003      	add	sp, #12
   defb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   defb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   defbc:	e7d5      	b.n	def6a <__d2b+0x1e>
   defbe:	6161      	str	r1, [r4, #20]
   defc0:	e7e5      	b.n	def8e <__d2b+0x42>
   defc2:	a801      	add	r0, sp, #4
   defc4:	f7ff fd31 	bl	dea2a <__lo0bits>
   defc8:	9b01      	ldr	r3, [sp, #4]
   defca:	6163      	str	r3, [r4, #20]
   defcc:	2201      	movs	r2, #1
   defce:	6122      	str	r2, [r4, #16]
   defd0:	3020      	adds	r0, #32
   defd2:	e7e3      	b.n	def9c <__d2b+0x50>
   defd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   defd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   defdc:	f8c9 0000 	str.w	r0, [r9]
   defe0:	6918      	ldr	r0, [r3, #16]
   defe2:	f7ff fd02 	bl	de9ea <__hi0bits>
   defe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   defea:	e7df      	b.n	defac <__d2b+0x60>

000defec <__ratio>:
   defec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   deff0:	4688      	mov	r8, r1
   deff2:	4669      	mov	r1, sp
   deff4:	4681      	mov	r9, r0
   deff6:	f7ff ff59 	bl	deeac <__b2d>
   deffa:	a901      	add	r1, sp, #4
   deffc:	4640      	mov	r0, r8
   deffe:	ec55 4b10 	vmov	r4, r5, d0
   df002:	f7ff ff53 	bl	deeac <__b2d>
   df006:	f8d9 3010 	ldr.w	r3, [r9, #16]
   df00a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   df00e:	eba3 0c02 	sub.w	ip, r3, r2
   df012:	e9dd 3200 	ldrd	r3, r2, [sp]
   df016:	1a9b      	subs	r3, r3, r2
   df018:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   df01c:	ec51 0b10 	vmov	r0, r1, d0
   df020:	2b00      	cmp	r3, #0
   df022:	bfd6      	itet	le
   df024:	460a      	movle	r2, r1
   df026:	462a      	movgt	r2, r5
   df028:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   df02c:	468b      	mov	fp, r1
   df02e:	462f      	mov	r7, r5
   df030:	bfd4      	ite	le
   df032:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   df036:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   df03a:	4620      	mov	r0, r4
   df03c:	ee10 2a10 	vmov	r2, s0
   df040:	465b      	mov	r3, fp
   df042:	4639      	mov	r1, r7
   df044:	f7fd fd00 	bl	dca48 <__aeabi_ddiv>
   df048:	ec41 0b10 	vmov	d0, r0, r1
   df04c:	b003      	add	sp, #12
   df04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000df052 <__copybits>:
   df052:	3901      	subs	r1, #1
   df054:	b570      	push	{r4, r5, r6, lr}
   df056:	1149      	asrs	r1, r1, #5
   df058:	6914      	ldr	r4, [r2, #16]
   df05a:	3101      	adds	r1, #1
   df05c:	f102 0314 	add.w	r3, r2, #20
   df060:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   df064:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   df068:	1f05      	subs	r5, r0, #4
   df06a:	42a3      	cmp	r3, r4
   df06c:	d30c      	bcc.n	df088 <__copybits+0x36>
   df06e:	1aa3      	subs	r3, r4, r2
   df070:	3b11      	subs	r3, #17
   df072:	f023 0303 	bic.w	r3, r3, #3
   df076:	3211      	adds	r2, #17
   df078:	42a2      	cmp	r2, r4
   df07a:	bf88      	it	hi
   df07c:	2300      	movhi	r3, #0
   df07e:	4418      	add	r0, r3
   df080:	2300      	movs	r3, #0
   df082:	4288      	cmp	r0, r1
   df084:	d305      	bcc.n	df092 <__copybits+0x40>
   df086:	bd70      	pop	{r4, r5, r6, pc}
   df088:	f853 6b04 	ldr.w	r6, [r3], #4
   df08c:	f845 6f04 	str.w	r6, [r5, #4]!
   df090:	e7eb      	b.n	df06a <__copybits+0x18>
   df092:	f840 3b04 	str.w	r3, [r0], #4
   df096:	e7f4      	b.n	df082 <__copybits+0x30>

000df098 <__any_on>:
   df098:	f100 0214 	add.w	r2, r0, #20
   df09c:	6900      	ldr	r0, [r0, #16]
   df09e:	114b      	asrs	r3, r1, #5
   df0a0:	4298      	cmp	r0, r3
   df0a2:	b510      	push	{r4, lr}
   df0a4:	db11      	blt.n	df0ca <__any_on+0x32>
   df0a6:	dd0a      	ble.n	df0be <__any_on+0x26>
   df0a8:	f011 011f 	ands.w	r1, r1, #31
   df0ac:	d007      	beq.n	df0be <__any_on+0x26>
   df0ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   df0b2:	fa24 f001 	lsr.w	r0, r4, r1
   df0b6:	fa00 f101 	lsl.w	r1, r0, r1
   df0ba:	428c      	cmp	r4, r1
   df0bc:	d10b      	bne.n	df0d6 <__any_on+0x3e>
   df0be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   df0c2:	4293      	cmp	r3, r2
   df0c4:	d803      	bhi.n	df0ce <__any_on+0x36>
   df0c6:	2000      	movs	r0, #0
   df0c8:	bd10      	pop	{r4, pc}
   df0ca:	4603      	mov	r3, r0
   df0cc:	e7f7      	b.n	df0be <__any_on+0x26>
   df0ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   df0d2:	2900      	cmp	r1, #0
   df0d4:	d0f5      	beq.n	df0c2 <__any_on+0x2a>
   df0d6:	2001      	movs	r0, #1
   df0d8:	e7f6      	b.n	df0c8 <__any_on+0x30>

000df0da <_calloc_r>:
   df0da:	b513      	push	{r0, r1, r4, lr}
   df0dc:	434a      	muls	r2, r1
   df0de:	4611      	mov	r1, r2
   df0e0:	9201      	str	r2, [sp, #4]
   df0e2:	f7f9 ffd7 	bl	d9094 <_malloc_r>
   df0e6:	4604      	mov	r4, r0
   df0e8:	b118      	cbz	r0, df0f2 <_calloc_r+0x18>
   df0ea:	9a01      	ldr	r2, [sp, #4]
   df0ec:	2100      	movs	r1, #0
   df0ee:	f7fd ff85 	bl	dcffc <memset>
   df0f2:	4620      	mov	r0, r4
   df0f4:	b002      	add	sp, #8
   df0f6:	bd10      	pop	{r4, pc}

000df0f8 <_open_r>:
   df0f8:	b538      	push	{r3, r4, r5, lr}
   df0fa:	4d07      	ldr	r5, [pc, #28]	; (df118 <_open_r+0x20>)
   df0fc:	4604      	mov	r4, r0
   df0fe:	4608      	mov	r0, r1
   df100:	4611      	mov	r1, r2
   df102:	2200      	movs	r2, #0
   df104:	602a      	str	r2, [r5, #0]
   df106:	461a      	mov	r2, r3
   df108:	f7f9 fd10 	bl	d8b2c <_open>
   df10c:	1c43      	adds	r3, r0, #1
   df10e:	d102      	bne.n	df116 <_open_r+0x1e>
   df110:	682b      	ldr	r3, [r5, #0]
   df112:	b103      	cbz	r3, df116 <_open_r+0x1e>
   df114:	6023      	str	r3, [r4, #0]
   df116:	bd38      	pop	{r3, r4, r5, pc}
   df118:	2003e7ec 	.word	0x2003e7ec

000df11c <_read_r>:
   df11c:	b538      	push	{r3, r4, r5, lr}
   df11e:	4d07      	ldr	r5, [pc, #28]	; (df13c <_read_r+0x20>)
   df120:	4604      	mov	r4, r0
   df122:	4608      	mov	r0, r1
   df124:	4611      	mov	r1, r2
   df126:	2200      	movs	r2, #0
   df128:	602a      	str	r2, [r5, #0]
   df12a:	461a      	mov	r2, r3
   df12c:	f7f9 fd0e 	bl	d8b4c <_read>
   df130:	1c43      	adds	r3, r0, #1
   df132:	d102      	bne.n	df13a <_read_r+0x1e>
   df134:	682b      	ldr	r3, [r5, #0]
   df136:	b103      	cbz	r3, df13a <_read_r+0x1e>
   df138:	6023      	str	r3, [r4, #0]
   df13a:	bd38      	pop	{r3, r4, r5, pc}
   df13c:	2003e7ec 	.word	0x2003e7ec

000df140 <nan>:
   df140:	ed9f 0b01 	vldr	d0, [pc, #4]	; df148 <nan+0x8>
   df144:	4770      	bx	lr
   df146:	bf00      	nop
   df148:	00000000 	.word	0x00000000
   df14c:	7ff80000 	.word	0x7ff80000

000df150 <nanf>:
   df150:	ed9f 0a01 	vldr	s0, [pc, #4]	; df158 <nanf+0x8>
   df154:	4770      	bx	lr
   df156:	bf00      	nop
   df158:	7fc00000 	.word	0x7fc00000

000df15c <__ascii_wctomb>:
   df15c:	b149      	cbz	r1, df172 <__ascii_wctomb+0x16>
   df15e:	2aff      	cmp	r2, #255	; 0xff
   df160:	bf85      	ittet	hi
   df162:	238a      	movhi	r3, #138	; 0x8a
   df164:	6003      	strhi	r3, [r0, #0]
   df166:	700a      	strbls	r2, [r1, #0]
   df168:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   df16c:	bf98      	it	ls
   df16e:	2001      	movls	r0, #1
   df170:	4770      	bx	lr
   df172:	4608      	mov	r0, r1
   df174:	4770      	bx	lr
	...

000df178 <__aeabi_d2lz>:
   df178:	b538      	push	{r3, r4, r5, lr}
   df17a:	2200      	movs	r2, #0
   df17c:	2300      	movs	r3, #0
   df17e:	4604      	mov	r4, r0
   df180:	460d      	mov	r5, r1
   df182:	f7fd fda9 	bl	dccd8 <__aeabi_dcmplt>
   df186:	b928      	cbnz	r0, df194 <__aeabi_d2lz+0x1c>
   df188:	4620      	mov	r0, r4
   df18a:	4629      	mov	r1, r5
   df18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   df190:	f7fd beac 	b.w	dceec <__aeabi_d2ulz>
   df194:	4620      	mov	r0, r4
   df196:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   df19a:	f7fd fea7 	bl	dceec <__aeabi_d2ulz>
   df19e:	4240      	negs	r0, r0
   df1a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df1a4:	bd38      	pop	{r3, r4, r5, pc}
   df1a6:	bf00      	nop

000df1a8 <dynalib_user>:
   df1a8:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   df1b8:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   df1c8:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   df1d8:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   df1e8:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   df1f8:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   df208:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   df218:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   df228:	4400 6369 6e6f 656e 7463 6465 7b00 6122     .Diconnected.{"a
   df238:	656c 7472 2273 253a 2c69 7422 6d69 7365     lerts":%i,"times
   df248:	6174 706d 3a22 6c25 3075 3030 7d20 5500     tamp":%lu000 }.U
   df258:	6962 6f64 7374 415f 656c 7472 485f 6f6f     bidots_Alert_Hoo
   df268:	006b 227b 6f73 6c69 6f4d 7369 7574 6572     k.{"soilMoisture
   df278:	3a22 6925 202c 7722 7461 7265 6e69 2267     ":%i, "watering"
   df288:	253a 2c69 2220 6162 7474 7265 2279 253a     :%i, "battery":%
   df298:	2c69 6b22 7965 2231 223a 7325 2c22 7422     i,"key1":"%s","t
   df2a8:	6d65 2270 253a 2c69 2220 6572 6573 7374     emp":%i, "resets
   df2b8:	3a22 6925 202c 6122 656c 7472 2273 253a     ":%i, "alerts":%
   df2c8:	2c69 2220 6f63 6e6e 6365 7474 6d69 2265     i, "connecttime"
   df2d8:	253a 2c69 7422 6d69 7365 6174 706d 3a22     :%i,"timestamp":
   df2e8:	6c25 3075 3030 007d 6255 6469 746f 2d73     %lu000}.Ubidots-
   df2f8:	7141 6175 614d 7473 7265 472d 7261 6564     AquaMaster-Garde
   df308:	2d6e 3176 2500 2073 3a53 3225 302e 2566     n-v1.%s S:%2.0f%
   df318:	2c25 5120 253a 2e32 6630 2525 0020 414e     %, Q:%2.0f%% .NA
   df328:	2500 3a69 3030 4e00 746f 4c20 776f 5020     .%i:00.Not Low P
   df338:	776f 7265 2500 2069 6573 6f63 646e 0073     ower.%i seconds.
   df348:	3225 312e 2066 2525 4300 6e6f 656e 7463     %2.1f %%.Connect
   df358:	6465 6920 206e 6925 7320 6365 0073 6543     ed in %i secs.Ce
   df368:	6c6c 6c75 7261 4e00 206f 6144 6174 5200     llular.No Data.R
   df378:	7365 6f70 736e 2065 6552 6563 7669 6465     esponse Received
   df388:	5500 6b6e 6f6e 6e77 7220 7365 6f70 736e     .Unknown respons
   df398:	2065 6572 6563 6976 6465 2520 0069 6255     e recevied %i.Ub
   df3a8:	6469 746f 2073 6f48 6b6f 4800 7261 2064     idots Hook.Hard 
   df3b8:	6552 6573 2074 6e69 3220 7320 6365 6e6f     Reset in 2 secon
   df3c8:	7364 5300 7465 5320 6c6f 7261 5020 776f     ds.Set Solar Pow
   df3d8:	7265 6465 4d20 646f 0065 6c43 6165 6572     ered Mode.Cleare
   df3e8:	2064 6f53 616c 2072 6f50 6577 6572 2064     d Solar Powered 
   df3f8:	6f4d 6564 5300 7465 5620 7265 6f62 6573     Mode.Set Verbose
   df408:	4d20 646f 0065 6c43 6165 6572 2064 6556      Mode.Cleared Ve
   df418:	6272 736f 2065 6f4d 6564 4f00 6570 206e     rbose Mode.Open 
   df428:	6974 656d 7320 7465 7420 206f 6925 4300     time set to %i.C
   df438:	6f6c 6973 676e 7420 6d69 2065 6573 2074     losing time set 
   df448:	6f74 2520 0069 6157 6574 6972 676e 6620     to %i.Watering f
   df458:	6e75 7463 6f69 206e 6964 6173 6c62 6465     unction disabled
   df468:	5300 7379 6574 006d 7246 6d6f 2520 2073     .System.From %s 
   df478:	6f74 2520 0073 7453 7461 2065 7254 6e61     to %s.State Tran
   df488:	6973 6974 6e6f 5200 6e75 696e 676e 4400     sition.Running.D
   df498:	6961 796c 4320 656c 6e61 7075 4c00 616f     aily Cleanup.Loa
   df4a8:	6964 676e 5320 7379 6574 206d 6544 6166     ding System Defa
   df4b8:	6c75 7374 4c00 616f 6964 676e 7320 7379     ults.Loading sys
   df4c8:	6574 206d 6564 6166 6c75 7374 5300 696f     tem defaults.Soi
   df4d8:	4d6c 696f 7473 7275 0065 6953 6e67 6c61     lMoisture.Signal
   df4e8:	5200 7365 7465 6f43 6e75 0074 6554 706d     .ResetCount.Temp
   df4f8:	7265 7461 7275 0065 6552 656c 7361 0065     erature.Release.
   df508:	7473 7461 4f65 4366 6768 6c00 776f 6f50     stateOfChg.lowPo
   df518:	6577 4d72 646f 0065 6c43 736f 5465 6d69     werMode.CloseTim
   df528:	0065 6c41 7265 7374 5400 6d69 4f65 6666     e.Alerts.TimeOff
   df538:	6573 0074 6142 7474 7265 4379 6e6f 6574     set.BatteryConte
   df548:	7478 5700 7461 7265 6e69 5067 7463 5700     xt.WateringPct.W
   df558:	7461 7265 6e69 4467 7275 7461 6f69 006e     ateringDuration.
   df568:	6148 6472 6552 6573 0074 6553 646e 6f4e     HardReset.SendNo
   df578:	0077 6f4c 5077 776f 7265 6f4d 6564 5300     w.LowPowerMode.S
   df588:	6c6f 7261 4d2d 646f 0065 6556 6272 736f     olar-Mode.Verbos
   df598:	2d65 6f4d 6564 5300 7465 542d 6d69 7a65     e-Mode.Set-Timez
   df5a8:	6e6f 0065 6553 2d74 5344 4f54 6666 6573     one.Set-DSTOffse
   df5b8:	0074 6553 2d74 704f 6e65 6954 656d 5300     t.Set-OpenTime.S
   df5c8:	7465 432d 6f6c 6573 5300 7465 6157 6574     et-Close.SetWate
   df5d8:	5472 7268 7365 6f68 646c 5300 7465 6157     rThreshold.SetWa
   df5e8:	6574 4472 7275 7461 6f69 006e 3225 312e     terDuration.%2.1
   df5f8:	2066 5455 0043 7453 7261 7574 2070 6f63     f UTC.Startup co
   df608:	706d 656c 6574 4900 206e 6874 2065 6964     mplete.In the di
   df618:	6373 6e6f 656e 7463 6620 6f72 206d 6150     sconnect from Pa
   df628:	7472 6369 656c 6620 6e75 7463 6f69 006e     rticle function.
   df638:	6f43 6e6e 6365 6974 676e 7320 6174 6574     Connecting state
   df648:	6220 7475 6120 726c 6165 7964 6320 6e6f      but already con
   df658:	656e 7463 6465 4300 6e6f 656e 7463 6e69     nected.Connectin
   df668:	2067 7473 7461 2065 7562 2074 6f6c 2077     g state but low 
   df678:	6162 7474 7265 2079 6f6d 6564 4300 6e6f     battery mode.Con
   df688:	656e 7463 6e69 2067 7562 2074 353c 2530     necting but <50%
   df698:	2025 6863 7261 6567 2d20 6620 756f 2072     % charge - four 
   df6a8:	6f68 7275 7320 6863 6465 6c75 0065 6f43     hour schedule.Co
   df6b8:	6e6e 6365 6974 676e 6220 7475 3520 2d30     nnecting but 50-
   df6c8:	3536 2525 6320 6168 6772 2065 202d 7774     65%% charge - tw
   df6d8:	206f 6f68 7275 7320 6863 6465 6c75 0065     o hour schedule.
   df6e8:	6c43 756f 2064 6f63 6e6e 6365 6974 6e6f     Cloud connection
   df6f8:	7320 6375 6563 7373 7566 006c 6c63 756f      successful.clou
   df708:	2064 6f63 6e6e 6365 6974 6e6f 7520 736e     d connection uns
   df718:	6375 6563 7373 7566 006c 6157 6574 6972     uccessful.Wateri
   df728:	676e 7b00 6422 7275 7461 6f69 226e 253a     ng.{"duration":%
   df738:	7d69 5200 6361 6968 2d6f 6157 6574 4772     i}.Rachio-WaterG
   df748:	7261 6564 006e 6f4e 7720 7461 7265 6e69     arden.No waterin
   df758:	2067 656e 6465 6465 6120 2074 6874 7369     g needed at this
   df768:	7420 6d69 0065 6166 6c69 6465 7420 206f      time.failed to 
   df778:	6f63 6e6e 6365 2074 6f74 6320 6f6c 6475     connect to cloud
   df788:	202c 6f64 6e69 2067 6564 7065 7220 7365     , doing deep res
   df798:	7465 4500 7272 726f 5320 6174 6574 2d20     et.Error State -
   df7a8:	5320 7379 6574 206d 6552 6573 0074 7453      System Reset.St
   df7b8:	7461 0065 7245 6f72 2072 7453 7461 2065     ate.Error State 
   df7c8:	202d 7546 6c6c 4d20 646f 6d65 5220 7365     - Full Modem Res
   df7d8:	7465 4900 206e 6874 2065 6966 6d72 6177     et.In the firmwa
   df7e8:	6572 7520 6470 7461 2065 7473 7461 0065     re update state.
   df7f8:	6966 6d72 6177 6572 7520 6470 7461 2065     firmware update 
   df808:	6f63 706d 656c 6574 0064 6966 6d72 6177     completed.firmwa
   df818:	6572 7520 6470 7461 2065 6974 656d 2064     re update timed 
   df828:	756f 0074 754f 2074 666f 6d20 6d65 726f     out.Out of memor
   df838:	2079 636f 7563 7272 6465 7320 7a69 3d65     y occurred size=
   df848:	6425 4d00 6d65 726f 0079 6150 7472 6369     %d.Memory.Partic
   df858:	656c 6320 6e6f 656e 7463 6f69 206e 6166     le connection fa
   df868:	6c69 6465 202c 6572 6576 7472 6e69 2067     iled, reverting 
   df878:	6f74 7420 6568 6320 6e6f 656e 7463 6e69     to the connectin
   df888:	2067 7473 7461 0065                         g state.

000df890 <_ZTV5Timer>:
	...
   df898:	42dd 000d 4331 000d 41a1 000d               .B..1C...A..

000df8a4 <_ZTVN5spark10LogHandlerE>:
	...
   df8b4:	40a5 000d 40c9 000d                         .@...@..

000df8bc <_ZTVN5spark16SerialLogHandlerE>:
	...
   df8c4:	4275 000d 42a9 000d aee5 000d 40cb 000d     uB...B.......@..

000df8d4 <_ZTV8MB85RC64>:
	...
   df8dc:	4179 000d 418d 000d 7451 000d 74e7 000d     yA...A..Qt...t..
   df8ec:	7569 000d f1bc 000d f1c4 000d f1c9 000d     iu..............
   df8fc:	f1ce 000d f1d2 000d f1d7 000d f1dc 000d     ................
   df90c:	f1e0 000d f1eb 000d f1f6 000d               ............

000df918 <_ZL17FRAMversionNumber>:
   df918:	0001 0000 6954 656d 7a20 6e6f 2065 666f     ....Time zone of
   df928:	7366 7465 2520 0069 5344 2054 666f 7366     fset %i.DST offs
   df938:	7465 2520 2e32 6631 6600 6961 656c 2064     et %2.1f.failed 
   df948:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   df958:	3025 7832 6320 756f 746e 253d 0075 6166     %02x count=%u.fa
   df968:	6c69 6465 7420 206f 6572 6461 7220 6765     iled to read reg
   df978:	6441 7264 253d 3230 2078 7473 7461 253d     Addr=%02x stat=%
   df988:	0064 4f46 5455 6420 6469 6e20 746f 6720     d.FOUT did not g
   df998:	206f 4948 4847 6e00 746f 6420 7465 6365     o HIGH.not detec
   df9a8:	6574 0064 6166 6c69 6465 7420 206f 7277     ted.failed to wr
   df9b8:	7469 2065 6572 4167 6464 3d72 3025 7832     ite regAddr=%02x
   df9c8:	7320 6174 3d74 6425 7300 7465 4457 2054      stat=%d.setWDT 
   df9d8:	6425 7700 7461 6863 6f64 2067 6c63 6165     %d.watchdog clea
   df9e8:	6572 2064 5262 7365 6c75 3d74 6425 7700     red bResult=%d.w
   df9f8:	7461 6863 6f64 2067 6573 2074 6f66 7275     atchdog set four
   dfa08:	6553 7363 253d 2064 5262 7365 6c75 3d74     Secs=%d bResult=
   dfa18:	6425 5700 5441 4843 4f44 0047 4544 5045     %d.WATCHDOG.DEEP
   dfa28:	505f 574f 5245 445f 574f 004e 4f43 4e55     _POWER_DOWN.COUN
   dfa38:	4454 574f 5f4e 4954 454d 0052 4c41 5241     TDOWN_TIMER.ALAR
   dfa48:	004d 6166 6c69 7275 2065 6e69 7520 6470     M.failure in upd
   dfa58:	7461 5765 6b61 5265 6165 6f73 206e 6425     ateWakeReason %d
   dfa68:	7700 6b61 2065 6572 7361 6e6f 3d20 2520     .wake reason = %
   dfa78:	0073 6166 6c69 7275 2065 6e69 7320 7465     s.failure in set
   dfa88:	6f43 6e75 6474 776f 546e 6d69 7265 2520     CountdownTimer %
   dfa98:	0064 6166 6c69 7275 2065 6e69 6420 6565     d.failure in dee
   dfaa8:	5070 776f 7265 6f44 6e77 2520 0064 4552     pPowerDown %d.RE
   dfab8:	5f47 4c53 4545 5f50 5443 4c52 303d 2578     G_SLEEP_CTRL=0x%
   dfac8:	7832 6400 6469 276e 2074 6f70 6577 2072     2x.didn't power 
   dfad8:	6f64 6e77 2500 3430 2d64 3025 6432 252d     down.%04d-%02d-%
   dfae8:	3230 2064 3025 6432 253a 3230 3a64 3025     02d %02d:%02d:%0
   dfaf8:	6432 6700 7465 7452 4163 5473 206d 7325     2d.getRtcAsTm %s
   dfb08:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   dfb18:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   dfb28:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   dfb38:	3142 3038 0035 6573 5274 6374 7341 6d54     B1805.setRtcAsTm
   dfb48:	2520 0073 6166 6c69 7275 2065 6e69 7320      %s.failure in s
   dfb58:	7465 7452 4663 6f72 546d 206d 6425 7300     etRtcFromTm %d.s
   dfb68:	7465 5220 4354 6620 6f72 206d 6c63 756f     et RTC from clou
   dfb78:	2064 7325 6100 7070 612e 3162 3038 0035     d %s.app.ab1805.

000dfb88 <_ZTV6AB1805>:
	...
   dfb90:	64b9 000d 64bb 000d 6b05 000d 6b8b 000d     .d...d...k...k..
   dfba0:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   dfbb0:	0068 0000                                   h...

000dfbb4 <_ZTV17BackgroundPublish>:
	...
   dfbbc:	70a5 000d 70c1 000d 7277 7469 4465 7461     .p...p..writeDat
   dfbcc:	2061 6166 6c69 6465 6420 7275 6e69 2067     a failed during 
   dfbdc:	7265 7361 2065 7266 6d61 6441 7264 253d     erase framAddr=%
   dfbec:	0075 0000                                   u...

000dfbf0 <_ZTV6MB85RC>:
	...
   dfbf8:	739f 000d 73a1 000d 7451 000d 74e7 000d     .s...s..Qt...t..
   dfc08:	7569 000d 6966 656c 754e 3d6d 6425 7320     iu..fileNum=%d s
   dfc18:	7a69 3d65 6c25 0064 6572 6461 7551 7565     ize=%ld.readQueu
   dfc28:	4665 6c69 2065 6425 6520 6576 746e 253d     eFile %d event=%
   dfc38:	2073 6164 6174 253d 0073 6572 6461 7551     s data=%s.readQu
   dfc48:	7565 4665 6c69 2065 6425 6320 726f 7572     eueFile %d corru
   dfc58:	7470 6465 6520 6576 746e 6e20 6d61 2065     pted event name 
   dfc68:	726f 6420 7461 0061 6572 6461 7551 7565     or data.readQueu
   dfc78:	4665 6c69 2065 6425 6220 6461 6d20 6761     eFile %d bad mag
   dfc88:	6369 253d 3830 786c 7620 7265 6973 6e6f     ic=%08lx version
   dfc98:	253d 2075 6568 6461 7265 6953 657a 253d     =%u headerSize=%
   dfca8:	2075 616e 656d 654c 3d6e 7525 2f00 7375     u nameLen=%u./us
   dfcb8:	2f72 7570 7162 6575 6575 7700 6972 6574     r/pubqueue.write
   dfcc8:	7551 7565 5465 466f 6c69 7365 6620 6c69     QueueToFiles fil
   dfcd8:	4e65 6d75 253d 0064 6572 6573 2074 726f     eNum=%d.reset or
   dfce8:	6420 7369 6f63 6e6e 6365 2074 7665 6e65      disconnect even
   dfcf8:	2c74 7320 7661 2065 6966 656c 2073 6f74     t, save files to
   dfd08:	7120 6575 6575 7200 6d61 6400 7369 6163      queue.ram.disca
   dfd18:	6472 6e69 2067 6f63 7272 7075 6574 2064     rding corrupted 
   dfd28:	6966 656c 2520 0064 7570 6c62 7369 6968     file %d.publishi
   dfd38:	676e 2520 2073 7665 6e65 3d74 7325 6420     ng %s event=%s d
   dfd48:	7461 3d61 7325 6400 7369 6163 6472 6465     ata=%s.discarded
   dfd58:	6520 6576 746e 2520 0064 6977 6874 6152      event %d.withRa
   dfd68:	516d 6575 6575 6953 657a 2528 2975 7700     mQueueSize(%u).w
   dfd78:	7469 4668 6c69 5165 6575 6575 6953 657a     ithFileQueueSize
   dfd88:	2528 2975 5300 5359 4554 5f4d 4854 4552     (%u).SYSTEM_THRE
   dfd98:	4441 4528 414e 4c42 4445 2029 7369 7220     AD(ENABLED) is r
   dfda8:	7165 6975 6572 0064 7570 6c62 7369 4368     equired.publishC
   dfdb8:	6d6f 6f6d 206e 7665 6e65 4e74 6d61 3d65     ommon eventName=
   dfdc8:	7325 6520 6576 746e 6144 6174 253d 0073     %s eventData=%s.
   dfdd8:	6163 6e6e 746f 6320 6572 7461 2065 7473     cannot create st
   dfde8:	3a64 643a 7165 6575 6c20 7261 6567 2072     d::deque larger 
   dfdf8:	6874 6e61 6d20 7861 735f 7a69 2865 0029     than max_size().
   dfe08:	6966 656c 7551 7565 4c65 6e65 253d 2075     fileQueueLen=%u 
   dfe18:	6172 516d 6575 6575 654c 3d6e 7525 6320     ramQueueLen=%u c
   dfe28:	6e6f 656e 7463 6465 253d 0064 7571 7565     onnected=%d.queu
   dfe38:	6465 7420 206f 6172 516d 6575 6575 7000     ed to ramQueue.p
   dfe48:	6275 696c 6873 7320 6375 6563 7373 2520     ublish success %
   dfe58:	0064 6572 6f6d 6576 2064 6966 656c 2520     d.removed file %
   dfe68:	0064 7570 6c62 7369 2068 6166 6c69 6465     d.publish failed
   dfe78:	2520 0064 7277 7469 6e69 2067 6f74 6620      %d.writing to f
   dfe88:	6c69 7365 6120 7466 7265 7020 6275 696c     iles after publi
   dfe98:	6873 6620 6961 756c 6572 6100 7070 702e     sh failure.app.p
   dfea8:	6275 0071                                   ubq.

000dfeac <_ZTV17PublishQueuePosix>:
	...
   dfeb4:	7ded 000d 80c5 000d 80e9 000d 3025 6438     .}..........%08d
   dfec4:	2f00 7200 6d65 766f 6465 2520 0073 7325     ./.removed %s.%s
   dfed4:	6520 6978 7473 2073 6e61 2064 7369 6120      exists and is a
   dfee4:	6420 7269 6365 6f74 7972 6600 6c69 2065      directory.file 
   dfef4:	6e69 7420 6568 7720 7961 202c 6564 656c     in the way, dele
   dff04:	6974 676e 2520 0073 7473 7461 6620 6c69     ting %s.stat fil
   dff14:	6465 6520 7272 6f6e 253d 0064 7263 6165     ed errno=%d.crea
   dff24:	6574 2064 6964 2072 7325 6d00 646b 7269     ted dir %s.mkdir
   dff34:	6620 6961 656c 2064 7265 6e72 3d6f 6425      failed errno=%d
   dff44:	7500 636e 6e6f 6966 7567 6572 2064 6964     .unconfigured di
   dff54:	5072 7461 0068 6373 6e61 696e 676e 2520     rPath.scanning %
   dff64:	2073 6977 6874 7020 7461 6574 6e72 2520     s with pattern %
   dff74:	0073 6461 6964 676e 7420 206f 7571 7565     s.adding to queu
   dff84:	2065 6425 2520 0073 6567 4674 6c69 4665     e %d %s.getFileF
   dff94:	6f72 516d 6575 6575 7220 7465 7275 656e     romQueue returne
   dffa4:	2064 6425 6100 7070 732e 7165 6966 656c     d %d.app.seqfile
   dffb4:	0000 0000                                   ....

000dffb8 <_ZTV14SequentialFile>:
	...
   dffc0:	8445 000d 8471 000d 80fd 000d               E...q.......

000dffcc <_ZTVN5spark13CellularClassE>:
	...
   dffd4:	91bb 000d 91b1 000d 91a7 000d 9169 000d     ............i...
   dffe4:	919b 000d 42bd 000d b23d 000d b245 000d     .....B..=...E...
   dfff4:	918f 000d 9187 000d 917d 000d 9173 000d     ........}...s...
   e0004:	b275 000d                                   u...

000e0008 <_ZTV14CellularSignal>:
	...
   e0010:	9269 000d 9291 000d 926b 000d 92a1 000d     i.......k.......
   e0020:	92d5 000d 9301 000d 9335 000d 9385 000d     ........5.......
   e0030:	926f 000d 928b 000d fffc ffff 0000 0000     o...............
   e0040:	93ab 000d                                   ....

000e0044 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e004c:	93cb 000d 93d1 000d 940f 000d 93df 000d     ................
   e005c:	93cd 000d                                   ....

000e0060 <_ZTVN5spark13EthernetClassE>:
	...
   e0068:	9a1b 000d 9a11 000d 9a07 000d 99fd 000d     ................
   e0078:	99f1 000d 99e5 000d b23d 000d b245 000d     ........=...E...
   e0088:	99d9 000d 99d1 000d 99c7 000d 99bd 000d     ................
   e0098:	b275 000d                                   u...

000e009c <_ZTV7TwoWire>:
	...
   e00a4:	9c11 000d 9c5b 000d 9c33 000d 9c13 000d     ....[...3.......
   e00b4:	9c3b 000d 9c43 000d 9c4b 000d 9c53 000d     ;...C...K...S...

000e00c4 <_ZTV9IPAddress>:
	...
   e00cc:	9df1 000d 9de1 000d 9de3 000d 2575 3430     ............u%04
   e00dc:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   e00ec:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   e00fc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   e010c:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   e011c:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   e012c:	6c69 2073 203d 0d00 000a 0063 6e6c 6600     ils = ....c.ln.f
   e013c:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000e014c <_ZTVN5spark16JSONStreamWriterE>:
	...
   e0154:	a2ad 000d a2d3 000d a291 000d 9ef1 000d     ................

000e0164 <_ZTVN5spark16StreamLogHandlerE>:
	...
   e016c:	a701 000d a719 000d aee5 000d 40cb 000d     .............@..

000e017c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e0184:	a72d 000d a741 000d b089 000d a299 000d     -...A...........

000e0194 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e019c:	a2ab 000d a2e1 000d ae21 000d a29b 000d     ........!.......

000e01ac <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e01b4:	a2a9 000d a2ef 000d a649 000d a30d 000d     ........I.......

000e01c4 <_ZTVN5spark12NetworkClassE>:
	...
   e01cc:	b1fd 000d b207 000d b211 000d b21b 000d     ................
   e01dc:	b225 000d b231 000d b23d 000d b245 000d     %...1...=...E...
   e01ec:	b24d 000d b259 000d b261 000d b26b 000d     M...Y...a...k...
   e01fc:	b275 000d 6977 6972 676e 5300 7379 6574     u...wiring.Syste
   e020c:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   e021c:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   e022c:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   e023c:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e024c:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000e0258 <_ZTV11USARTSerial>:
	...
   e0260:	bec5 000d bf33 000d bf0b 000d b4bb 000d     ....3...........
   e0270:	bedb 000d bef7 000d bee9 000d bf05 000d     ................
   e0280:	bec7 000d becd 000d                         ........

000e0288 <_ZTV9USBSerial>:
	...
   e0290:	bfd3 000d c03b 000d c011 000d b4bb 000d     ....;...........
   e02a0:	c003 000d bfd5 000d bfe5 000d c035 000d     ............5...
   e02b0:	bff5 000d bfcd 000d                         ........

000e02b8 <_ZSt7nothrow>:
   e02b8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   e02c8:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000e02d9 <day_name.6145>:
   e02d9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e02e9:	6972 6153                                    riSat

000e02ee <mon_name.6146>:
   e02ee:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e02fe:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e030e:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000e0320 <fpi.7566>:
   e0320:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e0330:	0000 0000                                   ....

000e0334 <fpinan.7602>:
   e0334:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e0344:	0000 0000                                   ....

000e0348 <tinytens>:
   e0348:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e0358:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e0368:	6f43 64ac 0628 1168                         Co.d(.h.

000e0370 <_ctype_>:
   e0370:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e0380:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e0390:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e03a0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e03b0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e03c0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e03d0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e03e0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e03f0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e0474 <_C_numeric_locale>:
   e0474:	022c 000e 0135 000e e120 2003 4f50 4953     ,...5... .. POSI
   e0484:	0058 0000                                   X...

000e0488 <__mprec_bigtens>:
   e0488:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e0498:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e04a8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e04b0 <__mprec_tens>:
   e04b0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e04c0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e04d0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e04e0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e04f0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e0500:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e0510:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e0520:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e0530:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e0540:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e0550:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e0560:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e0570:	9db4 79d9 7843 44ea                         ...yCx.D

000e0578 <p05.7490>:
   e0578:	0005 0000 0019 0000 007d 0000               ........}...

000e0584 <link_const_variable_data_end>:
   e0584:	000d581d 	.word	0x000d581d
   e0588:	000d64ad 	.word	0x000d64ad
   e058c:	000d6f85 	.word	0x000d6f85
   e0590:	000d80b5 	.word	0x000d80b5
   e0594:	000d878d 	.word	0x000d878d
   e0598:	000d9159 	.word	0x000d9159
   e059c:	000d9239 	.word	0x000d9239
   e05a0:	000d9a25 	.word	0x000d9a25
   e05a4:	000daed5 	.word	0x000daed5
   e05a8:	000db349 	.word	0x000db349
   e05ac:	000db5c9 	.word	0x000db5c9
   e05b0:	000dba5d 	.word	0x000dba5d
   e05b4:	000dbeb1 	.word	0x000dbeb1

000e05b8 <link_constructors_end>:
	...
